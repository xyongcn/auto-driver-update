module_param_named ['macro', 'include/linux/moduleparam.h', '117', '#define module_param_named(name,value,type,perm) param_check_##type(name, &(value)); module_param_cb(name, &param_ops_##type, &value, perm); __MODULE_PARM_TYPE(name, #type)']
list_empty ['function', 'include/linux/list.h', '186', 'static inline int list_empty(const struct list_head *head)']
list_first_entry ['macro', 'include/linux/list.h', '361', '#define list_first_entry(ptr,type,member) list_entry((ptr)->next, type, member)']
list_del ['prototype', 'include/linux/list.h', '112', 'extern void list_del(struct list_head *entry);']
list_add ['function', 'include/linux/list.h', '60', 'static inline void list_add(struct list_head *new,struct list_head *head)']
writel ['macfun', 'arch/x86/include/asm/io.h', '63', 'build_mmio_write(writel, "l", unsigned int, "r", :"memory")']
readl ['macfun', 'arch/x86/include/asm/io.h', '55', 'build_mmio_read(readl, "l", unsigned int, "=r", :"memory")']
dev_dbg ['macro', 'include/linux/device.h', '986', '#define dev_dbg(dev,format,arg...) ({ if (0) dev_printk(KERN_DEBUG, dev, format, ##arg); 0; })']
__dynamic_dev_dbg ['prototype', 'include/linux/dynamic_debug.h', '53', 'int __dynamic_dev_dbg(struct _ddebug *descriptor,const struct device *dev,const char *fmt, ...);']
scsi_sglist ['function', 'include/scsi/scsi_cmnd.h', '174', 'static inline struct scatterlist *scsi_sglist(struct scsi_cmnd *cmd)']
scsi_sg_count ['function', 'include/scsi/scsi_cmnd.h', '169', 'static inline unsigned scsi_sg_count(struct scsi_cmnd *cmd)']
pci_map_single ['function', 'include/asm-generic/pci-dma-compat.h', '30', 'pci_map_single(struct pci_dev *hwdev,void *ptr,size_t size,int direction)']
scsi_bufflen ['function', 'include/scsi/scsi_cmnd.h', '179', 'static inline unsigned scsi_bufflen(struct scsi_cmnd *cmd)']
scsi_dma_unmap ['prototype', 'include/scsi/scsi_cmnd.h', '164', 'extern void scsi_dma_unmap(struct scsi_cmnd *cmd);']
pci_unmap_single ['function', 'include/asm-generic/pci-dma-compat.h', '36', 'pci_unmap_single(struct pci_dev *hwdev,dma_addr_t dma_addr,size_t size, int direction)']
pci_alloc_consistent ['function', 'include/asm-generic/pci-dma-compat.h', '16', 'pci_alloc_consistent(struct pci_dev *hwdev,size_t size,dma_addr_t *dma_handle)']
min ['macro', 'include/linux/kernel.h', '560', '#define min(x,y) ({ typeof(x) _min1 = (x); typeof(y) _min2 = (y); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; })']
IS_ALIGNED ['macro', 'include/linux/kernel.h', '47', '#define IS_ALIGNED(x,a) (((x) & ((typeof(x))(a) - 1)) == 0)']
memset ['prototype', 'include/linux/string.h', '100', 'extern void * memset(void *,int,__kernel_size_t);']
scsi_set_resid ['function', 'include/scsi/scsi_cmnd.h', '184', 'static inline void scsi_set_resid(struct scsi_cmnd *cmd,int resid)']
dev_printk ['function', 'include/linux/device.h', '914', 'int dev_printk(const char *level,const struct device *dev,const char *fmt, ...)']
scmd_printk ['macro', 'include/scsi/scsi_device.h', '221', '#define scmd_printk(prefix,scmd,fmt,a...) (scmd)->request->rq_disk ? sdev_printk(prefix, (scmd)->device, "[%s] " fmt, (scmd)->request->rq_disk->disk_name, ##a) : sdev_printk(prefix, (scmd)->device, fmt, ##a)']
KERN_DEBUG ['macro', 'include/linux/printk.h', '16', '#define KERN_DEBUG "<7>"']
barrier ['macro', 'include/linux/compiler-intel.h', '19', '#define barrier() __memory_barrier()']
KERN_ERR ['macro', 'include/linux/printk.h', '12', '#define KERN_ERR "<3>"']
smp_processor_id ['macro', 'include/linux/smp.h', '220', '# define smp_processor_id() raw_smp_processor_id()']
__bad_percpu_size ['prototype', 'arch/x86/include/asm/percpu.h', '88', 'extern void __bad_percpu_size(void);']
__bad_size_call_parameter ['prototype', 'include/linux/percpu.h', '173', 'extern void __bad_size_call_parameter(void);']
memcpy ['prototype', 'include/linux/string.h', '103', 'extern void * memcpy(void *,const void *,__kernel_size_t);']
_raw_spin_lock_irqsave ['macro', 'include/linux/spinlock_api_up.h', '62', '#define _raw_spin_lock_irqsave(lock,flags) __LOCK_IRQSAVE(lock,flags)']
spinlock_check ['function', 'include/linux/spinlock.h', '272', 'static inline raw_spinlock_t *spinlock_check(spinlock_t *lock)']
spin_unlock_irqrestore ['function', 'include/linux/spinlock.h', '338', 'static inline void spin_unlock_irqrestore(spinlock_t *lock,unsigned long flags)']
spin_lock_irqsave ['macro', 'include/linux/spinlock.h', '313', '#define spin_lock_irqsave(lock,flags) do { raw_spin_lock_irqsave(spinlock_check(lock), flags); } while (0)']
DEF_SCSI_QCMD ['macro', 'include/scsi/scsi_host.h', '525', '#define DEF_SCSI_QCMD(func_name) int func_name(struct Scsi_Host *shost, struct scsi_cmnd *cmd) { unsigned long irq_flags; int rc; spin_lock_irqsave(shost->host_lock, irq_flags); scsi_cmd_get_serial(shost, cmd); rc = func_name##_lck (cmd, cmd->scsi_done); spin_unlock_irqrestore(shost->host_lock, irq_flags); return rc; }']
scsi_cmd_get_serial ['prototype', 'include/scsi/scsi_host.h', '789', 'extern void scsi_cmd_get_serial(struct Scsi_Host *,struct scsi_cmnd *);']
KERN_INFO ['macro', 'include/linux/printk.h', '15', '#define KERN_INFO "<6>"']
flush_workqueue ['prototype', 'include/linux/workqueue.h', '376', 'extern void flush_workqueue(struct workqueue_struct *wq);']
sprintf ['prototype', 'include/linux/kernel.h', '323', 'extern __printf(2,3) int sprintf(char *buf,const char * fmt,...);']
printk ['function', 'include/linux/printk.h', '142', 'int printk(const char *s,...)']
BUILD_BUG_ON ['macro', 'include/linux/bug.h', '59', '#define BUILD_BUG_ON(condition) do { ((void)sizeof(char[1 - 2*!!(condition)])); if (condition) __build_bug_on_failed = 1; } while(0)']
scsi_host_get ['prototype', 'include/scsi/scsi_host.h', '785', 'extern struct Scsi_Host *scsi_host_get(struct Scsi_Host *);']
scsi_device_lookup ['prototype', 'include/scsi/scsi_device.h', '295', 'extern struct scsi_device *scsi_device_lookup(struct Scsi_Host *,uint, uint, uint);']
scsi_device_put ['prototype', 'include/scsi/scsi_device.h', '294', 'extern void scsi_device_put(struct scsi_device *);']
scsi_add_device ['prototype', 'include/scsi/scsi_device.h', '287', 'extern int scsi_add_device(struct Scsi_Host *host,uint channel,uint target, uint lun);']
scsi_host_put ['prototype', 'include/scsi/scsi_host.h', '786', 'extern void scsi_host_put(struct Scsi_Host *t);']
scsi_remove_device ['prototype', 'include/scsi/scsi_device.h', '290', 'extern void scsi_remove_device(struct scsi_device *);']
container_of ['macro', 'include/linux/kernel.h', '683', '#define container_of(ptr,type,member) ({ const typeof( ((type *)0)->member ) *__mptr = (ptr); (type *)( (char *)__mptr - offsetof(type,member) );})']
snprintf ['prototype', 'include/linux/kernel.h', '326', 'int snprintf(char *buf,size_t size,const char *fmt,...);']
create_singlethread_workqueue ['macro', 'include/linux/workqueue.h', '363', '#define create_singlethread_workqueue(name) alloc_workqueue((name), WQ_UNBOUND | WQ_MEM_RECLAIM, 1)']
INIT_WORK ['macro', 'include/linux/workqueue.h', '196', '#define INIT_WORK(_work,_func) do { __INIT_WORK((_work), (_func), 0); } while (0)']
__init_work ['function', 'include/linux/workqueue.h', '163', 'static inline void __init_work(struct work_struct *work,int onstack) { }']
INIT_LIST_HEAD ['function', 'include/linux/list.h', '24', 'static inline void INIT_LIST_HEAD(struct list_head *list)']
queue_work ['prototype', 'include/linux/workqueue.h', '368', 'extern int queue_work(struct workqueue_struct *wq,struct work_struct *work);']
IRQ_RETVAL ['macro', 'include/linux/irqreturn.h', '17', '#define IRQ_RETVAL(x) ((x) != IRQ_NONE)']
free_pages ['prototype', 'include/linux/gfp.h', '361', 'extern void free_pages(unsigned long addr,unsigned int order);']
pci_enable_msix ['prototype', 'include/linux/pci.h', '1061', 'extern int pci_enable_msix(struct pci_dev *dev,struct msix_entry *entries, int nvec);']
free_irq ['prototype', 'include/linux/interrupt.h', '180', 'extern void free_irq(unsigned int,void *);']
pci_disable_msi ['prototype', 'include/linux/pci.h', '1059', 'extern void pci_disable_msi(struct pci_dev *dev);']
pci_disable_msix ['prototype', 'include/linux/pci.h', '1064', 'extern void pci_disable_msix(struct pci_dev *dev);']
destroy_workqueue ['prototype', 'include/linux/workqueue.h', '366', 'extern void destroy_workqueue(struct workqueue_struct *wq);']
pci_release_regions ['function', 'include/linux/pci.h', '1307', 'static inline void pci_release_regions(struct pci_dev *dev)']
kfree ['prototype', 'include/linux/slab.h', '161', 'void kfree(const void *);']
pci_free_consistent ['function', 'include/asm-generic/pci-dma-compat.h', '23', 'pci_free_consistent(struct pci_dev *hwdev,size_t size,void *vaddr, dma_addr_t dma_handle)']
__get_free_pages ['prototype', 'include/linux/gfp.h', '346', 'extern unsigned long __get_free_pages(gfp_t gfp_mask,unsigned int order);']
dev_warn ['function', 'include/linux/device.h', '931', 'int dev_warn(const struct device *dev,const char *fmt,...)']
pci_enable_device ['function', 'include/linux/pci.h', '1189', 'static inline int pci_enable_device(struct pci_dev *dev)']
pci_set_dma_mask ['function', 'include/asm-generic/pci-dma-compat.h', '105', 'static inline int pci_set_dma_mask(struct pci_dev *dev,u64 mask)']
pci_set_consistent_dma_mask ['function', 'include/asm-generic/pci-dma-compat.h', '110', 'static inline int pci_set_consistent_dma_mask(struct pci_dev *dev,u64 mask)']
scsi_host_alloc ['prototype', 'include/scsi/scsi_host.h', '778', 'extern struct Scsi_Host *scsi_host_alloc(struct scsi_host_template *,int);']
shost_priv ['function', 'include/scsi/scsi_host.h', '750', 'static inline void *shost_priv(struct Scsi_Host *shost)']
spin_lock_init ['macro', 'include/linux/spinlock.h', '277', '#define spin_lock_init(_lock) do { spinlock_check(_lock); raw_spin_lock_init(&(_lock)->rlock); } while (0)']
pci_request_regions ['function', 'include/linux/pci.h', '1302', 'static inline int pci_request_regions(struct pci_dev *dev,const char *res_name)']
pci_resource_flags ['macro', 'include/linux/pci.h', '1352', '#define pci_resource_flags(dev,bar) ((dev)->resource[(bar)].flags)']
pci_resource_len ['macro', 'include/linux/pci.h', '1353', '#define pci_resource_len(dev,bar) ((pci_resource_start((dev), (bar)) == 0 && pci_resource_end((dev), (bar)) == pci_resource_start((dev), (bar))) ? 0 : (pci_resource_end((dev), (bar)) - pci_resource_start((dev), (bar)) + 1))']
pci_set_master ['function', 'include/linux/pci.h', '1186', 'static inline void pci_set_master(struct pci_dev *dev)']
pci_set_drvdata ['function', 'include/linux/pci.h', '1370', 'static inline void pci_set_drvdata(struct pci_dev *pdev,void *data)']
dev_info ['macro', 'include/linux/device.h', '975', '#define dev_info(dev,fmt,arg...) _dev_info(dev,fmt,##arg)']
_dev_info ['function', 'include/linux/device.h', '937', 'int _dev_info(const struct device *dev,const char *fmt,...)']
kcalloc ['function', 'include/linux/slab.h', '256', 'static inline void *kcalloc(size_t n,size_t size,gfp_t flags)']
pci_enable_msi ['macro', 'include/linux/pci.h', '1105', '#define pci_enable_msi(pdev) pci_enable_msi_block(pdev,1)']
pci_enable_msi_block ['prototype', 'include/linux/pci.h', '1057', 'extern int pci_enable_msi_block(struct pci_dev *dev,unsigned int nvec);']
request_irq ['prototype', 'include/linux/interrupt.h', '148', 'request_irq(unsigned int irq,irq_handler_t handler,unsigned long flags,const char *name, void *dev);']
scsi_remove_host ['prototype', 'include/scsi/scsi_host.h', '784', 'extern void scsi_remove_host(struct Scsi_Host *);']
pci_disable_device ['function', 'include/linux/pci.h', '1194', 'static inline void pci_disable_device(struct pci_dev *dev)']
pr_info ['macro', 'include/linux/printk.h', '189', '#define pr_info(fmt,...) printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)']
pci_register_driver ['function', 'include/linux/pci.h', '1230', 'static inline int pci_register_driver(struct pci_driver *drv)']
__pci_register_driver ['function', 'include/linux/pci.h', '1224', 'static inline int __pci_register_driver(struct pci_driver *drv,struct module *owner)']
pci_unregister_driver ['function', 'include/linux/pci.h', '1235', 'static inline void pci_unregister_driver(struct pci_driver *drv)']
module_init ['macro', 'include/linux/init.h', '296', '#define module_init(initfn) static inline initcall_t __inittest(void) { return initfn; } int init_module(void) __attribute__((alias(#initfn)));']
module_exit ['macro', 'include/linux/init.h', '302', '#define module_exit(exitfn) static inline exitcall_t __exittest(void) { return exitfn; } void cleanup_module(void) __attribute__((alias(#exitfn)));']
