outw ['macfun', 'arch/x86/include/asm/io.h', '309', 'BUILDIO(w, w, short)']
inw ['macfun', 'arch/x86/include/asm/io.h', '309', 'BUILDIO(w, w, short)']
outl ['macfun', 'arch/x86/include/asm/io.h', '310', 'BUILDIO(l, , int)']
inl ['macfun', 'arch/x86/include/asm/io.h', '310', 'BUILDIO(l, , int)']
napi_disable ['function', 'include/linux/netdevice.h', '481', 'static inline void napi_disable(struct napi_struct *n)']
netif_tx_disable ['function', 'include/linux/netdevice.h', '2465', 'static inline void netif_tx_disable(struct net_device *dev)']
netif_wake_queue ['function', 'include/linux/netdevice.h', '1841', 'static inline void netif_wake_queue(struct net_device *dev)']
napi_enable ['function', 'include/linux/netdevice.h', '496', 'static inline void napi_enable(struct napi_struct *n)']
pci_alloc_consistent ['function', 'include/asm-generic/pci-dma-compat.h', '16', 'pci_alloc_consistent(struct pci_dev *hwdev,size_t size,dma_addr_t *dma_handle)']
netif_err ['macro', 'include/linux/netdevice.h', '2789', '#define netif_err(priv,type,dev,fmt,args...) netif_level(err, priv, type, dev, fmt, ##args)']
netdev_err ['prototype', 'include/linux/netdevice.h', '2721', 'int netdev_err(const struct net_device *dev,const char *format,...);']
memset ['prototype', 'arch/x86/include/asm/string_64.h', '55', 'void *memset(void *s,int c,size_t n);']
kcalloc ['function', 'include/linux/slab.h', '256', 'static inline void *kcalloc(size_t n,size_t size,gfp_t flags)']
kfree ['prototype', 'include/linux/slab.h', '161', 'void kfree(const void *);']
pci_free_consistent ['function', 'include/asm-generic/pci-dma-compat.h', '23', 'pci_free_consistent(struct pci_dev *hwdev,size_t size,void *vaddr, dma_addr_t dma_handle)']
min ['macro', 'include/linux/kernel.h', '560', '#define min(x,y) ({ typeof(x) _min1 = (x); typeof(y) _min2 = (y); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; })']
netdev_alloc_skb ['function', 'include/linux/skbuff.h', '1704', 'static inline struct sk_buff *netdev_alloc_skb(struct net_device *dev,unsigned int length)']
skb_reserve ['function', 'include/linux/skbuff.h', '1408', 'static inline void skb_reserve(struct sk_buff *skb,int len)']
pci_map_single ['function', 'include/asm-generic/pci-dma-compat.h', '30', 'pci_map_single(struct pci_dev *hwdev,void *ptr,size_t size,int direction)']
pci_unmap_single ['function', 'include/asm-generic/pci-dma-compat.h', '36', 'pci_unmap_single(struct pci_dev *hwdev,dma_addr_t dma_addr,size_t size, int direction)']
dev_kfree_skb ['macro', 'include/linux/skbuff.h', '608', '#define dev_kfree_skb(a) consume_skb(a)']
consume_skb ['prototype', 'include/linux/skbuff.h', '559', 'extern void consume_skb(struct sk_buff *skb);']
wmb ['macro', 'arch/x86/include/asm/barrier.h', '24', '#define wmb() asm volatile("sfence" ::: "memory")']
dev_kfree_skb_any ['prototype', 'include/linux/netdevice.h', '2130', 'extern void dev_kfree_skb_any(struct sk_buff *skb);']
spin_lock_irqsave ['macro', 'include/linux/spinlock.h', '313', '#define spin_lock_irqsave(lock,flags) do { raw_spin_lock_irqsave(spinlock_check(lock), flags); } while (0)']
arch_local_irq_save ['function', 'arch/x86/include/asm/irqflags.h', '106', 'static inline notrace unsigned long arch_local_irq_save(void)']
spinlock_check ['function', 'include/linux/spinlock.h', '272', 'static inline raw_spinlock_t *spinlock_check(spinlock_t *lock)']
mii_ethtool_gset ['prototype', 'include/linux/mii.h', '175', 'extern int mii_ethtool_gset(struct mii_if_info *mii,struct ethtool_cmd *ecmd);']
spin_unlock_irqrestore ['function', 'include/linux/spinlock.h', '338', 'static inline void spin_unlock_irqrestore(spinlock_t *lock,unsigned long flags)']
mii_ethtool_sset ['prototype', 'include/linux/mii.h', '176', 'extern int mii_ethtool_sset(struct mii_if_info *mii,struct ethtool_cmd *ecmd);']
strlcpy ['prototype', 'include/linux/string.h', '30', 'size_t strlcpy(char *,const char *,size_t);']
pci_name ['function', 'include/linux/pci.h', '1378', 'static inline const char *pci_name(const struct pci_dev *pdev)']
snprintf ['prototype', 'include/linux/kernel.h', '326', 'int snprintf(char *buf,size_t size,const char *fmt,...);']
mii_link_ok ['prototype', 'include/linux/mii.h', '173', 'extern int mii_link_ok (struct mii_if_info *mii);']
mii_nway_restart ['prototype', 'include/linux/mii.h', '174', 'extern int mii_nway_restart (struct mii_if_info *mii);']
netif_running ['function', 'include/linux/netdevice.h', '1991', 'static inline bool netif_running(const struct net_device *dev)']
netif_info ['macro', 'include/linux/netdevice.h', '2795', '#define netif_info(priv,type,dev,fmt,args...) netif_level(info, priv, type, dev, fmt, ##args)']
netdev_info ['prototype', 'include/linux/netdevice.h', '2727', 'int netdev_info(const struct net_device *dev,const char *format,...);']
memcpy ['macro', 'arch/x86/include/asm/string_64.h', '51', '#define memcpy(dst,src,len) __inline_memcpy((dst),(src),(len))']
netif_printk ['macro', 'include/linux/netdevice.h', '2771', '#define netif_printk(priv,type,level,dev,fmt,args...) do { if (netif_msg_##type(priv)) netdev_printk(level, (dev), fmt, ##args); } while (0)']
KERN_DEBUG ['macro', 'include/linux/printk.h', '16', '#define KERN_DEBUG "<7>"']
netdev_printk ['prototype', 'include/linux/netdevice.h', '2712', 'int netdev_printk(const char *level,const struct net_device *dev,const char *format, ...);']
skb_put ['prototype', 'include/linux/skbuff.h', '1310', 'extern unsigned char *skb_put(struct sk_buff *skb,unsigned int len);']
rmb ['macro', 'arch/x86/include/asm/barrier.h', '23', '#define rmb() asm volatile("lfence":::"memory")']
msleep ['prototype', 'include/linux/delay.h', '46', 'void msleep(unsigned int msecs);']
netif_msg_hw ['macro', 'include/linux/netdevice.h', '2344', '#define netif_msg_hw(p) ((p)->msg_enable & NETIF_MSG_HW)']
pr_cont ['macro', 'include/linux/printk.h', '191', '#define pr_cont(fmt,...) printk(KERN_CONT fmt, ##__VA_ARGS__)']
printk ['function', 'include/linux/printk.h', '142', 'int printk(const char *s,...)']
mdelay ['macro', 'include/linux/delay.h', '31', '#define mdelay(n) ( (__builtin_constant_p(n) && (n)<=MAX_UDELAY_MS) ? udelay((n)*1000) : ({unsigned long __ms=(n); while (__ms--) udelay(1000);}))']
__bad_udelay ['prototype', 'include/asm-generic/delay.h', '5', 'extern void __bad_udelay(void);']
__const_udelay ['prototype', 'include/asm-generic/delay.h', '10', 'extern void __const_udelay(unsigned long xloops);']
__udelay ['prototype', 'include/asm-generic/delay.h', '8', 'extern void __udelay(unsigned long usecs);']
unlikely ['macro', 'include/linux/compiler.h', '147', '# define unlikely(x) __builtin_expect(!!(x),0)']
pci_dma_sync_single_for_cpu ['function', 'include/asm-generic/pci-dma-compat.h', '71', 'pci_dma_sync_single_for_cpu(struct pci_dev *hwdev,dma_addr_t dma_handle,size_t size, int direction)']
skb_copy_to_linear_data ['function', 'include/linux/skbuff.h', '2187', 'static inline void skb_copy_to_linear_data(struct sk_buff *skb,const void *from,const unsigned int len)']
pci_dma_sync_single_for_device ['function', 'include/asm-generic/pci-dma-compat.h', '78', 'pci_dma_sync_single_for_device(struct pci_dev *hwdev,dma_addr_t dma_handle,size_t size, int direction)']
eth_type_trans ['prototype', 'include/linux/etherdevice.h', '31', 'extern __be16 eth_type_trans(struct sk_buff *skb,struct net_device *dev);']
netif_receive_skb ['prototype', 'include/linux/netdevice.h', '2134', 'extern int netif_receive_skb(struct sk_buff *skb);']
netif_queue_stopped ['function', 'include/linux/netdevice.h', '1898', 'static inline bool netif_queue_stopped(const struct net_device *dev)']
__napi_complete ['prototype', 'include/linux/netdevice.h', '471', 'extern void __napi_complete(struct napi_struct *n);']
request_region ['macro', 'include/linux/ioport.h', '173', '#define request_region(start,n,name) __request_region(&ioport_resource,(start),(n),(name),0)']
__request_region ['prototype', 'include/linux/ioport.h', '181', 'extern struct resource * __request_region(struct resource *,resource_size_t start,resource_size_t n,const char *name, int flags);']
inb ['macfun', 'arch/x86/include/asm/io.h', '308', 'BUILDIO(b, b, char)']
release_region ['macro', 'include/linux/ioport.h', '187', '#define release_region(start,n) __release_region(&ioport_resource,(start),(n))']
__release_region ['prototype', 'include/linux/ioport.h', '192', 'extern void __release_region(struct resource *,resource_size_t,resource_size_t);']
pci_enable_device ['function', 'include/linux/pci.h', '1189', 'static inline int pci_enable_device(struct pci_dev *dev)']
pr_err ['macro', 'include/linux/printk.h', '182', '#define pr_err(fmt,...) printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)']
pci_set_master ['function', 'include/linux/pci.h', '1186', 'static inline void pci_set_master(struct pci_dev *dev)']
pci_resource_start ['macro', 'include/linux/pci.h', '1350', '#define pci_resource_start(dev,bar) ((dev)->resource[(bar)].start)']
pci_dma_supported ['function', 'include/asm-generic/pci-dma-compat.h', '10', 'pci_dma_supported(struct pci_dev *hwdev,u64 mask)']
pci_disable_device ['function', 'include/linux/pci.h', '1194', 'static inline void pci_disable_device(struct pci_dev *dev)']
pr_info ['macro', 'include/linux/printk.h', '189', '#define pr_info(fmt,...) printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)']
alloc_etherdev ['macro', 'include/linux/etherdevice.h', '51', '#define alloc_etherdev(sizeof_priv) alloc_etherdev_mq(sizeof_priv,1)']
alloc_etherdev_mqs ['prototype', 'include/linux/etherdevice.h', '49', 'extern struct net_device *alloc_etherdev_mqs(int sizeof_priv,unsigned int txqs,unsigned int rxqs);']
SET_NETDEV_DEV ['macro', 'include/linux/netdevice.h', '1452', '#define SET_NETDEV_DEV(net,pdev) ((net)->dev.parent = (pdev))']
memcmp ['prototype', 'arch/x86/include/asm/string_64.h', '60', 'int memcmp(const void *cs,const void *ct,size_t count);']
is_valid_ether_addr ['function', 'include/linux/etherdevice.h', '119', 'static inline bool is_valid_ether_addr(const u8 *addr)']
netdev_priv ['function', 'include/linux/netdevice.h', '1444', 'static inline void *netdev_priv(const struct net_device *dev)']
spin_lock_init ['macro', 'include/linux/spinlock.h', '277', '#define spin_lock_init(_lock) do { spinlock_check(_lock); raw_spin_lock_init(&(_lock)->rlock); } while (0)']
request_irq ['prototype', 'include/linux/interrupt.h', '148', 'request_irq(unsigned int irq,irq_handler_t handler,unsigned long flags,const char *name, void *dev);']
netif_msg_tx_err ['macro', 'include/linux/netdevice.h', '2338', '#define netif_msg_tx_err(p) ((p)->msg_enable & NETIF_MSG_TX_ERR)']
netif_stop_queue ['function', 'include/linux/netdevice.h', '1872', 'static inline void netif_stop_queue(struct net_device *dev)']
spin_lock ['function', 'include/linux/spinlock.h', '283', 'static inline void spin_lock(spinlock_t *lock)']
napi_schedule_prep ['function', 'include/linux/netdevice.h', '436', 'static inline bool napi_schedule_prep(struct napi_struct *n)']
__napi_schedule ['prototype', 'include/linux/netdevice.h', '420', 'extern void __napi_schedule(struct napi_struct *n);']
spin_unlock ['function', 'include/linux/spinlock.h', '323', 'static inline void spin_unlock(spinlock_t *lock)']
del_timer_sync ['macro', 'include/linux/timer.h', '282', '# define del_timer_sync(t) del_timer(t)']
del_timer ['prototype', 'include/linux/timer.h', '210', 'extern int del_timer(struct timer_list * timer);']
free_irq ['prototype', 'include/linux/interrupt.h', '180', 'extern void free_irq(unsigned int,void *);']
netdev_for_each_mc_addr ['macro', 'include/linux/netdevice.h', '259', '#define netdev_for_each_mc_addr(ha,dev) netdev_hw_addr_list_for_each(ha, &(dev)->mc)']
ether_crc_le ['macro', 'include/linux/crc32.h', '27', '#define ether_crc_le(length,data) crc32_le(~0,data,length)']
crc32_le ['prototype', 'include/linux/crc32.h', '11', 'extern u32 crc32_le(u32 crc,unsigned char const *p,size_t len);']
generic_mii_ioctl ['prototype', 'include/linux/mii.h', '182', 'extern int generic_mii_ioctl(struct mii_if_info *mii_if,struct mii_ioctl_data *mii_data, int cmd,unsigned int *duplex_changed);']
if_mii ['function', 'include/linux/mii.h', '187', 'static inline struct mii_ioctl_data *if_mii(struct ifreq *rq)']
netif_carrier_off ['prototype', 'include/linux/netdevice.h', '2235', 'extern void netif_carrier_off(struct net_device *dev);']
netif_carrier_on ['prototype', 'include/linux/netdevice.h', '2233', 'extern void netif_carrier_on(struct net_device *dev);']
netif_msg_link ['macro', 'include/linux/netdevice.h', '2333', '#define netif_msg_link(p) ((p)->msg_enable & NETIF_MSG_LINK)']
ethtool_cmd_speed ['function', 'include/linux/ethtool.h', '62', 'static inline __u32 ethtool_cmd_speed(const struct ethtool_cmd *ep)']
mod_timer ['prototype', 'include/linux/timer.h', '211', 'extern int mod_timer(struct timer_list *timer,unsigned long expires);']
round_jiffies ['prototype', 'include/linux/timer.h', '294', 'unsigned long round_jiffies(unsigned long j);']
netif_device_detach ['prototype', 'include/linux/netdevice.h', '2305', 'extern void netif_device_detach(struct net_device *dev);']
pci_save_state ['function', 'include/linux/pci.h', '1255', 'static inline int pci_save_state(struct pci_dev *dev)']
pci_set_power_state ['function', 'include/linux/pci.h', '1263', 'static inline int pci_set_power_state(struct pci_dev *dev,pci_power_t state)']
pci_choose_state ['function', 'include/linux/pci.h', '1273', 'static inline pci_power_t pci_choose_state(struct pci_dev *dev,pm_message_t state)']
pci_restore_state ['function', 'include/linux/pci.h', '1260', 'static inline void pci_restore_state(struct pci_dev *dev)']
netif_device_attach ['prototype', 'include/linux/netdevice.h', '2307', 'extern void netif_device_attach(struct net_device *dev);']
unregister_netdev ['prototype', 'include/linux/netdevice.h', '2529', 'extern void unregister_netdev(struct net_device *dev);']
free_netdev ['prototype', 'include/linux/netdevice.h', '1640', 'extern void free_netdev(struct net_device *dev);']
pci_set_drvdata ['function', 'include/linux/pci.h', '1370', 'static inline void pci_set_drvdata(struct pci_dev *pdev,void *data)']
module_param ['macro', 'include/linux/moduleparam.h', '103', '#define module_param(name,type,perm) module_param_named(name, name, type, perm)']
module_param_array ['macro', 'include/linux/moduleparam.h', '412', '#define module_param_array(name,type,nump,perm) module_param_array_named(name, name, type, nump, perm)']
netif_msg_init ['function', 'include/linux/netdevice.h', '2347', 'static inline u32 netif_msg_init(int debug_value,int default_msg_enable_bits)']
pci_register_driver ['function', 'include/linux/pci.h', '1230', 'static inline int pci_register_driver(struct pci_driver *drv)']
__pci_register_driver ['function', 'include/linux/pci.h', '1224', 'static inline int __pci_register_driver(struct pci_driver *drv,struct module *owner)']
pci_unregister_driver ['function', 'include/linux/pci.h', '1235', 'static inline void pci_unregister_driver(struct pci_driver *drv)']
