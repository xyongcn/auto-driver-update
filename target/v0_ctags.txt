_LINUX_MODULE_H  macro  include/linux/module.h  2  #define _LINUX_MODULE_H
MODULE_SUPPORTED_DEVICE  macro  include/linux/module.h  25  #define MODULE_SUPPORTED_DEVICE(name)
MODULE_NAME_LEN  macro  include/linux/module.h  27  #define MODULE_NAME_LEN MAX_PARAM_PREFIX_LEN
modversion_info  struct  include/linux/module.h  29  struct modversion_info { unsigned long crc; char name[MODULE_NAME_LEN]; };
module_kobject  struct  include/linux/module.h  37  struct module_kobject { struct kobject kobj; struct module *mod; struct kobject *drivers_dir; struct module_param_attrs *mp; };
module_attribute  struct  include/linux/module.h  44  struct module_attribute { struct attribute attr; ssize_t (*show)(struct module_attribute *, struct module_kobject *,char *); ssize_t (*store)(struct module_attribute *, struct module_kobject *,const char *, size_t count); void (*setup)(struct module *, const char *); int (*test)(struct module *); void (*free)(struct module *); };
module_version_attribute  struct  include/linux/module.h  55  struct module_version_attribute { struct module_attribute mattr; const char *module_name; const char *version; } __attribute__ ((__aligned__(sizeof(void *))));
__modver_version_show  prototype  include/linux/module.h  61  extern ssize_t __modver_version_show(struct module_attribute *,struct module_kobject *, char *);
init_module  prototype  include/linux/module.h  67  extern int init_module(void);
cleanup_module  prototype  include/linux/module.h  68  extern void cleanup_module(void);
search_extable  prototype  include/linux/module.h  74  search_extable(const struct exception_table_entry *first,const struct exception_table_entry *last,unsigned long value);
sort_extable  prototype  include/linux/module.h  77  void sort_extable(struct exception_table_entry *start,struct exception_table_entry *finish);
sort_main_extable  prototype  include/linux/module.h  79  void sort_main_extable(void);
trim_init_extable  prototype  include/linux/module.h  80  void trim_init_extable(struct module *m);
MODULE_GENERIC_TABLE  macro  include/linux/module.h  88  #define MODULE_GENERIC_TABLE(gtype,name)
MODULE_INFO  macro  include/linux/module.h  92  #define MODULE_INFO(tag,info) __MODULE_INFO(tag,tag,info)
MODULE_ALIAS  macro  include/linux/module.h  95  #define MODULE_ALIAS(_alias) MODULE_INFO(alias,_alias)
MODULE_LICENSE  macro  include/linux/module.h  125  #define MODULE_LICENSE(_license) MODULE_INFO(license,_license)
MODULE_AUTHOR  macro  include/linux/module.h  131  #define MODULE_AUTHOR(_author) MODULE_INFO(author,_author)
MODULE_DESCRIPTION  macro  include/linux/module.h  134  #define MODULE_DESCRIPTION(_description) MODULE_INFO(description,_description)
MODULE_DEVICE_TABLE  macro  include/linux/module.h  136  #define MODULE_DEVICE_TABLE(type,name) MODULE_GENERIC_TABLE(type##_device,name)
MODULE_VERSION  macro  include/linux/module.h  157  #define MODULE_VERSION(_version) static struct module_version_attribute ___modver_attr = { .mattr	= { .attr	= { .name	= "version", .mode	= S_IRUGO, }, .show	= __modver_version_show, }, .module_name	= KBUILD_MODNAME, .version	= _version, }; static const struct module_version_attribute __used __attribute__ ((__section__ ("__modver"))) * __moduleparam_const __modver_attr = &___modver_attr
MODULE_FIRMWARE  macro  include/linux/module.h  177  #define MODULE_FIRMWARE(_firmware) MODULE_INFO(firmware,_firmware)
search_exception_tables  prototype  include/linux/module.h  180  const struct exception_table_entry *search_exception_tables(unsigned long add);
__symbol_get  prototype  include/linux/module.h  188  void *__symbol_get(const char *symbol);
__symbol_get_gpl  prototype  include/linux/module.h  189  void *__symbol_get_gpl(const char *symbol);
symbol_get  macro  include/linux/module.h  539  #define symbol_get(x) ({ extern typeof(x) x __attribute__((weak)); &(x); })
module_use  struct  include/linux/module.h  193  struct module_use { struct list_head source_list; struct list_head target_list; struct module *source, *target; };
module_state  enum  include/linux/module.h  199  enum module_state { MODULE_STATE_LIVE, MODULE_STATE_COMING, MODULE_STATE_GOING, };
module_ref  struct  include/linux/module.h  215  struct module_ref { unsigned long incs; unsigned long decs; } __attribute((aligned(2 * sizeof(unsigned long))));
module  struct  include/linux/module.h  220  struct module { enum module_state state; struct list_head list; char name[MODULE_NAME_LEN]; struct module_kobject mkobj; struct module_attribute *modinfo_attrs; const char *version; const char *srcversion; struct kobject *holders_dir; const struct kernel_symbol *syms; const unsigned long *crcs; unsigned int num_syms; struct kernel_param *kp; unsigned int num_kp; unsigned int num_gpl_syms; const struct kernel_symbol *gpl_syms; const unsigned long *gpl_crcs; const struct kernel_symbol *unused_syms; const unsigned long *unused_crcs; unsigned int num_unused_syms; unsigned int num_unused_gpl_syms; const struct kernel_symbol *unused_gpl_syms; const unsigned long *unused_gpl_crcs; const struct kernel_symbol *gpl_future_syms; const unsigned long *gpl_future_crcs; unsigned int num_gpl_future_syms; unsigned int num_exentries; struct exception_table_entry *extable; int (*init)(void); void *module_init; void *module_core; unsigned int init_size, core_size; unsigned int init_text_size, core_text_size; unsigned int init_ro_size, core_ro_size; struct mod_arch_specific arch; unsigned int taints; unsigned num_bugs; struct list_head bug_list; struct bug_entry *bug_table; Elf_Sym *symtab, *core_symtab; unsigned int num_symtab, core_num_syms; char *strtab, *core_strtab; struct module_sect_attrs *sect_attrs; struct module_notes_attrs *notes_attrs; char *args; void __percpu *percpu; unsigned int percpu_size; unsigned int num_tracepoints; struct tracepoint * const *tracepoints_ptrs; struct jump_entry *jump_entries; unsigned int num_jump_entries; unsigned int num_trace_bprintk_fmt; const char **trace_bprintk_fmt_start; struct ftrace_event_call **trace_events; unsigned int num_trace_events; unsigned int num_ftrace_callsites; unsigned long *ftrace_callsites; struct list_head source_list; struct list_head target_list; struct task_struct *waiter; void (*exit)(void); struct module_ref __percpu *refptr; ctor_fn_t *ctors; unsigned int num_ctors; };
MODULE_ARCH_INIT  macro  include/linux/module.h  372  #define MODULE_ARCH_INIT {}
module_is_live  function  include/linux/module.h  380  static inline int module_is_live(struct module *mod)
__module_text_address  function  include/linux/module.h  518  static inline struct module *__module_text_address(unsigned long addr)
__module_address  function  include/linux/module.h  513  static inline struct module *__module_address(unsigned long addr)
is_module_address  function  include/linux/module.h  523  static inline bool is_module_address(unsigned long addr)
is_module_percpu_address  function  include/linux/module.h  528  static inline bool is_module_percpu_address(unsigned long addr)
is_module_text_address  function  include/linux/module.h  533  static inline bool is_module_text_address(unsigned long addr)
within_module_core  function  include/linux/module.h  391  static inline int within_module_core(unsigned long addr,struct module *mod)
within_module_init  function  include/linux/module.h  397  static inline int within_module_init(unsigned long addr,struct module *mod)
find_module  prototype  include/linux/module.h  404  struct module *find_module(const char *name);
symsearch  struct  include/linux/module.h  406  struct symsearch { const struct kernel_symbol *start, *stop; const unsigned long *crcs; enum { NOT_GPL_ONLY, WILL_BE_GPL_ONLY, } licence; bool unused; };
find_symbol  prototype  include/linux/module.h  418  const struct kernel_symbol *find_symbol(const char *name,struct module **owner,const unsigned long **crc,bool gplok,bool warn);
each_symbol_section  prototype  include/linux/module.h  425  bool each_symbol_section(bool (*fn)(const struct symsearch *arr,struct module *owner,void *data), void *data);
module_get_kallsym  function  include/linux/module.h  578  static inline int module_get_kallsym(unsigned int symnum,unsigned long *value,char *type, char *name,char *module_name, int *exported)
module_kallsyms_lookup_name  function  include/linux/module.h  585  static inline unsigned long module_kallsyms_lookup_name(const char *name)
module_kallsyms_on_each_symbol  function  include/linux/module.h  590  static inline int module_kallsyms_on_each_symbol(int (*fn)(void *,const char *,struct module *,unsigned long),void *data)
__module_put_and_exit  prototype  include/linux/module.h  441  extern void __module_put_and_exit(struct module *mod,long code)
module_put_and_exit  macro  include/linux/module.h  609  #define module_put_and_exit(code) do_exit(code)
module_refcount  prototype  include/linux/module.h  446  unsigned long module_refcount(struct module *mod);
__symbol_put  prototype  include/linux/module.h  447  void __symbol_put(const char *symbol);
symbol_put  macro  include/linux/module.h  540  #define symbol_put(x) do { } while(0)
symbol_put_addr  macro  include/linux/module.h  541  #define symbol_put_addr(x) do { } while(0)
__module_get  function  include/linux/module.h  543  static inline void __module_get(struct module *module)
try_module_get  function  include/linux/module.h  547  static inline int try_module_get(struct module *module)
module_put  function  include/linux/module.h  552  static inline void module_put(struct module *module)
ref_module  prototype  include/linux/module.h  476  int ref_module(struct module *a,struct module *b);
module_name  macro  include/linux/module.h  556  #define module_name(mod) "kernel"
module_address_lookup  function  include/linux/module.h  559  static inline const char *module_address_lookup(unsigned long addr,unsigned long *symbolsize,unsigned long *offset,char **modname,char *namebuf)
lookup_module_symbol_name  function  include/linux/module.h  568  static inline int lookup_module_symbol_name(unsigned long addr,char *symname)
lookup_module_symbol_attrs  function  include/linux/module.h  573  static inline int lookup_module_symbol_attrs(unsigned long addr,unsigned long *size,unsigned long *offset,char *modname,char *name)
search_module_extables  function  include/linux/module.h  508  search_module_extables(unsigned long addr)
register_module_notifier  function  include/linux/module.h  598  static inline int register_module_notifier(struct notifier_block * nb)
unregister_module_notifier  function  include/linux/module.h  604  static inline int unregister_module_notifier(struct notifier_block * nb)
print_modules  function  include/linux/module.h  611  static inline void print_modules(void)
symbol_request  macro  include/linux/module.h  622  #define symbol_request(x) try_then_request_module(symbol_get(x),"symbol:" #x)
__MODULE_STRING  macro  include/linux/module.h  626  #define __MODULE_STRING(x) __stringify(x)
set_all_modules_text_rw  function  include/linux/module.h  632  static inline void set_all_modules_text_rw(void) { }
set_all_modules_text_ro  function  include/linux/module.h  633  static inline void set_all_modules_text_ro(void) { }
module_bug_finalize  function  include/linux/module.h  643  static inline void module_bug_finalize(const Elf_Ehdr *hdr,const Elf_Shdr *sechdrs,struct module *mod)
module_bug_cleanup  function  include/linux/module.h  648  static inline void module_bug_cleanup(struct module *mod) {}
_LINUX_KERNEL_H  macro  include/linux/kernel.h  2  #define _LINUX_KERNEL_H
__ALIGN_KERNEL  macro  include/linux/kernel.h  9  #define __ALIGN_KERNEL(x,a) __ALIGN_KERNEL_MASK(x,(typeof(x))(a) - 1)
__ALIGN_KERNEL_MASK  macro  include/linux/kernel.h  10  #define __ALIGN_KERNEL_MASK(x,mask) (((x) + (mask)) & ~(mask))
USHRT_MAX  macro  include/linux/kernel.h  26  #define USHRT_MAX ((u16)(~0U))
SHRT_MAX  macro  include/linux/kernel.h  27  #define SHRT_MAX ((s16)(USHRT_MAX>>1))
SHRT_MIN  macro  include/linux/kernel.h  28  #define SHRT_MIN ((s16)(-SHRT_MAX - 1))
INT_MAX  macro  include/linux/kernel.h  29  #define INT_MAX ((int)(~0U>>1))
INT_MIN  macro  include/linux/kernel.h  30  #define INT_MIN (-INT_MAX - 1)
UINT_MAX  macro  include/linux/kernel.h  31  #define UINT_MAX (~0U)
LONG_MAX  macro  include/linux/kernel.h  32  #define LONG_MAX ((long)(~0UL>>1))
LONG_MIN  macro  include/linux/kernel.h  33  #define LONG_MIN (-LONG_MAX - 1)
ULONG_MAX  macro  include/linux/kernel.h  34  #define ULONG_MAX (~0UL)
LLONG_MAX  macro  include/linux/kernel.h  35  #define LLONG_MAX ((long long)(~0ULL>>1))
LLONG_MIN  macro  include/linux/kernel.h  36  #define LLONG_MIN (-LLONG_MAX - 1)
ULLONG_MAX  macro  include/linux/kernel.h  37  #define ULLONG_MAX (~0ULL)
SIZE_MAX  macro  include/linux/kernel.h  38  #define SIZE_MAX (~(size_t)0)
STACK_MAGIC  macro  include/linux/kernel.h  40  #define STACK_MAGIC 0xdeadbeef
REPEAT_BYTE  macro  include/linux/kernel.h  42  #define REPEAT_BYTE(x) ((~0ul / 0xff) * (x))
ALIGN  macro  include/linux/linkage.h  57  #define ALIGN __ALIGN
__ALIGN_MASK  macro  include/linux/kernel.h  45  #define __ALIGN_MASK(x,mask) __ALIGN_KERNEL_MASK((x),(mask))
PTR_ALIGN  macro  include/linux/kernel.h  46  #define PTR_ALIGN(p,a) ((typeof(p))ALIGN((unsigned long)(p),(a)))
IS_ALIGNED  macro  include/linux/kernel.h  47  #define IS_ALIGNED(x,a) (((x) & ((typeof(x))(a) - 1)) == 0)
ARRAY_SIZE  macro  include/linux/kernel.h  49  #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]) + __must_be_array(arr))
__round_mask  macro  include/linux/kernel.h  57  #define __round_mask(x,y) ((__typeof__(x))((y)-1))
round_up  macro  include/linux/kernel.h  58  #define round_up(x,y) ((((x)-1) | __round_mask(x,y))+1)
round_down  macro  include/linux/kernel.h  59  #define round_down(x,y) ((x) & ~__round_mask(x,y))
FIELD_SIZEOF  macro  include/linux/kernel.h  61  #define FIELD_SIZEOF(t,f) (sizeof(((t*)0)->f))
DIV_ROUND_UP  macro  include/linux/kernel.h  62  #define DIV_ROUND_UP(n,d) (((n) + (d) - 1) / (d))
DIV_ROUND_UP_ULL  macro  include/linux/kernel.h  63  #define DIV_ROUND_UP_ULL(ll,d) ({ unsigned long long _tmp = (ll)+(d)-1; do_div(_tmp, d); _tmp; })
DIV_ROUND_UP_SECTOR_T  macro  include/linux/kernel.h  69  # define DIV_ROUND_UP_SECTOR_T(ll,d) DIV_ROUND_UP(ll,d)
roundup  macro  include/linux/kernel.h  73  #define roundup(x,y) ( { const typeof(y) __y = y; (((x) + (__y - 1)) / __y) * __y; } )
rounddown  macro  include/linux/kernel.h  79  #define rounddown(x,y) ( { typeof(x) __x = (x); __x - (__x % (y)); } )
DIV_ROUND_CLOSEST  macro  include/linux/kernel.h  85  #define DIV_ROUND_CLOSEST(x,divisor)( { typeof(divisor) __divisor = divisor; (((x) + ((__divisor) / 2)) / (__divisor)); } )
mult_frac  macro  include/linux/kernel.h  96  #define mult_frac(x,numer,denom)( { typeof(x) quot = (x) / (denom); typeof(x) rem  = (x) % (denom); (quot * (numer)) + ((rem * (numer)) / (denom)); } )
_RET_IP_  macro  include/linux/kernel.h  105  #define _RET_IP_ (unsigned long)__builtin_return_address(0)
_THIS_IP_  macro  include/linux/kernel.h  106  #define _THIS_IP_ ({ __label__ __here; __here: (unsigned long)&&__here; })
sector_div  macro  include/linux/kernel.h  112  # define sector_div(n,b)( { int _res; _res = (n) % (b); (n) /= (b); _res; } )
upper_32_bits  macro  include/linux/kernel.h  130  #define upper_32_bits(n) ((u32)(((n) >> 16) >> 16))
lower_32_bits  macro  include/linux/kernel.h  136  #define lower_32_bits(n) ((u32)(n))
_cond_resched  prototype  include/linux/sched.h  2616  extern int _cond_resched(void);
might_resched  macro  include/linux/kernel.h  146  # define might_resched() do { } while (0)
__might_sleep  function  include/linux/kernel.h  164  static inline void __might_sleep(const char *file,int line,int preempt_offset) { }
might_sleep  macro  include/linux/kernel.h  166  # define might_sleep() do { might_resched(); } while (0)
might_sleep_if  macro  include/linux/kernel.h  169  #define might_sleep_if(cond) do { if (cond) might_sleep(); } while (0)
abs  macro  include/linux/kernel.h  177  #define abs(x) ({ long ret; if (sizeof(x) == sizeof(long)) { long __x = (x); ret = (__x < 0) ? -__x : __x; } else { int __x = (x); ret = (__x < 0) ? -__x : __x; } ret; })
abs64  macro  include/linux/kernel.h  189  #define abs64(x) ({ s64 __x = (x); (__x < 0) ? -__x : __x; })
might_fault  function  include/linux/kernel.h  197  static inline void might_fault(void)
oops_enter  prototype  include/linux/kernel.h  208  extern void oops_enter(void);
oops_exit  prototype  include/linux/kernel.h  209  extern void oops_exit(void);
print_oops_end_marker  prototype  include/linux/kernel.h  210  void print_oops_end_marker(void);
oops_may_print  prototype  include/linux/kernel.h  211  extern int oops_may_print(void);
_kstrtoul  prototype  include/linux/kernel.h  218  int __must_check _kstrtoul(const char *s,unsigned int base,unsigned long *res);
_kstrtol  prototype  include/linux/kernel.h  219  int __must_check _kstrtol(const char *s,unsigned int base,long *res);
kstrtoull  prototype  include/linux/kernel.h  221  int __must_check kstrtoull(const char *s,unsigned int base,unsigned long long *res);
kstrtoll  prototype  include/linux/kernel.h  222  int __must_check kstrtoll(const char *s,unsigned int base,long long *res);
kstrtoul  function  include/linux/kernel.h  223  static inline int __must_check kstrtoul(const char *s,unsigned int base,unsigned long *res)
kstrtol  function  include/linux/kernel.h  236  static inline int __must_check kstrtol(const char *s,unsigned int base,long *res)
kstrtouint  prototype  include/linux/kernel.h  249  int __must_check kstrtouint(const char *s,unsigned int base,unsigned int *res);
kstrtoint  prototype  include/linux/kernel.h  250  int __must_check kstrtoint(const char *s,unsigned int base,int *res);
kstrtou64  function  include/linux/kernel.h  252  static inline int __must_check kstrtou64(const char *s,unsigned int base,u64 *res)
kstrtos64  function  include/linux/kernel.h  257  static inline int __must_check kstrtos64(const char *s,unsigned int base,s64 *res)
kstrtou32  function  include/linux/kernel.h  262  static inline int __must_check kstrtou32(const char *s,unsigned int base,u32 *res)
kstrtos32  function  include/linux/kernel.h  267  static inline int __must_check kstrtos32(const char *s,unsigned int base,s32 *res)
kstrtou16  prototype  include/linux/kernel.h  272  int __must_check kstrtou16(const char *s,unsigned int base,u16 *res);
kstrtos16  prototype  include/linux/kernel.h  273  int __must_check kstrtos16(const char *s,unsigned int base,s16 *res);
kstrtou8  prototype  include/linux/kernel.h  274  int __must_check kstrtou8(const char *s,unsigned int base,u8 *res);
kstrtos8  prototype  include/linux/kernel.h  275  int __must_check kstrtos8(const char *s,unsigned int base,s8 *res);
kstrtoull_from_user  prototype  include/linux/kernel.h  277  int __must_check kstrtoull_from_user(const char __user *s,size_t count,unsigned int base,unsigned long long *res);
kstrtoll_from_user  prototype  include/linux/kernel.h  278  int __must_check kstrtoll_from_user(const char __user *s,size_t count,unsigned int base,long long *res);
kstrtoul_from_user  prototype  include/linux/kernel.h  279  int __must_check kstrtoul_from_user(const char __user *s,size_t count,unsigned int base,unsigned long *res);
kstrtol_from_user  prototype  include/linux/kernel.h  280  int __must_check kstrtol_from_user(const char __user *s,size_t count,unsigned int base,long *res);
kstrtouint_from_user  prototype  include/linux/kernel.h  281  int __must_check kstrtouint_from_user(const char __user *s,size_t count,unsigned int base,unsigned int *res);
kstrtoint_from_user  prototype  include/linux/kernel.h  282  int __must_check kstrtoint_from_user(const char __user *s,size_t count,unsigned int base,int *res);
kstrtou16_from_user  prototype  include/linux/kernel.h  283  int __must_check kstrtou16_from_user(const char __user *s,size_t count,unsigned int base,u16 *res);
kstrtos16_from_user  prototype  include/linux/kernel.h  284  int __must_check kstrtos16_from_user(const char __user *s,size_t count,unsigned int base,s16 *res);
kstrtou8_from_user  prototype  include/linux/kernel.h  285  int __must_check kstrtou8_from_user(const char __user *s,size_t count,unsigned int base,u8 *res);
kstrtos8_from_user  prototype  include/linux/kernel.h  286  int __must_check kstrtos8_from_user(const char __user *s,size_t count,unsigned int base,s8 *res);
kstrtou64_from_user  function  include/linux/kernel.h  288  static inline int __must_check kstrtou64_from_user(const char __user *s,size_t count,unsigned int base,u64 *res)
kstrtos64_from_user  function  include/linux/kernel.h  293  static inline int __must_check kstrtos64_from_user(const char __user *s,size_t count,unsigned int base,s64 *res)
kstrtou32_from_user  function  include/linux/kernel.h  298  static inline int __must_check kstrtou32_from_user(const char __user *s,size_t count,unsigned int base,u32 *res)
kstrtos32_from_user  function  include/linux/kernel.h  303  static inline int __must_check kstrtos32_from_user(const char __user *s,size_t count,unsigned int base,s32 *res)
simple_strtoul  prototype  include/linux/kernel.h  310  extern unsigned long simple_strtoul(const char *,char **,unsigned int);
simple_strtol  prototype  include/linux/kernel.h  311  extern long simple_strtol(const char *,char **,unsigned int);
simple_strtoull  prototype  include/linux/kernel.h  312  extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
simple_strtoll  prototype  include/linux/kernel.h  313  extern long long simple_strtoll(const char *,char **,unsigned int);
strict_strtoul  macro  include/linux/kernel.h  314  #define strict_strtoul kstrtoul
strict_strtol  macro  include/linux/kernel.h  315  #define strict_strtol kstrtol
strict_strtoull  macro  include/linux/kernel.h  316  #define strict_strtoull kstrtoull
strict_strtoll  macro  include/linux/kernel.h  317  #define strict_strtoll kstrtoll
num_to_str  prototype  include/linux/kernel.h  319  extern int num_to_str(char *buf,int size,unsigned long long num);
sprintf  prototype  include/linux/kernel.h  323  extern __printf(2,3) int sprintf(char *buf,const char * fmt,...);
vsprintf  prototype  include/linux/kernel.h  324  extern __printf(2,0) int vsprintf(char *buf,const char *,va_list);
snprintf  prototype  include/linux/kernel.h  326  int snprintf(char *buf,size_t size,const char *fmt,...);
vsnprintf  prototype  include/linux/kernel.h  328  int vsnprintf(char *buf,size_t size,const char *fmt,va_list args);
scnprintf  prototype  include/linux/kernel.h  330  int scnprintf(char *buf,size_t size,const char *fmt,...);
vscnprintf  prototype  include/linux/kernel.h  332  int vscnprintf(char *buf,size_t size,const char *fmt,va_list args);
kasprintf  prototype  include/linux/kernel.h  334  char *kasprintf(gfp_t gfp,const char *fmt,...);
kvasprintf  prototype  include/linux/kernel.h  335  extern char *kvasprintf(gfp_t gfp,const char *fmt,va_list args);
sscanf  prototype  include/linux/kernel.h  338  int sscanf(const char *,const char *,...);
vsscanf  prototype  include/linux/kernel.h  340  int vsscanf(const char *,const char *,va_list);
get_option  prototype  include/linux/kernel.h  342  extern int get_option(char **str,int *pint);
get_options  prototype  include/linux/kernel.h  343  extern char *get_options(const char *str,int nints,int *ints);
memparse  prototype  include/linux/kernel.h  344  extern unsigned long long memparse(const char *ptr,char **retptr);
core_kernel_text  prototype  include/linux/kernel.h  346  extern int core_kernel_text(unsigned long addr);
core_kernel_data  prototype  include/linux/kernel.h  347  extern int core_kernel_data(unsigned long addr);
__kernel_text_address  prototype  include/linux/kernel.h  348  extern int __kernel_text_address(unsigned long addr);
kernel_text_address  prototype  include/linux/kernel.h  349  extern int kernel_text_address(unsigned long addr);
func_ptr_is_kernel_text  prototype  include/linux/kernel.h  350  extern int func_ptr_is_kernel_text(void *ptr);
session_of_pgrp  prototype  include/linux/kernel.h  353  extern struct pid *session_of_pgrp(struct pid *pgrp);
int_sqrt  prototype  include/linux/kernel.h  355  unsigned long int_sqrt(unsigned long);
bust_spinlocks  prototype  include/linux/kernel.h  357  extern void bust_spinlocks(int yes);
wake_up_klogd  prototype  include/linux/kernel.h  358  extern void wake_up_klogd(void);
print_tainted  prototype  include/linux/kernel.h  365  extern const char *print_tainted(void);
add_taint  prototype  include/linux/kernel.h  366  extern void add_taint(unsigned flag);
test_taint  prototype  include/linux/kernel.h  367  extern int test_taint(unsigned flag);
get_taint  prototype  include/linux/kernel.h  368  extern unsigned long get_taint(void);
system_states  enum  include/linux/kernel.h  374  extern enum system_states { SYSTEM_BOOTING, SYSTEM_RUNNING, SYSTEM_HALT, SYSTEM_POWER_OFF, SYSTEM_RESTART, } system_state;
system_state  enum  include/linux/kernel.h  374  extern enum system_states { SYSTEM_BOOTING, SYSTEM_RUNNING, SYSTEM_HALT, SYSTEM_POWER_OFF, SYSTEM_RESTART, } system_state;
TAINT_PROPRIETARY_MODULE  macro  include/linux/kernel.h  382  #define TAINT_PROPRIETARY_MODULE 0
TAINT_FORCED_MODULE  macro  include/linux/kernel.h  383  #define TAINT_FORCED_MODULE 1
TAINT_UNSAFE_SMP  macro  include/linux/kernel.h  384  #define TAINT_UNSAFE_SMP 2
TAINT_FORCED_RMMOD  macro  include/linux/kernel.h  385  #define TAINT_FORCED_RMMOD 3
TAINT_MACHINE_CHECK  macro  include/linux/kernel.h  386  #define TAINT_MACHINE_CHECK 4
TAINT_BAD_PAGE  macro  include/linux/kernel.h  387  #define TAINT_BAD_PAGE 5
TAINT_USER  macro  include/linux/kernel.h  388  #define TAINT_USER 6
TAINT_DIE  macro  include/linux/kernel.h  389  #define TAINT_DIE 7
TAINT_OVERRIDDEN_ACPI_TABLE  macro  include/linux/kernel.h  390  #define TAINT_OVERRIDDEN_ACPI_TABLE 8
TAINT_WARN  macro  include/linux/kernel.h  391  #define TAINT_WARN 9
TAINT_CRAP  macro  include/linux/kernel.h  392  #define TAINT_CRAP 10
TAINT_FIRMWARE_WORKAROUND  macro  include/linux/kernel.h  393  #define TAINT_FIRMWARE_WORKAROUND 11
TAINT_OOT_MODULE  macro  include/linux/kernel.h  394  #define TAINT_OOT_MODULE 12
hex_asc_lo  macro  include/linux/kernel.h  397  #define hex_asc_lo(x) hex_asc[((x) & 0x0f)]
hex_asc_hi  macro  include/linux/kernel.h  398  #define hex_asc_hi(x) hex_asc[((x) & 0xf0) >> 4]
hex_byte_pack  function  include/linux/kernel.h  400  static inline char *hex_byte_pack(char *buf,u8 byte)
pack_hex_byte  function  include/linux/kernel.h  407  static inline char * __deprecated pack_hex_byte(char *buf,u8 byte)
hex_to_bin  prototype  include/linux/kernel.h  412  extern int hex_to_bin(char ch);
hex2bin  prototype  include/linux/kernel.h  413  extern int __must_check hex2bin(u8 *dst,const char *src,size_t count);
tracing_off_permanent  function  include/linux/kernel.h  438  static inline void tracing_off_permanent(void) { }
ftrace_dump_mode  enum  include/linux/kernel.h  441  enum ftrace_dump_mode { DUMP_NONE, DUMP_ALL, DUMP_ORIG, };
tracing_on  function  include/linux/kernel.h  538  static inline void tracing_on(void) { }
tracing_off  function  include/linux/kernel.h  539  static inline void tracing_off(void) { }
tracing_is_on  function  include/linux/kernel.h  540  static inline int tracing_is_on(void) { return 0; }
tracing_start  function  include/linux/kernel.h  533  static inline void tracing_start(void) { }
tracing_stop  function  include/linux/kernel.h  534  static inline void tracing_stop(void) { }
ftrace_off_permanent  function  include/linux/kernel.h  535  static inline void ftrace_off_permanent(void) { }
____trace_printk_check_format  function  include/linux/kernel.h  457  void ____trace_printk_check_format(const char *fmt,...)
__trace_printk_check_format  macro  include/linux/kernel.h  460  #define __trace_printk_check_format(fmt,args...) do { if (0) ____trace_printk_check_format(fmt, ##args); } while (0)
trace_printk  function  include/linux/kernel.h  543  trace_printk(const char *fmt,...)
__trace_bprintk  prototype  include/linux/kernel.h  498  int __trace_bprintk(unsigned long ip,const char *fmt,...);
__trace_printk  prototype  include/linux/kernel.h  501  int __trace_printk(unsigned long ip,const char *fmt,...);
trace_dump_stack  function  include/linux/kernel.h  536  static inline void trace_dump_stack(void) { }
ftrace_vprintk  function  include/linux/kernel.h  548  ftrace_vprintk(const char *fmt,va_list ap)
__ftrace_vbprintk  prototype  include/linux/kernel.h  523  __ftrace_vbprintk(unsigned long ip,const char *fmt,va_list ap);
__ftrace_vprintk  prototype  include/linux/kernel.h  526  __ftrace_vprintk(unsigned long ip,const char *fmt,va_list ap);
ftrace_dump  function  include/linux/kernel.h  552  static inline void ftrace_dump(enum ftrace_dump_mode oops_dump_mode) { }
min  macro  include/linux/kernel.h  560  #define min(x,y) ({ typeof(x) _min1 = (x); typeof(y) _min2 = (y); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; })
max  macro  include/linux/kernel.h  566  #define max(x,y) ({ typeof(x) _max1 = (x); typeof(y) _max2 = (y); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; })
min3  macro  include/linux/kernel.h  572  #define min3(x,y,z) ({ typeof(x) _min1 = (x); typeof(y) _min2 = (y); typeof(z) _min3 = (z); (void) (&_min1 == &_min2); (void) (&_min1 == &_min3); _min1 < _min2 ? (_min1 < _min3 ? _min1 : _min3) : (_min2 < _min3 ? _min2 : _min3); })
max3  macro  include/linux/kernel.h  581  #define max3(x,y,z) ({ typeof(x) _max1 = (x); typeof(y) _max2 = (y); typeof(z) _max3 = (z); (void) (&_max1 == &_max2); (void) (&_max1 == &_max3); _max1 > _max2 ? (_max1 > _max3 ? _max1 : _max3) : (_max2 > _max3 ? _max2 : _max3); })
min_not_zero  macro  include/linux/kernel.h  595  #define min_not_zero(x,y) ({ typeof(x) __x = (x); typeof(y) __y = (y); __x == 0 ? __y : ((__y == 0) ? __x : min(__x, __y)); })
clamp  macro  include/linux/kernel.h  609  #define clamp(val,min,max) ({ typeof(val) __val = (val); typeof(min) __min = (min); typeof(max) __max = (max); (void) (&__val == &__min); (void) (&__val == &__max); __val = __val < __min ? __min: __val; __val > __max ? __max: __val; })
min_t  macro  include/linux/kernel.h  624  #define min_t(type,x,y) ({ type __min1 = (x); type __min2 = (y); __min1 < __min2 ? __min1: __min2; })
max_t  macro  include/linux/kernel.h  629  #define max_t(type,x,y) ({ type __max1 = (x); type __max2 = (y); __max1 > __max2 ? __max1: __max2; })
clamp_t  macro  include/linux/kernel.h  644  #define clamp_t(type,val,min,max) ({ type __val = (val); type __min = (min); type __max = (max); __val = __val < __min ? __min: __val; __val > __max ? __max: __val; })
clamp_val  macro  include/linux/kernel.h  662  #define clamp_val(val,min,max) ({ typeof(val) __val = (val); typeof(val) __min = (min); typeof(val) __max = (max); __val = __val < __min ? __min: __val; __val > __max ? __max: __val; })
swap  macro  include/linux/kernel.h  673  #define swap(a,b) do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)
container_of  macro  include/linux/kernel.h  683  #define container_of(ptr,type,member) ({ const typeof( ((type *)0)->member ) *__mptr = (ptr); (type *)( (char *)__mptr - offsetof(type,member) );})
__FUNCTION__  macro  include/linux/kernel.h  688  #define __FUNCTION__ (__func__)
NUMA_BUILD  macro  include/linux/kernel.h  694  #define NUMA_BUILD 0
COMPACTION_BUILD  macro  include/linux/kernel.h  701  #define COMPACTION_BUILD 0
REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD  macro  include/linux/kernel.h  706  # define REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD
do_sysinfo  prototype  include/linux/kernel.h  709  extern int do_sysinfo(struct sysinfo *info);
_LINUX_SCHED_H  macro  include/linux/sched.h  2  #define _LINUX_SCHED_H
CSIGNAL  macro  include/linux/sched.h  7  #define CSIGNAL 0x000000ff
CLONE_VM  macro  include/linux/sched.h  8  #define CLONE_VM 0x00000100
CLONE_FS  macro  include/linux/sched.h  9  #define CLONE_FS 0x00000200
CLONE_FILES  macro  include/linux/sched.h  10  #define CLONE_FILES 0x00000400
CLONE_SIGHAND  macro  include/linux/sched.h  11  #define CLONE_SIGHAND 0x00000800
CLONE_PTRACE  macro  include/linux/sched.h  12  #define CLONE_PTRACE 0x00002000
CLONE_VFORK  macro  include/linux/sched.h  13  #define CLONE_VFORK 0x00004000
CLONE_PARENT  macro  include/linux/sched.h  14  #define CLONE_PARENT 0x00008000
CLONE_THREAD  macro  include/linux/sched.h  15  #define CLONE_THREAD 0x00010000
CLONE_NEWNS  macro  include/linux/sched.h  16  #define CLONE_NEWNS 0x00020000
CLONE_SYSVSEM  macro  include/linux/sched.h  17  #define CLONE_SYSVSEM 0x00040000
CLONE_SETTLS  macro  include/linux/sched.h  18  #define CLONE_SETTLS 0x00080000
CLONE_PARENT_SETTID  macro  include/linux/sched.h  19  #define CLONE_PARENT_SETTID 0x00100000
CLONE_CHILD_CLEARTID  macro  include/linux/sched.h  20  #define CLONE_CHILD_CLEARTID 0x00200000
CLONE_DETACHED  macro  include/linux/sched.h  21  #define CLONE_DETACHED 0x00400000
CLONE_UNTRACED  macro  include/linux/sched.h  22  #define CLONE_UNTRACED 0x00800000
CLONE_CHILD_SETTID  macro  include/linux/sched.h  23  #define CLONE_CHILD_SETTID 0x01000000
CLONE_NEWUTS  macro  include/linux/sched.h  26  #define CLONE_NEWUTS 0x04000000
CLONE_NEWIPC  macro  include/linux/sched.h  27  #define CLONE_NEWIPC 0x08000000
CLONE_NEWUSER  macro  include/linux/sched.h  28  #define CLONE_NEWUSER 0x10000000
CLONE_NEWPID  macro  include/linux/sched.h  29  #define CLONE_NEWPID 0x20000000
CLONE_NEWNET  macro  include/linux/sched.h  30  #define CLONE_NEWNET 0x40000000
CLONE_IO  macro  include/linux/sched.h  31  #define CLONE_IO 0x80000000
SCHED_NORMAL  macro  include/linux/sched.h  36  #define SCHED_NORMAL 0
SCHED_FIFO  macro  include/linux/sched.h  37  #define SCHED_FIFO 1
SCHED_RR  macro  include/linux/sched.h  38  #define SCHED_RR 2
SCHED_BATCH  macro  include/linux/sched.h  39  #define SCHED_BATCH 3
SCHED_IDLE  macro  include/linux/sched.h  41  #define SCHED_IDLE 5
SCHED_RESET_ON_FORK  macro  include/linux/sched.h  43  #define SCHED_RESET_ON_FORK 0x40000000
sched_param  struct  include/linux/sched.h  47  struct sched_param { int sched_priority; };
CLONE_KERNEL  macro  include/linux/sched.h  109  #define CLONE_KERNEL (CLONE_FS | CLONE_FILES | CLONE_SIGHAND)
get_avenrun  prototype  include/linux/sched.h  122  extern void get_avenrun(unsigned long *loads,unsigned long offset,int shift);
FSHIFT  macro  include/linux/sched.h  124  #define FSHIFT 11
FIXED_1  macro  include/linux/sched.h  125  #define FIXED_1 (1<<FSHIFT)
LOAD_FREQ  macro  include/linux/sched.h  126  #define LOAD_FREQ (5*HZ+1)
EXP_1  macro  include/linux/sched.h  127  #define EXP_1 1884
EXP_5  macro  include/linux/sched.h  128  #define EXP_5 2014
EXP_15  macro  include/linux/sched.h  129  #define EXP_15 2037
CALC_LOAD  macro  include/linux/sched.h  131  #define CALC_LOAD(load,exp,n) load *= exp; load += n*(FIXED_1-exp); load >>= FSHIFT;
nr_processes  prototype  include/linux/sched.h  139  extern int nr_processes(void);
nr_running  prototype  include/linux/sched.h  140  extern unsigned long nr_running(void);
nr_uninterruptible  prototype  include/linux/sched.h  141  extern unsigned long nr_uninterruptible(void);
nr_iowait  prototype  include/linux/sched.h  142  extern unsigned long nr_iowait(void);
nr_iowait_cpu  prototype  include/linux/sched.h  143  extern unsigned long nr_iowait_cpu(int cpu);
this_cpu_load  prototype  include/linux/sched.h  144  extern unsigned long this_cpu_load(void);
calc_global_load  prototype  include/linux/sched.h  147  extern void calc_global_load(unsigned long ticks);
update_cpu_load_nohz  prototype  include/linux/sched.h  148  extern void update_cpu_load_nohz(void);
get_parent_ip  prototype  include/linux/sched.h  150  extern unsigned long get_parent_ip(unsigned long addr);
proc_sched_show_task  function  include/linux/sched.h  162  proc_sched_show_task(struct task_struct *p,struct seq_file *m)
proc_sched_set_task  function  include/linux/sched.h  165  static inline void proc_sched_set_task(struct task_struct *p)
print_cfs_rq  function  include/linux/sched.h  169  print_cfs_rq(struct seq_file *m,int cpu,struct cfs_rq *cfs_rq)
TASK_RUNNING  macro  include/linux/sched.h  184  #define TASK_RUNNING 0
TASK_INTERRUPTIBLE  macro  include/linux/sched.h  185  #define TASK_INTERRUPTIBLE 1
TASK_UNINTERRUPTIBLE  macro  include/linux/sched.h  186  #define TASK_UNINTERRUPTIBLE 2
__TASK_STOPPED  macro  include/linux/sched.h  187  #define __TASK_STOPPED 4
__TASK_TRACED  macro  include/linux/sched.h  188  #define __TASK_TRACED 8
EXIT_ZOMBIE  macro  include/linux/sched.h  190  #define EXIT_ZOMBIE 16
EXIT_DEAD  macro  include/linux/sched.h  191  #define EXIT_DEAD 32
TASK_DEAD  macro  include/linux/sched.h  193  #define TASK_DEAD 64
TASK_WAKEKILL  macro  include/linux/sched.h  194  #define TASK_WAKEKILL 128
TASK_WAKING  macro  include/linux/sched.h  195  #define TASK_WAKING 256
TASK_STATE_MAX  macro  include/linux/sched.h  196  #define TASK_STATE_MAX 512
TASK_STATE_TO_CHAR_STR  macro  include/linux/sched.h  198  #define TASK_STATE_TO_CHAR_STR "RSDTtZXxKW"
TASK_KILLABLE  macro  include/linux/sched.h  204  #define TASK_KILLABLE (TASK_WAKEKILL | TASK_UNINTERRUPTIBLE)
TASK_STOPPED  macro  include/linux/sched.h  205  #define TASK_STOPPED (TASK_WAKEKILL | __TASK_STOPPED)
TASK_TRACED  macro  include/linux/sched.h  206  #define TASK_TRACED (TASK_WAKEKILL | __TASK_TRACED)
TASK_NORMAL  macro  include/linux/sched.h  209  #define TASK_NORMAL (TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE)
TASK_ALL  macro  include/linux/sched.h  210  #define TASK_ALL (TASK_NORMAL | __TASK_STOPPED | __TASK_TRACED)
TASK_REPORT  macro  include/linux/sched.h  213  #define TASK_REPORT (TASK_RUNNING | TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE | __TASK_STOPPED | __TASK_TRACED)
task_is_traced  macro  include/linux/sched.h  217  #define task_is_traced(task) ((task->state & __TASK_TRACED) != 0)
task_is_stopped  macro  include/linux/sched.h  218  #define task_is_stopped(task) ((task->state & __TASK_STOPPED) != 0)
task_is_dead  macro  include/linux/sched.h  219  #define task_is_dead(task) ((task)->exit_state != 0)
task_is_stopped_or_traced  macro  include/linux/sched.h  220  #define task_is_stopped_or_traced(task) ((task->state & (__TASK_STOPPED | __TASK_TRACED)) != 0)
task_contributes_to_load  macro  include/linux/sched.h  222  #define task_contributes_to_load(task) ((task->state & TASK_UNINTERRUPTIBLE) != 0 && (task->flags & PF_FROZEN) == 0)
__set_task_state  macro  include/linux/sched.h  226  #define __set_task_state(tsk,state_value) do { (tsk)->state = (state_value); } while (0)
set_task_state  macro  include/linux/sched.h  228  #define set_task_state(tsk,state_value) set_mb((tsk)->state, (state_value))
__set_current_state  macro  include/linux/sched.h  242  #define __set_current_state(state_value) do { current->state = (state_value); } while (0)
set_current_state  macro  include/linux/sched.h  244  #define set_current_state(state_value) set_mb(current->state, (state_value))
TASK_COMM_LEN  macro  include/linux/sched.h  248  #define TASK_COMM_LEN 16
lockdep_tasklist_lock_is_held  prototype  include/linux/sched.h  264  extern int lockdep_tasklist_lock_is_held(void);
sched_init  prototype  include/linux/sched.h  267  extern void sched_init(void);
sched_init_smp  prototype  include/linux/sched.h  268  extern void sched_init_smp(void);
schedule_tail  prototype  include/linux/sched.h  269  extern asmlinkage void schedule_tail(struct task_struct *prev);
init_idle  prototype  include/linux/sched.h  270  extern void init_idle(struct task_struct *idle,int cpu);
init_idle_bootup_task  prototype  include/linux/sched.h  271  extern void init_idle_bootup_task(struct task_struct *idle);
runqueue_is_locked  prototype  include/linux/sched.h  273  extern int runqueue_is_locked(int cpu);
select_nohz_load_balancer  function  include/linux/sched.h  280  static inline void select_nohz_load_balancer(int stop_tick) { }
set_cpu_sd_state_idle  function  include/linux/sched.h  281  static inline void set_cpu_sd_state_idle(void) { }
get_nohz_timer_target  prototype  include/linux/sched.h  278  extern int get_nohz_timer_target(void);
show_state_filter  prototype  include/linux/sched.h  287  extern void show_state_filter(unsigned long state_filter);
show_state  function  include/linux/sched.h  289  static inline void show_state(void)
show_regs  prototype  include/linux/sched.h  294  extern void show_regs(struct pt_regs *);
show_stack  prototype  include/linux/sched.h  301  extern void show_stack(struct task_struct *task,unsigned long *sp);
io_schedule  prototype  include/linux/sched.h  303  void io_schedule(void);
io_schedule_timeout  prototype  include/linux/sched.h  304  long io_schedule_timeout(long timeout);
cpu_init  prototype  arch/x86/include/asm/processor.h  725  extern void cpu_init(void);
trap_init  prototype  include/linux/sched.h  307  extern void trap_init(void);
update_process_times  prototype  include/linux/sched.h  308  extern void update_process_times(int user);
scheduler_tick  prototype  include/linux/sched.h  309  extern void scheduler_tick(void);
sched_show_task  prototype  include/linux/sched.h  311  extern void sched_show_task(struct task_struct *p);
touch_softlockup_watchdog  function  include/linux/sched.h  323  static inline void touch_softlockup_watchdog(void)
touch_softlockup_watchdog_sync  function  include/linux/sched.h  326  static inline void touch_softlockup_watchdog_sync(void)
touch_all_softlockup_watchdogs  function  include/linux/sched.h  329  static inline void touch_all_softlockup_watchdogs(void)
proc_dowatchdog_thresh  prototype  include/linux/sched.h  317  extern int proc_dowatchdog_thresh(struct ctl_table *table,int write,void __user *buffer,size_t *lenp, loff_t *ppos);
lockup_detector_init  function  include/linux/sched.h  332  static inline void lockup_detector_init(void)
proc_dohung_task_timeout_secs  prototype  include/linux/sched.h  342  extern int proc_dohung_task_timeout_secs(struct ctl_table *table,int write,void __user *buffer,size_t *lenp, loff_t *ppos);
__sched  macro  include/linux/sched.h  351  #define __sched __attribute__((__section__(".sched.text")))
in_sched_functions  prototype  include/linux/sched.h  357  extern int in_sched_functions(unsigned long addr);
MAX_SCHEDULE_TIMEOUT  macro  include/linux/sched.h  359  #define MAX_SCHEDULE_TIMEOUT LONG_MAX
schedule_timeout  prototype  include/linux/sched.h  360  extern signed long schedule_timeout(signed long timeout);
schedule_timeout_interruptible  prototype  include/linux/sched.h  361  extern signed long schedule_timeout_interruptible(signed long timeout);
schedule_timeout_killable  prototype  include/linux/sched.h  362  extern signed long schedule_timeout_killable(signed long timeout);
schedule_timeout_uninterruptible  prototype  include/linux/sched.h  363  extern signed long schedule_timeout_uninterruptible(signed long timeout);
schedule  prototype  include/linux/sched.h  364  asmlinkage void schedule(void);
schedule_preempt_disabled  prototype  include/linux/sched.h  365  extern void schedule_preempt_disabled(void);
mutex_spin_on_owner  prototype  include/linux/sched.h  366  extern int mutex_spin_on_owner(struct mutex *lock,struct task_struct *owner);
MAPCOUNT_ELF_CORE_MARGIN  macro  include/linux/sched.h  383  #define MAPCOUNT_ELF_CORE_MARGIN (5)
DEFAULT_MAX_MAP_COUNT  macro  include/linux/sched.h  384  #define DEFAULT_MAX_MAP_COUNT (USHRT_MAX - MAPCOUNT_ELF_CORE_MARGIN)
arch_pick_mmap_layout  function  include/linux/sched.h  402  static inline void arch_pick_mmap_layout(struct mm_struct *mm) {}
arch_get_unmapped_area  prototype  include/linux/sched.h  393  arch_get_unmapped_area(struct file *,unsigned long,unsigned long,unsigned long, unsigned long);
arch_get_unmapped_area_topdown  prototype  include/linux/sched.h  396  arch_get_unmapped_area_topdown(struct file *filp,unsigned long addr,unsigned long len, unsigned long pgoff,unsigned long flags);
arch_unmap_area  prototype  include/linux/sched.h  399  extern void arch_unmap_area(struct mm_struct *,unsigned long);
arch_unmap_area_topdown  prototype  include/linux/sched.h  400  extern void arch_unmap_area_topdown(struct mm_struct *,unsigned long);
set_dumpable  prototype  include/linux/sched.h  406  extern void set_dumpable(struct mm_struct *mm,int value);
get_dumpable  prototype  include/linux/sched.h  407  extern int get_dumpable(struct mm_struct *mm);
MMF_DUMPABLE  macro  include/linux/sched.h  411  #define MMF_DUMPABLE 0
MMF_DUMP_SECURELY  macro  include/linux/sched.h  412  #define MMF_DUMP_SECURELY 1
MMF_DUMPABLE_BITS  macro  include/linux/sched.h  414  #define MMF_DUMPABLE_BITS 2
MMF_DUMPABLE_MASK  macro  include/linux/sched.h  415  #define MMF_DUMPABLE_MASK ((1 << MMF_DUMPABLE_BITS) - 1)
MMF_DUMP_ANON_PRIVATE  macro  include/linux/sched.h  418  #define MMF_DUMP_ANON_PRIVATE 2
MMF_DUMP_ANON_SHARED  macro  include/linux/sched.h  419  #define MMF_DUMP_ANON_SHARED 3
MMF_DUMP_MAPPED_PRIVATE  macro  include/linux/sched.h  420  #define MMF_DUMP_MAPPED_PRIVATE 4
MMF_DUMP_MAPPED_SHARED  macro  include/linux/sched.h  421  #define MMF_DUMP_MAPPED_SHARED 5
MMF_DUMP_ELF_HEADERS  macro  include/linux/sched.h  422  #define MMF_DUMP_ELF_HEADERS 6
MMF_DUMP_HUGETLB_PRIVATE  macro  include/linux/sched.h  423  #define MMF_DUMP_HUGETLB_PRIVATE 7
MMF_DUMP_HUGETLB_SHARED  macro  include/linux/sched.h  424  #define MMF_DUMP_HUGETLB_SHARED 8
MMF_DUMP_FILTER_SHIFT  macro  include/linux/sched.h  426  #define MMF_DUMP_FILTER_SHIFT MMF_DUMPABLE_BITS
MMF_DUMP_FILTER_BITS  macro  include/linux/sched.h  427  #define MMF_DUMP_FILTER_BITS 7
MMF_DUMP_FILTER_MASK  macro  include/linux/sched.h  428  #define MMF_DUMP_FILTER_MASK (((1 << MMF_DUMP_FILTER_BITS) - 1) << MMF_DUMP_FILTER_SHIFT)
MMF_DUMP_FILTER_DEFAULT  macro  include/linux/sched.h  430  #define MMF_DUMP_FILTER_DEFAULT ((1 << MMF_DUMP_ANON_PRIVATE) |	(1 << MMF_DUMP_ANON_SHARED) | (1 << MMF_DUMP_HUGETLB_PRIVATE) | MMF_DUMP_MASK_DEFAULT_ELF)
MMF_DUMP_MASK_DEFAULT_ELF  macro  include/linux/sched.h  437  # define MMF_DUMP_MASK_DEFAULT_ELF 0
MMF_VM_MERGEABLE  macro  include/linux/sched.h  440  #define MMF_VM_MERGEABLE 16
MMF_VM_HUGEPAGE  macro  include/linux/sched.h  441  #define MMF_VM_HUGEPAGE 17
MMF_EXE_FILE_CHANGED  macro  include/linux/sched.h  442  #define MMF_EXE_FILE_CHANGED 18
MMF_INIT_MASK  macro  include/linux/sched.h  444  #define MMF_INIT_MASK (MMF_DUMPABLE_MASK | MMF_DUMP_FILTER_MASK)
sighand_struct  struct  include/linux/sched.h  446  struct sighand_struct { atomic_t count; struct k_sigaction action[_NSIG]; spinlock_t siglock; wait_queue_head_t signalfd_wqh; };
pacct_struct  struct  include/linux/sched.h  453  struct pacct_struct { int ac_flag; long ac_exitcode; unsigned long ac_mem; cputime_t ac_utime, ac_stime; unsigned long ac_minflt, ac_majflt; };
cpu_itimer  struct  include/linux/sched.h  461  struct cpu_itimer { cputime_t expires; cputime_t incr; u32 error; u32 incr_error; };
task_cputime  struct  include/linux/sched.h  479  struct task_cputime { cputime_t utime; cputime_t stime; unsigned long long sum_exec_runtime; };
prof_exp  macro  include/linux/sched.h  485  #define prof_exp stime
virt_exp  macro  include/linux/sched.h  486  #define virt_exp utime
sched_exp  macro  include/linux/sched.h  487  #define sched_exp sum_exec_runtime
INIT_CPUTIME  macro  include/linux/sched.h  489  #define INIT_CPUTIME (struct task_cputime) { .utime = 0, .stime = 0, .sum_exec_runtime = 0, }
INIT_PREEMPT_COUNT  macro  include/linux/sched.h  503  #define INIT_PREEMPT_COUNT (1 + PREEMPT_ACTIVE)
thread_group_cputimer  prototype  include/linux/sched.h  2661  void thread_group_cputimer(struct task_struct *tsk,struct task_cputime *times);
signal_struct  struct  include/linux/sched.h  531  struct signal_struct { atomic_t sigcnt; atomic_t live; int nr_threads; wait_queue_head_t wait_chldexit; struct task_struct *curr_target; struct sigpending shared_pending; int group_exit_code; int notify_count; struct task_struct *group_exit_task; int group_stop_count; unsigned int flags; unsigned int is_child_subreaper:1; unsigned int has_child_subreaper:1; struct list_head posix_timers; struct hrtimer real_timer; struct pid *leader_pid; ktime_t it_real_incr; struct cpu_itimer it[2]; struct thread_group_cputimer cputimer; struct task_cputime cputime_expires; struct list_head cpu_timers[3]; struct pid *tty_old_pgrp; int leader; struct tty_struct *tty; struct autogroup *autogroup; cputime_t utime, stime, cutime, cstime; cputime_t gtime; cputime_t cgtime; cputime_t prev_utime, prev_stime; unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw; unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt; unsigned long inblock, oublock, cinblock, coublock; unsigned long maxrss, cmaxrss; struct task_io_accounting ioac; unsigned long long sum_sched_runtime; struct rlimit rlim[RLIM_NLIMITS]; struct pacct_struct pacct; struct taskstats *stats; unsigned audit_tty; struct tty_audit_buf *tty_audit_buf; struct rw_semaphore group_rwsem; int oom_adj; int oom_score_adj; int oom_score_adj_min; struct mutex cred_guard_mutex; };
__ARCH_WANT_UNLOCKED_CTXSW  macro  include/linux/sched.h  678  # define __ARCH_WANT_UNLOCKED_CTXSW
SIGNAL_STOP_STOPPED  macro  include/linux/sched.h  684  #define SIGNAL_STOP_STOPPED 0x00000001
SIGNAL_STOP_CONTINUED  macro  include/linux/sched.h  685  #define SIGNAL_STOP_CONTINUED 0x00000002
SIGNAL_GROUP_EXIT  macro  include/linux/sched.h  686  #define SIGNAL_GROUP_EXIT 0x00000004
SIGNAL_CLD_STOPPED  macro  include/linux/sched.h  690  #define SIGNAL_CLD_STOPPED 0x00000010
SIGNAL_CLD_CONTINUED  macro  include/linux/sched.h  691  #define SIGNAL_CLD_CONTINUED 0x00000020
SIGNAL_CLD_MASK  macro  include/linux/sched.h  692  #define SIGNAL_CLD_MASK (SIGNAL_CLD_STOPPED|SIGNAL_CLD_CONTINUED)
SIGNAL_UNKILLABLE  macro  include/linux/sched.h  694  #define SIGNAL_UNKILLABLE 0x00000040
signal_group_exit  function  include/linux/sched.h  697  static inline int signal_group_exit(const struct signal_struct *sig)
user_struct  struct  include/linux/sched.h  706  struct user_struct { atomic_t __count; atomic_t processes; atomic_t files; atomic_t sigpending; atomic_t inotify_watches; atomic_t inotify_devs; atomic_t fanotify_listeners; atomic_long_t epoll_watches; unsigned long mq_bytes; unsigned long locked_shm; struct key *uid_keyring; struct key *session_keyring; struct hlist_node uidhash_node; kuid_t uid; atomic_long_t locked_vm; };
uids_sysfs_init  prototype  include/linux/sched.h  741  extern int uids_sysfs_init(void);
find_user  prototype  include/linux/sched.h  743  extern struct user_struct *find_user(kuid_t);
INIT_USER  macro  include/linux/sched.h  746  #define INIT_USER (&root_user)
sched_info  struct  include/linux/sched.h  753  struct sched_info { unsigned long pcount; unsigned long long run_delay; unsigned long long last_arrival,last_queued; };
task_delay_info  struct  include/linux/sched.h  765  struct task_delay_info { spinlock_t lock; unsigned int flags; struct timespec blkio_start, blkio_end; u64 blkio_delay; u64 swapin_delay; u32 blkio_count; u32 swapin_count; struct timespec freepages_start, freepages_end; u64 freepages_delay; u32 freepages_count; };
sched_info_on  function  include/linux/sched.h  798  static inline int sched_info_on(void)
cpu_idle_type  enum  include/linux/sched.h  810  enum cpu_idle_type { CPU_IDLE, CPU_NOT_IDLE, CPU_NEWLY_IDLE, CPU_MAX_IDLE_TYPES };
SCHED_LOAD_RESOLUTION  macro  include/linux/sched.h  834  # define SCHED_LOAD_RESOLUTION 0
scale_load  macro  include/linux/sched.h  835  # define scale_load(w) (w)
scale_load_down  macro  include/linux/sched.h  836  # define scale_load_down(w) (w)
SCHED_LOAD_SHIFT  macro  include/linux/sched.h  839  #define SCHED_LOAD_SHIFT (10 + SCHED_LOAD_RESOLUTION)
SCHED_LOAD_SCALE  macro  include/linux/sched.h  840  #define SCHED_LOAD_SCALE (1L << SCHED_LOAD_SHIFT)
SCHED_POWER_SHIFT  macro  include/linux/sched.h  845  #define SCHED_POWER_SHIFT 10
SCHED_POWER_SCALE  macro  include/linux/sched.h  846  #define SCHED_POWER_SCALE (1L << SCHED_POWER_SHIFT)
SD_LOAD_BALANCE  macro  include/linux/sched.h  852  #define SD_LOAD_BALANCE 0x0001
SD_BALANCE_NEWIDLE  macro  include/linux/sched.h  853  #define SD_BALANCE_NEWIDLE 0x0002
SD_BALANCE_EXEC  macro  include/linux/sched.h  854  #define SD_BALANCE_EXEC 0x0004
SD_BALANCE_FORK  macro  include/linux/sched.h  855  #define SD_BALANCE_FORK 0x0008
SD_BALANCE_WAKE  macro  include/linux/sched.h  856  #define SD_BALANCE_WAKE 0x0010
SD_WAKE_AFFINE  macro  include/linux/sched.h  857  #define SD_WAKE_AFFINE 0x0020
SD_PREFER_LOCAL  macro  include/linux/sched.h  858  #define SD_PREFER_LOCAL 0x0040
SD_SHARE_CPUPOWER  macro  include/linux/sched.h  859  #define SD_SHARE_CPUPOWER 0x0080
SD_SHARE_PKG_RESOURCES  macro  include/linux/sched.h  860  #define SD_SHARE_PKG_RESOURCES 0x0200
SD_SERIALIZE  macro  include/linux/sched.h  861  #define SD_SERIALIZE 0x0400
SD_ASYM_PACKING  macro  include/linux/sched.h  862  #define SD_ASYM_PACKING 0x0800
SD_PREFER_SIBLING  macro  include/linux/sched.h  863  #define SD_PREFER_SIBLING 0x1000
SD_OVERLAP  macro  include/linux/sched.h  864  #define SD_OVERLAP 0x2000
arch_sd_sibiling_asym_packing  prototype  include/linux/sched.h  866  extern int __weak arch_sd_sibiling_asym_packing(void);
sched_group_power  struct  include/linux/sched.h  868  struct sched_group_power { atomic_t ref; unsigned int power, power_orig; unsigned long next_update; atomic_t nr_busy_cpus; unsigned long cpumask[0]; };
sched_group  struct  include/linux/sched.h  884  struct sched_group { struct sched_group *next; atomic_t ref; unsigned int group_weight; struct sched_group_power *sgp; unsigned long cpumask[0]; };
sched_group_cpus  function  include/linux/sched.h  901  static inline struct cpumask *sched_group_cpus(struct sched_group *sg)
sched_group_mask  function  include/linux/sched.h  910  static inline struct cpumask *sched_group_mask(struct sched_group *sg)
group_first_cpu  function  include/linux/sched.h  919  static inline unsigned int group_first_cpu(struct sched_group *group)
sched_domain_attr  struct  include/linux/sched.h  924  struct sched_domain_attr { int relax_domain_level; };
SD_ATTR_INIT  macro  include/linux/sched.h  928  #define SD_ATTR_INIT (struct sched_domain_attr) { .relax_domain_level = -1, }
sched_domain  struct  include/linux/sched.h  934  struct sched_domain { struct sched_domain *parent; struct sched_domain *child; struct sched_group *groups; unsigned long min_interval; unsigned long max_interval; unsigned int busy_factor; unsigned int imbalance_pct; unsigned int cache_nice_tries; unsigned int busy_idx; unsigned int idle_idx; unsigned int newidle_idx; unsigned int wake_idx; unsigned int forkexec_idx; unsigned int smt_gain; int flags; int level; unsigned long last_balance; unsigned int balance_interval; unsigned int nr_balance_failed; u64 last_update; unsigned int lb_count[CPU_MAX_IDLE_TYPES]; unsigned int lb_failed[CPU_MAX_IDLE_TYPES]; unsigned int lb_balanced[CPU_MAX_IDLE_TYPES]; unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES]; unsigned int lb_gained[CPU_MAX_IDLE_TYPES]; unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES]; unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES]; unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES]; unsigned int alb_count; unsigned int alb_failed; unsigned int alb_pushed; unsigned int sbe_count; unsigned int sbe_balanced; unsigned int sbe_pushed; unsigned int sbf_count; unsigned int sbf_balanced; unsigned int sbf_pushed; unsigned int ttwu_wake_remote; unsigned int ttwu_move_affine; unsigned int ttwu_move_balance; char *name; struct rcu_head rcu; }; unsigned int span_weight; unsigned long span[0]; };
sched_domain_span  function  include/linux/sched.h  1010  static inline struct cpumask *sched_domain_span(struct sched_domain *sd)
partition_sched_domains  function  include/linux/sched.h  1041  partition_sched_domains(int ndoms_new,cpumask_var_t doms_new[],struct sched_domain_attr *dattr_new)
alloc_sched_domains  prototype  include/linux/sched.h  1019  cpumask_var_t *alloc_sched_domains(unsigned int ndoms);
free_sched_domains  prototype  include/linux/sched.h  1020  void free_sched_domains(cpumask_var_t doms[],unsigned int ndoms);
test_sd_parent  function  include/linux/sched.h  1023  static inline int test_sd_parent(struct sched_domain *sd,int flag)
default_scale_freq_power  prototype  include/linux/sched.h  1031  unsigned long default_scale_freq_power(struct sched_domain *sd,int cpu);
default_scale_smt_power  prototype  include/linux/sched.h  1032  unsigned long default_scale_smt_power(struct sched_domain *sd,int cpu);
cpus_share_cache  function  include/linux/sched.h  1046  static inline bool cpus_share_cache(int this_cpu,int that_cpu)
prefetch_stack  function  include/linux/sched.h  1060  static inline void prefetch_stack(struct task_struct *t) { }
WF_SYNC  macro  include/linux/sched.h  1074  #define WF_SYNC 0x01
WF_FORK  macro  include/linux/sched.h  1075  #define WF_FORK 0x02
WF_MIGRATED  macro  include/linux/sched.h  1076  #define WF_MIGRATED 0x04
ENQUEUE_WAKEUP  macro  include/linux/sched.h  1078  #define ENQUEUE_WAKEUP 1
ENQUEUE_HEAD  macro  include/linux/sched.h  1079  #define ENQUEUE_HEAD 2
ENQUEUE_WAKING  macro  include/linux/sched.h  1083  #define ENQUEUE_WAKING 0
DEQUEUE_SLEEP  macro  include/linux/sched.h  1086  #define DEQUEUE_SLEEP 1
sched_class  struct  include/linux/sched.h  1088  struct sched_class { const struct sched_class *next; void (*enqueue_task) (struct rq *rq, struct task_struct *p, int flags); void (*dequeue_task) (struct rq *rq, struct task_struct *p, int flags); void (*yield_task) (struct rq *rq); bool (*yield_to_task) (struct rq *rq, struct task_struct *p, bool preempt); void (*check_preempt_curr) (struct rq *rq, struct task_struct *p, int flags); struct task_struct * (*pick_next_task) (struct rq *rq); void (*put_prev_task) (struct rq *rq, struct task_struct *p); int (*select_task_rq)(struct task_struct *p, int sd_flag, int flags); void (*pre_schedule) (struct rq *this_rq, struct task_struct *task); void (*post_schedule) (struct rq *this_rq); void (*task_waking) (struct task_struct *task); void (*task_woken) (struct rq *this_rq, struct task_struct *task); void (*set_cpus_allowed)(struct task_struct *p,const struct cpumask *newmask); void (*rq_online)(struct rq *rq); void (*rq_offline)(struct rq *rq); void (*set_curr_task) (struct rq *rq); void (*task_tick) (struct rq *rq, struct task_struct *p, int queued); void (*task_fork) (struct task_struct *p); void (*switched_from) (struct rq *this_rq, struct task_struct *task); void (*switched_to) (struct rq *this_rq, struct task_struct *task); void (*prio_changed) (struct rq *this_rq, struct task_struct *task,int oldprio); unsigned int (*get_rr_interval) (struct rq *rq,struct task_struct *task); void (*task_move_group) (struct task_struct *p, int on_rq); };
load_weight  struct  include/linux/sched.h  1133  struct load_weight { unsigned long weight, inv_weight; };
sched_statistics  struct  include/linux/sched.h  1138  struct sched_statistics { u64 wait_start; u64 wait_max; u64 wait_count; u64 wait_sum; u64 iowait_count; u64 iowait_sum; u64 sleep_start; u64 sleep_max; s64 sum_sleep_runtime; u64 block_start; u64 block_max; u64 exec_max; u64 slice_max; u64 nr_migrations_cold; u64 nr_failed_migrations_affine; u64 nr_failed_migrations_running; u64 nr_failed_migrations_hot; u64 nr_forced_migrations; u64 nr_wakeups; u64 nr_wakeups_sync; u64 nr_wakeups_migrate; u64 nr_wakeups_local; u64 nr_wakeups_remote; u64 nr_wakeups_affine; u64 nr_wakeups_affine_attempts; u64 nr_wakeups_passive; u64 nr_wakeups_idle; };
sched_entity  struct  include/linux/sched.h  1173  struct sched_entity { struct load_weight load; struct rb_node run_node; struct list_head group_node; unsigned int on_rq; u64 exec_start; u64 sum_exec_runtime; u64 vruntime; u64 prev_sum_exec_runtime; u64 nr_migrations; struct sched_statistics statistics; struct sched_entity *parent; struct cfs_rq *cfs_rq; struct cfs_rq *my_q; };
sched_rt_entity  struct  include/linux/sched.h  1199  struct sched_rt_entity { struct list_head run_list; unsigned long timeout; unsigned int time_slice; struct sched_rt_entity *back; struct sched_rt_entity *parent; struct rt_rq *rt_rq; struct rt_rq *my_q; };
RR_TIMESLICE  macro  include/linux/sched.h  1218  #define RR_TIMESLICE (100 * HZ / 1000)
perf_event_task_context  enum  include/linux/sched.h  1222  enum perf_event_task_context { perf_invalid_context = -1, perf_hw_context = 0, perf_sw_context, perf_nr_task_contexts, };
task_struct  struct  include/linux/sched.h  1229  struct task_struct { volatile long state; void *stack; atomic_t usage; unsigned int flags; unsigned int ptrace; struct llist_node wake_entry; int on_cpu; int on_rq; int prio, static_prio, normal_prio; unsigned int rt_priority; const struct sched_class *sched_class; struct sched_entity se; struct sched_rt_entity rt; struct task_group *sched_task_group; struct hlist_head preempt_notifiers; unsigned char fpu_counter; unsigned int btrace_seq; unsigned int policy; int nr_cpus_allowed; cpumask_t cpus_allowed; int rcu_read_lock_nesting; char rcu_read_unlock_special; struct list_head rcu_node_entry; struct rcu_node *rcu_blocked_node; struct rt_mutex *rcu_boost_mutex; struct sched_info sched_info; struct list_head tasks; struct plist_node pushable_tasks; struct mm_struct *mm, *active_mm; unsigned brk_randomized:1; struct task_rss_stat rss_stat; int exit_state; int exit_code, exit_signal; int pdeath_signal; unsigned int jobctl; unsigned int personality; unsigned did_exec:1; unsigned in_execve:1; unsigned in_iowait:1; unsigned no_new_privs:1; unsigned sched_reset_on_fork:1; unsigned sched_contributes_to_load:1; pid_t pid; pid_t tgid; unsigned long stack_canary; struct task_struct __rcu *real_parent; struct task_struct __rcu *parent; struct list_head children; struct list_head sibling; struct task_struct *group_leader; struct list_head ptraced; struct list_head ptrace_entry; struct pid_link pids[PIDTYPE_MAX]; struct list_head thread_group; struct completion *vfork_done; int __user *set_child_tid; int __user *clear_child_tid; cputime_t utime, stime, utimescaled, stimescaled; cputime_t gtime; cputime_t prev_utime, prev_stime; unsigned long nvcsw, nivcsw; struct timespec start_time; struct timespec real_start_time; unsigned long min_flt, maj_flt; struct task_cputime cputime_expires; struct list_head cpu_timers[3]; const struct cred __rcu *real_cred; const struct cred __rcu *cred; char comm[TASK_COMM_LEN]; int link_count, total_link_count; struct sysv_sem sysvsem; unsigned long last_switch_count; struct thread_struct thread; struct fs_struct *fs; struct files_struct *files; struct nsproxy *nsproxy; struct signal_struct *signal; struct sighand_struct *sighand; sigset_t blocked, real_blocked; sigset_t saved_sigmask; struct sigpending pending; unsigned long sas_ss_sp; size_t sas_ss_size; int (*notifier)(void *priv); void *notifier_data; sigset_t *notifier_mask; struct hlist_head task_works; struct audit_context *audit_context; uid_t loginuid; unsigned int sessionid; struct seccomp seccomp; u32 parent_exec_id; u32 self_exec_id; spinlock_t alloc_lock; raw_spinlock_t pi_lock; struct plist_head pi_waiters; struct rt_mutex_waiter *pi_blocked_on; struct mutex_waiter *blocked_on; unsigned int irq_events; unsigned long hardirq_enable_ip; unsigned long hardirq_disable_ip; unsigned int hardirq_enable_event; unsigned int hardirq_disable_event; int hardirqs_enabled; int hardirq_context; unsigned long softirq_disable_ip; unsigned long softirq_enable_ip; unsigned int softirq_disable_event; unsigned int softirq_enable_event; int softirqs_enabled; int softirq_context; # define MAX_LOCK_DEPTH 48UL u64 curr_chain_key; int lockdep_depth; unsigned int lockdep_recursion; struct held_lock held_locks[MAX_LOCK_DEPTH]; gfp_t lockdep_reclaim_gfp; void *journal_info; struct bio_list *bio_list; struct blk_plug *plug; struct reclaim_state *reclaim_state; struct backing_dev_info *backing_dev_info; struct io_context *io_context; unsigned long ptrace_message; siginfo_t *last_siginfo; struct task_io_accounting ioac; u64 acct_rss_mem1; u64 acct_vm_mem1; cputime_t acct_timexpd; nodemask_t mems_allowed; seqcount_t mems_allowed_seq; int cpuset_mem_spread_rotor; int cpuset_slab_spread_rotor; struct css_set __rcu *cgroups; struct list_head cg_list; struct robust_list_head __user *robust_list; struct compat_robust_list_head __user *compat_robust_list; struct list_head pi_state_list; struct futex_pi_state *pi_state_cache; struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts]; struct mutex perf_event_mutex; struct list_head perf_event_list; struct mempolicy *mempolicy; short il_next; short pref_node_fork; struct rcu_head rcu; struct pipe_inode_info *splice_pipe; struct task_delay_info *delays; int make_it_fail; int nr_dirtied; int nr_dirtied_pause; unsigned long dirty_paused_when; int latency_record_count; struct latency_record latency_record[LT_SAVECOUNT]; unsigned long timer_slack_ns; unsigned long default_timer_slack_ns; struct list_head *scm_work_list; int curr_ret_stack; struct ftrace_ret_stack *ret_stack; unsigned long long ftrace_timestamp; atomic_t trace_overrun; atomic_t tracing_graph_pause; unsigned long trace; unsigned long trace_recursion; struct memcg_batch_info { int do_batch; struct mem_cgroup *memcg; unsigned long nr_pages; unsigned long memsw_nr_pages; } memcg_batch; atomic_t ptrace_bp_refcnt; struct uprobe_task *utask; int uprobe_srcu_id; };
tsk_cpus_allowed  macro  include/linux/sched.h  1592  #define tsk_cpus_allowed(tsk) (&(tsk)->cpus_allowed)
MAX_USER_RT_PRIO  macro  include/linux/sched.h  1607  #define MAX_USER_RT_PRIO 100
MAX_RT_PRIO  macro  include/linux/sched.h  1608  #define MAX_RT_PRIO MAX_USER_RT_PRIO
MAX_PRIO  macro  include/linux/sched.h  1610  #define MAX_PRIO (MAX_RT_PRIO + 40)
DEFAULT_PRIO  macro  include/linux/sched.h  1611  #define DEFAULT_PRIO (MAX_RT_PRIO + 20)
rt_prio  function  include/linux/sched.h  1613  static inline int rt_prio(int prio)
rt_task  function  include/linux/sched.h  1620  static inline int rt_task(struct task_struct *p)
task_pid  function  include/linux/sched.h  1625  static inline struct pid *task_pid(struct task_struct *task)
task_tgid  function  include/linux/sched.h  1630  static inline struct pid *task_tgid(struct task_struct *task)
task_pgrp  function  include/linux/sched.h  1640  static inline struct pid *task_pgrp(struct task_struct *task)
task_session  function  include/linux/sched.h  1645  static inline struct pid *task_session(struct task_struct *task)
__task_pid_nr_ns  prototype  include/linux/sched.h  1665  pid_t __task_pid_nr_ns(struct task_struct *task,enum pid_type type,struct pid_namespace *ns);
task_pid_nr  function  include/linux/sched.h  1668  static inline pid_t task_pid_nr(struct task_struct *tsk)
task_pid_nr_ns  function  include/linux/sched.h  1673  static inline pid_t task_pid_nr_ns(struct task_struct *tsk,struct pid_namespace *ns)
task_pid_vnr  function  include/linux/sched.h  1679  static inline pid_t task_pid_vnr(struct task_struct *tsk)
task_tgid_nr  function  include/linux/sched.h  1685  static inline pid_t task_tgid_nr(struct task_struct *tsk)
task_tgid_nr_ns  prototype  include/linux/sched.h  1690  pid_t task_tgid_nr_ns(struct task_struct *tsk,struct pid_namespace *ns);
task_tgid_vnr  function  include/linux/sched.h  1692  static inline pid_t task_tgid_vnr(struct task_struct *tsk)
task_pgrp_nr_ns  function  include/linux/sched.h  1698  static inline pid_t task_pgrp_nr_ns(struct task_struct *tsk,struct pid_namespace *ns)
task_pgrp_vnr  function  include/linux/sched.h  1704  static inline pid_t task_pgrp_vnr(struct task_struct *tsk)
task_session_nr_ns  function  include/linux/sched.h  1710  static inline pid_t task_session_nr_ns(struct task_struct *tsk,struct pid_namespace *ns)
task_session_vnr  function  include/linux/sched.h  1716  static inline pid_t task_session_vnr(struct task_struct *tsk)
task_pgrp_nr  function  include/linux/sched.h  1722  static inline pid_t task_pgrp_nr(struct task_struct *tsk)
pid_alive  function  include/linux/sched.h  1735  static inline int pid_alive(struct task_struct *p)
is_global_init  function  include/linux/sched.h  1746  static inline int is_global_init(struct task_struct *tsk)
is_container_init  prototype  include/linux/sched.h  1755  extern int is_container_init(struct task_struct *tsk);
free_task  prototype  include/linux/sched.h  1759  extern void free_task(struct task_struct *tsk);
get_task_struct  macro  include/linux/sched.h  1760  #define get_task_struct(tsk) do { atomic_inc(&(tsk)->usage); } while(0)
__put_task_struct  prototype  include/linux/sched.h  1762  extern void __put_task_struct(struct task_struct *t);
put_task_struct  function  include/linux/sched.h  1764  static inline void put_task_struct(struct task_struct *t)
task_times  prototype  include/linux/sched.h  1770  extern void task_times(struct task_struct *p,cputime_t *ut,cputime_t *st);
thread_group_times  prototype  include/linux/sched.h  1771  extern void thread_group_times(struct task_struct *p,cputime_t *ut,cputime_t *st);
PF_EXITING  macro  include/linux/sched.h  1776  #define PF_EXITING 0x00000004
PF_EXITPIDONE  macro  include/linux/sched.h  1777  #define PF_EXITPIDONE 0x00000008
PF_VCPU  macro  include/linux/sched.h  1778  #define PF_VCPU 0x00000010
PF_WQ_WORKER  macro  include/linux/sched.h  1779  #define PF_WQ_WORKER 0x00000020
PF_FORKNOEXEC  macro  include/linux/sched.h  1780  #define PF_FORKNOEXEC 0x00000040
PF_MCE_PROCESS  macro  include/linux/sched.h  1781  #define PF_MCE_PROCESS 0x00000080
PF_SUPERPRIV  macro  include/linux/sched.h  1782  #define PF_SUPERPRIV 0x00000100
PF_DUMPCORE  macro  include/linux/sched.h  1783  #define PF_DUMPCORE 0x00000200
PF_SIGNALED  macro  include/linux/sched.h  1784  #define PF_SIGNALED 0x00000400
PF_MEMALLOC  macro  include/linux/sched.h  1785  #define PF_MEMALLOC 0x00000800
PF_NPROC_EXCEEDED  macro  include/linux/sched.h  1786  #define PF_NPROC_EXCEEDED 0x00001000
PF_USED_MATH  macro  include/linux/sched.h  1787  #define PF_USED_MATH 0x00002000
PF_NOFREEZE  macro  include/linux/sched.h  1788  #define PF_NOFREEZE 0x00008000
PF_FROZEN  macro  include/linux/sched.h  1789  #define PF_FROZEN 0x00010000
PF_FSTRANS  macro  include/linux/sched.h  1790  #define PF_FSTRANS 0x00020000
PF_KSWAPD  macro  include/linux/sched.h  1791  #define PF_KSWAPD 0x00040000
PF_LESS_THROTTLE  macro  include/linux/sched.h  1792  #define PF_LESS_THROTTLE 0x00100000
PF_KTHREAD  macro  include/linux/sched.h  1793  #define PF_KTHREAD 0x00200000
PF_RANDOMIZE  macro  include/linux/sched.h  1794  #define PF_RANDOMIZE 0x00400000
PF_SWAPWRITE  macro  include/linux/sched.h  1795  #define PF_SWAPWRITE 0x00800000
PF_SPREAD_PAGE  macro  include/linux/sched.h  1796  #define PF_SPREAD_PAGE 0x01000000
PF_SPREAD_SLAB  macro  include/linux/sched.h  1797  #define PF_SPREAD_SLAB 0x02000000
PF_THREAD_BOUND  macro  include/linux/sched.h  1798  #define PF_THREAD_BOUND 0x04000000
PF_MCE_EARLY  macro  include/linux/sched.h  1799  #define PF_MCE_EARLY 0x08000000
PF_MEMPOLICY  macro  include/linux/sched.h  1800  #define PF_MEMPOLICY 0x10000000
PF_MUTEX_TESTER  macro  include/linux/sched.h  1801  #define PF_MUTEX_TESTER 0x20000000
PF_FREEZER_SKIP  macro  include/linux/sched.h  1802  #define PF_FREEZER_SKIP 0x40000000
clear_stopped_child_used_math  macro  include/linux/sched.h  1815  #define clear_stopped_child_used_math(child) do { (child)->flags &= ~PF_USED_MATH; } while (0)
set_stopped_child_used_math  macro  include/linux/sched.h  1816  #define set_stopped_child_used_math(child) do { (child)->flags |= PF_USED_MATH; } while (0)
clear_used_math  macro  include/linux/sched.h  1817  #define clear_used_math() clear_stopped_child_used_math(current)
set_used_math  macro  include/linux/sched.h  1818  #define set_used_math() set_stopped_child_used_math(current)
conditional_stopped_child_used_math  macro  include/linux/sched.h  1819  #define conditional_stopped_child_used_math(condition,child) do { (child)->flags &= ~PF_USED_MATH, (child)->flags |= (condition) ? PF_USED_MATH : 0; } while (0)
conditional_used_math  macro  include/linux/sched.h  1821  #define conditional_used_math(condition) conditional_stopped_child_used_math(condition, current)
copy_to_stopped_child_used_math  macro  include/linux/sched.h  1823  #define copy_to_stopped_child_used_math(child) do { (child)->flags &= ~PF_USED_MATH, (child)->flags |= current->flags & PF_USED_MATH; } while (0)
tsk_used_math  macro  include/linux/sched.h  1826  #define tsk_used_math(p) ((p)->flags & PF_USED_MATH)
used_math  macro  include/linux/sched.h  1827  #define used_math() tsk_used_math(current)
JOBCTL_STOP_SIGMASK  macro  include/linux/sched.h  1832  #define JOBCTL_STOP_SIGMASK 0xffff
JOBCTL_STOP_DEQUEUED_BIT  macro  include/linux/sched.h  1834  #define JOBCTL_STOP_DEQUEUED_BIT 16
JOBCTL_STOP_PENDING_BIT  macro  include/linux/sched.h  1835  #define JOBCTL_STOP_PENDING_BIT 17
JOBCTL_STOP_CONSUME_BIT  macro  include/linux/sched.h  1836  #define JOBCTL_STOP_CONSUME_BIT 18
JOBCTL_TRAP_STOP_BIT  macro  include/linux/sched.h  1837  #define JOBCTL_TRAP_STOP_BIT 19
JOBCTL_TRAP_NOTIFY_BIT  macro  include/linux/sched.h  1838  #define JOBCTL_TRAP_NOTIFY_BIT 20
JOBCTL_TRAPPING_BIT  macro  include/linux/sched.h  1839  #define JOBCTL_TRAPPING_BIT 21
JOBCTL_LISTENING_BIT  macro  include/linux/sched.h  1840  #define JOBCTL_LISTENING_BIT 22
JOBCTL_STOP_DEQUEUED  macro  include/linux/sched.h  1842  #define JOBCTL_STOP_DEQUEUED (1 << JOBCTL_STOP_DEQUEUED_BIT)
JOBCTL_STOP_PENDING  macro  include/linux/sched.h  1843  #define JOBCTL_STOP_PENDING (1 << JOBCTL_STOP_PENDING_BIT)
JOBCTL_STOP_CONSUME  macro  include/linux/sched.h  1844  #define JOBCTL_STOP_CONSUME (1 << JOBCTL_STOP_CONSUME_BIT)
JOBCTL_TRAP_STOP  macro  include/linux/sched.h  1845  #define JOBCTL_TRAP_STOP (1 << JOBCTL_TRAP_STOP_BIT)
JOBCTL_TRAP_NOTIFY  macro  include/linux/sched.h  1846  #define JOBCTL_TRAP_NOTIFY (1 << JOBCTL_TRAP_NOTIFY_BIT)
JOBCTL_TRAPPING  macro  include/linux/sched.h  1847  #define JOBCTL_TRAPPING (1 << JOBCTL_TRAPPING_BIT)
JOBCTL_LISTENING  macro  include/linux/sched.h  1848  #define JOBCTL_LISTENING (1 << JOBCTL_LISTENING_BIT)
JOBCTL_TRAP_MASK  macro  include/linux/sched.h  1850  #define JOBCTL_TRAP_MASK (JOBCTL_TRAP_STOP | JOBCTL_TRAP_NOTIFY)
JOBCTL_PENDING_MASK  macro  include/linux/sched.h  1851  #define JOBCTL_PENDING_MASK (JOBCTL_STOP_PENDING | JOBCTL_TRAP_MASK)
task_set_jobctl_pending  prototype  include/linux/sched.h  1853  extern bool task_set_jobctl_pending(struct task_struct *task,unsigned int mask);
task_clear_jobctl_trapping  prototype  include/linux/sched.h  1855  extern void task_clear_jobctl_trapping(struct task_struct *task);
task_clear_jobctl_pending  prototype  include/linux/sched.h  1856  extern void task_clear_jobctl_pending(struct task_struct *task,unsigned int mask);
RCU_READ_UNLOCK_BLOCKED  macro  include/linux/sched.h  1861  #define RCU_READ_UNLOCK_BLOCKED (1 << 0)
RCU_READ_UNLOCK_NEED_QS  macro  include/linux/sched.h  1862  #define RCU_READ_UNLOCK_NEED_QS (1 << 1)
rcu_copy_process  function  include/linux/sched.h  1879  static inline void rcu_copy_process(struct task_struct *p)
do_set_cpus_allowed  function  include/linux/sched.h  1892  static inline void do_set_cpus_allowed(struct task_struct *p,const struct cpumask *new_mask)
set_cpus_allowed_ptr  function  include/linux/sched.h  1896  static inline int set_cpus_allowed_ptr(struct task_struct *p,const struct cpumask *new_mask)
calc_load_enter_idle  function  include/linux/sched.h  1909  static inline void calc_load_enter_idle(void) { }
calc_load_exit_idle  function  include/linux/sched.h  1910  static inline void calc_load_exit_idle(void) { }
set_cpus_allowed  function  include/linux/sched.h  1914  static inline int set_cpus_allowed(struct task_struct *p,cpumask_t new_mask)
sched_clock  prototype  include/linux/sched.h  1928  extern unsigned long long notrace sched_clock(void);
cpu_clock  prototype  include/linux/sched.h  1932  extern u64 cpu_clock(int cpu);
local_clock  prototype  include/linux/sched.h  1933  extern u64 local_clock(void);
sched_clock_cpu  prototype  include/linux/sched.h  1934  extern u64 sched_clock_cpu(int cpu);
sched_clock_init  prototype  include/linux/sched.h  1937  extern void sched_clock_init(void);
sched_clock_tick  prototype  include/linux/sched.h  1960  extern void sched_clock_tick(void);
sched_clock_idle_sleep_event  prototype  include/linux/sched.h  1988  extern void sched_clock_idle_sleep_event(void);
sched_clock_idle_wakeup_event  prototype  include/linux/sched.h  1989  extern void sched_clock_idle_wakeup_event(u64 delta_ns);
enable_sched_clock_irqtime  function  include/linux/sched.h  1974  static inline void enable_sched_clock_irqtime(void) {}
disable_sched_clock_irqtime  function  include/linux/sched.h  1975  static inline void disable_sched_clock_irqtime(void) {}
task_sched_runtime  prototype  include/linux/sched.h  1979  task_sched_runtime(struct task_struct *task);
sched_exec  macro  include/linux/sched.h  1985  #define sched_exec() {}
idle_task_exit  function  include/linux/sched.h  1994  static inline void idle_task_exit(void) {}
wake_up_idle_cpu  function  include/linux/sched.h  2000  static inline void wake_up_idle_cpu(int cpu) { }
sched_tunable_scaling  enum  include/linux/sched.h  2008  enum sched_tunable_scaling { SCHED_TUNABLESCALING_NONE, SCHED_TUNABLESCALING_LOG, SCHED_TUNABLESCALING_LINEAR, SCHED_TUNABLESCALING_END, };
sched_proc_update_handler  prototype  include/linux/sched.h  2023  int sched_proc_update_handler(struct ctl_table *table,int write,void __user *buffer, size_t *length,loff_t *ppos);
get_sysctl_timer_migration  function  include/linux/sched.h  2033  static inline unsigned int get_sysctl_timer_migration(void)
sched_rt_handler  prototype  include/linux/sched.h  2041  int sched_rt_handler(struct ctl_table *table,int write,void __user *buffer, size_t *lenp,loff_t *ppos);
sched_autogroup_create_attach  function  include/linux/sched.h  2057  static inline void sched_autogroup_create_attach(struct task_struct *p) { }
sched_autogroup_detach  function  include/linux/sched.h  2058  static inline void sched_autogroup_detach(struct task_struct *p) { }
sched_autogroup_fork  function  include/linux/sched.h  2059  static inline void sched_autogroup_fork(struct signal_struct *sig) { }
sched_autogroup_exit  function  include/linux/sched.h  2060  static inline void sched_autogroup_exit(struct signal_struct *sig) { }
proc_sched_autogroup_show_task  prototype  include/linux/sched.h  2053  extern void proc_sched_autogroup_show_task(struct task_struct *p,struct seq_file *m);
proc_sched_autogroup_set_nice  prototype  include/linux/sched.h  2054  extern int proc_sched_autogroup_set_nice(struct task_struct *p,int nice);
rt_mutex_getprio  function  include/linux/sched.h  2076  static inline int rt_mutex_getprio(struct task_struct *p)
rt_mutex_setprio  prototype  include/linux/sched.h  2069  extern void rt_mutex_setprio(struct task_struct *p,int prio);
rt_mutex_adjust_pi  macro  include/linux/sched.h  2080  # define rt_mutex_adjust_pi(p) do { } while (0)
tsk_is_pi_blocked  function  include/linux/sched.h  2081  static inline bool tsk_is_pi_blocked(struct task_struct *tsk)
yield_to  prototype  include/linux/sched.h  2087  extern bool yield_to(struct task_struct *p,bool preempt);
set_user_nice  prototype  include/linux/sched.h  2088  extern void set_user_nice(struct task_struct *p,long nice);
task_prio  prototype  include/linux/sched.h  2089  extern int task_prio(const struct task_struct *p);
task_nice  prototype  include/linux/sched.h  2090  extern int task_nice(const struct task_struct *p);
can_nice  prototype  include/linux/sched.h  2091  extern int can_nice(const struct task_struct *p,const int nice);
task_curr  prototype  include/linux/sched.h  2092  extern int task_curr(const struct task_struct *p);
idle_cpu  prototype  include/linux/sched.h  2093  extern int idle_cpu(int cpu);
sched_setscheduler  prototype  include/linux/sched.h  2094  extern int sched_setscheduler(struct task_struct *,int,const struct sched_param *);
sched_setscheduler_nocheck  prototype  include/linux/sched.h  2096  extern int sched_setscheduler_nocheck(struct task_struct *,int,const struct sched_param *);
idle_task  prototype  include/linux/sched.h  2098  extern struct task_struct *idle_task(int cpu);
is_idle_task  function  include/linux/sched.h  2103  static inline bool is_idle_task(const struct task_struct *p)
curr_task  prototype  include/linux/sched.h  2107  extern struct task_struct *curr_task(int cpu);
set_curr_task  prototype  include/linux/sched.h  2108  extern void set_curr_task(int cpu,struct task_struct *p);
yield  prototype  include/linux/sched.h  2110  void yield(void);
thread_union  union  include/linux/sched.h  2117  union thread_union { struct thread_info thread_info; unsigned long stack[THREAD_SIZE/sizeof(long)]; };
kstack_end  function  include/linux/sched.h  2123  static inline int kstack_end(void *addr)
find_task_by_vpid  prototype  include/linux/sched.h  2150  extern struct task_struct *find_task_by_vpid(pid_t nr);
find_task_by_pid_ns  prototype  include/linux/sched.h  2151  extern struct task_struct *find_task_by_pid_ns(pid_t nr,struct pid_namespace *ns);
__set_special_pids  prototype  include/linux/sched.h  2154  extern void __set_special_pids(struct pid *pid);
alloc_uid  prototype  include/linux/sched.h  2157  extern struct user_struct * alloc_uid(kuid_t);
get_uid  function  include/linux/sched.h  2158  static inline struct user_struct *get_uid(struct user_struct *u)
free_uid  prototype  include/linux/sched.h  2163  extern void free_uid(struct user_struct *);
xtime_update  prototype  include/linux/sched.h  2167  extern void xtime_update(unsigned long ticks);
wake_up_state  prototype  include/linux/sched.h  2169  extern int wake_up_state(struct task_struct *tsk,unsigned int state);
wake_up_process  prototype  include/linux/sched.h  2170  extern int wake_up_process(struct task_struct *tsk);
wake_up_new_task  prototype  include/linux/sched.h  2171  extern void wake_up_new_task(struct task_struct *tsk);
kick_process  function  include/linux/sched.h  2175  static inline void kick_process(struct task_struct *tsk) { }
sched_fork  prototype  include/linux/sched.h  2177  extern void sched_fork(struct task_struct *p);
sched_dead  prototype  include/linux/sched.h  2178  extern void sched_dead(struct task_struct *p);
proc_caches_init  prototype  include/linux/sched.h  2180  extern void proc_caches_init(void);
flush_signals  prototype  include/linux/sched.h  2181  extern void flush_signals(struct task_struct *);
__flush_signals  prototype  include/linux/sched.h  2182  extern void __flush_signals(struct task_struct *);
ignore_signals  prototype  include/linux/sched.h  2183  extern void ignore_signals(struct task_struct *);
flush_signal_handlers  prototype  include/linux/sched.h  2184  extern void flush_signal_handlers(struct task_struct *,int force_default);
dequeue_signal  prototype  include/linux/sched.h  2185  extern int dequeue_signal(struct task_struct *tsk,sigset_t *mask,siginfo_t *info);
dequeue_signal_lock  function  include/linux/sched.h  2187  static inline int dequeue_signal_lock(struct task_struct *tsk,sigset_t *mask,siginfo_t *info)
block_all_signals  prototype  include/linux/sched.h  2199  extern void block_all_signals(int (*notifier)(void *priv),void *priv,sigset_t *mask);
unblock_all_signals  prototype  include/linux/sched.h  2201  extern void unblock_all_signals(void);
release_task  prototype  include/linux/sched.h  2202  extern void release_task(struct task_struct * p);
send_sig_info  prototype  include/linux/sched.h  2203  extern int send_sig_info(int,struct siginfo *,struct task_struct *);
force_sigsegv  prototype  include/linux/sched.h  2204  extern int force_sigsegv(int,struct task_struct *);
force_sig_info  prototype  include/linux/sched.h  2205  extern int force_sig_info(int,struct siginfo *,struct task_struct *);
__kill_pgrp_info  prototype  include/linux/sched.h  2206  extern int __kill_pgrp_info(int sig,struct siginfo *info,struct pid *pgrp);
kill_pid_info  prototype  include/linux/sched.h  2207  extern int kill_pid_info(int sig,struct siginfo *info,struct pid *pid);
kill_pid_info_as_cred  prototype  include/linux/sched.h  2208  extern int kill_pid_info_as_cred(int,struct siginfo *,struct pid *,const struct cred *, u32);
kill_pgrp  prototype  include/linux/sched.h  2210  extern int kill_pgrp(struct pid *pid,int sig,int priv);
kill_pid  prototype  include/linux/sched.h  2211  extern int kill_pid(struct pid *pid,int sig,int priv);
kill_proc_info  prototype  include/linux/sched.h  2212  extern int kill_proc_info(int,struct siginfo *,pid_t);
do_notify_parent  prototype  include/linux/sched.h  2213  extern __must_check bool do_notify_parent(struct task_struct *,int);
__wake_up_parent  prototype  include/linux/sched.h  2214  extern void __wake_up_parent(struct task_struct *p,struct task_struct *parent);
force_sig  prototype  include/linux/sched.h  2215  extern void force_sig(int,struct task_struct *);
send_sig  prototype  include/linux/sched.h  2216  extern int send_sig(int,struct task_struct *,int);
zap_other_threads  prototype  include/linux/sched.h  2217  extern int zap_other_threads(struct task_struct *p);
sigqueue_alloc  prototype  include/linux/sched.h  2218  extern struct sigqueue *sigqueue_alloc(void);
sigqueue_free  prototype  include/linux/sched.h  2219  extern void sigqueue_free(struct sigqueue *);
send_sigqueue  prototype  include/linux/sched.h  2220  extern int send_sigqueue(struct sigqueue *,struct task_struct *,int group);
do_sigaction  prototype  include/linux/sched.h  2221  extern int do_sigaction(int,struct k_sigaction *,struct k_sigaction *);
do_sigaltstack  prototype  include/linux/sched.h  2222  extern int do_sigaltstack(const stack_t __user *,stack_t __user *,unsigned long);
restore_saved_sigmask  function  include/linux/sched.h  2224  static inline void restore_saved_sigmask(void)
sigmask_to_save  function  include/linux/sched.h  2230  static inline sigset_t *sigmask_to_save(void)
kill_cad_pid  function  include/linux/sched.h  2238  static inline int kill_cad_pid(int sig,int priv)
SEND_SIG_NOINFO  macro  include/linux/sched.h  2244  #define SEND_SIG_NOINFO ((struct siginfo *) 0)
SEND_SIG_PRIV  macro  include/linux/sched.h  2245  #define SEND_SIG_PRIV ((struct siginfo *) 1)
SEND_SIG_FORCED  macro  include/linux/sched.h  2246  #define SEND_SIG_FORCED ((struct siginfo *) 2)
on_sig_stack  function  include/linux/sched.h  2251  static inline int on_sig_stack(unsigned long sp)
sas_ss_flags  function  include/linux/sched.h  2262  static inline int sas_ss_flags(unsigned long sp)
mm_alloc  prototype  include/linux/sched.h  2271  extern struct mm_struct * mm_alloc(void);
__mmdrop  prototype  include/linux/sched.h  2274  extern void __mmdrop(struct mm_struct *);
mmdrop  function  include/linux/sched.h  2275  static inline void mmdrop(struct mm_struct * mm)
mmput  prototype  include/linux/sched.h  2282  extern void mmput(struct mm_struct *);
get_task_mm  prototype  include/linux/sched.h  2284  extern struct mm_struct *get_task_mm(struct task_struct *task);
mm_access  prototype  include/linux/sched.h  2290  extern struct mm_struct *mm_access(struct task_struct *task,unsigned int mode);
mm_release  prototype  include/linux/sched.h  2292  extern void mm_release(struct task_struct *,struct mm_struct *);
dup_mm  prototype  include/linux/sched.h  2294  extern struct mm_struct *dup_mm(struct task_struct *tsk);
copy_thread  prototype  include/linux/sched.h  2296  extern int copy_thread(unsigned long,unsigned long,unsigned long,struct task_struct *, struct pt_regs *);
flush_thread  prototype  include/linux/sched.h  2298  extern void flush_thread(void);
exit_thread  prototype  include/linux/sched.h  2299  extern void exit_thread(void);
exit_files  prototype  include/linux/sched.h  2301  extern void exit_files(struct task_struct *);
__cleanup_sighand  prototype  include/linux/sched.h  2302  extern void __cleanup_sighand(struct sighand_struct *);
exit_itimers  prototype  include/linux/sched.h  2304  extern void exit_itimers(struct signal_struct *);
flush_itimer_signals  prototype  include/linux/sched.h  2305  extern void flush_itimer_signals(void);
do_group_exit  prototype  include/linux/sched.h  2307  extern void do_group_exit(int);
daemonize  prototype  include/linux/sched.h  2309  extern void daemonize(const char *,...);
allow_signal  prototype  include/linux/sched.h  2310  extern int allow_signal(int);
disallow_signal  prototype  include/linux/sched.h  2311  extern int disallow_signal(int);
do_execve  prototype  include/linux/sched.h  2313  extern int do_execve(const char *,const char __user * const __user *,const char __user * const __user *, struct pt_regs *);
do_fork  prototype  include/linux/sched.h  2316  extern long do_fork(unsigned long,unsigned long,struct pt_regs *,unsigned long,int __user *,int __user *);
fork_idle  prototype  include/linux/sched.h  2317  struct task_struct *fork_idle(int);
set_task_comm  prototype  include/linux/sched.h  2319  extern void set_task_comm(struct task_struct *tsk,char *from);
get_task_comm  prototype  include/linux/sched.h  2320  extern char *get_task_comm(char *to,struct task_struct *tsk);
scheduler_ipi  function  include/linux/sched.h  2326  static inline void scheduler_ipi(void) { }
wait_task_inactive  function  include/linux/sched.h  2327  static inline unsigned long wait_task_inactive(struct task_struct *p,long match_state)
next_task  macro  include/linux/sched.h  2334  #define next_task(p) list_entry_rcu((p)->tasks.next, struct task_struct, tasks)
for_each_process  macro  include/linux/sched.h  2337  #define for_each_process(p) for (p = &init_task ; (p = next_task(p)) != &init_task ; )
current_is_single_threaded  prototype  include/linux/sched.h  2340  extern bool current_is_single_threaded(void);
do_each_thread  macro  include/linux/sched.h  2346  #define do_each_thread(g,t) for (g = t = &init_task ; (g = t = next_task(g)) != &init_task ; ) do
while_each_thread  macro  include/linux/sched.h  2349  #define while_each_thread(g,t) while ((t = next_thread(t)) != g)
get_nr_threads  function  include/linux/sched.h  2352  static inline int get_nr_threads(struct task_struct *tsk)
thread_group_leader  function  include/linux/sched.h  2357  static inline bool thread_group_leader(struct task_struct *p)
has_group_leader_pid  function  include/linux/sched.h  2368  static inline int has_group_leader_pid(struct task_struct *p)
same_thread_group  function  include/linux/sched.h  2374  int same_thread_group(struct task_struct *p1,struct task_struct *p2)
next_thread  function  include/linux/sched.h  2379  static inline struct task_struct *next_thread(const struct task_struct *p)
thread_group_empty  function  include/linux/sched.h  2385  static inline int thread_group_empty(struct task_struct *p)
delay_group_leader  macro  include/linux/sched.h  2390  #define delay_group_leader(p) (thread_group_leader(p) && !thread_group_empty(p))
task_lock  function  include/linux/sched.h  2403  static inline void task_lock(struct task_struct *p)
task_unlock  function  include/linux/sched.h  2408  static inline void task_unlock(struct task_struct *p)
__lock_task_sighand  prototype  include/linux/sched.h  2413  extern struct sighand_struct *__lock_task_sighand(struct task_struct *tsk,unsigned long *flags);
lock_task_sighand  function  include/linux/sched.h  2416  static inline struct sighand_struct *lock_task_sighand(struct task_struct *tsk,unsigned long *flags)
unlock_task_sighand  function  include/linux/sched.h  2426  static inline void unlock_task_sighand(struct task_struct *tsk,unsigned long *flags)
threadgroup_change_begin  function  include/linux/sched.h  2484  static inline void threadgroup_change_begin(struct task_struct *tsk) {}
threadgroup_change_end  function  include/linux/sched.h  2485  static inline void threadgroup_change_end(struct task_struct *tsk) {}
threadgroup_lock  function  include/linux/sched.h  2486  static inline void threadgroup_lock(struct task_struct *tsk) {}
threadgroup_unlock  function  include/linux/sched.h  2487  static inline void threadgroup_unlock(struct task_struct *tsk) {}
task_thread_info  macro  include/linux/sched.h  2492  #define task_thread_info(task) ((struct thread_info *)(task)->stack)
task_stack_page  macro  include/linux/sched.h  2493  #define task_stack_page(task) ((task)->stack)
setup_thread_stack  function  include/linux/sched.h  2495  static inline void setup_thread_stack(struct task_struct *p,struct task_struct *org)
end_of_stack  function  include/linux/sched.h  2501  static inline unsigned long *end_of_stack(struct task_struct *p)
object_is_on_stack  function  include/linux/sched.h  2508  static inline int object_is_on_stack(void *obj)
thread_info_cache_init  prototype  include/linux/sched.h  2515  extern void thread_info_cache_init(void);
stack_not_used  function  include/linux/sched.h  2518  static inline unsigned long stack_not_used(struct task_struct *p)
set_tsk_thread_flag  function  include/linux/sched.h  2533  static inline void set_tsk_thread_flag(struct task_struct *tsk,int flag)
clear_tsk_thread_flag  function  include/linux/sched.h  2538  static inline void clear_tsk_thread_flag(struct task_struct *tsk,int flag)
test_and_set_tsk_thread_flag  function  include/linux/sched.h  2543  static inline int test_and_set_tsk_thread_flag(struct task_struct *tsk,int flag)
test_and_clear_tsk_thread_flag  function  include/linux/sched.h  2548  static inline int test_and_clear_tsk_thread_flag(struct task_struct *tsk,int flag)
test_tsk_thread_flag  function  include/linux/sched.h  2553  static inline int test_tsk_thread_flag(struct task_struct *tsk,int flag)
set_tsk_need_resched  function  include/linux/sched.h  2558  static inline void set_tsk_need_resched(struct task_struct *tsk)
clear_tsk_need_resched  function  include/linux/sched.h  2563  static inline void clear_tsk_need_resched(struct task_struct *tsk)
test_tsk_need_resched  function  include/linux/sched.h  2568  static inline int test_tsk_need_resched(struct task_struct *tsk)
restart_syscall  function  include/linux/sched.h  2573  static inline int restart_syscall(void)
signal_pending  function  include/linux/sched.h  2579  static inline int signal_pending(struct task_struct *p)
__fatal_signal_pending  function  include/linux/sched.h  2584  static inline int __fatal_signal_pending(struct task_struct *p)
fatal_signal_pending  function  include/linux/sched.h  2589  static inline int fatal_signal_pending(struct task_struct *p)
signal_pending_state  function  include/linux/sched.h  2594  static inline int signal_pending_state(long state,struct task_struct *p)
need_resched  function  include/linux/sched.h  2604  static inline int need_resched(void)
cond_resched  macro  include/linux/sched.h  2618  #define cond_resched() ({ __might_sleep(__FILE__, __LINE__, 0); _cond_resched(); })
__cond_resched_lock  prototype  include/linux/sched.h  2623  extern int __cond_resched_lock(spinlock_t *lock);
PREEMPT_LOCK_OFFSET  macro  include/linux/sched.h  2628  #define PREEMPT_LOCK_OFFSET 0
cond_resched_lock  macro  include/linux/sched.h  2631  #define cond_resched_lock(lock) ({ __might_sleep(__FILE__, __LINE__, PREEMPT_LOCK_OFFSET); __cond_resched_lock(lock); })
__cond_resched_softirq  prototype  include/linux/sched.h  2636  extern int __cond_resched_softirq(void);
cond_resched_softirq  macro  include/linux/sched.h  2638  #define cond_resched_softirq() ({ __might_sleep(__FILE__, __LINE__, SOFTIRQ_DISABLE_OFFSET); __cond_resched_softirq(); })
spin_needbreak  function  include/linux/sched.h  2648  static inline int spin_needbreak(spinlock_t *lock)
thread_group_cputime  prototype  include/linux/sched.h  2660  void thread_group_cputime(struct task_struct *tsk,struct task_cputime *times);
thread_group_cputime_init  function  include/linux/sched.h  2663  static inline void thread_group_cputime_init(struct signal_struct *sig)
recalc_sigpending_and_wake  prototype  include/linux/sched.h  2674  extern void recalc_sigpending_and_wake(struct task_struct *t);
recalc_sigpending  prototype  include/linux/sched.h  2675  extern void recalc_sigpending(void);
signal_wake_up  prototype  include/linux/sched.h  2677  extern void signal_wake_up(struct task_struct *t,int resume_stopped);
task_cpu  function  include/linux/sched.h  2693  static inline unsigned int task_cpu(const struct task_struct *p)
set_task_cpu  function  include/linux/sched.h  2698  static inline void set_task_cpu(struct task_struct *p,unsigned int cpu)
sched_setaffinity  prototype  include/linux/sched.h  2704  extern long sched_setaffinity(pid_t pid,const struct cpumask *new_mask);
sched_getaffinity  prototype  include/linux/sched.h  2705  extern long sched_getaffinity(pid_t pid,struct cpumask *mask);
normalize_rt_tasks  prototype  include/linux/sched.h  2707  extern void normalize_rt_tasks(void);
sched_create_group  prototype  include/linux/sched.h  2713  extern struct task_group *sched_create_group(struct task_group *parent);
sched_destroy_group  prototype  include/linux/sched.h  2714  extern void sched_destroy_group(struct task_group *tg);
sched_move_task  prototype  include/linux/sched.h  2715  extern void sched_move_task(struct task_struct *tsk);
sched_group_set_shares  prototype  include/linux/sched.h  2717  extern int sched_group_set_shares(struct task_group *tg,unsigned long shares);
sched_group_shares  prototype  include/linux/sched.h  2718  extern unsigned long sched_group_shares(struct task_group *tg);
sched_group_set_rt_runtime  prototype  include/linux/sched.h  2721  extern int sched_group_set_rt_runtime(struct task_group *tg,long rt_runtime_us);
sched_group_rt_runtime  prototype  include/linux/sched.h  2723  extern long sched_group_rt_runtime(struct task_group *tg);
sched_group_set_rt_period  prototype  include/linux/sched.h  2724  extern int sched_group_set_rt_period(struct task_group *tg,long rt_period_us);
sched_group_rt_period  prototype  include/linux/sched.h  2726  extern long sched_group_rt_period(struct task_group *tg);
sched_rt_can_attach  prototype  include/linux/sched.h  2727  extern int sched_rt_can_attach(struct task_group *tg,struct task_struct *tsk);
task_can_switch_user  prototype  include/linux/sched.h  2731  extern int task_can_switch_user(struct user_struct *up,struct task_struct *tsk);
add_rchar  function  include/linux/sched.h  2755  static inline void add_rchar(struct task_struct *tsk,ssize_t amt)
add_wchar  function  include/linux/sched.h  2759  static inline void add_wchar(struct task_struct *tsk,ssize_t amt)
inc_syscr  function  include/linux/sched.h  2763  static inline void inc_syscr(struct task_struct *tsk)
inc_syscw  function  include/linux/sched.h  2767  static inline void inc_syscw(struct task_struct *tsk)
TASK_SIZE_OF  macro  arch/x86/include/asm/processor.h  880  #define TASK_SIZE_OF(child) ((test_tsk_thread_flag(child,TIF_ADDR32)) ? IA32_PAGE_OFFSET : TASK_SIZE_MAX)
mm_update_next_owner  function  include/linux/sched.h  2780  static inline void mm_update_next_owner(struct mm_struct *mm)
mm_init_owner  function  include/linux/sched.h  2784  static inline void mm_init_owner(struct mm_struct *mm,struct task_struct *p)
task_rlimit  function  include/linux/sched.h  2789  static inline unsigned long task_rlimit(const struct task_struct *tsk,unsigned int limit)
task_rlimit_max  function  include/linux/sched.h  2795  static inline unsigned long task_rlimit_max(const struct task_struct *tsk,unsigned int limit)
rlimit  struct  include/linux/resource.h  42  struct rlimit { unsigned long rlim_cur; unsigned long rlim_max; };
rlimit_max  function  include/linux/sched.h  2806  static inline unsigned long rlimit_max(unsigned int limit)
_LINUX_STRING_H_  macro  include/linux/string.h  2  #define _LINUX_STRING_H_
strndup_user  prototype  include/linux/string.h  15  extern char *strndup_user(const char __user *,long);
memdup_user  prototype  include/linux/string.h  16  extern void *memdup_user(const void __user *,size_t);
strcpy  prototype  arch/x86/include/asm/string_64.h  62  char *strcpy(char *dest,const char *src);
strncpy  prototype  arch/x86/include/asm/string_32.h  12  extern char *strncpy(char *dest,const char *src,size_t count);
strlcpy  prototype  include/linux/string.h  30  size_t strlcpy(char *,const char *,size_t);
strcat  prototype  arch/x86/include/asm/string_64.h  63  char *strcat(char *dest,const char *src);
strncat  prototype  arch/x86/include/asm/string_32.h  18  extern char *strncat(char *dest,const char *src,size_t count);
strlcat  prototype  include/linux/string.h  39  extern size_t strlcat(char *,const char *,__kernel_size_t);
strcmp  prototype  arch/x86/include/asm/string_64.h  64  int strcmp(const char *cs,const char *ct);
strncmp  prototype  arch/x86/include/asm/string_32.h  24  extern int strncmp(const char *cs,const char *ct,size_t count);
strnicmp  prototype  include/linux/string.h  48  extern int strnicmp(const char *,const char *,__kernel_size_t);
strcasecmp  prototype  include/linux/string.h  51  extern int strcasecmp(const char *s1,const char *s2);
strncasecmp  prototype  include/linux/string.h  54  extern int strncasecmp(const char *s1,const char *s2,size_t n);
strchr  prototype  arch/x86/include/asm/string_32.h  27  extern char *strchr(const char *s,int c);
strnchr  prototype  include/linux/string.h  60  extern char * strnchr(const char *,size_t,int);
strrchr  prototype  include/linux/string.h  63  extern char * strrchr(const char *,int);
skip_spaces  prototype  include/linux/string.h  65  extern char * __must_check skip_spaces(const char *);
strim  prototype  include/linux/string.h  67  extern char *strim(char *);
strstrip  function  include/linux/string.h  69  static inline __must_check char *strstrip(char *str)
strstr  prototype  arch/x86/include/asm/string_32.h  250  extern char *strstr(const char *cs,const char *ct);
strnstr  prototype  include/linux/string.h  78  extern char * strnstr(const char *,const char *,size_t);
strlen  prototype  arch/x86/include/asm/string_64.h  61  size_t strlen(const char *s);
strnlen  prototype  arch/x86/include/asm/string_32.h  246  extern size_t strnlen(const char *s,size_t count);
strpbrk  prototype  include/linux/string.h  87  extern char * strpbrk(const char *,const char *);
strsep  prototype  include/linux/string.h  90  extern char * strsep(char **,const char *);
strspn  prototype  include/linux/string.h  93  extern __kernel_size_t strspn(const char *,const char *);
strcspn  prototype  include/linux/string.h  96  extern __kernel_size_t strcspn(const char *,const char *);
memset  prototype  arch/x86/include/asm/string_64.h  55  void *memset(void *s,int c,size_t n);
memcpy  macro  arch/x86/include/asm/string_64.h  51  #define memcpy(dst,src,len) __inline_memcpy((dst),(src),(len))
memmove  prototype  arch/x86/include/asm/string_64.h  58  void *memmove(void *dest,const void *src,size_t count);
memscan  prototype  arch/x86/include/asm/string_32.h  338  extern void *memscan(void *addr,int c,size_t size);
memcmp  prototype  arch/x86/include/asm/string_64.h  60  int memcmp(const void *cs,const void *ct,size_t count);
memchr  prototype  arch/x86/include/asm/string_32.h  205  extern void *memchr(const void *cs,int c,size_t count);
memchr_inv  prototype  include/linux/string.h  117  void *memchr_inv(const void *s,int c,size_t n);
kstrdup  prototype  include/linux/string.h  119  extern char *kstrdup(const char *s,gfp_t gfp);
kstrndup  prototype  include/linux/string.h  120  extern char *kstrndup(const char *s,size_t len,gfp_t gfp);
kmemdup  prototype  include/linux/string.h  121  extern void *kmemdup(const void *src,size_t len,gfp_t gfp);
argv_split  prototype  include/linux/string.h  123  extern char **argv_split(gfp_t gfp,const char *str,int *argcp);
argv_free  prototype  include/linux/string.h  124  extern void argv_free(char **argv);
sysfs_streq  prototype  include/linux/string.h  126  extern bool sysfs_streq(const char *s1,const char *s2);
strtobool  prototype  include/linux/string.h  127  extern int strtobool(const char *s,bool *res);
vbin_printf  prototype  include/linux/string.h  130  int vbin_printf(u32 *bin_buf,size_t size,const char *fmt,va_list args);
bstr_printf  prototype  include/linux/string.h  131  int bstr_printf(char *buf,size_t size,const char *fmt,const u32 *bin_buf);
memory_read_from_buffer  prototype  include/linux/string.h  135  extern ssize_t memory_read_from_buffer(void *to,size_t count,loff_t *ppos,const void *from, size_t available);
strstarts  function  include/linux/string.h  143  static inline bool strstarts(const char *str,const char *prefix)
_LINUX_ERRNO_H  macro  include/linux/errno.h  2  #define _LINUX_ERRNO_H
ERESTARTSYS  macro  include/linux/errno.h  14  #define ERESTARTSYS 512
ERESTARTNOINTR  macro  include/linux/errno.h  15  #define ERESTARTNOINTR 513
ERESTARTNOHAND  macro  include/linux/errno.h  16  #define ERESTARTNOHAND 514
ENOIOCTLCMD  macro  include/linux/errno.h  17  #define ENOIOCTLCMD 515
ERESTART_RESTARTBLOCK  macro  include/linux/errno.h  18  #define ERESTART_RESTARTBLOCK 516
EPROBE_DEFER  macro  include/linux/errno.h  19  #define EPROBE_DEFER 517
EOPENSTALE  macro  include/linux/errno.h  20  #define EOPENSTALE 518
EBADHANDLE  macro  include/linux/errno.h  23  #define EBADHANDLE 521
ENOTSYNC  macro  include/linux/errno.h  24  #define ENOTSYNC 522
EBADCOOKIE  macro  include/linux/errno.h  25  #define EBADCOOKIE 523
ENOTSUPP  macro  include/linux/errno.h  26  #define ENOTSUPP 524
ETOOSMALL  macro  include/linux/errno.h  27  #define ETOOSMALL 525
ESERVERFAULT  macro  include/linux/errno.h  28  #define ESERVERFAULT 526
EBADTYPE  macro  include/linux/errno.h  29  #define EBADTYPE 527
EJUKEBOX  macro  include/linux/errno.h  30  #define EJUKEBOX 528
EIOCBQUEUED  macro  include/linux/errno.h  31  #define EIOCBQUEUED 529
EIOCBRETRY  macro  include/linux/errno.h  32  #define EIOCBRETRY 530
_LINUX_IOPORT_H  macro  include/linux/ioport.h  9  #define _LINUX_IOPORT_H
resource  struct  include/linux/ioport.h  18  struct resource { resource_size_t start; resource_size_t end; const char *name; unsigned long flags; struct resource *parent, *sibling, *child; };
IORESOURCE_BITS  macro  include/linux/ioport.h  29  #define IORESOURCE_BITS 0x000000ff
IORESOURCE_TYPE_BITS  macro  include/linux/ioport.h  31  #define IORESOURCE_TYPE_BITS 0x00001f00
IORESOURCE_IO  macro  include/linux/ioport.h  32  #define IORESOURCE_IO 0x00000100
IORESOURCE_MEM  macro  include/linux/ioport.h  33  #define IORESOURCE_MEM 0x00000200
IORESOURCE_IRQ  macro  include/linux/ioport.h  34  #define IORESOURCE_IRQ 0x00000400
IORESOURCE_DMA  macro  include/linux/ioport.h  35  #define IORESOURCE_DMA 0x00000800
IORESOURCE_BUS  macro  include/linux/ioport.h  36  #define IORESOURCE_BUS 0x00001000
IORESOURCE_PREFETCH  macro  include/linux/ioport.h  38  #define IORESOURCE_PREFETCH 0x00002000
IORESOURCE_READONLY  macro  include/linux/ioport.h  39  #define IORESOURCE_READONLY 0x00004000
IORESOURCE_CACHEABLE  macro  include/linux/ioport.h  40  #define IORESOURCE_CACHEABLE 0x00008000
IORESOURCE_RANGELENGTH  macro  include/linux/ioport.h  41  #define IORESOURCE_RANGELENGTH 0x00010000
IORESOURCE_SHADOWABLE  macro  include/linux/ioport.h  42  #define IORESOURCE_SHADOWABLE 0x00020000
IORESOURCE_SIZEALIGN  macro  include/linux/ioport.h  44  #define IORESOURCE_SIZEALIGN 0x00040000
IORESOURCE_STARTALIGN  macro  include/linux/ioport.h  45  #define IORESOURCE_STARTALIGN 0x00080000
IORESOURCE_MEM_64  macro  include/linux/ioport.h  47  #define IORESOURCE_MEM_64 0x00100000
IORESOURCE_WINDOW  macro  include/linux/ioport.h  48  #define IORESOURCE_WINDOW 0x00200000
IORESOURCE_MUXED  macro  include/linux/ioport.h  49  #define IORESOURCE_MUXED 0x00400000
IORESOURCE_EXCLUSIVE  macro  include/linux/ioport.h  51  #define IORESOURCE_EXCLUSIVE 0x08000000
IORESOURCE_DISABLED  macro  include/linux/ioport.h  52  #define IORESOURCE_DISABLED 0x10000000
IORESOURCE_UNSET  macro  include/linux/ioport.h  53  #define IORESOURCE_UNSET 0x20000000
IORESOURCE_AUTO  macro  include/linux/ioport.h  54  #define IORESOURCE_AUTO 0x40000000
IORESOURCE_BUSY  macro  include/linux/ioport.h  55  #define IORESOURCE_BUSY 0x80000000
IORESOURCE_IRQ_HIGHEDGE  macro  include/linux/ioport.h  58  #define IORESOURCE_IRQ_HIGHEDGE (1<<0)
IORESOURCE_IRQ_LOWEDGE  macro  include/linux/ioport.h  59  #define IORESOURCE_IRQ_LOWEDGE (1<<1)
IORESOURCE_IRQ_HIGHLEVEL  macro  include/linux/ioport.h  60  #define IORESOURCE_IRQ_HIGHLEVEL (1<<2)
IORESOURCE_IRQ_LOWLEVEL  macro  include/linux/ioport.h  61  #define IORESOURCE_IRQ_LOWLEVEL (1<<3)
IORESOURCE_IRQ_SHAREABLE  macro  include/linux/ioport.h  62  #define IORESOURCE_IRQ_SHAREABLE (1<<4)
IORESOURCE_IRQ_OPTIONAL  macro  include/linux/ioport.h  63  #define IORESOURCE_IRQ_OPTIONAL (1<<5)
IORESOURCE_DMA_TYPE_MASK  macro  include/linux/ioport.h  66  #define IORESOURCE_DMA_TYPE_MASK (3<<0)
IORESOURCE_DMA_8BIT  macro  include/linux/ioport.h  67  #define IORESOURCE_DMA_8BIT (0<<0)
IORESOURCE_DMA_8AND16BIT  macro  include/linux/ioport.h  68  #define IORESOURCE_DMA_8AND16BIT (1<<0)
IORESOURCE_DMA_16BIT  macro  include/linux/ioport.h  69  #define IORESOURCE_DMA_16BIT (2<<0)
IORESOURCE_DMA_MASTER  macro  include/linux/ioport.h  71  #define IORESOURCE_DMA_MASTER (1<<2)
IORESOURCE_DMA_BYTE  macro  include/linux/ioport.h  72  #define IORESOURCE_DMA_BYTE (1<<3)
IORESOURCE_DMA_WORD  macro  include/linux/ioport.h  73  #define IORESOURCE_DMA_WORD (1<<4)
IORESOURCE_DMA_SPEED_MASK  macro  include/linux/ioport.h  75  #define IORESOURCE_DMA_SPEED_MASK (3<<6)
IORESOURCE_DMA_COMPATIBLE  macro  include/linux/ioport.h  76  #define IORESOURCE_DMA_COMPATIBLE (0<<6)
IORESOURCE_DMA_TYPEA  macro  include/linux/ioport.h  77  #define IORESOURCE_DMA_TYPEA (1<<6)
IORESOURCE_DMA_TYPEB  macro  include/linux/ioport.h  78  #define IORESOURCE_DMA_TYPEB (2<<6)
IORESOURCE_DMA_TYPEF  macro  include/linux/ioport.h  79  #define IORESOURCE_DMA_TYPEF (3<<6)
IORESOURCE_MEM_WRITEABLE  macro  include/linux/ioport.h  82  #define IORESOURCE_MEM_WRITEABLE (1<<0)
IORESOURCE_MEM_CACHEABLE  macro  include/linux/ioport.h  83  #define IORESOURCE_MEM_CACHEABLE (1<<1)
IORESOURCE_MEM_RANGELENGTH  macro  include/linux/ioport.h  84  #define IORESOURCE_MEM_RANGELENGTH (1<<2)
IORESOURCE_MEM_TYPE_MASK  macro  include/linux/ioport.h  85  #define IORESOURCE_MEM_TYPE_MASK (3<<3)
IORESOURCE_MEM_8BIT  macro  include/linux/ioport.h  86  #define IORESOURCE_MEM_8BIT (0<<3)
IORESOURCE_MEM_16BIT  macro  include/linux/ioport.h  87  #define IORESOURCE_MEM_16BIT (1<<3)
IORESOURCE_MEM_8AND16BIT  macro  include/linux/ioport.h  88  #define IORESOURCE_MEM_8AND16BIT (2<<3)
IORESOURCE_MEM_32BIT  macro  include/linux/ioport.h  89  #define IORESOURCE_MEM_32BIT (3<<3)
IORESOURCE_MEM_SHADOWABLE  macro  include/linux/ioport.h  90  #define IORESOURCE_MEM_SHADOWABLE (1<<5)
IORESOURCE_MEM_EXPANSIONROM  macro  include/linux/ioport.h  91  #define IORESOURCE_MEM_EXPANSIONROM (1<<6)
IORESOURCE_IO_16BIT_ADDR  macro  include/linux/ioport.h  94  #define IORESOURCE_IO_16BIT_ADDR (1<<0)
IORESOURCE_IO_FIXED  macro  include/linux/ioport.h  95  #define IORESOURCE_IO_FIXED (1<<1)
IORESOURCE_ROM_ENABLE  macro  include/linux/ioport.h  98  #define IORESOURCE_ROM_ENABLE (1<<0)
IORESOURCE_ROM_SHADOW  macro  include/linux/ioport.h  99  #define IORESOURCE_ROM_SHADOW (1<<1)
IORESOURCE_ROM_COPY  macro  include/linux/ioport.h  100  #define IORESOURCE_ROM_COPY (1<<2)
IORESOURCE_ROM_BIOS_COPY  macro  include/linux/ioport.h  101  #define IORESOURCE_ROM_BIOS_COPY (1<<3)
IORESOURCE_PCI_FIXED  macro  include/linux/ioport.h  104  #define IORESOURCE_PCI_FIXED (1<<4)
DEFINE_RES_NAMED  macro  include/linux/ioport.h  108  #define DEFINE_RES_NAMED(_start,_size,_name,_flags) { .start = (_start), .end = (_start) + (_size) - 1, .name = (_name), .flags = (_flags), }
DEFINE_RES_IO_NAMED  macro  include/linux/ioport.h  116  #define DEFINE_RES_IO_NAMED(_start,_size,_name) DEFINE_RES_NAMED((_start), (_size), (_name), IORESOURCE_IO)
DEFINE_RES_IO  macro  include/linux/ioport.h  118  #define DEFINE_RES_IO(_start,_size) DEFINE_RES_IO_NAMED((_start), (_size), NULL)
DEFINE_RES_MEM_NAMED  macro  include/linux/ioport.h  121  #define DEFINE_RES_MEM_NAMED(_start,_size,_name) DEFINE_RES_NAMED((_start), (_size), (_name), IORESOURCE_MEM)
DEFINE_RES_MEM  macro  include/linux/ioport.h  123  #define DEFINE_RES_MEM(_start,_size) DEFINE_RES_MEM_NAMED((_start), (_size), NULL)
DEFINE_RES_IRQ_NAMED  macro  include/linux/ioport.h  126  #define DEFINE_RES_IRQ_NAMED(_irq,_name) DEFINE_RES_NAMED((_irq), 1, (_name), IORESOURCE_IRQ)
DEFINE_RES_IRQ  macro  include/linux/ioport.h  128  #define DEFINE_RES_IRQ(_irq) DEFINE_RES_IRQ_NAMED((_irq), NULL)
DEFINE_RES_DMA_NAMED  macro  include/linux/ioport.h  131  #define DEFINE_RES_DMA_NAMED(_dma,_name) DEFINE_RES_NAMED((_dma), 1, (_name), IORESOURCE_DMA)
DEFINE_RES_DMA  macro  include/linux/ioport.h  133  #define DEFINE_RES_DMA(_dma) DEFINE_RES_DMA_NAMED((_dma), NULL)
request_resource_conflict  prototype  include/linux/ioport.h  140  extern struct resource *request_resource_conflict(struct resource *root,struct resource *new);
request_resource  prototype  include/linux/ioport.h  141  extern int request_resource(struct resource *root,struct resource *new);
release_resource  prototype  include/linux/ioport.h  142  extern int release_resource(struct resource *new);
release_child_resources  prototype  include/linux/ioport.h  143  void release_child_resources(struct resource *new);
reserve_region_with_split  prototype  include/linux/ioport.h  144  extern void reserve_region_with_split(struct resource *root,resource_size_t start, resource_size_t end,const char *name);
insert_resource_conflict  prototype  include/linux/ioport.h  147  extern struct resource *insert_resource_conflict(struct resource *parent,struct resource *new);
insert_resource  prototype  include/linux/ioport.h  148  extern int insert_resource(struct resource *parent,struct resource *new);
insert_resource_expand_to_fit  prototype  include/linux/ioport.h  149  extern void insert_resource_expand_to_fit(struct resource *root,struct resource *new);
arch_remove_reservations  prototype  include/linux/ioport.h  150  extern void arch_remove_reservations(struct resource *avail);
allocate_resource  prototype  include/linux/ioport.h  151  extern int allocate_resource(struct resource *root,struct resource *new,resource_size_t size, resource_size_t min,resource_size_t max, resource_size_t align,resource_size_t (*alignf)(void *,const struct resource *,resource_size_t,resource_size_t),void *alignf_data);
lookup_resource  prototype  include/linux/ioport.h  159  struct resource *lookup_resource(struct resource *root,resource_size_t start);
adjust_resource  prototype  include/linux/ioport.h  160  int adjust_resource(struct resource *res,resource_size_t start,resource_size_t size);
resource_alignment  prototype  include/linux/ioport.h  162  resource_size_t resource_alignment(struct resource *res);
resource_size  function  include/linux/ioport.h  163  static inline resource_size_t resource_size(const struct resource *res)
resource_type  function  include/linux/ioport.h  167  static inline unsigned long resource_type(const struct resource *res)
request_region  macro  include/linux/ioport.h  173  #define request_region(start,n,name) __request_region(&ioport_resource,(start),(n),(name),0)
request_muxed_region  macro  include/linux/ioport.h  174  #define request_muxed_region(start,n,name) __request_region(&ioport_resource,(start),(n),(name),IORESOURCE_MUXED)
__request_mem_region  macro  include/linux/ioport.h  175  #define __request_mem_region(start,n,name,excl) __request_region(&iomem_resource,(start),(n),(name),excl)
request_mem_region  macro  include/linux/ioport.h  176  #define request_mem_region(start,n,name) __request_region(&iomem_resource,(start),(n),(name),0)
request_mem_region_exclusive  macro  include/linux/ioport.h  177  #define request_mem_region_exclusive(start,n,name) __request_region(&iomem_resource, (start), (n), (name), IORESOURCE_EXCLUSIVE)
rename_region  macro  include/linux/ioport.h  179  #define rename_region(region,newname) do { (region)->name = (newname); } while (0)
__request_region  prototype  include/linux/ioport.h  181  extern struct resource * __request_region(struct resource *,resource_size_t start,resource_size_t n,const char *name, int flags);
release_region  macro  include/linux/ioport.h  187  #define release_region(start,n) __release_region(&ioport_resource,(start),(n))
check_mem_region  macro  include/linux/ioport.h  188  #define check_mem_region(start,n) __check_region(&iomem_resource,(start),(n))
release_mem_region  macro  include/linux/ioport.h  189  #define release_mem_region(start,n) __release_region(&iomem_resource,(start),(n))
__check_region  prototype  include/linux/ioport.h  191  extern int __check_region(struct resource *,resource_size_t,resource_size_t);
__release_region  prototype  include/linux/ioport.h  192  extern void __release_region(struct resource *,resource_size_t,resource_size_t);
check_region  function  include/linux/ioport.h  195  static inline int __deprecated check_region(resource_size_t s,resource_size_t n)
devm_request_region  macro  include/linux/ioport.h  203  #define devm_request_region(dev,start,n,name) __devm_request_region(dev, &ioport_resource, (start), (n), (name))
devm_request_mem_region  macro  include/linux/ioport.h  205  #define devm_request_mem_region(dev,start,n,name) __devm_request_region(dev, &iomem_resource, (start), (n), (name))
__devm_request_region  prototype  include/linux/ioport.h  208  extern struct resource * __devm_request_region(struct device *dev,struct resource *parent, resource_size_t start,resource_size_t n, const char *name);
devm_release_region  macro  include/linux/ioport.h  212  #define devm_release_region(dev,start,n) __devm_release_region(dev, &ioport_resource, (start), (n))
devm_release_mem_region  macro  include/linux/ioport.h  214  #define devm_release_mem_region(dev,start,n) __devm_release_region(dev, &iomem_resource, (start), (n))
__devm_release_region  prototype  include/linux/ioport.h  217  extern void __devm_release_region(struct device *dev,struct resource *parent,resource_size_t start, resource_size_t n);
iomem_map_sanity_check  prototype  include/linux/ioport.h  219  extern int iomem_map_sanity_check(resource_size_t addr,unsigned long size);
iomem_is_exclusive  prototype  include/linux/ioport.h  220  extern int iomem_is_exclusive(u64 addr);
walk_system_ram_range  prototype  include/linux/ioport.h  223  walk_system_ram_range(unsigned long start_pfn,unsigned long nr_pages,void *arg, int (*func)(unsigned long, unsigned long, void *));
resource_overlaps  function  include/linux/ioport.h  227  static inline bool resource_overlaps(struct resource *r1,struct resource *r2)
_LINUX_SLAB_H  macro  include/linux/slab.h  10  #define _LINUX_SLAB_H
SLAB_DEBUG_FREE  macro  include/linux/slab.h  19  #define SLAB_DEBUG_FREE 0x00000100UL
SLAB_RED_ZONE  macro  include/linux/slab.h  20  #define SLAB_RED_ZONE 0x00000400UL
SLAB_POISON  macro  include/linux/slab.h  21  #define SLAB_POISON 0x00000800UL
SLAB_HWCACHE_ALIGN  macro  include/linux/slab.h  22  #define SLAB_HWCACHE_ALIGN 0x00002000UL
SLAB_CACHE_DMA  macro  include/linux/slab.h  23  #define SLAB_CACHE_DMA 0x00004000UL
SLAB_STORE_USER  macro  include/linux/slab.h  24  #define SLAB_STORE_USER 0x00010000UL
SLAB_PANIC  macro  include/linux/slab.h  25  #define SLAB_PANIC 0x00040000UL
SLAB_DESTROY_BY_RCU  macro  include/linux/slab.h  54  #define SLAB_DESTROY_BY_RCU 0x00080000UL
SLAB_MEM_SPREAD  macro  include/linux/slab.h  55  #define SLAB_MEM_SPREAD 0x00100000UL
SLAB_TRACE  macro  include/linux/slab.h  56  #define SLAB_TRACE 0x00200000UL
SLAB_DEBUG_OBJECTS  macro  include/linux/slab.h  62  # define SLAB_DEBUG_OBJECTS 0x00000000UL
SLAB_NOLEAKTRACE  macro  include/linux/slab.h  65  #define SLAB_NOLEAKTRACE 0x00800000UL
SLAB_NOTRACK  macro  include/linux/slab.h  71  # define SLAB_NOTRACK 0x00000000UL
SLAB_FAILSLAB  macro  include/linux/slab.h  76  # define SLAB_FAILSLAB 0x00000000UL
SLAB_RECLAIM_ACCOUNT  macro  include/linux/slab.h  80  #define SLAB_RECLAIM_ACCOUNT 0x00020000UL
SLAB_TEMPORARY  macro  include/linux/slab.h  81  #define SLAB_TEMPORARY SLAB_RECLAIM_ACCOUNT
ZERO_SIZE_PTR  macro  include/linux/slab.h  90  #define ZERO_SIZE_PTR ((void *)16)
ZERO_OR_NULL_PTR  macro  include/linux/slab.h  92  #define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= (unsigned long)ZERO_SIZE_PTR)
kmem_cache_init  prototype  include/linux/slab.h  98  void __init kmem_cache_init(void);
slab_is_available  prototype  include/linux/slab.h  99  int slab_is_available(void);
kmem_cache_create  prototype  include/linux/slab.h  101  struct kmem_cache *kmem_cache_create(const char *,size_t,size_t,unsigned long,void (*)(void *));
kmem_cache_destroy  prototype  include/linux/slab.h  104  void kmem_cache_destroy(struct kmem_cache *);
kmem_cache_shrink  prototype  include/linux/slab.h  105  int kmem_cache_shrink(struct kmem_cache *);
kmem_cache_free  prototype  include/linux/slab.h  106  void kmem_cache_free(struct kmem_cache *,void *);
kmem_cache_size  prototype  include/linux/slab.h  107  unsigned int kmem_cache_size(struct kmem_cache *);
KMEM_CACHE  macro  include/linux/slab.h  117  #define KMEM_CACHE(__struct,__flags) kmem_cache_create(#__struct, sizeof(struct __struct), __alignof__(struct __struct), (__flags), NULL)
KMALLOC_SHIFT_HIGH  macro  include/linux/slab.h  130  #define KMALLOC_SHIFT_HIGH ((MAX_ORDER + PAGE_SHIFT - 1) <= 25 ? (MAX_ORDER + PAGE_SHIFT - 1) : 25)
KMALLOC_MAX_SIZE  macro  include/linux/slab.h  133  #define KMALLOC_MAX_SIZE (1UL << KMALLOC_SHIFT_HIGH)
KMALLOC_MAX_ORDER  macro  include/linux/slab.h  134  #define KMALLOC_MAX_ORDER (KMALLOC_SHIFT_HIGH - PAGE_SHIFT)
ARCH_KMALLOC_MINALIGN  macro  include/linux/slab.h  144  #define ARCH_KMALLOC_MINALIGN __alignof__(unsigned long long)
ARCH_SLAB_MINALIGN  macro  include/linux/slab.h  153  #define ARCH_SLAB_MINALIGN __alignof__(unsigned long long)
__krealloc  prototype  include/linux/slab.h  159  void * __must_check __krealloc(const void *,size_t,gfp_t);
krealloc  prototype  include/linux/slab.h  160  void * __must_check krealloc(const void *,size_t,gfp_t);
kfree  prototype  include/linux/slab.h  161  void kfree(const void *);
kzfree  prototype  include/linux/slab.h  162  void kzfree(const void *);
ksize  prototype  include/linux/slab.h  163  size_t ksize(const void *);
kmalloc_array  function  include/linux/slab.h  243  static inline void *kmalloc_array(size_t n,size_t size,gfp_t flags)
kcalloc  function  include/linux/slab.h  256  static inline void *kcalloc(size_t n,size_t size,gfp_t flags)
kmalloc_node  function  include/linux/slab_def.h  182  static __always_inline void *kmalloc_node(size_t size,gfp_t flags,int node)
__kmalloc_node  prototype  include/linux/slab_def.h  163  extern void *__kmalloc_node(size_t size,gfp_t flags,int node);
kmem_cache_alloc  prototype  include/linux/slab_def.h  109  void *kmem_cache_alloc(struct kmem_cache *,gfp_t);
kmem_cache_alloc_node  prototype  include/linux/slab_def.h  164  extern void *kmem_cache_alloc_node(struct kmem_cache *,gfp_t flags,int node);
__kmalloc_track_caller  prototype  include/linux/slab.h  301  extern void *__kmalloc_track_caller(size_t,gfp_t,unsigned long);
kmalloc_track_caller  macro  include/linux/slab.h  305  #define kmalloc_track_caller(size,flags) __kmalloc(size, flags)
__kmalloc_node_track_caller  prototype  include/linux/slab.h  320  extern void *__kmalloc_node_track_caller(size_t,gfp_t,int,unsigned long);
kmalloc_node_track_caller  macro  include/linux/slab.h  331  #define kmalloc_node_track_caller(size,flags,node) kmalloc_track_caller(size, flags)
kmem_cache_zalloc  function  include/linux/slab.h  339  static inline void *kmem_cache_zalloc(struct kmem_cache *k,gfp_t flags)
kzalloc  function  include/linux/slab.h  349  static inline void *kzalloc(size_t size,gfp_t flags)
kzalloc_node  function  include/linux/slab.h  360  static inline void *kzalloc_node(size_t size,gfp_t flags,int node)
kmem_cache_init_late  prototype  include/linux/slab.h  365  void __init kmem_cache_init_late(void);
_LINUX_INTERRUPT_H  macro  include/linux/interrupt.h  3  #define _LINUX_INTERRUPT_H
IRQF_TRIGGER_NONE  macro  include/linux/interrupt.h  30  #define IRQF_TRIGGER_NONE 0x00000000
IRQF_TRIGGER_RISING  macro  include/linux/interrupt.h  31  #define IRQF_TRIGGER_RISING 0x00000001
IRQF_TRIGGER_FALLING  macro  include/linux/interrupt.h  32  #define IRQF_TRIGGER_FALLING 0x00000002
IRQF_TRIGGER_HIGH  macro  include/linux/interrupt.h  33  #define IRQF_TRIGGER_HIGH 0x00000004
IRQF_TRIGGER_LOW  macro  include/linux/interrupt.h  34  #define IRQF_TRIGGER_LOW 0x00000008
IRQF_TRIGGER_MASK  macro  include/linux/interrupt.h  35  #define IRQF_TRIGGER_MASK (IRQF_TRIGGER_HIGH | IRQF_TRIGGER_LOW | IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING)
IRQF_TRIGGER_PROBE  macro  include/linux/interrupt.h  37  #define IRQF_TRIGGER_PROBE 0x00000010
IRQF_DISABLED  macro  include/linux/interrupt.h  63  #define IRQF_DISABLED 0x00000020
IRQF_SAMPLE_RANDOM  macro  include/linux/interrupt.h  64  #define IRQF_SAMPLE_RANDOM 0x00000040
IRQF_SHARED  macro  include/linux/interrupt.h  65  #define IRQF_SHARED 0x00000080
IRQF_PROBE_SHARED  macro  include/linux/interrupt.h  66  #define IRQF_PROBE_SHARED 0x00000100
__IRQF_TIMER  macro  include/linux/interrupt.h  67  #define __IRQF_TIMER 0x00000200
IRQF_PERCPU  macro  include/linux/interrupt.h  68  #define IRQF_PERCPU 0x00000400
IRQF_NOBALANCING  macro  include/linux/interrupt.h  69  #define IRQF_NOBALANCING 0x00000800
IRQF_IRQPOLL  macro  include/linux/interrupt.h  70  #define IRQF_IRQPOLL 0x00001000
IRQF_ONESHOT  macro  include/linux/interrupt.h  71  #define IRQF_ONESHOT 0x00002000
IRQF_NO_SUSPEND  macro  include/linux/interrupt.h  72  #define IRQF_NO_SUSPEND 0x00004000
IRQF_FORCE_RESUME  macro  include/linux/interrupt.h  73  #define IRQF_FORCE_RESUME 0x00008000
IRQF_NO_THREAD  macro  include/linux/interrupt.h  74  #define IRQF_NO_THREAD 0x00010000
IRQF_EARLY_RESUME  macro  include/linux/interrupt.h  75  #define IRQF_EARLY_RESUME 0x00020000
IRQF_TIMER  macro  include/linux/interrupt.h  77  #define IRQF_TIMER (__IRQF_TIMER | IRQF_NO_SUSPEND | IRQF_NO_THREAD)
irqaction  struct  include/linux/interrupt.h  108  struct irqaction { irq_handler_t handler; void *dev_id; void __percpu *percpu_dev_id; struct irqaction *next; irq_handler_t thread_fn; struct task_struct *thread; unsigned int irq; unsigned int flags; unsigned long thread_flags; unsigned long thread_mask; const char *name; struct proc_dir_entry *dir; } ____cacheline_internodealigned_in_smp;
no_action  prototype  include/linux/interrupt.h  123  extern irqreturn_t no_action(int cpl,void *dev_id);
request_threaded_irq  function  include/linux/interrupt.h  158  request_threaded_irq(unsigned int irq,irq_handler_t handler,irq_handler_t thread_fn,unsigned long flags, const char *name, void *dev)
request_irq  prototype  include/linux/interrupt.h  148  request_irq(unsigned int irq,irq_handler_t handler,unsigned long flags,const char *name, void *dev);
request_any_context_irq  function  include/linux/interrupt.h  166  request_any_context_irq(unsigned int irq,irq_handler_t handler,unsigned long flags, const char *name, void *dev_id)
request_percpu_irq  function  include/linux/interrupt.h  173  request_percpu_irq(unsigned int irq,irq_handler_t handler,const char *devname, void __percpu *percpu_dev_id)
free_irq  prototype  include/linux/interrupt.h  180  extern void free_irq(unsigned int,void *);
free_percpu_irq  prototype  include/linux/interrupt.h  181  extern void free_percpu_irq(unsigned int,void __percpu *);
devm_request_threaded_irq  prototype  include/linux/interrupt.h  186  devm_request_threaded_irq(struct device *dev,unsigned int irq,irq_handler_t handler, irq_handler_t thread_fn,unsigned long irqflags, const char *devname,void *dev_id);
devm_request_irq  function  include/linux/interrupt.h  192  devm_request_irq(struct device *dev,unsigned int irq,irq_handler_t handler,unsigned long irqflags, const char *devname, void *dev_id)
devm_free_irq  prototype  include/linux/interrupt.h  199  extern void devm_free_irq(struct device *dev,unsigned int irq,void *dev_id);
local_irq_enable_in_hardirq  macro  include/linux/interrupt.h  216  # define local_irq_enable_in_hardirq() local_irq_enable()
disable_irq_nosync  prototype  include/linux/interrupt.h  219  extern void disable_irq_nosync(unsigned int irq);
disable_irq  prototype  include/linux/interrupt.h  220  extern void disable_irq(unsigned int irq);
disable_percpu_irq  prototype  include/linux/interrupt.h  221  extern void disable_percpu_irq(unsigned int irq);
enable_irq  prototype  include/linux/interrupt.h  222  extern void enable_irq(unsigned int irq);
enable_percpu_irq  prototype  include/linux/interrupt.h  223  extern void enable_percpu_irq(unsigned int irq,unsigned int type);
suspend_device_irqs  function  include/linux/interrupt.h  235  static inline void suspend_device_irqs(void) { };
resume_device_irqs  function  include/linux/interrupt.h  236  static inline void resume_device_irqs(void) { };
check_wakeup_irqs  function  include/linux/interrupt.h  237  static inline int check_wakeup_irqs(void) { return 0; }
irq_set_affinity  function  include/linux/interrupt.h  280  static inline int irq_set_affinity(unsigned int irq,const struct cpumask *m)
irq_can_set_affinity  function  include/linux/interrupt.h  285  static inline int irq_can_set_affinity(unsigned int irq)
irq_select_affinity  function  include/linux/interrupt.h  290  static inline int irq_select_affinity(unsigned int irq) { return 0; }
irq_set_affinity_hint  function  include/linux/interrupt.h  292  static inline int irq_set_affinity_hint(unsigned int irq,const struct cpumask *m)
irq_affinity_notify  struct  include/linux/interrupt.h  262  struct irq_affinity_notify { unsigned int irq; struct kref kref; struct work_struct work; void (*notify)(struct irq_affinity_notify *, const cpumask_t *mask); void (*release)(struct kref *ref); };
irq_set_affinity_notifier  prototype  include/linux/interrupt.h  271  irq_set_affinity_notifier(unsigned int irq,struct irq_affinity_notify *notify);
irq_run_affinity_notifiers  function  include/linux/interrupt.h  273  static inline void irq_run_affinity_notifiers(void)
disable_irq_nosync_lockdep  macro  include/linux/interrupt.h  371  # define disable_irq_nosync_lockdep(irq) disable_irq_nosync(irq)
disable_irq_nosync_lockdep_irqsave  macro  include/linux/interrupt.h  372  # define disable_irq_nosync_lockdep_irqsave(irq,flags) disable_irq_nosync(irq)
disable_irq_lockdep  macro  include/linux/interrupt.h  374  # define disable_irq_lockdep(irq) disable_irq(irq)
enable_irq_lockdep  macro  include/linux/interrupt.h  375  # define enable_irq_lockdep(irq) enable_irq(irq)
enable_irq_lockdep_irqrestore  macro  include/linux/interrupt.h  376  # define enable_irq_lockdep_irqrestore(irq,flags) enable_irq(irq)
irq_set_irq_wake  prototype  include/linux/interrupt.h  352  extern int irq_set_irq_wake(unsigned int irq,unsigned int on);
enable_irq_wake  function  include/linux/interrupt.h  380  static inline int enable_irq_wake(unsigned int irq)
disable_irq_wake  function  include/linux/interrupt.h  385  static inline int disable_irq_wake(unsigned int irq)
force_irqthreads  macro  include/linux/interrupt.h  395  #define force_irqthreads (0)
set_softirq_pending  macro  arch/x86/include/asm/hardirq.h  44  #define set_softirq_pending(x) this_cpu_write(irq_stat.__softirq_pending, (x))
or_softirq_pending  macro  arch/x86/include/asm/hardirq.h  46  #define or_softirq_pending(x) this_cpu_or(irq_stat.__softirq_pending,(x))
hard_irq_disable  macro  include/linux/interrupt.h  410  #define hard_irq_disable() do { } while(0)
softirq_action  struct  include/linux/interrupt.h  444  struct softirq_action { void (*action)(struct softirq_action *); };
do_softirq  prototype  include/linux/interrupt.h  449  asmlinkage void do_softirq(void);
__do_softirq  prototype  include/linux/interrupt.h  450  asmlinkage void __do_softirq(void);
open_softirq  prototype  include/linux/interrupt.h  451  extern void open_softirq(int nr,void (*action)(struct softirq_action *));
softirq_init  prototype  include/linux/interrupt.h  452  extern void softirq_init(void);
__raise_softirq_irqoff  prototype  include/linux/interrupt.h  453  extern void __raise_softirq_irqoff(unsigned int nr);
raise_softirq_irqoff  prototype  include/linux/interrupt.h  455  extern void raise_softirq_irqoff(unsigned int nr);
raise_softirq  prototype  include/linux/interrupt.h  456  extern void raise_softirq(unsigned int nr);
this_cpu_ksoftirqd  function  include/linux/interrupt.h  469  static inline struct task_struct *this_cpu_ksoftirqd(void)
send_remote_softirq  prototype  include/linux/interrupt.h  477  extern void send_remote_softirq(struct call_single_data *cp,int cpu,int softirq);
__send_remote_softirq  prototype  include/linux/interrupt.h  482  extern void __send_remote_softirq(struct call_single_data *cp,int cpu,int this_cpu, int softirq);
tasklet_struct  struct  include/linux/interrupt.h  505  struct tasklet_struct { struct tasklet_struct *next; unsigned long state; atomic_t count; void (*func)(unsigned long); unsigned long data; };
DECLARE_TASKLET  macro  include/linux/interrupt.h  514  #define DECLARE_TASKLET(name,func,data) struct tasklet_struct name = { NULL, 0, ATOMIC_INIT(0), func, data }
DECLARE_TASKLET_DISABLED  macro  include/linux/interrupt.h  517  #define DECLARE_TASKLET_DISABLED(name,func,data) struct tasklet_struct name = { NULL, 0, ATOMIC_INIT(1), func, data }
tasklet_trylock  macro  include/linux/interrupt.h  544  #define tasklet_trylock(t) 1
tasklet_unlock  macro  include/linux/interrupt.h  546  #define tasklet_unlock(t) do { } while (0)
tasklet_unlock_wait  macro  include/linux/interrupt.h  545  #define tasklet_unlock_wait(t) do { } while (0)
__tasklet_schedule  prototype  include/linux/interrupt.h  549  extern void __tasklet_schedule(struct tasklet_struct *t);
tasklet_schedule  function  include/linux/interrupt.h  551  static inline void tasklet_schedule(struct tasklet_struct *t)
__tasklet_hi_schedule  prototype  include/linux/interrupt.h  557  extern void __tasklet_hi_schedule(struct tasklet_struct *t);
tasklet_hi_schedule  function  include/linux/interrupt.h  559  static inline void tasklet_hi_schedule(struct tasklet_struct *t)
__tasklet_hi_schedule_first  prototype  include/linux/interrupt.h  565  extern void __tasklet_hi_schedule_first(struct tasklet_struct *t);
tasklet_hi_schedule_first  function  include/linux/interrupt.h  573  static inline void tasklet_hi_schedule_first(struct tasklet_struct *t)
tasklet_disable_nosync  function  include/linux/interrupt.h  580  static inline void tasklet_disable_nosync(struct tasklet_struct *t)
tasklet_disable  function  include/linux/interrupt.h  586  static inline void tasklet_disable(struct tasklet_struct *t)
tasklet_enable  function  include/linux/interrupt.h  593  static inline void tasklet_enable(struct tasklet_struct *t)
tasklet_hi_enable  function  include/linux/interrupt.h  599  static inline void tasklet_hi_enable(struct tasklet_struct *t)
tasklet_kill  prototype  include/linux/interrupt.h  605  extern void tasklet_kill(struct tasklet_struct *t);
tasklet_kill_immediate  prototype  include/linux/interrupt.h  606  extern void tasklet_kill_immediate(struct tasklet_struct *t,unsigned int cpu);
tasklet_init  prototype  include/linux/interrupt.h  607  extern void tasklet_init(struct tasklet_struct *t,void (*func)(unsigned long), unsigned long data);
tasklet_hrtimer  struct  include/linux/interrupt.h  610  struct tasklet_hrtimer { struct hrtimer timer; struct tasklet_struct tasklet; enum hrtimer_restart (*function)(struct hrtimer *); };
tasklet_hrtimer_init  prototype  include/linux/interrupt.h  617  tasklet_hrtimer_init(struct tasklet_hrtimer *ttimer,enum hrtimer_restart (*function)(struct hrtimer *),clockid_t which_clock, enum hrtimer_mode mode);
tasklet_hrtimer_start  function  include/linux/interrupt.h  622  int tasklet_hrtimer_start(struct tasklet_hrtimer *ttimer,ktime_t time,const enum hrtimer_mode mode)
tasklet_hrtimer_cancel  function  include/linux/interrupt.h  629  void tasklet_hrtimer_cancel(struct tasklet_hrtimer *ttimer)
probe_irq_on  prototype  include/linux/interrupt.h  677  extern unsigned long probe_irq_on(void);
probe_irq_off  prototype  include/linux/interrupt.h  678  extern int probe_irq_off(unsigned long);
probe_irq_mask  prototype  include/linux/interrupt.h  679  extern unsigned int probe_irq_mask(unsigned long);
init_irq_proc  function  include/linux/interrupt.h  686  static inline void init_irq_proc(void)
show_interrupts  prototype  include/linux/interrupt.h  692  int show_interrupts(struct seq_file *p,void *v);
arch_show_interrupts  prototype  include/linux/interrupt.h  693  int arch_show_interrupts(struct seq_file *p,int prec);
early_irq_init  prototype  include/linux/interrupt.h  695  extern int early_irq_init(void);
arch_probe_nr_irqs  prototype  include/linux/interrupt.h  696  extern int arch_probe_nr_irqs(void);
arch_early_irq_init  prototype  include/linux/interrupt.h  697  extern int arch_early_irq_init(void);
LINUX_PCI_H  macro  include/linux/pci.h  18  #define LINUX_PCI_H
PCI_DEVFN  macro  include/linux/pci.h  30  #define PCI_DEVFN(slot,func) ((((slot) & 0x1f) << 3) | ((func) & 0x07))
PCI_SLOT  macro  include/linux/pci.h  31  #define PCI_SLOT(devfn) (((devfn) >> 3) & 0x1f)
PCI_FUNC  macro  include/linux/pci.h  32  #define PCI_FUNC(devfn) ((devfn) & 0x07)
PCIIOC_BASE  macro  include/linux/pci.h  35  #define PCIIOC_BASE ('P' << 24 | 'C' << 16 | 'I' << 8)
PCIIOC_CONTROLLER  macro  include/linux/pci.h  36  #define PCIIOC_CONTROLLER (PCIIOC_BASE | 0x00)
PCIIOC_MMAP_IS_IO  macro  include/linux/pci.h  37  #define PCIIOC_MMAP_IS_IO (PCIIOC_BASE | 0x01)
PCIIOC_MMAP_IS_MEM  macro  include/linux/pci.h  38  #define PCIIOC_MMAP_IS_MEM (PCIIOC_BASE | 0x02)
PCIIOC_WRITE_COMBINE  macro  include/linux/pci.h  39  #define PCIIOC_WRITE_COMBINE (PCIIOC_BASE | 0x03)
pci_slot  struct  include/linux/pci.h  61  struct pci_slot { struct pci_bus *bus; struct list_head list; struct hotplug_slot *hotplug; unsigned char number; struct kobject kobj; };
pci_slot_name  function  include/linux/pci.h  69  static inline const char *pci_slot_name(const struct pci_slot *slot)
pci_mmap_state  enum  include/linux/pci.h  75  enum pci_mmap_state { pci_mmap_io, pci_mmap_mem };
PCI_DMA_BIDIRECTIONAL  macro  include/linux/pci.h  81  #define PCI_DMA_BIDIRECTIONAL 0
PCI_DMA_TODEVICE  macro  include/linux/pci.h  82  #define PCI_DMA_TODEVICE 1
PCI_DMA_FROMDEVICE  macro  include/linux/pci.h  83  #define PCI_DMA_FROMDEVICE 2
PCI_DMA_NONE  macro  include/linux/pci.h  84  #define PCI_DMA_NONE 3
PCI_D0  macro  include/linux/pci.h  119  #define PCI_D0 ((pci_power_t __force) 0)
PCI_D1  macro  include/linux/pci.h  120  #define PCI_D1 ((pci_power_t __force) 1)
PCI_D2  macro  include/linux/pci.h  121  #define PCI_D2 ((pci_power_t __force) 2)
PCI_D3hot  macro  include/linux/pci.h  122  #define PCI_D3hot ((pci_power_t __force) 3)
PCI_D3cold  macro  include/linux/pci.h  123  #define PCI_D3cold ((pci_power_t __force) 4)
PCI_UNKNOWN  macro  include/linux/pci.h  124  #define PCI_UNKNOWN ((pci_power_t __force) 5)
PCI_POWER_ERROR  macro  include/linux/pci.h  125  #define PCI_POWER_ERROR ((pci_power_t __force) -1)
pci_power_name  function  include/linux/pci.h  130  static inline const char *pci_power_name(pci_power_t state)
PCI_PM_D2_DELAY  macro  include/linux/pci.h  135  #define PCI_PM_D2_DELAY 200
PCI_PM_D3_WAIT  macro  include/linux/pci.h  136  #define PCI_PM_D3_WAIT 10
PCI_PM_BUS_WAIT  macro  include/linux/pci.h  137  #define PCI_PM_BUS_WAIT 50
pci_channel_state  enum  include/linux/pci.h  145  enum pci_channel_state { pci_channel_io_normal = (__force pci_channel_state_t) 1, pci_channel_io_frozen = (__force pci_channel_state_t) 2, pci_channel_io_perm_failure = (__force pci_channel_state_t) 3, };
pcie_reset_state  enum  include/linux/pci.h  158  enum pcie_reset_state { pcie_deassert_reset = (__force pcie_reset_state_t) 1, pcie_warm_reset = (__force pcie_reset_state_t) 2, pcie_hot_reset = (__force pcie_reset_state_t) 3 };
pci_dev_flags  enum  include/linux/pci.h  170  enum pci_dev_flags { PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG = (__force pci_dev_flags_t) 1, PCI_DEV_FLAGS_NO_D3 = (__force pci_dev_flags_t) 2, PCI_DEV_FLAGS_ASSIGNED = (__force pci_dev_flags_t) 4, };
pci_irq_reroute_variant  enum  include/linux/pci.h  181  enum pci_irq_reroute_variant { INTEL_IRQ_REROUTE_VARIANT = 1, MAX_IRQ_REROUTE_VARIANTS = 3 };
pci_bus_flags  enum  include/linux/pci.h  187  enum pci_bus_flags { PCI_BUS_FLAGS_NO_MSI = (__force pci_bus_flags_t) 1, PCI_BUS_FLAGS_NO_MMRBC = (__force pci_bus_flags_t) 2, };
pci_bus_speed  enum  include/linux/pci.h  193  enum pci_bus_speed { PCI_SPEED_33MHz = 0x00, PCI_SPEED_66MHz = 0x01, PCI_SPEED_66MHz_PCIX = 0x02, PCI_SPEED_100MHz_PCIX = 0x03, PCI_SPEED_133MHz_PCIX = 0x04, PCI_SPEED_66MHz_PCIX_ECC = 0x05, PCI_SPEED_100MHz_PCIX_ECC = 0x06, PCI_SPEED_133MHz_PCIX_ECC = 0x07, PCI_SPEED_66MHz_PCIX_266 = 0x09, PCI_SPEED_100MHz_PCIX_266 = 0x0a, PCI_SPEED_133MHz_PCIX_266 = 0x0b, AGP_UNKNOWN = 0x0c, AGP_1X = 0x0d, AGP_2X = 0x0e, AGP_4X = 0x0f, AGP_8X = 0x10, PCI_SPEED_66MHz_PCIX_533 = 0x11, PCI_SPEED_100MHz_PCIX_533 = 0x12, PCI_SPEED_133MHz_PCIX_533 = 0x13, PCIE_SPEED_2_5GT = 0x14, PCIE_SPEED_5_0GT = 0x15, PCIE_SPEED_8_0GT = 0x16, PCI_SPEED_UNKNOWN = 0xff, };
pci_cap_saved_data  struct  include/linux/pci.h  219  struct pci_cap_saved_data { char cap_nr; unsigned int size; u32 data[0]; };
pci_cap_saved_state  struct  include/linux/pci.h  225  struct pci_cap_saved_state { struct hlist_node next; struct pci_cap_saved_data cap; };
pci_dev  struct  include/linux/pci.h  238  struct pci_dev { struct list_head bus_list; struct pci_bus *bus; struct pci_bus *subordinate; void *sysdata; struct proc_dir_entry *procent; struct pci_slot *slot; unsigned int devfn; unsigned short vendor; unsigned short device; unsigned short subsystem_vendor; unsigned short subsystem_device; u8 revision; u8 hdr_type; u8 pcie_cap; u8 pcie_type:4; u8 pcie_mpss:3; u8 rom_base_reg; u8 pin; struct pci_driver *driver; u64 dma_mask; struct device_dma_parameters dma_parms; pci_power_t current_state; int pm_cap; unsigned int pme_support:5; unsigned int pme_interrupt:1; unsigned int pme_poll:1; unsigned int d1_support:1; unsigned int d2_support:1; unsigned int no_d1d2:1; unsigned int mmio_always_on:1; unsigned int wakeup_prepared:1; unsigned int d3_delay; struct pcie_link_state *link_state; pci_channel_state_t error_state; struct device dev; int cfg_size; unsigned int irq; struct resource resource[DEVICE_COUNT_RESOURCE]; unsigned int transparent:1; unsigned int multifunction:1; unsigned int is_added:1; unsigned int is_busmaster:1; unsigned int no_msi:1; unsigned int block_cfg_access:1; unsigned int broken_parity_status:1; unsigned int irq_reroute_variant:2; unsigned int msi_enabled:1; unsigned int msix_enabled:1; unsigned int ari_enabled:1; unsigned int is_managed:1; unsigned int is_pcie:1; unsigned int needs_freset:1; unsigned int state_saved:1; unsigned int is_physfn:1; unsigned int is_virtfn:1; unsigned int reset_fn:1; unsigned int is_hotplug_bridge:1; unsigned int __aer_firmware_first_valid:1; unsigned int __aer_firmware_first:1; pci_dev_flags_t dev_flags; atomic_t enable_cnt; u32 saved_config_space[16]; struct hlist_head saved_cap_space; struct bin_attribute *rom_attr; int rom_attr_enabled; struct bin_attribute *res_attr[DEVICE_COUNT_RESOURCE]; struct bin_attribute *res_attr_wc[DEVICE_COUNT_RESOURCE]; struct list_head msi_list; struct kset *msi_kset; struct pci_vpd *vpd; struct pci_sriov *sriov; struct pci_dev *physfn; }; struct pci_ats *ats; };
pci_physfn  function  include/linux/pci.h  350  static inline struct pci_dev *pci_physfn(struct pci_dev *dev)
alloc_pci_dev  prototype  include/linux/pci.h  360  extern struct pci_dev *alloc_pci_dev(void);
pci_dev_b  macro  include/linux/pci.h  362  #define pci_dev_b(n) list_entry(n,struct pci_dev,bus_list)
to_pci_dev  macro  include/linux/pci.h  363  #define to_pci_dev(n) container_of(n,struct pci_dev,dev)
for_each_pci_dev  macro  include/linux/pci.h  364  #define for_each_pci_dev(d) while ((d = pci_get_device(PCI_ANY_ID,PCI_ANY_ID,d)) != NULL)
pci_channel_offline  function  include/linux/pci.h  366  static inline int pci_channel_offline(struct pci_dev *pdev)
pci_host_bridge_window  struct  include/linux/pci.h  371  struct pci_host_bridge_window { struct list_head list; struct resource *res; resource_size_t offset; };
pci_host_bridge  struct  include/linux/pci.h  377  struct pci_host_bridge { struct device dev; struct pci_bus *bus; struct list_head windows; void (*release_fn)(struct pci_host_bridge *); void *release_data; };
to_pci_host_bridge  macro  include/linux/pci.h  385  #define to_pci_host_bridge(n) container_of(n,struct pci_host_bridge,dev)
pci_set_host_bridge_release  prototype  include/linux/pci.h  386  void pci_set_host_bridge_release(struct pci_host_bridge *bridge,void (*release_fn)(struct pci_host_bridge *),void *release_data);
PCI_SUBTRACTIVE_DECODE  macro  include/linux/pci.h  403  #define PCI_SUBTRACTIVE_DECODE 0x1
pci_bus_resource  struct  include/linux/pci.h  405  struct pci_bus_resource { struct list_head list; struct resource *res; unsigned int flags; };
PCI_REGION_FLAG_MASK  macro  include/linux/pci.h  411  #define PCI_REGION_FLAG_MASK 0x0fU
pci_bus  struct  include/linux/pci.h  413  struct pci_bus { struct list_head node; struct pci_bus *parent; struct list_head children; struct list_head devices; struct pci_dev *self; struct list_head slots; struct resource *resource[PCI_BRIDGE_RESOURCE_NUM]; struct list_head resources; struct pci_ops *ops; void *sysdata; struct proc_dir_entry *procdir; unsigned char number; unsigned char primary; unsigned char secondary; unsigned char subordinate; unsigned char max_bus_speed; unsigned char cur_bus_speed; char name[48]; unsigned short bridge_ctl; pci_bus_flags_t bus_flags; struct device *bridge; struct device dev; struct bin_attribute *legacy_io; struct bin_attribute *legacy_mem; unsigned int is_added:1; };
pci_bus_b  macro  include/linux/pci.h  445  #define pci_bus_b(n) list_entry(n,struct pci_bus,node)
to_pci_bus  macro  include/linux/pci.h  446  #define to_pci_bus(n) container_of(n,struct pci_bus,dev)
pci_is_root_bus  function  include/linux/pci.h  452  static inline bool pci_is_root_bus(struct pci_bus *pbus)
pci_dev_msi_enabled  function  include/linux/pci.h  463  static inline bool pci_dev_msi_enabled(struct pci_dev *pci_dev) { return false; }
PCIBIOS_SUCCESSFUL  macro  include/linux/pci.h  469  #define PCIBIOS_SUCCESSFUL 0x00
PCIBIOS_FUNC_NOT_SUPPORTED  macro  include/linux/pci.h  470  #define PCIBIOS_FUNC_NOT_SUPPORTED 0x81
PCIBIOS_BAD_VENDOR_ID  macro  include/linux/pci.h  471  #define PCIBIOS_BAD_VENDOR_ID 0x83
PCIBIOS_DEVICE_NOT_FOUND  macro  include/linux/pci.h  472  #define PCIBIOS_DEVICE_NOT_FOUND 0x86
PCIBIOS_BAD_REGISTER_NUMBER  macro  include/linux/pci.h  473  #define PCIBIOS_BAD_REGISTER_NUMBER 0x87
PCIBIOS_SET_FAILED  macro  include/linux/pci.h  474  #define PCIBIOS_SET_FAILED 0x88
PCIBIOS_BUFFER_TOO_SMALL  macro  include/linux/pci.h  475  #define PCIBIOS_BUFFER_TOO_SMALL 0x89
pci_ops  struct  include/linux/pci.h  479  struct pci_ops { int (*read)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 *val); int (*write)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 val); };
raw_pci_read  prototype  include/linux/pci.h  488  extern int raw_pci_read(unsigned int domain,unsigned int bus,unsigned int devfn, int reg, int len, u32 *val);
raw_pci_write  prototype  include/linux/pci.h  490  extern int raw_pci_write(unsigned int domain,unsigned int bus,unsigned int devfn, int reg, int len, u32 val);
pci_bus_region  struct  include/linux/pci.h  493  struct pci_bus_region { resource_size_t start; resource_size_t end; };
pci_dynids  struct  include/linux/pci.h  498  struct pci_dynids { spinlock_t lock; struct list_head list; };
pci_ers_result  enum  include/linux/pci.h  512  enum pci_ers_result { PCI_ERS_RESULT_NONE = (__force pci_ers_result_t) 1, PCI_ERS_RESULT_CAN_RECOVER = (__force pci_ers_result_t) 2, PCI_ERS_RESULT_NEED_RESET = (__force pci_ers_result_t) 3, PCI_ERS_RESULT_DISCONNECT = (__force pci_ers_result_t) 4, PCI_ERS_RESULT_RECOVERED = (__force pci_ers_result_t) 5, };
pci_error_handlers  struct  include/linux/pci.h  530  struct pci_error_handlers { pci_ers_result_t (*error_detected)(struct pci_dev *dev,enum pci_channel_state error); pci_ers_result_t (*mmio_enabled)(struct pci_dev *dev); pci_ers_result_t (*link_reset)(struct pci_dev *dev); pci_ers_result_t (*slot_reset)(struct pci_dev *dev); void (*resume)(struct pci_dev *dev); };
pci_driver  struct  include/linux/pci.h  551  struct pci_driver { struct list_head node; const char *name; const struct pci_device_id *id_table; int (*probe) (struct pci_dev *dev, const struct pci_device_id *id); void (*remove) (struct pci_dev *dev); int (*suspend) (struct pci_dev *dev, pm_message_t state); int (*suspend_late) (struct pci_dev *dev, pm_message_t state); int (*resume_early) (struct pci_dev *dev); int (*resume) (struct pci_dev *dev); void (*shutdown) (struct pci_dev *dev); struct pci_error_handlers *err_handler; struct device_driver driver; struct pci_dynids dynids; };
to_pci_driver  macro  include/linux/pci.h  567  #define to_pci_driver(drv) container_of(drv,struct pci_driver,driver)
DEFINE_PCI_DEVICE_TABLE  macro  include/linux/pci.h  576  #define DEFINE_PCI_DEVICE_TABLE(_table) const struct pci_device_id _table[] __devinitconst
PCI_DEVICE  macro  include/linux/pci.h  588  #define PCI_DEVICE(vend,dev) .vendor = (vend), .device = (dev), .subvendor = PCI_ANY_ID, .subdevice = PCI_ANY_ID
PCI_DEVICE_CLASS  macro  include/linux/pci.h  601  #define PCI_DEVICE_CLASS(dev_class,dev_class_mask) .class = (dev_class), .class_mask = (dev_class_mask), .vendor = PCI_ANY_ID, .device = PCI_ANY_ID, .subvendor = PCI_ANY_ID, .subdevice = PCI_ANY_ID
PCI_VDEVICE  macro  include/linux/pci.h  617  #define PCI_VDEVICE(vendor,device) PCI_VENDOR_ID_##vendor, (device), PCI_ANY_ID, PCI_ANY_ID, 0, 0
pcie_bus_configure_settings  prototype  include/linux/pci.h  624  extern void pcie_bus_configure_settings(struct pci_bus *bus,u8 smpss);
pcie_bus_config_types  enum  include/linux/pci.h  626  enum pcie_bus_config_types { PCIE_BUS_TUNE_OFF, PCIE_BUS_SAFE, PCIE_BUS_PERFORMANCE, PCIE_BUS_PEER2PEER, };
no_pci_devices  macro  include/linux/pci.h  1183  #define no_pci_devices() (1)
pcibios_fixup_bus  prototype  include/linux/pci.h  643  void pcibios_fixup_bus(struct pci_bus *);
pcibios_enable_device  prototype  include/linux/pci.h  644  int __must_check pcibios_enable_device(struct pci_dev *,int mask);
pcibios_setup  prototype  include/linux/pci.h  645  char *pcibios_setup(char *str);
pcibios_align_resource  prototype  include/linux/pci.h  648  resource_size_t pcibios_align_resource(void *,const struct resource *,resource_size_t,resource_size_t);
pcibios_update_irq  prototype  include/linux/pci.h  651  void pcibios_update_irq(struct pci_dev *,int irq);
pci_fixup_cardbus  prototype  include/linux/pci.h  654  void pci_fixup_cardbus(struct pci_bus *);
pcibios_resource_to_bus  prototype  include/linux/pci.h  658  void pcibios_resource_to_bus(struct pci_dev *dev,struct pci_bus_region *region,struct resource *res);
pcibios_bus_to_resource  prototype  include/linux/pci.h  660  void pcibios_bus_to_resource(struct pci_dev *dev,struct resource *res,struct pci_bus_region *region);
pcibios_scan_specific_bus  prototype  include/linux/pci.h  662  void pcibios_scan_specific_bus(int busn);
pci_find_bus  prototype  include/linux/pci.h  663  extern struct pci_bus *pci_find_bus(int domain,int busnr);
pci_bus_add_devices  prototype  include/linux/pci.h  664  void pci_bus_add_devices(const struct pci_bus *bus);
pci_scan_bus_parented  prototype  include/linux/pci.h  665  struct pci_bus *pci_scan_bus_parented(struct device *parent,int bus,struct pci_ops *ops, void *sysdata);
pci_scan_bus  prototype  include/linux/pci.h  667  struct pci_bus *pci_scan_bus(int bus,struct pci_ops *ops,void *sysdata);
pci_create_root_bus  prototype  include/linux/pci.h  668  struct pci_bus *pci_create_root_bus(struct device *parent,int bus,struct pci_ops *ops, void *sysdata,struct list_head *resources);
pci_scan_root_bus  prototype  include/linux/pci.h  671  struct pci_bus * __devinit pci_scan_root_bus(struct device *parent,int bus,struct pci_ops *ops, void *sysdata,struct list_head *resources);
pci_add_new_bus  prototype  include/linux/pci.h  674  struct pci_bus *pci_add_new_bus(struct pci_bus *parent,struct pci_dev *dev,int busnr);
pcie_update_link_speed  prototype  include/linux/pci.h  676  void pcie_update_link_speed(struct pci_bus *bus,u16 link_status);
pci_create_slot  prototype  include/linux/pci.h  677  struct pci_slot *pci_create_slot(struct pci_bus *parent,int slot_nr,const char *name,struct hotplug_slot *hotplug);
pci_destroy_slot  prototype  include/linux/pci.h  680  void pci_destroy_slot(struct pci_slot *slot);
pci_renumber_slot  prototype  include/linux/pci.h  681  void pci_renumber_slot(struct pci_slot *slot,int slot_nr);
pci_scan_slot  prototype  include/linux/pci.h  682  int pci_scan_slot(struct pci_bus *bus,int devfn);
pci_scan_single_device  prototype  include/linux/pci.h  683  struct pci_dev *pci_scan_single_device(struct pci_bus *bus,int devfn);
pci_device_add  prototype  include/linux/pci.h  684  void pci_device_add(struct pci_dev *dev,struct pci_bus *bus);
pci_scan_child_bus  prototype  include/linux/pci.h  685  unsigned int pci_scan_child_bus(struct pci_bus *bus);
pci_bus_add_device  prototype  include/linux/pci.h  686  int __must_check pci_bus_add_device(struct pci_dev *dev);
pci_read_bridge_bases  prototype  include/linux/pci.h  687  void pci_read_bridge_bases(struct pci_bus *child);
pci_find_parent_resource  prototype  include/linux/pci.h  688  struct resource *pci_find_parent_resource(const struct pci_dev *dev,struct resource *res);
pci_swizzle_interrupt_pin  prototype  include/linux/pci.h  690  u8 pci_swizzle_interrupt_pin(const struct pci_dev *dev,u8 pin);
pci_get_interrupt_pin  prototype  include/linux/pci.h  691  int pci_get_interrupt_pin(struct pci_dev *dev,struct pci_dev **bridge);
pci_common_swizzle  prototype  include/linux/pci.h  692  u8 pci_common_swizzle(struct pci_dev *dev,u8 *pinp);
pci_dev_get  prototype  include/linux/pci.h  693  extern struct pci_dev *pci_dev_get(struct pci_dev *dev);
pci_dev_put  macro  include/linux/pci.h  1184  #define pci_dev_put(dev) do { } while (0)
pci_remove_bus  prototype  include/linux/pci.h  695  extern void pci_remove_bus(struct pci_bus *b);
__pci_remove_bus_device  prototype  include/linux/pci.h  696  extern void __pci_remove_bus_device(struct pci_dev *dev);
pci_stop_and_remove_bus_device  prototype  include/linux/pci.h  697  extern void pci_stop_and_remove_bus_device(struct pci_dev *dev);
pci_stop_bus_device  prototype  include/linux/pci.h  698  extern void pci_stop_bus_device(struct pci_dev *dev);
pci_setup_cardbus  prototype  include/linux/pci.h  699  void pci_setup_cardbus(struct pci_bus *bus);
pci_sort_breadthfirst  prototype  include/linux/pci.h  700  extern void pci_sort_breadthfirst(void);
dev_is_pci  macro  include/linux/pci.h  1335  #define dev_is_pci(d) (false)
dev_is_pf  macro  include/linux/pci.h  1336  #define dev_is_pf(d) (false)
dev_num_vf  macro  include/linux/pci.h  1337  #define dev_num_vf(d) (0)
pci_lost_interrupt_reason  enum  include/linux/pci.h  707  enum pci_lost_interrupt_reason { PCI_LOST_IRQ_NO_INFORMATION = 0, PCI_LOST_IRQ_DISABLE_MSI, PCI_LOST_IRQ_DISABLE_MSIX, PCI_LOST_IRQ_DISABLE_ACPI, };
pci_lost_interrupt  prototype  include/linux/pci.h  713  enum pci_lost_interrupt_reason pci_lost_interrupt(struct pci_dev *dev);
pci_find_capability  function  include/linux/pci.h  1238  static inline int pci_find_capability(struct pci_dev *dev,int cap)
pci_find_next_capability  function  include/linux/pci.h  1243  static inline int pci_find_next_capability(struct pci_dev *dev,u8 post,int cap)
pci_find_ext_capability  function  include/linux/pci.h  1249  static inline int pci_find_ext_capability(struct pci_dev *dev,int cap)
pci_bus_find_ext_capability  prototype  include/linux/pci.h  717  int pci_bus_find_ext_capability(struct pci_bus *bus,unsigned int devfn,int cap);
pci_find_ht_capability  prototype  include/linux/pci.h  719  int pci_find_ht_capability(struct pci_dev *dev,int ht_cap);
pci_find_next_ht_capability  prototype  include/linux/pci.h  720  int pci_find_next_ht_capability(struct pci_dev *dev,int pos,int ht_cap);
pci_find_next_bus  function  include/linux/pci.h  1321  static inline struct pci_bus *pci_find_next_bus(const struct pci_bus *from)
pci_get_device  function  include/linux/pci.h  1160  static inline struct pci_dev *pci_get_device(unsigned int vendor,unsigned int device,struct pci_dev *from)
pci_get_subsys  function  include/linux/pci.h  1167  static inline struct pci_dev *pci_get_subsys(unsigned int vendor,unsigned int device,unsigned int ss_vendor,unsigned int ss_device,struct pci_dev *from)
pci_get_slot  function  include/linux/pci.h  1324  static inline struct pci_dev *pci_get_slot(struct pci_bus *bus,unsigned int devfn)
pci_get_domain_bus_and_slot  prototype  include/linux/pci.h  729  struct pci_dev *pci_get_domain_bus_and_slot(int domain,unsigned int bus,unsigned int devfn);
pci_get_bus_and_slot  function  include/linux/pci.h  1328  static inline struct pci_dev *pci_get_bus_and_slot(unsigned int bus,unsigned int devfn)
pci_get_class  function  include/linux/pci.h  1176  static inline struct pci_dev *pci_get_class(unsigned int class,struct pci_dev *from)
pci_dev_present  macro  include/linux/pci.h  1182  #define pci_dev_present(ids) (0)
pci_bus_read_config_byte  prototype  include/linux/pci.h  739  int pci_bus_read_config_byte(struct pci_bus *bus,unsigned int devfn,int where, u8 *val);
pci_bus_read_config_word  prototype  include/linux/pci.h  741  int pci_bus_read_config_word(struct pci_bus *bus,unsigned int devfn,int where, u16 *val);
pci_bus_read_config_dword  prototype  include/linux/pci.h  743  int pci_bus_read_config_dword(struct pci_bus *bus,unsigned int devfn,int where, u32 *val);
pci_bus_write_config_byte  prototype  include/linux/pci.h  745  int pci_bus_write_config_byte(struct pci_bus *bus,unsigned int devfn,int where, u8 val);
pci_bus_write_config_word  prototype  include/linux/pci.h  747  int pci_bus_write_config_word(struct pci_bus *bus,unsigned int devfn,int where, u16 val);
pci_bus_write_config_dword  prototype  include/linux/pci.h  749  int pci_bus_write_config_dword(struct pci_bus *bus,unsigned int devfn,int where, u32 val);
pci_bus_set_ops  prototype  include/linux/pci.h  751  struct pci_ops *pci_bus_set_ops(struct pci_bus *bus,struct pci_ops *ops);
pci_read_config_byte  function  include/linux/pci.h  753  static inline int pci_read_config_byte(const struct pci_dev *dev,int where,u8 *val)
pci_read_config_word  function  include/linux/pci.h  757  static inline int pci_read_config_word(const struct pci_dev *dev,int where,u16 *val)
pci_read_config_dword  function  include/linux/pci.h  761  static inline int pci_read_config_dword(const struct pci_dev *dev,int where,u32 *val)
pci_write_config_byte  function  include/linux/pci.h  766  static inline int pci_write_config_byte(const struct pci_dev *dev,int where,u8 val)
pci_write_config_word  function  include/linux/pci.h  770  static inline int pci_write_config_word(const struct pci_dev *dev,int where,u16 val)
pci_write_config_dword  function  include/linux/pci.h  774  static inline int pci_write_config_dword(const struct pci_dev *dev,int where,u32 val)
pci_enable_device  function  include/linux/pci.h  1189  static inline int pci_enable_device(struct pci_dev *dev)
pci_enable_device_io  prototype  include/linux/pci.h  781  int __must_check pci_enable_device_io(struct pci_dev *dev);
pci_enable_device_mem  prototype  include/linux/pci.h  782  int __must_check pci_enable_device_mem(struct pci_dev *dev);
pci_reenable_device  prototype  include/linux/pci.h  783  int __must_check pci_reenable_device(struct pci_dev *);
pcim_enable_device  prototype  include/linux/pci.h  784  int __must_check pcim_enable_device(struct pci_dev *pdev);
pcim_pin_device  prototype  include/linux/pci.h  785  void pcim_pin_device(struct pci_dev *pdev);
pci_is_enabled  function  include/linux/pci.h  787  static inline int pci_is_enabled(struct pci_dev *pdev)
pci_is_managed  function  include/linux/pci.h  792  static inline int pci_is_managed(struct pci_dev *pdev)
pci_disable_device  function  include/linux/pci.h  1194  static inline void pci_disable_device(struct pci_dev *dev)
pci_set_master  function  include/linux/pci.h  1186  static inline void pci_set_master(struct pci_dev *dev)
pci_clear_master  prototype  include/linux/pci.h  801  void pci_clear_master(struct pci_dev *dev);
pci_set_pcie_reset_state  prototype  include/linux/pci.h  803  int pci_set_pcie_reset_state(struct pci_dev *dev,enum pcie_reset_state state);
pci_set_cacheline_size  prototype  include/linux/pci.h  804  int pci_set_cacheline_size(struct pci_dev *dev);
HAVE_PCI_SET_MWI  macro  include/linux/pci.h  805  #define HAVE_PCI_SET_MWI
pci_set_mwi  prototype  include/linux/pci.h  806  int __must_check pci_set_mwi(struct pci_dev *dev);
pci_try_set_mwi  prototype  include/linux/pci.h  807  int pci_try_set_mwi(struct pci_dev *dev);
pci_clear_mwi  prototype  include/linux/pci.h  808  void pci_clear_mwi(struct pci_dev *dev);
pci_intx  prototype  include/linux/pci.h  809  void pci_intx(struct pci_dev *dev,int enable);
pci_intx_mask_supported  prototype  include/linux/pci.h  810  bool pci_intx_mask_supported(struct pci_dev *dev);
pci_check_and_mask_intx  prototype  include/linux/pci.h  811  bool pci_check_and_mask_intx(struct pci_dev *dev);
pci_check_and_unmask_intx  prototype  include/linux/pci.h  812  bool pci_check_and_unmask_intx(struct pci_dev *dev);
pci_msi_off  prototype  include/linux/pci.h  813  void pci_msi_off(struct pci_dev *dev);
pci_set_dma_max_seg_size  function  include/linux/pci.h  1207  static inline int pci_set_dma_max_seg_size(struct pci_dev *dev,unsigned int size)
pci_set_dma_seg_boundary  function  include/linux/pci.h  1213  static inline int pci_set_dma_seg_boundary(struct pci_dev *dev,unsigned long mask)
pcix_get_max_mmrbc  prototype  include/linux/pci.h  816  int pcix_get_max_mmrbc(struct pci_dev *dev);
pcix_get_mmrbc  prototype  include/linux/pci.h  817  int pcix_get_mmrbc(struct pci_dev *dev);
pcix_set_mmrbc  prototype  include/linux/pci.h  818  int pcix_set_mmrbc(struct pci_dev *dev,int mmrbc);
pcie_get_readrq  prototype  include/linux/pci.h  819  int pcie_get_readrq(struct pci_dev *dev);
pcie_set_readrq  prototype  include/linux/pci.h  820  int pcie_set_readrq(struct pci_dev *dev,int rq);
pcie_get_mps  prototype  include/linux/pci.h  821  int pcie_get_mps(struct pci_dev *dev);
pcie_set_mps  prototype  include/linux/pci.h  822  int pcie_set_mps(struct pci_dev *dev,int mps);
__pci_reset_function  prototype  include/linux/pci.h  823  int __pci_reset_function(struct pci_dev *dev);
__pci_reset_function_locked  prototype  include/linux/pci.h  824  int __pci_reset_function_locked(struct pci_dev *dev);
pci_reset_function  prototype  include/linux/pci.h  825  int pci_reset_function(struct pci_dev *dev);
pci_update_resource  prototype  include/linux/pci.h  826  void pci_update_resource(struct pci_dev *dev,int resno);
pci_assign_resource  function  include/linux/pci.h  1219  static inline int pci_assign_resource(struct pci_dev *dev,int i)
pci_reassign_resource  prototype  include/linux/pci.h  828  int __must_check pci_reassign_resource(struct pci_dev *dev,int i,resource_size_t add_size,resource_size_t align);
pci_select_bars  prototype  include/linux/pci.h  829  int pci_select_bars(struct pci_dev *dev,unsigned long flags);
pci_enable_rom  prototype  include/linux/pci.h  832  int pci_enable_rom(struct pci_dev *pdev);
pci_disable_rom  prototype  include/linux/pci.h  833  void pci_disable_rom(struct pci_dev *pdev);
pci_map_rom  prototype  include/linux/pci.h  834  void __iomem __must_check *pci_map_rom(struct pci_dev *pdev,size_t *size);
pci_unmap_rom  prototype  include/linux/pci.h  835  void pci_unmap_rom(struct pci_dev *pdev,void __iomem *rom);
pci_get_rom_size  prototype  include/linux/pci.h  836  size_t pci_get_rom_size(struct pci_dev *pdev,void __iomem *rom,size_t size);
pci_save_state  function  include/linux/pci.h  1255  static inline int pci_save_state(struct pci_dev *dev)
pci_restore_state  function  include/linux/pci.h  1260  static inline void pci_restore_state(struct pci_dev *dev)
pci_store_saved_state  prototype  include/linux/pci.h  841  struct pci_saved_state *pci_store_saved_state(struct pci_dev *dev);
pci_load_saved_state  prototype  include/linux/pci.h  842  int pci_load_saved_state(struct pci_dev *dev,struct pci_saved_state *state);
pci_load_and_free_saved_state  prototype  include/linux/pci.h  843  int pci_load_and_free_saved_state(struct pci_dev *dev,struct pci_saved_state **state);
__pci_complete_power_transition  prototype  include/linux/pci.h  845  int __pci_complete_power_transition(struct pci_dev *dev,pci_power_t state);
pci_set_power_state  function  include/linux/pci.h  1263  static inline int pci_set_power_state(struct pci_dev *dev,pci_power_t state)
pci_choose_state  function  include/linux/pci.h  1273  static inline pci_power_t pci_choose_state(struct pci_dev *dev,pm_message_t state)
pci_pme_capable  prototype  include/linux/pci.h  848  bool pci_pme_capable(struct pci_dev *dev,pci_power_t state);
pci_pme_active  prototype  include/linux/pci.h  849  void pci_pme_active(struct pci_dev *dev,bool enable);
__pci_enable_wake  prototype  include/linux/pci.h  850  int __pci_enable_wake(struct pci_dev *dev,pci_power_t state,bool runtime, bool enable);
pci_wake_from_d3  function  include/linux/pci.h  1268  static inline int pci_wake_from_d3(struct pci_dev *dev,bool enable)
pci_target_state  prototype  include/linux/pci.h  853  pci_power_t pci_target_state(struct pci_dev *dev);
pci_prepare_to_sleep  prototype  include/linux/pci.h  854  int pci_prepare_to_sleep(struct pci_dev *dev);
pci_back_from_sleep  prototype  include/linux/pci.h  855  int pci_back_from_sleep(struct pci_dev *dev);
pci_dev_run_wake  prototype  include/linux/pci.h  856  bool pci_dev_run_wake(struct pci_dev *dev);
pci_check_pme_status  prototype  include/linux/pci.h  857  bool pci_check_pme_status(struct pci_dev *dev);
pci_pme_wakeup_bus  prototype  include/linux/pci.h  858  void pci_pme_wakeup_bus(struct pci_bus *bus);
pci_enable_wake  function  include/linux/pci.h  1279  static inline int pci_enable_wake(struct pci_dev *dev,pci_power_t state,int enable)
PCI_EXP_IDO_REQUEST  macro  include/linux/pci.h  866  #define PCI_EXP_IDO_REQUEST (1<<0)
PCI_EXP_IDO_COMPLETION  macro  include/linux/pci.h  867  #define PCI_EXP_IDO_COMPLETION (1<<1)
pci_enable_ido  function  include/linux/pci.h  1285  static inline void pci_enable_ido(struct pci_dev *dev,unsigned long type)
pci_disable_ido  function  include/linux/pci.h  1289  static inline void pci_disable_ido(struct pci_dev *dev,unsigned long type)
pci_obff_signal_type  enum  include/linux/pci.h  871  enum pci_obff_signal_type { PCI_EXP_OBFF_SIGNAL_L0 = 0, PCI_EXP_OBFF_SIGNAL_ALWAYS = 1, };
pci_enable_obff  function  include/linux/pci.h  1293  static inline int pci_enable_obff(struct pci_dev *dev,unsigned long type)
pci_disable_obff  function  include/linux/pci.h  1298  static inline void pci_disable_obff(struct pci_dev *dev)
pci_ltr_supported  prototype  include/linux/pci.h  878  bool pci_ltr_supported(struct pci_dev *dev);
pci_enable_ltr  prototype  include/linux/pci.h  879  int pci_enable_ltr(struct pci_dev *dev);
pci_disable_ltr  prototype  include/linux/pci.h  880  void pci_disable_ltr(struct pci_dev *dev);
pci_set_ltr  prototype  include/linux/pci.h  881  int pci_set_ltr(struct pci_dev *dev,int snoop_lat_ns,int nosnoop_lat_ns);
set_pcie_port_type  prototype  include/linux/pci.h  884  void set_pcie_port_type(struct pci_dev *pdev);
set_pcie_hotplug_bridge  prototype  include/linux/pci.h  885  void set_pcie_hotplug_bridge(struct pci_dev *pdev);
pci_bus_find_capability  prototype  include/linux/pci.h  888  int pci_bus_find_capability(struct pci_bus *bus,unsigned int devfn,int cap);
pci_rescan_bus_bridge_resize  prototype  include/linux/pci.h  890  unsigned int pci_rescan_bus_bridge_resize(struct pci_dev *bridge);
pci_rescan_bus  prototype  include/linux/pci.h  891  unsigned int pci_rescan_bus(struct pci_bus *bus);
pci_read_vpd  prototype  include/linux/pci.h  895  ssize_t pci_read_vpd(struct pci_dev *dev,loff_t pos,size_t count,void *buf);
pci_write_vpd  prototype  include/linux/pci.h  896  ssize_t pci_write_vpd(struct pci_dev *dev,loff_t pos,size_t count,const void *buf);
pci_vpd_truncate  prototype  include/linux/pci.h  897  int pci_vpd_truncate(struct pci_dev *dev,size_t size);
pcibios_retrieve_fw_addr  prototype  include/linux/pci.h  900  resource_size_t pcibios_retrieve_fw_addr(struct pci_dev *dev,int idx);
pci_bus_assign_resources  prototype  include/linux/pci.h  901  void pci_bus_assign_resources(const struct pci_bus *bus);
pci_bus_size_bridges  prototype  include/linux/pci.h  902  void pci_bus_size_bridges(struct pci_bus *bus);
pci_claim_resource  prototype  include/linux/pci.h  903  int pci_claim_resource(struct pci_dev *,int);
pci_assign_unassigned_resources  prototype  include/linux/pci.h  904  void pci_assign_unassigned_resources(void);
pci_assign_unassigned_bridge_resources  prototype  include/linux/pci.h  905  void pci_assign_unassigned_bridge_resources(struct pci_dev *bridge);
pdev_enable_device  prototype  include/linux/pci.h  906  void pdev_enable_device(struct pci_dev *);
pci_enable_resources  prototype  include/linux/pci.h  907  int pci_enable_resources(struct pci_dev *,int mask);
pci_fixup_irqs  prototype  include/linux/pci.h  908  void pci_fixup_irqs(u8 (*)(struct pci_dev *,u8 *),int (*)(const struct pci_dev *, u8, u8));
HAVE_PCI_REQ_REGIONS  macro  include/linux/pci.h  910  #define HAVE_PCI_REQ_REGIONS 2
pci_request_regions  function  include/linux/pci.h  1302  static inline int pci_request_regions(struct pci_dev *dev,const char *res_name)
pci_request_regions_exclusive  prototype  include/linux/pci.h  912  int __must_check pci_request_regions_exclusive(struct pci_dev *,const char *);
pci_release_regions  function  include/linux/pci.h  1307  static inline void pci_release_regions(struct pci_dev *dev)
pci_request_region  prototype  include/linux/pci.h  914  int __must_check pci_request_region(struct pci_dev *,int,const char *);
pci_request_region_exclusive  prototype  include/linux/pci.h  915  int __must_check pci_request_region_exclusive(struct pci_dev *,int,const char *);
pci_release_region  prototype  include/linux/pci.h  916  void pci_release_region(struct pci_dev *,int);
pci_request_selected_regions  prototype  include/linux/pci.h  917  int pci_request_selected_regions(struct pci_dev *,int,const char *);
pci_request_selected_regions_exclusive  prototype  include/linux/pci.h  918  int pci_request_selected_regions_exclusive(struct pci_dev *,int,const char *);
pci_release_selected_regions  prototype  include/linux/pci.h  919  void pci_release_selected_regions(struct pci_dev *,int);
pci_add_resource  prototype  include/linux/pci.h  922  void pci_add_resource(struct list_head *resources,struct resource *res);
pci_add_resource_offset  prototype  include/linux/pci.h  923  void pci_add_resource_offset(struct list_head *resources,struct resource *res,resource_size_t offset);
pci_free_resource_list  prototype  include/linux/pci.h  925  void pci_free_resource_list(struct list_head *resources);
pci_bus_add_resource  prototype  include/linux/pci.h  926  void pci_bus_add_resource(struct pci_bus *bus,struct resource *res,unsigned int flags);
pci_bus_resource_n  prototype  include/linux/pci.h  927  struct resource *pci_bus_resource_n(const struct pci_bus *bus,int n);
pci_bus_remove_resources  prototype  include/linux/pci.h  928  void pci_bus_remove_resources(struct pci_bus *bus);
pci_bus_for_each_resource  macro  include/linux/pci.h  930  #define pci_bus_for_each_resource(bus,res,i) for (i = 0; (res = pci_bus_resource_n(bus, i)) || i < PCI_BRIDGE_RESOURCE_NUM; i++)
pci_bus_alloc_resource  prototype  include/linux/pci.h  935  int __must_check pci_bus_alloc_resource(struct pci_bus *bus,struct resource *res, resource_size_t size,resource_size_t align, resource_size_t min,unsigned int type_mask,resource_size_t (*alignf)(void *,const struct resource *,resource_size_t,resource_size_t),void *alignf_data);
pci_enable_bridges  prototype  include/linux/pci.h  944  void pci_enable_bridges(struct pci_bus *bus);
__pci_register_driver  function  include/linux/pci.h  1224  static inline int __pci_register_driver(struct pci_driver *drv,struct module *owner)
pci_register_driver  function  include/linux/pci.h  1230  static inline int pci_register_driver(struct pci_driver *drv)
pci_unregister_driver  function  include/linux/pci.h  1235  static inline void pci_unregister_driver(struct pci_driver *drv)
module_pci_driver  macro  include/linux/pci.h  966  #define module_pci_driver(__pci_driver) module_driver(__pci_driver, pci_register_driver, pci_unregister_driver)
pci_stop_and_remove_behind_bridge  prototype  include/linux/pci.h  970  void pci_stop_and_remove_behind_bridge(struct pci_dev *dev);
pci_dev_driver  prototype  include/linux/pci.h  971  struct pci_driver *pci_dev_driver(const struct pci_dev *dev);
pci_add_dynid  prototype  include/linux/pci.h  972  int pci_add_dynid(struct pci_driver *drv,unsigned int vendor, unsigned int device,unsigned int subvendor, unsigned int subdevice,unsigned int class, unsigned int class_mask,unsigned long driver_data);
pci_match_id  prototype  include/linux/pci.h  977  const struct pci_device_id *pci_match_id(const struct pci_device_id *ids,struct pci_dev *dev);
pci_scan_bridge  prototype  include/linux/pci.h  979  int pci_scan_bridge(struct pci_bus *bus,struct pci_dev *dev,int max,int pass);
pci_walk_bus  prototype  include/linux/pci.h  982  void pci_walk_bus(struct pci_bus *top,int (*cb)(struct pci_dev *,void *),void *userdata);
pci_cfg_space_size_ext  prototype  include/linux/pci.h  984  int pci_cfg_space_size_ext(struct pci_dev *dev);
pci_cfg_space_size  prototype  include/linux/pci.h  985  int pci_cfg_space_size(struct pci_dev *dev);
pci_bus_max_busnr  prototype  include/linux/pci.h  986  unsigned char pci_bus_max_busnr(struct pci_bus *bus);
pci_setup_bridge  prototype  include/linux/pci.h  987  void pci_setup_bridge(struct pci_bus *bus);
PCI_VGA_STATE_CHANGE_BRIDGE  macro  include/linux/pci.h  989  #define PCI_VGA_STATE_CHANGE_BRIDGE (1 << 0)
PCI_VGA_STATE_CHANGE_DECODES  macro  include/linux/pci.h  990  #define PCI_VGA_STATE_CHANGE_DECODES (1 << 1)
pci_set_vga_state  prototype  include/linux/pci.h  992  int pci_set_vga_state(struct pci_dev *pdev,bool decode,unsigned int command_bits, u32 flags);
pci_pool  macro  include/linux/pci.h  999  #define pci_pool dma_pool
pci_pool_create  macro  include/linux/pci.h  1000  #define pci_pool_create(name,pdev,size,align,allocation) dma_pool_create(name, &pdev->dev, size, align, allocation)
pci_pool_destroy  macro  include/linux/pci.h  1002  #define pci_pool_destroy(pool) dma_pool_destroy(pool)
pci_pool_alloc  macro  include/linux/pci.h  1003  #define pci_pool_alloc(pool,flags,handle) dma_pool_alloc(pool,flags,handle)
pci_pool_free  macro  include/linux/pci.h  1004  #define pci_pool_free(pool,vaddr,addr) dma_pool_free(pool,vaddr,addr)
pci_dma_burst_strategy  enum  include/linux/pci.h  1006  enum pci_dma_burst_strategy { PCI_DMA_BURST_INFINITY, PCI_DMA_BURST_BOUNDARY, PCI_DMA_BURST_MULTIPLE, };
msix_entry  struct  include/linux/pci.h  1015  struct msix_entry { u32 vector; u16 entry; };
pci_enable_msi_block  prototype  include/linux/pci.h  1057  extern int pci_enable_msi_block(struct pci_dev *dev,unsigned int nvec);
pci_msi_shutdown  prototype  include/linux/pci.h  1058  extern void pci_msi_shutdown(struct pci_dev *dev);
pci_disable_msi  prototype  include/linux/pci.h  1059  extern void pci_disable_msi(struct pci_dev *dev);
pci_msix_table_size  prototype  include/linux/pci.h  1060  extern int pci_msix_table_size(struct pci_dev *dev);
pci_enable_msix  prototype  include/linux/pci.h  1061  extern int pci_enable_msix(struct pci_dev *dev,struct msix_entry *entries, int nvec);
pci_msix_shutdown  prototype  include/linux/pci.h  1063  extern void pci_msix_shutdown(struct pci_dev *dev);
pci_disable_msix  prototype  include/linux/pci.h  1064  extern void pci_disable_msix(struct pci_dev *dev);
msi_remove_pci_irq_vectors  prototype  include/linux/pci.h  1065  extern void msi_remove_pci_irq_vectors(struct pci_dev *dev);
pci_restore_msi_state  prototype  include/linux/pci.h  1066  extern void pci_restore_msi_state(struct pci_dev *dev);
pci_msi_enabled  prototype  include/linux/pci.h  1067  extern int pci_msi_enabled(void);
pcie_ports_disabled  macro  include/linux/pci.h  1074  #define pcie_ports_disabled true
pcie_ports_auto  macro  include/linux/pci.h  1075  #define pcie_ports_auto false
pcie_aspm_enabled  prototype  include/linux/pci.h  1082  extern int pcie_aspm_enabled(void);
pcie_aspm_support_enabled  prototype  include/linux/pci.h  1083  extern bool pcie_aspm_support_enabled(void);
pci_no_aer  function  include/linux/pci.h  1090  static inline void pci_no_aer(void) { }
pci_aer_available  function  include/linux/pci.h  1091  static inline bool pci_aer_available(void) { return false; }
pcie_set_ecrc_checking  prototype  include/linux/pci.h  1101  extern void pcie_set_ecrc_checking(struct pci_dev *dev);
pcie_ecrc_get_policy  prototype  include/linux/pci.h  1102  extern void pcie_ecrc_get_policy(char *str);
pci_enable_msi  macro  include/linux/pci.h  1105  #define pci_enable_msi(pdev) pci_enable_msi_block(pdev,1)
ht_create_irq  prototype  include/linux/pci.h  1109  int ht_create_irq(struct pci_dev *dev,int idx);
ht_destroy_irq  prototype  include/linux/pci.h  1110  void ht_destroy_irq(unsigned int irq);
pci_cfg_access_lock  prototype  include/linux/pci.h  1113  extern void pci_cfg_access_lock(struct pci_dev *dev);
pci_cfg_access_trylock  prototype  include/linux/pci.h  1114  extern bool pci_cfg_access_trylock(struct pci_dev *dev);
pci_cfg_access_unlock  prototype  include/linux/pci.h  1115  extern void pci_cfg_access_unlock(struct pci_dev *dev);
pci_domain_nr  function  arch/x86/include/asm/pci.h  34  static inline int pci_domain_nr(struct pci_bus *bus)
pci_proc_domain  function  arch/x86/include/asm/pci.h  40  static inline int pci_proc_domain(struct pci_bus *bus)
pci_register_set_vga_state  prototype  include/linux/pci.h  1140  extern void pci_register_set_vga_state(arch_set_vga_state_t func);
_PCI_NOP  macro  include/linux/pci.h  1149  #define _PCI_NOP(o,s,t) static inline int pci_##o##_config_##s(struct pci_dev *dev, int where, t val) { return PCIBIOS_FUNC_NOT_SUPPORTED; }
_PCI_NOP_ALL  macro  include/linux/pci.h  1154  #define _PCI_NOP_ALL(o,x) _PCI_NOP(o,byte,u8 x) _PCI_NOP(o, word, u16 x) _PCI_NOP(o, dword, u32 x)
pci_set_dma_mask  function  include/asm-generic/pci-dma-compat.h  105  static inline int pci_set_dma_mask(struct pci_dev *dev,u64 mask)
pci_set_consistent_dma_mask  function  include/asm-generic/pci-dma-compat.h  110  static inline int pci_set_consistent_dma_mask(struct pci_dev *dev,u64 mask)
pci_dma_burst_advice  function  arch/x86/include/asm/pci.h  86  static inline void pci_dma_burst_advice(struct pci_dev *pdev,enum pci_dma_burst_strategy *strat,unsigned long *strategy_parameter)
pci_block_cfg_access  function  include/linux/pci.h  1312  static inline void pci_block_cfg_access(struct pci_dev *dev)
pci_block_cfg_access_in_atomic  function  include/linux/pci.h  1315  static inline int pci_block_cfg_access_in_atomic(struct pci_dev *dev)
pci_unblock_cfg_access  function  include/linux/pci.h  1318  static inline void pci_unblock_cfg_access(struct pci_dev *dev)
PCIBIOS_MAX_MEM_32  macro  arch/x86/include/asm/pci.h  152  #define PCIBIOS_MAX_MEM_32 0xffffffff
pci_resource_start  macro  include/linux/pci.h  1350  #define pci_resource_start(dev,bar) ((dev)->resource[(bar)].start)
pci_resource_end  macro  include/linux/pci.h  1351  #define pci_resource_end(dev,bar) ((dev)->resource[(bar)].end)
pci_resource_flags  macro  include/linux/pci.h  1352  #define pci_resource_flags(dev,bar) ((dev)->resource[(bar)].flags)
pci_resource_len  macro  include/linux/pci.h  1353  #define pci_resource_len(dev,bar) ((pci_resource_start((dev), (bar)) == 0 && pci_resource_end((dev), (bar)) == pci_resource_start((dev), (bar))) ? 0 : (pci_resource_end((dev), (bar)) - pci_resource_start((dev), (bar)) + 1))
pci_get_drvdata  function  include/linux/pci.h  1365  static inline void *pci_get_drvdata(struct pci_dev *pdev)
pci_set_drvdata  function  include/linux/pci.h  1370  static inline void pci_set_drvdata(struct pci_dev *pdev,void *data)
pci_name  function  include/linux/pci.h  1378  static inline const char *pci_name(const struct pci_dev *pdev)
pci_resource_to_user  function  include/linux/pci.h  1388  static inline void pci_resource_to_user(const struct pci_dev *dev,int bar,const struct resource *rsrc, resource_size_t *start,resource_size_t *end)
pci_fixup  struct  include/linux/pci.h  1405  struct pci_fixup { u16 vendor; u16 device; unsigned int class_shift; void (*hook)(struct pci_dev *dev); };
pci_fixup_pass  enum  include/linux/pci.h  1413  enum pci_fixup_pass { pci_fixup_early, pci_fixup_header, pci_fixup_final, pci_fixup_enable, pci_fixup_resume, pci_fixup_suspend, pci_fixup_resume_early, };
DECLARE_PCI_FIXUP_SECTION  macro  include/linux/pci.h  1424  #define DECLARE_PCI_FIXUP_SECTION(section,name,vendor,device,class, class_shift, hook) static const struct pci_fixup const __pci_fixup_##name __used __attribute__((__section__(#section), aligned((sizeof(void *))))) = { vendor, device, class, class_shift, hook };
DECLARE_PCI_FIXUP_CLASS_EARLY  macro  include/linux/pci.h  1430  #define DECLARE_PCI_FIXUP_CLASS_EARLY(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_early, vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_HEADER  macro  include/linux/pci.h  1434  #define DECLARE_PCI_FIXUP_CLASS_HEADER(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_header, vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_FINAL  macro  include/linux/pci.h  1438  #define DECLARE_PCI_FIXUP_CLASS_FINAL(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_final, vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_ENABLE  macro  include/linux/pci.h  1442  #define DECLARE_PCI_FIXUP_CLASS_ENABLE(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_enable, vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_RESUME  macro  include/linux/pci.h  1446  #define DECLARE_PCI_FIXUP_CLASS_RESUME(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume, resume##vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_RESUME_EARLY  macro  include/linux/pci.h  1451  #define DECLARE_PCI_FIXUP_CLASS_RESUME_EARLY(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume_early, resume_early##vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_SUSPEND  macro  include/linux/pci.h  1456  #define DECLARE_PCI_FIXUP_CLASS_SUSPEND(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_suspend, suspend##vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_EARLY  macro  include/linux/pci.h  1462  #define DECLARE_PCI_FIXUP_EARLY(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_early, vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_HEADER  macro  include/linux/pci.h  1465  #define DECLARE_PCI_FIXUP_HEADER(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_header, vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_FINAL  macro  include/linux/pci.h  1468  #define DECLARE_PCI_FIXUP_FINAL(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_final, vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_ENABLE  macro  include/linux/pci.h  1471  #define DECLARE_PCI_FIXUP_ENABLE(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_enable, vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_RESUME  macro  include/linux/pci.h  1474  #define DECLARE_PCI_FIXUP_RESUME(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume, resume##vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_RESUME_EARLY  macro  include/linux/pci.h  1478  #define DECLARE_PCI_FIXUP_RESUME_EARLY(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume_early, resume_early##vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_SUSPEND  macro  include/linux/pci.h  1482  #define DECLARE_PCI_FIXUP_SUSPEND(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_suspend, suspend##vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
pci_fixup_device  function  include/linux/pci.h  1490  static inline void pci_fixup_device(enum pci_fixup_pass pass,struct pci_dev *dev) {}
pcim_iomap  prototype  include/linux/pci.h  1494  void __iomem *pcim_iomap(struct pci_dev *pdev,int bar,unsigned long maxlen);
pcim_iounmap  prototype  include/linux/pci.h  1495  void pcim_iounmap(struct pci_dev *pdev,void __iomem *addr);
pcim_iomap_table  prototype  include/linux/pci.h  1496  void __iomem * const *pcim_iomap_table(struct pci_dev *pdev);
pcim_iomap_regions  prototype  include/linux/pci.h  1497  int pcim_iomap_regions(struct pci_dev *pdev,int mask,const char *name);
pcim_iomap_regions_request_all  prototype  include/linux/pci.h  1498  int pcim_iomap_regions_request_all(struct pci_dev *pdev,int mask,const char *name);
pcim_iounmap_regions  prototype  include/linux/pci.h  1500  void pcim_iounmap_regions(struct pci_dev *pdev,int mask);
PCIPCI_FAIL  macro  include/linux/pci.h  1503  #define PCIPCI_FAIL 1
PCIPCI_TRITON  macro  include/linux/pci.h  1504  #define PCIPCI_TRITON 2
PCIPCI_NATOMA  macro  include/linux/pci.h  1505  #define PCIPCI_NATOMA 4
PCIPCI_VIAETBF  macro  include/linux/pci.h  1506  #define PCIPCI_VIAETBF 8
PCIPCI_VSFX  macro  include/linux/pci.h  1507  #define PCIPCI_VSFX 16
PCIPCI_ALIMAGIK  macro  include/linux/pci.h  1508  #define PCIPCI_ALIMAGIK 32
PCIAGP_FAIL  macro  include/linux/pci.h  1509  #define PCIAGP_FAIL 64
pcibios_add_platform_entries  prototype  include/linux/pci.h  1520  int pcibios_add_platform_entries(struct pci_dev *dev);
pcibios_disable_device  prototype  include/linux/pci.h  1521  void pcibios_disable_device(struct pci_dev *dev);
pcibios_set_master  prototype  arch/x86/include/asm/pci.h  72  void pcibios_set_master(struct pci_dev *dev);
pcibios_set_pcie_reset_state  prototype  include/linux/pci.h  1523  int pcibios_set_pcie_reset_state(struct pci_dev *dev,enum pcie_reset_state state);
pci_mmcfg_early_init  function  include/linux/pci.h  1530  static inline void pci_mmcfg_early_init(void) { }
pci_mmcfg_late_init  function  include/linux/pci.h  1531  static inline void pci_mmcfg_late_init(void) { }
pci_ext_cfg_avail  prototype  include/linux/pci.h  1534  int pci_ext_cfg_avail(struct pci_dev *dev);
pci_ioremap_bar  prototype  include/linux/pci.h  1536  void __iomem *pci_ioremap_bar(struct pci_dev *pdev,int bar);
pci_enable_sriov  function  include/linux/pci.h  1544  static inline int pci_enable_sriov(struct pci_dev *dev,int nr_virtfn)
pci_disable_sriov  function  include/linux/pci.h  1548  static inline void pci_disable_sriov(struct pci_dev *dev)
pci_sriov_migration  function  include/linux/pci.h  1551  static inline irqreturn_t pci_sriov_migration(struct pci_dev *dev)
pci_num_vf  function  include/linux/pci.h  1555  static inline int pci_num_vf(struct pci_dev *dev)
pci_hp_create_module_link  prototype  include/linux/pci.h  1562  extern void pci_hp_create_module_link(struct pci_slot *pci_slot);
pci_hp_remove_module_link  prototype  include/linux/pci.h  1563  extern void pci_hp_remove_module_link(struct pci_slot *pci_slot);
pci_pcie_cap  function  include/linux/pci.h  1577  static inline int pci_pcie_cap(struct pci_dev *dev)
pci_is_pcie  function  include/linux/pci.h  1588  static inline bool pci_is_pcie(struct pci_dev *dev)
pci_request_acs  prototype  include/linux/pci.h  1593  void pci_request_acs(void);
PCI_VPD_LRDT  macro  include/linux/pci.h  1596  #define PCI_VPD_LRDT 0x80
PCI_VPD_LRDT_ID  macro  include/linux/pci.h  1597  #define PCI_VPD_LRDT_ID(x) (x | PCI_VPD_LRDT)
PCI_VPD_LTIN_ID_STRING  macro  include/linux/pci.h  1600  #define PCI_VPD_LTIN_ID_STRING 0x02
PCI_VPD_LTIN_RO_DATA  macro  include/linux/pci.h  1601  #define PCI_VPD_LTIN_RO_DATA 0x10
PCI_VPD_LTIN_RW_DATA  macro  include/linux/pci.h  1602  #define PCI_VPD_LTIN_RW_DATA 0x11
PCI_VPD_LRDT_ID_STRING  macro  include/linux/pci.h  1604  #define PCI_VPD_LRDT_ID_STRING PCI_VPD_LRDT_ID(PCI_VPD_LTIN_ID_STRING)
PCI_VPD_LRDT_RO_DATA  macro  include/linux/pci.h  1605  #define PCI_VPD_LRDT_RO_DATA PCI_VPD_LRDT_ID(PCI_VPD_LTIN_RO_DATA)
PCI_VPD_LRDT_RW_DATA  macro  include/linux/pci.h  1606  #define PCI_VPD_LRDT_RW_DATA PCI_VPD_LRDT_ID(PCI_VPD_LTIN_RW_DATA)
PCI_VPD_STIN_END  macro  include/linux/pci.h  1609  #define PCI_VPD_STIN_END 0x78
PCI_VPD_SRDT_END  macro  include/linux/pci.h  1611  #define PCI_VPD_SRDT_END PCI_VPD_STIN_END
PCI_VPD_SRDT_TIN_MASK  macro  include/linux/pci.h  1613  #define PCI_VPD_SRDT_TIN_MASK 0x78
PCI_VPD_SRDT_LEN_MASK  macro  include/linux/pci.h  1614  #define PCI_VPD_SRDT_LEN_MASK 0x07
PCI_VPD_LRDT_TAG_SIZE  macro  include/linux/pci.h  1616  #define PCI_VPD_LRDT_TAG_SIZE 3
PCI_VPD_SRDT_TAG_SIZE  macro  include/linux/pci.h  1617  #define PCI_VPD_SRDT_TAG_SIZE 1
PCI_VPD_INFO_FLD_HDR_SIZE  macro  include/linux/pci.h  1619  #define PCI_VPD_INFO_FLD_HDR_SIZE 3
PCI_VPD_RO_KEYWORD_PARTNO  macro  include/linux/pci.h  1621  #define PCI_VPD_RO_KEYWORD_PARTNO "PN"
PCI_VPD_RO_KEYWORD_MFR_ID  macro  include/linux/pci.h  1622  #define PCI_VPD_RO_KEYWORD_MFR_ID "MN"
PCI_VPD_RO_KEYWORD_VENDOR0  macro  include/linux/pci.h  1623  #define PCI_VPD_RO_KEYWORD_VENDOR0 "V0"
PCI_VPD_RO_KEYWORD_CHKSUM  macro  include/linux/pci.h  1624  #define PCI_VPD_RO_KEYWORD_CHKSUM "RV"
pci_vpd_lrdt_size  function  include/linux/pci.h  1632  static inline u16 pci_vpd_lrdt_size(const u8 *lrdt)
pci_vpd_srdt_size  function  include/linux/pci.h  1643  static inline u8 pci_vpd_srdt_size(const u8 *srdt)
pci_vpd_info_field_size  function  include/linux/pci.h  1654  static inline u8 pci_vpd_info_field_size(const u8 *info_field)
pci_vpd_find_tag  prototype  include/linux/pci.h  1669  int pci_vpd_find_tag(const u8 *buf,unsigned int off,unsigned int len,u8 rdt);
pci_vpd_find_info_keyword  prototype  include/linux/pci.h  1681  int pci_vpd_find_info_keyword(const u8 *buf,unsigned int off,unsigned int len, const char *kw);
pci_set_of_node  function  include/linux/pci.h  1707  static inline void pci_set_of_node(struct pci_dev *dev) { }
pci_release_of_node  function  include/linux/pci.h  1708  static inline void pci_release_of_node(struct pci_dev *dev) { }
pci_set_bus_of_node  function  include/linux/pci.h  1709  static inline void pci_set_bus_of_node(struct pci_bus *bus) { }
pci_release_bus_of_node  function  include/linux/pci.h  1710  static inline void pci_release_bus_of_node(struct pci_bus *bus) { }
pcibios_get_phb_of_node  prototype  include/linux/pci.h  1693  extern struct device_node * __weak pcibios_get_phb_of_node(struct pci_bus *bus);
pci_device_to_OF_node  function  include/linux/pci.h  1696  pci_device_to_OF_node(const struct pci_dev *pdev)
pci_bus_to_OF_node  function  include/linux/pci.h  1701  static inline struct device_node *pci_bus_to_OF_node(struct pci_bus *bus)
pci_dev_to_eeh_dev  function  include/linux/pci.h  1714  static inline struct eeh_dev *pci_dev_to_eeh_dev(struct pci_dev *pdev)
pci_find_upstream_pcie_bridge  prototype  include/linux/pci.h  1729  struct pci_dev *pci_find_upstream_pcie_bridge(struct pci_dev *pdev);
_LINUX_DELAY_H  macro  include/linux/delay.h  2  #define _LINUX_DELAY_H
MAX_UDELAY_MS  macro  include/linux/delay.h  27  #define MAX_UDELAY_MS 5
mdelay  macro  include/linux/delay.h  31  #define mdelay(n) ( (__builtin_constant_p(n) && (n)<=MAX_UDELAY_MS) ? udelay((n)*1000) : ({unsigned long __ms=(n); while (__ms--) udelay(1000);}))
ndelay  macro  include/asm-generic/delay.h  32  #define ndelay(n) ({ if (__builtin_constant_p(n)) { if ((n) / 20000 >= 1) __bad_ndelay(); else __const_udelay((n) * 5ul); } else { __ndelay(n); } })
calibrate_delay  prototype  include/linux/delay.h  45  void calibrate_delay(void);
msleep  prototype  include/linux/delay.h  46  void msleep(unsigned int msecs);
msleep_interruptible  prototype  include/linux/delay.h  47  unsigned long msleep_interruptible(unsigned int msecs);
usleep_range  prototype  include/linux/delay.h  48  void usleep_range(unsigned long min,unsigned long max);
ssleep  function  include/linux/delay.h  50  static inline void ssleep(unsigned int seconds)
_LINUX_INIT_H  macro  include/linux/init.h  2  #define _LINUX_INIT_H
__init  macro  include/linux/init.h  44  #define __init __section(.init.text) __cold notrace
__initdata  macro  include/linux/init.h  45  #define __initdata __section(.init.data)
__initconst  macro  include/linux/init.h  46  #define __initconst __section(.init.rodata)
__exitdata  macro  include/linux/init.h  47  #define __exitdata __section(.exit.data)
__exit_call  macro  include/linux/init.h  48  #define __exit_call __used __section(.exitcall.exit)
__ref  macro  include/linux/init.h  67  #define __ref __section(.ref.text) noinline
__refdata  macro  include/linux/init.h  68  #define __refdata __section(.ref.data)
__refconst  macro  include/linux/init.h  69  #define __refconst __section(.ref.rodata)
__init_refok  macro  include/linux/init.h  72  #define __init_refok __ref
__initdata_refok  macro  include/linux/init.h  73  #define __initdata_refok __refdata
__exit_refok  macro  include/linux/init.h  74  #define __exit_refok __ref
__exitused  macro  include/linux/init.h  80  #define __exitused __used
__exit  macro  include/linux/init.h  83  #define __exit __section(.exit.text) __exitused __cold notrace
__devinit  macro  include/linux/init.h  86  #define __devinit __section(.devinit.text) __cold notrace
__devinitdata  macro  include/linux/init.h  87  #define __devinitdata __section(.devinit.data)
__devinitconst  macro  include/linux/init.h  88  #define __devinitconst __section(.devinit.rodata)
__devexit  macro  include/linux/init.h  89  #define __devexit __section(.devexit.text) __exitused __cold notrace
__devexitdata  macro  include/linux/init.h  90  #define __devexitdata __section(.devexit.data)
__devexitconst  macro  include/linux/init.h  91  #define __devexitconst __section(.devexit.rodata)
__cpuinit  macro  include/linux/init.h  94  #define __cpuinit __section(.cpuinit.text) __cold notrace
__cpuinitdata  macro  include/linux/init.h  95  #define __cpuinitdata __section(.cpuinit.data)
__cpuinitconst  macro  include/linux/init.h  96  #define __cpuinitconst __section(.cpuinit.rodata)
__cpuexit  macro  include/linux/init.h  97  #define __cpuexit __section(.cpuexit.text) __exitused __cold notrace
__cpuexitdata  macro  include/linux/init.h  98  #define __cpuexitdata __section(.cpuexit.data)
__cpuexitconst  macro  include/linux/init.h  99  #define __cpuexitconst __section(.cpuexit.rodata)
__meminit  macro  include/linux/init.h  102  #define __meminit __section(.meminit.text) __cold notrace
__meminitdata  macro  include/linux/init.h  103  #define __meminitdata __section(.meminit.data)
__meminitconst  macro  include/linux/init.h  104  #define __meminitconst __section(.meminit.rodata)
__memexit  macro  include/linux/init.h  105  #define __memexit __section(.memexit.text) __exitused __cold notrace
__memexitdata  macro  include/linux/init.h  106  #define __memexitdata __section(.memexit.data)
__memexitconst  macro  include/linux/init.h  107  #define __memexitconst __section(.memexit.rodata)
__HEAD  macro  include/linux/init.h  110  #define __HEAD .section ".head.text","ax"
__INIT  macro  include/linux/init.h  111  #define __INIT .section ".init.text","ax"
__FINIT  macro  include/linux/init.h  112  #define __FINIT .previous
__INITDATA  macro  include/linux/init.h  114  #define __INITDATA .section ".init.data","aw",%progbits
__INITRODATA  macro  include/linux/init.h  115  #define __INITRODATA .section ".init.rodata","a",%progbits
__FINITDATA  macro  include/linux/init.h  116  #define __FINITDATA .previous
__DEVINIT  macro  include/linux/init.h  118  #define __DEVINIT .section ".devinit.text","ax"
__DEVINITDATA  macro  include/linux/init.h  119  #define __DEVINITDATA .section ".devinit.data","aw"
__DEVINITRODATA  macro  include/linux/init.h  120  #define __DEVINITRODATA .section ".devinit.rodata","a"
__CPUINIT  macro  include/linux/init.h  122  #define __CPUINIT .section ".cpuinit.text","ax"
__CPUINITDATA  macro  include/linux/init.h  123  #define __CPUINITDATA .section ".cpuinit.data","aw"
__CPUINITRODATA  macro  include/linux/init.h  124  #define __CPUINITRODATA .section ".cpuinit.rodata","a"
__MEMINIT  macro  include/linux/init.h  126  #define __MEMINIT .section ".meminit.text","ax"
__MEMINITDATA  macro  include/linux/init.h  127  #define __MEMINITDATA .section ".meminit.data","aw"
__MEMINITRODATA  macro  include/linux/init.h  128  #define __MEMINITRODATA .section ".meminit.rodata","a"
__REF  macro  include/linux/init.h  131  #define __REF .section ".ref.text","ax"
__REFDATA  macro  include/linux/init.h  132  #define __REFDATA .section ".ref.data","aw"
__REFCONST  macro  include/linux/init.h  133  #define __REFCONST .section ".ref.rodata","a"
do_one_initcall  prototype  include/linux/init.h  149  extern int do_one_initcall(initcall_t fn);
setup_arch  prototype  include/linux/init.h  155  void setup_arch(char **);
prepare_namespace  prototype  include/linux/init.h  156  void prepare_namespace(void);
__define_initcall  macro  include/linux/init.h  178  #define __define_initcall(level,fn,id) static initcall_t __initcall_##fn##id __used __attribute__((__section__(".initcall" level ".init"))) = fn
early_initcall  macro  include/linux/init.h  284  #define early_initcall(fn) module_init(fn)
pure_initcall  macro  include/linux/init.h  195  #define pure_initcall(fn) __define_initcall("0",fn,0)
core_initcall  macro  include/linux/init.h  285  #define core_initcall(fn) module_init(fn)
core_initcall_sync  macro  include/linux/init.h  198  #define core_initcall_sync(fn) __define_initcall("1s",fn,1s)
postcore_initcall  macro  include/linux/init.h  286  #define postcore_initcall(fn) module_init(fn)
postcore_initcall_sync  macro  include/linux/init.h  200  #define postcore_initcall_sync(fn) __define_initcall("2s",fn,2s)
arch_initcall  macro  include/linux/init.h  287  #define arch_initcall(fn) module_init(fn)
arch_initcall_sync  macro  include/linux/init.h  202  #define arch_initcall_sync(fn) __define_initcall("3s",fn,3s)
subsys_initcall  macro  include/linux/init.h  288  #define subsys_initcall(fn) module_init(fn)
subsys_initcall_sync  macro  include/linux/init.h  204  #define subsys_initcall_sync(fn) __define_initcall("4s",fn,4s)
fs_initcall  macro  include/linux/init.h  289  #define fs_initcall(fn) module_init(fn)
fs_initcall_sync  macro  include/linux/init.h  206  #define fs_initcall_sync(fn) __define_initcall("5s",fn,5s)
rootfs_initcall  macro  include/linux/init.h  207  #define rootfs_initcall(fn) __define_initcall("rootfs",fn,rootfs)
device_initcall  macro  include/linux/init.h  290  #define device_initcall(fn) module_init(fn)
device_initcall_sync  macro  include/linux/init.h  209  #define device_initcall_sync(fn) __define_initcall("6s",fn,6s)
late_initcall  macro  include/linux/init.h  291  #define late_initcall(fn) module_init(fn)
late_initcall_sync  macro  include/linux/init.h  211  #define late_initcall_sync(fn) __define_initcall("7s",fn,7s)
__initcall  macro  include/linux/init.h  213  #define __initcall(fn) device_initcall(fn)
__exitcall  macro  include/linux/init.h  215  #define __exitcall(fn) static exitcall_t __exitcall_##fn __exit_call = fn
console_initcall  macro  include/linux/init.h  218  #define console_initcall(fn) static initcall_t __initcall_##fn __used __section(.con_initcall.init) = fn
security_initcall  macro  include/linux/init.h  293  #define security_initcall(fn) module_init(fn)
obs_kernel_param  struct  include/linux/init.h  226  struct obs_kernel_param { const char *str; int (*setup_func)(char *); int early; };
__setup_param  macro  include/linux/init.h  307  #define __setup_param(str,unique_id,fn)
__setup  macro  include/linux/init.h  308  #define __setup(str,func)
early_param  macro  include/linux/init.h  251  #define early_param(str,fn) __setup_param(str, fn, fn, 1)
parse_early_param  prototype  include/linux/init.h  255  void __init parse_early_param(void);
parse_early_options  prototype  include/linux/init.h  256  void __init parse_early_options(char *cmdline);
module_init  macro  include/linux/init.h  296  #define module_init(initfn) static inline initcall_t __inittest(void) { return initfn; } int init_module(void) __attribute__((alias(#initfn)));
module_exit  macro  include/linux/init.h  302  #define module_exit(exitfn) static inline exitcall_t __exittest(void) { return exitfn; } void cleanup_module(void) __attribute__((alias(#exitfn)));
__nosavedata  macro  include/linux/init.h  312  #define __nosavedata __section(.data..nosave)
__init_or_module  macro  include/linux/init.h  324  #define __init_or_module __init
__initdata_or_module  macro  include/linux/init.h  325  #define __initdata_or_module __initdata
__initconst_or_module  macro  include/linux/init.h  326  #define __initconst_or_module __initconst
__INIT_OR_MODULE  macro  include/linux/init.h  327  #define __INIT_OR_MODULE __INIT
__INITDATA_OR_MODULE  macro  include/linux/init.h  328  #define __INITDATA_OR_MODULE __INITDATA
__INITRODATA_OR_MODULE  macro  include/linux/init.h  329  #define __INITRODATA_OR_MODULE __INITRODATA
__devexit_p  macro  include/linux/init.h  341  #define __devexit_p(x) NULL
__exit_p  macro  include/linux/init.h  347  #define __exit_p(x) NULL
_LINUX_ETHTOOL_H  macro  include/linux/ethtool.h  14  #define _LINUX_ETHTOOL_H
ethtool_cmd  struct  include/linux/ethtool.h  23  struct ethtool_cmd { __u32 cmd; __u32 supported; __u32 advertising; __u16 speed; __u8 duplex; __u8 port; __u8 phy_address; __u8 transceiver; __u8 autoneg; __u8 mdio_support; __u32 maxtxpkt; __u32 maxrxpkt; __u16 speed_hi; __u8 eth_tp_mdix; __u8 reserved2; __u32 lp_advertising; __u32 reserved[2]; };
ethtool_cmd_speed_set  function  include/linux/ethtool.h  54  static inline void ethtool_cmd_speed_set(struct ethtool_cmd *ep,__u32 speed)
ethtool_cmd_speed  function  include/linux/ethtool.h  62  static inline __u32 ethtool_cmd_speed(const struct ethtool_cmd *ep)
ETH_MDIO_SUPPORTS_C22  macro  include/linux/ethtool.h  72  #define ETH_MDIO_SUPPORTS_C22 1
ETH_MDIO_SUPPORTS_C45  macro  include/linux/ethtool.h  79  #define ETH_MDIO_SUPPORTS_C45 2
ETHTOOL_FWVERS_LEN  macro  include/linux/ethtool.h  81  #define ETHTOOL_FWVERS_LEN 32
ETHTOOL_BUSINFO_LEN  macro  include/linux/ethtool.h  82  #define ETHTOOL_BUSINFO_LEN 32
ethtool_drvinfo  struct  include/linux/ethtool.h  84  struct ethtool_drvinfo { __u32 cmd; char driver[32]; char version[32]; char fw_version[ETHTOOL_FWVERS_LEN]; char bus_info[ETHTOOL_BUSINFO_LEN]; char reserved1[32]; char reserved2[12]; __u32 n_priv_flags; __u32 n_stats; __u32 testinfo_len; __u32 eedump_len; __u32 regdump_len; };
SOPASS_MAX  macro  include/linux/ethtool.h  107  #define SOPASS_MAX 6
ethtool_wolinfo  struct  include/linux/ethtool.h  109  struct ethtool_wolinfo { __u32 cmd; __u32 supported; __u32 wolopts; __u8 sopass[SOPASS_MAX]; };
ethtool_value  struct  include/linux/ethtool.h  117  struct ethtool_value { __u32 cmd; __u32 data; };
ethtool_regs  struct  include/linux/ethtool.h  123  struct ethtool_regs { __u32 cmd; __u32 version; __u32 len; __u8 data[0]; };
ethtool_eeprom  struct  include/linux/ethtool.h  131  struct ethtool_eeprom { __u32 cmd; __u32 magic; __u32 offset; __u32 len; __u8 data[0]; };
ethtool_modinfo  struct  include/linux/ethtool.h  149  struct ethtool_modinfo { __u32 cmd; __u32 type; __u32 eeprom_len; __u32 reserved[8]; };
ethtool_coalesce  struct  include/linux/ethtool.h  228  struct ethtool_coalesce { __u32 cmd; __u32 rx_coalesce_usecs; __u32 rx_max_coalesced_frames; __u32 rx_coalesce_usecs_irq; __u32 rx_max_coalesced_frames_irq; __u32 tx_coalesce_usecs; __u32 tx_max_coalesced_frames; __u32 tx_coalesce_usecs_irq; __u32 tx_max_coalesced_frames_irq; __u32 stats_block_coalesce_usecs; __u32 use_adaptive_rx_coalesce; __u32 use_adaptive_tx_coalesce; __u32 pkt_rate_low; __u32 rx_coalesce_usecs_low; __u32 rx_max_coalesced_frames_low; __u32 tx_coalesce_usecs_low; __u32 tx_max_coalesced_frames_low; __u32 pkt_rate_high; __u32 rx_coalesce_usecs_high; __u32 rx_max_coalesced_frames_high; __u32 tx_coalesce_usecs_high; __u32 tx_max_coalesced_frames_high; __u32 rate_sample_interval; };
ethtool_ringparam  struct  include/linux/ethtool.h  255  struct ethtool_ringparam { __u32 cmd; __u32 rx_max_pending; __u32 rx_mini_max_pending; __u32 rx_jumbo_max_pending; __u32 tx_max_pending; __u32 rx_pending; __u32 rx_mini_pending; __u32 rx_jumbo_pending; __u32 tx_pending; };
ethtool_channels  struct  include/linux/ethtool.h  292  struct ethtool_channels { __u32 cmd; __u32 max_rx; __u32 max_tx; __u32 max_other; __u32 max_combined; __u32 rx_count; __u32 tx_count; __u32 other_count; __u32 combined_count; };
ethtool_pauseparam  struct  include/linux/ethtool.h  305  struct ethtool_pauseparam { __u32 cmd; __u32 autoneg; __u32 rx_pause; __u32 tx_pause; };
ETH_GSTRING_LEN  macro  include/linux/ethtool.h  323  #define ETH_GSTRING_LEN 32
ethtool_stringset  enum  include/linux/ethtool.h  324  enum ethtool_stringset { ETH_SS_TEST = 0, ETH_SS_STATS, ETH_SS_PRIV_FLAGS, ETH_SS_NTUPLE_FILTERS, ETH_SS_FEATURES, };
ethtool_gstrings  struct  include/linux/ethtool.h  333  struct ethtool_gstrings { __u32 cmd; __u32 string_set; __u32 len; __u8 data[0]; };
ethtool_sset_info  struct  include/linux/ethtool.h  340  struct ethtool_sset_info { __u32 cmd; __u32 reserved; __u64 sset_mask; __u32 data[0]; };
ethtool_test_flags  enum  include/linux/ethtool.h  361  enum ethtool_test_flags { ETH_TEST_FL_OFFLINE = (1 << 0), ETH_TEST_FL_FAILED = (1 << 1), ETH_TEST_FL_EXTERNAL_LB = (1 << 2), ETH_TEST_FL_EXTERNAL_LB_DONE = (1 << 3), };
ethtool_test  struct  include/linux/ethtool.h  369  struct ethtool_test { __u32 cmd; __u32 flags; __u32 reserved; __u32 len; __u64 data[0]; };
ethtool_stats  struct  include/linux/ethtool.h  378  struct ethtool_stats { __u32 cmd; __u32 n_stats; __u64 data[0]; };
ethtool_perm_addr  struct  include/linux/ethtool.h  384  struct ethtool_perm_addr { __u32 cmd; __u32 size; __u8 data[0]; };
ethtool_flags  enum  include/linux/ethtool.h  399  enum ethtool_flags { ETH_FLAG_TXVLAN = (1 << 7), ETH_FLAG_RXVLAN = (1 << 8), ETH_FLAG_LRO = (1 << 15), ETH_FLAG_NTUPLE = (1 << 27), ETH_FLAG_RXHASH = (1 << 28), };
ethtool_tcpip4_spec  struct  include/linux/ethtool.h  423  struct ethtool_tcpip4_spec { __be32 ip4src; __be32 ip4dst; __be16 psrc; __be16 pdst; __u8 tos; };
ethtool_ah_espip4_spec  struct  include/linux/ethtool.h  440  struct ethtool_ah_espip4_spec { __be32 ip4src; __be32 ip4dst; __be32 spi; __u8 tos; };
ETH_RX_NFC_IP4  macro  include/linux/ethtool.h  447  #define ETH_RX_NFC_IP4 1
ethtool_usrip4_spec  struct  include/linux/ethtool.h  458  struct ethtool_usrip4_spec { __be32 ip4src; __be32 ip4dst; __be32 l4_4_bytes; __u8 tos; __u8 ip_ver; __u8 proto; };
ethtool_flow_union  union  include/linux/ethtool.h  467  union ethtool_flow_union { struct ethtool_tcpip4_spec tcp_ip4_spec; struct ethtool_tcpip4_spec udp_ip4_spec; struct ethtool_tcpip4_spec sctp_ip4_spec; struct ethtool_ah_espip4_spec ah_ip4_spec; struct ethtool_ah_espip4_spec esp_ip4_spec; struct ethtool_usrip4_spec usr_ip4_spec; struct ethhdr ether_spec; __u8 hdata[60]; };
ethtool_flow_ext  struct  include/linux/ethtool.h  478  struct ethtool_flow_ext { __be16 vlan_etype; __be16 vlan_tci; __be32 data[2]; };
ethtool_rx_flow_spec  struct  include/linux/ethtool.h  499  struct ethtool_rx_flow_spec { __u32 flow_type; union ethtool_flow_union h_u; struct ethtool_flow_ext h_ext; union ethtool_flow_union m_u; struct ethtool_flow_ext m_ext; __u64 ring_cookie; __u32 location; };
ethtool_rxnfc  struct  include/linux/ethtool.h  561  struct ethtool_rxnfc { __u32 cmd; __u32 flow_type; __u64 data; struct ethtool_rx_flow_spec fs; __u32 rule_cnt; __u32 rule_locs[0]; };
compat_ethtool_rx_flow_spec  struct  include/linux/ethtool.h  573  struct compat_ethtool_rx_flow_spec { u32 flow_type; union ethtool_flow_union h_u; struct ethtool_flow_ext h_ext; union ethtool_flow_union m_u; struct ethtool_flow_ext m_ext; compat_u64 ring_cookie; u32 location; };
compat_ethtool_rxnfc  struct  include/linux/ethtool.h  583  struct compat_ethtool_rxnfc { u32 cmd; u32 flow_type; compat_u64 data; struct compat_ethtool_rx_flow_spec fs; u32 rule_cnt; u32 rule_locs[0]; };
ethtool_rxfh_indir  struct  include/linux/ethtool.h  608  struct ethtool_rxfh_indir { __u32 cmd; __u32 size; __u32 ring_index[0]; };
ethtool_rx_ntuple_flow_spec  struct  include/linux/ethtool.h  630  struct ethtool_rx_ntuple_flow_spec { __u32 flow_type; union { struct ethtool_tcpip4_spec tcp_ip4_spec; struct ethtool_tcpip4_spec udp_ip4_spec; struct ethtool_tcpip4_spec sctp_ip4_spec; struct ethtool_ah_espip4_spec ah_ip4_spec; struct ethtool_ah_espip4_spec esp_ip4_spec; struct ethtool_usrip4_spec usr_ip4_spec; struct ethhdr ether_spec; __u8 hdata[72]; } h_u, m_u; __u16 vlan_tag; __u16 vlan_tag_mask; __u64 data; __u64 data_mask; __s32 action; #define ETHTOOL_RXNTUPLE_ACTION_DROP (-1) #define ETHTOOL_RXNTUPLE_ACTION_CLEAR (-2) };
ethtool_rx_ntuple  struct  include/linux/ethtool.h  658  struct ethtool_rx_ntuple { __u32 cmd; struct ethtool_rx_ntuple_flow_spec fs; };
ETHTOOL_FLASH_MAX_FILENAME  macro  include/linux/ethtool.h  663  #define ETHTOOL_FLASH_MAX_FILENAME 128
ethtool_flash_op_type  enum  include/linux/ethtool.h  664  enum ethtool_flash_op_type { ETHTOOL_FLASH_ALL_REGIONS = 0, };
ethtool_flash  struct  include/linux/ethtool.h  669  struct ethtool_flash { __u32 cmd; __u32 region; char data[ETHTOOL_FLASH_MAX_FILENAME]; };
ETH_FW_DUMP_DISABLE  macro  include/linux/ethtool.h  690  #define ETH_FW_DUMP_DISABLE 0
ethtool_dump  struct  include/linux/ethtool.h  692  struct ethtool_dump { __u32 cmd; __u32 version; __u32 flag; __u32 len; __u8 data[0]; };
ethtool_get_features_block  struct  include/linux/ethtool.h  709  struct ethtool_get_features_block { __u32 available; __u32 requested; __u32 active; __u32 never_changed; };
ethtool_gfeatures  struct  include/linux/ethtool.h  723  struct ethtool_gfeatures { __u32 cmd; __u32 size; struct ethtool_get_features_block features[0]; };
ethtool_set_features_block  struct  include/linux/ethtool.h  734  struct ethtool_set_features_block { __u32 valid; __u32 requested; };
ethtool_sfeatures  struct  include/linux/ethtool.h  745  struct ethtool_sfeatures { __u32 cmd; __u32 size; struct ethtool_set_features_block features[0]; };
ethtool_ts_info  struct  include/linux/ethtool.h  764  struct ethtool_ts_info { __u32 cmd; __u32 so_timestamping; __s32 phc_index; __u32 tx_types; __u32 tx_reserved[3]; __u32 rx_filters; __u32 rx_reserved[3]; };
ethtool_sfeatures_retval_bits  enum  include/linux/ethtool.h  799  enum ethtool_sfeatures_retval_bits { ETHTOOL_F_UNSUPPORTED__BIT, ETHTOOL_F_WISH__BIT, ETHTOOL_F_COMPAT__BIT, };
ETHTOOL_F_UNSUPPORTED  macro  include/linux/ethtool.h  805  #define ETHTOOL_F_UNSUPPORTED (1 << ETHTOOL_F_UNSUPPORTED__BIT)
ETHTOOL_F_WISH  macro  include/linux/ethtool.h  806  #define ETHTOOL_F_WISH (1 << ETHTOOL_F_WISH__BIT)
ETHTOOL_F_COMPAT  macro  include/linux/ethtool.h  807  #define ETHTOOL_F_COMPAT (1 << ETHTOOL_F_COMPAT__BIT)
__ethtool_get_settings  prototype  include/linux/ethtool.h  813  extern int __ethtool_get_settings(struct net_device *dev,struct ethtool_cmd *cmd);
ethtool_phys_id_state  enum  include/linux/ethtool.h  825  enum ethtool_phys_id_state { ETHTOOL_ID_INACTIVE, ETHTOOL_ID_ACTIVE, ETHTOOL_ID_ON, ETHTOOL_ID_OFF };
ethtool_op_get_link  prototype  include/linux/ethtool.h  835  u32 ethtool_op_get_link(struct net_device *dev);
ethtool_op_get_ts_info  prototype  include/linux/ethtool.h  836  int ethtool_op_get_ts_info(struct net_device *dev,struct ethtool_ts_info *eti);
ethtool_rxfh_indir_default  function  include/linux/ethtool.h  845  static inline u32 ethtool_rxfh_indir_default(u32 index,u32 n_rx_rings)
ethtool_ops  struct  include/linux/ethtool.h  958  struct ethtool_ops { int (*get_settings)(struct net_device *, struct ethtool_cmd *); int (*set_settings)(struct net_device *, struct ethtool_cmd *); void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *); int (*get_regs_len)(struct net_device *); void (*get_regs)(struct net_device *, struct ethtool_regs *, void *); void (*get_wol)(struct net_device *, struct ethtool_wolinfo *); int (*set_wol)(struct net_device *, struct ethtool_wolinfo *); u32 (*get_msglevel)(struct net_device *); void (*set_msglevel)(struct net_device *, u32); int (*nway_reset)(struct net_device *); u32 (*get_link)(struct net_device *); int (*get_eeprom_len)(struct net_device *); int (*get_eeprom)(struct net_device *,struct ethtool_eeprom *, u8 *); int (*set_eeprom)(struct net_device *,struct ethtool_eeprom *, u8 *); int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *); int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *); void (*get_ringparam)(struct net_device *,struct ethtool_ringparam *); int (*set_ringparam)(struct net_device *,struct ethtool_ringparam *); void (*get_pauseparam)(struct net_device *,struct ethtool_pauseparam*); int (*set_pauseparam)(struct net_device *,struct ethtool_pauseparam*); void (*self_test)(struct net_device *, struct ethtool_test *, u64 *); void (*get_strings)(struct net_device *, u32 stringset, u8 *); int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state); void (*get_ethtool_stats)(struct net_device *,struct ethtool_stats *, u64 *); int (*begin)(struct net_device *); void (*complete)(struct net_device *); u32 (*get_priv_flags)(struct net_device *); int (*set_priv_flags)(struct net_device *, u32); int (*get_sset_count)(struct net_device *, int); int (*get_rxnfc)(struct net_device *,struct ethtool_rxnfc *, u32 *rule_locs); int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *); int (*flash_device)(struct net_device *, struct ethtool_flash *); int (*reset)(struct net_device *, u32 *); u32 (*get_rxfh_indir_size)(struct net_device *); int (*get_rxfh_indir)(struct net_device *, u32 *); int (*set_rxfh_indir)(struct net_device *, const u32 *); void (*get_channels)(struct net_device *, struct ethtool_channels *); int (*set_channels)(struct net_device *, struct ethtool_channels *); int (*get_dump_flag)(struct net_device *, struct ethtool_dump *); int (*get_dump_data)(struct net_device *,struct ethtool_dump *, void *); int (*set_dump)(struct net_device *, struct ethtool_dump *); int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *); int (*get_module_info)(struct net_device *,struct ethtool_modinfo *); int (*get_module_eeprom)(struct net_device *,struct ethtool_eeprom *, u8 *); };
ETHTOOL_GSET  macro  include/linux/ethtool.h  1020  #define ETHTOOL_GSET 0x00000001
ETHTOOL_SSET  macro  include/linux/ethtool.h  1021  #define ETHTOOL_SSET 0x00000002
ETHTOOL_GDRVINFO  macro  include/linux/ethtool.h  1022  #define ETHTOOL_GDRVINFO 0x00000003
ETHTOOL_GREGS  macro  include/linux/ethtool.h  1023  #define ETHTOOL_GREGS 0x00000004
ETHTOOL_GWOL  macro  include/linux/ethtool.h  1024  #define ETHTOOL_GWOL 0x00000005
ETHTOOL_SWOL  macro  include/linux/ethtool.h  1025  #define ETHTOOL_SWOL 0x00000006
ETHTOOL_GMSGLVL  macro  include/linux/ethtool.h  1026  #define ETHTOOL_GMSGLVL 0x00000007
ETHTOOL_SMSGLVL  macro  include/linux/ethtool.h  1027  #define ETHTOOL_SMSGLVL 0x00000008
ETHTOOL_NWAY_RST  macro  include/linux/ethtool.h  1028  #define ETHTOOL_NWAY_RST 0x00000009
ETHTOOL_GLINK  macro  include/linux/ethtool.h  1031  #define ETHTOOL_GLINK 0x0000000a
ETHTOOL_GEEPROM  macro  include/linux/ethtool.h  1032  #define ETHTOOL_GEEPROM 0x0000000b
ETHTOOL_SEEPROM  macro  include/linux/ethtool.h  1033  #define ETHTOOL_SEEPROM 0x0000000c
ETHTOOL_GCOALESCE  macro  include/linux/ethtool.h  1034  #define ETHTOOL_GCOALESCE 0x0000000e
ETHTOOL_SCOALESCE  macro  include/linux/ethtool.h  1035  #define ETHTOOL_SCOALESCE 0x0000000f
ETHTOOL_GRINGPARAM  macro  include/linux/ethtool.h  1036  #define ETHTOOL_GRINGPARAM 0x00000010
ETHTOOL_SRINGPARAM  macro  include/linux/ethtool.h  1037  #define ETHTOOL_SRINGPARAM 0x00000011
ETHTOOL_GPAUSEPARAM  macro  include/linux/ethtool.h  1038  #define ETHTOOL_GPAUSEPARAM 0x00000012
ETHTOOL_SPAUSEPARAM  macro  include/linux/ethtool.h  1039  #define ETHTOOL_SPAUSEPARAM 0x00000013
ETHTOOL_GRXCSUM  macro  include/linux/ethtool.h  1040  #define ETHTOOL_GRXCSUM 0x00000014
ETHTOOL_SRXCSUM  macro  include/linux/ethtool.h  1041  #define ETHTOOL_SRXCSUM 0x00000015
ETHTOOL_GTXCSUM  macro  include/linux/ethtool.h  1042  #define ETHTOOL_GTXCSUM 0x00000016
ETHTOOL_STXCSUM  macro  include/linux/ethtool.h  1043  #define ETHTOOL_STXCSUM 0x00000017
ETHTOOL_GSG  macro  include/linux/ethtool.h  1044  #define ETHTOOL_GSG 0x00000018
ETHTOOL_SSG  macro  include/linux/ethtool.h  1046  #define ETHTOOL_SSG 0x00000019
ETHTOOL_TEST  macro  include/linux/ethtool.h  1048  #define ETHTOOL_TEST 0x0000001a
ETHTOOL_GSTRINGS  macro  include/linux/ethtool.h  1049  #define ETHTOOL_GSTRINGS 0x0000001b
ETHTOOL_PHYS_ID  macro  include/linux/ethtool.h  1050  #define ETHTOOL_PHYS_ID 0x0000001c
ETHTOOL_GSTATS  macro  include/linux/ethtool.h  1051  #define ETHTOOL_GSTATS 0x0000001d
ETHTOOL_GTSO  macro  include/linux/ethtool.h  1052  #define ETHTOOL_GTSO 0x0000001e
ETHTOOL_STSO  macro  include/linux/ethtool.h  1053  #define ETHTOOL_STSO 0x0000001f
ETHTOOL_GPERMADDR  macro  include/linux/ethtool.h  1054  #define ETHTOOL_GPERMADDR 0x00000020
ETHTOOL_GUFO  macro  include/linux/ethtool.h  1055  #define ETHTOOL_GUFO 0x00000021
ETHTOOL_SUFO  macro  include/linux/ethtool.h  1056  #define ETHTOOL_SUFO 0x00000022
ETHTOOL_GGSO  macro  include/linux/ethtool.h  1057  #define ETHTOOL_GGSO 0x00000023
ETHTOOL_SGSO  macro  include/linux/ethtool.h  1058  #define ETHTOOL_SGSO 0x00000024
ETHTOOL_GFLAGS  macro  include/linux/ethtool.h  1059  #define ETHTOOL_GFLAGS 0x00000025
ETHTOOL_SFLAGS  macro  include/linux/ethtool.h  1060  #define ETHTOOL_SFLAGS 0x00000026
ETHTOOL_GPFLAGS  macro  include/linux/ethtool.h  1061  #define ETHTOOL_GPFLAGS 0x00000027
ETHTOOL_SPFLAGS  macro  include/linux/ethtool.h  1062  #define ETHTOOL_SPFLAGS 0x00000028
ETHTOOL_GRXFH  macro  include/linux/ethtool.h  1064  #define ETHTOOL_GRXFH 0x00000029
ETHTOOL_SRXFH  macro  include/linux/ethtool.h  1065  #define ETHTOOL_SRXFH 0x0000002a
ETHTOOL_GGRO  macro  include/linux/ethtool.h  1066  #define ETHTOOL_GGRO 0x0000002b
ETHTOOL_SGRO  macro  include/linux/ethtool.h  1067  #define ETHTOOL_SGRO 0x0000002c
ETHTOOL_GRXRINGS  macro  include/linux/ethtool.h  1068  #define ETHTOOL_GRXRINGS 0x0000002d
ETHTOOL_GRXCLSRLCNT  macro  include/linux/ethtool.h  1069  #define ETHTOOL_GRXCLSRLCNT 0x0000002e
ETHTOOL_GRXCLSRULE  macro  include/linux/ethtool.h  1070  #define ETHTOOL_GRXCLSRULE 0x0000002f
ETHTOOL_GRXCLSRLALL  macro  include/linux/ethtool.h  1071  #define ETHTOOL_GRXCLSRLALL 0x00000030
ETHTOOL_SRXCLSRLDEL  macro  include/linux/ethtool.h  1072  #define ETHTOOL_SRXCLSRLDEL 0x00000031
ETHTOOL_SRXCLSRLINS  macro  include/linux/ethtool.h  1073  #define ETHTOOL_SRXCLSRLINS 0x00000032
ETHTOOL_FLASHDEV  macro  include/linux/ethtool.h  1074  #define ETHTOOL_FLASHDEV 0x00000033
ETHTOOL_RESET  macro  include/linux/ethtool.h  1075  #define ETHTOOL_RESET 0x00000034
ETHTOOL_SRXNTUPLE  macro  include/linux/ethtool.h  1076  #define ETHTOOL_SRXNTUPLE 0x00000035
ETHTOOL_GRXNTUPLE  macro  include/linux/ethtool.h  1077  #define ETHTOOL_GRXNTUPLE 0x00000036
ETHTOOL_GSSET_INFO  macro  include/linux/ethtool.h  1078  #define ETHTOOL_GSSET_INFO 0x00000037
ETHTOOL_GRXFHINDIR  macro  include/linux/ethtool.h  1079  #define ETHTOOL_GRXFHINDIR 0x00000038
ETHTOOL_SRXFHINDIR  macro  include/linux/ethtool.h  1080  #define ETHTOOL_SRXFHINDIR 0x00000039
ETHTOOL_GFEATURES  macro  include/linux/ethtool.h  1082  #define ETHTOOL_GFEATURES 0x0000003a
ETHTOOL_SFEATURES  macro  include/linux/ethtool.h  1083  #define ETHTOOL_SFEATURES 0x0000003b
ETHTOOL_GCHANNELS  macro  include/linux/ethtool.h  1084  #define ETHTOOL_GCHANNELS 0x0000003c
ETHTOOL_SCHANNELS  macro  include/linux/ethtool.h  1085  #define ETHTOOL_SCHANNELS 0x0000003d
ETHTOOL_SET_DUMP  macro  include/linux/ethtool.h  1086  #define ETHTOOL_SET_DUMP 0x0000003e
ETHTOOL_GET_DUMP_FLAG  macro  include/linux/ethtool.h  1087  #define ETHTOOL_GET_DUMP_FLAG 0x0000003f
ETHTOOL_GET_DUMP_DATA  macro  include/linux/ethtool.h  1088  #define ETHTOOL_GET_DUMP_DATA 0x00000040
ETHTOOL_GET_TS_INFO  macro  include/linux/ethtool.h  1089  #define ETHTOOL_GET_TS_INFO 0x00000041
ETHTOOL_GMODULEINFO  macro  include/linux/ethtool.h  1090  #define ETHTOOL_GMODULEINFO 0x00000042
ETHTOOL_GMODULEEEPROM  macro  include/linux/ethtool.h  1091  #define ETHTOOL_GMODULEEEPROM 0x00000043
SPARC_ETH_GSET  macro  include/linux/ethtool.h  1094  #define SPARC_ETH_GSET ETHTOOL_GSET
SPARC_ETH_SSET  macro  include/linux/ethtool.h  1095  #define SPARC_ETH_SSET ETHTOOL_SSET
SUPPORTED_10baseT_Half  macro  include/linux/ethtool.h  1098  #define SUPPORTED_10baseT_Half (1 << 0)
SUPPORTED_10baseT_Full  macro  include/linux/ethtool.h  1099  #define SUPPORTED_10baseT_Full (1 << 1)
SUPPORTED_100baseT_Half  macro  include/linux/ethtool.h  1100  #define SUPPORTED_100baseT_Half (1 << 2)
SUPPORTED_100baseT_Full  macro  include/linux/ethtool.h  1101  #define SUPPORTED_100baseT_Full (1 << 3)
SUPPORTED_1000baseT_Half  macro  include/linux/ethtool.h  1102  #define SUPPORTED_1000baseT_Half (1 << 4)
SUPPORTED_1000baseT_Full  macro  include/linux/ethtool.h  1103  #define SUPPORTED_1000baseT_Full (1 << 5)
SUPPORTED_Autoneg  macro  include/linux/ethtool.h  1104  #define SUPPORTED_Autoneg (1 << 6)
SUPPORTED_TP  macro  include/linux/ethtool.h  1105  #define SUPPORTED_TP (1 << 7)
SUPPORTED_AUI  macro  include/linux/ethtool.h  1106  #define SUPPORTED_AUI (1 << 8)
SUPPORTED_MII  macro  include/linux/ethtool.h  1107  #define SUPPORTED_MII (1 << 9)
SUPPORTED_FIBRE  macro  include/linux/ethtool.h  1108  #define SUPPORTED_FIBRE (1 << 10)
SUPPORTED_BNC  macro  include/linux/ethtool.h  1109  #define SUPPORTED_BNC (1 << 11)
SUPPORTED_10000baseT_Full  macro  include/linux/ethtool.h  1110  #define SUPPORTED_10000baseT_Full (1 << 12)
SUPPORTED_Pause  macro  include/linux/ethtool.h  1111  #define SUPPORTED_Pause (1 << 13)
SUPPORTED_Asym_Pause  macro  include/linux/ethtool.h  1112  #define SUPPORTED_Asym_Pause (1 << 14)
SUPPORTED_2500baseX_Full  macro  include/linux/ethtool.h  1113  #define SUPPORTED_2500baseX_Full (1 << 15)
SUPPORTED_Backplane  macro  include/linux/ethtool.h  1114  #define SUPPORTED_Backplane (1 << 16)
SUPPORTED_1000baseKX_Full  macro  include/linux/ethtool.h  1115  #define SUPPORTED_1000baseKX_Full (1 << 17)
SUPPORTED_10000baseKX4_Full  macro  include/linux/ethtool.h  1116  #define SUPPORTED_10000baseKX4_Full (1 << 18)
SUPPORTED_10000baseKR_Full  macro  include/linux/ethtool.h  1117  #define SUPPORTED_10000baseKR_Full (1 << 19)
SUPPORTED_10000baseR_FEC  macro  include/linux/ethtool.h  1118  #define SUPPORTED_10000baseR_FEC (1 << 20)
SUPPORTED_20000baseMLD2_Full  macro  include/linux/ethtool.h  1119  #define SUPPORTED_20000baseMLD2_Full (1 << 21)
SUPPORTED_20000baseKR2_Full  macro  include/linux/ethtool.h  1120  #define SUPPORTED_20000baseKR2_Full (1 << 22)
ADVERTISED_10baseT_Half  macro  include/linux/ethtool.h  1123  #define ADVERTISED_10baseT_Half (1 << 0)
ADVERTISED_10baseT_Full  macro  include/linux/ethtool.h  1124  #define ADVERTISED_10baseT_Full (1 << 1)
ADVERTISED_100baseT_Half  macro  include/linux/ethtool.h  1125  #define ADVERTISED_100baseT_Half (1 << 2)
ADVERTISED_100baseT_Full  macro  include/linux/ethtool.h  1126  #define ADVERTISED_100baseT_Full (1 << 3)
ADVERTISED_1000baseT_Half  macro  include/linux/ethtool.h  1127  #define ADVERTISED_1000baseT_Half (1 << 4)
ADVERTISED_1000baseT_Full  macro  include/linux/ethtool.h  1128  #define ADVERTISED_1000baseT_Full (1 << 5)
ADVERTISED_Autoneg  macro  include/linux/ethtool.h  1129  #define ADVERTISED_Autoneg (1 << 6)
ADVERTISED_TP  macro  include/linux/ethtool.h  1130  #define ADVERTISED_TP (1 << 7)
ADVERTISED_AUI  macro  include/linux/ethtool.h  1131  #define ADVERTISED_AUI (1 << 8)
ADVERTISED_MII  macro  include/linux/ethtool.h  1132  #define ADVERTISED_MII (1 << 9)
ADVERTISED_FIBRE  macro  include/linux/ethtool.h  1133  #define ADVERTISED_FIBRE (1 << 10)
ADVERTISED_BNC  macro  include/linux/ethtool.h  1134  #define ADVERTISED_BNC (1 << 11)
ADVERTISED_10000baseT_Full  macro  include/linux/ethtool.h  1135  #define ADVERTISED_10000baseT_Full (1 << 12)
ADVERTISED_Pause  macro  include/linux/ethtool.h  1136  #define ADVERTISED_Pause (1 << 13)
ADVERTISED_Asym_Pause  macro  include/linux/ethtool.h  1137  #define ADVERTISED_Asym_Pause (1 << 14)
ADVERTISED_2500baseX_Full  macro  include/linux/ethtool.h  1138  #define ADVERTISED_2500baseX_Full (1 << 15)
ADVERTISED_Backplane  macro  include/linux/ethtool.h  1139  #define ADVERTISED_Backplane (1 << 16)
ADVERTISED_1000baseKX_Full  macro  include/linux/ethtool.h  1140  #define ADVERTISED_1000baseKX_Full (1 << 17)
ADVERTISED_10000baseKX4_Full  macro  include/linux/ethtool.h  1141  #define ADVERTISED_10000baseKX4_Full (1 << 18)
ADVERTISED_10000baseKR_Full  macro  include/linux/ethtool.h  1142  #define ADVERTISED_10000baseKR_Full (1 << 19)
ADVERTISED_10000baseR_FEC  macro  include/linux/ethtool.h  1143  #define ADVERTISED_10000baseR_FEC (1 << 20)
ADVERTISED_20000baseMLD2_Full  macro  include/linux/ethtool.h  1144  #define ADVERTISED_20000baseMLD2_Full (1 << 21)
ADVERTISED_20000baseKR2_Full  macro  include/linux/ethtool.h  1145  #define ADVERTISED_20000baseKR2_Full (1 << 22)
SPEED_10  macro  include/linux/ethtool.h  1154  #define SPEED_10 10
SPEED_100  macro  include/linux/ethtool.h  1155  #define SPEED_100 100
SPEED_1000  macro  include/linux/ethtool.h  1156  #define SPEED_1000 1000
SPEED_2500  macro  include/linux/ethtool.h  1157  #define SPEED_2500 2500
SPEED_10000  macro  include/linux/ethtool.h  1158  #define SPEED_10000 10000
SPEED_UNKNOWN  macro  include/linux/ethtool.h  1159  #define SPEED_UNKNOWN -1
DUPLEX_HALF  macro  include/linux/ethtool.h  1162  #define DUPLEX_HALF 0x00
DUPLEX_FULL  macro  include/linux/ethtool.h  1163  #define DUPLEX_FULL 0x01
DUPLEX_UNKNOWN  macro  include/linux/ethtool.h  1164  #define DUPLEX_UNKNOWN 0xff
PORT_TP  macro  include/linux/ethtool.h  1167  #define PORT_TP 0x00
PORT_AUI  macro  include/linux/ethtool.h  1168  #define PORT_AUI 0x01
PORT_MII  macro  include/linux/ethtool.h  1169  #define PORT_MII 0x02
PORT_FIBRE  macro  include/linux/ethtool.h  1170  #define PORT_FIBRE 0x03
PORT_BNC  macro  include/linux/ethtool.h  1171  #define PORT_BNC 0x04
PORT_DA  macro  include/linux/ethtool.h  1172  #define PORT_DA 0x05
PORT_NONE  macro  include/linux/ethtool.h  1173  #define PORT_NONE 0xef
PORT_OTHER  macro  include/linux/ethtool.h  1174  #define PORT_OTHER 0xff
XCVR_INTERNAL  macro  include/linux/ethtool.h  1177  #define XCVR_INTERNAL 0x00
XCVR_EXTERNAL  macro  include/linux/ethtool.h  1178  #define XCVR_EXTERNAL 0x01
XCVR_DUMMY1  macro  include/linux/ethtool.h  1179  #define XCVR_DUMMY1 0x02
XCVR_DUMMY2  macro  include/linux/ethtool.h  1180  #define XCVR_DUMMY2 0x03
XCVR_DUMMY3  macro  include/linux/ethtool.h  1181  #define XCVR_DUMMY3 0x04
AUTONEG_DISABLE  macro  include/linux/ethtool.h  1186  #define AUTONEG_DISABLE 0x00
AUTONEG_ENABLE  macro  include/linux/ethtool.h  1187  #define AUTONEG_ENABLE 0x01
ETH_TP_MDI_INVALID  macro  include/linux/ethtool.h  1190  #define ETH_TP_MDI_INVALID 0x00
ETH_TP_MDI  macro  include/linux/ethtool.h  1191  #define ETH_TP_MDI 0x01
ETH_TP_MDI_X  macro  include/linux/ethtool.h  1192  #define ETH_TP_MDI_X 0x02
WAKE_PHY  macro  include/linux/ethtool.h  1195  #define WAKE_PHY (1 << 0)
WAKE_UCAST  macro  include/linux/ethtool.h  1196  #define WAKE_UCAST (1 << 1)
WAKE_MCAST  macro  include/linux/ethtool.h  1197  #define WAKE_MCAST (1 << 2)
WAKE_BCAST  macro  include/linux/ethtool.h  1198  #define WAKE_BCAST (1 << 3)
WAKE_ARP  macro  include/linux/ethtool.h  1199  #define WAKE_ARP (1 << 4)
WAKE_MAGIC  macro  include/linux/ethtool.h  1200  #define WAKE_MAGIC (1 << 5)
WAKE_MAGICSECURE  macro  include/linux/ethtool.h  1201  #define WAKE_MAGICSECURE (1 << 6)
TCP_V4_FLOW  macro  include/linux/ethtool.h  1204  #define TCP_V4_FLOW 0x01
UDP_V4_FLOW  macro  include/linux/ethtool.h  1205  #define UDP_V4_FLOW 0x02
SCTP_V4_FLOW  macro  include/linux/ethtool.h  1206  #define SCTP_V4_FLOW 0x03
AH_ESP_V4_FLOW  macro  include/linux/ethtool.h  1207  #define AH_ESP_V4_FLOW 0x04
TCP_V6_FLOW  macro  include/linux/ethtool.h  1208  #define TCP_V6_FLOW 0x05
UDP_V6_FLOW  macro  include/linux/ethtool.h  1209  #define UDP_V6_FLOW 0x06
SCTP_V6_FLOW  macro  include/linux/ethtool.h  1210  #define SCTP_V6_FLOW 0x07
AH_ESP_V6_FLOW  macro  include/linux/ethtool.h  1211  #define AH_ESP_V6_FLOW 0x08
AH_V4_FLOW  macro  include/linux/ethtool.h  1212  #define AH_V4_FLOW 0x09
ESP_V4_FLOW  macro  include/linux/ethtool.h  1213  #define ESP_V4_FLOW 0x0a
AH_V6_FLOW  macro  include/linux/ethtool.h  1214  #define AH_V6_FLOW 0x0b
ESP_V6_FLOW  macro  include/linux/ethtool.h  1215  #define ESP_V6_FLOW 0x0c
IP_USER_FLOW  macro  include/linux/ethtool.h  1216  #define IP_USER_FLOW 0x0d
IPV4_FLOW  macro  include/linux/ethtool.h  1217  #define IPV4_FLOW 0x10
IPV6_FLOW  macro  include/linux/ethtool.h  1218  #define IPV6_FLOW 0x11
ETHER_FLOW  macro  include/linux/ethtool.h  1219  #define ETHER_FLOW 0x12
FLOW_EXT  macro  include/linux/ethtool.h  1221  #define FLOW_EXT 0x80000000
RXH_L2DA  macro  include/linux/ethtool.h  1224  #define RXH_L2DA (1 << 1)
RXH_VLAN  macro  include/linux/ethtool.h  1225  #define RXH_VLAN (1 << 2)
RXH_L3_PROTO  macro  include/linux/ethtool.h  1226  #define RXH_L3_PROTO (1 << 3)
RXH_IP_SRC  macro  include/linux/ethtool.h  1227  #define RXH_IP_SRC (1 << 4)
RXH_IP_DST  macro  include/linux/ethtool.h  1228  #define RXH_IP_DST (1 << 5)
RXH_L4_B_0_1  macro  include/linux/ethtool.h  1229  #define RXH_L4_B_0_1 (1 << 6)
RXH_L4_B_2_3  macro  include/linux/ethtool.h  1230  #define RXH_L4_B_2_3 (1 << 7)
RXH_DISCARD  macro  include/linux/ethtool.h  1231  #define RXH_DISCARD (1 << 31)
RX_CLS_FLOW_DISC  macro  include/linux/ethtool.h  1233  #define RX_CLS_FLOW_DISC 0xffffffffffffffffULL
RX_CLS_LOC_SPECIAL  macro  include/linux/ethtool.h  1236  #define RX_CLS_LOC_SPECIAL 0x80000000
RX_CLS_LOC_ANY  macro  include/linux/ethtool.h  1237  #define RX_CLS_LOC_ANY 0xffffffff
RX_CLS_LOC_FIRST  macro  include/linux/ethtool.h  1238  #define RX_CLS_LOC_FIRST 0xfffffffe
RX_CLS_LOC_LAST  macro  include/linux/ethtool.h  1239  #define RX_CLS_LOC_LAST 0xfffffffd
ETH_MODULE_SFF_8079  macro  include/linux/ethtool.h  1242  #define ETH_MODULE_SFF_8079 0x1
ETH_MODULE_SFF_8079_LEN  macro  include/linux/ethtool.h  1243  #define ETH_MODULE_SFF_8079_LEN 256
ETH_MODULE_SFF_8472  macro  include/linux/ethtool.h  1244  #define ETH_MODULE_SFF_8472 0x2
ETH_MODULE_SFF_8472_LEN  macro  include/linux/ethtool.h  1245  #define ETH_MODULE_SFF_8472_LEN 512
ethtool_reset_flags  enum  include/linux/ethtool.h  1254  enum ethtool_reset_flags { ETH_RESET_MGMT = 1 << 0, ETH_RESET_IRQ = 1 << 1, ETH_RESET_DMA = 1 << 2, ETH_RESET_FILTER = 1 << 3, ETH_RESET_OFFLOAD = 1 << 4, ETH_RESET_MAC = 1 << 5, ETH_RESET_PHY = 1 << 6, ETH_RESET_RAM = 1 << 7, ETH_RESET_DEDICATED = 0x0000ffff, ETH_RESET_ALL = 0xffffffff, };
ETH_RESET_SHARED_SHIFT  macro  include/linux/ethtool.h  1275  #define ETH_RESET_SHARED_SHIFT 16
__LINUX_MII_H__  macro  include/linux/mii.h  9  #define __LINUX_MII_H__
MII_BMCR  macro  include/linux/mii.h  15  #define MII_BMCR 0x00
MII_BMSR  macro  include/linux/mii.h  16  #define MII_BMSR 0x01
MII_PHYSID1  macro  include/linux/mii.h  17  #define MII_PHYSID1 0x02
MII_PHYSID2  macro  include/linux/mii.h  18  #define MII_PHYSID2 0x03
MII_ADVERTISE  macro  include/linux/mii.h  19  #define MII_ADVERTISE 0x04
MII_LPA  macro  include/linux/mii.h  20  #define MII_LPA 0x05
MII_EXPANSION  macro  include/linux/mii.h  21  #define MII_EXPANSION 0x06
MII_CTRL1000  macro  include/linux/mii.h  22  #define MII_CTRL1000 0x09
MII_STAT1000  macro  include/linux/mii.h  23  #define MII_STAT1000 0x0a
MII_ESTATUS  macro  include/linux/mii.h  24  #define MII_ESTATUS 0x0f
MII_DCOUNTER  macro  include/linux/mii.h  25  #define MII_DCOUNTER 0x12
MII_FCSCOUNTER  macro  include/linux/mii.h  26  #define MII_FCSCOUNTER 0x13
MII_NWAYTEST  macro  include/linux/mii.h  27  #define MII_NWAYTEST 0x14
MII_RERRCOUNTER  macro  include/linux/mii.h  28  #define MII_RERRCOUNTER 0x15
MII_SREVISION  macro  include/linux/mii.h  29  #define MII_SREVISION 0x16
MII_RESV1  macro  include/linux/mii.h  30  #define MII_RESV1 0x17
MII_LBRERROR  macro  include/linux/mii.h  31  #define MII_LBRERROR 0x18
MII_PHYADDR  macro  include/linux/mii.h  32  #define MII_PHYADDR 0x19
MII_RESV2  macro  include/linux/mii.h  33  #define MII_RESV2 0x1a
MII_TPISTATUS  macro  include/linux/mii.h  34  #define MII_TPISTATUS 0x1b
MII_NCONFIG  macro  include/linux/mii.h  35  #define MII_NCONFIG 0x1c
BMCR_RESV  macro  include/linux/mii.h  38  #define BMCR_RESV 0x003f
BMCR_SPEED1000  macro  include/linux/mii.h  39  #define BMCR_SPEED1000 0x0040
BMCR_CTST  macro  include/linux/mii.h  40  #define BMCR_CTST 0x0080
BMCR_FULLDPLX  macro  include/linux/mii.h  41  #define BMCR_FULLDPLX 0x0100
BMCR_ANRESTART  macro  include/linux/mii.h  42  #define BMCR_ANRESTART 0x0200
BMCR_ISOLATE  macro  include/linux/mii.h  43  #define BMCR_ISOLATE 0x0400
BMCR_PDOWN  macro  include/linux/mii.h  44  #define BMCR_PDOWN 0x0800
BMCR_ANENABLE  macro  include/linux/mii.h  45  #define BMCR_ANENABLE 0x1000
BMCR_SPEED100  macro  include/linux/mii.h  46  #define BMCR_SPEED100 0x2000
BMCR_LOOPBACK  macro  include/linux/mii.h  47  #define BMCR_LOOPBACK 0x4000
BMCR_RESET  macro  include/linux/mii.h  48  #define BMCR_RESET 0x8000
BMSR_ERCAP  macro  include/linux/mii.h  51  #define BMSR_ERCAP 0x0001
BMSR_JCD  macro  include/linux/mii.h  52  #define BMSR_JCD 0x0002
BMSR_LSTATUS  macro  include/linux/mii.h  53  #define BMSR_LSTATUS 0x0004
BMSR_ANEGCAPABLE  macro  include/linux/mii.h  54  #define BMSR_ANEGCAPABLE 0x0008
BMSR_RFAULT  macro  include/linux/mii.h  55  #define BMSR_RFAULT 0x0010
BMSR_ANEGCOMPLETE  macro  include/linux/mii.h  56  #define BMSR_ANEGCOMPLETE 0x0020
BMSR_RESV  macro  include/linux/mii.h  57  #define BMSR_RESV 0x00c0
BMSR_ESTATEN  macro  include/linux/mii.h  58  #define BMSR_ESTATEN 0x0100
BMSR_100HALF2  macro  include/linux/mii.h  59  #define BMSR_100HALF2 0x0200
BMSR_100FULL2  macro  include/linux/mii.h  60  #define BMSR_100FULL2 0x0400
BMSR_10HALF  macro  include/linux/mii.h  61  #define BMSR_10HALF 0x0800
BMSR_10FULL  macro  include/linux/mii.h  62  #define BMSR_10FULL 0x1000
BMSR_100HALF  macro  include/linux/mii.h  63  #define BMSR_100HALF 0x2000
BMSR_100FULL  macro  include/linux/mii.h  64  #define BMSR_100FULL 0x4000
BMSR_100BASE4  macro  include/linux/mii.h  65  #define BMSR_100BASE4 0x8000
ADVERTISE_SLCT  macro  include/linux/mii.h  68  #define ADVERTISE_SLCT 0x001f
ADVERTISE_CSMA  macro  include/linux/mii.h  69  #define ADVERTISE_CSMA 0x0001
ADVERTISE_10HALF  macro  include/linux/mii.h  70  #define ADVERTISE_10HALF 0x0020
ADVERTISE_1000XFULL  macro  include/linux/mii.h  71  #define ADVERTISE_1000XFULL 0x0020
ADVERTISE_10FULL  macro  include/linux/mii.h  72  #define ADVERTISE_10FULL 0x0040
ADVERTISE_1000XHALF  macro  include/linux/mii.h  73  #define ADVERTISE_1000XHALF 0x0040
ADVERTISE_100HALF  macro  include/linux/mii.h  74  #define ADVERTISE_100HALF 0x0080
ADVERTISE_1000XPAUSE  macro  include/linux/mii.h  75  #define ADVERTISE_1000XPAUSE 0x0080
ADVERTISE_100FULL  macro  include/linux/mii.h  76  #define ADVERTISE_100FULL 0x0100
ADVERTISE_1000XPSE_ASYM  macro  include/linux/mii.h  77  #define ADVERTISE_1000XPSE_ASYM 0x0100
ADVERTISE_100BASE4  macro  include/linux/mii.h  78  #define ADVERTISE_100BASE4 0x0200
ADVERTISE_PAUSE_CAP  macro  include/linux/mii.h  79  #define ADVERTISE_PAUSE_CAP 0x0400
ADVERTISE_PAUSE_ASYM  macro  include/linux/mii.h  80  #define ADVERTISE_PAUSE_ASYM 0x0800
ADVERTISE_RESV  macro  include/linux/mii.h  81  #define ADVERTISE_RESV 0x1000
ADVERTISE_RFAULT  macro  include/linux/mii.h  82  #define ADVERTISE_RFAULT 0x2000
ADVERTISE_LPACK  macro  include/linux/mii.h  83  #define ADVERTISE_LPACK 0x4000
ADVERTISE_NPAGE  macro  include/linux/mii.h  84  #define ADVERTISE_NPAGE 0x8000
ADVERTISE_FULL  macro  include/linux/mii.h  86  #define ADVERTISE_FULL (ADVERTISE_100FULL | ADVERTISE_10FULL | ADVERTISE_CSMA)
ADVERTISE_ALL  macro  include/linux/mii.h  88  #define ADVERTISE_ALL (ADVERTISE_10HALF | ADVERTISE_10FULL | ADVERTISE_100HALF | ADVERTISE_100FULL)
LPA_SLCT  macro  include/linux/mii.h  92  #define LPA_SLCT 0x001f
LPA_10HALF  macro  include/linux/mii.h  93  #define LPA_10HALF 0x0020
LPA_1000XFULL  macro  include/linux/mii.h  94  #define LPA_1000XFULL 0x0020
LPA_10FULL  macro  include/linux/mii.h  95  #define LPA_10FULL 0x0040
LPA_1000XHALF  macro  include/linux/mii.h  96  #define LPA_1000XHALF 0x0040
LPA_100HALF  macro  include/linux/mii.h  97  #define LPA_100HALF 0x0080
LPA_1000XPAUSE  macro  include/linux/mii.h  98  #define LPA_1000XPAUSE 0x0080
LPA_100FULL  macro  include/linux/mii.h  99  #define LPA_100FULL 0x0100
LPA_1000XPAUSE_ASYM  macro  include/linux/mii.h  100  #define LPA_1000XPAUSE_ASYM 0x0100
LPA_100BASE4  macro  include/linux/mii.h  101  #define LPA_100BASE4 0x0200
LPA_PAUSE_CAP  macro  include/linux/mii.h  102  #define LPA_PAUSE_CAP 0x0400
LPA_PAUSE_ASYM  macro  include/linux/mii.h  103  #define LPA_PAUSE_ASYM 0x0800
LPA_RESV  macro  include/linux/mii.h  104  #define LPA_RESV 0x1000
LPA_RFAULT  macro  include/linux/mii.h  105  #define LPA_RFAULT 0x2000
LPA_LPACK  macro  include/linux/mii.h  106  #define LPA_LPACK 0x4000
LPA_NPAGE  macro  include/linux/mii.h  107  #define LPA_NPAGE 0x8000
LPA_DUPLEX  macro  include/linux/mii.h  109  #define LPA_DUPLEX (LPA_10FULL | LPA_100FULL)
LPA_100  macro  include/linux/mii.h  110  #define LPA_100 (LPA_100FULL | LPA_100HALF | LPA_100BASE4)
EXPANSION_NWAY  macro  include/linux/mii.h  113  #define EXPANSION_NWAY 0x0001
EXPANSION_LCWP  macro  include/linux/mii.h  114  #define EXPANSION_LCWP 0x0002
EXPANSION_ENABLENPAGE  macro  include/linux/mii.h  115  #define EXPANSION_ENABLENPAGE 0x0004
EXPANSION_NPCAPABLE  macro  include/linux/mii.h  116  #define EXPANSION_NPCAPABLE 0x0008
EXPANSION_MFAULTS  macro  include/linux/mii.h  117  #define EXPANSION_MFAULTS 0x0010
EXPANSION_RESV  macro  include/linux/mii.h  118  #define EXPANSION_RESV 0xffe0
ESTATUS_1000_TFULL  macro  include/linux/mii.h  120  #define ESTATUS_1000_TFULL 0x2000
ESTATUS_1000_THALF  macro  include/linux/mii.h  121  #define ESTATUS_1000_THALF 0x1000
NWAYTEST_RESV1  macro  include/linux/mii.h  124  #define NWAYTEST_RESV1 0x00ff
NWAYTEST_LOOPBACK  macro  include/linux/mii.h  125  #define NWAYTEST_LOOPBACK 0x0100
NWAYTEST_RESV2  macro  include/linux/mii.h  126  #define NWAYTEST_RESV2 0xfe00
ADVERTISE_1000FULL  macro  include/linux/mii.h  129  #define ADVERTISE_1000FULL 0x0200
ADVERTISE_1000HALF  macro  include/linux/mii.h  130  #define ADVERTISE_1000HALF 0x0100
CTL1000_AS_MASTER  macro  include/linux/mii.h  131  #define CTL1000_AS_MASTER 0x0800
CTL1000_ENABLE_MASTER  macro  include/linux/mii.h  132  #define CTL1000_ENABLE_MASTER 0x1000
LPA_1000LOCALRXOK  macro  include/linux/mii.h  135  #define LPA_1000LOCALRXOK 0x2000
LPA_1000REMRXOK  macro  include/linux/mii.h  136  #define LPA_1000REMRXOK 0x1000
LPA_1000FULL  macro  include/linux/mii.h  137  #define LPA_1000FULL 0x0800
LPA_1000HALF  macro  include/linux/mii.h  138  #define LPA_1000HALF 0x0400
FLOW_CTRL_TX  macro  include/linux/mii.h  141  #define FLOW_CTRL_TX 0x01
FLOW_CTRL_RX  macro  include/linux/mii.h  142  #define FLOW_CTRL_RX 0x02
mii_ioctl_data  struct  include/linux/mii.h  145  struct mii_ioctl_data { __u16 phy_id; __u16 reg_num; __u16 val_in; __u16 val_out; };
mii_if_info  struct  include/linux/mii.h  158  struct mii_if_info { int phy_id; int advertising; int phy_id_mask; int reg_num_mask; unsigned int full_duplex : 1; unsigned int force_media : 1; unsigned int supports_gmii : 1; struct net_device *dev; int (*mdio_read) (struct net_device *dev, int phy_id, int location); void (*mdio_write) (struct net_device *dev, int phy_id, int location, int val); };
mii_link_ok  prototype  include/linux/mii.h  173  extern int mii_link_ok (struct mii_if_info *mii);
mii_nway_restart  prototype  include/linux/mii.h  174  extern int mii_nway_restart (struct mii_if_info *mii);
mii_ethtool_gset  prototype  include/linux/mii.h  175  extern int mii_ethtool_gset(struct mii_if_info *mii,struct ethtool_cmd *ecmd);
mii_ethtool_sset  prototype  include/linux/mii.h  176  extern int mii_ethtool_sset(struct mii_if_info *mii,struct ethtool_cmd *ecmd);
mii_check_gmii_support  prototype  include/linux/mii.h  177  extern int mii_check_gmii_support(struct mii_if_info *mii);
mii_check_link  prototype  include/linux/mii.h  178  extern void mii_check_link (struct mii_if_info *mii);
mii_check_media  prototype  include/linux/mii.h  179  extern unsigned int mii_check_media (struct mii_if_info *mii,unsigned int ok_to_print,unsigned int init_media);
generic_mii_ioctl  prototype  include/linux/mii.h  182  extern int generic_mii_ioctl(struct mii_if_info *mii_if,struct mii_ioctl_data *mii_data, int cmd,unsigned int *duplex_changed);
if_mii  function  include/linux/mii.h  187  static inline struct mii_ioctl_data *if_mii(struct ifreq *rq)
mii_nway_result  function  include/linux/mii.h  206  static inline unsigned int mii_nway_result (unsigned int negotiated)
mii_duplex  function  include/linux/mii.h  233  static inline unsigned int mii_duplex (unsigned int duplex_lock,unsigned int negotiated)
ethtool_adv_to_mii_adv_t  function  include/linux/mii.h  251  static inline u32 ethtool_adv_to_mii_adv_t(u32 ethadv)
mii_adv_to_ethtool_adv_t  function  include/linux/mii.h  278  static inline u32 mii_adv_to_ethtool_adv_t(u32 adv)
ethtool_adv_to_mii_ctrl1000_t  function  include/linux/mii.h  306  static inline u32 ethtool_adv_to_mii_ctrl1000_t(u32 ethadv)
mii_ctrl1000_to_ethtool_adv_t  function  include/linux/mii.h  326  static inline u32 mii_ctrl1000_to_ethtool_adv_t(u32 adv)
mii_lpa_to_ethtool_lpa_t  function  include/linux/mii.h  346  static inline u32 mii_lpa_to_ethtool_lpa_t(u32 lpa)
mii_stat1000_to_ethtool_lpa_t  function  include/linux/mii.h  364  static inline u32 mii_stat1000_to_ethtool_lpa_t(u32 lpa)
ethtool_adv_to_mii_adv_x  function  include/linux/mii.h  384  static inline u32 ethtool_adv_to_mii_adv_x(u32 ethadv)
mii_adv_to_ethtool_adv_x  function  include/linux/mii.h  408  static inline u32 mii_adv_to_ethtool_adv_x(u32 adv)
mii_lpa_to_ethtool_lpa_x  function  include/linux/mii.h  432  static inline u32 mii_lpa_to_ethtool_lpa_x(u32 lpa)
mii_advertise_flowctrl  function  include/linux/mii.h  446  static inline u16 mii_advertise_flowctrl(int cap)
mii_resolve_flowctrl_fdx  function  include/linux/mii.h  465  static inline u8 mii_resolve_flowctrl_fdx(u16 lcladv,u16 rmtadv)
_LINUX_CRC32_H  macro  include/linux/crc32.h  6  #define _LINUX_CRC32_H
crc32_le  prototype  include/linux/crc32.h  11  extern u32 crc32_le(u32 crc,unsigned char const *p,size_t len);
crc32_be  prototype  include/linux/crc32.h  12  extern u32 crc32_be(u32 crc,unsigned char const *p,size_t len);
__crc32c_le  prototype  include/linux/crc32.h  14  extern u32 __crc32c_le(u32 crc,unsigned char const *p,size_t len);
crc32  macro  include/linux/crc32.h  16  #define crc32(seed,data,length) crc32_le(seed,(unsigned char const *)(data),length)
ether_crc  macro  include/linux/crc32.h  26  #define ether_crc(length,data) bitrev32(crc32_le(~0,data,length))
ether_crc_le  macro  include/linux/crc32.h  27  #define ether_crc_le(length,data) crc32_le(~0,data,length)
_LINUX_NETDEVICE_H  macro  include/linux/netdevice.h  26  #define _LINUX_NETDEVICE_H
SET_ETHTOOL_OPS  macro  include/linux/netdevice.h  65  #define SET_ETHTOOL_OPS(netdev,ops) ( (netdev)->ethtool_ops = (ops) )
NET_ADDR_PERM  macro  include/linux/netdevice.h  69  #define NET_ADDR_PERM 0
NET_ADDR_RANDOM  macro  include/linux/netdevice.h  70  #define NET_ADDR_RANDOM 1
NET_ADDR_STOLEN  macro  include/linux/netdevice.h  71  #define NET_ADDR_STOLEN 2
NET_RX_SUCCESS  macro  include/linux/netdevice.h  74  #define NET_RX_SUCCESS 0
NET_RX_DROP  macro  include/linux/netdevice.h  75  #define NET_RX_DROP 1
NET_XMIT_SUCCESS  macro  include/linux/netdevice.h  95  #define NET_XMIT_SUCCESS 0x00
NET_XMIT_DROP  macro  include/linux/netdevice.h  96  #define NET_XMIT_DROP 0x01
NET_XMIT_CN  macro  include/linux/netdevice.h  97  #define NET_XMIT_CN 0x02
NET_XMIT_POLICED  macro  include/linux/netdevice.h  98  #define NET_XMIT_POLICED 0x03
NET_XMIT_MASK  macro  include/linux/netdevice.h  99  #define NET_XMIT_MASK 0x0f
net_xmit_eval  macro  include/linux/netdevice.h  104  #define net_xmit_eval(e) ((e) == NET_XMIT_CN ? 0 : (e))
net_xmit_errno  macro  include/linux/netdevice.h  105  #define net_xmit_errno(e) ((e) != NET_XMIT_CN ? -ENOBUFS : 0)
NETDEV_TX_MASK  macro  include/linux/netdevice.h  108  #define NETDEV_TX_MASK 0xf0
netdev_tx  enum  include/linux/netdevice.h  110  enum netdev_tx { __NETDEV_TX_MIN = INT_MIN, NETDEV_TX_OK = 0x00, NETDEV_TX_BUSY = 0x10, NETDEV_TX_LOCKED = 0x20, };
dev_xmit_complete  function  include/linux/netdevice.h  122  static inline bool dev_xmit_complete(int rc)
MAX_ADDR_LEN  macro  include/linux/netdevice.h  138  #define MAX_ADDR_LEN 32
INIT_NETDEV_GROUP  macro  include/linux/netdevice.h  141  #define INIT_NETDEV_GROUP 0
LL_MAX_HEADER  macro  include/linux/netdevice.h  158  # define LL_MAX_HEADER 32
MAX_HEADER  macro  include/linux/netdevice.h  165  #define MAX_HEADER (LL_MAX_HEADER + 48)
net_device_stats  struct  include/linux/netdevice.h  173  struct net_device_stats { unsigned long rx_packets; unsigned long tx_packets; unsigned long rx_bytes; unsigned long tx_bytes; unsigned long rx_errors; unsigned long tx_errors; unsigned long rx_dropped; unsigned long tx_dropped; unsigned long multicast; unsigned long collisions; unsigned long rx_length_errors; unsigned long rx_over_errors; unsigned long rx_crc_errors; unsigned long rx_frame_errors; unsigned long rx_fifo_errors; unsigned long rx_missed_errors; unsigned long tx_aborted_errors; unsigned long tx_carrier_errors; unsigned long tx_fifo_errors; unsigned long tx_heartbeat_errors; unsigned long tx_window_errors; unsigned long rx_compressed; unsigned long tx_compressed; };
netdev_hw_addr  struct  include/linux/netdevice.h  227  struct netdev_hw_addr { struct list_head list; unsigned char addr[MAX_ADDR_LEN]; unsigned char type; #define NETDEV_HW_ADDR_T_LAN 1 #define NETDEV_HW_ADDR_T_SAN 2 #define NETDEV_HW_ADDR_T_SLAVE 3 #define NETDEV_HW_ADDR_T_UNICAST 4 #define NETDEV_HW_ADDR_T_MULTICAST 5 bool synced; bool global_use; int refcount; struct rcu_head rcu_head; };
netdev_hw_addr_list  struct  include/linux/netdevice.h  242  struct netdev_hw_addr_list { struct list_head list; int count; };
netdev_hw_addr_list_count  macro  include/linux/netdevice.h  247  #define netdev_hw_addr_list_count(l) ((l)->count)
netdev_hw_addr_list_empty  macro  include/linux/netdevice.h  248  #define netdev_hw_addr_list_empty(l) (netdev_hw_addr_list_count(l) == 0)
netdev_hw_addr_list_for_each  macro  include/linux/netdevice.h  249  #define netdev_hw_addr_list_for_each(ha,l) list_for_each_entry(ha, &(l)->list, list)
netdev_uc_count  macro  include/linux/netdevice.h  252  #define netdev_uc_count(dev) netdev_hw_addr_list_count(&(dev)->uc)
netdev_uc_empty  macro  include/linux/netdevice.h  253  #define netdev_uc_empty(dev) netdev_hw_addr_list_empty(&(dev)->uc)
netdev_for_each_uc_addr  macro  include/linux/netdevice.h  254  #define netdev_for_each_uc_addr(ha,dev) netdev_hw_addr_list_for_each(ha, &(dev)->uc)
netdev_mc_count  macro  include/linux/netdevice.h  257  #define netdev_mc_count(dev) netdev_hw_addr_list_count(&(dev)->mc)
netdev_mc_empty  macro  include/linux/netdevice.h  258  #define netdev_mc_empty(dev) netdev_hw_addr_list_empty(&(dev)->mc)
netdev_for_each_mc_addr  macro  include/linux/netdevice.h  259  #define netdev_for_each_mc_addr(ha,dev) netdev_hw_addr_list_for_each(ha, &(dev)->mc)
hh_cache  struct  include/linux/netdevice.h  262  struct hh_cache { u16 hh_len; u16 __pad; seqlock_t hh_lock; #define HH_DATA_MOD 16 #define HH_DATA_OFF(__len) \ #define HH_DATA_ALIGN(__len) \ unsigned long hh_data[HH_DATA_ALIGN(LL_MAX_HEADER) / sizeof(long)]; };
LL_RESERVED_SPACE  macro  include/linux/netdevice.h  284  #define LL_RESERVED_SPACE(dev) ((((dev)->hard_header_len+(dev)->needed_headroom)&~(HH_DATA_MOD - 1)) + HH_DATA_MOD)
LL_RESERVED_SPACE_EXTRA  macro  include/linux/netdevice.h  286  #define LL_RESERVED_SPACE_EXTRA(dev,extra) ((((dev)->hard_header_len+(dev)->needed_headroom+(extra))&~(HH_DATA_MOD - 1)) + HH_DATA_MOD)
header_ops  struct  include/linux/netdevice.h  289  struct header_ops { int (*create) (struct sk_buff *skb, struct net_device *dev,unsigned short type, const void *daddr,const void *saddr, unsigned int len); int (*parse)(const struct sk_buff *skb, unsigned char *haddr); int (*rebuild)(struct sk_buff *skb); int (*cache)(const struct neighbour *neigh, struct hh_cache *hh, __be16 type); void (*cache_update)(struct hh_cache *hh,const struct net_device *dev,const unsigned char *haddr); };
netdev_state_t  enum  include/linux/netdevice.h  306  enum netdev_state_t { __LINK_STATE_START, __LINK_STATE_PRESENT, __LINK_STATE_NOCARRIER, __LINK_STATE_LINKWATCH_PENDING, __LINK_STATE_DORMANT, };
netdev_boot_setup  prototype  include/linux/netdevice.h  325  extern int __init netdev_boot_setup(char *str);
NETDEV_BOOT_SETUP_MAX  macro  include/linux/netdevice.h  323  #define NETDEV_BOOT_SETUP_MAX 8
napi_struct  struct  include/linux/netdevice.h  330  struct napi_struct { struct list_head poll_list; unsigned long state; int weight; int (*poll)(struct napi_struct *, int); spinlock_t poll_lock; int poll_owner; unsigned int gro_count; struct net_device *dev; struct list_head dev_list; struct sk_buff *gro_list; struct sk_buff *skb; };
gro_result  enum  include/linux/netdevice.h  361  enum gro_result { GRO_MERGED, GRO_MERGED_FREE, GRO_HELD, GRO_NORMAL, GRO_DROP, };
rx_handler_result  enum  include/linux/netdevice.h  411  enum rx_handler_result { RX_HANDLER_CONSUMED, RX_HANDLER_ANOTHER, RX_HANDLER_EXACT, RX_HANDLER_PASS, };
__napi_schedule  prototype  include/linux/netdevice.h  420  extern void __napi_schedule(struct napi_struct *n);
napi_disable_pending  function  include/linux/netdevice.h  422  static inline bool napi_disable_pending(struct napi_struct *n)
napi_schedule_prep  function  include/linux/netdevice.h  436  static inline bool napi_schedule_prep(struct napi_struct *n)
napi_schedule  function  include/linux/netdevice.h  449  static inline void napi_schedule(struct napi_struct *n)
napi_reschedule  function  include/linux/netdevice.h  456  static inline bool napi_reschedule(struct napi_struct *napi)
__napi_complete  prototype  include/linux/netdevice.h  471  extern void __napi_complete(struct napi_struct *n);
napi_complete  prototype  include/linux/netdevice.h  472  extern void napi_complete(struct napi_struct *n);
napi_disable  function  include/linux/netdevice.h  481  static inline void napi_disable(struct napi_struct *n)
napi_enable  function  include/linux/netdevice.h  496  static inline void napi_enable(struct napi_struct *n)
napi_synchronize  macro  include/linux/netdevice.h  518  # define napi_synchronize(n) barrier()
netdev_queue_state_t  enum  include/linux/netdevice.h  521  enum netdev_queue_state_t { __QUEUE_STATE_DRV_XOFF, __QUEUE_STATE_STACK_XOFF, __QUEUE_STATE_FROZEN, #define QUEUE_STATE_ANY_XOFF ((1 << __QUEUE_STATE_DRV_XOFF) | \ #define QUEUE_STATE_ANY_XOFF_OR_FROZEN (QUEUE_STATE_ANY_XOFF | \ };
netdev_queue  struct  include/linux/netdevice.h  540  struct netdev_queue { struct net_device *dev; struct Qdisc *qdisc; struct Qdisc *qdisc_sleeping; struct kobject kobj; int numa_node; spinlock_t _xmit_lock ____cacheline_aligned_in_smp; int xmit_lock_owner; unsigned long trans_start; unsigned long trans_timeout; unsigned long state; struct dql dql; } ____cacheline_aligned_in_smp;
netdev_queue_numa_node_read  function  include/linux/netdevice.h  576  static inline int netdev_queue_numa_node_read(const struct netdev_queue *q)
netdev_queue_numa_node_write  function  include/linux/netdevice.h  585  static inline void netdev_queue_numa_node_write(struct netdev_queue *q,int node)
rps_map  struct  include/linux/netdevice.h  597  struct rps_map { unsigned int len; struct rcu_head rcu; u16 cpus[0]; };
RPS_MAP_SIZE  macro  include/linux/netdevice.h  602  #define RPS_MAP_SIZE(_num) (sizeof(struct rps_map) + ((_num) * sizeof(u16)))
rps_dev_flow  struct  include/linux/netdevice.h  609  struct rps_dev_flow { u16 cpu; u16 filter; unsigned int last_qtail; };
RPS_NO_FILTER  macro  include/linux/netdevice.h  614  #define RPS_NO_FILTER 0xffff
rps_dev_flow_table  struct  include/linux/netdevice.h  619  struct rps_dev_flow_table { unsigned int mask; struct rcu_head rcu; struct work_struct free_work; struct rps_dev_flow flows[0]; };
RPS_DEV_FLOW_TABLE_SIZE  macro  include/linux/netdevice.h  625  #define RPS_DEV_FLOW_TABLE_SIZE(_num) (sizeof(struct rps_dev_flow_table) + ((_num) * sizeof(struct rps_dev_flow)))
rps_sock_flow_table  struct  include/linux/netdevice.h  632  struct rps_sock_flow_table { unsigned int mask; u16 ents[0]; };
RPS_SOCK_FLOW_TABLE_SIZE  macro  include/linux/netdevice.h  636  #define RPS_SOCK_FLOW_TABLE_SIZE(_num) (sizeof(struct rps_sock_flow_table) + ((_num) * sizeof(u16)))
RPS_NO_CPU  macro  include/linux/netdevice.h  639  #define RPS_NO_CPU 0xffff
rps_record_sock_flow  function  include/linux/netdevice.h  641  static inline void rps_record_sock_flow(struct rps_sock_flow_table *table,u32 hash)
rps_reset_sock_flow  function  include/linux/netdevice.h  655  static inline void rps_reset_sock_flow(struct rps_sock_flow_table *table,u32 hash)
rps_may_expire_flow  prototype  include/linux/netdevice.h  665  extern bool rps_may_expire_flow(struct net_device *dev,u16 rxq_index,u32 flow_id, u16 filter_id);
netdev_rx_queue  struct  include/linux/netdevice.h  670  struct netdev_rx_queue { struct rps_map __rcu *rps_map; struct rps_dev_flow_table __rcu *rps_flow_table; struct kobject kobj; struct net_device *dev; } ____cacheline_aligned_in_smp;
xps_map  struct  include/linux/netdevice.h  683  struct xps_map { unsigned int len; unsigned int alloc_len; struct rcu_head rcu; u16 queues[0]; };
XPS_MAP_SIZE  macro  include/linux/netdevice.h  689  #define XPS_MAP_SIZE(_num) (sizeof(struct xps_map) + ((_num) * sizeof(u16)))
XPS_MIN_MAP_ALLOC  macro  include/linux/netdevice.h  690  #define XPS_MIN_MAP_ALLOC ((L1_CACHE_BYTES - sizeof(struct xps_map)) / sizeof(u16))
xps_dev_maps  struct  include/linux/netdevice.h  696  struct xps_dev_maps { struct rcu_head rcu; struct xps_map __rcu *cpu_map[0]; };
XPS_DEV_MAPS_SIZE  macro  include/linux/netdevice.h  700  #define XPS_DEV_MAPS_SIZE (sizeof(struct xps_dev_maps) + (nr_cpu_ids * sizeof(struct xps_map *)))
TC_MAX_QUEUE  macro  include/linux/netdevice.h  704  #define TC_MAX_QUEUE 16
TC_BITMASK  macro  include/linux/netdevice.h  705  #define TC_BITMASK 15
netdev_tc_txq  struct  include/linux/netdevice.h  707  struct netdev_tc_txq { u16 count; u16 offset; };
netdev_fcoe_hbainfo  struct  include/linux/netdevice.h  717  struct netdev_fcoe_hbainfo { char manufacturer[64]; char serial_number[64]; char hardware_version[64]; char driver_version[64]; char optionrom_version[64]; char firmware_version[64]; char model[256]; char model_description[256]; };
net_device_ops  struct  include/linux/netdevice.h  920  struct net_device_ops { int (*ndo_init)(struct net_device *dev); void (*ndo_uninit)(struct net_device *dev); int (*ndo_open)(struct net_device *dev); int (*ndo_stop)(struct net_device *dev); netdev_tx_t (*ndo_start_xmit) (struct sk_buff *skb,struct net_device *dev); u16 (*ndo_select_queue)(struct net_device *dev,struct sk_buff *skb); void (*ndo_change_rx_flags)(struct net_device *dev,int flags); void (*ndo_set_rx_mode)(struct net_device *dev); int (*ndo_set_mac_address)(struct net_device *dev,void *addr); int (*ndo_validate_addr)(struct net_device *dev); int (*ndo_do_ioctl)(struct net_device *dev,struct ifreq *ifr, int cmd); int (*ndo_set_config)(struct net_device *dev,struct ifmap *map); int (*ndo_change_mtu)(struct net_device *dev,int new_mtu); int (*ndo_neigh_setup)(struct net_device *dev,struct neigh_parms *); void (*ndo_tx_timeout) (struct net_device *dev); struct rtnl_link_stats64* (*ndo_get_stats64)(struct net_device *dev,struct rtnl_link_stats64 *storage); struct net_device_stats* (*ndo_get_stats)(struct net_device *dev); int (*ndo_vlan_rx_add_vid)(struct net_device *dev,unsigned short vid); int (*ndo_vlan_rx_kill_vid)(struct net_device *dev,unsigned short vid); void (*ndo_poll_controller)(struct net_device *dev); int (*ndo_netpoll_setup)(struct net_device *dev,struct netpoll_info *info); void (*ndo_netpoll_cleanup)(struct net_device *dev); int (*ndo_set_vf_mac)(struct net_device *dev,int queue, u8 *mac); int (*ndo_set_vf_vlan)(struct net_device *dev,int queue, u16 vlan, u8 qos); int (*ndo_set_vf_tx_rate)(struct net_device *dev,int vf, int rate); int (*ndo_set_vf_spoofchk)(struct net_device *dev,int vf, bool setting); int (*ndo_get_vf_config)(struct net_device *dev,int vf,struct ifla_vf_info *ivf); int (*ndo_set_vf_port)(struct net_device *dev,int vf,struct nlattr *port[]); int (*ndo_get_vf_port)(struct net_device *dev,int vf, struct sk_buff *skb); int (*ndo_setup_tc)(struct net_device *dev, u8 tc); int (*ndo_fcoe_enable)(struct net_device *dev); int (*ndo_fcoe_disable)(struct net_device *dev); int (*ndo_fcoe_ddp_setup)(struct net_device *dev,u16 xid,struct scatterlist *sgl,unsigned int sgc); int (*ndo_fcoe_ddp_done)(struct net_device *dev,u16 xid); int (*ndo_fcoe_ddp_target)(struct net_device *dev,u16 xid,struct scatterlist *sgl,unsigned int sgc); int (*ndo_fcoe_get_hbainfo)(struct net_device *dev,struct netdev_fcoe_hbainfo *hbainfo); #define NETDEV_FCOE_WWNN 0 #define NETDEV_FCOE_WWPN 1 int (*ndo_fcoe_get_wwn)(struct net_device *dev,u64 *wwn, int type); int (*ndo_rx_flow_steer)(struct net_device *dev,const struct sk_buff *skb,u16 rxq_index,u32 flow_id); int (*ndo_add_slave)(struct net_device *dev,struct net_device *slave_dev); int (*ndo_del_slave)(struct net_device *dev,struct net_device *slave_dev); netdev_features_t (*ndo_fix_features)(struct net_device *dev,netdev_features_t features); int (*ndo_set_features)(struct net_device *dev,netdev_features_t features); int (*ndo_neigh_construct)(struct neighbour *n); void (*ndo_neigh_destroy)(struct neighbour *n); int (*ndo_fdb_add)(struct ndmsg *ndm,struct net_device *dev,unsigned char *addr,u16 flags); int (*ndo_fdb_del)(struct ndmsg *ndm,struct net_device *dev,unsigned char *addr); int (*ndo_fdb_dump)(struct sk_buff *skb,struct netlink_callback *cb,struct net_device *dev,int idx); };
net_device  struct  include/linux/netdevice.h  1040  struct net_device { char name[IFNAMSIZ]; struct pm_qos_request pm_qos_req; struct hlist_node name_hlist; char *ifalias; unsigned long mem_end; unsigned long mem_start; unsigned long base_addr; unsigned int irq; unsigned long state; struct list_head dev_list; struct list_head napi_list; struct list_head unreg_list; netdev_features_t features; netdev_features_t hw_features; netdev_features_t wanted_features; netdev_features_t vlan_features; int ifindex; int iflink; struct net_device_stats stats; atomic_long_t rx_dropped; const struct iw_handler_def * wireless_handlers; struct iw_public_data * wireless_data; const struct net_device_ops *netdev_ops; const struct ethtool_ops *ethtool_ops; const struct header_ops *header_ops; unsigned int flags; unsigned int priv_flags; unsigned short gflags; unsigned short padded; unsigned char operstate; unsigned char link_mode; unsigned char if_port; unsigned char dma; unsigned int mtu; unsigned short type; unsigned short hard_header_len; unsigned short needed_headroom; unsigned short needed_tailroom; unsigned char perm_addr[MAX_ADDR_LEN]; unsigned char addr_assign_type; unsigned char addr_len; unsigned char neigh_priv_len; unsigned short dev_id; spinlock_t addr_list_lock; struct netdev_hw_addr_list uc; struct netdev_hw_addr_list mc; bool uc_promisc; unsigned int promiscuity; unsigned int allmulti; struct vlan_info __rcu *vlan_info; struct dsa_switch_tree *dsa_ptr; void *atalk_ptr; struct in_device __rcu *ip_ptr; struct dn_dev __rcu *dn_ptr; struct inet6_dev __rcu *ip6_ptr; void *ax25_ptr; struct wireless_dev *ieee80211_ptr; unsigned long last_rx; struct net_device *master; unsigned char *dev_addr; struct netdev_hw_addr_list dev_addrs; unsigned char broadcast[MAX_ADDR_LEN]; struct kset *queues_kset; struct netdev_rx_queue *_rx; unsigned int num_rx_queues; unsigned int real_num_rx_queues; struct cpu_rmap *rx_cpu_rmap; rx_handler_func_t __rcu *rx_handler; void __rcu *rx_handler_data; struct netdev_queue __rcu *ingress_queue; struct netdev_queue *_tx ____cacheline_aligned_in_smp; unsigned int num_tx_queues; unsigned int real_num_tx_queues; struct Qdisc *qdisc; unsigned long tx_queue_len; spinlock_t tx_global_lock; struct xps_dev_maps __rcu *xps_maps; unsigned long trans_start; int watchdog_timeo; struct timer_list watchdog_timer; int __percpu *pcpu_refcnt; struct list_head todo_list; struct hlist_node index_hlist; struct list_head link_watch_list; enum { NETREG_UNINITIALIZED=0, NETREG_REGISTERED, NETREG_UNREGISTERING, NETREG_UNREGISTERED, NETREG_RELEASED, NETREG_DUMMY, } reg_state:8; bool dismantle; enum { RTNL_LINK_INITIALIZED, RTNL_LINK_INITIALIZING, } rtnl_link_state:16; void (*destructor)(struct net_device *dev); struct netpoll_info *npinfo; struct net *nd_net; void *ml_priv; struct pcpu_lstats __percpu *lstats; struct pcpu_tstats __percpu *tstats; struct pcpu_dstats __percpu *dstats; }; struct garp_port __rcu *garp_port; struct device dev; const struct attribute_group *sysfs_groups[4]; const struct rtnl_link_ops *rtnl_link_ops; #define GSO_MAX_SIZE 65536 unsigned int gso_max_size; #define GSO_MAX_SEGS 65535 u16 gso_max_segs; const struct dcbnl_rtnl_ops *dcbnl_ops; u8 num_tc; struct netdev_tc_txq tc_to_txq[TC_MAX_QUEUE]; u8 prio_tc_map[TC_BITMASK + 1]; unsigned int fcoe_ddp_xid; struct netprio_map __rcu *priomap; struct phy_device *phydev; int group; };
to_net_dev  macro  include/linux/netdevice.h  1328  #define to_net_dev(d) container_of(d,struct net_device,dev)
NETDEV_ALIGN  macro  include/linux/netdevice.h  1330  #define NETDEV_ALIGN 32
netdev_get_prio_tc_map  function  include/linux/netdevice.h  1333  int netdev_get_prio_tc_map(const struct net_device *dev,u32 prio)
netdev_set_prio_tc_map  function  include/linux/netdevice.h  1339  int netdev_set_prio_tc_map(struct net_device *dev,u8 prio,u8 tc)
netdev_reset_tc  function  include/linux/netdevice.h  1349  void netdev_reset_tc(struct net_device *dev)
netdev_set_tc_queue  function  include/linux/netdevice.h  1357  int netdev_set_tc_queue(struct net_device *dev,u8 tc,u16 count,u16 offset)
netdev_set_num_tc  function  include/linux/netdevice.h  1368  int netdev_set_num_tc(struct net_device *dev,u8 num_tc)
netdev_get_num_tc  function  include/linux/netdevice.h  1378  int netdev_get_num_tc(struct net_device *dev)
netdev_get_tx_queue  function  include/linux/netdevice.h  1384  struct netdev_queue *netdev_get_tx_queue(const struct net_device *dev,unsigned int index)
netdev_for_each_tx_queue  function  include/linux/netdevice.h  1390  static inline void netdev_for_each_tx_queue(struct net_device *dev,void (*f)(struct net_device *,struct netdev_queue *,void *),void *arg)
dev_net  function  include/linux/netdevice.h  1406  struct net *dev_net(const struct net_device *dev)
dev_net_set  function  include/linux/netdevice.h  1412  void dev_net_set(struct net_device *dev,struct net *net)
netdev_uses_dsa_tags  function  include/linux/netdevice.h  1420  static inline bool netdev_uses_dsa_tags(struct net_device *dev)
netdev_uses_trailer_tags  function  include/linux/netdevice.h  1430  static inline bool netdev_uses_trailer_tags(struct net_device *dev)
netdev_priv  function  include/linux/netdevice.h  1446  static inline void *netdev_priv(const struct net_device *dev)
SET_NETDEV_DEV  macro  include/linux/netdevice.h  1454  #define SET_NETDEV_DEV(net,pdev) ((net)->dev.parent = (pdev))
SET_NETDEV_DEVTYPE  macro  include/linux/netdevice.h  1460  #define SET_NETDEV_DEVTYPE(net,devtype) ((net)->dev.type = (devtype))
netif_napi_add  prototype  include/linux/netdevice.h  1472  void netif_napi_add(struct net_device *dev,struct napi_struct *napi,int (*poll)(struct napi_struct *, int), int weight);
netif_napi_del  prototype  include/linux/netdevice.h  1481  void netif_napi_del(struct napi_struct *napi);
napi_gro_cb  struct  include/linux/netdevice.h  1483  struct napi_gro_cb { void *frag0; unsigned int frag0_len; int data_offset; int same_flow; int flush; int count; int free; #define NAPI_GRO_FREE 1 #define NAPI_GRO_FREE_STOLEN_HEAD 2 };
NAPI_GRO_CB  macro  include/linux/netdevice.h  1508  #define NAPI_GRO_CB(skb) ((struct napi_gro_cb *)(skb)->cb)
packet_type  struct  include/linux/netdevice.h  1510  struct packet_type { __be16 type; struct net_device *dev; int (*func) (struct sk_buff *,struct net_device *,struct packet_type *,struct net_device *); struct sk_buff *(*gso_segment)(struct sk_buff *skb,netdev_features_t features); int (*gso_send_check)(struct sk_buff *skb); struct sk_buff **(*gro_receive)(struct sk_buff **head,struct sk_buff *skb); int (*gro_complete)(struct sk_buff *skb); bool (*id_match)(struct packet_type *ptype,struct sock *sk); void *af_packet_priv; struct list_head list; };
NETDEV_UP  macro  include/linux/netdevice.h  1535  #define NETDEV_UP 0x0001
NETDEV_DOWN  macro  include/linux/netdevice.h  1536  #define NETDEV_DOWN 0x0002
NETDEV_REBOOT  macro  include/linux/netdevice.h  1537  #define NETDEV_REBOOT 0x0003
NETDEV_CHANGE  macro  include/linux/netdevice.h  1541  #define NETDEV_CHANGE 0x0004
NETDEV_REGISTER  macro  include/linux/netdevice.h  1542  #define NETDEV_REGISTER 0x0005
NETDEV_UNREGISTER  macro  include/linux/netdevice.h  1543  #define NETDEV_UNREGISTER 0x0006
NETDEV_CHANGEMTU  macro  include/linux/netdevice.h  1544  #define NETDEV_CHANGEMTU 0x0007
NETDEV_CHANGEADDR  macro  include/linux/netdevice.h  1545  #define NETDEV_CHANGEADDR 0x0008
NETDEV_GOING_DOWN  macro  include/linux/netdevice.h  1546  #define NETDEV_GOING_DOWN 0x0009
NETDEV_CHANGENAME  macro  include/linux/netdevice.h  1547  #define NETDEV_CHANGENAME 0x000A
NETDEV_FEAT_CHANGE  macro  include/linux/netdevice.h  1548  #define NETDEV_FEAT_CHANGE 0x000B
NETDEV_BONDING_FAILOVER  macro  include/linux/netdevice.h  1549  #define NETDEV_BONDING_FAILOVER 0x000C
NETDEV_PRE_UP  macro  include/linux/netdevice.h  1550  #define NETDEV_PRE_UP 0x000D
NETDEV_PRE_TYPE_CHANGE  macro  include/linux/netdevice.h  1551  #define NETDEV_PRE_TYPE_CHANGE 0x000E
NETDEV_POST_TYPE_CHANGE  macro  include/linux/netdevice.h  1552  #define NETDEV_POST_TYPE_CHANGE 0x000F
NETDEV_POST_INIT  macro  include/linux/netdevice.h  1553  #define NETDEV_POST_INIT 0x0010
NETDEV_UNREGISTER_BATCH  macro  include/linux/netdevice.h  1554  #define NETDEV_UNREGISTER_BATCH 0x0011
NETDEV_RELEASE  macro  include/linux/netdevice.h  1555  #define NETDEV_RELEASE 0x0012
NETDEV_NOTIFY_PEERS  macro  include/linux/netdevice.h  1556  #define NETDEV_NOTIFY_PEERS 0x0013
NETDEV_JOIN  macro  include/linux/netdevice.h  1557  #define NETDEV_JOIN 0x0014
register_netdevice_notifier  prototype  include/linux/netdevice.h  1559  extern int register_netdevice_notifier(struct notifier_block *nb);
unregister_netdevice_notifier  prototype  include/linux/netdevice.h  1560  extern int unregister_netdevice_notifier(struct notifier_block *nb);
call_netdevice_notifiers  prototype  include/linux/netdevice.h  1561  extern int call_netdevice_notifiers(unsigned long val,struct net_device *dev);
for_each_netdev  macro  include/linux/netdevice.h  1567  #define for_each_netdev(net,d) list_for_each_entry(d, &(net)->dev_base_head, dev_list)
for_each_netdev_reverse  macro  include/linux/netdevice.h  1569  #define for_each_netdev_reverse(net,d) list_for_each_entry_reverse(d, &(net)->dev_base_head, dev_list)
for_each_netdev_rcu  macro  include/linux/netdevice.h  1571  #define for_each_netdev_rcu(net,d) list_for_each_entry_rcu(d, &(net)->dev_base_head, dev_list)
for_each_netdev_safe  macro  include/linux/netdevice.h  1573  #define for_each_netdev_safe(net,d,n) list_for_each_entry_safe(d, n, &(net)->dev_base_head, dev_list)
for_each_netdev_continue  macro  include/linux/netdevice.h  1575  #define for_each_netdev_continue(net,d) list_for_each_entry_continue(d, &(net)->dev_base_head, dev_list)
for_each_netdev_continue_rcu  macro  include/linux/netdevice.h  1577  #define for_each_netdev_continue_rcu(net,d) list_for_each_entry_continue_rcu(d, &(net)->dev_base_head, dev_list)
net_device_entry  macro  include/linux/netdevice.h  1579  #define net_device_entry(lh) list_entry(lh,struct net_device,dev_list)
next_net_device  function  include/linux/netdevice.h  1581  static inline struct net_device *next_net_device(struct net_device *dev)
next_net_device_rcu  function  include/linux/netdevice.h  1591  static inline struct net_device *next_net_device_rcu(struct net_device *dev)
first_net_device  function  include/linux/netdevice.h  1601  static inline struct net_device *first_net_device(struct net *net)
first_net_device_rcu  function  include/linux/netdevice.h  1607  static inline struct net_device *first_net_device_rcu(struct net *net)
netdev_boot_setup_check  prototype  include/linux/netdevice.h  1614  extern int netdev_boot_setup_check(struct net_device *dev);
netdev_boot_base  prototype  include/linux/netdevice.h  1615  extern unsigned long netdev_boot_base(const char *prefix,int unit);
dev_getbyhwaddr_rcu  prototype  include/linux/netdevice.h  1616  extern struct net_device *dev_getbyhwaddr_rcu(struct net *net,unsigned short type,const char *hwaddr);
dev_getfirstbyhwtype  prototype  include/linux/netdevice.h  1618  extern struct net_device *dev_getfirstbyhwtype(struct net *net,unsigned short type);
__dev_getfirstbyhwtype  prototype  include/linux/netdevice.h  1619  extern struct net_device *__dev_getfirstbyhwtype(struct net *net,unsigned short type);
dev_add_pack  prototype  include/linux/netdevice.h  1620  extern void dev_add_pack(struct packet_type *pt);
dev_remove_pack  prototype  include/linux/netdevice.h  1621  extern void dev_remove_pack(struct packet_type *pt);
__dev_remove_pack  prototype  include/linux/netdevice.h  1622  extern void __dev_remove_pack(struct packet_type *pt);
dev_get_by_flags_rcu  prototype  include/linux/netdevice.h  1624  extern struct net_device *dev_get_by_flags_rcu(struct net *net,unsigned short flags,unsigned short mask);
dev_get_by_name  prototype  include/linux/netdevice.h  1626  extern struct net_device *dev_get_by_name(struct net *net,const char *name);
dev_get_by_name_rcu  prototype  include/linux/netdevice.h  1627  extern struct net_device *dev_get_by_name_rcu(struct net *net,const char *name);
__dev_get_by_name  prototype  include/linux/netdevice.h  1628  extern struct net_device *__dev_get_by_name(struct net *net,const char *name);
dev_alloc_name  prototype  include/linux/netdevice.h  1629  extern int dev_alloc_name(struct net_device *dev,const char *name);
dev_open  prototype  include/linux/netdevice.h  1630  extern int dev_open(struct net_device *dev);
dev_close  prototype  include/linux/netdevice.h  1631  extern int dev_close(struct net_device *dev);
dev_disable_lro  prototype  include/linux/netdevice.h  1632  extern void dev_disable_lro(struct net_device *dev);
dev_queue_xmit  prototype  include/linux/netdevice.h  1633  extern int dev_queue_xmit(struct sk_buff *skb);
register_netdevice  prototype  include/linux/netdevice.h  1634  extern int register_netdevice(struct net_device *dev);
unregister_netdevice_queue  prototype  include/linux/netdevice.h  1635  extern void unregister_netdevice_queue(struct net_device *dev,struct list_head *head);
unregister_netdevice_many  prototype  include/linux/netdevice.h  1637  extern void unregister_netdevice_many(struct list_head *head);
unregister_netdevice  function  include/linux/netdevice.h  1638  static inline void unregister_netdevice(struct net_device *dev)
netdev_refcnt_read  prototype  include/linux/netdevice.h  1643  extern int netdev_refcnt_read(const struct net_device *dev);
free_netdev  prototype  include/linux/netdevice.h  1644  extern void free_netdev(struct net_device *dev);
synchronize_net  prototype  include/linux/netdevice.h  1645  extern void synchronize_net(void);
init_dummy_netdev  prototype  include/linux/netdevice.h  1646  extern int init_dummy_netdev(struct net_device *dev);
netdev_resync_ops  prototype  include/linux/netdevice.h  1647  extern void netdev_resync_ops(struct net_device *dev);
dev_get_by_index  prototype  include/linux/netdevice.h  1649  extern struct net_device *dev_get_by_index(struct net *net,int ifindex);
__dev_get_by_index  prototype  include/linux/netdevice.h  1650  extern struct net_device *__dev_get_by_index(struct net *net,int ifindex);
dev_get_by_index_rcu  prototype  include/linux/netdevice.h  1651  extern struct net_device *dev_get_by_index_rcu(struct net *net,int ifindex);
dev_restart  prototype  include/linux/netdevice.h  1652  extern int dev_restart(struct net_device *dev);
netpoll_trap  prototype  include/linux/netdevice.h  1654  extern int netpoll_trap(void);
skb_gro_receive  prototype  include/linux/netdevice.h  1656  extern int skb_gro_receive(struct sk_buff **head,struct sk_buff *skb);
skb_gro_reset_offset  prototype  include/linux/netdevice.h  1658  extern void skb_gro_reset_offset(struct sk_buff *skb);
skb_gro_offset  function  include/linux/netdevice.h  1660  static inline unsigned int skb_gro_offset(const struct sk_buff *skb)
skb_gro_len  function  include/linux/netdevice.h  1665  static inline unsigned int skb_gro_len(const struct sk_buff *skb)
skb_gro_pull  function  include/linux/netdevice.h  1670  static inline void skb_gro_pull(struct sk_buff *skb,unsigned int len)
skb_gro_header_fast  function  include/linux/netdevice.h  1675  static inline void *skb_gro_header_fast(struct sk_buff *skb,unsigned int offset)
skb_gro_header_hard  function  include/linux/netdevice.h  1681  static inline int skb_gro_header_hard(struct sk_buff *skb,unsigned int hlen)
skb_gro_header_slow  function  include/linux/netdevice.h  1686  static inline void *skb_gro_header_slow(struct sk_buff *skb,unsigned int hlen,unsigned int offset)
skb_gro_mac_header  function  include/linux/netdevice.h  1697  static inline void *skb_gro_mac_header(struct sk_buff *skb)
skb_gro_network_header  function  include/linux/netdevice.h  1702  static inline void *skb_gro_network_header(struct sk_buff *skb)
dev_hard_header  function  include/linux/netdevice.h  1708  static inline int dev_hard_header(struct sk_buff *skb,struct net_device *dev,unsigned short type,const void *daddr, const void *saddr,unsigned int len)
dev_parse_header  function  include/linux/netdevice.h  1719  static inline int dev_parse_header(const struct sk_buff *skb,unsigned char *haddr)
register_gifconf  prototype  include/linux/netdevice.h  1730  extern int register_gifconf(unsigned int family,gifconf_func_t * gifconf);
unregister_gifconf  function  include/linux/netdevice.h  1731  static inline int unregister_gifconf(unsigned int family)
softnet_data  struct  include/linux/netdevice.h  1739  struct softnet_data { struct Qdisc *output_queue; struct Qdisc **output_queue_tailp; struct list_head poll_list; struct sk_buff *completion_queue; struct sk_buff_head process_queue; unsigned int processed; unsigned int time_squeeze; unsigned int cpu_collision; unsigned int received_rps; struct softnet_data *rps_ipi_list; struct call_single_data csd ____cacheline_aligned_in_smp; struct softnet_data *rps_ipi_next; unsigned int cpu; unsigned int input_queue_head; unsigned int input_queue_tail; unsigned int dropped; struct sk_buff_head input_pkt_queue; struct napi_struct backlog; };
input_queue_head_incr  function  include/linux/netdevice.h  1767  static inline void input_queue_head_incr(struct softnet_data *sd)
input_queue_tail_incr_save  function  include/linux/netdevice.h  1774  static inline void input_queue_tail_incr_save(struct softnet_data *sd,unsigned int *qtail)
__netif_schedule  prototype  include/linux/netdevice.h  1784  extern void __netif_schedule(struct Qdisc *q);
netif_schedule_queue  function  include/linux/netdevice.h  1786  static inline void netif_schedule_queue(struct netdev_queue *txq)
netif_tx_schedule_all  function  include/linux/netdevice.h  1792  static inline void netif_tx_schedule_all(struct net_device *dev)
netif_tx_start_queue  function  include/linux/netdevice.h  1800  static inline void netif_tx_start_queue(struct netdev_queue *dev_queue)
netif_start_queue  function  include/linux/netdevice.h  1811  static inline void netif_start_queue(struct net_device *dev)
netif_tx_start_all_queues  function  include/linux/netdevice.h  1816  static inline void netif_tx_start_all_queues(struct net_device *dev)
netif_tx_wake_queue  function  include/linux/netdevice.h  1826  static inline void netif_tx_wake_queue(struct netdev_queue *dev_queue)
netif_wake_queue  function  include/linux/netdevice.h  1845  static inline void netif_wake_queue(struct net_device *dev)
netif_tx_wake_all_queues  function  include/linux/netdevice.h  1850  static inline void netif_tx_wake_all_queues(struct net_device *dev)
netif_tx_stop_queue  function  include/linux/netdevice.h  1860  static inline void netif_tx_stop_queue(struct netdev_queue *dev_queue)
netif_stop_queue  function  include/linux/netdevice.h  1876  static inline void netif_stop_queue(struct net_device *dev)
netif_tx_stop_all_queues  function  include/linux/netdevice.h  1881  static inline void netif_tx_stop_all_queues(struct net_device *dev)
netif_tx_queue_stopped  function  include/linux/netdevice.h  1891  static inline bool netif_tx_queue_stopped(const struct netdev_queue *dev_queue)
netif_queue_stopped  function  include/linux/netdevice.h  1902  static inline bool netif_queue_stopped(const struct net_device *dev)
netif_xmit_stopped  function  include/linux/netdevice.h  1907  static inline bool netif_xmit_stopped(const struct netdev_queue *dev_queue)
netif_xmit_frozen_or_stopped  function  include/linux/netdevice.h  1912  static inline bool netif_xmit_frozen_or_stopped(const struct netdev_queue *dev_queue)
netdev_tx_sent_queue  function  include/linux/netdevice.h  1917  static inline void netdev_tx_sent_queue(struct netdev_queue *dev_queue,unsigned int bytes)
netdev_sent_queue  function  include/linux/netdevice.h  1941  static inline void netdev_sent_queue(struct net_device *dev,unsigned int bytes)
netdev_tx_completed_queue  function  include/linux/netdevice.h  1946  static inline void netdev_tx_completed_queue(struct netdev_queue *dev_queue,unsigned int pkts, unsigned int bytes)
netdev_completed_queue  function  include/linux/netdevice.h  1970  static inline void netdev_completed_queue(struct net_device *dev,unsigned int pkts, unsigned int bytes)
netdev_tx_reset_queue  function  include/linux/netdevice.h  1976  static inline void netdev_tx_reset_queue(struct netdev_queue *q)
netdev_reset_queue  function  include/linux/netdevice.h  1984  static inline void netdev_reset_queue(struct net_device *dev_queue)
netif_running  function  include/linux/netdevice.h  1995  static inline bool netif_running(const struct net_device *dev)
netif_start_subqueue  function  include/linux/netdevice.h  2014  static inline void netif_start_subqueue(struct net_device *dev,u16 queue_index)
netif_stop_subqueue  function  include/linux/netdevice.h  2028  static inline void netif_stop_subqueue(struct net_device *dev,u16 queue_index)
__netif_subqueue_stopped  function  include/linux/netdevice.h  2045  static inline bool __netif_subqueue_stopped(const struct net_device *dev,u16 queue_index)
netif_subqueue_stopped  function  include/linux/netdevice.h  2053  static inline bool netif_subqueue_stopped(const struct net_device *dev,struct sk_buff *skb)
netif_wake_subqueue  function  include/linux/netdevice.h  2066  static inline void netif_wake_subqueue(struct net_device *dev,u16 queue_index)
skb_tx_hash  function  include/linux/netdevice.h  2081  static inline u16 skb_tx_hash(const struct net_device *dev,const struct sk_buff *skb)
netif_is_multiqueue  function  include/linux/netdevice.h  2093  static inline bool netif_is_multiqueue(const struct net_device *dev)
netif_set_real_num_tx_queues  prototype  include/linux/netdevice.h  2098  extern int netif_set_real_num_tx_queues(struct net_device *dev,unsigned int txq);
netif_set_real_num_rx_queues  function  include/linux/netdevice.h  2105  static inline int netif_set_real_num_rx_queues(struct net_device *dev,unsigned int rxq)
netif_copy_real_num_queues  function  include/linux/netdevice.h  2112  static inline int netif_copy_real_num_queues(struct net_device *to_dev,const struct net_device *from_dev)
dev_kfree_skb_irq  prototype  include/linux/netdevice.h  2128  extern void dev_kfree_skb_irq(struct sk_buff *skb);
dev_kfree_skb_any  prototype  include/linux/netdevice.h  2134  extern void dev_kfree_skb_any(struct sk_buff *skb);
netif_rx  prototype  include/linux/netdevice.h  2136  extern int netif_rx(struct sk_buff *skb);
netif_rx_ni  prototype  include/linux/netdevice.h  2137  extern int netif_rx_ni(struct sk_buff *skb);
netif_receive_skb  prototype  include/linux/netdevice.h  2138  extern int netif_receive_skb(struct sk_buff *skb);
dev_gro_receive  prototype  include/linux/netdevice.h  2139  extern gro_result_t dev_gro_receive(struct napi_struct *napi,struct sk_buff *skb);
napi_skb_finish  prototype  include/linux/netdevice.h  2141  extern gro_result_t napi_skb_finish(gro_result_t ret,struct sk_buff *skb);
napi_gro_receive  prototype  include/linux/netdevice.h  2142  extern gro_result_t napi_gro_receive(struct napi_struct *napi,struct sk_buff *skb);
napi_gro_flush  prototype  include/linux/netdevice.h  2144  extern void napi_gro_flush(struct napi_struct *napi);
napi_get_frags  prototype  include/linux/netdevice.h  2145  extern struct sk_buff * napi_get_frags(struct napi_struct *napi);
napi_frags_finish  prototype  include/linux/netdevice.h  2146  extern gro_result_t napi_frags_finish(struct napi_struct *napi,struct sk_buff *skb,gro_result_t ret);
napi_gro_frags  prototype  include/linux/netdevice.h  2149  extern gro_result_t napi_gro_frags(struct napi_struct *napi);
napi_free_frags  function  include/linux/netdevice.h  2151  static inline void napi_free_frags(struct napi_struct *napi)
netdev_rx_handler_register  prototype  include/linux/netdevice.h  2157  extern int netdev_rx_handler_register(struct net_device *dev,rx_handler_func_t *rx_handler,void *rx_handler_data);
netdev_rx_handler_unregister  prototype  include/linux/netdevice.h  2160  extern void netdev_rx_handler_unregister(struct net_device *dev);
dev_valid_name  prototype  include/linux/netdevice.h  2162  extern bool dev_valid_name(const char *name);
dev_ioctl  prototype  include/linux/netdevice.h  2163  extern int dev_ioctl(struct net *net,unsigned int cmd,void __user *);
dev_ethtool  prototype  include/linux/netdevice.h  2164  extern int dev_ethtool(struct net *net,struct ifreq *);
dev_get_flags  prototype  include/linux/netdevice.h  2165  extern unsigned int dev_get_flags(const struct net_device *);
__dev_change_flags  prototype  include/linux/netdevice.h  2166  extern int __dev_change_flags(struct net_device *,unsigned int flags);
dev_change_flags  prototype  include/linux/netdevice.h  2167  extern int dev_change_flags(struct net_device *,unsigned int);
__dev_notify_flags  prototype  include/linux/netdevice.h  2168  extern void __dev_notify_flags(struct net_device *,unsigned int old_flags);
dev_change_name  prototype  include/linux/netdevice.h  2169  extern int dev_change_name(struct net_device *,const char *);
dev_set_alias  prototype  include/linux/netdevice.h  2170  extern int dev_set_alias(struct net_device *,const char *,size_t);
dev_change_net_namespace  prototype  include/linux/netdevice.h  2171  extern int dev_change_net_namespace(struct net_device *,struct net *, const char *);
dev_set_mtu  prototype  include/linux/netdevice.h  2173  extern int dev_set_mtu(struct net_device *,int);
dev_set_group  prototype  include/linux/netdevice.h  2174  extern void dev_set_group(struct net_device *,int);
dev_set_mac_address  prototype  include/linux/netdevice.h  2175  extern int dev_set_mac_address(struct net_device *,struct sockaddr *);
dev_hard_start_xmit  prototype  include/linux/netdevice.h  2177  extern int dev_hard_start_xmit(struct sk_buff *skb,struct net_device *dev,struct netdev_queue *txq);
dev_forward_skb  prototype  include/linux/netdevice.h  2180  extern int dev_forward_skb(struct net_device *dev,struct sk_buff *skb);
netdev_run_todo  prototype  include/linux/netdevice.h  2186  extern void netdev_run_todo(void);
dev_put  function  include/linux/netdevice.h  2194  static inline void dev_put(struct net_device *dev)
dev_hold  function  include/linux/netdevice.h  2205  static inline void dev_hold(struct net_device *dev)
linkwatch_fire_event  prototype  include/linux/netdevice.h  2219  extern void linkwatch_fire_event(struct net_device *dev);
linkwatch_forget_dev  prototype  include/linux/netdevice.h  2220  extern void linkwatch_forget_dev(struct net_device *dev);
netif_carrier_ok  function  include/linux/netdevice.h  2228  static inline bool netif_carrier_ok(const struct net_device *dev)
dev_trans_start  prototype  include/linux/netdevice.h  2233  extern unsigned long dev_trans_start(struct net_device *dev);
__netdev_watchdog_up  prototype  include/linux/netdevice.h  2235  extern void __netdev_watchdog_up(struct net_device *dev);
netif_carrier_on  prototype  include/linux/netdevice.h  2237  extern void netif_carrier_on(struct net_device *dev);
netif_carrier_off  prototype  include/linux/netdevice.h  2239  extern void netif_carrier_off(struct net_device *dev);
netif_notify_peers  prototype  include/linux/netdevice.h  2241  extern void netif_notify_peers(struct net_device *dev);
netif_dormant_on  function  include/linux/netdevice.h  2256  static inline void netif_dormant_on(struct net_device *dev)
netif_dormant_off  function  include/linux/netdevice.h  2268  static inline void netif_dormant_off(struct net_device *dev)
netif_dormant  function  include/linux/netdevice.h  2280  static inline bool netif_dormant(const struct net_device *dev)
netif_oper_up  function  include/linux/netdevice.h  2292  static inline bool netif_oper_up(const struct net_device *dev)
netif_device_present  function  include/linux/netdevice.h  2304  static inline bool netif_device_present(struct net_device *dev)
netif_device_detach  prototype  include/linux/netdevice.h  2309  extern void netif_device_detach(struct net_device *dev);
netif_device_attach  prototype  include/linux/netdevice.h  2311  extern void netif_device_attach(struct net_device *dev);
netif_msg_drv  macro  include/linux/netdevice.h  2335  #define netif_msg_drv(p) ((p)->msg_enable & NETIF_MSG_DRV)
netif_msg_probe  macro  include/linux/netdevice.h  2336  #define netif_msg_probe(p) ((p)->msg_enable & NETIF_MSG_PROBE)
netif_msg_link  macro  include/linux/netdevice.h  2337  #define netif_msg_link(p) ((p)->msg_enable & NETIF_MSG_LINK)
netif_msg_timer  macro  include/linux/netdevice.h  2338  #define netif_msg_timer(p) ((p)->msg_enable & NETIF_MSG_TIMER)
netif_msg_ifdown  macro  include/linux/netdevice.h  2339  #define netif_msg_ifdown(p) ((p)->msg_enable & NETIF_MSG_IFDOWN)
netif_msg_ifup  macro  include/linux/netdevice.h  2340  #define netif_msg_ifup(p) ((p)->msg_enable & NETIF_MSG_IFUP)
netif_msg_rx_err  macro  include/linux/netdevice.h  2341  #define netif_msg_rx_err(p) ((p)->msg_enable & NETIF_MSG_RX_ERR)
netif_msg_tx_err  macro  include/linux/netdevice.h  2342  #define netif_msg_tx_err(p) ((p)->msg_enable & NETIF_MSG_TX_ERR)
netif_msg_tx_queued  macro  include/linux/netdevice.h  2343  #define netif_msg_tx_queued(p) ((p)->msg_enable & NETIF_MSG_TX_QUEUED)
netif_msg_intr  macro  include/linux/netdevice.h  2344  #define netif_msg_intr(p) ((p)->msg_enable & NETIF_MSG_INTR)
netif_msg_tx_done  macro  include/linux/netdevice.h  2345  #define netif_msg_tx_done(p) ((p)->msg_enable & NETIF_MSG_TX_DONE)
netif_msg_rx_status  macro  include/linux/netdevice.h  2346  #define netif_msg_rx_status(p) ((p)->msg_enable & NETIF_MSG_RX_STATUS)
netif_msg_pktdata  macro  include/linux/netdevice.h  2347  #define netif_msg_pktdata(p) ((p)->msg_enable & NETIF_MSG_PKTDATA)
netif_msg_hw  macro  include/linux/netdevice.h  2348  #define netif_msg_hw(p) ((p)->msg_enable & NETIF_MSG_HW)
netif_msg_wol  macro  include/linux/netdevice.h  2349  #define netif_msg_wol(p) ((p)->msg_enable & NETIF_MSG_WOL)
netif_msg_init  function  include/linux/netdevice.h  2351  static inline u32 netif_msg_init(int debug_value,int default_msg_enable_bits)
__netif_tx_lock  function  include/linux/netdevice.h  2362  static inline void __netif_tx_lock(struct netdev_queue *txq,int cpu)
__netif_tx_lock_bh  function  include/linux/netdevice.h  2368  static inline void __netif_tx_lock_bh(struct netdev_queue *txq)
__netif_tx_trylock  function  include/linux/netdevice.h  2374  static inline bool __netif_tx_trylock(struct netdev_queue *txq)
__netif_tx_unlock  function  include/linux/netdevice.h  2382  static inline void __netif_tx_unlock(struct netdev_queue *txq)
__netif_tx_unlock_bh  function  include/linux/netdevice.h  2388  static inline void __netif_tx_unlock_bh(struct netdev_queue *txq)
txq_trans_update  function  include/linux/netdevice.h  2394  static inline void txq_trans_update(struct netdev_queue *txq)
netif_tx_lock  function  include/linux/netdevice.h  2406  static inline void netif_tx_lock(struct net_device *dev)
netif_tx_lock_bh  function  include/linux/netdevice.h  2428  static inline void netif_tx_lock_bh(struct net_device *dev)
netif_tx_unlock  function  include/linux/netdevice.h  2434  static inline void netif_tx_unlock(struct net_device *dev)
netif_tx_unlock_bh  function  include/linux/netdevice.h  2451  static inline void netif_tx_unlock_bh(struct net_device *dev)
HARD_TX_LOCK  macro  include/linux/netdevice.h  2457  #define HARD_TX_LOCK(dev,txq,cpu) { if ((dev->features & NETIF_F_LLTX) == 0) { __netif_tx_lock(txq, cpu); } }
HARD_TX_UNLOCK  macro  include/linux/netdevice.h  2463  #define HARD_TX_UNLOCK(dev,txq) { if ((dev->features & NETIF_F_LLTX) == 0) { __netif_tx_unlock(txq); } }
netif_tx_disable  function  include/linux/netdevice.h  2469  static inline void netif_tx_disable(struct net_device *dev)
netif_addr_lock  function  include/linux/netdevice.h  2486  static inline void netif_addr_lock(struct net_device *dev)
netif_addr_lock_nested  function  include/linux/netdevice.h  2491  static inline void netif_addr_lock_nested(struct net_device *dev)
netif_addr_lock_bh  function  include/linux/netdevice.h  2496  static inline void netif_addr_lock_bh(struct net_device *dev)
netif_addr_unlock  function  include/linux/netdevice.h  2501  static inline void netif_addr_unlock(struct net_device *dev)
netif_addr_unlock_bh  function  include/linux/netdevice.h  2506  static inline void netif_addr_unlock_bh(struct net_device *dev)
for_each_dev_addr  macro  include/linux/netdevice.h  2515  #define for_each_dev_addr(dev,ha) list_for_each_entry_rcu(ha, &dev->dev_addrs.list, list)
ether_setup  prototype  include/linux/netdevice.h  2520  extern void ether_setup(struct net_device *dev);
alloc_netdev_mqs  prototype  include/linux/netdevice.h  2523  extern struct net_device *alloc_netdev_mqs(int sizeof_priv,const char *name,void (*setup)(struct net_device *),unsigned int txqs, unsigned int rxqs);
alloc_netdev  macro  include/linux/netdevice.h  2526  #define alloc_netdev(sizeof_priv,name,setup) alloc_netdev_mqs(sizeof_priv, name, setup, 1, 1)
alloc_netdev_mq  macro  include/linux/netdevice.h  2529  #define alloc_netdev_mq(sizeof_priv,name,setup,count) alloc_netdev_mqs(sizeof_priv, name, setup, count, count)
register_netdev  prototype  include/linux/netdevice.h  2532  extern int register_netdev(struct net_device *dev);
unregister_netdev  prototype  include/linux/netdevice.h  2533  extern void unregister_netdev(struct net_device *dev);
__hw_addr_add_multiple  prototype  include/linux/netdevice.h  2536  extern int __hw_addr_add_multiple(struct netdev_hw_addr_list *to_list,struct netdev_hw_addr_list *from_list,int addr_len, unsigned char addr_type);
__hw_addr_del_multiple  prototype  include/linux/netdevice.h  2539  extern void __hw_addr_del_multiple(struct netdev_hw_addr_list *to_list,struct netdev_hw_addr_list *from_list,int addr_len, unsigned char addr_type);
__hw_addr_sync  prototype  include/linux/netdevice.h  2542  extern int __hw_addr_sync(struct netdev_hw_addr_list *to_list,struct netdev_hw_addr_list *from_list,int addr_len);
__hw_addr_unsync  prototype  include/linux/netdevice.h  2545  extern void __hw_addr_unsync(struct netdev_hw_addr_list *to_list,struct netdev_hw_addr_list *from_list,int addr_len);
__hw_addr_flush  prototype  include/linux/netdevice.h  2548  extern void __hw_addr_flush(struct netdev_hw_addr_list *list);
__hw_addr_init  prototype  include/linux/netdevice.h  2549  extern void __hw_addr_init(struct netdev_hw_addr_list *list);
dev_addr_add  prototype  include/linux/netdevice.h  2552  extern int dev_addr_add(struct net_device *dev,unsigned char *addr,unsigned char addr_type);
dev_addr_del  prototype  include/linux/netdevice.h  2554  extern int dev_addr_del(struct net_device *dev,unsigned char *addr,unsigned char addr_type);
dev_addr_add_multiple  prototype  include/linux/netdevice.h  2556  extern int dev_addr_add_multiple(struct net_device *to_dev,struct net_device *from_dev,unsigned char addr_type);
dev_addr_del_multiple  prototype  include/linux/netdevice.h  2559  extern int dev_addr_del_multiple(struct net_device *to_dev,struct net_device *from_dev,unsigned char addr_type);
dev_addr_flush  prototype  include/linux/netdevice.h  2562  extern void dev_addr_flush(struct net_device *dev);
dev_addr_init  prototype  include/linux/netdevice.h  2563  extern int dev_addr_init(struct net_device *dev);
dev_uc_add  prototype  include/linux/netdevice.h  2566  extern int dev_uc_add(struct net_device *dev,unsigned char *addr);
dev_uc_add_excl  prototype  include/linux/netdevice.h  2567  extern int dev_uc_add_excl(struct net_device *dev,unsigned char *addr);
dev_uc_del  prototype  include/linux/netdevice.h  2568  extern int dev_uc_del(struct net_device *dev,unsigned char *addr);
dev_uc_sync  prototype  include/linux/netdevice.h  2569  extern int dev_uc_sync(struct net_device *to,struct net_device *from);
dev_uc_unsync  prototype  include/linux/netdevice.h  2570  extern void dev_uc_unsync(struct net_device *to,struct net_device *from);
dev_uc_flush  prototype  include/linux/netdevice.h  2571  extern void dev_uc_flush(struct net_device *dev);
dev_uc_init  prototype  include/linux/netdevice.h  2572  extern void dev_uc_init(struct net_device *dev);
dev_mc_add  prototype  include/linux/netdevice.h  2575  extern int dev_mc_add(struct net_device *dev,unsigned char *addr);
dev_mc_add_global  prototype  include/linux/netdevice.h  2576  extern int dev_mc_add_global(struct net_device *dev,unsigned char *addr);
dev_mc_add_excl  prototype  include/linux/netdevice.h  2577  extern int dev_mc_add_excl(struct net_device *dev,unsigned char *addr);
dev_mc_del  prototype  include/linux/netdevice.h  2578  extern int dev_mc_del(struct net_device *dev,unsigned char *addr);
dev_mc_del_global  prototype  include/linux/netdevice.h  2579  extern int dev_mc_del_global(struct net_device *dev,unsigned char *addr);
dev_mc_sync  prototype  include/linux/netdevice.h  2580  extern int dev_mc_sync(struct net_device *to,struct net_device *from);
dev_mc_unsync  prototype  include/linux/netdevice.h  2581  extern void dev_mc_unsync(struct net_device *to,struct net_device *from);
dev_mc_flush  prototype  include/linux/netdevice.h  2582  extern void dev_mc_flush(struct net_device *dev);
dev_mc_init  prototype  include/linux/netdevice.h  2583  extern void dev_mc_init(struct net_device *dev);
dev_set_rx_mode  prototype  include/linux/netdevice.h  2586  extern void dev_set_rx_mode(struct net_device *dev);
__dev_set_rx_mode  prototype  include/linux/netdevice.h  2587  extern void __dev_set_rx_mode(struct net_device *dev);
dev_set_promiscuity  prototype  include/linux/netdevice.h  2588  extern int dev_set_promiscuity(struct net_device *dev,int inc);
dev_set_allmulti  prototype  include/linux/netdevice.h  2589  extern int dev_set_allmulti(struct net_device *dev,int inc);
netdev_state_change  prototype  include/linux/netdevice.h  2590  extern void netdev_state_change(struct net_device *dev);
netdev_bonding_change  prototype  include/linux/netdevice.h  2591  extern int netdev_bonding_change(struct net_device *dev,unsigned long event);
netdev_features_change  prototype  include/linux/netdevice.h  2593  extern void netdev_features_change(struct net_device *dev);
dev_load  prototype  include/linux/netdevice.h  2595  extern void dev_load(struct net *net,const char *name);
dev_mcast_init  prototype  include/linux/netdevice.h  2596  extern void dev_mcast_init(void);
dev_get_stats  prototype  include/linux/netdevice.h  2597  extern struct rtnl_link_stats64 *dev_get_stats(struct net_device *dev,struct rtnl_link_stats64 *storage);
netdev_stats_to_stats64  prototype  include/linux/netdevice.h  2599  extern void netdev_stats_to_stats64(struct rtnl_link_stats64 *stats64,const struct net_device_stats *netdev_stats);
netdev_set_master  prototype  include/linux/netdevice.h  2606  extern int netdev_set_master(struct net_device *dev,struct net_device *master);
netdev_set_bond_master  prototype  include/linux/netdevice.h  2607  extern int netdev_set_bond_master(struct net_device *dev,struct net_device *master);
skb_checksum_help  prototype  include/linux/netdevice.h  2609  extern int skb_checksum_help(struct sk_buff *skb);
skb_gso_segment  prototype  include/linux/netdevice.h  2610  extern struct sk_buff *skb_gso_segment(struct sk_buff *skb,netdev_features_t features);
netdev_rx_csum_fault  function  include/linux/netdevice.h  2615  static inline void netdev_rx_csum_fault(struct net_device *dev)
net_enable_timestamp  prototype  include/linux/netdevice.h  2620  extern void net_enable_timestamp(void);
net_disable_timestamp  prototype  include/linux/netdevice.h  2621  extern void net_disable_timestamp(void);
dev_seq_start  prototype  include/linux/netdevice.h  2624  extern void *dev_seq_start(struct seq_file *seq,loff_t *pos);
dev_seq_next  prototype  include/linux/netdevice.h  2625  extern void *dev_seq_next(struct seq_file *seq,void *v,loff_t *pos);
dev_seq_stop  prototype  include/linux/netdevice.h  2626  extern void dev_seq_stop(struct seq_file *seq,void *v);
netdev_class_create_file  prototype  include/linux/netdevice.h  2629  extern int netdev_class_create_file(struct class_attribute *class_attr);
netdev_class_remove_file  prototype  include/linux/netdevice.h  2630  extern void netdev_class_remove_file(struct class_attribute *class_attr);
netdev_drivername  prototype  include/linux/netdevice.h  2634  extern const char *netdev_drivername(const struct net_device *dev);
linkwatch_run_queue  prototype  include/linux/netdevice.h  2636  extern void linkwatch_run_queue(void);
netdev_get_wanted_features  function  include/linux/netdevice.h  2638  static inline netdev_features_t netdev_get_wanted_features(
netdev_increment_features  prototype  include/linux/netdevice.h  2643  netdev_features_t netdev_increment_features(netdev_features_t all,netdev_features_t one, netdev_features_t mask);
__netdev_update_features  prototype  include/linux/netdevice.h  2645  int __netdev_update_features(struct net_device *dev);
netdev_update_features  prototype  include/linux/netdevice.h  2646  void netdev_update_features(struct net_device *dev);
netdev_change_features  prototype  include/linux/netdevice.h  2647  void netdev_change_features(struct net_device *dev);
netif_stacked_transfer_operstate  prototype  include/linux/netdevice.h  2649  void netif_stacked_transfer_operstate(const struct net_device *rootdev,struct net_device *dev);
netif_skb_features  prototype  include/linux/netdevice.h  2652  netdev_features_t netif_skb_features(struct sk_buff *skb);
net_gso_ok  function  include/linux/netdevice.h  2654  static inline bool net_gso_ok(netdev_features_t features,int gso_type)
skb_gso_ok  function  include/linux/netdevice.h  2669  static inline bool skb_gso_ok(struct sk_buff *skb,netdev_features_t features)
netif_needs_gso  function  include/linux/netdevice.h  2675  static inline bool netif_needs_gso(struct sk_buff *skb,netdev_features_t features)
netif_set_gso_max_size  function  include/linux/netdevice.h  2683  static inline void netif_set_gso_max_size(struct net_device *dev,unsigned int size)
netif_is_bond_slave  function  include/linux/netdevice.h  2689  static inline bool netif_is_bond_slave(struct net_device *dev)
netif_supports_nofcs  function  include/linux/netdevice.h  2694  static inline bool netif_supports_nofcs(struct net_device *dev)
netdev_name  function  include/linux/netdevice.h  2705  static inline const char *netdev_name(const struct net_device *dev)
__netdev_printk  prototype  include/linux/netdevice.h  2712  extern int __netdev_printk(const char *level,const struct net_device *dev,struct va_format *vaf);
netdev_printk  prototype  include/linux/netdevice.h  2716  int netdev_printk(const char *level,const struct net_device *dev,const char *format, ...);
netdev_emerg  prototype  include/linux/netdevice.h  2719  int netdev_emerg(const struct net_device *dev,const char *format,...);
netdev_alert  prototype  include/linux/netdevice.h  2721  int netdev_alert(const struct net_device *dev,const char *format,...);
netdev_crit  prototype  include/linux/netdevice.h  2723  int netdev_crit(const struct net_device *dev,const char *format,...);
netdev_err  prototype  include/linux/netdevice.h  2725  int netdev_err(const struct net_device *dev,const char *format,...);
netdev_warn  prototype  include/linux/netdevice.h  2727  int netdev_warn(const struct net_device *dev,const char *format,...);
netdev_notice  prototype  include/linux/netdevice.h  2729  int netdev_notice(const struct net_device *dev,const char *format,...);
netdev_info  prototype  include/linux/netdevice.h  2731  int netdev_info(const struct net_device *dev,const char *format,...);
MODULE_ALIAS_NETDEV  macro  include/linux/netdevice.h  2733  #define MODULE_ALIAS_NETDEV(device) MODULE_ALIAS("netdev-" device)
netdev_dbg  macro  include/linux/netdevice.h  2745  #define netdev_dbg(__dev,format,args...) ({ if (0) netdev_printk(KERN_DEBUG, __dev, format, ##args); 0; })
netdev_vdbg  macro  include/linux/netdevice.h  2757  #define netdev_vdbg(dev,format,args...) ({ if (0) netdev_printk(KERN_DEBUG, dev, format, ##args); 0; })
netdev_WARN  macro  include/linux/netdevice.h  2770  #define netdev_WARN(dev,format,args...) WARN(1, "netdevice: %s\n" format, netdev_name(dev), ##args);
netif_printk  macro  include/linux/netdevice.h  2775  #define netif_printk(priv,type,level,dev,fmt,args...) do { if (netif_msg_##type(priv)) netdev_printk(level, (dev), fmt, ##args); } while (0)
netif_level  macro  include/linux/netdevice.h  2781  #define netif_level(level,priv,type,dev,fmt,args...) do { if (netif_msg_##type(priv)) netdev_##level(dev, fmt, ##args); } while (0)
netif_emerg  macro  include/linux/netdevice.h  2787  #define netif_emerg(priv,type,dev,fmt,args...) netif_level(emerg, priv, type, dev, fmt, ##args)
netif_alert  macro  include/linux/netdevice.h  2789  #define netif_alert(priv,type,dev,fmt,args...) netif_level(alert, priv, type, dev, fmt, ##args)
netif_crit  macro  include/linux/netdevice.h  2791  #define netif_crit(priv,type,dev,fmt,args...) netif_level(crit, priv, type, dev, fmt, ##args)
netif_err  macro  include/linux/netdevice.h  2793  #define netif_err(priv,type,dev,fmt,args...) netif_level(err, priv, type, dev, fmt, ##args)
netif_warn  macro  include/linux/netdevice.h  2795  #define netif_warn(priv,type,dev,fmt,args...) netif_level(warn, priv, type, dev, fmt, ##args)
netif_notice  macro  include/linux/netdevice.h  2797  #define netif_notice(priv,type,dev,fmt,args...) netif_level(notice, priv, type, dev, fmt, ##args)
netif_info  macro  include/linux/netdevice.h  2799  #define netif_info(priv,type,dev,fmt,args...) netif_level(info, priv, type, dev, fmt, ##args)
netif_dbg  macro  include/linux/netdevice.h  2812  #define netif_dbg(priv,type,dev,format,args...) ({ if (0) netif_printk(priv, type, KERN_DEBUG, dev, format, ##args); 0; })
netif_vdbg  macro  include/linux/netdevice.h  2823  #define netif_vdbg(priv,type,dev,format,args...) ({ if (0) netif_printk(priv, type, KERN_DEBUG, dev, format, ##args); 0; })
_LINUX_ETHERDEVICE_H  macro  include/linux/etherdevice.h  23  #define _LINUX_ETHERDEVICE_H
eth_type_trans  prototype  include/linux/etherdevice.h  31  extern __be16 eth_type_trans(struct sk_buff *skb,struct net_device *dev);
eth_header  prototype  include/linux/etherdevice.h  34  extern int eth_header(struct sk_buff *skb,struct net_device *dev,unsigned short type,const void *daddr, const void *saddr, unsigned len);
eth_rebuild_header  prototype  include/linux/etherdevice.h  37  extern int eth_rebuild_header(struct sk_buff *skb);
eth_header_parse  prototype  include/linux/if_ether.h  141  int eth_header_parse(const struct sk_buff *skb,unsigned char *haddr);
eth_header_cache  prototype  include/linux/etherdevice.h  39  extern int eth_header_cache(const struct neighbour *neigh,struct hh_cache *hh,__be16 type);
eth_header_cache_update  prototype  include/linux/etherdevice.h  40  extern void eth_header_cache_update(struct hh_cache *hh,const struct net_device *dev,const unsigned char *haddr);
eth_mac_addr  prototype  include/linux/etherdevice.h  43  extern int eth_mac_addr(struct net_device *dev,void *p);
eth_change_mtu  prototype  include/linux/etherdevice.h  44  extern int eth_change_mtu(struct net_device *dev,int new_mtu);
eth_validate_addr  prototype  include/linux/etherdevice.h  45  extern int eth_validate_addr(struct net_device *dev);
alloc_etherdev_mqs  prototype  include/linux/etherdevice.h  49  extern struct net_device *alloc_etherdev_mqs(int sizeof_priv,unsigned int txqs,unsigned int rxqs);
alloc_etherdev  macro  include/linux/etherdevice.h  51  #define alloc_etherdev(sizeof_priv) alloc_etherdev_mq(sizeof_priv,1)
alloc_etherdev_mq  macro  include/linux/etherdevice.h  52  #define alloc_etherdev_mq(sizeof_priv,count) alloc_etherdev_mqs(sizeof_priv,count,count)
is_zero_ether_addr  function  include/linux/etherdevice.h  60  static inline bool is_zero_ether_addr(const u8 *addr)
is_multicast_ether_addr  function  include/linux/etherdevice.h  72  static inline bool is_multicast_ether_addr(const u8 *addr)
is_local_ether_addr  function  include/linux/etherdevice.h  83  static inline bool is_local_ether_addr(const u8 *addr)
is_broadcast_ether_addr  function  include/linux/etherdevice.h  94  static inline bool is_broadcast_ether_addr(const u8 *addr)
is_unicast_ether_addr  function  include/linux/etherdevice.h  105  static inline bool is_unicast_ether_addr(const u8 *addr)
is_valid_ether_addr  function  include/linux/etherdevice.h  119  static inline bool is_valid_ether_addr(const u8 *addr)
random_ether_addr  function  include/linux/etherdevice.h  133  static inline void random_ether_addr(u8 *addr)
eth_hw_addr_random  function  include/linux/etherdevice.h  149  static inline void eth_hw_addr_random(struct net_device *dev)
compare_ether_addr  function  include/linux/etherdevice.h  163  static inline unsigned compare_ether_addr(const u8 *addr1,const u8 *addr2)
ether_addr_equal  function  include/linux/etherdevice.h  179  static inline bool ether_addr_equal(const u8 *addr1,const u8 *addr2)
zap_last_2bytes  function  include/linux/etherdevice.h  184  static inline unsigned long zap_last_2bytes(unsigned long value)
ether_addr_equal_64bits  function  include/linux/etherdevice.h  207  static inline bool ether_addr_equal_64bits(const u8 addr1[6+2],const u8 addr2[6+2])
is_etherdev_addr  function  include/linux/etherdevice.h  236  static inline bool is_etherdev_addr(const struct net_device *dev,const u8 addr[6 + 2])
compare_ether_header  function  include/linux/etherdevice.h  265  static inline unsigned long compare_ether_header(const void *a,const void *b)
_LINUX_IF_ETHER_H  macro  include/linux/if_ether.h  22  #define _LINUX_IF_ETHER_H
ETH_ALEN  macro  include/linux/if_ether.h  31  #define ETH_ALEN 6
ETH_HLEN  macro  include/linux/if_ether.h  32  #define ETH_HLEN 14
ETH_ZLEN  macro  include/linux/if_ether.h  33  #define ETH_ZLEN 60
ETH_DATA_LEN  macro  include/linux/if_ether.h  34  #define ETH_DATA_LEN 1500
ETH_FRAME_LEN  macro  include/linux/if_ether.h  35  #define ETH_FRAME_LEN 1514
ETH_FCS_LEN  macro  include/linux/if_ether.h  36  #define ETH_FCS_LEN 4
ETH_P_LOOP  macro  include/linux/if_ether.h  42  #define ETH_P_LOOP 0x0060
ETH_P_PUP  macro  include/linux/if_ether.h  43  #define ETH_P_PUP 0x0200
ETH_P_PUPAT  macro  include/linux/if_ether.h  44  #define ETH_P_PUPAT 0x0201
ETH_P_IP  macro  include/linux/if_ether.h  45  #define ETH_P_IP 0x0800
ETH_P_X25  macro  include/linux/if_ether.h  46  #define ETH_P_X25 0x0805
ETH_P_ARP  macro  include/linux/if_ether.h  47  #define ETH_P_ARP 0x0806
ETH_P_BPQ  macro  include/linux/if_ether.h  48  #define ETH_P_BPQ 0x08FF
ETH_P_IEEEPUP  macro  include/linux/if_ether.h  49  #define ETH_P_IEEEPUP 0x0a00
ETH_P_IEEEPUPAT  macro  include/linux/if_ether.h  50  #define ETH_P_IEEEPUPAT 0x0a01
ETH_P_DEC  macro  include/linux/if_ether.h  51  #define ETH_P_DEC 0x6000
ETH_P_DNA_DL  macro  include/linux/if_ether.h  52  #define ETH_P_DNA_DL 0x6001
ETH_P_DNA_RC  macro  include/linux/if_ether.h  53  #define ETH_P_DNA_RC 0x6002
ETH_P_DNA_RT  macro  include/linux/if_ether.h  54  #define ETH_P_DNA_RT 0x6003
ETH_P_LAT  macro  include/linux/if_ether.h  55  #define ETH_P_LAT 0x6004
ETH_P_DIAG  macro  include/linux/if_ether.h  56  #define ETH_P_DIAG 0x6005
ETH_P_CUST  macro  include/linux/if_ether.h  57  #define ETH_P_CUST 0x6006
ETH_P_SCA  macro  include/linux/if_ether.h  58  #define ETH_P_SCA 0x6007
ETH_P_TEB  macro  include/linux/if_ether.h  59  #define ETH_P_TEB 0x6558
ETH_P_RARP  macro  include/linux/if_ether.h  60  #define ETH_P_RARP 0x8035
ETH_P_ATALK  macro  include/linux/if_ether.h  61  #define ETH_P_ATALK 0x809B
ETH_P_AARP  macro  include/linux/if_ether.h  62  #define ETH_P_AARP 0x80F3
ETH_P_8021Q  macro  include/linux/if_ether.h  63  #define ETH_P_8021Q 0x8100
ETH_P_IPX  macro  include/linux/if_ether.h  64  #define ETH_P_IPX 0x8137
ETH_P_IPV6  macro  include/linux/if_ether.h  65  #define ETH_P_IPV6 0x86DD
ETH_P_PAUSE  macro  include/linux/if_ether.h  66  #define ETH_P_PAUSE 0x8808
ETH_P_SLOW  macro  include/linux/if_ether.h  67  #define ETH_P_SLOW 0x8809
ETH_P_WCCP  macro  include/linux/if_ether.h  68  #define ETH_P_WCCP 0x883E
ETH_P_PPP_DISC  macro  include/linux/if_ether.h  70  #define ETH_P_PPP_DISC 0x8863
ETH_P_PPP_SES  macro  include/linux/if_ether.h  71  #define ETH_P_PPP_SES 0x8864
ETH_P_MPLS_UC  macro  include/linux/if_ether.h  72  #define ETH_P_MPLS_UC 0x8847
ETH_P_MPLS_MC  macro  include/linux/if_ether.h  73  #define ETH_P_MPLS_MC 0x8848
ETH_P_ATMMPOA  macro  include/linux/if_ether.h  74  #define ETH_P_ATMMPOA 0x884c
ETH_P_LINK_CTL  macro  include/linux/if_ether.h  75  #define ETH_P_LINK_CTL 0x886c
ETH_P_ATMFATE  macro  include/linux/if_ether.h  76  #define ETH_P_ATMFATE 0x8884
ETH_P_PAE  macro  include/linux/if_ether.h  79  #define ETH_P_PAE 0x888E
ETH_P_AOE  macro  include/linux/if_ether.h  80  #define ETH_P_AOE 0x88A2
ETH_P_8021AD  macro  include/linux/if_ether.h  81  #define ETH_P_8021AD 0x88A8
ETH_P_802_EX1  macro  include/linux/if_ether.h  82  #define ETH_P_802_EX1 0x88B5
ETH_P_TIPC  macro  include/linux/if_ether.h  83  #define ETH_P_TIPC 0x88CA
ETH_P_8021AH  macro  include/linux/if_ether.h  84  #define ETH_P_8021AH 0x88E7
ETH_P_1588  macro  include/linux/if_ether.h  85  #define ETH_P_1588 0x88F7
ETH_P_FCOE  macro  include/linux/if_ether.h  86  #define ETH_P_FCOE 0x8906
ETH_P_TDLS  macro  include/linux/if_ether.h  87  #define ETH_P_TDLS 0x890D
ETH_P_FIP  macro  include/linux/if_ether.h  88  #define ETH_P_FIP 0x8914
ETH_P_QINQ1  macro  include/linux/if_ether.h  89  #define ETH_P_QINQ1 0x9100
ETH_P_QINQ2  macro  include/linux/if_ether.h  90  #define ETH_P_QINQ2 0x9200
ETH_P_QINQ3  macro  include/linux/if_ether.h  91  #define ETH_P_QINQ3 0x9300
ETH_P_EDSA  macro  include/linux/if_ether.h  92  #define ETH_P_EDSA 0xDADA
ETH_P_AF_IUCV  macro  include/linux/if_ether.h  93  #define ETH_P_AF_IUCV 0xFBFB
ETH_P_802_3  macro  include/linux/if_ether.h  99  #define ETH_P_802_3 0x0001
ETH_P_AX25  macro  include/linux/if_ether.h  100  #define ETH_P_AX25 0x0002
ETH_P_ALL  macro  include/linux/if_ether.h  101  #define ETH_P_ALL 0x0003
ETH_P_802_2  macro  include/linux/if_ether.h  102  #define ETH_P_802_2 0x0004
ETH_P_SNAP  macro  include/linux/if_ether.h  103  #define ETH_P_SNAP 0x0005
ETH_P_DDCMP  macro  include/linux/if_ether.h  104  #define ETH_P_DDCMP 0x0006
ETH_P_WAN_PPP  macro  include/linux/if_ether.h  105  #define ETH_P_WAN_PPP 0x0007
ETH_P_PPP_MP  macro  include/linux/if_ether.h  106  #define ETH_P_PPP_MP 0x0008
ETH_P_LOCALTALK  macro  include/linux/if_ether.h  107  #define ETH_P_LOCALTALK 0x0009
ETH_P_CAN  macro  include/linux/if_ether.h  108  #define ETH_P_CAN 0x000C
ETH_P_PPPTALK  macro  include/linux/if_ether.h  109  #define ETH_P_PPPTALK 0x0010
ETH_P_TR_802_2  macro  include/linux/if_ether.h  110  #define ETH_P_TR_802_2 0x0011
ETH_P_MOBITEX  macro  include/linux/if_ether.h  111  #define ETH_P_MOBITEX 0x0015
ETH_P_CONTROL  macro  include/linux/if_ether.h  112  #define ETH_P_CONTROL 0x0016
ETH_P_IRDA  macro  include/linux/if_ether.h  113  #define ETH_P_IRDA 0x0017
ETH_P_ECONET  macro  include/linux/if_ether.h  114  #define ETH_P_ECONET 0x0018
ETH_P_HDLC  macro  include/linux/if_ether.h  115  #define ETH_P_HDLC 0x0019
ETH_P_ARCNET  macro  include/linux/if_ether.h  116  #define ETH_P_ARCNET 0x001A
ETH_P_DSA  macro  include/linux/if_ether.h  117  #define ETH_P_DSA 0x001B
ETH_P_TRAILER  macro  include/linux/if_ether.h  118  #define ETH_P_TRAILER 0x001C
ETH_P_PHONET  macro  include/linux/if_ether.h  119  #define ETH_P_PHONET 0x00F5
ETH_P_IEEE802154  macro  include/linux/if_ether.h  120  #define ETH_P_IEEE802154 0x00F6
ETH_P_CAIF  macro  include/linux/if_ether.h  121  #define ETH_P_CAIF 0x00F7
ethhdr  struct  include/linux/if_ether.h  127  struct ethhdr { unsigned char h_dest[ETH_ALEN]; unsigned char h_source[ETH_ALEN]; __be16 h_proto; } __attribute__((packed));
eth_hdr  function  include/linux/if_ether.h  136  static inline struct ethhdr *eth_hdr(const struct sk_buff *skb)
mac_pton  prototype  include/linux/if_ether.h  143  int mac_pton(const char *s,u8 *mac);
sysfs_format_mac  prototype  include/linux/if_ether.h  144  extern ssize_t sysfs_format_mac(char *buf,const unsigned char *addr,int len);
_LINUX_SKBUFF_H  macro  include/linux/skbuff.h  15  #define _LINUX_SKBUFF_H
CHECKSUM_NONE  macro  include/linux/skbuff.h  37  #define CHECKSUM_NONE 0
CHECKSUM_UNNECESSARY  macro  include/linux/skbuff.h  38  #define CHECKSUM_UNNECESSARY 1
CHECKSUM_COMPLETE  macro  include/linux/skbuff.h  39  #define CHECKSUM_COMPLETE 2
CHECKSUM_PARTIAL  macro  include/linux/skbuff.h  40  #define CHECKSUM_PARTIAL 3
SKB_DATA_ALIGN  macro  include/linux/skbuff.h  42  #define SKB_DATA_ALIGN(X) (((X) + (SMP_CACHE_BYTES - 1)) & ~(SMP_CACHE_BYTES - 1))
SKB_WITH_OVERHEAD  macro  include/linux/skbuff.h  44  #define SKB_WITH_OVERHEAD(X) ((X) - SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
SKB_MAX_ORDER  macro  include/linux/skbuff.h  46  #define SKB_MAX_ORDER(X,ORDER) SKB_WITH_OVERHEAD((PAGE_SIZE << (ORDER)) - (X))
SKB_MAX_HEAD  macro  include/linux/skbuff.h  48  #define SKB_MAX_HEAD(X) (SKB_MAX_ORDER((X),0))
SKB_MAX_ALLOC  macro  include/linux/skbuff.h  49  #define SKB_MAX_ALLOC (SKB_MAX_ORDER(0,2))
SKB_TRUESIZE  macro  include/linux/skbuff.h  52  #define SKB_TRUESIZE(X) ((X) + SKB_DATA_ALIGN(sizeof(struct sk_buff)) + SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
nf_conntrack  struct  include/linux/skbuff.h  113  struct nf_conntrack { atomic_t use; };
nf_bridge_info  struct  include/linux/skbuff.h  119  struct nf_bridge_info { atomic_t use; unsigned int mask; struct net_device *physindev; struct net_device *physoutdev; unsigned long data[32 / sizeof(unsigned long)]; };
sk_buff_head  struct  include/linux/skbuff.h  128  struct sk_buff_head { struct sk_buff *next; struct sk_buff *prev; __u32 qlen; spinlock_t lock; };
MAX_SKB_FRAGS  macro  include/linux/skbuff.h  149  #define MAX_SKB_FRAGS (65536/PAGE_SIZE + 1)
skb_frag_struct  struct  include/linux/skbuff.h  154  struct skb_frag_struct { struct page *p; } page; __u32 page_offset; __u32 size; __u16 page_offset; __u16 size; };
skb_frag_size  function  include/linux/skbuff.h  167  static inline unsigned int skb_frag_size(const skb_frag_t *frag)
skb_frag_size_set  function  include/linux/skbuff.h  172  static inline void skb_frag_size_set(skb_frag_t *frag,unsigned int size)
skb_frag_size_add  function  include/linux/skbuff.h  177  static inline void skb_frag_size_add(skb_frag_t *frag,int delta)
skb_frag_size_sub  function  include/linux/skbuff.h  182  static inline void skb_frag_size_sub(skb_frag_t *frag,int delta)
HAVE_HW_TIME_STAMP  macro  include/linux/skbuff.h  187  #define HAVE_HW_TIME_STAMP
skb_shared_hwtstamps  struct  include/linux/skbuff.h  212  struct skb_shared_hwtstamps { ktime_t hwtstamp; ktime_t syststamp; };
ubuf_info  struct  include/linux/skbuff.h  241  struct ubuf_info { void (*callback)(struct ubuf_info *); void *ctx; unsigned long desc; };
skb_shared_info  struct  include/linux/skbuff.h  250  struct skb_shared_info { unsigned char nr_frags; __u8 tx_flags; unsigned short gso_size; unsigned short gso_segs; unsigned short gso_type; struct sk_buff *frag_list; struct skb_shared_hwtstamps hwtstamps; __be32 ip6_frag_id; atomic_t dataref; void * destructor_arg; skb_frag_t frags[MAX_SKB_FRAGS]; };
SKB_DATAREF_SHIFT  macro  include/linux/skbuff.h  285  #define SKB_DATAREF_SHIFT 16
SKB_DATAREF_MASK  macro  include/linux/skbuff.h  286  #define SKB_DATAREF_MASK ((1 << SKB_DATAREF_SHIFT) - 1)
NET_SKBUFF_DATA_USES_OFFSET  macro  include/linux/skbuff.h  311  #define NET_SKBUFF_DATA_USES_OFFSET 1
NET_SKBUFF_NF_DEFRAG_NEEDED  macro  include/linux/skbuff.h  322  #define NET_SKBUFF_NF_DEFRAG_NEEDED 1
sk_buff  struct  include/linux/skbuff.h  388  struct sk_buff { struct sk_buff *next; struct sk_buff *prev; ktime_t tstamp; struct sock *sk; struct net_device *dev; unsigned long _skb_refdst; struct sec_path *sp; unsigned int len,data_len; __u16 mac_len,hdr_len; union { hdr_len; union { __wsum csum; struct { __u16 csum_start; __u16 csum_offset; }; __u32 priority; kmemcheck_bitfield_begin(flags1); __u8 local_df:1,cloned:1,ip_summed:2,nohdr:1,nfctinfo:3; __u8 pkt_type:3,fclone:2,ipvs_property:1,peeked:1,nf_trace:1; kmemcheck_bitfield_end(flags1); __be16 protocol; void (*destructor)(struct sk_buff *skb); struct nf_conntrack *nfct; struct sk_buff *nfct_reasm; struct nf_bridge_info *nf_bridge; int skb_iif; __u32 rxhash; __u16 vlan_tci; __u16 tc_index; __u16 tc_verd; __u16 queue_mapping; kmemcheck_bitfield_begin(flags2); __u8 ndisc_nodetype:2; __u8 ooo_okay:1; __u8 l4_rxhash:1; __u8 wifi_acked_valid:1; __u8 wifi_acked:1; __u8 no_fcs:1; __u8 head_frag:1; kmemcheck_bitfield_end(flags2); dma_cookie_t dma_cookie; __u32 secmark; __u32 mark; __u32 dropcount; __u32 avail_size; }; sk_buff_data_t transport_header; sk_buff_data_t network_header; sk_buff_data_t mac_header; sk_buff_data_t tail; sk_buff_data_t end; unsigned char *head,*data; unsigned int truesize; atomic_t users; };
SKB_DST_NOREF  macro  include/linux/skbuff.h  509  #define SKB_DST_NOREF 1UL
SKB_DST_PTRMASK  macro  include/linux/skbuff.h  510  #define SKB_DST_PTRMASK ~(SKB_DST_NOREF)
skb_dst  function  include/linux/skbuff.h  518  static inline struct dst_entry *skb_dst(const struct sk_buff *skb)
skb_dst_set  function  include/linux/skbuff.h  537  static inline void skb_dst_set(struct sk_buff *skb,struct dst_entry *dst)
skb_dst_set_noref  prototype  include/linux/skbuff.h  542  extern void skb_dst_set_noref(struct sk_buff *skb,struct dst_entry *dst);
skb_dst_is_noref  function  include/linux/skbuff.h  548  static inline bool skb_dst_is_noref(const struct sk_buff *skb)
skb_rtable  function  include/linux/skbuff.h  553  static inline struct rtable *skb_rtable(const struct sk_buff *skb)
kfree_skb  prototype  include/linux/skbuff.h  558  extern void kfree_skb(struct sk_buff *skb);
consume_skb  prototype  include/linux/skbuff.h  559  extern void consume_skb(struct sk_buff *skb);
__kfree_skb  prototype  include/linux/skbuff.h  560  extern void __kfree_skb(struct sk_buff *skb);
kfree_skb_partial  prototype  include/linux/skbuff.h  563  extern void kfree_skb_partial(struct sk_buff *skb,bool head_stolen);
skb_try_coalesce  prototype  include/linux/skbuff.h  564  extern bool skb_try_coalesce(struct sk_buff *to,struct sk_buff *from,bool *fragstolen, int *delta_truesize);
__alloc_skb  prototype  include/linux/skbuff.h  567  extern struct sk_buff *__alloc_skb(unsigned int size,gfp_t priority, int fclone, int node);
build_skb  prototype  include/linux/skbuff.h  569  extern struct sk_buff *build_skb(void *data,unsigned int frag_size);
alloc_skb  function  include/linux/skbuff.h  570  static inline struct sk_buff *alloc_skb(unsigned int size,gfp_t priority)
alloc_skb_fclone  function  include/linux/skbuff.h  576  static inline struct sk_buff *alloc_skb_fclone(unsigned int size,gfp_t priority)
skb_recycle  prototype  include/linux/skbuff.h  582  extern void skb_recycle(struct sk_buff *skb);
skb_recycle_check  prototype  include/linux/skbuff.h  583  extern bool skb_recycle_check(struct sk_buff *skb,int skb_size);
skb_morph  prototype  include/linux/skbuff.h  585  extern struct sk_buff *skb_morph(struct sk_buff *dst,struct sk_buff *src);
skb_copy_ubufs  prototype  include/linux/skbuff.h  586  extern int skb_copy_ubufs(struct sk_buff *skb,gfp_t gfp_mask);
skb_clone  prototype  include/linux/skbuff.h  587  extern struct sk_buff *skb_clone(struct sk_buff *skb,gfp_t priority);
skb_copy  prototype  include/linux/skbuff.h  589  extern struct sk_buff *skb_copy(const struct sk_buff *skb,gfp_t priority);
__pskb_copy  prototype  include/linux/skbuff.h  591  extern struct sk_buff *__pskb_copy(struct sk_buff *skb,int headroom, gfp_t gfp_mask);
pskb_expand_head  prototype  include/linux/skbuff.h  594  extern int pskb_expand_head(struct sk_buff *skb,int nhead, int ntail,gfp_t gfp_mask);
skb_realloc_headroom  prototype  include/linux/skbuff.h  597  extern struct sk_buff *skb_realloc_headroom(struct sk_buff *skb,unsigned int headroom);
skb_copy_expand  prototype  include/linux/skbuff.h  599  extern struct sk_buff *skb_copy_expand(const struct sk_buff *skb,int newheadroom, int newtailroom,gfp_t priority);
skb_to_sgvec  prototype  include/linux/skbuff.h  602  extern int skb_to_sgvec(struct sk_buff *skb,struct scatterlist *sg, int offset,int len);
skb_cow_data  prototype  include/linux/skbuff.h  605  extern int skb_cow_data(struct sk_buff *skb,int tailbits,struct sk_buff **trailer);
skb_pad  prototype  include/linux/skbuff.h  607  extern int skb_pad(struct sk_buff *skb,int pad);
dev_kfree_skb  macro  include/linux/skbuff.h  608  #define dev_kfree_skb(a) consume_skb(a)
skb_append_datato_frags  prototype  include/linux/skbuff.h  610  extern int skb_append_datato_frags(struct sock *sk,struct sk_buff *skb,int getfrag(void *from, char *to, int offset,int len,int odd, struct sk_buff *skb),void *from, int length);
skb_seq_state  struct  include/linux/skbuff.h  615  struct skb_seq_state { __u32 lower_offset; __u32 upper_offset; __u32 frag_idx; __u32 stepped_offset; struct sk_buff *root_skb; struct sk_buff *cur_skb; __u8 *frag_data; };
skb_prepare_seq_read  prototype  include/linux/skbuff.h  625  extern void skb_prepare_seq_read(struct sk_buff *skb,unsigned int from, unsigned int to,struct skb_seq_state *st);
skb_seq_read  prototype  include/linux/skbuff.h  628  extern unsigned int skb_seq_read(unsigned int consumed,const u8 **data,struct skb_seq_state *st);
skb_abort_seq_read  prototype  include/linux/skbuff.h  630  extern void skb_abort_seq_read(struct skb_seq_state *st);
skb_find_text  prototype  include/linux/skbuff.h  632  extern unsigned int skb_find_text(struct sk_buff *skb,unsigned int from,unsigned int to, struct ts_config *config,struct ts_state *state);
__skb_get_rxhash  prototype  include/linux/skbuff.h  636  extern void __skb_get_rxhash(struct sk_buff *skb);
skb_get_rxhash  function  include/linux/skbuff.h  637  static inline __u32 skb_get_rxhash(struct sk_buff *skb)
skb_end_pointer  function  include/linux/skbuff.h  656  static inline unsigned char *skb_end_pointer(const struct sk_buff *skb)
skb_end_offset  function  include/linux/skbuff.h  661  static inline unsigned int skb_end_offset(const struct sk_buff *skb)
skb_shinfo  macro  include/linux/skbuff.h  668  #define skb_shinfo(SKB) ((struct skb_shared_info *)(skb_end_pointer(SKB)))
skb_hwtstamps  function  include/linux/skbuff.h  670  static inline struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
skb_queue_empty  function  include/linux/skbuff.h  681  static inline int skb_queue_empty(const struct sk_buff_head *list)
skb_queue_is_last  function  include/linux/skbuff.h  693  static inline bool skb_queue_is_last(const struct sk_buff_head *list,const struct sk_buff *skb)
skb_queue_is_first  function  include/linux/skbuff.h  706  static inline bool skb_queue_is_first(const struct sk_buff_head *list,const struct sk_buff *skb)
skb_queue_next  function  include/linux/skbuff.h  720  static inline struct sk_buff *skb_queue_next(const struct sk_buff_head *list,const struct sk_buff *skb)
skb_queue_prev  function  include/linux/skbuff.h  738  static inline struct sk_buff *skb_queue_prev(const struct sk_buff_head *list,const struct sk_buff *skb)
skb_get  function  include/linux/skbuff.h  755  static inline struct sk_buff *skb_get(struct sk_buff *skb)
skb_cloned  function  include/linux/skbuff.h  774  static inline int skb_cloned(const struct sk_buff *skb)
skb_header_cloned  function  include/linux/skbuff.h  787  static inline int skb_header_cloned(const struct sk_buff *skb)
skb_header_release  function  include/linux/skbuff.h  807  static inline void skb_header_release(struct sk_buff *skb)
skb_shared  function  include/linux/skbuff.h  821  static inline int skb_shared(const struct sk_buff *skb)
skb_share_check  function  include/linux/skbuff.h  839  static inline struct sk_buff *skb_share_check(struct sk_buff *skb,gfp_t pri)
skb_unshare  function  include/linux/skbuff.h  871  static inline struct sk_buff *skb_unshare(struct sk_buff *skb,gfp_t pri)
skb_peek  function  include/linux/skbuff.h  896  static inline struct sk_buff *skb_peek(const struct sk_buff_head *list_)
skb_peek_next  function  include/linux/skbuff.h  914  static inline struct sk_buff *skb_peek_next(struct sk_buff *skb,const struct sk_buff_head *list_)
skb_peek_tail  function  include/linux/skbuff.h  937  static inline struct sk_buff *skb_peek_tail(const struct sk_buff_head *list_)
skb_queue_len  function  include/linux/skbuff.h  953  static inline __u32 skb_queue_len(const struct sk_buff_head *list_)
__skb_queue_head_init  function  include/linux/skbuff.h  968  static inline void __skb_queue_head_init(struct sk_buff_head *list)
skb_queue_head_init  function  include/linux/skbuff.h  982  static inline void skb_queue_head_init(struct sk_buff_head *list)
skb_queue_head_init_class  function  include/linux/skbuff.h  988  static inline void skb_queue_head_init_class(struct sk_buff_head *list,struct lock_class_key *class)
skb_insert  prototype  include/linux/skbuff.h  1001  extern void skb_insert(struct sk_buff *old,struct sk_buff *newsk,struct sk_buff_head *list);
__skb_insert  function  include/linux/skbuff.h  1002  static inline void __skb_insert(struct sk_buff *newsk,struct sk_buff *prev, struct sk_buff *next,struct sk_buff_head *list)
__skb_queue_splice  function  include/linux/skbuff.h  1012  static inline void __skb_queue_splice(const struct sk_buff_head *list,struct sk_buff *prev,struct sk_buff *next)
skb_queue_splice  function  include/linux/skbuff.h  1031  static inline void skb_queue_splice(const struct sk_buff_head *list,struct sk_buff_head *head)
skb_queue_splice_init  function  include/linux/skbuff.h  1047  static inline void skb_queue_splice_init(struct sk_buff_head *list,struct sk_buff_head *head)
skb_queue_splice_tail  function  include/linux/skbuff.h  1062  static inline void skb_queue_splice_tail(const struct sk_buff_head *list,struct sk_buff_head *head)
skb_queue_splice_tail_init  function  include/linux/skbuff.h  1079  static inline void skb_queue_splice_tail_init(struct sk_buff_head *list,struct sk_buff_head *head)
__skb_queue_after  function  include/linux/skbuff.h  1100  static inline void __skb_queue_after(struct sk_buff_head *list,struct sk_buff *prev,struct sk_buff *newsk)
skb_append  prototype  include/linux/skbuff.h  1107  extern void skb_append(struct sk_buff *old,struct sk_buff *newsk,struct sk_buff_head *list);
__skb_queue_before  function  include/linux/skbuff.h  1110  static inline void __skb_queue_before(struct sk_buff_head *list,struct sk_buff *next,struct sk_buff *newsk)
skb_queue_head  prototype  include/linux/skbuff.h  1127  extern void skb_queue_head(struct sk_buff_head *list,struct sk_buff *newsk);
__skb_queue_head  function  include/linux/skbuff.h  1128  static inline void __skb_queue_head(struct sk_buff_head *list,struct sk_buff *newsk)
skb_queue_tail  prototype  include/linux/skbuff.h  1144  extern void skb_queue_tail(struct sk_buff_head *list,struct sk_buff *newsk);
__skb_queue_tail  function  include/linux/skbuff.h  1145  static inline void __skb_queue_tail(struct sk_buff_head *list,struct sk_buff *newsk)
skb_unlink  prototype  include/linux/skbuff.h  1155  extern void skb_unlink(struct sk_buff *skb,struct sk_buff_head *list);
__skb_unlink  function  include/linux/skbuff.h  1156  static inline void __skb_unlink(struct sk_buff *skb,struct sk_buff_head *list)
skb_dequeue  prototype  include/linux/skbuff.h  1176  extern struct sk_buff *skb_dequeue(struct sk_buff_head *list);
__skb_dequeue  function  include/linux/skbuff.h  1177  static inline struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
skb_dequeue_tail  prototype  include/linux/skbuff.h  1193  extern struct sk_buff *skb_dequeue_tail(struct sk_buff_head *list);
__skb_dequeue_tail  function  include/linux/skbuff.h  1194  static inline struct sk_buff *__skb_dequeue_tail(struct sk_buff_head *list)
skb_is_nonlinear  function  include/linux/skbuff.h  1203  static inline bool skb_is_nonlinear(const struct sk_buff *skb)
skb_headlen  function  include/linux/skbuff.h  1208  static inline unsigned int skb_headlen(const struct sk_buff *skb)
skb_pagelen  function  include/linux/skbuff.h  1213  static inline int skb_pagelen(const struct sk_buff *skb)
__skb_fill_page_desc  function  include/linux/skbuff.h  1235  static inline void __skb_fill_page_desc(struct sk_buff *skb,int i,struct page *page, int off, int size)
skb_fill_page_desc  function  include/linux/skbuff.h  1259  static inline void skb_fill_page_desc(struct sk_buff *skb,int i,struct page *page, int off, int size)
skb_add_rx_frag  prototype  include/linux/skbuff.h  1266  extern void skb_add_rx_frag(struct sk_buff *skb,int i,struct page *page,int off, int size, unsigned int truesize);
SKB_PAGE_ASSERT  macro  include/linux/skbuff.h  1269  #define SKB_PAGE_ASSERT(skb) BUG_ON(skb_shinfo(skb)->nr_frags)
SKB_FRAG_ASSERT  macro  include/linux/skbuff.h  1270  #define SKB_FRAG_ASSERT(skb) BUG_ON(skb_has_frag_list(skb))
SKB_LINEAR_ASSERT  macro  include/linux/skbuff.h  1271  #define SKB_LINEAR_ASSERT(skb) BUG_ON(skb_is_nonlinear(skb))
skb_tail_pointer  function  include/linux/skbuff.h  1290  static inline unsigned char *skb_tail_pointer(const struct sk_buff *skb)
skb_reset_tail_pointer  function  include/linux/skbuff.h  1295  static inline void skb_reset_tail_pointer(struct sk_buff *skb)
skb_set_tail_pointer  function  include/linux/skbuff.h  1300  static inline void skb_set_tail_pointer(struct sk_buff *skb,const int offset)
skb_put  prototype  include/linux/skbuff.h  1310  extern unsigned char *skb_put(struct sk_buff *skb,unsigned int len);
__skb_put  function  include/linux/skbuff.h  1311  static inline unsigned char *__skb_put(struct sk_buff *skb,unsigned int len)
skb_push  prototype  include/linux/skbuff.h  1320  extern unsigned char *skb_push(struct sk_buff *skb,unsigned int len);
__skb_push  function  include/linux/skbuff.h  1321  static inline unsigned char *__skb_push(struct sk_buff *skb,unsigned int len)
skb_pull  prototype  include/linux/skbuff.h  1328  extern unsigned char *skb_pull(struct sk_buff *skb,unsigned int len);
__skb_pull  function  include/linux/skbuff.h  1329  static inline unsigned char *__skb_pull(struct sk_buff *skb,unsigned int len)
skb_pull_inline  function  include/linux/skbuff.h  1336  static inline unsigned char *skb_pull_inline(struct sk_buff *skb,unsigned int len)
__pskb_pull_tail  prototype  include/linux/skbuff.h  1341  extern unsigned char *__pskb_pull_tail(struct sk_buff *skb,int delta);
__pskb_pull  function  include/linux/skbuff.h  1343  static inline unsigned char *__pskb_pull(struct sk_buff *skb,unsigned int len)
pskb_pull  function  include/linux/skbuff.h  1352  static inline unsigned char *pskb_pull(struct sk_buff *skb,unsigned int len)
pskb_may_pull  function  include/linux/skbuff.h  1357  static inline int pskb_may_pull(struct sk_buff *skb,unsigned int len)
skb_headroom  function  include/linux/skbuff.h  1372  static inline unsigned int skb_headroom(const struct sk_buff *skb)
skb_tailroom  function  include/linux/skbuff.h  1383  static inline int skb_tailroom(const struct sk_buff *skb)
skb_availroom  function  include/linux/skbuff.h  1395  static inline int skb_availroom(const struct sk_buff *skb)
skb_reserve  function  include/linux/skbuff.h  1408  static inline void skb_reserve(struct sk_buff *skb,int len)
skb_reset_mac_len  function  include/linux/skbuff.h  1414  static inline void skb_reset_mac_len(struct sk_buff *skb)
skb_transport_header  function  include/linux/skbuff.h  1476  static inline unsigned char *skb_transport_header(const struct sk_buff *skb)
skb_reset_transport_header  function  include/linux/skbuff.h  1481  static inline void skb_reset_transport_header(struct sk_buff *skb)
skb_set_transport_header  function  include/linux/skbuff.h  1486  static inline void skb_set_transport_header(struct sk_buff *skb,const int offset)
skb_network_header  function  include/linux/skbuff.h  1492  static inline unsigned char *skb_network_header(const struct sk_buff *skb)
skb_reset_network_header  function  include/linux/skbuff.h  1497  static inline void skb_reset_network_header(struct sk_buff *skb)
skb_set_network_header  function  include/linux/skbuff.h  1502  static inline void skb_set_network_header(struct sk_buff *skb,const int offset)
skb_mac_header  function  include/linux/skbuff.h  1507  static inline unsigned char *skb_mac_header(const struct sk_buff *skb)
skb_mac_header_was_set  function  include/linux/skbuff.h  1512  static inline int skb_mac_header_was_set(const struct sk_buff *skb)
skb_reset_mac_header  function  include/linux/skbuff.h  1517  static inline void skb_reset_mac_header(struct sk_buff *skb)
skb_set_mac_header  function  include/linux/skbuff.h  1522  static inline void skb_set_mac_header(struct sk_buff *skb,const int offset)
skb_mac_header_rebuild  function  include/linux/skbuff.h  1528  static inline void skb_mac_header_rebuild(struct sk_buff *skb)
skb_checksum_start_offset  function  include/linux/skbuff.h  1538  static inline int skb_checksum_start_offset(const struct sk_buff *skb)
skb_transport_offset  function  include/linux/skbuff.h  1543  static inline int skb_transport_offset(const struct sk_buff *skb)
skb_network_header_len  function  include/linux/skbuff.h  1548  static inline u32 skb_network_header_len(const struct sk_buff *skb)
skb_network_offset  function  include/linux/skbuff.h  1553  static inline int skb_network_offset(const struct sk_buff *skb)
pskb_network_may_pull  function  include/linux/skbuff.h  1558  static inline int pskb_network_may_pull(struct sk_buff *skb,unsigned int len)
NET_IP_ALIGN  macro  arch/x86/include/asm/processor.h  40  #define NET_IP_ALIGN 0
NET_SKB_PAD  macro  include/linux/skbuff.h  1608  #define NET_SKB_PAD max(32,L1_CACHE_BYTES)
___pskb_trim  prototype  include/linux/skbuff.h  1611  extern int ___pskb_trim(struct sk_buff *skb,unsigned int len);
__skb_trim  function  include/linux/skbuff.h  1613  static inline void __skb_trim(struct sk_buff *skb,unsigned int len)
skb_trim  prototype  include/linux/skbuff.h  1623  extern void skb_trim(struct sk_buff *skb,unsigned int len);
__pskb_trim  function  include/linux/skbuff.h  1625  static inline int __pskb_trim(struct sk_buff *skb,unsigned int len)
pskb_trim  function  include/linux/skbuff.h  1633  static inline int pskb_trim(struct sk_buff *skb,unsigned int len)
pskb_trim_unique  function  include/linux/skbuff.h  1647  static inline void pskb_trim_unique(struct sk_buff *skb,unsigned int len)
skb_orphan  function  include/linux/skbuff.h  1661  static inline void skb_orphan(struct sk_buff *skb)
skb_queue_purge  prototype  include/linux/skbuff.h  1677  extern void skb_queue_purge(struct sk_buff_head *list);
__skb_queue_purge  function  include/linux/skbuff.h  1678  static inline void __skb_queue_purge(struct sk_buff_head *list)
netdev_alloc_frag  prototype  include/linux/skbuff.h  1685  extern void *netdev_alloc_frag(unsigned int fragsz);
__netdev_alloc_skb  prototype  include/linux/skbuff.h  1687  extern struct sk_buff *__netdev_alloc_skb(struct net_device *dev,unsigned int length,gfp_t gfp_mask);
netdev_alloc_skb  function  include/linux/skbuff.h  1704  static inline struct sk_buff *netdev_alloc_skb(struct net_device *dev,unsigned int length)
__dev_alloc_skb  function  include/linux/skbuff.h  1711  static inline struct sk_buff *__dev_alloc_skb(unsigned int length,gfp_t gfp_mask)
dev_alloc_skb  function  include/linux/skbuff.h  1718  static inline struct sk_buff *dev_alloc_skb(unsigned int length)
__netdev_alloc_skb_ip_align  function  include/linux/skbuff.h  1724  static inline struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev,unsigned int length, gfp_t gfp)
netdev_alloc_skb_ip_align  function  include/linux/skbuff.h  1734  static inline struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev,unsigned int length)
skb_frag_page  function  include/linux/skbuff.h  1746  static inline struct page *skb_frag_page(const skb_frag_t *frag)
__skb_frag_ref  function  include/linux/skbuff.h  1757  static inline void __skb_frag_ref(skb_frag_t *frag)
skb_frag_ref  function  include/linux/skbuff.h  1769  static inline void skb_frag_ref(struct sk_buff *skb,int f)
__skb_frag_unref  function  include/linux/skbuff.h  1780  static inline void __skb_frag_unref(skb_frag_t *frag)
skb_frag_unref  function  include/linux/skbuff.h  1792  static inline void skb_frag_unref(struct sk_buff *skb,int f)
skb_frag_address  function  include/linux/skbuff.h  1804  static inline void *skb_frag_address(const skb_frag_t *frag)
skb_frag_address_safe  function  include/linux/skbuff.h  1816  static inline void *skb_frag_address_safe(const skb_frag_t *frag)
__skb_frag_set_page  function  include/linux/skbuff.h  1832  static inline void __skb_frag_set_page(skb_frag_t *frag,struct page *page)
skb_frag_set_page  function  include/linux/skbuff.h  1845  static inline void skb_frag_set_page(struct sk_buff *skb,int f,struct page *page)
skb_frag_dma_map  function  include/linux/skbuff.h  1862  static inline dma_addr_t skb_frag_dma_map(struct device *dev,const skb_frag_t *frag,size_t offset, size_t size,enum dma_data_direction dir)
pskb_copy  function  include/linux/skbuff.h  1871  static inline struct sk_buff *pskb_copy(struct sk_buff *skb,gfp_t gfp_mask)
skb_clone_writable  function  include/linux/skbuff.h  1885  static inline int skb_clone_writable(const struct sk_buff *skb,unsigned int len)
__skb_cow  function  include/linux/skbuff.h  1891  static inline int __skb_cow(struct sk_buff *skb,unsigned int headroom,int cloned)
skb_cow  function  include/linux/skbuff.h  1917  static inline int skb_cow(struct sk_buff *skb,unsigned int headroom)
skb_cow_head  function  include/linux/skbuff.h  1932  static inline int skb_cow_head(struct sk_buff *skb,unsigned int headroom)
skb_padto  function  include/linux/skbuff.h  1948  static inline int skb_padto(struct sk_buff *skb,unsigned int len)
skb_add_data  function  include/linux/skbuff.h  1956  static inline int skb_add_data(struct sk_buff *skb,char __user *from, int copy)
skb_can_coalesce  function  include/linux/skbuff.h  1976  static inline bool skb_can_coalesce(struct sk_buff *skb,int i,const struct page *page, int off)
__skb_linearize  function  include/linux/skbuff.h  1988  static inline int __skb_linearize(struct sk_buff *skb)
skb_linearize  function  include/linux/skbuff.h  2000  static inline int skb_linearize(struct sk_buff *skb)
skb_linearize_cow  function  include/linux/skbuff.h  2012  static inline int skb_linearize_cow(struct sk_buff *skb)
skb_postpull_rcsum  function  include/linux/skbuff.h  2029  static inline void skb_postpull_rcsum(struct sk_buff *skb,const void *start, unsigned int len)
skb_pull_rcsum  prototype  include/linux/skbuff.h  2036  unsigned char *skb_pull_rcsum(struct sk_buff *skb,unsigned int len);
pskb_trim_rcsum  function  include/linux/skbuff.h  2047  static inline int pskb_trim_rcsum(struct sk_buff *skb,unsigned int len)
skb_queue_walk  macro  include/linux/skbuff.h  2056  #define skb_queue_walk(queue,skb) for (skb = (queue)->next; skb != (struct sk_buff *)(queue); skb = skb->next)
skb_queue_walk_safe  macro  include/linux/skbuff.h  2061  #define skb_queue_walk_safe(queue,skb,tmp) for (skb = (queue)->next, tmp = skb->next; skb != (struct sk_buff *)(queue); skb = tmp, tmp = skb->next)
skb_queue_walk_from  macro  include/linux/skbuff.h  2066  #define skb_queue_walk_from(queue,skb) for (; skb != (struct sk_buff *)(queue); skb = skb->next)
skb_queue_walk_from_safe  macro  include/linux/skbuff.h  2070  #define skb_queue_walk_from_safe(queue,skb,tmp) for (tmp = skb->next; skb != (struct sk_buff *)(queue); skb = tmp, tmp = skb->next)
skb_queue_reverse_walk  macro  include/linux/skbuff.h  2075  #define skb_queue_reverse_walk(queue,skb) for (skb = (queue)->prev; skb != (struct sk_buff *)(queue); skb = skb->prev)
skb_queue_reverse_walk_safe  macro  include/linux/skbuff.h  2080  #define skb_queue_reverse_walk_safe(queue,skb,tmp) for (skb = (queue)->prev, tmp = skb->prev; skb != (struct sk_buff *)(queue); skb = tmp, tmp = skb->prev)
skb_queue_reverse_walk_from_safe  macro  include/linux/skbuff.h  2085  #define skb_queue_reverse_walk_from_safe(queue,skb,tmp) for (tmp = skb->prev; skb != (struct sk_buff *)(queue); skb = tmp, tmp = skb->prev)
skb_has_frag_list  function  include/linux/skbuff.h  2090  static inline bool skb_has_frag_list(const struct sk_buff *skb)
skb_frag_list_init  function  include/linux/skbuff.h  2095  static inline void skb_frag_list_init(struct sk_buff *skb)
skb_frag_add_head  function  include/linux/skbuff.h  2100  static inline void skb_frag_add_head(struct sk_buff *skb,struct sk_buff *frag)
skb_walk_frags  macro  include/linux/skbuff.h  2106  #define skb_walk_frags(skb,iter) for (iter = skb_shinfo(skb)->frag_list; iter; iter = iter->next)
__skb_recv_datagram  prototype  include/linux/skbuff.h  2109  extern struct sk_buff *__skb_recv_datagram(struct sock *sk,unsigned flags,int *peeked, int *off, int *err);
skb_recv_datagram  prototype  include/linux/skbuff.h  2111  extern struct sk_buff *skb_recv_datagram(struct sock *sk,unsigned flags,int noblock, int *err);
datagram_poll  prototype  include/linux/skbuff.h  2113  extern unsigned int datagram_poll(struct file *file,struct socket *sock,struct poll_table_struct *wait);
skb_copy_datagram_iovec  prototype  include/linux/skbuff.h  2115  extern int skb_copy_datagram_iovec(const struct sk_buff *from,int offset, struct iovec *to,int size);
skb_copy_and_csum_datagram_iovec  prototype  include/linux/skbuff.h  2118  extern int skb_copy_and_csum_datagram_iovec(struct sk_buff *skb,int hlen,struct iovec *iov);
skb_copy_datagram_from_iovec  prototype  include/linux/skbuff.h  2121  extern int skb_copy_datagram_from_iovec(struct sk_buff *skb,int offset,const struct iovec *from,int from_offset,int len);
skb_copy_datagram_const_iovec  prototype  include/linux/skbuff.h  2126  extern int skb_copy_datagram_const_iovec(const struct sk_buff *from,int offset,const struct iovec *to,int to_offset,int size);
skb_free_datagram  prototype  include/linux/skbuff.h  2131  extern void skb_free_datagram(struct sock *sk,struct sk_buff *skb);
skb_free_datagram_locked  prototype  include/linux/skbuff.h  2132  extern void skb_free_datagram_locked(struct sock *sk,struct sk_buff *skb);
skb_kill_datagram  prototype  include/linux/skbuff.h  2134  extern int skb_kill_datagram(struct sock *sk,struct sk_buff *skb,unsigned int flags);
skb_checksum  prototype  include/linux/skbuff.h  2136  extern __wsum skb_checksum(const struct sk_buff *skb,int offset,int len, __wsum csum);
skb_copy_bits  prototype  include/linux/skbuff.h  2138  extern int skb_copy_bits(const struct sk_buff *skb,int offset,void *to, int len);
skb_store_bits  prototype  include/linux/skbuff.h  2140  extern int skb_store_bits(struct sk_buff *skb,int offset,const void *from, int len);
skb_copy_and_csum_bits  prototype  include/linux/skbuff.h  2142  extern __wsum skb_copy_and_csum_bits(const struct sk_buff *skb,int offset, u8 *to, int len,__wsum csum);
skb_splice_bits  prototype  include/linux/skbuff.h  2145  extern int skb_splice_bits(struct sk_buff *skb,unsigned int offset,struct pipe_inode_info *pipe,unsigned int len,unsigned int flags);
skb_copy_and_csum_dev  prototype  include/linux/skbuff.h  2150  extern void skb_copy_and_csum_dev(const struct sk_buff *skb,u8 *to);
skb_split  prototype  include/linux/skbuff.h  2151  extern void skb_split(struct sk_buff *skb,struct sk_buff *skb1, const u32 len);
skb_shift  prototype  include/linux/skbuff.h  2153  extern int skb_shift(struct sk_buff *tgt,struct sk_buff *skb,int shiftlen);
skb_segment  prototype  include/linux/skbuff.h  2156  extern struct sk_buff *skb_segment(struct sk_buff *skb,netdev_features_t features);
skb_header_pointer  function  include/linux/skbuff.h  2159  static inline void *skb_header_pointer(const struct sk_buff *skb,int offset,int len, void *buffer)
skb_copy_from_linear_data  function  include/linux/skbuff.h  2173  static inline void skb_copy_from_linear_data(const struct sk_buff *skb,void *to,const unsigned int len)
skb_copy_from_linear_data_offset  function  include/linux/skbuff.h  2180  static inline void skb_copy_from_linear_data_offset(const struct sk_buff *skb,const int offset, void *to,const unsigned int len)
skb_copy_to_linear_data  function  include/linux/skbuff.h  2187  static inline void skb_copy_to_linear_data(struct sk_buff *skb,const void *from,const unsigned int len)
skb_copy_to_linear_data_offset  function  include/linux/skbuff.h  2194  static inline void skb_copy_to_linear_data_offset(struct sk_buff *skb,const int offset,const void *from,const unsigned int len)
skb_init  prototype  include/linux/skbuff.h  2202  extern void skb_init(void);
skb_get_ktime  function  include/linux/skbuff.h  2204  static inline ktime_t skb_get_ktime(const struct sk_buff *skb)
skb_get_timestamp  function  include/linux/skbuff.h  2218  static inline void skb_get_timestamp(const struct sk_buff *skb,struct timeval *stamp)
skb_get_timestampns  function  include/linux/skbuff.h  2224  static inline void skb_get_timestampns(const struct sk_buff *skb,struct timespec *stamp)
__net_timestamp  function  include/linux/skbuff.h  2230  static inline void __net_timestamp(struct sk_buff *skb)
net_timedelta  function  include/linux/skbuff.h  2235  static inline ktime_t net_timedelta(ktime_t t)
net_invalid_timestamp  function  include/linux/skbuff.h  2240  static inline ktime_t net_invalid_timestamp(void)
skb_timestamping_init  prototype  include/linux/skbuff.h  2245  extern void skb_timestamping_init(void);
skb_clone_tx_timestamp  function  include/linux/skbuff.h  2254  static inline void skb_clone_tx_timestamp(struct sk_buff *skb)
skb_defer_rx_timestamp  function  include/linux/skbuff.h  2258  static inline bool skb_defer_rx_timestamp(struct sk_buff *skb)
skb_complete_tx_timestamp  prototype  include/linux/skbuff.h  2277  void skb_complete_tx_timestamp(struct sk_buff *skb,struct skb_shared_hwtstamps *hwtstamps);
skb_tstamp_tx  prototype  include/linux/skbuff.h  2291  extern void skb_tstamp_tx(struct sk_buff *orig_skb,struct skb_shared_hwtstamps *hwtstamps);
sw_tx_timestamp  function  include/linux/skbuff.h  2294  static inline void sw_tx_timestamp(struct sk_buff *skb)
skb_tx_timestamp  function  include/linux/skbuff.h  2309  static inline void skb_tx_timestamp(struct sk_buff *skb)
skb_complete_wifi_ack  prototype  include/linux/skbuff.h  2322  void skb_complete_wifi_ack(struct sk_buff *skb,bool acked);
__skb_checksum_complete_head  prototype  include/linux/skbuff.h  2324  extern __sum16 __skb_checksum_complete_head(struct sk_buff *skb,int len);
__skb_checksum_complete  prototype  include/linux/skbuff.h  2325  extern __sum16 __skb_checksum_complete(struct sk_buff *skb);
skb_csum_unnecessary  function  include/linux/skbuff.h  2327  static inline int skb_csum_unnecessary(const struct sk_buff *skb)
skb_checksum_complete  function  include/linux/skbuff.h  2348  static inline __sum16 skb_checksum_complete(struct sk_buff *skb)
nf_conntrack_destroy  prototype  include/linux/skbuff.h  2355  extern void nf_conntrack_destroy(struct nf_conntrack *nfct);
nf_conntrack_put  function  include/linux/skbuff.h  2356  static inline void nf_conntrack_put(struct nf_conntrack *nfct)
nf_conntrack_get  function  include/linux/skbuff.h  2361  static inline void nf_conntrack_get(struct nf_conntrack *nfct)
nf_conntrack_get_reasm  function  include/linux/skbuff.h  2368  static inline void nf_conntrack_get_reasm(struct sk_buff *skb)
nf_conntrack_put_reasm  function  include/linux/skbuff.h  2373  static inline void nf_conntrack_put_reasm(struct sk_buff *skb)
nf_bridge_put  function  include/linux/skbuff.h  2380  static inline void nf_bridge_put(struct nf_bridge_info *nf_bridge)
nf_bridge_get  function  include/linux/skbuff.h  2385  static inline void nf_bridge_get(struct nf_bridge_info *nf_bridge)
nf_reset  function  include/linux/skbuff.h  2391  static inline void nf_reset(struct sk_buff *skb)
__nf_copy  function  include/linux/skbuff.h  2408  static inline void __nf_copy(struct sk_buff *dst,const struct sk_buff *src)
nf_copy  function  include/linux/skbuff.h  2425  static inline void nf_copy(struct sk_buff *dst,const struct sk_buff *src)
skb_copy_secmark  function  include/linux/skbuff.h  2450  static inline void skb_copy_secmark(struct sk_buff *to,const struct sk_buff *from)
skb_init_secmark  function  include/linux/skbuff.h  2453  static inline void skb_init_secmark(struct sk_buff *skb)
skb_set_queue_mapping  function  include/linux/skbuff.h  2457  static inline void skb_set_queue_mapping(struct sk_buff *skb,u16 queue_mapping)
skb_get_queue_mapping  function  include/linux/skbuff.h  2462  static inline u16 skb_get_queue_mapping(const struct sk_buff *skb)
skb_copy_queue_mapping  function  include/linux/skbuff.h  2467  static inline void skb_copy_queue_mapping(struct sk_buff *to,const struct sk_buff *from)
skb_record_rx_queue  function  include/linux/skbuff.h  2472  static inline void skb_record_rx_queue(struct sk_buff *skb,u16 rx_queue)
skb_get_rx_queue  function  include/linux/skbuff.h  2477  static inline u16 skb_get_rx_queue(const struct sk_buff *skb)
skb_rx_queue_recorded  function  include/linux/skbuff.h  2482  static inline bool skb_rx_queue_recorded(const struct sk_buff *skb)
__skb_tx_hash  prototype  include/linux/skbuff.h  2487  extern u16 __skb_tx_hash(const struct net_device *dev,const struct sk_buff *skb,unsigned int num_tx_queues);
skb_sec_path  function  include/linux/skbuff.h  2497  static inline struct sec_path *skb_sec_path(struct sk_buff *skb)
skb_is_gso  function  include/linux/skbuff.h  2503  static inline bool skb_is_gso(const struct sk_buff *skb)
skb_is_gso_v6  function  include/linux/skbuff.h  2508  static inline bool skb_is_gso_v6(const struct sk_buff *skb)
__skb_warn_lro_forwarding  prototype  include/linux/skbuff.h  2513  extern void __skb_warn_lro_forwarding(const struct sk_buff *skb);
skb_warn_if_lro  function  include/linux/skbuff.h  2515  static inline bool skb_warn_if_lro(const struct sk_buff *skb)
skb_forward_csum  function  include/linux/skbuff.h  2529  static inline void skb_forward_csum(struct sk_buff *skb)
skb_checksum_none_assert  function  include/linux/skbuff.h  2544  static inline void skb_checksum_none_assert(const struct sk_buff *skb)
skb_partial_csum_set  prototype  include/linux/skbuff.h  2551  bool skb_partial_csum_set(struct sk_buff *skb,u16 start,u16 off);
skb_is_recycleable  function  include/linux/skbuff.h  2553  static inline bool skb_is_recycleable(const struct sk_buff *skb,int skb_size)
skb_head_is_locked  function  include/linux/skbuff.h  2583  static inline bool skb_head_is_locked(const struct sk_buff *skb)
__LINUX_SPINLOCK_H  macro  include/linux/spinlock.h  2  #define __LINUX_SPINLOCK_H
LOCK_SECTION_NAME  macro  include/linux/spinlock.h  64  #define LOCK_SECTION_NAME ".text..lock."KBUILD_BASENAME
LOCK_SECTION_START  macro  include/linux/spinlock.h  66  #define LOCK_SECTION_START(extra) ".subsection 1\n\t" extra ".ifndef " LOCK_SECTION_NAME "\n\t" LOCK_SECTION_NAME ":\n\t" ".endif\n"
LOCK_SECTION_END  macro  include/linux/spinlock.h  73  #define LOCK_SECTION_END ".previous\n\t"
__lockfunc  macro  include/linux/spinlock.h  76  #define __lockfunc __attribute__((section(".spinlock.text")))
__raw_spin_lock_init  prototype  include/linux/spinlock.h  93  extern void __raw_spin_lock_init(raw_spinlock_t *lock,const char *name,struct lock_class_key *key);
raw_spin_lock_init  macro  include/linux/spinlock.h  103  # define raw_spin_lock_init(lock) do { *(lock) = __RAW_SPIN_LOCK_UNLOCKED(lock); } while (0)
raw_spin_is_locked  macro  include/linux/spinlock.h  107  #define raw_spin_is_locked(lock) arch_spin_is_locked(&(lock)->raw_lock)
raw_spin_is_contended  macro  include/linux/spinlock.h  116  #define raw_spin_is_contended(lock) (((void)(lock),0))
smp_mb__after_lock  function  arch/x86/include/asm/spinlock.h  238  static inline void smp_mb__after_lock(void) { }
raw_spin_unlock_wait  macro  include/linux/spinlock.h  129  #define raw_spin_unlock_wait(lock) arch_spin_unlock_wait(&(lock)->raw_lock)
do_raw_spin_lock_flags  macro  include/linux/spinlock.h  133  #define do_raw_spin_lock_flags(lock,flags) do_raw_spin_lock(lock)
do_raw_spin_trylock  function  include/linux/spinlock.h  150  static inline int do_raw_spin_trylock(raw_spinlock_t *lock)
__acquires  function  include/linux/srcu.h  200  static inline int srcu_read_lock(struct srcu_struct *sp) __acquires(sp)
__releases  function  include/linux/srcu.h  218  __releases(sp)
raw_spin_trylock  macro  include/linux/spinlock.h  168  #define raw_spin_trylock(lock) __cond_lock(lock,_raw_spin_trylock(lock))
raw_spin_lock  macro  include/linux/spinlock.h  170  #define raw_spin_lock(lock) _raw_spin_lock(lock)
raw_spin_lock_nested  macro  include/linux/spinlock.h  182  # define raw_spin_lock_nested(lock,subclass) _raw_spin_lock(lock)
raw_spin_lock_nest_lock  macro  include/linux/spinlock.h  183  # define raw_spin_lock_nest_lock(lock,nest_lock) _raw_spin_lock(lock)
raw_spin_lock_irqsave  macro  include/linux/spinlock.h  210  #define raw_spin_lock_irqsave(lock,flags) do { typecheck(unsigned long, flags); _raw_spin_lock_irqsave(lock, flags); } while (0)
raw_spin_lock_irqsave_nested  macro  include/linux/spinlock.h  216  #define raw_spin_lock_irqsave_nested(lock,flags,subclass) raw_spin_lock_irqsave(lock, flags)
raw_spin_lock_irq  macro  include/linux/spinlock.h  221  #define raw_spin_lock_irq(lock) _raw_spin_lock_irq(lock)
raw_spin_lock_bh  macro  include/linux/spinlock.h  222  #define raw_spin_lock_bh(lock) _raw_spin_lock_bh(lock)
raw_spin_unlock  macro  include/linux/spinlock.h  223  #define raw_spin_unlock(lock) _raw_spin_unlock(lock)
raw_spin_unlock_irq  macro  include/linux/spinlock.h  224  #define raw_spin_unlock_irq(lock) _raw_spin_unlock_irq(lock)
raw_spin_unlock_irqrestore  macro  include/linux/spinlock.h  226  #define raw_spin_unlock_irqrestore(lock,flags) do { typecheck(unsigned long, flags); _raw_spin_unlock_irqrestore(lock, flags); } while (0)
raw_spin_unlock_bh  macro  include/linux/spinlock.h  231  #define raw_spin_unlock_bh(lock) _raw_spin_unlock_bh(lock)
raw_spin_trylock_bh  macro  include/linux/spinlock.h  233  #define raw_spin_trylock_bh(lock) __cond_lock(lock, _raw_spin_trylock_bh(lock))
raw_spin_trylock_irq  macro  include/linux/spinlock.h  236  #define raw_spin_trylock_irq(lock) ({ local_irq_disable(); raw_spin_trylock(lock) ? 1 : ({ local_irq_enable(); 0;  }); })
raw_spin_trylock_irqsave  macro  include/linux/spinlock.h  243  #define raw_spin_trylock_irqsave(lock,flags) ({ local_irq_save(flags); raw_spin_trylock(lock) ? 1 : ({ local_irq_restore(flags); 0; }); })
raw_spin_can_lock  macro  include/linux/spinlock.h  254  #define raw_spin_can_lock(lock) (!raw_spin_is_locked(lock))
spinlock_check  function  include/linux/spinlock.h  272  static inline raw_spinlock_t *spinlock_check(spinlock_t *lock)
spin_lock_init  macro  include/linux/spinlock.h  277  #define spin_lock_init(_lock) do { spinlock_check(_lock); raw_spin_lock_init(&(_lock)->rlock); } while (0)
spin_lock  function  include/linux/spinlock.h  283  static inline void spin_lock(spinlock_t *lock)
spin_lock_bh  function  include/linux/spinlock.h  288  static inline void spin_lock_bh(spinlock_t *lock)
spin_trylock  function  include/linux/spinlock.h  293  static inline int spin_trylock(spinlock_t *lock)
spin_lock_nested  macro  include/linux/spinlock.h  298  #define spin_lock_nested(lock,subclass) do { raw_spin_lock_nested(spinlock_check(lock), subclass); } while (0)
spin_lock_nest_lock  macro  include/linux/spinlock.h  303  #define spin_lock_nest_lock(lock,nest_lock) do { raw_spin_lock_nest_lock(spinlock_check(lock), nest_lock); } while (0)
spin_lock_irq  function  include/linux/spinlock.h  308  static inline void spin_lock_irq(spinlock_t *lock)
spin_lock_irqsave  macro  include/linux/spinlock.h  313  #define spin_lock_irqsave(lock,flags) do { raw_spin_lock_irqsave(spinlock_check(lock), flags); } while (0)
spin_lock_irqsave_nested  macro  include/linux/spinlock.h  318  #define spin_lock_irqsave_nested(lock,flags,subclass) do { raw_spin_lock_irqsave_nested(spinlock_check(lock), flags, subclass); } while (0)
spin_unlock  function  include/linux/spinlock.h  323  static inline void spin_unlock(spinlock_t *lock)
spin_unlock_bh  function  include/linux/spinlock.h  328  static inline void spin_unlock_bh(spinlock_t *lock)
spin_unlock_irq  function  include/linux/spinlock.h  333  static inline void spin_unlock_irq(spinlock_t *lock)
spin_unlock_irqrestore  function  include/linux/spinlock.h  338  static inline void spin_unlock_irqrestore(spinlock_t *lock,unsigned long flags)
spin_trylock_bh  function  include/linux/spinlock.h  343  static inline int spin_trylock_bh(spinlock_t *lock)
spin_trylock_irq  function  include/linux/spinlock.h  348  static inline int spin_trylock_irq(spinlock_t *lock)
spin_trylock_irqsave  macro  include/linux/spinlock.h  353  #define spin_trylock_irqsave(lock,flags) ({ raw_spin_trylock_irqsave(spinlock_check(lock), flags); })
spin_unlock_wait  function  include/linux/spinlock.h  358  static inline void spin_unlock_wait(spinlock_t *lock)
spin_is_locked  function  include/linux/spinlock.h  363  static inline int spin_is_locked(spinlock_t *lock)
spin_is_contended  function  include/linux/spinlock.h  368  static inline int spin_is_contended(spinlock_t *lock)
spin_can_lock  function  include/linux/spinlock.h  373  static inline int spin_can_lock(spinlock_t *lock)
assert_spin_locked  macro  include/linux/spinlock.h  378  #define assert_spin_locked(lock) assert_raw_spin_locked(&(lock)->rlock)
_atomic_dec_and_lock  prototype  include/linux/spinlock.h  393  extern int _atomic_dec_and_lock(atomic_t *atomic,spinlock_t *lock);
atomic_dec_and_lock  macro  include/linux/spinlock.h  394  #define atomic_dec_and_lock(atomic,lock) __cond_lock(lock, _atomic_dec_and_lock(atomic, lock))
_LINUX_MODULE_PARAMS_H  macro  include/linux/moduleparam.h  2  #define _LINUX_MODULE_PARAMS_H
MODULE_PARAM_PREFIX  macro  include/linux/moduleparam.h  13  #define MODULE_PARAM_PREFIX KBUILD_MODNAME "."
MAX_PARAM_PREFIX_LEN  macro  include/linux/moduleparam.h  17  #define MAX_PARAM_PREFIX_LEN (64 - sizeof(unsigned long))
___module_cat  macro  include/linux/moduleparam.h  19  #define ___module_cat(a,b) __mod_ ## a ## b
__module_cat  macro  include/linux/moduleparam.h  20  #define __module_cat(a,b) ___module_cat(a,b)
__MODULE_INFO  macro  include/linux/moduleparam.h  28  #define __MODULE_INFO(tag,name,info) struct __module_cat(name,__LINE__) {}
__MODULE_PARM_TYPE  macro  include/linux/moduleparam.h  31  #define __MODULE_PARM_TYPE(name,_type) __MODULE_INFO(parmtype, name##type, #name ":" _type)
MODULE_PARM_DESC  macro  include/linux/moduleparam.h  36  #define MODULE_PARM_DESC(_parm,desc) __MODULE_INFO(parm, _parm, #_parm ":" desc)
kernel_param_ops  struct  include/linux/moduleparam.h  41  struct kernel_param_ops { int (*set)(const char *val, const struct kernel_param *kp); int (*get)(char *buffer, const struct kernel_param *kp); void (*free)(void *arg); };
kernel_param  struct  include/linux/moduleparam.h  50  struct kernel_param { const char *name; const struct kernel_param_ops *ops; u16 perm; s16 level; union { void *arg; const struct kparam_string *str; const struct kparam_array *arr; };
kparam_string  struct  include/linux/moduleparam.h  63  struct kparam_string { unsigned int maxlen; char *string; };
kparam_array  struct  include/linux/moduleparam.h  69  struct kparam_array { unsigned int max; unsigned int elemsize; unsigned int *num; const struct kernel_param_ops *ops; void *elem; };
module_param  macro  include/linux/moduleparam.h  103  #define module_param(name,type,perm) module_param_named(name, name, type, perm)
module_param_named  macro  include/linux/moduleparam.h  117  #define module_param_named(name,value,type,perm) param_check_##type(name, &(value)); module_param_cb(name, &param_ops_##type, &value, perm); __MODULE_PARM_TYPE(name, #type)
module_param_cb  macro  include/linux/moduleparam.h  130  #define module_param_cb(name,ops,arg,perm) __module_param_call(MODULE_PARAM_PREFIX, name, ops, arg, perm, -1)
__level_param_cb  macro  include/linux/moduleparam.h  142  #define __level_param_cb(name,ops,arg,perm,level) __module_param_call(MODULE_PARAM_PREFIX, name, ops, arg, perm, level)
core_param_cb  macro  include/linux/moduleparam.h  145  #define core_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 1)
postcore_param_cb  macro  include/linux/moduleparam.h  148  #define postcore_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 2)
arch_param_cb  macro  include/linux/moduleparam.h  151  #define arch_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 3)
subsys_param_cb  macro  include/linux/moduleparam.h  154  #define subsys_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 4)
fs_param_cb  macro  include/linux/moduleparam.h  157  #define fs_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 5)
device_param_cb  macro  include/linux/moduleparam.h  160  #define device_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 6)
late_param_cb  macro  include/linux/moduleparam.h  163  #define late_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 7)
__moduleparam_const  macro  include/linux/moduleparam.h  173  #define __moduleparam_const const
__module_param_call  macro  include/linux/moduleparam.h  178  #define __module_param_call(prefix,name,ops,arg,perm,level) /* Default value instead of permissions? */ static int __param_perm_check_##name __attribute__((unused)) = BUILD_BUG_ON_ZERO((perm) < 0 || (perm) > 0777 || ((perm) & 2)) + BUILD_BUG_ON_ZERO(sizeof(""prefix) > MAX_PARAM_PREFIX_LEN); static const char __param_str_##name[] = prefix #name; static struct kernel_param __moduleparam_const __param_##name __used __attribute__ ((unused,__section__ ("__param"),aligned(sizeof(void *)))) = { __param_str_##name, ops, perm, level, { arg } }
module_param_call  macro  include/linux/moduleparam.h  190  #define module_param_call(name,set,get,arg,perm) static struct kernel_param_ops __param_ops_##name = { (void *)set, (void *)get }; __module_param_call(MODULE_PARAM_PREFIX, name, &__param_ops_##name, arg, (perm) + sizeof(__check_old_set_param(set))*0, -1)
__check_old_set_param  function  include/linux/moduleparam.h  199  __check_old_set_param(int (*oldset)(const char *,struct kernel_param *))
kparam_block_sysfs_write  macro  include/linux/moduleparam.h  210  #define kparam_block_sysfs_write(name) do { BUG_ON(!(__param_##name.perm & 0222)); __kernel_param_lock(); } while (0)
kparam_unblock_sysfs_write  macro  include/linux/moduleparam.h  220  #define kparam_unblock_sysfs_write(name) do { BUG_ON(!(__param_##name.perm & 0222)); __kernel_param_unlock(); } while (0)
kparam_block_sysfs_read  macro  include/linux/moduleparam.h  232  #define kparam_block_sysfs_read(name) do { BUG_ON(!(__param_##name.perm & 0444)); __kernel_param_lock(); } while (0)
kparam_unblock_sysfs_read  macro  include/linux/moduleparam.h  242  #define kparam_unblock_sysfs_read(name) do { BUG_ON(!(__param_##name.perm & 0444)); __kernel_param_unlock(); } while (0)
__kernel_param_lock  function  include/linux/moduleparam.h  252  static inline void __kernel_param_lock(void)
__kernel_param_unlock  function  include/linux/moduleparam.h  255  static inline void __kernel_param_unlock(void)
core_param  macro  include/linux/moduleparam.h  273  #define core_param(name,var,type,perm) param_check_##type(name, &(var)); __module_param_call("", name, &param_ops_##type, &var, perm, -1)
module_param_string  macro  include/linux/moduleparam.h  288  #define module_param_string(name,string,len,perm) static const struct kparam_string __param_string_##name = { len, string }; __module_param_call(MODULE_PARAM_PREFIX, name, &param_ops_string, .str = &__param_string_##name, perm, -1); __MODULE_PARM_TYPE(name, "string")
parameq  prototype  include/linux/moduleparam.h  304  extern bool parameq(const char *name1,const char *name2);
parameqn  prototype  include/linux/moduleparam.h  314  extern bool parameqn(const char *name1,const char *name2,size_t n);
parse_args  prototype  include/linux/moduleparam.h  317  extern int parse_args(const char *name,char *args,const struct kernel_param *params,unsigned num,s16 level_min,s16 level_max,int (*unknown)(char *param, char *val,const char *doing));
destroy_params  function  include/linux/moduleparam.h  330  static inline void destroy_params(const struct kernel_param *params,unsigned num)
__param_check  macro  include/linux/moduleparam.h  339  #define __param_check(name,p,type) static inline type *__check_##name(void) { return(p); }
param_set_byte  prototype  include/linux/moduleparam.h  343  extern int param_set_byte(const char *val,const struct kernel_param *kp);
param_get_byte  prototype  include/linux/moduleparam.h  344  extern int param_get_byte(char *buffer,const struct kernel_param *kp);
param_check_byte  macro  include/linux/moduleparam.h  345  #define param_check_byte(name,p) __param_check(name,p,unsigned char)
param_set_short  prototype  include/linux/moduleparam.h  348  extern int param_set_short(const char *val,const struct kernel_param *kp);
param_get_short  prototype  include/linux/moduleparam.h  349  extern int param_get_short(char *buffer,const struct kernel_param *kp);
param_check_short  macro  include/linux/moduleparam.h  350  #define param_check_short(name,p) __param_check(name,p,short)
param_set_ushort  prototype  include/linux/moduleparam.h  353  extern int param_set_ushort(const char *val,const struct kernel_param *kp);
param_get_ushort  prototype  include/linux/moduleparam.h  354  extern int param_get_ushort(char *buffer,const struct kernel_param *kp);
param_check_ushort  macro  include/linux/moduleparam.h  355  #define param_check_ushort(name,p) __param_check(name,p,unsigned short)
param_set_int  prototype  include/linux/moduleparam.h  358  extern int param_set_int(const char *val,const struct kernel_param *kp);
param_get_int  prototype  include/linux/moduleparam.h  359  extern int param_get_int(char *buffer,const struct kernel_param *kp);
param_check_int  macro  include/linux/moduleparam.h  360  #define param_check_int(name,p) __param_check(name,p,int)
param_set_uint  prototype  include/linux/moduleparam.h  363  extern int param_set_uint(const char *val,const struct kernel_param *kp);
param_get_uint  prototype  include/linux/moduleparam.h  364  extern int param_get_uint(char *buffer,const struct kernel_param *kp);
param_check_uint  macro  include/linux/moduleparam.h  365  #define param_check_uint(name,p) __param_check(name,p,unsigned int)
param_set_long  prototype  include/linux/moduleparam.h  368  extern int param_set_long(const char *val,const struct kernel_param *kp);
param_get_long  prototype  include/linux/moduleparam.h  369  extern int param_get_long(char *buffer,const struct kernel_param *kp);
param_check_long  macro  include/linux/moduleparam.h  370  #define param_check_long(name,p) __param_check(name,p,long)
param_set_ulong  prototype  include/linux/moduleparam.h  373  extern int param_set_ulong(const char *val,const struct kernel_param *kp);
param_get_ulong  prototype  include/linux/moduleparam.h  374  extern int param_get_ulong(char *buffer,const struct kernel_param *kp);
param_check_ulong  macro  include/linux/moduleparam.h  375  #define param_check_ulong(name,p) __param_check(name,p,unsigned long)
param_set_charp  prototype  include/linux/moduleparam.h  378  extern int param_set_charp(const char *val,const struct kernel_param *kp);
param_get_charp  prototype  include/linux/moduleparam.h  379  extern int param_get_charp(char *buffer,const struct kernel_param *kp);
param_check_charp  macro  include/linux/moduleparam.h  380  #define param_check_charp(name,p) __param_check(name,p,char *)
param_set_bool  prototype  include/linux/moduleparam.h  384  extern int param_set_bool(const char *val,const struct kernel_param *kp);
param_get_bool  prototype  include/linux/moduleparam.h  385  extern int param_get_bool(char *buffer,const struct kernel_param *kp);
param_check_bool  macro  include/linux/moduleparam.h  386  #define param_check_bool(name,p) __param_check(name,p,bool)
param_set_invbool  prototype  include/linux/moduleparam.h  389  extern int param_set_invbool(const char *val,const struct kernel_param *kp);
param_get_invbool  prototype  include/linux/moduleparam.h  390  extern int param_get_invbool(char *buffer,const struct kernel_param *kp);
param_check_invbool  macro  include/linux/moduleparam.h  391  #define param_check_invbool(name,p) __param_check(name,p,bool)
param_set_bint  prototype  include/linux/moduleparam.h  395  extern int param_set_bint(const char *val,const struct kernel_param *kp);
param_get_bint  macro  include/linux/moduleparam.h  396  #define param_get_bint param_get_int
param_check_bint  macro  include/linux/moduleparam.h  397  #define param_check_bint param_check_int
module_param_array  macro  include/linux/moduleparam.h  412  #define module_param_array(name,type,nump,perm) module_param_array_named(name, name, type, nump, perm)
module_param_array_named  macro  include/linux/moduleparam.h  426  #define module_param_array_named(name,array,type,nump,perm) param_check_##type(name, &(array)[0]); static const struct kparam_array __param_arr_##name = { .max = ARRAY_SIZE(array), .num = nump, .ops = &param_ops_##type, .elemsize = sizeof(array[0]), .elem = array }; __module_param_call(MODULE_PARAM_PREFIX, name, &param_array_ops, .arr = &__param_arr_##name, perm, -1); __MODULE_PARM_TYPE(name, "array of " #type)
param_set_copystring  prototype  include/linux/moduleparam.h  441  extern int param_set_copystring(const char *val,const struct kernel_param *);
param_get_string  prototype  include/linux/moduleparam.h  442  extern int param_get_string(char *buffer,const struct kernel_param *kp);
module_param_sysfs_setup  function  include/linux/moduleparam.h  455  static inline int module_param_sysfs_setup(struct module *mod,const struct kernel_param *kparam,unsigned int num_params)
module_param_sysfs_remove  function  include/linux/moduleparam.h  462  static inline void module_param_sysfs_remove(struct module *mod)
_LINUX_BITOPS_H  macro  include/linux/bitops.h  2  #define _LINUX_BITOPS_H
BIT  macro  include/linux/bitops.h  6  #define BIT(nr) (1UL << (nr))
BIT_MASK  macro  include/linux/bitops.h  7  #define BIT_MASK(nr) (1UL << ((nr) % BITS_PER_LONG))
BIT_WORD  macro  include/linux/bitops.h  8  #define BIT_WORD(nr) ((nr) / BITS_PER_LONG)
BITS_PER_BYTE  macro  include/linux/bitops.h  9  #define BITS_PER_BYTE 8
BITS_TO_LONGS  macro  include/linux/bitops.h  10  #define BITS_TO_LONGS(nr) DIV_ROUND_UP(nr,BITS_PER_BYTE * sizeof(long))
__sw_hweight8  prototype  include/linux/bitops.h  13  extern unsigned int __sw_hweight8(unsigned int w);
__sw_hweight16  prototype  include/linux/bitops.h  14  extern unsigned int __sw_hweight16(unsigned int w);
__sw_hweight32  prototype  include/linux/bitops.h  15  extern unsigned int __sw_hweight32(unsigned int w);
__sw_hweight64  prototype  include/linux/bitops.h  16  extern unsigned long __sw_hweight64(__u64 w);
for_each_set_bit  macro  include/linux/bitops.h  24  #define for_each_set_bit(bit,addr,size) for ((bit) = find_first_bit((addr), (size)); (bit) < (size); (bit) = find_next_bit((addr), (size), (bit) + 1))
for_each_set_bit_from  macro  include/linux/bitops.h  30  #define for_each_set_bit_from(bit,addr,size) for ((bit) = find_next_bit((addr), (size), (bit)); (bit) < (size); (bit) = find_next_bit((addr), (size), (bit) + 1))
for_each_clear_bit  macro  include/linux/bitops.h  35  #define for_each_clear_bit(bit,addr,size) for ((bit) = find_first_zero_bit((addr), (size)); (bit) < (size); (bit) = find_next_zero_bit((addr), (size), (bit) + 1))
for_each_clear_bit_from  macro  include/linux/bitops.h  41  #define for_each_clear_bit_from(bit,addr,size) for ((bit) = find_next_zero_bit((addr), (size), (bit)); (bit) < (size); (bit) = find_next_zero_bit((addr), (size), (bit) + 1))
get_bitmask_order  function  include/linux/bitops.h  46  static __inline__ int get_bitmask_order(unsigned int count)
get_count_order  function  include/linux/bitops.h  54  static __inline__ int get_count_order(unsigned int count)
hweight_long  function  include/linux/bitops.h  64  static inline unsigned long hweight_long(unsigned long w)
rol64  function  include/linux/bitops.h  74  static inline __u64 rol64(__u64 word,unsigned int shift)
ror64  function  include/linux/bitops.h  84  static inline __u64 ror64(__u64 word,unsigned int shift)
rol32  function  include/linux/bitops.h  94  static inline __u32 rol32(__u32 word,unsigned int shift)
ror32  function  include/linux/bitops.h  104  static inline __u32 ror32(__u32 word,unsigned int shift)
rol16  function  include/linux/bitops.h  114  static inline __u16 rol16(__u16 word,unsigned int shift)
ror16  function  include/linux/bitops.h  124  static inline __u16 ror16(__u16 word,unsigned int shift)
rol8  function  include/linux/bitops.h  134  static inline __u8 rol8(__u8 word,unsigned int shift)
ror8  function  include/linux/bitops.h  144  static inline __u8 ror8(__u8 word,unsigned int shift)
sign_extend32  function  include/linux/bitops.h  154  static inline __s32 sign_extend32(__u32 value,int index)
fls_long  function  include/linux/bitops.h  160  static inline unsigned fls_long(unsigned long l)
__ffs64  function  include/linux/bitops.h  175  static inline unsigned long __ffs64(u64 word)
find_last_bit  prototype  include/linux/bitops.h  196  extern unsigned long find_last_bit(const unsigned long *addr,unsigned long size);
_LINUX_IO_H  macro  include/linux/io.h  19  #define _LINUX_IO_H
__iowrite32_copy  prototype  include/linux/io.h  27  void __iowrite32_copy(void __iomem *to,const void *from,size_t count);
__iowrite64_copy  prototype  include/linux/io.h  28  void __iowrite64_copy(void __iomem *to,const void *from,size_t count);
ioremap_page_range  function  include/linux/io.h  34  static inline int ioremap_page_range(unsigned long addr,unsigned long end,phys_addr_t phys_addr, pgprot_t prot)
devm_ioport_map  function  include/linux/io.h  49  static inline void __iomem *devm_ioport_map(struct device *dev,unsigned long port,unsigned int nr)
devm_ioport_unmap  function  include/linux/io.h  56  static inline void devm_ioport_unmap(struct device *dev,void __iomem *addr)
devm_ioremap  prototype  include/linux/io.h  61  void __iomem *devm_ioremap(struct device *dev,resource_size_t offset,unsigned long size);
devm_ioremap_nocache  prototype  include/linux/io.h  63  void __iomem *devm_ioremap_nocache(struct device *dev,resource_size_t offset,unsigned long size);
devm_iounmap  prototype  include/linux/io.h  65  void devm_iounmap(struct device *dev,void __iomem *addr);
check_signature  prototype  include/linux/io.h  66  int check_signature(const volatile void __iomem *io_addr,const unsigned char *signature, int length);
devm_ioremap_release  prototype  include/linux/io.h  68  void devm_ioremap_release(struct device *dev,void *res);
__LINUX_UACCESS_H__  macro  include/linux/uaccess.h  2  #define __LINUX_UACCESS_H__
pagefault_disable  function  include/linux/uaccess.h  16  static inline void pagefault_disable(void)
pagefault_enable  function  include/linux/uaccess.h  26  static inline void pagefault_enable(void)
__copy_from_user_inatomic_nocache  function  arch/x86/include/asm/uaccess_64.h  237  __copy_from_user_inatomic_nocache(void *dst,const void __user *src,unsigned size)
__copy_from_user_nocache  function  arch/x86/include/asm/uaccess_64.h  230  __copy_from_user_nocache(void *dst,const void __user *src,unsigned size)
probe_kernel_address  macro  include/linux/uaccess.h  74  #define probe_kernel_address(addr,retval) ({ long ret; mm_segment_t old_fs = get_fs(); set_fs(KERNEL_DS); pagefault_disable(); ret = __copy_from_user_inatomic(&(retval), (__force typeof(retval) __user *)(addr), sizeof(retval)); pagefault_enable(); set_fs(old_fs); ret; })
probe_kernel_read  prototype  include/linux/uaccess.h  96  extern long probe_kernel_read(void *dst,const void *src,size_t size);
__probe_kernel_read  prototype  include/linux/uaccess.h  97  extern long __probe_kernel_read(void *dst,const void *src,size_t size);
probe_kernel_write  prototype  include/linux/uaccess.h  108  extern long notrace probe_kernel_write(void *dst,const void *src,size_t size);
__probe_kernel_write  prototype  include/linux/uaccess.h  109  extern long notrace __probe_kernel_write(void *dst,const void *src,size_t size);
_ASM_X86_DMA_H  macro  arch/x86/include/asm/dma.h  9  #define _ASM_X86_DMA_H
dma_outb  macro  arch/x86/include/asm/dma.h  17  #define dma_outb outb
dma_inb  macro  arch/x86/include/asm/dma.h  20  #define dma_inb inb
MAX_DMA_CHANNELS  macro  arch/x86/include/asm/dma.h  70  #define MAX_DMA_CHANNELS 8
MAX_DMA_PFN  macro  arch/x86/include/asm/dma.h  73  #define MAX_DMA_PFN ((16 * 1024 * 1024) >> PAGE_SHIFT)
MAX_DMA32_PFN  macro  arch/x86/include/asm/dma.h  76  #define MAX_DMA32_PFN ((4UL * 1024 * 1024 * 1024) >> PAGE_SHIFT)
MAX_DMA_ADDRESS  macro  arch/x86/include/asm/dma.h  83  #define MAX_DMA_ADDRESS ((unsigned long)__va(MAX_DMA_PFN << PAGE_SHIFT))
IO_DMA1_BASE  macro  arch/x86/include/asm/dma.h  87  #define IO_DMA1_BASE 0x00
IO_DMA2_BASE  macro  arch/x86/include/asm/dma.h  88  #define IO_DMA2_BASE 0xC0
DMA1_CMD_REG  macro  arch/x86/include/asm/dma.h  91  #define DMA1_CMD_REG 0x08
DMA1_STAT_REG  macro  arch/x86/include/asm/dma.h  92  #define DMA1_STAT_REG 0x08
DMA1_REQ_REG  macro  arch/x86/include/asm/dma.h  93  #define DMA1_REQ_REG 0x09
DMA1_MASK_REG  macro  arch/x86/include/asm/dma.h  94  #define DMA1_MASK_REG 0x0A
DMA1_MODE_REG  macro  arch/x86/include/asm/dma.h  95  #define DMA1_MODE_REG 0x0B
DMA1_CLEAR_FF_REG  macro  arch/x86/include/asm/dma.h  96  #define DMA1_CLEAR_FF_REG 0x0C
DMA1_TEMP_REG  macro  arch/x86/include/asm/dma.h  97  #define DMA1_TEMP_REG 0x0D
DMA1_RESET_REG  macro  arch/x86/include/asm/dma.h  98  #define DMA1_RESET_REG 0x0D
DMA1_CLR_MASK_REG  macro  arch/x86/include/asm/dma.h  99  #define DMA1_CLR_MASK_REG 0x0E
DMA1_MASK_ALL_REG  macro  arch/x86/include/asm/dma.h  100  #define DMA1_MASK_ALL_REG 0x0F
DMA2_CMD_REG  macro  arch/x86/include/asm/dma.h  102  #define DMA2_CMD_REG 0xD0
DMA2_STAT_REG  macro  arch/x86/include/asm/dma.h  103  #define DMA2_STAT_REG 0xD0
DMA2_REQ_REG  macro  arch/x86/include/asm/dma.h  104  #define DMA2_REQ_REG 0xD2
DMA2_MASK_REG  macro  arch/x86/include/asm/dma.h  105  #define DMA2_MASK_REG 0xD4
DMA2_MODE_REG  macro  arch/x86/include/asm/dma.h  106  #define DMA2_MODE_REG 0xD6
DMA2_CLEAR_FF_REG  macro  arch/x86/include/asm/dma.h  107  #define DMA2_CLEAR_FF_REG 0xD8
DMA2_TEMP_REG  macro  arch/x86/include/asm/dma.h  108  #define DMA2_TEMP_REG 0xDA
DMA2_RESET_REG  macro  arch/x86/include/asm/dma.h  109  #define DMA2_RESET_REG 0xDA
DMA2_CLR_MASK_REG  macro  arch/x86/include/asm/dma.h  110  #define DMA2_CLR_MASK_REG 0xDC
DMA2_MASK_ALL_REG  macro  arch/x86/include/asm/dma.h  111  #define DMA2_MASK_ALL_REG 0xDE
DMA_ADDR_0  macro  arch/x86/include/asm/dma.h  113  #define DMA_ADDR_0 0x00
DMA_ADDR_1  macro  arch/x86/include/asm/dma.h  114  #define DMA_ADDR_1 0x02
DMA_ADDR_2  macro  arch/x86/include/asm/dma.h  115  #define DMA_ADDR_2 0x04
DMA_ADDR_3  macro  arch/x86/include/asm/dma.h  116  #define DMA_ADDR_3 0x06
DMA_ADDR_4  macro  arch/x86/include/asm/dma.h  117  #define DMA_ADDR_4 0xC0
DMA_ADDR_5  macro  arch/x86/include/asm/dma.h  118  #define DMA_ADDR_5 0xC4
DMA_ADDR_6  macro  arch/x86/include/asm/dma.h  119  #define DMA_ADDR_6 0xC8
DMA_ADDR_7  macro  arch/x86/include/asm/dma.h  120  #define DMA_ADDR_7 0xCC
DMA_CNT_0  macro  arch/x86/include/asm/dma.h  122  #define DMA_CNT_0 0x01
DMA_CNT_1  macro  arch/x86/include/asm/dma.h  123  #define DMA_CNT_1 0x03
DMA_CNT_2  macro  arch/x86/include/asm/dma.h  124  #define DMA_CNT_2 0x05
DMA_CNT_3  macro  arch/x86/include/asm/dma.h  125  #define DMA_CNT_3 0x07
DMA_CNT_4  macro  arch/x86/include/asm/dma.h  126  #define DMA_CNT_4 0xC2
DMA_CNT_5  macro  arch/x86/include/asm/dma.h  127  #define DMA_CNT_5 0xC6
DMA_CNT_6  macro  arch/x86/include/asm/dma.h  128  #define DMA_CNT_6 0xCA
DMA_CNT_7  macro  arch/x86/include/asm/dma.h  129  #define DMA_CNT_7 0xCE
DMA_PAGE_0  macro  arch/x86/include/asm/dma.h  131  #define DMA_PAGE_0 0x87
DMA_PAGE_1  macro  arch/x86/include/asm/dma.h  132  #define DMA_PAGE_1 0x83
DMA_PAGE_2  macro  arch/x86/include/asm/dma.h  133  #define DMA_PAGE_2 0x81
DMA_PAGE_3  macro  arch/x86/include/asm/dma.h  134  #define DMA_PAGE_3 0x82
DMA_PAGE_5  macro  arch/x86/include/asm/dma.h  135  #define DMA_PAGE_5 0x8B
DMA_PAGE_6  macro  arch/x86/include/asm/dma.h  136  #define DMA_PAGE_6 0x89
DMA_PAGE_7  macro  arch/x86/include/asm/dma.h  137  #define DMA_PAGE_7 0x8A
DMA_MODE_READ  macro  arch/x86/include/asm/dma.h  140  #define DMA_MODE_READ 0x44
DMA_MODE_WRITE  macro  arch/x86/include/asm/dma.h  142  #define DMA_MODE_WRITE 0x48
DMA_MODE_CASCADE  macro  arch/x86/include/asm/dma.h  144  #define DMA_MODE_CASCADE 0xC0
DMA_AUTOINIT  macro  arch/x86/include/asm/dma.h  146  #define DMA_AUTOINIT 0x10
claim_dma_lock  function  arch/x86/include/asm/dma.h  152  static inline unsigned long claim_dma_lock(void)
release_dma_lock  function  arch/x86/include/asm/dma.h  159  static inline void release_dma_lock(unsigned long flags)
enable_dma  function  arch/x86/include/asm/dma.h  166  static inline void enable_dma(unsigned int dmanr)
disable_dma  function  arch/x86/include/asm/dma.h  174  static inline void disable_dma(unsigned int dmanr)
clear_dma_ff  function  arch/x86/include/asm/dma.h  189  static inline void clear_dma_ff(unsigned int dmanr)
set_dma_mode  function  arch/x86/include/asm/dma.h  198  static inline void set_dma_mode(unsigned int dmanr,char mode)
set_dma_page  function  arch/x86/include/asm/dma.h  211  static inline void set_dma_page(unsigned int dmanr,char pagenr)
set_dma_addr  function  arch/x86/include/asm/dma.h  242  static inline void set_dma_addr(unsigned int dmanr,unsigned int a)
set_dma_count  function  arch/x86/include/asm/dma.h  263  static inline void set_dma_count(unsigned int dmanr,unsigned int count)
get_dma_residue  function  arch/x86/include/asm/dma.h  287  static inline int get_dma_residue(unsigned int dmanr)
request_dma  prototype  arch/x86/include/asm/dma.h  305  extern int request_dma(unsigned int dmanr,const char *device_id);
free_dma  prototype  arch/x86/include/asm/dma.h  306  extern void free_dma(unsigned int dmanr);
isa_dma_bridge_buggy  macro  arch/x86/include/asm/dma.h  314  #define isa_dma_bridge_buggy (0)
_ASM_X86_IRQ_H  macro  arch/x86/include/asm/irq.h  2  #define _ASM_X86_IRQ_H
irq_canonicalize  function  arch/x86/include/asm/irq.h  13  static inline int irq_canonicalize(int irq)
irq_ctx_init  macro  arch/x86/include/asm/irq.h  21  # define irq_ctx_init(cpu) do { } while (0)
__ARCH_HAS_DO_SOFTIRQ  macro  arch/x86/include/asm/irq.h  24  #define __ARCH_HAS_DO_SOFTIRQ
fixup_irqs  prototype  arch/x86/include/asm/irq.h  28  extern void fixup_irqs(void);
irq_force_complete_move  prototype  arch/x86/include/asm/irq.h  29  extern void irq_force_complete_move(int);
native_init_IRQ  prototype  arch/x86/include/asm/irq.h  33  extern void native_init_IRQ(void);
handle_irq  prototype  arch/x86/include/asm/irq.h  34  extern bool handle_irq(unsigned irq,struct pt_regs *regs);
do_IRQ  prototype  arch/x86/include/asm/irq.h  36  extern unsigned int do_IRQ(struct pt_regs *regs);
DECLARE_BITMAP  prototype  include/linux/dmaengine.h  244  typedef struct { DECLARE_BITMAP(bits,DMA_TX_TYPE_END); } dma_cap_mask_t;
vector_used_by_percpu_irq  prototype  arch/x86/include/asm/irq.h  40  extern int vector_used_by_percpu_irq(unsigned int vector);
init_ISA_irqs  prototype  arch/x86/include/asm/irq.h  42  extern void init_ISA_irqs(void);
_LINUX_LIST_H  macro  include/linux/list.h  2  #define _LINUX_LIST_H
LIST_HEAD_INIT  macro  include/linux/list.h  19  #define LIST_HEAD_INIT(name) { &(name),&(name) }
LIST_HEAD  macro  include/linux/list.h  21  #define LIST_HEAD(name) struct list_head name = LIST_HEAD_INIT(name)
INIT_LIST_HEAD  function  include/linux/list.h  24  static inline void INIT_LIST_HEAD(struct list_head *list)
__list_add  prototype  include/linux/list.h  47  extern void __list_add(struct list_head *new,struct list_head *prev,struct list_head *next);
list_add  function  include/linux/list.h  60  static inline void list_add(struct list_head *new,struct list_head *head)
list_add_tail  function  include/linux/list.h  74  static inline void list_add_tail(struct list_head *new,struct list_head *head)
__list_del  function  include/linux/list.h  86  static inline void __list_del(struct list_head * prev,struct list_head * next)
__list_del_entry  prototype  include/linux/list.h  111  extern void __list_del_entry(struct list_head *entry);
list_del  prototype  include/linux/list.h  112  extern void list_del(struct list_head *entry);
list_replace  function  include/linux/list.h  122  static inline void list_replace(struct list_head *old,struct list_head *new)
list_replace_init  function  include/linux/list.h  131  static inline void list_replace_init(struct list_head *old,struct list_head *new)
list_del_init  function  include/linux/list.h  142  static inline void list_del_init(struct list_head *entry)
list_move  function  include/linux/list.h  153  static inline void list_move(struct list_head *list,struct list_head *head)
list_move_tail  function  include/linux/list.h  164  static inline void list_move_tail(struct list_head *list,struct list_head *head)
list_is_last  function  include/linux/list.h  176  static inline int list_is_last(const struct list_head *list,const struct list_head *head)
list_empty  function  include/linux/list.h  186  static inline int list_empty(const struct list_head *head)
list_empty_careful  function  include/linux/list.h  204  static inline int list_empty_careful(const struct list_head *head)
list_rotate_left  function  include/linux/list.h  214  static inline void list_rotate_left(struct list_head *head)
list_is_singular  function  include/linux/list.h  228  static inline int list_is_singular(const struct list_head *head)
__list_cut_position  function  include/linux/list.h  233  static inline void __list_cut_position(struct list_head *list,struct list_head *head, struct list_head *entry)
list_cut_position  function  include/linux/list.h  259  static inline void list_cut_position(struct list_head *list,struct list_head *head, struct list_head *entry)
__list_splice  function  include/linux/list.h  273  static inline void __list_splice(const struct list_head *list,struct list_head *prev,struct list_head *next)
list_splice  function  include/linux/list.h  292  static inline void list_splice(const struct list_head *list,struct list_head *head)
list_splice_tail  function  include/linux/list.h  304  static inline void list_splice_tail(struct list_head *list,struct list_head *head)
list_splice_init  function  include/linux/list.h  318  static inline void list_splice_init(struct list_head *list,struct list_head *head)
list_splice_tail_init  function  include/linux/list.h  335  static inline void list_splice_tail_init(struct list_head *list,struct list_head *head)
list_entry  macro  include/linux/list.h  350  #define list_entry(ptr,type,member) container_of(ptr, type, member)
list_first_entry  macro  include/linux/list.h  361  #define list_first_entry(ptr,type,member) list_entry((ptr)->next, type, member)
list_for_each  macro  include/linux/list.h  369  #define list_for_each(pos,head) for (pos = (head)->next; pos != (head); pos = pos->next)
__list_for_each  macro  include/linux/list.h  380  #define __list_for_each(pos,head) for (pos = (head)->next; pos != (head); pos = pos->next)
list_for_each_prev  macro  include/linux/list.h  388  #define list_for_each_prev(pos,head) for (pos = (head)->prev; pos != (head); pos = pos->prev)
list_for_each_safe  macro  include/linux/list.h  397  #define list_for_each_safe(pos,n,head) for (pos = (head)->next, n = pos->next; pos != (head); pos = n, n = pos->next)
list_for_each_prev_safe  macro  include/linux/list.h  407  #define list_for_each_prev_safe(pos,n,head) for (pos = (head)->prev, n = pos->prev; pos != (head); pos = n, n = pos->prev)
list_for_each_entry  macro  include/linux/list.h  418  #define list_for_each_entry(pos,head,member) for (pos = list_entry((head)->next, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.next, typeof(*pos), member))
list_for_each_entry_reverse  macro  include/linux/list.h  429  #define list_for_each_entry_reverse(pos,head,member) for (pos = list_entry((head)->prev, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.prev, typeof(*pos), member))
list_prepare_entry  macro  include/linux/list.h  442  #define list_prepare_entry(pos,head,member) ((pos) ? : list_entry(head, typeof(*pos), member))
list_for_each_entry_continue  macro  include/linux/list.h  454  #define list_for_each_entry_continue(pos,head,member) for (pos = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.next, typeof(*pos), member))
list_for_each_entry_continue_reverse  macro  include/linux/list.h  468  #define list_for_each_entry_continue_reverse(pos,head,member) for (pos = list_entry(pos->member.prev, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.prev, typeof(*pos), member))
list_for_each_entry_from  macro  include/linux/list.h  481  #define list_for_each_entry_from(pos,head,member) for (; &pos->member != (head); pos = list_entry(pos->member.next, typeof(*pos), member))
list_for_each_entry_safe  macro  include/linux/list.h  492  #define list_for_each_entry_safe(pos,n,head,member) for (pos = list_entry((head)->next, typeof(*pos), member), n = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.next, typeof(*n), member))
list_for_each_entry_safe_continue  macro  include/linux/list.h  508  #define list_for_each_entry_safe_continue(pos,n,head,member) for (pos = list_entry(pos->member.next, typeof(*pos), member), n = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.next, typeof(*n), member))
list_for_each_entry_safe_from  macro  include/linux/list.h  524  #define list_for_each_entry_safe_from(pos,n,head,member) for (n = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.next, typeof(*n), member))
list_for_each_entry_safe_reverse  macro  include/linux/list.h  539  #define list_for_each_entry_safe_reverse(pos,n,head,member) for (pos = list_entry((head)->prev, typeof(*pos), member), n = list_entry(pos->member.prev, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.prev, typeof(*n), member))
list_safe_reset_next  macro  include/linux/list.h  557  #define list_safe_reset_next(pos,n,member) n = list_entry(pos->member.next, typeof(*pos), member)
HLIST_HEAD_INIT  macro  include/linux/list.h  567  #define HLIST_HEAD_INIT { .first = NULL }
HLIST_HEAD  macro  include/linux/list.h  568  #define HLIST_HEAD(name) struct hlist_head name = { .first = NULL }
INIT_HLIST_HEAD  macro  include/linux/list.h  569  #define INIT_HLIST_HEAD(ptr) ((ptr)->first = NULL)
INIT_HLIST_NODE  function  include/linux/list.h  570  static inline void INIT_HLIST_NODE(struct hlist_node *h)
hlist_unhashed  function  include/linux/list.h  576  static inline int hlist_unhashed(const struct hlist_node *h)
hlist_empty  function  include/linux/list.h  581  static inline int hlist_empty(const struct hlist_head *h)
__hlist_del  function  include/linux/list.h  586  static inline void __hlist_del(struct hlist_node *n)
hlist_del  function  include/linux/list.h  595  static inline void hlist_del(struct hlist_node *n)
hlist_del_init  function  include/linux/list.h  602  static inline void hlist_del_init(struct hlist_node *n)
hlist_add_head  function  include/linux/list.h  610  static inline void hlist_add_head(struct hlist_node *n,struct hlist_head *h)
hlist_add_before  function  include/linux/list.h  621  static inline void hlist_add_before(struct hlist_node *n,struct hlist_node *next)
hlist_add_after  function  include/linux/list.h  630  static inline void hlist_add_after(struct hlist_node *n,struct hlist_node *next)
hlist_add_fake  function  include/linux/list.h  642  static inline void hlist_add_fake(struct hlist_node *n)
hlist_move_list  function  include/linux/list.h  651  static inline void hlist_move_list(struct hlist_head *old,struct hlist_head *new)
hlist_entry  macro  include/linux/list.h  660  #define hlist_entry(ptr,type,member) container_of(ptr,type,member)
hlist_for_each  macro  include/linux/list.h  662  #define hlist_for_each(pos,head) for (pos = (head)->first; pos ; pos = pos->next)
hlist_for_each_safe  macro  include/linux/list.h  665  #define hlist_for_each_safe(pos,n,head) for (pos = (head)->first; pos && ({ n = pos->next; 1; }); pos = n)
hlist_for_each_entry  macro  include/linux/list.h  676  #define hlist_for_each_entry(tpos,pos,head,member) for (pos = (head)->first; pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = pos->next)
hlist_for_each_entry_continue  macro  include/linux/list.h  688  #define hlist_for_each_entry_continue(tpos,pos,member) for (pos = (pos)->next; pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = pos->next)
hlist_for_each_entry_from  macro  include/linux/list.h  700  #define hlist_for_each_entry_from(tpos,pos,member) for (; pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = pos->next)
hlist_for_each_entry_safe  macro  include/linux/list.h  713  #define hlist_for_each_entry_safe(tpos,pos,n,head,member) for (pos = (head)->first; pos && ({ n = pos->next; 1; }) && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = n)
_LINUX_STAT_H  macro  include/linux/stat.h  2  #define _LINUX_STAT_H
S_IFMT  macro  include/linux/stat.h  12  #define S_IFMT 00170000
S_IFSOCK  macro  include/linux/stat.h  13  #define S_IFSOCK 0140000
S_IFLNK  macro  include/linux/stat.h  14  #define S_IFLNK 0120000
S_IFREG  macro  include/linux/stat.h  15  #define S_IFREG 0100000
S_IFBLK  macro  include/linux/stat.h  16  #define S_IFBLK 0060000
S_IFDIR  macro  include/linux/stat.h  17  #define S_IFDIR 0040000
S_IFCHR  macro  include/linux/stat.h  18  #define S_IFCHR 0020000
S_IFIFO  macro  include/linux/stat.h  19  #define S_IFIFO 0010000
S_ISUID  macro  include/linux/stat.h  20  #define S_ISUID 0004000
S_ISGID  macro  include/linux/stat.h  21  #define S_ISGID 0002000
S_ISVTX  macro  include/linux/stat.h  22  #define S_ISVTX 0001000
S_ISLNK  macro  include/linux/stat.h  24  #define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
S_ISREG  macro  include/linux/stat.h  25  #define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
S_ISDIR  macro  include/linux/stat.h  26  #define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
S_ISCHR  macro  include/linux/stat.h  27  #define S_ISCHR(m) (((m) & S_IFMT) == S_IFCHR)
S_ISBLK  macro  include/linux/stat.h  28  #define S_ISBLK(m) (((m) & S_IFMT) == S_IFBLK)
S_ISFIFO  macro  include/linux/stat.h  29  #define S_ISFIFO(m) (((m) & S_IFMT) == S_IFIFO)
S_ISSOCK  macro  include/linux/stat.h  30  #define S_ISSOCK(m) (((m) & S_IFMT) == S_IFSOCK)
S_IRWXU  macro  include/linux/stat.h  32  #define S_IRWXU 00700
S_IRUSR  macro  include/linux/stat.h  33  #define S_IRUSR 00400
S_IWUSR  macro  include/linux/stat.h  34  #define S_IWUSR 00200
S_IXUSR  macro  include/linux/stat.h  35  #define S_IXUSR 00100
S_IRWXG  macro  include/linux/stat.h  37  #define S_IRWXG 00070
S_IRGRP  macro  include/linux/stat.h  38  #define S_IRGRP 00040
S_IWGRP  macro  include/linux/stat.h  39  #define S_IWGRP 00020
S_IXGRP  macro  include/linux/stat.h  40  #define S_IXGRP 00010
S_IRWXO  macro  include/linux/stat.h  42  #define S_IRWXO 00007
S_IROTH  macro  include/linux/stat.h  43  #define S_IROTH 00004
S_IWOTH  macro  include/linux/stat.h  44  #define S_IWOTH 00002
S_IXOTH  macro  include/linux/stat.h  45  #define S_IXOTH 00001
S_IRWXUGO  macro  include/linux/stat.h  50  #define S_IRWXUGO (S_IRWXU|S_IRWXG|S_IRWXO)
S_IALLUGO  macro  include/linux/stat.h  51  #define S_IALLUGO (S_ISUID|S_ISGID|S_ISVTX|S_IRWXUGO)
S_IRUGO  macro  include/linux/stat.h  52  #define S_IRUGO (S_IRUSR|S_IRGRP|S_IROTH)
S_IWUGO  macro  include/linux/stat.h  53  #define S_IWUGO (S_IWUSR|S_IWGRP|S_IWOTH)
S_IXUGO  macro  include/linux/stat.h  54  #define S_IXUGO (S_IXUSR|S_IXGRP|S_IXOTH)
UTIME_NOW  macro  include/linux/stat.h  56  #define UTIME_NOW ((1l << 30) - 1l)
UTIME_OMIT  macro  include/linux/stat.h  57  #define UTIME_OMIT ((1l << 30) - 2l)
kstat  struct  include/linux/stat.h  63  struct kstat { u64 ino; dev_t dev; umode_t mode; unsigned int nlink; kuid_t uid; kgid_t gid; dev_t rdev; loff_t size; struct timespec atime; struct timespec mtime; struct timespec ctime; unsigned long blksize; unsigned long long blocks; };
__LINUX_COMPILER_H  macro  include/linux/compiler.h  2  #define __LINUX_COMPILER_H
__user  macro  include/linux/compiler.h  27  # define __user
__kernel  macro  include/linux/compiler.h  28  # define __kernel
__safe  macro  include/linux/compiler.h  29  # define __safe
__force  macro  include/linux/compiler.h  30  # define __force
__nocast  macro  include/linux/compiler.h  31  # define __nocast
__iomem  macro  include/linux/compiler.h  32  # define __iomem
__acquire  macro  include/linux/compiler.h  38  # define __acquire(x) (void)0
__release  macro  include/linux/compiler.h  39  # define __release(x) (void)0
__cond_lock  macro  include/linux/compiler.h  40  # define __cond_lock(x,c) (c)
__percpu  macro  include/linux/compiler.h  41  # define __percpu
__rcu  macro  include/linux/compiler.h  42  # define __rcu
__chk_user_ptr  macro  include/linux/compiler.h  33  # define __chk_user_ptr(x) (void)0
__chk_io_ptr  macro  include/linux/compiler.h  34  # define __chk_io_ptr(x) (void)0
__builtin_warning  macro  include/linux/compiler.h  35  # define __builtin_warning(x,y...) (1)
notrace  macro  arch/x86/include/asm/linkage.h  7  #define notrace __attribute__((no_instrument_function))
ftrace_branch_data  struct  include/linux/compiler.h  66  struct ftrace_branch_data { const char *func; const char *file; unsigned line; union { unsigned long correct; unsigned long incorrect; }; unsigned long miss; unsigned long hit; }; unsigned long miss_hit[2]; };
ftrace_likely_update  prototype  include/linux/compiler.h  89  void ftrace_likely_update(struct ftrace_branch_data *f,int val,int expect);
likely_notrace  macro  include/linux/compiler.h  91  #define likely_notrace(x) __builtin_expect(!!(x),1)
unlikely_notrace  macro  include/linux/compiler.h  92  #define unlikely_notrace(x) __builtin_expect(!!(x),0)
__branch_check__  macro  include/linux/compiler.h  94  #define __branch_check__(x,expect) ({ int ______r; static struct ftrace_branch_data __attribute__((__aligned__(4))) __attribute__((section("_ftrace_annotated_branch"))) ______f = { .func = __func__, .file = __FILE__, .line = __LINE__, }; ______r = likely_notrace(x); ftrace_likely_update(&______f, ______r, expect); ______r; })
likely  macro  include/linux/compiler.h  146  # define likely(x) __builtin_expect(!!(x),1)
unlikely  macro  include/linux/compiler.h  147  # define unlikely(x) __builtin_expect(!!(x),0)
if  macro  include/linux/compiler.h  126  #define if(cond,...) __trace_if( (cond ,## __VA_ARGS__) )
__trace_if  macro  include/linux/compiler.h  127  #define __trace_if(cond) if (__builtin_constant_p((cond)) ? !!(cond) : ({ int ______r; static struct ftrace_branch_data __attribute__((__aligned__(4))) __attribute__((section("_ftrace_branch"))) ______f = { .func = __func__, .file = __FILE__, .line = __LINE__, }; ______r = !!(cond); ______f.miss_hit[______r]++; ______r; }))
barrier  macro  include/linux/compiler-intel.h  19  #define barrier() __memory_barrier()
unreachable  macro  include/linux/compiler.h  157  # define unreachable() do { } while (1)
RELOC_HIDE  macro  include/linux/compiler-intel.h  21  #define RELOC_HIDE(ptr,off) ({ unsigned long __ptr; __ptr = (unsigned long) (ptr); (typeof(ptr)) (__ptr + (off)); })
__deprecated  macro  include/linux/compiler-gcc.h  60  #define __deprecated __attribute__((deprecated))
__deprecated_for_modules  macro  include/linux/compiler.h  200  #define __deprecated_for_modules
__must_check  macro  include/linux/compiler.h  194  #define __must_check
__used  macro  include/linux/compiler.h  222  # define __used
__maybe_unused  macro  include/linux/compiler-gcc.h  94  #define __maybe_unused __attribute__((unused))
__always_unused  macro  include/linux/compiler-gcc.h  95  #define __always_unused __attribute__((unused))
noinline  macro  include/linux/compiler-gcc.h  92  #define noinline __attribute__((noinline))
noinline_for_stack  macro  include/linux/compiler.h  241  #define noinline_for_stack noinline
__always_inline  macro  include/linux/compiler-gcc.h  112  #define __always_inline inline __attribute__((always_inline))
__attribute_const__  macro  include/linux/compiler-gcc.h  93  #define __attribute_const__ __attribute__((__const__))
__cold  macro  include/linux/compiler.h  273  #define __cold
__section  macro  include/linux/compiler.h  278  # define __section(S) __attribute__ ((__section__(#S)))
__same_type  macro  include/linux/compiler.h  283  # define __same_type(a,b) __builtin_types_compatible_p(typeof(a),typeof(b))
__compiletime_object_size  macro  include/linux/compiler.h  288  # define __compiletime_object_size(obj) -1
__compiletime_warning  macro  include/linux/compiler.h  291  # define __compiletime_warning(message)
__compiletime_error  macro  include/linux/compiler.h  294  # define __compiletime_error(message)
__linktime_error  macro  include/linux/compiler.h  297  # define __linktime_error(message)
ACCESS_ONCE  macro  include/linux/compiler.h  311  #define ACCESS_ONCE(x) (*(volatile typeof(x) *)&(x))
__LINUX_CACHE_H  macro  include/linux/cache.h  2  #define __LINUX_CACHE_H
L1_CACHE_ALIGN  macro  include/linux/cache.h  8  #define L1_CACHE_ALIGN(x) ALIGN(x,L1_CACHE_BYTES)
SMP_CACHE_BYTES  macro  include/linux/cache.h  12  #define SMP_CACHE_BYTES L1_CACHE_BYTES
__read_mostly  macro  arch/x86/include/asm/cache.h  10  #define __read_mostly __attribute__((__section__(".data..read_mostly")))
____cacheline_aligned  macro  include/linux/cache.h  20  #define ____cacheline_aligned __attribute__((__aligned__(SMP_CACHE_BYTES)))
____cacheline_aligned_in_smp  macro  include/linux/cache.h  27  #define ____cacheline_aligned_in_smp
__cacheline_aligned  macro  include/linux/cache.h  32  #define __cacheline_aligned __attribute__((__aligned__(SMP_CACHE_BYTES), __section__(".data..cacheline_aligned")))
__cacheline_aligned_in_smp  macro  arch/x86/include/asm/cache.h  17  #define __cacheline_aligned_in_smp __attribute__((__aligned__(INTERNODE_CACHE_BYTES))) __page_aligned_data
INTERNODE_CACHE_SHIFT  macro  arch/x86/include/asm/cache.h  12  #define INTERNODE_CACHE_SHIFT CONFIG_X86_INTERNODE_CACHE_SHIFT
____cacheline_internodealigned_in_smp  macro  include/linux/cache.h  59  #define ____cacheline_internodealigned_in_smp
cache_line_size  macro  arch/x86/include/asm/processor.h  164  #define cache_line_size() (boot_cpu_data.x86_cache_alignment)
__LINUX_KMOD_H__  macro  include/linux/kmod.h  2  #define __LINUX_KMOD_H__
KMOD_PATH_LEN  macro  include/linux/kmod.h  29  #define KMOD_PATH_LEN 256
__request_module  prototype  include/linux/kmod.h  36  int __request_module(bool wait,const char *name,...);
request_module  function  include/linux/kmod.h  42  static inline int request_module(const char *name,...) { return -ENOSYS; }
request_module_nowait  function  include/linux/kmod.h  43  static inline int request_module_nowait(const char *name,...) { return -ENOSYS; }
try_then_request_module  macro  include/linux/kmod.h  44  #define try_then_request_module(x,mod...) (x)
UMH_NO_WAIT  macro  include/linux/kmod.h  51  #define UMH_NO_WAIT 0
UMH_WAIT_EXEC  macro  include/linux/kmod.h  52  #define UMH_WAIT_EXEC 1
UMH_WAIT_PROC  macro  include/linux/kmod.h  53  #define UMH_WAIT_PROC 2
UMH_KILLABLE  macro  include/linux/kmod.h  54  #define UMH_KILLABLE 4
subprocess_info  struct  include/linux/kmod.h  56  struct subprocess_info { struct work_struct work; struct completion *complete; char *path; char **argv; char **envp; int wait; int retval; int (*init)(struct subprocess_info *info, struct cred *new); void (*cleanup)(struct subprocess_info *info); void *data; };
call_usermodehelper_fns  prototype  include/linux/kmod.h  70  call_usermodehelper_fns(char *path,char **argv,char **envp,int wait,int (*init)(struct subprocess_info *info, struct cred *new),void (*cleanup)(struct subprocess_info *), void *data);
call_usermodehelper  function  include/linux/kmod.h  75  call_usermodehelper(char *path,char **argv,char **envp,int wait)
umh_disable_depth  enum  include/linux/kmod.h  83  enum umh_disable_depth { UMH_ENABLED = 0, UMH_FREEZING, UMH_DISABLED, };
usermodehelper_init  prototype  include/linux/kmod.h  89  extern void usermodehelper_init(void);
__usermodehelper_disable  prototype  include/linux/kmod.h  91  extern int __usermodehelper_disable(enum umh_disable_depth depth);
__usermodehelper_set_disable_depth  prototype  include/linux/kmod.h  92  extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);
usermodehelper_disable  function  include/linux/kmod.h  94  static inline int usermodehelper_disable(void)
usermodehelper_enable  function  include/linux/kmod.h  99  static inline void usermodehelper_enable(void)
usermodehelper_read_trylock  prototype  include/linux/kmod.h  104  extern int usermodehelper_read_trylock(void);
usermodehelper_read_lock_wait  prototype  include/linux/kmod.h  105  extern long usermodehelper_read_lock_wait(long timeout);
usermodehelper_read_unlock  prototype  include/linux/kmod.h  106  extern void usermodehelper_read_unlock(void);
_LINUX_ELF_H  macro  include/linux/elf.h  2  #define _LINUX_ELF_H
PT_NULL  macro  include/linux/elf.h  28  #define PT_NULL 0
PT_LOAD  macro  include/linux/elf.h  29  #define PT_LOAD 1
PT_DYNAMIC  macro  include/linux/elf.h  30  #define PT_DYNAMIC 2
PT_INTERP  macro  include/linux/elf.h  31  #define PT_INTERP 3
PT_NOTE  macro  include/linux/elf.h  32  #define PT_NOTE 4
PT_SHLIB  macro  include/linux/elf.h  33  #define PT_SHLIB 5
PT_PHDR  macro  include/linux/elf.h  34  #define PT_PHDR 6
PT_TLS  macro  include/linux/elf.h  35  #define PT_TLS 7
PT_LOOS  macro  include/linux/elf.h  36  #define PT_LOOS 0x60000000
PT_HIOS  macro  include/linux/elf.h  37  #define PT_HIOS 0x6fffffff
PT_LOPROC  macro  include/linux/elf.h  38  #define PT_LOPROC 0x70000000
PT_HIPROC  macro  include/linux/elf.h  39  #define PT_HIPROC 0x7fffffff
PT_GNU_EH_FRAME  macro  include/linux/elf.h  40  #define PT_GNU_EH_FRAME 0x6474e550
PT_GNU_STACK  macro  include/linux/elf.h  42  #define PT_GNU_STACK (PT_LOOS + 0x474e551)
PN_XNUM  macro  include/linux/elf.h  64  #define PN_XNUM 0xffff
ET_NONE  macro  include/linux/elf.h  67  #define ET_NONE 0
ET_REL  macro  include/linux/elf.h  68  #define ET_REL 1
ET_EXEC  macro  include/linux/elf.h  69  #define ET_EXEC 2
ET_DYN  macro  include/linux/elf.h  70  #define ET_DYN 3
ET_CORE  macro  include/linux/elf.h  71  #define ET_CORE 4
ET_LOPROC  macro  include/linux/elf.h  72  #define ET_LOPROC 0xff00
ET_HIPROC  macro  include/linux/elf.h  73  #define ET_HIPROC 0xffff
DT_NULL  macro  include/linux/elf.h  76  #define DT_NULL 0
DT_NEEDED  macro  include/linux/elf.h  77  #define DT_NEEDED 1
DT_PLTRELSZ  macro  include/linux/elf.h  78  #define DT_PLTRELSZ 2
DT_PLTGOT  macro  include/linux/elf.h  79  #define DT_PLTGOT 3
DT_HASH  macro  include/linux/elf.h  80  #define DT_HASH 4
DT_STRTAB  macro  include/linux/elf.h  81  #define DT_STRTAB 5
DT_SYMTAB  macro  include/linux/elf.h  82  #define DT_SYMTAB 6
DT_RELA  macro  include/linux/elf.h  83  #define DT_RELA 7
DT_RELASZ  macro  include/linux/elf.h  84  #define DT_RELASZ 8
DT_RELAENT  macro  include/linux/elf.h  85  #define DT_RELAENT 9
DT_STRSZ  macro  include/linux/elf.h  86  #define DT_STRSZ 10
DT_SYMENT  macro  include/linux/elf.h  87  #define DT_SYMENT 11
DT_INIT  macro  include/linux/elf.h  88  #define DT_INIT 12
DT_FINI  macro  include/linux/elf.h  89  #define DT_FINI 13
DT_SONAME  macro  include/linux/elf.h  90  #define DT_SONAME 14
DT_RPATH  macro  include/linux/elf.h  91  #define DT_RPATH 15
DT_SYMBOLIC  macro  include/linux/elf.h  92  #define DT_SYMBOLIC 16
DT_REL  macro  include/linux/elf.h  93  #define DT_REL 17
DT_RELSZ  macro  include/linux/elf.h  94  #define DT_RELSZ 18
DT_RELENT  macro  include/linux/elf.h  95  #define DT_RELENT 19
DT_PLTREL  macro  include/linux/elf.h  96  #define DT_PLTREL 20
DT_DEBUG  macro  include/linux/elf.h  97  #define DT_DEBUG 21
DT_TEXTREL  macro  include/linux/elf.h  98  #define DT_TEXTREL 22
DT_JMPREL  macro  include/linux/elf.h  99  #define DT_JMPREL 23
DT_ENCODING  macro  include/linux/elf.h  100  #define DT_ENCODING 32
OLD_DT_LOOS  macro  include/linux/elf.h  101  #define OLD_DT_LOOS 0x60000000
DT_LOOS  macro  include/linux/elf.h  102  #define DT_LOOS 0x6000000d
DT_HIOS  macro  include/linux/elf.h  103  #define DT_HIOS 0x6ffff000
DT_VALRNGLO  macro  include/linux/elf.h  104  #define DT_VALRNGLO 0x6ffffd00
DT_VALRNGHI  macro  include/linux/elf.h  105  #define DT_VALRNGHI 0x6ffffdff
DT_ADDRRNGLO  macro  include/linux/elf.h  106  #define DT_ADDRRNGLO 0x6ffffe00
DT_ADDRRNGHI  macro  include/linux/elf.h  107  #define DT_ADDRRNGHI 0x6ffffeff
DT_VERSYM  macro  include/linux/elf.h  108  #define DT_VERSYM 0x6ffffff0
DT_RELACOUNT  macro  include/linux/elf.h  109  #define DT_RELACOUNT 0x6ffffff9
DT_RELCOUNT  macro  include/linux/elf.h  110  #define DT_RELCOUNT 0x6ffffffa
DT_FLAGS_1  macro  include/linux/elf.h  111  #define DT_FLAGS_1 0x6ffffffb
DT_VERDEF  macro  include/linux/elf.h  112  #define DT_VERDEF 0x6ffffffc
DT_VERDEFNUM  macro  include/linux/elf.h  113  #define DT_VERDEFNUM 0x6ffffffd
DT_VERNEED  macro  include/linux/elf.h  114  #define DT_VERNEED 0x6ffffffe
DT_VERNEEDNUM  macro  include/linux/elf.h  115  #define DT_VERNEEDNUM 0x6fffffff
OLD_DT_HIOS  macro  include/linux/elf.h  116  #define OLD_DT_HIOS 0x6fffffff
DT_LOPROC  macro  include/linux/elf.h  117  #define DT_LOPROC 0x70000000
DT_HIPROC  macro  include/linux/elf.h  118  #define DT_HIPROC 0x7fffffff
STB_LOCAL  macro  include/linux/elf.h  121  #define STB_LOCAL 0
STB_GLOBAL  macro  include/linux/elf.h  122  #define STB_GLOBAL 1
STB_WEAK  macro  include/linux/elf.h  123  #define STB_WEAK 2
STT_NOTYPE  macro  include/linux/elf.h  125  #define STT_NOTYPE 0
STT_OBJECT  macro  include/linux/elf.h  126  #define STT_OBJECT 1
STT_FUNC  macro  include/linux/elf.h  127  #define STT_FUNC 2
STT_SECTION  macro  include/linux/elf.h  128  #define STT_SECTION 3
STT_FILE  macro  include/linux/elf.h  129  #define STT_FILE 4
STT_COMMON  macro  include/linux/elf.h  130  #define STT_COMMON 5
STT_TLS  macro  include/linux/elf.h  131  #define STT_TLS 6
ELF_ST_BIND  macro  include/linux/elf.h  133  #define ELF_ST_BIND(x) ((x) >> 4)
ELF_ST_TYPE  macro  include/linux/elf.h  134  #define ELF_ST_TYPE(x) (((unsigned int) x) & 0xf)
ELF32_ST_BIND  macro  include/linux/elf.h  135  #define ELF32_ST_BIND(x) ELF_ST_BIND(x)
ELF32_ST_TYPE  macro  include/linux/elf.h  136  #define ELF32_ST_TYPE(x) ELF_ST_TYPE(x)
ELF64_ST_BIND  macro  include/linux/elf.h  137  #define ELF64_ST_BIND(x) ELF_ST_BIND(x)
ELF64_ST_TYPE  macro  include/linux/elf.h  138  #define ELF64_ST_TYPE(x) ELF_ST_TYPE(x)
dynamic  struct  include/linux/elf.h  140  typedef struct dynamic{ Elf32_Sword d_tag; union { Elf32_Sword d_val; Elf32_Addr d_ptr; } d_un; } Elf32_Dyn;
Elf32_Dyn  struct  include/linux/elf.h  140  typedef struct dynamic{ Elf32_Sword d_tag; union { Elf32_Sword d_val; Elf32_Addr d_ptr; } d_un; } Elf32_Dyn;
Elf64_Dyn  struct  include/linux/elf.h  148  typedef struct { Elf64_Sxword d_tag; Elf64_Xword d_val; Elf64_Addr d_ptr; } d_un; } Elf64_Dyn;
ELF32_R_SYM  macro  include/linux/elf.h  157  #define ELF32_R_SYM(x) ((x) >> 8)
ELF32_R_TYPE  macro  include/linux/elf.h  158  #define ELF32_R_TYPE(x) ((x) & 0xff)
ELF64_R_SYM  macro  include/linux/elf.h  160  #define ELF64_R_SYM(i) ((i) >> 32)
ELF64_R_TYPE  macro  include/linux/elf.h  161  #define ELF64_R_TYPE(i) ((i) & 0xffffffff)
elf32_rel  struct  include/linux/elf.h  163  typedef struct elf32_rel { Elf32_Addr r_offset; Elf32_Word r_info; } Elf32_Rel;
Elf32_Rel  struct  include/linux/elf.h  163  typedef struct elf32_rel { Elf32_Addr r_offset; Elf32_Word r_info; } Elf32_Rel;
elf64_rel  struct  include/linux/elf.h  168  typedef struct elf64_rel { Elf64_Addr r_offset; Elf64_Xword r_info; } Elf64_Rel;
Elf64_Rel  struct  include/linux/elf.h  168  typedef struct elf64_rel { Elf64_Addr r_offset; Elf64_Xword r_info; } Elf64_Rel;
elf32_rela  struct  include/linux/elf.h  173  typedef struct elf32_rela{ Elf32_Addr r_offset; Elf32_Word r_info; Elf32_Sword r_addend; } Elf32_Rela;
Elf32_Rela  struct  include/linux/elf.h  173  typedef struct elf32_rela{ Elf32_Addr r_offset; Elf32_Word r_info; Elf32_Sword r_addend; } Elf32_Rela;
elf64_rela  struct  include/linux/elf.h  179  typedef struct elf64_rela { Elf64_Addr r_offset; Elf64_Xword r_info; Elf64_Sxword r_addend; } Elf64_Rela;
Elf64_Rela  struct  include/linux/elf.h  179  typedef struct elf64_rela { Elf64_Addr r_offset; Elf64_Xword r_info; Elf64_Sxword r_addend; } Elf64_Rela;
elf32_sym  struct  include/linux/elf.h  185  typedef struct elf32_sym{ Elf32_Word st_name; Elf32_Addr st_value; Elf32_Word st_size; unsigned char st_info; unsigned char st_other; Elf32_Half st_shndx; } Elf32_Sym;
Elf32_Sym  struct  include/linux/elf.h  185  typedef struct elf32_sym{ Elf32_Word st_name; Elf32_Addr st_value; Elf32_Word st_size; unsigned char st_info; unsigned char st_other; Elf32_Half st_shndx; } Elf32_Sym;
elf64_sym  struct  include/linux/elf.h  194  typedef struct elf64_sym { Elf64_Word st_name; unsigned char st_info; unsigned char st_other; Elf64_Half st_shndx; Elf64_Addr st_value; Elf64_Xword st_size; } Elf64_Sym;
Elf64_Sym  struct  include/linux/elf.h  194  typedef struct elf64_sym { Elf64_Word st_name; unsigned char st_info; unsigned char st_other; Elf64_Half st_shndx; Elf64_Addr st_value; Elf64_Xword st_size; } Elf64_Sym;
EI_NIDENT  macro  include/linux/elf.h  204  #define EI_NIDENT 16
elf32_hdr  struct  include/linux/elf.h  206  typedef struct elf32_hdr{ unsigned char e_ident[EI_NIDENT]; Elf32_Half e_type; Elf32_Half e_machine; Elf32_Word e_version; Elf32_Addr e_entry; Elf32_Off e_phoff; Elf32_Off e_shoff; Elf32_Word e_flags; Elf32_Half e_ehsize; Elf32_Half e_phentsize; Elf32_Half e_phnum; Elf32_Half e_shentsize; Elf32_Half e_shnum; Elf32_Half e_shstrndx; } Elf32_Ehdr;
Elf32_Ehdr  struct  include/linux/elf.h  206  typedef struct elf32_hdr{ unsigned char e_ident[EI_NIDENT]; Elf32_Half e_type; Elf32_Half e_machine; Elf32_Word e_version; Elf32_Addr e_entry; Elf32_Off e_phoff; Elf32_Off e_shoff; Elf32_Word e_flags; Elf32_Half e_ehsize; Elf32_Half e_phentsize; Elf32_Half e_phnum; Elf32_Half e_shentsize; Elf32_Half e_shnum; Elf32_Half e_shstrndx; } Elf32_Ehdr;
elf64_hdr  struct  include/linux/elf.h  223  typedef struct elf64_hdr { unsigned char e_ident[EI_NIDENT]; Elf64_Half e_type; Elf64_Half e_machine; Elf64_Word e_version; Elf64_Addr e_entry; Elf64_Off e_phoff; Elf64_Off e_shoff; Elf64_Word e_flags; Elf64_Half e_ehsize; Elf64_Half e_phentsize; Elf64_Half e_phnum; Elf64_Half e_shentsize; Elf64_Half e_shnum; Elf64_Half e_shstrndx; } Elf64_Ehdr;
Elf64_Ehdr  struct  include/linux/elf.h  223  typedef struct elf64_hdr { unsigned char e_ident[EI_NIDENT]; Elf64_Half e_type; Elf64_Half e_machine; Elf64_Word e_version; Elf64_Addr e_entry; Elf64_Off e_phoff; Elf64_Off e_shoff; Elf64_Word e_flags; Elf64_Half e_ehsize; Elf64_Half e_phentsize; Elf64_Half e_phnum; Elf64_Half e_shentsize; Elf64_Half e_shnum; Elf64_Half e_shstrndx; } Elf64_Ehdr;
PF_R  macro  include/linux/elf.h  242  #define PF_R 0x4
PF_W  macro  include/linux/elf.h  243  #define PF_W 0x2
PF_X  macro  include/linux/elf.h  244  #define PF_X 0x1
elf32_phdr  struct  include/linux/elf.h  246  typedef struct elf32_phdr{ Elf32_Word p_type; Elf32_Off p_offset; Elf32_Addr p_vaddr; Elf32_Addr p_paddr; Elf32_Word p_filesz; Elf32_Word p_memsz; Elf32_Word p_flags; Elf32_Word p_align; } Elf32_Phdr;
Elf32_Phdr  struct  include/linux/elf.h  246  typedef struct elf32_phdr{ Elf32_Word p_type; Elf32_Off p_offset; Elf32_Addr p_vaddr; Elf32_Addr p_paddr; Elf32_Word p_filesz; Elf32_Word p_memsz; Elf32_Word p_flags; Elf32_Word p_align; } Elf32_Phdr;
elf64_phdr  struct  include/linux/elf.h  257  typedef struct elf64_phdr { Elf64_Word p_type; Elf64_Word p_flags; Elf64_Off p_offset; Elf64_Addr p_vaddr; Elf64_Addr p_paddr; Elf64_Xword p_filesz; Elf64_Xword p_memsz; Elf64_Xword p_align; } Elf64_Phdr;
Elf64_Phdr  struct  include/linux/elf.h  257  typedef struct elf64_phdr { Elf64_Word p_type; Elf64_Word p_flags; Elf64_Off p_offset; Elf64_Addr p_vaddr; Elf64_Addr p_paddr; Elf64_Xword p_filesz; Elf64_Xword p_memsz; Elf64_Xword p_align; } Elf64_Phdr;
SHT_NULL  macro  include/linux/elf.h  269  #define SHT_NULL 0
SHT_PROGBITS  macro  include/linux/elf.h  270  #define SHT_PROGBITS 1
SHT_SYMTAB  macro  include/linux/elf.h  271  #define SHT_SYMTAB 2
SHT_STRTAB  macro  include/linux/elf.h  272  #define SHT_STRTAB 3
SHT_RELA  macro  include/linux/elf.h  273  #define SHT_RELA 4
SHT_HASH  macro  include/linux/elf.h  274  #define SHT_HASH 5
SHT_DYNAMIC  macro  include/linux/elf.h  275  #define SHT_DYNAMIC 6
SHT_NOTE  macro  include/linux/elf.h  276  #define SHT_NOTE 7
SHT_NOBITS  macro  include/linux/elf.h  277  #define SHT_NOBITS 8
SHT_REL  macro  include/linux/elf.h  278  #define SHT_REL 9
SHT_SHLIB  macro  include/linux/elf.h  279  #define SHT_SHLIB 10
SHT_DYNSYM  macro  include/linux/elf.h  280  #define SHT_DYNSYM 11
SHT_NUM  macro  include/linux/elf.h  281  #define SHT_NUM 12
SHT_LOPROC  macro  include/linux/elf.h  282  #define SHT_LOPROC 0x70000000
SHT_HIPROC  macro  include/linux/elf.h  283  #define SHT_HIPROC 0x7fffffff
SHT_LOUSER  macro  include/linux/elf.h  284  #define SHT_LOUSER 0x80000000
SHT_HIUSER  macro  include/linux/elf.h  285  #define SHT_HIUSER 0xffffffff
SHF_WRITE  macro  include/linux/elf.h  288  #define SHF_WRITE 0x1
SHF_ALLOC  macro  include/linux/elf.h  289  #define SHF_ALLOC 0x2
SHF_EXECINSTR  macro  include/linux/elf.h  290  #define SHF_EXECINSTR 0x4
SHF_MASKPROC  macro  include/linux/elf.h  291  #define SHF_MASKPROC 0xf0000000
SHN_UNDEF  macro  include/linux/elf.h  294  #define SHN_UNDEF 0
SHN_LORESERVE  macro  include/linux/elf.h  295  #define SHN_LORESERVE 0xff00
SHN_LOPROC  macro  include/linux/elf.h  296  #define SHN_LOPROC 0xff00
SHN_HIPROC  macro  include/linux/elf.h  297  #define SHN_HIPROC 0xff1f
SHN_ABS  macro  include/linux/elf.h  298  #define SHN_ABS 0xfff1
SHN_COMMON  macro  include/linux/elf.h  299  #define SHN_COMMON 0xfff2
SHN_HIRESERVE  macro  include/linux/elf.h  300  #define SHN_HIRESERVE 0xffff
elf32_shdr  struct  include/linux/elf.h  302  typedef struct elf32_shdr { Elf32_Word sh_name; Elf32_Word sh_type; Elf32_Word sh_flags; Elf32_Addr sh_addr; Elf32_Off sh_offset; Elf32_Word sh_size; Elf32_Word sh_link; Elf32_Word sh_info; Elf32_Word sh_addralign; Elf32_Word sh_entsize; } Elf32_Shdr;
Elf32_Shdr  struct  include/linux/elf.h  302  typedef struct elf32_shdr { Elf32_Word sh_name; Elf32_Word sh_type; Elf32_Word sh_flags; Elf32_Addr sh_addr; Elf32_Off sh_offset; Elf32_Word sh_size; Elf32_Word sh_link; Elf32_Word sh_info; Elf32_Word sh_addralign; Elf32_Word sh_entsize; } Elf32_Shdr;
elf64_shdr  struct  include/linux/elf.h  315  typedef struct elf64_shdr { Elf64_Word sh_name; Elf64_Word sh_type; Elf64_Xword sh_flags; Elf64_Addr sh_addr; Elf64_Off sh_offset; Elf64_Xword sh_size; Elf64_Word sh_link; Elf64_Word sh_info; Elf64_Xword sh_addralign; Elf64_Xword sh_entsize; } Elf64_Shdr;
Elf64_Shdr  struct  include/linux/elf.h  315  typedef struct elf64_shdr { Elf64_Word sh_name; Elf64_Word sh_type; Elf64_Xword sh_flags; Elf64_Addr sh_addr; Elf64_Off sh_offset; Elf64_Xword sh_size; Elf64_Word sh_link; Elf64_Word sh_info; Elf64_Xword sh_addralign; Elf64_Xword sh_entsize; } Elf64_Shdr;
EI_MAG0  macro  include/linux/elf.h  328  #define EI_MAG0 0
EI_MAG1  macro  include/linux/elf.h  329  #define EI_MAG1 1
EI_MAG2  macro  include/linux/elf.h  330  #define EI_MAG2 2
EI_MAG3  macro  include/linux/elf.h  331  #define EI_MAG3 3
EI_CLASS  macro  include/linux/elf.h  332  #define EI_CLASS 4
EI_DATA  macro  include/linux/elf.h  333  #define EI_DATA 5
EI_VERSION  macro  include/linux/elf.h  334  #define EI_VERSION 6
EI_OSABI  macro  include/linux/elf.h  335  #define EI_OSABI 7
EI_PAD  macro  include/linux/elf.h  336  #define EI_PAD 8
ELFMAG0  macro  include/linux/elf.h  338  #define ELFMAG0 0x7f
ELFMAG1  macro  include/linux/elf.h  339  #define ELFMAG1 'E'
ELFMAG2  macro  include/linux/elf.h  340  #define ELFMAG2 'L'
ELFMAG3  macro  include/linux/elf.h  341  #define ELFMAG3 'F'
ELFMAG  macro  include/linux/elf.h  342  #define ELFMAG "\177ELF"
SELFMAG  macro  include/linux/elf.h  343  #define SELFMAG 4
ELFCLASSNONE  macro  include/linux/elf.h  345  #define ELFCLASSNONE 0
ELFCLASS32  macro  include/linux/elf.h  346  #define ELFCLASS32 1
ELFCLASS64  macro  include/linux/elf.h  347  #define ELFCLASS64 2
ELFCLASSNUM  macro  include/linux/elf.h  348  #define ELFCLASSNUM 3
ELFDATANONE  macro  include/linux/elf.h  350  #define ELFDATANONE 0
ELFDATA2LSB  macro  include/linux/elf.h  351  #define ELFDATA2LSB 1
ELFDATA2MSB  macro  include/linux/elf.h  352  #define ELFDATA2MSB 2
EV_NONE  macro  include/linux/elf.h  354  #define EV_NONE 0
EV_CURRENT  macro  include/linux/elf.h  355  #define EV_CURRENT 1
EV_NUM  macro  include/linux/elf.h  356  #define EV_NUM 2
ELFOSABI_NONE  macro  include/linux/elf.h  358  #define ELFOSABI_NONE 0
ELFOSABI_LINUX  macro  include/linux/elf.h  359  #define ELFOSABI_LINUX 3
ELF_OSABI  macro  include/linux/elf.h  362  #define ELF_OSABI ELFOSABI_NONE
NT_PRSTATUS  macro  include/linux/elf.h  370  #define NT_PRSTATUS 1
NT_PRFPREG  macro  include/linux/elf.h  371  #define NT_PRFPREG 2
NT_PRPSINFO  macro  include/linux/elf.h  372  #define NT_PRPSINFO 3
NT_TASKSTRUCT  macro  include/linux/elf.h  373  #define NT_TASKSTRUCT 4
NT_AUXV  macro  include/linux/elf.h  374  #define NT_AUXV 6
NT_PRXFPREG  macro  include/linux/elf.h  375  #define NT_PRXFPREG 0x46e62b7f
NT_PPC_VMX  macro  include/linux/elf.h  376  #define NT_PPC_VMX 0x100
NT_PPC_SPE  macro  include/linux/elf.h  377  #define NT_PPC_SPE 0x101
NT_PPC_VSX  macro  include/linux/elf.h  378  #define NT_PPC_VSX 0x102
NT_386_TLS  macro  include/linux/elf.h  379  #define NT_386_TLS 0x200
NT_386_IOPERM  macro  include/linux/elf.h  380  #define NT_386_IOPERM 0x201
NT_X86_XSTATE  macro  include/linux/elf.h  381  #define NT_X86_XSTATE 0x202
NT_S390_HIGH_GPRS  macro  include/linux/elf.h  382  #define NT_S390_HIGH_GPRS 0x300
NT_S390_TIMER  macro  include/linux/elf.h  383  #define NT_S390_TIMER 0x301
NT_S390_TODCMP  macro  include/linux/elf.h  384  #define NT_S390_TODCMP 0x302
NT_S390_TODPREG  macro  include/linux/elf.h  385  #define NT_S390_TODPREG 0x303
NT_S390_CTRS  macro  include/linux/elf.h  386  #define NT_S390_CTRS 0x304
NT_S390_PREFIX  macro  include/linux/elf.h  387  #define NT_S390_PREFIX 0x305
NT_S390_LAST_BREAK  macro  include/linux/elf.h  388  #define NT_S390_LAST_BREAK 0x306
NT_S390_SYSTEM_CALL  macro  include/linux/elf.h  389  #define NT_S390_SYSTEM_CALL 0x307
NT_ARM_VFP  macro  include/linux/elf.h  390  #define NT_ARM_VFP 0x400
elf32_note  struct  include/linux/elf.h  394  typedef struct elf32_note { Elf32_Word n_namesz; Elf32_Word n_descsz; Elf32_Word n_type; } Elf32_Nhdr;
Elf32_Nhdr  struct  include/linux/elf.h  394  typedef struct elf32_note { Elf32_Word n_namesz; Elf32_Word n_descsz; Elf32_Word n_type; } Elf32_Nhdr;
elf64_note  struct  include/linux/elf.h  401  typedef struct elf64_note { Elf64_Word n_namesz; Elf64_Word n_descsz; Elf64_Word n_type; } Elf64_Nhdr;
Elf64_Nhdr  struct  include/linux/elf.h  401  typedef struct elf64_note { Elf64_Word n_namesz; Elf64_Word n_descsz; Elf64_Word n_type; } Elf64_Nhdr;
elf_read_implies_exec  macro  arch/x86/include/asm/elf.h  267  #define elf_read_implies_exec(ex,executable_stack) (executable_stack != EXSTACK_DISABLE_X)
elfhdr  macro  include/linux/elf.h  428  #define elfhdr elf64_hdr
elf_phdr  macro  include/linux/elf.h  429  #define elf_phdr elf64_phdr
elf_shdr  macro  include/linux/elf.h  430  #define elf_shdr elf64_shdr
elf_note  macro  include/linux/elf.h  431  #define elf_note elf64_note
elf_addr_t  macro  include/linux/elf.h  432  #define elf_addr_t Elf64_Off
Elf_Half  macro  include/linux/elf.h  433  #define Elf_Half Elf64_Half
elf_coredump_extra_notes_size  prototype  include/linux/elf.h  445  extern int elf_coredump_extra_notes_size(void);
elf_coredump_extra_notes_write  prototype  include/linux/elf.h  446  extern int elf_coredump_extra_notes_write(struct file *file,loff_t *foffset);
__LINUX_STRINGIFY_H  macro  include/linux/stringify.h  2  #define __LINUX_STRINGIFY_H
__stringify_1  macro  include/linux/stringify.h  9  #define __stringify_1(x...) #x
__stringify  macro  include/linux/stringify.h  10  #define __stringify(x...) __stringify_1(x)
_KOBJECT_H_  macro  include/linux/kobject.h  17  #define _KOBJECT_H_
UEVENT_HELPER_PATH_LEN  macro  include/linux/kobject.h  30  #define UEVENT_HELPER_PATH_LEN 256
UEVENT_NUM_ENVP  macro  include/linux/kobject.h  31  #define UEVENT_NUM_ENVP 32
UEVENT_BUFFER_SIZE  macro  include/linux/kobject.h  32  #define UEVENT_BUFFER_SIZE 2048
kobject_action  enum  include/linux/kobject.h  50  enum kobject_action { KOBJ_ADD, KOBJ_REMOVE, KOBJ_CHANGE, KOBJ_MOVE, KOBJ_ONLINE, KOBJ_OFFLINE, KOBJ_MAX };
kobject  struct  include/linux/kobject.h  60  struct kobject { const char *name; struct list_head entry; struct kobject *parent; struct kset *kset; struct kobj_type *ktype; struct sysfs_dirent *sd; struct kref kref; unsigned int state_initialized:1; unsigned int state_in_sysfs:1; unsigned int state_add_uevent_sent:1; unsigned int state_remove_uevent_sent:1; unsigned int uevent_suppress:1; };
kobject_set_name  prototype  include/linux/kobject.h  76  int kobject_set_name(struct kobject *kobj,const char *name,...);
kobject_set_name_vargs  prototype  include/linux/kobject.h  77  extern int kobject_set_name_vargs(struct kobject *kobj,const char *fmt,va_list vargs);
kobject_name  function  include/linux/kobject.h  80  static inline const char *kobject_name(const struct kobject *kobj)
kobject_init  prototype  include/linux/kobject.h  85  extern void kobject_init(struct kobject *kobj,struct kobj_type *ktype);
kobject_add  prototype  include/linux/kobject.h  87  int kobject_add(struct kobject *kobj,struct kobject *parent,const char *fmt, ...);
kobject_init_and_add  prototype  include/linux/kobject.h  90  int kobject_init_and_add(struct kobject *kobj,struct kobj_type *ktype, struct kobject *parent,const char *fmt, ...);
kobject_del  prototype  include/linux/kobject.h  94  extern void kobject_del(struct kobject *kobj);
kobject_create  prototype  include/linux/kobject.h  96  extern struct kobject * __must_check kobject_create(void);
kobject_create_and_add  prototype  include/linux/kobject.h  97  extern struct kobject * __must_check kobject_create_and_add(const char *name,struct kobject *parent);
kobject_rename  prototype  include/linux/kobject.h  100  extern int __must_check kobject_rename(struct kobject *,const char *new_name);
kobject_move  prototype  include/linux/kobject.h  101  extern int __must_check kobject_move(struct kobject *,struct kobject *);
kobject_get  prototype  include/linux/kobject.h  103  extern struct kobject *kobject_get(struct kobject *kobj);
kobject_put  prototype  include/linux/kobject.h  104  extern void kobject_put(struct kobject *kobj);
kobject_get_path  prototype  include/linux/kobject.h  106  extern char *kobject_get_path(struct kobject *kobj,gfp_t flag);
kobj_type  struct  include/linux/kobject.h  108  struct kobj_type { void (*release)(struct kobject *kobj); const struct sysfs_ops *sysfs_ops; struct attribute **default_attrs; const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj); };
kobj_uevent_env  struct  include/linux/kobject.h  116  struct kobj_uevent_env { char *envp[UEVENT_NUM_ENVP]; int envp_idx; char buf[UEVENT_BUFFER_SIZE]; int buflen; };
kset_uevent_ops  struct  include/linux/kobject.h  123  struct kset_uevent_ops { int (* const filter)(struct kset *kset, struct kobject *kobj); const char *(* const name)(struct kset *kset, struct kobject *kobj); int (* const uevent)(struct kset *kset, struct kobject *kobj,struct kobj_uevent_env *env); };
kobj_attribute  struct  include/linux/kobject.h  130  struct kobj_attribute { struct attribute attr; ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,char *buf); ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count); };
kset  struct  include/linux/kobject.h  159  struct kset { struct list_head list; spinlock_t list_lock; struct kobject kobj; const struct kset_uevent_ops *uevent_ops; };
kset_init  prototype  include/linux/kobject.h  166  extern void kset_init(struct kset *kset);
kset_register  prototype  include/linux/kobject.h  167  extern int __must_check kset_register(struct kset *kset);
kset_unregister  prototype  include/linux/kobject.h  168  extern void kset_unregister(struct kset *kset);
kset_create_and_add  prototype  include/linux/kobject.h  169  extern struct kset * __must_check kset_create_and_add(const char *name,const struct kset_uevent_ops *u,struct kobject *parent_kobj);
to_kset  function  include/linux/kobject.h  173  static inline struct kset *to_kset(struct kobject *kobj)
kset_get  function  include/linux/kobject.h  178  static inline struct kset *kset_get(struct kset *k)
kset_put  function  include/linux/kobject.h  183  static inline void kset_put(struct kset *k)
get_ktype  function  include/linux/kobject.h  188  static inline struct kobj_type *get_ktype(struct kobject *kobj)
kset_find_obj  prototype  include/linux/kobject.h  193  extern struct kobject *kset_find_obj(struct kset *,const char *);
kobject_uevent  function  include/linux/kobject.h  217  static inline int kobject_uevent(struct kobject *kobj,enum kobject_action action)
kobject_uevent_env  function  include/linux/kobject.h  220  static inline int kobject_uevent_env(struct kobject *kobj,enum kobject_action action,char *envp[])
add_uevent_var  function  include/linux/kobject.h  226  int add_uevent_var(struct kobj_uevent_env *env,const char *format,...)
kobject_action_type  function  include/linux/kobject.h  229  static inline int kobject_action_type(const char *buf,size_t count,enum kobject_action *type)
_LINUX_TRACEPOINT_H  macro  include/linux/tracepoint.h  2  #define _LINUX_TRACEPOINT_H
tracepoint_func  struct  include/linux/tracepoint.h  25  struct tracepoint_func { void *func; void *data; };
tracepoint  struct  include/linux/tracepoint.h  30  struct tracepoint { const char *name; struct static_key key; void (*regfunc)(void); void (*unregfunc)(void); struct tracepoint_func __rcu *funcs; };
tracepoint_probe_register  prototype  include/linux/tracepoint.h  42  extern int tracepoint_probe_register(const char *name,void *probe,void *data);
tracepoint_probe_unregister  prototype  include/linux/tracepoint.h  49  tracepoint_probe_unregister(const char *name,void *probe,void *data);
tracepoint_probe_register_noupdate  prototype  include/linux/tracepoint.h  51  extern int tracepoint_probe_register_noupdate(const char *name,void *probe,void *data);
tracepoint_probe_unregister_noupdate  prototype  include/linux/tracepoint.h  53  extern int tracepoint_probe_unregister_noupdate(const char *name,void *probe,void *data);
tracepoint_probe_update_all  prototype  include/linux/tracepoint.h  55  extern void tracepoint_probe_update_all(void);
tp_module  struct  include/linux/tracepoint.h  58  struct tp_module { struct list_head list; unsigned int num_tracepoints; struct tracepoint * const *tracepoints_ptrs; };
tracepoint_iter  struct  include/linux/tracepoint.h  65  struct tracepoint_iter { struct tp_module *module; struct tracepoint * const *tracepoint; };
tracepoint_iter_start  prototype  include/linux/tracepoint.h  72  extern void tracepoint_iter_start(struct tracepoint_iter *iter);
tracepoint_iter_next  prototype  include/linux/tracepoint.h  73  extern void tracepoint_iter_next(struct tracepoint_iter *iter);
tracepoint_iter_stop  prototype  include/linux/tracepoint.h  74  extern void tracepoint_iter_stop(struct tracepoint_iter *iter);
tracepoint_iter_reset  prototype  include/linux/tracepoint.h  75  extern void tracepoint_iter_reset(struct tracepoint_iter *iter);
tracepoint_synchronize_unregister  function  include/linux/tracepoint.h  82  static inline void tracepoint_synchronize_unregister(void)
PARAMS  macro  include/linux/tracepoint.h  87  #define PARAMS(args...) args
TP_PROTO  macro  include/linux/tracepoint.h  101  #define TP_PROTO(args...) args
TP_ARGS  macro  include/linux/tracepoint.h  102  #define TP_ARGS(args...) args
TP_CONDITION  macro  include/linux/tracepoint.h  103  #define TP_CONDITION(args...) args
__DO_TRACE  macro  include/linux/tracepoint.h  117  #define __DO_TRACE(tp,proto,args,cond,prercu,postrcu) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cond)) return; prercu; rcu_read_lock_sched_notrace(); it_func_ptr = rcu_dereference_sched((tp)->funcs); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(proto))(it_func))(args); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); postrcu; } while (0)
__DECLARE_TRACE  macro  include/linux/tracepoint.h  205  #define __DECLARE_TRACE(name,proto,args,cond,data_proto,data_args) static inline void trace_##name(proto) { } static inline void trace_##name##_rcuidle(proto) { } static inline int register_trace_##name(void (*probe)(data_proto), void *data) { return -ENOSYS; } static inline int unregister_trace_##name(void (*probe)(data_proto), void *data) { return -ENOSYS; } static inline void check_trace_callback_type_##name(void (*cb)(data_proto)) { }
DEFINE_TRACE_FN  macro  include/linux/tracepoint.h  226  #define DEFINE_TRACE_FN(name,reg,unreg)
DEFINE_TRACE  macro  include/linux/tracepoint.h  227  #define DEFINE_TRACE(name)
EXPORT_TRACEPOINT_SYMBOL_GPL  macro  include/linux/tracepoint.h  228  #define EXPORT_TRACEPOINT_SYMBOL_GPL(name)
EXPORT_TRACEPOINT_SYMBOL  macro  include/linux/tracepoint.h  229  #define EXPORT_TRACEPOINT_SYMBOL(name)
DECLARE_TRACE_NOARGS  macro  include/linux/tracepoint.h  247  #define DECLARE_TRACE_NOARGS(name) __DECLARE_TRACE(name, void, , 1, void *__data, __data)
DECLARE_TRACE  macro  include/linux/tracepoint.h  250  #define DECLARE_TRACE(name,proto,args) __DECLARE_TRACE(name, PARAMS(proto), PARAMS(args), 1, PARAMS(void *__data, proto), PARAMS(__data, args))
DECLARE_TRACE_CONDITION  macro  include/linux/tracepoint.h  255  #define DECLARE_TRACE_CONDITION(name,proto,args,cond) __DECLARE_TRACE(name, PARAMS(proto), PARAMS(args), PARAMS(cond), PARAMS(void *__data, proto), PARAMS(__data, args))
TRACE_EVENT_FLAGS  macro  include/linux/tracepoint.h  390  #define TRACE_EVENT_FLAGS(event,flag)
DECLARE_EVENT_CLASS  macro  include/linux/tracepoint.h  370  #define DECLARE_EVENT_CLASS(name,proto,args,tstruct,assign,print)
DEFINE_EVENT  macro  include/linux/tracepoint.h  371  #define DEFINE_EVENT(template,name,proto,args) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
DEFINE_EVENT_PRINT  macro  include/linux/tracepoint.h  373  #define DEFINE_EVENT_PRINT(template,name,proto,args,print) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
DEFINE_EVENT_CONDITION  macro  include/linux/tracepoint.h  375  #define DEFINE_EVENT_CONDITION(template,name,proto, args, cond) DECLARE_TRACE_CONDITION(name, PARAMS(proto), PARAMS(args), PARAMS(cond))
TRACE_EVENT  macro  include/linux/tracepoint.h  380  #define TRACE_EVENT(name,proto,args,struct,assign,print) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
TRACE_EVENT_FN  macro  include/linux/tracepoint.h  382  #define TRACE_EVENT_FN(name,proto,args,struct, assign, print, reg, unreg) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
TRACE_EVENT_CONDITION  macro  include/linux/tracepoint.h  385  #define TRACE_EVENT_CONDITION(name,proto,args,cond, struct, assign, print) DECLARE_TRACE_CONDITION(name, PARAMS(proto), PARAMS(args), PARAMS(cond))
_LINUX_EXPORT_H  macro  include/linux/export.h  2  #define _LINUX_EXPORT_H
MODULE_SYMBOL_PREFIX  macro  include/linux/export.h  16  #define MODULE_SYMBOL_PREFIX ""
kernel_symbol  struct  include/linux/export.h  19  struct kernel_symbol { unsigned long value; const char *name; };
THIS_MODULE  macro  include/linux/export.h  29  #define THIS_MODULE ((struct module *)0)
__CRC_SYMBOL  macro  include/linux/export.h  45  #define __CRC_SYMBOL(sym,sec)
__EXPORT_SYMBOL  macro  include/linux/export.h  49  #define __EXPORT_SYMBOL(sym,sec) extern typeof(sym) sym; __CRC_SYMBOL(sym, sec) static const char __kstrtab_##sym[] __attribute__((section("__ksymtab_strings"), aligned(1))) = MODULE_SYMBOL_PREFIX #sym; static const struct kernel_symbol __ksymtab_##sym __used __attribute__((section("___ksymtab" sec "+" #sym), unused)) = { (unsigned long)&sym, __kstrtab_##sym }
EXPORT_SYMBOL  macro  include/linux/export.h  81  #define EXPORT_SYMBOL(sym)
EXPORT_SYMBOL_GPL  macro  include/linux/export.h  82  #define EXPORT_SYMBOL_GPL(sym)
EXPORT_SYMBOL_GPL_FUTURE  macro  include/linux/export.h  83  #define EXPORT_SYMBOL_GPL_FUTURE(sym)
EXPORT_UNUSED_SYMBOL  macro  include/linux/export.h  84  #define EXPORT_UNUSED_SYMBOL(sym)
EXPORT_UNUSED_SYMBOL_GPL  macro  include/linux/export.h  85  #define EXPORT_UNUSED_SYMBOL_GPL(sym)
__LINUX_PERCPU_H  macro  include/linux/percpu.h  2  #define __LINUX_PERCPU_H
PERCPU_MODULE_RESERVE  macro  include/linux/percpu.h  16  #define PERCPU_MODULE_RESERVE 0
PERCPU_ENOUGH_ROOM  macro  include/linux/percpu.h  20  #define PERCPU_ENOUGH_ROOM (ALIGN(__per_cpu_end - __per_cpu_start, SMP_CACHE_BYTES) + PERCPU_MODULE_RESERVE)
get_cpu_var  macro  include/linux/percpu.h  29  #define get_cpu_var(var) (*({ preempt_disable(); &__get_cpu_var(var); }))
put_cpu_var  macro  include/linux/percpu.h  37  #define put_cpu_var(var) do { (void)&(var); preempt_enable(); } while (0)
get_cpu_ptr  macro  include/linux/percpu.h  42  #define get_cpu_ptr(var) ({ preempt_disable(); this_cpu_ptr(var); })
put_cpu_ptr  macro  include/linux/percpu.h  46  #define put_cpu_ptr(var) do { (void)(var); preempt_enable(); } while (0)
PCPU_MIN_UNIT_SIZE  macro  include/linux/percpu.h  52  #define PCPU_MIN_UNIT_SIZE PFN_ALIGN(32 << 10)
PERCPU_DYNAMIC_EARLY_SLOTS  macro  include/linux/percpu.h  61  #define PERCPU_DYNAMIC_EARLY_SLOTS 128
PERCPU_DYNAMIC_EARLY_SIZE  macro  include/linux/percpu.h  62  #define PERCPU_DYNAMIC_EARLY_SIZE (12 << 10)
PERCPU_DYNAMIC_RESERVE  macro  include/linux/percpu.h  78  #define PERCPU_DYNAMIC_RESERVE (12 << 10)
pcpu_group_info  struct  include/linux/percpu.h  84  struct pcpu_group_info { int nr_units; unsigned long base_offset; unsigned int *cpu_map; };
pcpu_alloc_info  struct  include/linux/percpu.h  91  struct pcpu_alloc_info { size_t static_size; size_t reserved_size; size_t dyn_size; size_t unit_size; size_t atom_size; size_t alloc_size; size_t __ai_size; int nr_groups; struct pcpu_group_info groups[]; };
pcpu_fc  enum  include/linux/percpu.h  103  enum pcpu_fc { PCPU_FC_AUTO, PCPU_FC_EMBED, PCPU_FC_PAGE, PCPU_FC_NR, };
pcpu_alloc_alloc_info  prototype  include/linux/percpu.h  120  extern struct pcpu_alloc_info * __init pcpu_alloc_alloc_info(int nr_groups,int nr_units);
pcpu_free_alloc_info  prototype  include/linux/percpu.h  122  extern void __init pcpu_free_alloc_info(struct pcpu_alloc_info *ai);
pcpu_setup_first_chunk  prototype  include/linux/percpu.h  124  extern int __init pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,void *base_addr);
pcpu_embed_first_chunk  prototype  include/linux/percpu.h  128  extern int __init pcpu_embed_first_chunk(size_t reserved_size,size_t dyn_size,size_t atom_size,pcpu_fc_cpu_distance_fn_t cpu_distance_fn,pcpu_fc_alloc_fn_t alloc_fn,pcpu_fc_free_fn_t free_fn);
pcpu_page_first_chunk  prototype  include/linux/percpu.h  136  extern int __init pcpu_page_first_chunk(size_t reserved_size,pcpu_fc_alloc_fn_t alloc_fn,pcpu_fc_free_fn_t free_fn,pcpu_fc_populate_pte_fn_t populate_pte_fn);
per_cpu_ptr  macro  include/linux/percpu.h  150  #define per_cpu_ptr(ptr,cpu) ({ (void)(cpu); VERIFY_PERCPU_PTR((ptr)); })
__alloc_reserved_percpu  prototype  include/linux/percpu.h  153  extern void __percpu *__alloc_reserved_percpu(size_t size,size_t align);
is_kernel_percpu_address  prototype  include/linux/percpu.h  154  extern bool is_kernel_percpu_address(unsigned long addr);
setup_per_cpu_areas  prototype  include/linux/percpu.h  157  extern void __init setup_per_cpu_areas(void);
percpu_init_late  prototype  include/linux/percpu.h  159  extern void __init percpu_init_late(void);
__alloc_percpu  prototype  include/linux/percpu.h  161  extern void __percpu *__alloc_percpu(size_t size,size_t align);
free_percpu  prototype  include/linux/percpu.h  162  extern void free_percpu(void __percpu *__pdata);
per_cpu_ptr_to_phys  prototype  include/linux/percpu.h  163  extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
alloc_percpu  macro  include/linux/percpu.h  165  #define alloc_percpu(type) (typeof(type) __percpu *)__alloc_percpu(sizeof(type), __alignof__(type))
__bad_size_call_parameter  prototype  include/linux/percpu.h  173  extern void __bad_size_call_parameter(void);
__pcpu_size_call_return  macro  include/linux/percpu.h  175  #define __pcpu_size_call_return(stem,variable) ({	typeof(variable) pscr_ret__; __verify_pcpu_ptr(&(variable)); switch(sizeof(variable)) { case 1: pscr_ret__ = stem##1(variable);break; case 2: pscr_ret__ = stem##2(variable);break; case 4: pscr_ret__ = stem##4(variable);break; case 8: pscr_ret__ = stem##8(variable);break; default: __bad_size_call_parameter();break; } pscr_ret__; })
__pcpu_size_call_return2  macro  include/linux/percpu.h  189  #define __pcpu_size_call_return2(stem,variable,...) ({ typeof(variable) pscr2_ret__; __verify_pcpu_ptr(&(variable)); switch(sizeof(variable)) { case 1: pscr2_ret__ = stem##1(variable, __VA_ARGS__); break; case 2: pscr2_ret__ = stem##2(variable, __VA_ARGS__); break; case 4: pscr2_ret__ = stem##4(variable, __VA_ARGS__); break; case 8: pscr2_ret__ = stem##8(variable, __VA_ARGS__); break; default: __bad_size_call_parameter(); break; } pscr2_ret__; })
__pcpu_double_call_return_bool  macro  include/linux/percpu.h  212  #define __pcpu_double_call_return_bool(stem,pcp1,pcp2,...) ({ bool pdcrb_ret__; __verify_pcpu_ptr(&pcp1); BUILD_BUG_ON(sizeof(pcp1) != sizeof(pcp2)); VM_BUG_ON((unsigned long)(&pcp1) % (2 * sizeof(pcp1))); VM_BUG_ON((unsigned long)(&pcp2) != (unsigned long)(&pcp1) + sizeof(pcp1)); switch(sizeof(pcp1)) { case 1: pdcrb_ret__ = stem##1(pcp1, pcp2, __VA_ARGS__); break; case 2: pdcrb_ret__ = stem##2(pcp1, pcp2, __VA_ARGS__); break; case 4: pdcrb_ret__ = stem##4(pcp1, pcp2, __VA_ARGS__); break; case 8: pdcrb_ret__ = stem##8(pcp1, pcp2, __VA_ARGS__); break; default: __bad_size_call_parameter(); break; } pdcrb_ret__; })
__pcpu_size_call  macro  include/linux/percpu.h  231  #define __pcpu_size_call(stem,variable,...) do { __verify_pcpu_ptr(&(variable)); switch(sizeof(variable)) { case 1: stem##1(variable, __VA_ARGS__);break; case 2: stem##2(variable, __VA_ARGS__);break; case 4: stem##4(variable, __VA_ARGS__);break; case 8: stem##8(variable, __VA_ARGS__);break; default: __bad_size_call_parameter();break; } } while (0)
_this_cpu_generic_read  macro  include/linux/percpu.h  270  #define _this_cpu_generic_read(pcp) ({	typeof(pcp) ret__; preempt_disable(); ret__ = *this_cpu_ptr(&(pcp)); preempt_enable(); ret__; })
this_cpu_read_1  macro  arch/x86/include/asm/percpu.h  387  #define this_cpu_read_1(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read_2  macro  arch/x86/include/asm/percpu.h  388  #define this_cpu_read_2(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read_4  macro  arch/x86/include/asm/percpu.h  389  #define this_cpu_read_4(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read_8  macro  arch/x86/include/asm/percpu.h  457  #define this_cpu_read_8(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read  macro  include/linux/percpu.h  291  # define this_cpu_read(pcp) __pcpu_size_call_return(this_cpu_read_,(pcp))
_this_cpu_generic_to_op  macro  include/linux/percpu.h  294  #define _this_cpu_generic_to_op(pcp,val,op) do { unsigned long flags; raw_local_irq_save(flags); *__this_cpu_ptr(&(pcp)) op val; raw_local_irq_restore(flags); } while (0)
this_cpu_write_1  macro  arch/x86/include/asm/percpu.h  390  #define this_cpu_write_1(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write_2  macro  arch/x86/include/asm/percpu.h  391  #define this_cpu_write_2(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write_4  macro  arch/x86/include/asm/percpu.h  392  #define this_cpu_write_4(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write_8  macro  arch/x86/include/asm/percpu.h  458  #define this_cpu_write_8(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write  macro  include/linux/percpu.h  315  # define this_cpu_write(pcp,val) __pcpu_size_call(this_cpu_write_,(pcp),(val))
this_cpu_add_1  macro  arch/x86/include/asm/percpu.h  393  #define this_cpu_add_1(pcp,val) percpu_add_op((pcp),val)
this_cpu_add_2  macro  arch/x86/include/asm/percpu.h  394  #define this_cpu_add_2(pcp,val) percpu_add_op((pcp),val)
this_cpu_add_4  macro  arch/x86/include/asm/percpu.h  395  #define this_cpu_add_4(pcp,val) percpu_add_op((pcp),val)
this_cpu_add_8  macro  arch/x86/include/asm/percpu.h  459  #define this_cpu_add_8(pcp,val) percpu_add_op((pcp),val)
this_cpu_add  macro  include/linux/percpu.h  331  # define this_cpu_add(pcp,val) __pcpu_size_call(this_cpu_add_,(pcp),(val))
this_cpu_sub  macro  include/linux/percpu.h  335  # define this_cpu_sub(pcp,val) this_cpu_add((pcp),-(val))
this_cpu_inc  macro  include/linux/percpu.h  339  # define this_cpu_inc(pcp) this_cpu_add((pcp),1)
this_cpu_dec  macro  include/linux/percpu.h  343  # define this_cpu_dec(pcp) this_cpu_sub((pcp),1)
this_cpu_and_1  macro  arch/x86/include/asm/percpu.h  396  #define this_cpu_and_1(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and_2  macro  arch/x86/include/asm/percpu.h  397  #define this_cpu_and_2(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and_4  macro  arch/x86/include/asm/percpu.h  398  #define this_cpu_and_4(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and_8  macro  arch/x86/include/asm/percpu.h  460  #define this_cpu_and_8(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and  macro  include/linux/percpu.h  359  # define this_cpu_and(pcp,val) __pcpu_size_call(this_cpu_and_,(pcp),(val))
this_cpu_or_1  macro  arch/x86/include/asm/percpu.h  399  #define this_cpu_or_1(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or_2  macro  arch/x86/include/asm/percpu.h  400  #define this_cpu_or_2(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or_4  macro  arch/x86/include/asm/percpu.h  401  #define this_cpu_or_4(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or_8  macro  arch/x86/include/asm/percpu.h  461  #define this_cpu_or_8(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or  macro  include/linux/percpu.h  375  # define this_cpu_or(pcp,val) __pcpu_size_call(this_cpu_or_,(pcp),(val))
this_cpu_xor_1  macro  arch/x86/include/asm/percpu.h  402  #define this_cpu_xor_1(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor_2  macro  arch/x86/include/asm/percpu.h  403  #define this_cpu_xor_2(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor_4  macro  arch/x86/include/asm/percpu.h  404  #define this_cpu_xor_4(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor_8  macro  arch/x86/include/asm/percpu.h  462  #define this_cpu_xor_8(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor  macro  include/linux/percpu.h  391  # define this_cpu_xor(pcp,val) __pcpu_size_call(this_cpu_or_,(pcp),(val))
_this_cpu_generic_add_return  macro  include/linux/percpu.h  394  #define _this_cpu_generic_add_return(pcp,val) ({ typeof(pcp) ret__; unsigned long flags; raw_local_irq_save(flags); __this_cpu_add(pcp, val); ret__ = __this_cpu_read(pcp); raw_local_irq_restore(flags); ret__; })
this_cpu_add_return_1  macro  arch/x86/include/asm/percpu.h  417  #define this_cpu_add_return_1(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return_2  macro  arch/x86/include/asm/percpu.h  418  #define this_cpu_add_return_2(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return_4  macro  arch/x86/include/asm/percpu.h  419  #define this_cpu_add_return_4(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return_8  macro  arch/x86/include/asm/percpu.h  463  #define this_cpu_add_return_8(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return  macro  include/linux/percpu.h  418  # define this_cpu_add_return(pcp,val) __pcpu_size_call_return2(this_cpu_add_return_,pcp,val)
this_cpu_sub_return  macro  include/linux/percpu.h  421  #define this_cpu_sub_return(pcp,val) this_cpu_add_return(pcp,-(val))
this_cpu_inc_return  macro  include/linux/percpu.h  422  #define this_cpu_inc_return(pcp) this_cpu_add_return(pcp,1)
this_cpu_dec_return  macro  include/linux/percpu.h  423  #define this_cpu_dec_return(pcp) this_cpu_add_return(pcp,-1)
_this_cpu_generic_xchg  macro  include/linux/percpu.h  425  #define _this_cpu_generic_xchg(pcp,nval) ({	typeof(pcp) ret__; unsigned long flags; raw_local_irq_save(flags); ret__ = __this_cpu_read(pcp); __this_cpu_write(pcp, nval); raw_local_irq_restore(flags); ret__; })
this_cpu_xchg_1  macro  arch/x86/include/asm/percpu.h  405  #define this_cpu_xchg_1(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg_2  macro  arch/x86/include/asm/percpu.h  406  #define this_cpu_xchg_2(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg_4  macro  arch/x86/include/asm/percpu.h  407  #define this_cpu_xchg_4(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg_8  macro  arch/x86/include/asm/percpu.h  464  #define this_cpu_xchg_8(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg  macro  include/linux/percpu.h  448  # define this_cpu_xchg(pcp,nval) __pcpu_size_call_return2(this_cpu_xchg_, (pcp), nval)
_this_cpu_generic_cmpxchg  macro  include/linux/percpu.h  452  #define _this_cpu_generic_cmpxchg(pcp,oval,nval) ({ typeof(pcp) ret__; unsigned long flags; raw_local_irq_save(flags); ret__ = __this_cpu_read(pcp); if (ret__ == (oval)) __this_cpu_write(pcp, nval); raw_local_irq_restore(flags); ret__; })
this_cpu_cmpxchg_1  macro  arch/x86/include/asm/percpu.h  420  #define this_cpu_cmpxchg_1(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg_2  macro  arch/x86/include/asm/percpu.h  421  #define this_cpu_cmpxchg_2(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg_4  macro  arch/x86/include/asm/percpu.h  422  #define this_cpu_cmpxchg_4(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg_8  macro  arch/x86/include/asm/percpu.h  465  #define this_cpu_cmpxchg_8(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg  macro  include/linux/percpu.h  477  # define this_cpu_cmpxchg(pcp,oval,nval) __pcpu_size_call_return2(this_cpu_cmpxchg_, pcp, oval, nval)
_this_cpu_generic_cmpxchg_double  macro  include/linux/percpu.h  489  #define _this_cpu_generic_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) ({ int ret__; unsigned long flags; raw_local_irq_save(flags); ret__ = __this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2); raw_local_irq_restore(flags); ret__; })
this_cpu_cmpxchg_double_1  macro  include/linux/percpu.h  502  # define this_cpu_cmpxchg_double_1(pcp1,pcp2,oval1,oval2,nval1,nval2) _this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
this_cpu_cmpxchg_double_2  macro  include/linux/percpu.h  506  # define this_cpu_cmpxchg_double_2(pcp1,pcp2,oval1,oval2,nval1,nval2) _this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
this_cpu_cmpxchg_double_4  macro  arch/x86/include/asm/percpu.h  439  #define this_cpu_cmpxchg_double_4 percpu_cmpxchg8b_double
this_cpu_cmpxchg_double_8  macro  arch/x86/include/asm/percpu.h  488  #define this_cpu_cmpxchg_double_8 percpu_cmpxchg16b_double
this_cpu_cmpxchg_double  macro  include/linux/percpu.h  517  # define this_cpu_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) __pcpu_double_call_return_bool(this_cpu_cmpxchg_double_, (pcp1), (pcp2), (oval1), (oval2), (nval1), (nval2))
__this_cpu_read_1  macro  arch/x86/include/asm/percpu.h  364  #define __this_cpu_read_1(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read_2  macro  arch/x86/include/asm/percpu.h  365  #define __this_cpu_read_2(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read_4  macro  arch/x86/include/asm/percpu.h  366  #define __this_cpu_read_4(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read_8  macro  arch/x86/include/asm/percpu.h  447  #define __this_cpu_read_8(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read  macro  include/linux/percpu.h  548  # define __this_cpu_read(pcp) __pcpu_size_call_return(__this_cpu_read_,(pcp))
__this_cpu_generic_to_op  macro  include/linux/percpu.h  551  #define __this_cpu_generic_to_op(pcp,val,op) do { *__this_cpu_ptr(&(pcp)) op val; } while (0)
__this_cpu_write_1  macro  arch/x86/include/asm/percpu.h  368  #define __this_cpu_write_1(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write_2  macro  arch/x86/include/asm/percpu.h  369  #define __this_cpu_write_2(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write_4  macro  arch/x86/include/asm/percpu.h  370  #define __this_cpu_write_4(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write_8  macro  arch/x86/include/asm/percpu.h  448  #define __this_cpu_write_8(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write  macro  include/linux/percpu.h  569  # define __this_cpu_write(pcp,val) __pcpu_size_call(__this_cpu_write_,(pcp),(val))
__this_cpu_add_1  macro  arch/x86/include/asm/percpu.h  371  #define __this_cpu_add_1(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add_2  macro  arch/x86/include/asm/percpu.h  372  #define __this_cpu_add_2(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add_4  macro  arch/x86/include/asm/percpu.h  373  #define __this_cpu_add_4(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add_8  macro  arch/x86/include/asm/percpu.h  449  #define __this_cpu_add_8(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add  macro  include/linux/percpu.h  585  # define __this_cpu_add(pcp,val) __pcpu_size_call(__this_cpu_add_,(pcp),(val))
__this_cpu_sub  macro  include/linux/percpu.h  589  # define __this_cpu_sub(pcp,val) __this_cpu_add((pcp),-(val))
__this_cpu_inc  macro  include/linux/percpu.h  593  # define __this_cpu_inc(pcp) __this_cpu_add((pcp),1)
__this_cpu_dec  macro  include/linux/percpu.h  597  # define __this_cpu_dec(pcp) __this_cpu_sub((pcp),1)
__this_cpu_and_1  macro  arch/x86/include/asm/percpu.h  374  #define __this_cpu_and_1(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and_2  macro  arch/x86/include/asm/percpu.h  375  #define __this_cpu_and_2(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and_4  macro  arch/x86/include/asm/percpu.h  376  #define __this_cpu_and_4(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and_8  macro  arch/x86/include/asm/percpu.h  450  #define __this_cpu_and_8(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and  macro  include/linux/percpu.h  613  # define __this_cpu_and(pcp,val) __pcpu_size_call(__this_cpu_and_,(pcp),(val))
__this_cpu_or_1  macro  arch/x86/include/asm/percpu.h  377  #define __this_cpu_or_1(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or_2  macro  arch/x86/include/asm/percpu.h  378  #define __this_cpu_or_2(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or_4  macro  arch/x86/include/asm/percpu.h  379  #define __this_cpu_or_4(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or_8  macro  arch/x86/include/asm/percpu.h  451  #define __this_cpu_or_8(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or  macro  include/linux/percpu.h  629  # define __this_cpu_or(pcp,val) __pcpu_size_call(__this_cpu_or_,(pcp),(val))
__this_cpu_xor_1  macro  arch/x86/include/asm/percpu.h  380  #define __this_cpu_xor_1(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor_2  macro  arch/x86/include/asm/percpu.h  381  #define __this_cpu_xor_2(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor_4  macro  arch/x86/include/asm/percpu.h  382  #define __this_cpu_xor_4(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor_8  macro  arch/x86/include/asm/percpu.h  452  #define __this_cpu_xor_8(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor  macro  include/linux/percpu.h  645  # define __this_cpu_xor(pcp,val) __pcpu_size_call(__this_cpu_xor_,(pcp),(val))
__this_cpu_generic_add_return  macro  include/linux/percpu.h  648  #define __this_cpu_generic_add_return(pcp,val) ({ __this_cpu_add(pcp, val); __this_cpu_read(pcp); })
__this_cpu_add_return_1  macro  arch/x86/include/asm/percpu.h  410  #define __this_cpu_add_return_1(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return_2  macro  arch/x86/include/asm/percpu.h  411  #define __this_cpu_add_return_2(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return_4  macro  arch/x86/include/asm/percpu.h  412  #define __this_cpu_add_return_4(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return_8  macro  arch/x86/include/asm/percpu.h  453  #define __this_cpu_add_return_8(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return  macro  include/linux/percpu.h  667  # define __this_cpu_add_return(pcp,val) __pcpu_size_call_return2(__this_cpu_add_return_, pcp, val)
__this_cpu_sub_return  macro  include/linux/percpu.h  671  #define __this_cpu_sub_return(pcp,val) __this_cpu_add_return(pcp,-(val))
__this_cpu_inc_return  macro  include/linux/percpu.h  672  #define __this_cpu_inc_return(pcp) __this_cpu_add_return(pcp,1)
__this_cpu_dec_return  macro  include/linux/percpu.h  673  #define __this_cpu_dec_return(pcp) __this_cpu_add_return(pcp,-1)
__this_cpu_generic_xchg  macro  include/linux/percpu.h  675  #define __this_cpu_generic_xchg(pcp,nval) ({	typeof(pcp) ret__; ret__ = __this_cpu_read(pcp); __this_cpu_write(pcp, nval); ret__; })
__this_cpu_xchg_1  macro  arch/x86/include/asm/percpu.h  383  #define __this_cpu_xchg_1(pcp,val) percpu_xchg_op(pcp,val)
__this_cpu_xchg_2  macro  arch/x86/include/asm/percpu.h  384  #define __this_cpu_xchg_2(pcp,val) percpu_xchg_op(pcp,val)
__this_cpu_xchg_4  macro  arch/x86/include/asm/percpu.h  385  #define __this_cpu_xchg_4(pcp,val) percpu_xchg_op(pcp,val)
__this_cpu_xchg_8  macro  arch/x86/include/asm/percpu.h  454  #define __this_cpu_xchg_8(pcp,nval) percpu_xchg_op(pcp,nval)
__this_cpu_xchg  macro  include/linux/percpu.h  695  # define __this_cpu_xchg(pcp,nval) __pcpu_size_call_return2(__this_cpu_xchg_, (pcp), nval)
__this_cpu_generic_cmpxchg  macro  include/linux/percpu.h  699  #define __this_cpu_generic_cmpxchg(pcp,oval,nval) ({ typeof(pcp) ret__; ret__ = __this_cpu_read(pcp); if (ret__ == (oval)) __this_cpu_write(pcp, nval); ret__; })
__this_cpu_cmpxchg_1  macro  arch/x86/include/asm/percpu.h  413  #define __this_cpu_cmpxchg_1(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg_2  macro  arch/x86/include/asm/percpu.h  414  #define __this_cpu_cmpxchg_2(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg_4  macro  arch/x86/include/asm/percpu.h  415  #define __this_cpu_cmpxchg_4(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg_8  macro  arch/x86/include/asm/percpu.h  455  #define __this_cpu_cmpxchg_8(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg  macro  include/linux/percpu.h  721  # define __this_cpu_cmpxchg(pcp,oval,nval) __pcpu_size_call_return2(__this_cpu_cmpxchg_, pcp, oval, nval)
__this_cpu_generic_cmpxchg_double  macro  include/linux/percpu.h  725  #define __this_cpu_generic_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) ({ int __ret = 0; if (__this_cpu_read(pcp1) == (oval1) && __this_cpu_read(pcp2)  == (oval2)) { __this_cpu_write(pcp1, (nval1)); __this_cpu_write(pcp2, (nval2)); __ret = 1; } (__ret); })
__this_cpu_cmpxchg_double_1  macro  include/linux/percpu.h  739  # define __this_cpu_cmpxchg_double_1(pcp1,pcp2,oval1,oval2,nval1,nval2) __this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
__this_cpu_cmpxchg_double_2  macro  include/linux/percpu.h  743  # define __this_cpu_cmpxchg_double_2(pcp1,pcp2,oval1,oval2,nval1,nval2) __this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
__this_cpu_cmpxchg_double_4  macro  arch/x86/include/asm/percpu.h  438  #define __this_cpu_cmpxchg_double_4 percpu_cmpxchg8b_double
__this_cpu_cmpxchg_double_8  macro  arch/x86/include/asm/percpu.h  487  #define __this_cpu_cmpxchg_double_8 percpu_cmpxchg16b_double
__this_cpu_cmpxchg_double  macro  include/linux/percpu.h  754  # define __this_cpu_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) __pcpu_double_call_return_bool(__this_cpu_cmpxchg_double_, (pcp1), (pcp2), (oval1), (oval2), (nval1), (nval2))
_ASM_X86_MODULE_H  macro  arch/x86/include/asm/module.h  2  #define _ASM_X86_MODULE_H
MODULE_PROC_FAMILY  macro  arch/x86/include/asm/module.h  57  #define MODULE_PROC_FAMILY "GEODE "
MODULE_ARCH_VERMAGIC  macro  arch/x86/include/asm/module.h  63  # define MODULE_ARCH_VERMAGIC MODULE_PROC_FAMILY
_LINUX_SYSINFO_H  macro  include/linux/sysinfo.h  2  #define _LINUX_SYSINFO_H
SI_LOAD_SHIFT  macro  include/linux/sysinfo.h  6  #define SI_LOAD_SHIFT 16
sysinfo  struct  include/linux/sysinfo.h  7  struct sysinfo { __kernel_long_t uptime; __kernel_ulong_t loads[3]; __kernel_ulong_t totalram; __kernel_ulong_t freeram; __kernel_ulong_t sharedram; __kernel_ulong_t bufferram; __kernel_ulong_t totalswap; __kernel_ulong_t freeswap; __u16 procs; __u16 pad; __kernel_ulong_t totalhigh; __kernel_ulong_t freehigh; __u32 mem_unit; char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)]; };
_LINUX_LINKAGE_H  macro  include/linux/linkage.h  2  #define _LINUX_LINKAGE_H
CPP_ASMLINKAGE  macro  include/linux/linkage.h  10  #define CPP_ASMLINKAGE
asmlinkage  macro  arch/x86/include/asm/linkage.h  10  #define asmlinkage CPP_ASMLINKAGE __attribute__((regparm(0)))
__page_aligned_data  macro  include/linux/linkage.h  17  #define __page_aligned_data __section(.data..page_aligned) __aligned(PAGE_SIZE)
__page_aligned_bss  macro  include/linux/linkage.h  18  #define __page_aligned_bss __section(.bss..page_aligned) __aligned(PAGE_SIZE)
__PAGE_ALIGNED_DATA  macro  include/linux/linkage.h  26  #define __PAGE_ALIGNED_DATA .section ".data..page_aligned","aw"
__PAGE_ALIGNED_BSS  macro  include/linux/linkage.h  27  #define __PAGE_ALIGNED_BSS .section ".bss..page_aligned","aw"
asmlinkage_protect  macro  arch/x86/include/asm/linkage.h  23  #define asmlinkage_protect(n,ret,args...) __asmlinkage_protect##n(ret, ##args)
__ALIGN  macro  arch/x86/include/asm/linkage.h  54  #define __ALIGN .p2align 4,0x90
__ALIGN_STR  macro  arch/x86/include/asm/linkage.h  55  #define __ALIGN_STR __stringify(__ALIGN)
ALIGN_STR  macro  include/linux/linkage.h  58  #define ALIGN_STR __ALIGN_STR
ENTRY  macro  include/linux/linkage.h  61  #define ENTRY(name) .globl name; ALIGN; name:
WEAK  macro  include/linux/linkage.h  69  #define WEAK(name) .weak name; name:
END  macro  include/linux/linkage.h  75  #define END(name) .size name, .-name
ENDPROC  macro  include/linux/linkage.h  84  #define ENDPROC(name) .type name, @function; END(name)
_LINUX_STDDEF_H  macro  include/linux/stddef.h  2  #define _LINUX_STDDEF_H
NULL  macro  include/linux/stddef.h  9  #define NULL ((void *)0)
offsetof  macro  include/linux/stddef.h  20  #define offsetof(TYPE,MEMBER) ((size_t) &((TYPE *)0)->MEMBER)
_LINUX_TYPES_H  macro  include/linux/types.h  2  #define _LINUX_TYPES_H
_SIZE_T  macro  include/linux/types.h  62  #define _SIZE_T
_SSIZE_T  macro  include/linux/types.h  67  #define _SSIZE_T
_PTRDIFF_T  macro  include/linux/types.h  72  #define _PTRDIFF_T
_TIME_T  macro  include/linux/types.h  77  #define _TIME_T
_CLOCK_T  macro  include/linux/types.h  82  #define _CLOCK_T
_CADDR_T  macro  include/linux/types.h  87  #define _CADDR_T
__BIT_TYPES_DEFINED__  macro  include/linux/types.h  104  #define __BIT_TYPES_DEFINED__
aligned_u64  macro  include/linux/types.h  126  #define aligned_u64 __u64 __attribute__((aligned(8)))
aligned_be64  macro  include/linux/types.h  127  #define aligned_be64 __be64 __attribute__((aligned(8)))
aligned_le64  macro  include/linux/types.h  128  #define aligned_le64 __le64 __attribute__((aligned(8)))
pgoff_t  macro  include/linux/types.h  151  #define pgoff_t unsigned long
__bitwise__  macro  include/linux/types.h  170  #define __bitwise__
__bitwise  macro  include/linux/types.h  175  #define __bitwise
__aligned_u64  macro  include/linux/types.h  197  #define __aligned_u64 __u64 __attribute__((aligned(8)))
__aligned_be64  macro  include/linux/types.h  198  #define __aligned_be64 __be64 __attribute__((aligned(8)))
__aligned_le64  macro  include/linux/types.h  199  #define __aligned_le64 __le64 __attribute__((aligned(8)))
atomic_t  struct  include/linux/types.h  219  typedef struct { int counter; } atomic_t;
atomic64_t  struct  include/asm-generic/atomic64.h  15  typedef struct { long long counter; } atomic64_t;
list_head  struct  include/linux/types.h  229  struct list_head { struct list_head *next, *prev; };
hlist_head  struct  include/linux/types.h  233  struct hlist_head { struct hlist_node *first; };
hlist_node  struct  include/linux/types.h  237  struct hlist_node { struct hlist_node *next, **pprev; };
ustat  struct  include/linux/types.h  241  struct ustat { __kernel_daddr_t f_tfree; __kernel_ino_t f_tinode; char f_fname[6]; char f_fpack[6]; };
rcu_head  struct  include/linux/types.h  253  struct rcu_head { struct rcu_head *next; void (*func)(struct rcu_head *head); };
_LINUX_LOG2_H  macro  include/linux/log2.h  13  #define _LINUX_LOG2_H
____ilog2_NaN  prototype  include/linux/log2.h  22  int ____ilog2_NaN(void);
__ilog2_u32  function  include/linux/log2.h  32  int __ilog2_u32(u32 n)
__ilog2_u64  function  include/linux/log2.h  40  int __ilog2_u64(u64 n)
is_power_of_2  function  include/linux/log2.h  52  bool is_power_of_2(unsigned long n)
__roundup_pow_of_two  function  include/linux/log2.h  61  unsigned long __roundup_pow_of_two(unsigned long n)
__rounddown_pow_of_two  function  include/linux/log2.h  70  unsigned long __rounddown_pow_of_two(unsigned long n)
ilog2  macro  include/linux/log2.h  85  #define ilog2(n) ( __builtin_constant_p(n) ? ( (n) < 1 ? ____ilog2_NaN() : (n) & (1ULL << 63) ? 63 : (n) & (1ULL << 62) ? 62 : (n) & (1ULL << 61) ? 61 : (n) & (1ULL << 60) ? 60 : (n) & (1ULL << 59) ? 59 : (n) & (1ULL << 58) ? 58 : (n) & (1ULL << 57) ? 57 : (n) & (1ULL << 56) ? 56 : (n) & (1ULL << 55) ? 55 : (n) & (1ULL << 54) ? 54 : (n) & (1ULL << 53) ? 53 : (n) & (1ULL << 52) ? 52 : (n) & (1ULL << 51) ? 51 : (n) & (1ULL << 50) ? 50 : (n) & (1ULL << 49) ? 49 : (n) & (1ULL << 48) ? 48 : (n) & (1ULL << 47) ? 47 : (n) & (1ULL << 46) ? 46 : (n) & (1ULL << 45) ? 45 : (n) & (1ULL << 44) ? 44 : (n) & (1ULL << 43) ? 43 : (n) & (1ULL << 42) ? 42 : (n) & (1ULL << 41) ? 41 : (n) & (1ULL << 40) ? 40 : (n) & (1ULL << 39) ? 39 : (n) & (1ULL << 38) ? 38 : (n) & (1ULL << 37) ? 37 : (n) & (1ULL << 36) ? 36 : (n) & (1ULL << 35) ? 35 : (n) & (1ULL << 34) ? 34 : (n) & (1ULL << 33) ? 33 : (n) & (1ULL << 32) ? 32 : (n) & (1ULL << 31) ? 31 : (n) & (1ULL << 30) ? 30 : (n) & (1ULL << 29) ? 29 : (n) & (1ULL << 28) ? 28 : (n) & (1ULL << 27) ? 27 : (n) & (1ULL << 26) ? 26 : (n) & (1ULL << 25) ? 25 : (n) & (1ULL << 24) ? 24 : (n) & (1ULL << 23) ? 23 : (n) & (1ULL << 22) ? 22 : (n) & (1ULL << 21) ? 21 : (n) & (1ULL << 20) ? 20 : (n) & (1ULL << 19) ? 19 : (n) & (1ULL << 18) ? 18 : (n) & (1ULL << 17) ? 17 : (n) & (1ULL << 16) ? 16 : (n) & (1ULL << 15) ? 15 : (n) & (1ULL << 14) ? 14 : (n) & (1ULL << 13) ? 13 : (n) & (1ULL << 12) ? 12 : (n) & (1ULL << 11) ? 11 : (n) & (1ULL << 10) ? 10 : (n) & (1ULL <<  9) ?  9 : (n) & (1ULL <<  8) ?  8 : (n) & (1ULL <<  7) ?  7 : (n) & (1ULL <<  6) ?  6 : (n) & (1ULL <<  5) ?  5 : (n) & (1ULL <<  4) ?  4 : (n) & (1ULL <<  3) ?  3 : (n) & (1ULL <<  2) ?  2 : (n) & (1ULL <<  1) ?  1 : (n) & (1ULL <<  0) ?  0 : ____ilog2_NaN() ) : (sizeof(n) <= 4) ? __ilog2_u32(n) : __ilog2_u64(n) )
roundup_pow_of_two  macro  include/linux/log2.h  168  #define roundup_pow_of_two(n) ( __builtin_constant_p(n) ? ( (n == 1) ? 1 : (1UL << (ilog2((n) - 1) + 1)) ) : __roundup_pow_of_two(n) )
rounddown_pow_of_two  macro  include/linux/log2.h  185  #define rounddown_pow_of_two(n) ( __builtin_constant_p(n) ? ( (1UL << ilog2(n))) : __rounddown_pow_of_two(n) )
order_base_2  macro  include/linux/log2.h  206  #define order_base_2(n) ilog2(roundup_pow_of_two(n))
TYPECHECK_H_INCLUDED  macro  include/linux/typecheck.h  2  #define TYPECHECK_H_INCLUDED
typecheck  macro  include/linux/typecheck.h  8  #define typecheck(type,x) ({	type __dummy; typeof(x) __dummy2; (void)(&__dummy == &__dummy2); 1; })
typecheck_fn  macro  include/linux/typecheck.h  19  #define typecheck_fn(type,function) ({	typeof(type) __tmp = function; (void)__tmp; })
__KERNEL_PRINTK__  macro  include/linux/printk.h  2  #define __KERNEL_PRINTK__
KERN_EMERG  macro  include/linux/printk.h  9  #define KERN_EMERG "<0>"
KERN_ALERT  macro  include/linux/printk.h  10  #define KERN_ALERT "<1>"
KERN_CRIT  macro  include/linux/printk.h  11  #define KERN_CRIT "<2>"
KERN_ERR  macro  include/linux/printk.h  12  #define KERN_ERR "<3>"
KERN_WARNING  macro  include/linux/printk.h  13  #define KERN_WARNING "<4>"
KERN_NOTICE  macro  include/linux/printk.h  14  #define KERN_NOTICE "<5>"
KERN_INFO  macro  include/linux/printk.h  15  #define KERN_INFO "<6>"
KERN_DEBUG  macro  include/linux/printk.h  16  #define KERN_DEBUG "<7>"
KERN_DEFAULT  macro  include/linux/printk.h  19  #define KERN_DEFAULT "<d>"
KERN_CONT  macro  include/linux/printk.h  25  #define KERN_CONT "<c>"
console_loglevel  macro  include/linux/printk.h  29  #define console_loglevel (console_printk[0])
default_message_loglevel  macro  include/linux/printk.h  30  #define default_message_loglevel (console_printk[1])
minimum_console_loglevel  macro  include/linux/printk.h  31  #define minimum_console_loglevel (console_printk[2])
default_console_loglevel  macro  include/linux/printk.h  32  #define default_console_loglevel (console_printk[3])
console_silent  function  include/linux/printk.h  34  static inline void console_silent(void)
console_verbose  function  include/linux/printk.h  39  static inline void console_verbose(void)
va_format  struct  include/linux/printk.h  45  struct va_format { const char *fmt; va_list *va; };
FW_BUG  macro  include/linux/printk.h  70  #define FW_BUG "[Firmware Bug]: "
FW_WARN  macro  include/linux/printk.h  71  #define FW_WARN "[Firmware Warn]: "
FW_INFO  macro  include/linux/printk.h  72  #define FW_INFO "[Firmware Info]: "
HW_ERR  macro  include/linux/printk.h  79  #define HW_ERR "[Hardware Error]: "
no_printk  function  include/linux/printk.h  86  int no_printk(const char *fmt,...)
early_printk  prototype  include/linux/printk.h  92  void early_printk(const char *fmt,...);
printk_needs_cpu  prototype  include/linux/printk.h  94  extern int printk_needs_cpu(int cpu);
printk_tick  prototype  include/linux/printk.h  95  extern void printk_tick(void);
vprintk_emit  prototype  include/linux/printk.h  99  int vprintk_emit(int facility,int level,const char *dict, size_t dictlen,const char *fmt, va_list args);
vprintk  function  include/linux/printk.h  137  int vprintk(const char *s,va_list args)
printk_emit  prototype  include/linux/printk.h  107  asmlinkage int printk_emit(int facility,int level,const char *dict, size_t dictlen,const char *fmt, ...);
printk  function  include/linux/printk.h  142  int printk(const char *s,...)
printk_sched  function  include/linux/printk.h  147  int printk_sched(const char *s,...)
__printk_ratelimit  prototype  include/linux/printk.h  124  extern int __printk_ratelimit(const char *func);
printk_ratelimit  function  include/linux/printk.h  151  static inline int printk_ratelimit(void)
printk_timed_ratelimit  function  include/linux/printk.h  155  static inline bool printk_timed_ratelimit(unsigned long *caller_jiffies,unsigned int interval_msec)
log_buf_kexec_setup  function  include/linux/printk.h  161  static inline void log_buf_kexec_setup(void)
setup_log_buf  function  include/linux/printk.h  165  static inline void setup_log_buf(int early)
pr_fmt  macro  include/linux/printk.h  173  #define pr_fmt(fmt) fmt
pr_emerg  macro  include/linux/printk.h  176  #define pr_emerg(fmt,...) printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)
pr_alert  macro  include/linux/printk.h  178  #define pr_alert(fmt,...) printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)
pr_crit  macro  include/linux/printk.h  180  #define pr_crit(fmt,...) printk(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)
pr_err  macro  include/linux/printk.h  182  #define pr_err(fmt,...) printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)
pr_warning  macro  include/linux/printk.h  184  #define pr_warning(fmt,...) printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)
pr_warn  macro  include/linux/printk.h  186  #define pr_warn pr_warning
pr_notice  macro  include/linux/printk.h  187  #define pr_notice(fmt,...) printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)
pr_info  macro  include/linux/printk.h  189  #define pr_info(fmt,...) printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)
pr_cont  macro  include/linux/printk.h  191  #define pr_cont(fmt,...) printk(KERN_CONT fmt, ##__VA_ARGS__)
pr_devel  macro  include/linux/printk.h  199  #define pr_devel(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
pr_debug  macro  include/linux/printk.h  212  #define pr_debug(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
printk_once  macro  include/linux/printk.h  231  #define printk_once(fmt,...) no_printk(fmt, ##__VA_ARGS__)
pr_emerg_once  macro  include/linux/printk.h  235  #define pr_emerg_once(fmt,...) printk_once(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)
pr_alert_once  macro  include/linux/printk.h  237  #define pr_alert_once(fmt,...) printk_once(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)
pr_crit_once  macro  include/linux/printk.h  239  #define pr_crit_once(fmt,...) printk_once(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)
pr_err_once  macro  include/linux/printk.h  241  #define pr_err_once(fmt,...) printk_once(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)
pr_warn_once  macro  include/linux/printk.h  243  #define pr_warn_once(fmt,...) printk_once(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)
pr_notice_once  macro  include/linux/printk.h  245  #define pr_notice_once(fmt,...) printk_once(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)
pr_info_once  macro  include/linux/printk.h  247  #define pr_info_once(fmt,...) printk_once(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)
pr_cont_once  macro  include/linux/printk.h  249  #define pr_cont_once(fmt,...) printk_once(KERN_CONT pr_fmt(fmt), ##__VA_ARGS__)
pr_debug_once  macro  include/linux/printk.h  256  #define pr_debug_once(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
printk_ratelimited  macro  include/linux/printk.h  275  #define printk_ratelimited(fmt,...) no_printk(fmt, ##__VA_ARGS__)
pr_emerg_ratelimited  macro  include/linux/printk.h  279  #define pr_emerg_ratelimited(fmt,...) printk_ratelimited(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)
pr_alert_ratelimited  macro  include/linux/printk.h  281  #define pr_alert_ratelimited(fmt,...) printk_ratelimited(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)
pr_crit_ratelimited  macro  include/linux/printk.h  283  #define pr_crit_ratelimited(fmt,...) printk_ratelimited(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)
pr_err_ratelimited  macro  include/linux/printk.h  285  #define pr_err_ratelimited(fmt,...) printk_ratelimited(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)
pr_warn_ratelimited  macro  include/linux/printk.h  287  #define pr_warn_ratelimited(fmt,...) printk_ratelimited(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)
pr_notice_ratelimited  macro  include/linux/printk.h  289  #define pr_notice_ratelimited(fmt,...) printk_ratelimited(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)
pr_info_ratelimited  macro  include/linux/printk.h  291  #define pr_info_ratelimited(fmt,...) printk_ratelimited(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)
pr_debug_ratelimited  macro  include/linux/printk.h  299  #define pr_debug_ratelimited(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
hex_dump_to_buffer  prototype  include/linux/printk.h  310  extern void hex_dump_to_buffer(const void *buf,size_t len,int rowsize, int groupsize,char *linebuf, size_t linebuflen, bool ascii);
print_hex_dump  function  include/linux/printk.h  320  static inline void print_hex_dump(const char *level,const char *prefix_str,int prefix_type, int rowsize, int groupsize,const void *buf, size_t len, bool ascii)
print_hex_dump_bytes  function  include/linux/printk.h  325  static inline void print_hex_dump_bytes(const char *prefix_str,int prefix_type,const void *buf, size_t len)
_DYNAMIC_DEBUG_H  macro  include/linux/dynamic_debug.h  2  #define _DYNAMIC_DEBUG_H
_ddebug  struct  include/linux/dynamic_debug.h  9  struct _ddebug { const char *modname; const char *function; const char *filename; const char *format; unsigned int lineno:18; #define _DPRINTK_FLAGS_NONE 0 #define _DPRINTK_FLAGS_PRINT (1<<0) #define _DPRINTK_FLAGS_INCL_MODNAME (1<<1) #define _DPRINTK_FLAGS_INCL_FUNCNAME (1<<2) #define _DPRINTK_FLAGS_INCL_LINENO (1<<3) #define _DPRINTK_FLAGS_INCL_TID (1<<4) #define _DPRINTK_FLAGS_DEFAULT _DPRINTK_FLAGS_PRINT #define _DPRINTK_FLAGS_DEFAULT 0 unsigned int flags:8; } __attribute__((aligned(8)));
ddebug_add_module  prototype  include/linux/dynamic_debug.h  39  int ddebug_add_module(struct _ddebug *tab,unsigned int n,const char *modname);
ddebug_remove_module  function  include/linux/dynamic_debug.h  103  static inline int ddebug_remove_module(const char *mod)
__dynamic_pr_debug  prototype  include/linux/dynamic_debug.h  45  int __dynamic_pr_debug(struct _ddebug *descriptor,const char *fmt,...);
ddebug_dyndbg_module_param_cb  function  include/linux/dynamic_debug.h  108  static inline int ddebug_dyndbg_module_param_cb(char *param,char *val,const char *modname)
__dynamic_dev_dbg  prototype  include/linux/dynamic_debug.h  53  int __dynamic_dev_dbg(struct _ddebug *descriptor,const struct device *dev,const char *fmt, ...);
__dynamic_netdev_dbg  prototype  include/linux/dynamic_debug.h  59  int __dynamic_netdev_dbg(struct _ddebug *descriptor,const struct net_device *dev,const char *fmt, ...);
DEFINE_DYNAMIC_DEBUG_METADATA  macro  include/linux/dynamic_debug.h  63  #define DEFINE_DYNAMIC_DEBUG_METADATA(name,fmt) static struct _ddebug __used __aligned(8) __attribute__((section("__verbose"))) name = { .modname = KBUILD_MODNAME, .function = __func__, .filename = __FILE__, .format = (fmt), .lineno = __LINE__, .flags =  _DPRINTK_FLAGS_DEFAULT, }
dynamic_pr_debug  macro  include/linux/dynamic_debug.h  120  #define dynamic_pr_debug(fmt,...) do { if (0) printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__); } while (0)
dynamic_dev_dbg  macro  include/linux/dynamic_debug.h  122  #define dynamic_dev_dbg(dev,fmt,...) do { if (0) dev_printk(KERN_DEBUG, dev, fmt, ##__VA_ARGS__); } while (0)
dynamic_netdev_dbg  macro  include/linux/dynamic_debug.h  90  #define dynamic_netdev_dbg(dev,fmt,...) do { DEFINE_DYNAMIC_DEBUG_METADATA(descriptor, fmt); if (unlikely(descriptor.flags & _DPRINTK_FLAGS_PRINT)) __dynamic_netdev_dbg(&descriptor, dev, fmt, ##__VA_ARGS__); } while (0)
_ASM_X86_BYTEORDER_H  macro  arch/x86/include/asm/byteorder.h  2  #define _ASM_X86_BYTEORDER_H
_ASM_X86_DIV64_H  macro  arch/x86/include/asm/div64.h  2  #define _ASM_X86_DIV64_H
do_div  macro  include/asm-generic/div64.h  40  # define do_div(n,base) ({ uint32_t __base = (base); uint32_t __rem; (void)(((typeof((n)) *)0) == ((uint64_t *)0)); if (likely(((n) >> 32) == 0)) { __rem = (uint32_t)(n) % __base; (n) = (uint32_t)(n) / __base; } else __rem = __div64_32(&(n), __base); __rem; })
div_u64_rem  function  include/linux/math64.h  53  static inline u64 div_u64_rem(u64 dividend,u32 divisor,u32 *remainder)
_LINUX_CAPABILITY_H  macro  include/linux/capability.h  14  #define _LINUX_CAPABILITY_H
_LINUX_CAPABILITY_VERSION_1  macro  include/linux/capability.h  31  #define _LINUX_CAPABILITY_VERSION_1 0x19980330
_LINUX_CAPABILITY_U32S_1  macro  include/linux/capability.h  32  #define _LINUX_CAPABILITY_U32S_1 1
_LINUX_CAPABILITY_VERSION_2  macro  include/linux/capability.h  34  #define _LINUX_CAPABILITY_VERSION_2 0x20071026
_LINUX_CAPABILITY_U32S_2  macro  include/linux/capability.h  35  #define _LINUX_CAPABILITY_U32S_2 2
_LINUX_CAPABILITY_VERSION_3  macro  include/linux/capability.h  37  #define _LINUX_CAPABILITY_VERSION_3 0x20080522
_LINUX_CAPABILITY_U32S_3  macro  include/linux/capability.h  38  #define _LINUX_CAPABILITY_U32S_3 2
__user_cap_header_struct  struct  include/linux/capability.h  40  typedef struct __user_cap_header_struct { __u32 version; int pid; } __user *cap_user_header_t;
*cap_user_header_t  struct  include/linux/capability.h  40  typedef struct __user_cap_header_struct { __u32 version; int pid; } __user *cap_user_header_t;
__user_cap_data_struct  struct  include/linux/capability.h  45  typedef struct __user_cap_data_struct { __u32 effective; __u32 permitted; __u32 inheritable; } __user *cap_user_data_t;
*cap_user_data_t  struct  include/linux/capability.h  45  typedef struct __user_cap_data_struct { __u32 effective; __u32 permitted; __u32 inheritable; } __user *cap_user_data_t;
VFS_CAP_REVISION_MASK  macro  include/linux/capability.h  52  #define VFS_CAP_REVISION_MASK 0xFF000000
VFS_CAP_REVISION_SHIFT  macro  include/linux/capability.h  53  #define VFS_CAP_REVISION_SHIFT 24
VFS_CAP_FLAGS_MASK  macro  include/linux/capability.h  54  #define VFS_CAP_FLAGS_MASK ~VFS_CAP_REVISION_MASK
VFS_CAP_FLAGS_EFFECTIVE  macro  include/linux/capability.h  55  #define VFS_CAP_FLAGS_EFFECTIVE 0x000001
VFS_CAP_REVISION_1  macro  include/linux/capability.h  57  #define VFS_CAP_REVISION_1 0x01000000
VFS_CAP_U32_1  macro  include/linux/capability.h  58  #define VFS_CAP_U32_1 1
XATTR_CAPS_SZ_1  macro  include/linux/capability.h  59  #define XATTR_CAPS_SZ_1 (sizeof(__le32)*(1 + 2*VFS_CAP_U32_1))
VFS_CAP_REVISION_2  macro  include/linux/capability.h  61  #define VFS_CAP_REVISION_2 0x02000000
VFS_CAP_U32_2  macro  include/linux/capability.h  62  #define VFS_CAP_U32_2 2
XATTR_CAPS_SZ_2  macro  include/linux/capability.h  63  #define XATTR_CAPS_SZ_2 (sizeof(__le32)*(1 + 2*VFS_CAP_U32_2))
XATTR_CAPS_SZ  macro  include/linux/capability.h  65  #define XATTR_CAPS_SZ XATTR_CAPS_SZ_2
VFS_CAP_U32  macro  include/linux/capability.h  66  #define VFS_CAP_U32 VFS_CAP_U32_2
VFS_CAP_REVISION  macro  include/linux/capability.h  67  #define VFS_CAP_REVISION VFS_CAP_REVISION_2
vfs_cap_data  struct  include/linux/capability.h  69  struct vfs_cap_data { __le32 magic_etc; struct { __le32 permitted; __le32 inheritable; } data[VFS_CAP_U32]; };
_LINUX_CAPABILITY_VERSION  macro  include/linux/capability.h  84  #define _LINUX_CAPABILITY_VERSION _LINUX_CAPABILITY_VERSION_1
_LINUX_CAPABILITY_U32S  macro  include/linux/capability.h  85  #define _LINUX_CAPABILITY_U32S _LINUX_CAPABILITY_U32S_1
_KERNEL_CAPABILITY_VERSION  macro  include/linux/capability.h  89  #define _KERNEL_CAPABILITY_VERSION _LINUX_CAPABILITY_VERSION_3
_KERNEL_CAPABILITY_U32S  macro  include/linux/capability.h  90  #define _KERNEL_CAPABILITY_U32S _LINUX_CAPABILITY_U32S_3
kernel_cap_struct  struct  include/linux/capability.h  94  typedef struct kernel_cap_struct { __u32 cap[_KERNEL_CAPABILITY_U32S]; } kernel_cap_t;
kernel_cap_t  struct  include/linux/capability.h  94  typedef struct kernel_cap_struct { __u32 cap[_KERNEL_CAPABILITY_U32S]; } kernel_cap_t;
cpu_vfs_cap_data  struct  include/linux/capability.h  99  struct cpu_vfs_cap_data { __u32 magic_etc; kernel_cap_t permitted; kernel_cap_t inheritable; };
_USER_CAP_HEADER_SIZE  macro  include/linux/capability.h  105  #define _USER_CAP_HEADER_SIZE (sizeof(struct __user_cap_header_struct))
_KERNEL_CAP_T_SIZE  macro  include/linux/capability.h  106  #define _KERNEL_CAP_T_SIZE (sizeof(kernel_cap_t))
CAP_CHOWN  macro  include/linux/capability.h  119  #define CAP_CHOWN 0
CAP_DAC_OVERRIDE  macro  include/linux/capability.h  125  #define CAP_DAC_OVERRIDE 1
CAP_DAC_READ_SEARCH  macro  include/linux/capability.h  131  #define CAP_DAC_READ_SEARCH 2
CAP_FOWNER  macro  include/linux/capability.h  137  #define CAP_FOWNER 3
CAP_FSETID  macro  include/linux/capability.h  146  #define CAP_FSETID 4
CAP_KILL  macro  include/linux/capability.h  152  #define CAP_KILL 5
CAP_SETGID  macro  include/linux/capability.h  158  #define CAP_SETGID 6
CAP_SETUID  macro  include/linux/capability.h  163  #define CAP_SETUID 7
CAP_SETPCAP  macro  include/linux/capability.h  180  #define CAP_SETPCAP 8
CAP_LINUX_IMMUTABLE  macro  include/linux/capability.h  184  #define CAP_LINUX_IMMUTABLE 9
CAP_NET_BIND_SERVICE  macro  include/linux/capability.h  189  #define CAP_NET_BIND_SERVICE 10
CAP_NET_BROADCAST  macro  include/linux/capability.h  193  #define CAP_NET_BROADCAST 11
CAP_NET_ADMIN  macro  include/linux/capability.h  209  #define CAP_NET_ADMIN 12
CAP_NET_RAW  macro  include/linux/capability.h  215  #define CAP_NET_RAW 13
CAP_IPC_LOCK  macro  include/linux/capability.h  221  #define CAP_IPC_LOCK 14
CAP_IPC_OWNER  macro  include/linux/capability.h  225  #define CAP_IPC_OWNER 15
CAP_SYS_MODULE  macro  include/linux/capability.h  228  #define CAP_SYS_MODULE 16
CAP_SYS_RAWIO  macro  include/linux/capability.h  233  #define CAP_SYS_RAWIO 17
CAP_SYS_CHROOT  macro  include/linux/capability.h  237  #define CAP_SYS_CHROOT 18
CAP_SYS_PTRACE  macro  include/linux/capability.h  241  #define CAP_SYS_PTRACE 19
CAP_SYS_PACCT  macro  include/linux/capability.h  245  #define CAP_SYS_PACCT 20
CAP_SYS_ADMIN  macro  include/linux/capability.h  284  #define CAP_SYS_ADMIN 21
CAP_SYS_BOOT  macro  include/linux/capability.h  288  #define CAP_SYS_BOOT 22
CAP_SYS_NICE  macro  include/linux/capability.h  297  #define CAP_SYS_NICE 23
CAP_SYS_RESOURCE  macro  include/linux/capability.h  311  #define CAP_SYS_RESOURCE 24
CAP_SYS_TIME  macro  include/linux/capability.h  317  #define CAP_SYS_TIME 25
CAP_SYS_TTY_CONFIG  macro  include/linux/capability.h  322  #define CAP_SYS_TTY_CONFIG 26
CAP_MKNOD  macro  include/linux/capability.h  326  #define CAP_MKNOD 27
CAP_LEASE  macro  include/linux/capability.h  330  #define CAP_LEASE 28
CAP_AUDIT_WRITE  macro  include/linux/capability.h  332  #define CAP_AUDIT_WRITE 29
CAP_AUDIT_CONTROL  macro  include/linux/capability.h  334  #define CAP_AUDIT_CONTROL 30
CAP_SETFCAP  macro  include/linux/capability.h  336  #define CAP_SETFCAP 31
CAP_MAC_OVERRIDE  macro  include/linux/capability.h  344  #define CAP_MAC_OVERRIDE 32
CAP_MAC_ADMIN  macro  include/linux/capability.h  353  #define CAP_MAC_ADMIN 33
CAP_SYSLOG  macro  include/linux/capability.h  357  #define CAP_SYSLOG 34
CAP_WAKE_ALARM  macro  include/linux/capability.h  361  #define CAP_WAKE_ALARM 35
CAP_BLOCK_SUSPEND  macro  include/linux/capability.h  365  #define CAP_BLOCK_SUSPEND 36
CAP_LAST_CAP  macro  include/linux/capability.h  367  #define CAP_LAST_CAP CAP_BLOCK_SUSPEND
cap_valid  macro  include/linux/capability.h  369  #define cap_valid(x) ((x) >= 0 && (x) <= CAP_LAST_CAP)
CAP_TO_INDEX  macro  include/linux/capability.h  375  #define CAP_TO_INDEX(x) ((x) >> 5)
CAP_TO_MASK  macro  include/linux/capability.h  376  #define CAP_TO_MASK(x) (1 << ((x) & 31))
current_user_ns  macro  include/linux/cred.h  362  #define current_user_ns() (&init_user_ns)
CAP_FOR_EACH_U32  macro  include/linux/capability.h  393  #define CAP_FOR_EACH_U32(__capi) for (__capi = 0; __capi < _KERNEL_CAPABILITY_U32S; ++__capi)
CAP_FS_MASK_B0  macro  include/linux/capability.h  409  # define CAP_FS_MASK_B0 (CAP_TO_MASK(CAP_CHOWN) | CAP_TO_MASK(CAP_MKNOD) | CAP_TO_MASK(CAP_DAC_OVERRIDE) | CAP_TO_MASK(CAP_DAC_READ_SEARCH) | CAP_TO_MASK(CAP_FOWNER) | CAP_TO_MASK(CAP_FSETID))
CAP_FS_MASK_B1  macro  include/linux/capability.h  416  # define CAP_FS_MASK_B1 (CAP_TO_MASK(CAP_MAC_OVERRIDE))
CAP_EMPTY_SET  macro  include/linux/capability.h  422  # define CAP_EMPTY_SET ((kernel_cap_t){{ 0,0 }})
CAP_FULL_SET  macro  include/linux/capability.h  423  # define CAP_FULL_SET ((kernel_cap_t){{ ~0,~0 }})
CAP_FS_SET  macro  include/linux/capability.h  424  # define CAP_FS_SET ((kernel_cap_t){{ CAP_FS_MASK_B0 | CAP_TO_MASK(CAP_LINUX_IMMUTABLE), CAP_FS_MASK_B1 } })
CAP_NFSD_SET  macro  include/linux/capability.h  427  # define CAP_NFSD_SET ((kernel_cap_t){{ CAP_FS_MASK_B0 | CAP_TO_MASK(CAP_SYS_RESOURCE), CAP_FS_MASK_B1 } })
cap_clear  macro  include/linux/capability.h  433  # define cap_clear(c) do { (c) = __cap_empty_set; } while (0)
cap_raise  macro  include/linux/capability.h  435  #define cap_raise(c,flag) ((c).cap[CAP_TO_INDEX(flag)] |= CAP_TO_MASK(flag))
cap_lower  macro  include/linux/capability.h  436  #define cap_lower(c,flag) ((c).cap[CAP_TO_INDEX(flag)] &= ~CAP_TO_MASK(flag))
cap_raised  macro  include/linux/capability.h  437  #define cap_raised(c,flag) ((c).cap[CAP_TO_INDEX(flag)] & CAP_TO_MASK(flag))
CAP_BOP_ALL  macro  include/linux/capability.h  439  #define CAP_BOP_ALL(c,a,b,OP) do { unsigned __capi; CAP_FOR_EACH_U32(__capi) { c.cap[__capi] = a.cap[__capi] OP b.cap[__capi]; } } while (0)
CAP_UOP_ALL  macro  include/linux/capability.h  447  #define CAP_UOP_ALL(c,a,OP) do { unsigned __capi; CAP_FOR_EACH_U32(__capi) { c.cap[__capi] = OP a.cap[__capi]; } } while (0)
cap_combine  function  include/linux/capability.h  455  static inline kernel_cap_t cap_combine(const kernel_cap_t a,const kernel_cap_t b)
cap_intersect  function  include/linux/capability.h  463  static inline kernel_cap_t cap_intersect(const kernel_cap_t a,const kernel_cap_t b)
cap_drop  function  include/linux/capability.h  471  static inline kernel_cap_t cap_drop(const kernel_cap_t a,const kernel_cap_t drop)
cap_invert  function  include/linux/capability.h  479  static inline kernel_cap_t cap_invert(const kernel_cap_t c)
cap_isclear  function  include/linux/capability.h  486  static inline int cap_isclear(const kernel_cap_t a)
cap_issubset  function  include/linux/capability.h  503  static inline int cap_issubset(const kernel_cap_t a,const kernel_cap_t set)
cap_is_fs_cap  function  include/linux/capability.h  512  static inline int cap_is_fs_cap(int cap)
cap_drop_fs_set  function  include/linux/capability.h  518  static inline kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
cap_raise_fs_set  function  include/linux/capability.h  524  static inline kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,const kernel_cap_t permitted)
cap_drop_nfsd_set  function  include/linux/capability.h  532  static inline kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
cap_raise_nfsd_set  function  include/linux/capability.h  538  static inline kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,const kernel_cap_t permitted)
has_capability  prototype  include/linux/capability.h  546  extern bool has_capability(struct task_struct *t,int cap);
has_ns_capability  prototype  include/linux/capability.h  547  extern bool has_ns_capability(struct task_struct *t,struct user_namespace *ns, int cap);
has_capability_noaudit  prototype  include/linux/capability.h  549  extern bool has_capability_noaudit(struct task_struct *t,int cap);
has_ns_capability_noaudit  prototype  include/linux/capability.h  550  extern bool has_ns_capability_noaudit(struct task_struct *t,struct user_namespace *ns, int cap);
capable  prototype  include/linux/capability.h  552  extern bool capable(int cap);
ns_capable  prototype  include/linux/capability.h  553  extern bool ns_capable(struct user_namespace *ns,int cap);
nsown_capable  prototype  include/linux/capability.h  554  extern bool nsown_capable(int cap);
inode_capable  prototype  include/linux/capability.h  555  extern bool inode_capable(const struct inode *inode,int cap);
get_vfs_caps_from_disk  prototype  include/linux/capability.h  558  extern int get_vfs_caps_from_disk(const struct dentry *dentry,struct cpu_vfs_cap_data *cpu_caps);
_LINUX_THREADS_H  macro  include/linux/threads.h  2  #define _LINUX_THREADS_H
CONFIG_NR_CPUS  macro  include/linux/threads.h  16  #define CONFIG_NR_CPUS 1
NR_CPUS  macro  include/linux/threads.h  20  #define NR_CPUS CONFIG_NR_CPUS
MIN_THREADS_LEFT_FOR_ROOT  macro  include/linux/threads.h  22  #define MIN_THREADS_LEFT_FOR_ROOT 4
PID_MAX_DEFAULT  macro  include/linux/threads.h  27  #define PID_MAX_DEFAULT (CONFIG_BASE_SMALL ? 0x1000 : 0x8000)
PID_MAX_LIMIT  macro  include/linux/threads.h  33  #define PID_MAX_LIMIT (CONFIG_BASE_SMALL ? PAGE_SIZE * 8 : (sizeof(long) > 4 ? 4 * 1024 * 1024 : PID_MAX_DEFAULT))
PIDS_PER_CPU_DEFAULT  macro  include/linux/threads.h  42  #define PIDS_PER_CPU_DEFAULT 1024
PIDS_PER_CPU_MIN  macro  include/linux/threads.h  43  #define PIDS_PER_CPU_MIN 8
_LINUX_TIMEX_H  macro  include/linux/timex.h  54  #define _LINUX_TIMEX_H
NTP_API  macro  include/linux/timex.h  58  #define NTP_API 4
timex  struct  include/linux/timex.h  64  struct timex { unsigned int modes; long offset; long freq; long maxerror; long esterror; int status; long constant; long precision; long tolerance; struct timeval time; long tick; long ppsfreq; long jitter; int shift; long stabil; long jitcnt; long calcnt; long errcnt; long stbcnt; int tai; };
ADJ_OFFSET  macro  include/linux/timex.h  98  #define ADJ_OFFSET 0x0001
ADJ_FREQUENCY  macro  include/linux/timex.h  99  #define ADJ_FREQUENCY 0x0002
ADJ_MAXERROR  macro  include/linux/timex.h  100  #define ADJ_MAXERROR 0x0004
ADJ_ESTERROR  macro  include/linux/timex.h  101  #define ADJ_ESTERROR 0x0008
ADJ_STATUS  macro  include/linux/timex.h  102  #define ADJ_STATUS 0x0010
ADJ_TIMECONST  macro  include/linux/timex.h  103  #define ADJ_TIMECONST 0x0020
ADJ_TAI  macro  include/linux/timex.h  104  #define ADJ_TAI 0x0080
ADJ_SETOFFSET  macro  include/linux/timex.h  105  #define ADJ_SETOFFSET 0x0100
ADJ_MICRO  macro  include/linux/timex.h  106  #define ADJ_MICRO 0x1000
ADJ_NANO  macro  include/linux/timex.h  107  #define ADJ_NANO 0x2000
ADJ_TICK  macro  include/linux/timex.h  108  #define ADJ_TICK 0x4000
ADJ_ADJTIME  macro  include/linux/timex.h  111  #define ADJ_ADJTIME 0x8000
ADJ_OFFSET_SINGLESHOT  macro  include/linux/timex.h  115  #define ADJ_OFFSET_SINGLESHOT 0x8001
ADJ_OFFSET_READONLY  macro  include/linux/timex.h  113  #define ADJ_OFFSET_READONLY 0x2000
ADJ_OFFSET_SS_READ  macro  include/linux/timex.h  116  #define ADJ_OFFSET_SS_READ 0xa001
MOD_OFFSET  macro  include/linux/timex.h  120  #define MOD_OFFSET ADJ_OFFSET
MOD_FREQUENCY  macro  include/linux/timex.h  121  #define MOD_FREQUENCY ADJ_FREQUENCY
MOD_MAXERROR  macro  include/linux/timex.h  122  #define MOD_MAXERROR ADJ_MAXERROR
MOD_ESTERROR  macro  include/linux/timex.h  123  #define MOD_ESTERROR ADJ_ESTERROR
MOD_STATUS  macro  include/linux/timex.h  124  #define MOD_STATUS ADJ_STATUS
MOD_TIMECONST  macro  include/linux/timex.h  125  #define MOD_TIMECONST ADJ_TIMECONST
MOD_TAI  macro  include/linux/timex.h  126  #define MOD_TAI ADJ_TAI
MOD_MICRO  macro  include/linux/timex.h  127  #define MOD_MICRO ADJ_MICRO
MOD_NANO  macro  include/linux/timex.h  128  #define MOD_NANO ADJ_NANO
STA_PLL  macro  include/linux/timex.h  134  #define STA_PLL 0x0001
STA_PPSFREQ  macro  include/linux/timex.h  135  #define STA_PPSFREQ 0x0002
STA_PPSTIME  macro  include/linux/timex.h  136  #define STA_PPSTIME 0x0004
STA_FLL  macro  include/linux/timex.h  137  #define STA_FLL 0x0008
STA_INS  macro  include/linux/timex.h  139  #define STA_INS 0x0010
STA_DEL  macro  include/linux/timex.h  140  #define STA_DEL 0x0020
STA_UNSYNC  macro  include/linux/timex.h  141  #define STA_UNSYNC 0x0040
STA_FREQHOLD  macro  include/linux/timex.h  142  #define STA_FREQHOLD 0x0080
STA_PPSSIGNAL  macro  include/linux/timex.h  144  #define STA_PPSSIGNAL 0x0100
STA_PPSJITTER  macro  include/linux/timex.h  145  #define STA_PPSJITTER 0x0200
STA_PPSWANDER  macro  include/linux/timex.h  146  #define STA_PPSWANDER 0x0400
STA_PPSERROR  macro  include/linux/timex.h  147  #define STA_PPSERROR 0x0800
STA_CLOCKERR  macro  include/linux/timex.h  149  #define STA_CLOCKERR 0x1000
STA_NANO  macro  include/linux/timex.h  150  #define STA_NANO 0x2000
STA_MODE  macro  include/linux/timex.h  151  #define STA_MODE 0x4000
STA_CLK  macro  include/linux/timex.h  152  #define STA_CLK 0x8000
STA_RONLY  macro  include/linux/timex.h  155  #define STA_RONLY (STA_PPSSIGNAL | STA_PPSJITTER | STA_PPSWANDER | STA_PPSERROR | STA_CLOCKERR | STA_NANO | STA_MODE | STA_CLK)
TIME_OK  macro  include/linux/timex.h  161  #define TIME_OK 0
TIME_INS  macro  include/linux/timex.h  162  #define TIME_INS 1
TIME_DEL  macro  include/linux/timex.h  163  #define TIME_DEL 2
TIME_OOP  macro  include/linux/timex.h  164  #define TIME_OOP 3
TIME_WAIT  macro  include/linux/timex.h  165  #define TIME_WAIT 4
TIME_ERROR  macro  include/linux/timex.h  166  #define TIME_ERROR 5
TIME_BAD  macro  include/linux/timex.h  167  #define TIME_BAD TIME_ERROR
SHIFT_PLL  macro  include/linux/timex.h  207  #define SHIFT_PLL 2
SHIFT_FLL  macro  include/linux/timex.h  208  #define SHIFT_FLL 2
MAXTC  macro  include/linux/timex.h  209  #define MAXTC 10
SHIFT_USEC  macro  include/linux/timex.h  216  #define SHIFT_USEC 16
PPM_SCALE  macro  include/linux/timex.h  217  #define PPM_SCALE ((s64)NSEC_PER_USEC << (NTP_SCALE_SHIFT - SHIFT_USEC))
PPM_SCALE_INV_SHIFT  macro  include/linux/timex.h  218  #define PPM_SCALE_INV_SHIFT 19
PPM_SCALE_INV  macro  include/linux/timex.h  219  #define PPM_SCALE_INV ((1LL << (PPM_SCALE_INV_SHIFT + NTP_SCALE_SHIFT)) / PPM_SCALE + 1)
MAXPHASE  macro  include/linux/timex.h  222  #define MAXPHASE 500000000L
MAXFREQ  macro  include/linux/timex.h  223  #define MAXFREQ 500000
MAXFREQ_SCALED  macro  include/linux/timex.h  224  #define MAXFREQ_SCALED ((s64)MAXFREQ << NTP_SCALE_SHIFT)
MINSEC  macro  include/linux/timex.h  225  #define MINSEC 256
MAXSEC  macro  include/linux/timex.h  226  #define MAXSEC 2048
NTP_PHASE_LIMIT  macro  include/linux/timex.h  227  #define NTP_PHASE_LIMIT ((MAXPHASE / NSEC_PER_USEC) << 5)
ntp_init  prototype  include/linux/timex.h  237  extern void ntp_init(void);
ntp_clear  prototype  include/linux/timex.h  238  extern void ntp_clear(void);
shift_right  macro  include/linux/timex.h  241  #define shift_right(x,s) ({ __typeof__(x) __x = (x); __typeof__(s) __s = (s); __x < 0 ? -(-__x >> __s) : __x >> __s; })
NTP_SCALE_SHIFT  macro  include/linux/timex.h  247  #define NTP_SCALE_SHIFT 32
NTP_INTERVAL_FREQ  macro  include/linux/timex.h  249  #define NTP_INTERVAL_FREQ (HZ)
NTP_INTERVAL_LENGTH  macro  include/linux/timex.h  250  #define NTP_INTERVAL_LENGTH (NSEC_PER_SEC/NTP_INTERVAL_FREQ)
ntp_tick_length  prototype  include/linux/timex.h  253  extern u64 ntp_tick_length(void);
second_overflow  prototype  include/linux/timex.h  255  extern int second_overflow(unsigned long secs);
do_adjtimex  prototype  include/linux/timex.h  256  extern int do_adjtimex(struct timex *);
hardpps  prototype  include/linux/timex.h  257  extern void hardpps(const struct timespec *,const struct timespec *);
read_current_timer  prototype  include/linux/timex.h  259  int read_current_timer(unsigned long *timer_val);
PIT_TICK_RATE  macro  include/linux/timex.h  262  #define PIT_TICK_RATE 1193182ul
_LINUX_JIFFIES_H  macro  include/linux/jiffies.h  2  #define _LINUX_JIFFIES_H
SHIFT_HZ  macro  include/linux/jiffies.h  37  # define SHIFT_HZ 13
LATCH  macro  include/linux/jiffies.h  43  #define LATCH ((CLOCK_TICK_RATE + HZ/2) / HZ)
SH_DIV  macro  include/linux/jiffies.h  54  #define SH_DIV(NOM,DEN,LSH) ( (((NOM) / (DEN)) << (LSH)) + ((((NOM) % (DEN)) << (LSH)) + (DEN) / 2) / (DEN))
ACTHZ  macro  include/linux/jiffies.h  58  #define ACTHZ (SH_DIV (CLOCK_TICK_RATE,LATCH,8))
TICK_NSEC  macro  include/linux/jiffies.h  61  #define TICK_NSEC (SH_DIV (1000000UL * 1000,ACTHZ,8))
TICK_USEC  macro  include/linux/jiffies.h  64  #define TICK_USEC ((1000000UL + USER_HZ/2) / USER_HZ)
TICK_USEC_TO_NSEC  macro  include/linux/jiffies.h  68  #define TICK_USEC_TO_NSEC(TUSEC) (SH_DIV (TUSEC * USER_HZ * 1000,ACTHZ,8))
__jiffy_data  macro  include/linux/jiffies.h  74  #define __jiffy_data __attribute__((section(".data")))
get_jiffies_64  function  include/linux/jiffies.h  87  static inline u64 get_jiffies_64(void)
time_after  macro  include/linux/jiffies.h  106  #define time_after(a,b) (typecheck(unsigned long, a) && typecheck(unsigned long, b) && ((long)(b) - (long)(a) < 0))
time_before  macro  include/linux/jiffies.h  110  #define time_before(a,b) time_after(b,a)
time_after_eq  macro  include/linux/jiffies.h  112  #define time_after_eq(a,b) (typecheck(unsigned long, a) && typecheck(unsigned long, b) && ((long)(a) - (long)(b) >= 0))
time_before_eq  macro  include/linux/jiffies.h  116  #define time_before_eq(a,b) time_after_eq(b,a)
time_in_range  macro  include/linux/jiffies.h  121  #define time_in_range(a,b,c) (time_after_eq(a,b) && time_before_eq(a,c))
time_in_range_open  macro  include/linux/jiffies.h  128  #define time_in_range_open(a,b,c) (time_after_eq(a,b) && time_before(a,c))
time_after64  macro  include/linux/jiffies.h  135  #define time_after64(a,b) (typecheck(__u64, a) && typecheck(__u64, b) && ((__s64)(b) - (__s64)(a) < 0))
time_before64  macro  include/linux/jiffies.h  139  #define time_before64(a,b) time_after64(b,a)
time_after_eq64  macro  include/linux/jiffies.h  141  #define time_after_eq64(a,b) (typecheck(__u64, a) && typecheck(__u64, b) && ((__s64)(a) - (__s64)(b) >= 0))
time_before_eq64  macro  include/linux/jiffies.h  145  #define time_before_eq64(a,b) time_after_eq64(b,a)
time_is_before_jiffies  macro  include/linux/jiffies.h  152  #define time_is_before_jiffies(a) time_after(jiffies,a)
time_is_after_jiffies  macro  include/linux/jiffies.h  155  #define time_is_after_jiffies(a) time_before(jiffies,a)
time_is_before_eq_jiffies  macro  include/linux/jiffies.h  158  #define time_is_before_eq_jiffies(a) time_after_eq(jiffies,a)
time_is_after_eq_jiffies  macro  include/linux/jiffies.h  161  #define time_is_after_eq_jiffies(a) time_before_eq(jiffies,a)
INITIAL_JIFFIES  macro  include/linux/jiffies.h  167  #define INITIAL_JIFFIES ((unsigned long)(unsigned int) (-300*HZ))
MAX_JIFFY_OFFSET  macro  include/linux/jiffies.h  181  #define MAX_JIFFY_OFFSET ((LONG_MAX >> 1)-1)
SEC_JIFFIE_SC  macro  include/linux/jiffies.h  259  #define SEC_JIFFIE_SC (32 - SHIFT_HZ)
NSEC_JIFFIE_SC  macro  include/linux/jiffies.h  261  #define NSEC_JIFFIE_SC (SEC_JIFFIE_SC + 29)
USEC_JIFFIE_SC  macro  include/linux/jiffies.h  262  #define USEC_JIFFIE_SC (SEC_JIFFIE_SC + 19)
SEC_CONVERSION  macro  include/linux/jiffies.h  263  #define SEC_CONVERSION ((unsigned long)((((u64)NSEC_PER_SEC << SEC_JIFFIE_SC) + TICK_NSEC -1) / (u64)TICK_NSEC))
NSEC_CONVERSION  macro  include/linux/jiffies.h  266  #define NSEC_CONVERSION ((unsigned long)((((u64)1 << NSEC_JIFFIE_SC) + TICK_NSEC -1) / (u64)TICK_NSEC))
USEC_CONVERSION  macro  include/linux/jiffies.h  268  #define USEC_CONVERSION ((unsigned long)((((u64)NSEC_PER_USEC << USEC_JIFFIE_SC) + TICK_NSEC -1) / (u64)TICK_NSEC))
USEC_ROUND  macro  include/linux/jiffies.h  278  #define USEC_ROUND (u64)(((u64)1 << USEC_JIFFIE_SC) - 1)
MAX_SEC_IN_JIFFIES  macro  include/linux/jiffies.h  288  # define MAX_SEC_IN_JIFFIES (SH_DIV((MAX_JIFFY_OFFSET >> SEC_JIFFIE_SC) * TICK_NSEC, NSEC_PER_SEC, 1) - 1)
jiffies_to_msecs  prototype  include/linux/jiffies.h  296  extern unsigned int jiffies_to_msecs(const unsigned long j);
jiffies_to_usecs  prototype  include/linux/jiffies.h  297  extern unsigned int jiffies_to_usecs(const unsigned long j);
msecs_to_jiffies  prototype  include/linux/jiffies.h  298  extern unsigned long msecs_to_jiffies(const unsigned int m);
usecs_to_jiffies  prototype  include/linux/jiffies.h  299  extern unsigned long usecs_to_jiffies(const unsigned int u);
timespec_to_jiffies  prototype  include/linux/jiffies.h  300  extern unsigned long timespec_to_jiffies(const struct timespec *value);
jiffies_to_timespec  prototype  include/linux/jiffies.h  301  extern void jiffies_to_timespec(const unsigned long jiffies,struct timespec *value);
timeval_to_jiffies  prototype  include/linux/jiffies.h  303  extern unsigned long timeval_to_jiffies(const struct timeval *value);
jiffies_to_timeval  prototype  include/linux/jiffies.h  304  extern void jiffies_to_timeval(const unsigned long jiffies,struct timeval *value);
jiffies_to_clock_t  prototype  include/linux/jiffies.h  306  extern clock_t jiffies_to_clock_t(unsigned long x);
clock_t_to_jiffies  prototype  include/linux/jiffies.h  307  extern unsigned long clock_t_to_jiffies(unsigned long x);
jiffies_64_to_clock_t  prototype  include/linux/jiffies.h  308  extern u64 jiffies_64_to_clock_t(u64 x);
nsec_to_clock_t  prototype  include/linux/jiffies.h  309  extern u64 nsec_to_clock_t(u64 x);
nsecs_to_jiffies64  prototype  include/linux/jiffies.h  310  extern u64 nsecs_to_jiffies64(u64 n);
nsecs_to_jiffies  prototype  include/linux/jiffies.h  311  extern unsigned long nsecs_to_jiffies(u64 n);
TIMESTAMP_SIZE  macro  include/linux/jiffies.h  313  #define TIMESTAMP_SIZE 30
_LINUX_RBTREE_H  macro  include/linux/rbtree.h  95  #define _LINUX_RBTREE_H
rb_node  struct  include/linux/rbtree.h  100  struct rb_node { unsigned long rb_parent_color; #define RB_RED 0 #define RB_BLACK 1 struct rb_node *rb_right; struct rb_node *rb_left; } __attribute__((aligned(sizeof(long))));
rb_root  struct  include/linux/rbtree.h  110  struct rb_root { struct rb_node *rb_node; };
rb_parent  macro  include/linux/rbtree.h  116  #define rb_parent(r) ((struct rb_node *)((r)->rb_parent_color & ~3))
rb_color  macro  include/linux/rbtree.h  117  #define rb_color(r) ((r)->rb_parent_color & 1)
rb_is_red  macro  include/linux/rbtree.h  118  #define rb_is_red(r) (!rb_color(r))
rb_is_black  macro  include/linux/rbtree.h  119  #define rb_is_black(r) rb_color(r)
rb_set_red  macro  include/linux/rbtree.h  120  #define rb_set_red(r) do { (r)->rb_parent_color &= ~1; } while (0)
rb_set_black  macro  include/linux/rbtree.h  121  #define rb_set_black(r) do { (r)->rb_parent_color |= 1; } while (0)
rb_set_parent  function  include/linux/rbtree.h  123  static inline void rb_set_parent(struct rb_node *rb,struct rb_node *p)
rb_set_color  function  include/linux/rbtree.h  127  static inline void rb_set_color(struct rb_node *rb,int color)
RB_ROOT  macro  include/linux/rbtree.h  132  #define RB_ROOT (struct rb_root) { NULL,}
rb_entry  macro  include/linux/rbtree.h  133  #define rb_entry(ptr,type,member) container_of(ptr,type,member)
RB_EMPTY_ROOT  macro  include/linux/rbtree.h  135  #define RB_EMPTY_ROOT(root) ((root)->rb_node == NULL)
RB_EMPTY_NODE  macro  include/linux/rbtree.h  136  #define RB_EMPTY_NODE(node) (rb_parent(node) == node)
RB_CLEAR_NODE  macro  include/linux/rbtree.h  137  #define RB_CLEAR_NODE(node) (rb_set_parent(node,node))
rb_init_node  function  include/linux/rbtree.h  139  static inline void rb_init_node(struct rb_node *rb)
rb_insert_color  prototype  include/linux/rbtree.h  147  extern void rb_insert_color(struct rb_node *,struct rb_root *);
rb_erase  prototype  include/linux/rbtree.h  148  extern void rb_erase(struct rb_node *,struct rb_root *);
rb_augment_insert  prototype  include/linux/rbtree.h  152  extern void rb_augment_insert(struct rb_node *node,rb_augment_f func, void *data);
rb_augment_erase_begin  prototype  include/linux/rbtree.h  154  extern struct rb_node *rb_augment_erase_begin(struct rb_node *node);
rb_augment_erase_end  prototype  include/linux/rbtree.h  155  extern void rb_augment_erase_end(struct rb_node *node,rb_augment_f func, void *data);
rb_next  prototype  include/linux/rbtree.h  159  extern struct rb_node *rb_next(const struct rb_node *);
rb_prev  prototype  include/linux/rbtree.h  160  extern struct rb_node *rb_prev(const struct rb_node *);
rb_first  prototype  include/linux/rbtree.h  161  extern struct rb_node *rb_first(const struct rb_root *);
rb_last  prototype  include/linux/rbtree.h  162  extern struct rb_node *rb_last(const struct rb_root *);
rb_replace_node  prototype  include/linux/rbtree.h  165  extern void rb_replace_node(struct rb_node *victim,struct rb_node *new,struct rb_root *root);
rb_link_node  function  include/linux/rbtree.h  168  static inline void rb_link_node(struct rb_node * node,struct rb_node * parent,struct rb_node ** rb_link)
_LINUX_THREAD_INFO_H  macro  include/linux/thread_info.h  8  #define _LINUX_THREAD_INFO_H
restart_block  struct  include/linux/thread_info.h  19  struct restart_block { long (*fn)(struct restart_block *); union { u32 __user *uaddr; u32 val; u32 flags; u32 bitset; u64 time; u32 __user *uaddr2; } futex; clockid_t clockid; struct timespec __user *rmtp; struct compat_timespec __user *compat_rmtp; u64 expires; } nanosleep; struct pollfd __user *ufds; int nfds; int has_timeout; unsigned long tv_sec; unsigned long tv_nsec; } poll; };
do_no_restart_syscall  prototype  include/linux/thread_info.h  51  extern long do_no_restart_syscall(struct restart_block *parm);
THREADINFO_GFP  macro  include/linux/thread_info.h  61  # define THREADINFO_GFP (GFP_KERNEL | __GFP_NOTRACK)
set_ti_thread_flag  function  include/linux/thread_info.h  69  static inline void set_ti_thread_flag(struct thread_info *ti,int flag)
clear_ti_thread_flag  function  include/linux/thread_info.h  74  static inline void clear_ti_thread_flag(struct thread_info *ti,int flag)
test_and_set_ti_thread_flag  function  include/linux/thread_info.h  79  static inline int test_and_set_ti_thread_flag(struct thread_info *ti,int flag)
test_and_clear_ti_thread_flag  function  include/linux/thread_info.h  84  static inline int test_and_clear_ti_thread_flag(struct thread_info *ti,int flag)
test_ti_thread_flag  function  include/linux/thread_info.h  89  static inline int test_ti_thread_flag(struct thread_info *ti,int flag)
set_thread_flag  macro  include/linux/thread_info.h  94  #define set_thread_flag(flag) set_ti_thread_flag(current_thread_info(), flag)
clear_thread_flag  macro  include/linux/thread_info.h  96  #define clear_thread_flag(flag) clear_ti_thread_flag(current_thread_info(), flag)
test_and_set_thread_flag  macro  include/linux/thread_info.h  98  #define test_and_set_thread_flag(flag) test_and_set_ti_thread_flag(current_thread_info(), flag)
test_and_clear_thread_flag  macro  include/linux/thread_info.h  100  #define test_and_clear_thread_flag(flag) test_and_clear_ti_thread_flag(current_thread_info(), flag)
test_thread_flag  macro  include/linux/thread_info.h  102  #define test_thread_flag(flag) test_ti_thread_flag(current_thread_info(), flag)
set_need_resched  macro  include/linux/thread_info.h  105  #define set_need_resched() set_thread_flag(TIF_NEED_RESCHED)
clear_need_resched  macro  include/linux/thread_info.h  106  #define clear_need_resched() clear_thread_flag(TIF_NEED_RESCHED)
HAVE_SET_RESTORE_SIGMASK  macro  arch/x86/include/asm/thread_info.h  246  #define HAVE_SET_RESTORE_SIGMASK 1
set_restore_sigmask  function  arch/x86/include/asm/thread_info.h  247  static inline void set_restore_sigmask(void)
clear_restore_sigmask  function  arch/x86/include/asm/thread_info.h  253  static inline void clear_restore_sigmask(void)
test_restore_sigmask  function  arch/x86/include/asm/thread_info.h  257  static inline bool test_restore_sigmask(void)
test_and_clear_restore_sigmask  function  arch/x86/include/asm/thread_info.h  261  static inline bool test_and_clear_restore_sigmask(void)
__LINUX_CPUMASK_H  macro  include/linux/cpumask.h  2  #define __LINUX_CPUMASK_H
cpumask  struct  include/linux/cpumask.h  14  typedef struct cpumask { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;
cpumask_t  struct  include/linux/cpumask.h  14  typedef struct cpumask { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;
cpumask_bits  macro  include/linux/cpumask.h  23  #define cpumask_bits(maskp) ((maskp)->bits)
nr_cpu_ids  macro  include/linux/cpumask.h  26  #define nr_cpu_ids 1
nr_cpumask_bits  macro  include/linux/cpumask.h  36  #define nr_cpumask_bits NR_CPUS
num_online_cpus  macro  include/linux/cpumask.h  94  #define num_online_cpus() 1U
num_possible_cpus  macro  include/linux/cpumask.h  95  #define num_possible_cpus() 1U
num_present_cpus  macro  include/linux/cpumask.h  96  #define num_present_cpus() 1U
num_active_cpus  macro  include/linux/cpumask.h  97  #define num_active_cpus() 1U
cpu_online  macro  include/linux/cpumask.h  98  #define cpu_online(cpu) ((cpu) == 0)
cpu_possible  macro  include/linux/cpumask.h  99  #define cpu_possible(cpu) ((cpu) == 0)
cpu_present  macro  include/linux/cpumask.h  100  #define cpu_present(cpu) ((cpu) == 0)
cpu_active  macro  include/linux/cpumask.h  101  #define cpu_active(cpu) ((cpu) == 0)
cpumask_check  function  include/linux/cpumask.h  105  static inline unsigned int cpumask_check(unsigned int cpu)
cpumask_first  function  include/linux/cpumask.h  158  static inline unsigned int cpumask_first(const struct cpumask *srcp)
cpumask_next  function  include/linux/cpumask.h  170  static inline unsigned int cpumask_next(int n,const struct cpumask *srcp)
cpumask_next_zero  function  include/linux/cpumask.h  185  static inline unsigned int cpumask_next_zero(int n,const struct cpumask *srcp)
cpumask_next_and  prototype  include/linux/cpumask.h  193  int cpumask_next_and(int n,const struct cpumask *,const struct cpumask *);
cpumask_any_but  prototype  include/linux/cpumask.h  194  int cpumask_any_but(const struct cpumask *mask,unsigned int cpu);
for_each_cpu  macro  include/linux/cpumask.h  203  #define for_each_cpu(cpu,mask) for ((cpu) = -1; (cpu) = cpumask_next((cpu), (mask)), (cpu) < nr_cpu_ids;)
for_each_cpu_not  macro  include/linux/cpumask.h  215  #define for_each_cpu_not(cpu,mask) for ((cpu) = -1; (cpu) = cpumask_next_zero((cpu), (mask)), (cpu) < nr_cpu_ids;)
for_each_cpu_and  macro  include/linux/cpumask.h  234  #define for_each_cpu_and(cpu,mask,and) for ((cpu) = -1; (cpu) = cpumask_next_and((cpu), (mask), (and)), (cpu) < nr_cpu_ids;)
CPU_BITS_NONE  macro  include/linux/cpumask.h  240  #define CPU_BITS_NONE { [0 ... BITS_TO_LONGS(NR_CPUS)-1] = 0UL }
CPU_BITS_CPU0  macro  include/linux/cpumask.h  245  #define CPU_BITS_CPU0 { [0] =  1UL }
cpumask_set_cpu  function  include/linux/cpumask.h  255  static inline void cpumask_set_cpu(unsigned int cpu,struct cpumask *dstp)
cpumask_clear_cpu  function  include/linux/cpumask.h  265  static inline void cpumask_clear_cpu(int cpu,struct cpumask *dstp)
cpumask_test_cpu  macro  include/linux/cpumask.h  277  #define cpumask_test_cpu(cpu,cpumask) test_bit(cpumask_check(cpu), cpumask_bits((cpumask)))
cpumask_test_and_set_cpu  function  include/linux/cpumask.h  287  static inline int cpumask_test_and_set_cpu(int cpu,struct cpumask *cpumask)
cpumask_test_and_clear_cpu  function  include/linux/cpumask.h  299  static inline int cpumask_test_and_clear_cpu(int cpu,struct cpumask *cpumask)
cpumask_setall  function  include/linux/cpumask.h  308  static inline void cpumask_setall(struct cpumask *dstp)
cpumask_clear  function  include/linux/cpumask.h  317  static inline void cpumask_clear(struct cpumask *dstp)
cpumask_and  function  include/linux/cpumask.h  328  static inline int cpumask_and(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_or  function  include/linux/cpumask.h  342  static inline void cpumask_or(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_xor  function  include/linux/cpumask.h  355  static inline void cpumask_xor(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_andnot  function  include/linux/cpumask.h  369  static inline int cpumask_andnot(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_complement  function  include/linux/cpumask.h  382  static inline void cpumask_complement(struct cpumask *dstp,const struct cpumask *srcp)
cpumask_equal  function  include/linux/cpumask.h  394  static inline bool cpumask_equal(const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_intersects  function  include/linux/cpumask.h  406  static inline bool cpumask_intersects(const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_subset  function  include/linux/cpumask.h  418  static inline int cpumask_subset(const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_empty  function  include/linux/cpumask.h  429  static inline bool cpumask_empty(const struct cpumask *srcp)
cpumask_full  function  include/linux/cpumask.h  438  static inline bool cpumask_full(const struct cpumask *srcp)
cpumask_weight  function  include/linux/cpumask.h  447  static inline unsigned int cpumask_weight(const struct cpumask *srcp)
cpumask_shift_right  function  include/linux/cpumask.h  458  static inline void cpumask_shift_right(struct cpumask *dstp,const struct cpumask *srcp, int n)
cpumask_shift_left  function  include/linux/cpumask.h  471  static inline void cpumask_shift_left(struct cpumask *dstp,const struct cpumask *srcp, int n)
cpumask_copy  function  include/linux/cpumask.h  483  static inline void cpumask_copy(struct cpumask *dstp,const struct cpumask *srcp)
cpumask_any  macro  include/linux/cpumask.h  495  #define cpumask_any(srcp) cpumask_first(srcp)
cpumask_first_and  macro  include/linux/cpumask.h  504  #define cpumask_first_and(src1p,src2p) cpumask_next_and(-1,(src1p),(src2p))
cpumask_any_and  macro  include/linux/cpumask.h  513  #define cpumask_any_and(mask1,mask2) cpumask_first_and((mask1),(mask2))
cpumask_of  macro  include/linux/cpumask.h  519  #define cpumask_of(cpu) (get_cpu_mask(cpu))
cpumask_scnprintf  function  include/linux/cpumask.h  530  static inline int cpumask_scnprintf(char *buf,int len,const struct cpumask *srcp)
cpumask_parse_user  function  include/linux/cpumask.h  544  static inline int cpumask_parse_user(const char __user *buf,int len,struct cpumask *dstp)
cpumask_parselist_user  function  include/linux/cpumask.h  558  static inline int cpumask_parselist_user(const char __user *buf,int len,struct cpumask *dstp)
cpulist_scnprintf  function  include/linux/cpumask.h  574  static inline int cpulist_scnprintf(char *buf,int len,const struct cpumask *srcp)
cpulist_parse  function  include/linux/cpumask.h  589  static inline int cpulist_parse(const char *buf,struct cpumask *dstp)
cpumask_size  function  include/linux/cpumask.h  599  static inline size_t cpumask_size(void)
alloc_cpumask_var_node  function  include/linux/cpumask.h  655  static inline bool alloc_cpumask_var_node(cpumask_var_t *mask,gfp_t flags,int node)
alloc_cpumask_var  function  include/linux/cpumask.h  650  static inline bool alloc_cpumask_var(cpumask_var_t *mask,gfp_t flags)
zalloc_cpumask_var_node  function  include/linux/cpumask.h  667  static inline bool zalloc_cpumask_var_node(cpumask_var_t *mask,gfp_t flags,int node)
zalloc_cpumask_var  function  include/linux/cpumask.h  661  static inline bool zalloc_cpumask_var(cpumask_var_t *mask,gfp_t flags)
alloc_bootmem_cpumask_var  function  include/linux/cpumask.h  674  static inline void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
free_cpumask_var  function  include/linux/cpumask.h  678  static inline void free_cpumask_var(cpumask_var_t mask)
free_bootmem_cpumask_var  function  include/linux/cpumask.h  682  static inline void free_bootmem_cpumask_var(cpumask_var_t mask)
cpu_all_mask  macro  include/linux/cpumask.h  690  #define cpu_all_mask to_cpumask(cpu_all_bits)
cpu_none_mask  macro  include/linux/cpumask.h  693  #define cpu_none_mask to_cpumask(cpu_bit_bitmap[0])
for_each_possible_cpu  macro  include/linux/cpumask.h  695  #define for_each_possible_cpu(cpu) for_each_cpu((cpu),cpu_possible_mask)
for_each_online_cpu  macro  include/linux/cpumask.h  696  #define for_each_online_cpu(cpu) for_each_cpu((cpu),cpu_online_mask)
for_each_present_cpu  macro  include/linux/cpumask.h  697  #define for_each_present_cpu(cpu) for_each_cpu((cpu),cpu_present_mask)
set_cpu_possible  prototype  include/linux/cpumask.h  700  void set_cpu_possible(unsigned int cpu,bool possible);
set_cpu_present  prototype  include/linux/cpumask.h  701  void set_cpu_present(unsigned int cpu,bool present);
set_cpu_online  prototype  include/linux/cpumask.h  702  void set_cpu_online(unsigned int cpu,bool online);
set_cpu_active  prototype  include/linux/cpumask.h  703  void set_cpu_active(unsigned int cpu,bool active);
init_cpu_present  prototype  include/linux/cpumask.h  704  void init_cpu_present(const struct cpumask *src);
init_cpu_possible  prototype  include/linux/cpumask.h  705  void init_cpu_possible(const struct cpumask *src);
init_cpu_online  prototype  include/linux/cpumask.h  706  void init_cpu_online(const struct cpumask *src);
to_cpumask  macro  include/linux/cpumask.h  718  #define to_cpumask(bitmap) ((struct cpumask *)(1 ? (bitmap) : (void *)sizeof(__check_is_bitmap(bitmap))))
__check_is_bitmap  function  include/linux/cpumask.h  722  static inline int __check_is_bitmap(const unsigned long *bitmap)
get_cpu_mask  function  include/linux/cpumask.h  737  static inline const struct cpumask *get_cpu_mask(unsigned int cpu)
cpu_is_offline  macro  include/linux/cpumask.h  744  #define cpu_is_offline(cpu) unlikely(!cpu_online(cpu))
CPU_BITS_ALL  macro  include/linux/cpumask.h  754  #define CPU_BITS_ALL { [0 ... BITS_TO_LONGS(NR_CPUS)-2] = ~0UL, [BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD }
cpumask_of_cpu  macro  include/linux/cpumask.h  767  #define cpumask_of_cpu(cpu) (*get_cpu_mask(cpu))
CPU_MASK_LAST_WORD  macro  include/linux/cpumask.h  769  #define CPU_MASK_LAST_WORD BITMAP_LAST_WORD_MASK(NR_CPUS)
CPU_MASK_ALL  macro  include/linux/cpumask.h  780  #define CPU_MASK_ALL (cpumask_t) { { [0 ... BITS_TO_LONGS(NR_CPUS)-2] = ~0UL, [BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD } }
CPU_MASK_NONE  macro  include/linux/cpumask.h  788  #define CPU_MASK_NONE (cpumask_t) { { [0 ... BITS_TO_LONGS(NR_CPUS)-1] =  0UL } }
CPU_MASK_CPU0  macro  include/linux/cpumask.h  793  #define CPU_MASK_CPU0 (cpumask_t) { { [0] =  1UL } }
first_cpu  macro  include/linux/cpumask.h  808  #define first_cpu(src) __first_cpu(&(src))
next_cpu  macro  include/linux/cpumask.h  809  #define next_cpu(n,src) __next_cpu((n),&(src))
any_online_cpu  macro  include/linux/cpumask.h  810  #define any_online_cpu(mask) cpumask_any_and(&mask,cpu_online_mask)
for_each_cpu_mask  macro  include/linux/cpumask.h  811  #define for_each_cpu_mask(cpu,mask) for ((cpu) = -1; (cpu) = next_cpu((cpu), (mask)), (cpu) < NR_CPUS; )
__first_cpu  prototype  include/linux/cpumask.h  805  int __first_cpu(const cpumask_t *srcp);
__next_cpu  prototype  include/linux/cpumask.h  806  int __next_cpu(int n,const cpumask_t *srcp);
for_each_cpu_mask_nr  macro  include/linux/cpumask.h  824  #define for_each_cpu_mask_nr(cpu,mask) for ((cpu) = -1; (cpu) = __next_cpu_nr((cpu), &(mask)), (cpu) < nr_cpu_ids; )
__next_cpu_nr  prototype  include/linux/cpumask.h  823  int __next_cpu_nr(int n,const cpumask_t *srcp);
cpus_addr  macro  include/linux/cpumask.h  831  #define cpus_addr(src) ((src).bits)
cpu_set  macro  include/linux/cpumask.h  833  #define cpu_set(cpu,dst) __cpu_set((cpu),&(dst))
__cpu_set  function  include/linux/cpumask.h  834  static inline void __cpu_set(int cpu,volatile cpumask_t *dstp)
cpu_clear  macro  include/linux/cpumask.h  839  #define cpu_clear(cpu,dst) __cpu_clear((cpu),&(dst))
__cpu_clear  function  include/linux/cpumask.h  840  static inline void __cpu_clear(int cpu,volatile cpumask_t *dstp)
cpus_setall  macro  include/linux/cpumask.h  845  #define cpus_setall(dst) __cpus_setall(&(dst),NR_CPUS)
__cpus_setall  function  include/linux/cpumask.h  846  static inline void __cpus_setall(cpumask_t *dstp,int nbits)
cpus_clear  macro  include/linux/cpumask.h  851  #define cpus_clear(dst) __cpus_clear(&(dst),NR_CPUS)
__cpus_clear  function  include/linux/cpumask.h  852  static inline void __cpus_clear(cpumask_t *dstp,int nbits)
cpu_isset  macro  include/linux/cpumask.h  858  #define cpu_isset(cpu,cpumask) test_bit((cpu),(cpumask).bits)
cpu_test_and_set  macro  include/linux/cpumask.h  860  #define cpu_test_and_set(cpu,cpumask) __cpu_test_and_set((cpu),&(cpumask))
__cpu_test_and_set  function  include/linux/cpumask.h  861  static inline int __cpu_test_and_set(int cpu,cpumask_t *addr)
cpus_and  macro  include/linux/cpumask.h  866  #define cpus_and(dst,src1,src2) __cpus_and(&(dst),&(src1),&(src2),NR_CPUS)
__cpus_and  function  include/linux/cpumask.h  867  static inline int __cpus_and(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_or  macro  include/linux/cpumask.h  873  #define cpus_or(dst,src1,src2) __cpus_or(&(dst),&(src1),&(src2),NR_CPUS)
__cpus_or  function  include/linux/cpumask.h  874  static inline void __cpus_or(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_xor  macro  include/linux/cpumask.h  880  #define cpus_xor(dst,src1,src2) __cpus_xor(&(dst),&(src1),&(src2),NR_CPUS)
__cpus_xor  function  include/linux/cpumask.h  881  static inline void __cpus_xor(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_andnot  macro  include/linux/cpumask.h  887  #define cpus_andnot(dst,src1,src2) __cpus_andnot(&(dst), &(src1), &(src2), NR_CPUS)
__cpus_andnot  function  include/linux/cpumask.h  889  static inline int __cpus_andnot(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_equal  macro  include/linux/cpumask.h  895  #define cpus_equal(src1,src2) __cpus_equal(&(src1),&(src2),NR_CPUS)
__cpus_equal  function  include/linux/cpumask.h  896  static inline int __cpus_equal(const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_intersects  macro  include/linux/cpumask.h  902  #define cpus_intersects(src1,src2) __cpus_intersects(&(src1),&(src2),NR_CPUS)
__cpus_intersects  function  include/linux/cpumask.h  903  static inline int __cpus_intersects(const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_subset  macro  include/linux/cpumask.h  909  #define cpus_subset(src1,src2) __cpus_subset(&(src1),&(src2),NR_CPUS)
__cpus_subset  function  include/linux/cpumask.h  910  static inline int __cpus_subset(const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_empty  macro  include/linux/cpumask.h  916  #define cpus_empty(src) __cpus_empty(&(src),NR_CPUS)
__cpus_empty  function  include/linux/cpumask.h  917  static inline int __cpus_empty(const cpumask_t *srcp,int nbits)
cpus_weight  macro  include/linux/cpumask.h  922  #define cpus_weight(cpumask) __cpus_weight(&(cpumask),NR_CPUS)
__cpus_weight  function  include/linux/cpumask.h  923  static inline int __cpus_weight(const cpumask_t *srcp,int nbits)
cpus_shift_left  macro  include/linux/cpumask.h  928  #define cpus_shift_left(dst,src,n) __cpus_shift_left(&(dst), &(src), (n), NR_CPUS)
__cpus_shift_left  function  include/linux/cpumask.h  930  static inline void __cpus_shift_left(cpumask_t *dstp,const cpumask_t *srcp, int n, int nbits)
__LINUX_NODEMASK_H  macro  include/linux/nodemask.h  2  #define __LINUX_NODEMASK_H
node_set  macro  include/linux/nodemask.h  101  #define node_set(node,dst) __node_set((node),&(dst))
__node_set  function  include/linux/nodemask.h  102  static inline void __node_set(int node,volatile nodemask_t *dstp)
node_clear  macro  include/linux/nodemask.h  107  #define node_clear(node,dst) __node_clear((node),&(dst))
__node_clear  function  include/linux/nodemask.h  108  static inline void __node_clear(int node,volatile nodemask_t *dstp)
nodes_setall  macro  include/linux/nodemask.h  113  #define nodes_setall(dst) __nodes_setall(&(dst),MAX_NUMNODES)
__nodes_setall  function  include/linux/nodemask.h  114  static inline void __nodes_setall(nodemask_t *dstp,int nbits)
nodes_clear  macro  include/linux/nodemask.h  119  #define nodes_clear(dst) __nodes_clear(&(dst),MAX_NUMNODES)
__nodes_clear  function  include/linux/nodemask.h  120  static inline void __nodes_clear(nodemask_t *dstp,int nbits)
node_isset  macro  include/linux/nodemask.h  126  #define node_isset(node,nodemask) test_bit((node),(nodemask).bits)
node_test_and_set  macro  include/linux/nodemask.h  128  #define node_test_and_set(node,nodemask) __node_test_and_set((node), &(nodemask))
__node_test_and_set  function  include/linux/nodemask.h  130  static inline int __node_test_and_set(int node,nodemask_t *addr)
nodes_and  macro  include/linux/nodemask.h  135  #define nodes_and(dst,src1,src2) __nodes_and(&(dst), &(src1), &(src2), MAX_NUMNODES)
__nodes_and  function  include/linux/nodemask.h  137  static inline void __nodes_and(nodemask_t *dstp,const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_or  macro  include/linux/nodemask.h  143  #define nodes_or(dst,src1,src2) __nodes_or(&(dst), &(src1), &(src2), MAX_NUMNODES)
__nodes_or  function  include/linux/nodemask.h  145  static inline void __nodes_or(nodemask_t *dstp,const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_xor  macro  include/linux/nodemask.h  151  #define nodes_xor(dst,src1,src2) __nodes_xor(&(dst), &(src1), &(src2), MAX_NUMNODES)
__nodes_xor  function  include/linux/nodemask.h  153  static inline void __nodes_xor(nodemask_t *dstp,const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_andnot  macro  include/linux/nodemask.h  159  #define nodes_andnot(dst,src1,src2) __nodes_andnot(&(dst), &(src1), &(src2), MAX_NUMNODES)
__nodes_andnot  function  include/linux/nodemask.h  161  static inline void __nodes_andnot(nodemask_t *dstp,const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_complement  macro  include/linux/nodemask.h  167  #define nodes_complement(dst,src) __nodes_complement(&(dst), &(src), MAX_NUMNODES)
__nodes_complement  function  include/linux/nodemask.h  169  static inline void __nodes_complement(nodemask_t *dstp,const nodemask_t *srcp, int nbits)
nodes_equal  macro  include/linux/nodemask.h  175  #define nodes_equal(src1,src2) __nodes_equal(&(src1), &(src2), MAX_NUMNODES)
__nodes_equal  function  include/linux/nodemask.h  177  static inline int __nodes_equal(const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_intersects  macro  include/linux/nodemask.h  183  #define nodes_intersects(src1,src2) __nodes_intersects(&(src1), &(src2), MAX_NUMNODES)
__nodes_intersects  function  include/linux/nodemask.h  185  static inline int __nodes_intersects(const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_subset  macro  include/linux/nodemask.h  191  #define nodes_subset(src1,src2) __nodes_subset(&(src1), &(src2), MAX_NUMNODES)
__nodes_subset  function  include/linux/nodemask.h  193  static inline int __nodes_subset(const nodemask_t *src1p,const nodemask_t *src2p, int nbits)
nodes_empty  macro  include/linux/nodemask.h  199  #define nodes_empty(src) __nodes_empty(&(src),MAX_NUMNODES)
__nodes_empty  function  include/linux/nodemask.h  200  static inline int __nodes_empty(const nodemask_t *srcp,int nbits)
nodes_full  macro  include/linux/nodemask.h  205  #define nodes_full(nodemask) __nodes_full(&(nodemask),MAX_NUMNODES)
__nodes_full  function  include/linux/nodemask.h  206  static inline int __nodes_full(const nodemask_t *srcp,int nbits)
nodes_weight  macro  include/linux/nodemask.h  211  #define nodes_weight(nodemask) __nodes_weight(&(nodemask),MAX_NUMNODES)
__nodes_weight  function  include/linux/nodemask.h  212  static inline int __nodes_weight(const nodemask_t *srcp,int nbits)
nodes_shift_right  macro  include/linux/nodemask.h  217  #define nodes_shift_right(dst,src,n) __nodes_shift_right(&(dst), &(src), (n), MAX_NUMNODES)
__nodes_shift_right  function  include/linux/nodemask.h  219  static inline void __nodes_shift_right(nodemask_t *dstp,const nodemask_t *srcp, int n, int nbits)
nodes_shift_left  macro  include/linux/nodemask.h  225  #define nodes_shift_left(dst,src,n) __nodes_shift_left(&(dst), &(src), (n), MAX_NUMNODES)
__nodes_shift_left  function  include/linux/nodemask.h  227  static inline void __nodes_shift_left(nodemask_t *dstp,const nodemask_t *srcp, int n, int nbits)
first_node  macro  include/linux/nodemask.h  236  #define first_node(src) __first_node(&(src))
__first_node  function  include/linux/nodemask.h  237  static inline int __first_node(const nodemask_t *srcp)
next_node  macro  include/linux/nodemask.h  242  #define next_node(n,src) __next_node((n),&(src))
__next_node  function  include/linux/nodemask.h  243  static inline int __next_node(int n,const nodemask_t *srcp)
init_nodemask_of_node  function  include/linux/nodemask.h  248  static inline void init_nodemask_of_node(nodemask_t *mask,int node)
nodemask_of_node  macro  include/linux/nodemask.h  254  #define nodemask_of_node(node) ({ typeof(_unused_nodemask_arg_) m; if (sizeof(m) == sizeof(unsigned long)) { m.bits[0] = 1UL << (node); } else { init_nodemask_of_node(&m, (node)); } m; })
first_unset_node  macro  include/linux/nodemask.h  265  #define first_unset_node(mask) __first_unset_node(&(mask))
__first_unset_node  function  include/linux/nodemask.h  266  static inline int __first_unset_node(const nodemask_t *maskp)
NODE_MASK_LAST_WORD  macro  include/linux/nodemask.h  272  #define NODE_MASK_LAST_WORD BITMAP_LAST_WORD_MASK(MAX_NUMNODES)
NODE_MASK_ALL  macro  include/linux/nodemask.h  283  #define NODE_MASK_ALL ((nodemask_t) { { [0 ... BITS_TO_LONGS(MAX_NUMNODES)-2] = ~0UL, [BITS_TO_LONGS(MAX_NUMNODES)-1] = NODE_MASK_LAST_WORD } })
NODE_MASK_NONE  macro  include/linux/nodemask.h  291  #define NODE_MASK_NONE ((nodemask_t) { { [0 ... BITS_TO_LONGS(MAX_NUMNODES)-1] =  0UL } })
nodes_addr  macro  include/linux/nodemask.h  296  #define nodes_addr(src) ((src).bits)
nodemask_scnprintf  macro  include/linux/nodemask.h  298  #define nodemask_scnprintf(buf,len,src) __nodemask_scnprintf((buf), (len), &(src), MAX_NUMNODES)
__nodemask_scnprintf  function  include/linux/nodemask.h  300  static inline int __nodemask_scnprintf(char *buf,int len,const nodemask_t *srcp, int nbits)
nodemask_parse_user  macro  include/linux/nodemask.h  306  #define nodemask_parse_user(ubuf,ulen,dst) __nodemask_parse_user((ubuf), (ulen), &(dst), MAX_NUMNODES)
__nodemask_parse_user  function  include/linux/nodemask.h  308  static inline int __nodemask_parse_user(const char __user *buf,int len,nodemask_t *dstp, int nbits)
nodelist_scnprintf  macro  include/linux/nodemask.h  314  #define nodelist_scnprintf(buf,len,src) __nodelist_scnprintf((buf), (len), &(src), MAX_NUMNODES)
__nodelist_scnprintf  function  include/linux/nodemask.h  316  static inline int __nodelist_scnprintf(char *buf,int len,const nodemask_t *srcp, int nbits)
nodelist_parse  macro  include/linux/nodemask.h  322  #define nodelist_parse(buf,dst) __nodelist_parse((buf),&(dst),MAX_NUMNODES)
__nodelist_parse  function  include/linux/nodemask.h  323  static inline int __nodelist_parse(const char *buf,nodemask_t *dstp,int nbits)
node_remap  macro  include/linux/nodemask.h  328  #define node_remap(oldbit,old,new) __node_remap((oldbit), &(old), &(new), MAX_NUMNODES)
__node_remap  function  include/linux/nodemask.h  330  static inline int __node_remap(int oldbit,const nodemask_t *oldp, const nodemask_t *newp, int nbits)
nodes_remap  macro  include/linux/nodemask.h  336  #define nodes_remap(dst,src,old,new) __nodes_remap(&(dst), &(src), &(old), &(new), MAX_NUMNODES)
__nodes_remap  function  include/linux/nodemask.h  338  static inline void __nodes_remap(nodemask_t *dstp,const nodemask_t *srcp,const nodemask_t *oldp, const nodemask_t *newp, int nbits)
nodes_onto  macro  include/linux/nodemask.h  344  #define nodes_onto(dst,orig,relmap) __nodes_onto(&(dst), &(orig), &(relmap), MAX_NUMNODES)
__nodes_onto  function  include/linux/nodemask.h  346  static inline void __nodes_onto(nodemask_t *dstp,const nodemask_t *origp,const nodemask_t *relmapp, int nbits)
nodes_fold  macro  include/linux/nodemask.h  352  #define nodes_fold(dst,orig,sz) __nodes_fold(&(dst), &(orig), sz, MAX_NUMNODES)
__nodes_fold  function  include/linux/nodemask.h  354  static inline void __nodes_fold(nodemask_t *dstp,const nodemask_t *origp,int sz, int nbits)
for_each_node_mask  macro  include/linux/nodemask.h  366  #define for_each_node_mask(node,mask) if (!nodes_empty(mask)) for ((node) = 0; (node) < 1; (node)++)
node_states  enum  include/linux/nodemask.h  374  enum node_states { N_POSSIBLE, N_ONLINE, N_NORMAL_MEMORY, N_HIGH_MEMORY, N_CPU, NR_NODE_STATES };
node_state  function  include/linux/nodemask.h  438  static inline int node_state(int node,enum node_states state)
node_set_state  function  include/linux/nodemask.h  443  static inline void node_set_state(int node,enum node_states state)
node_clear_state  function  include/linux/nodemask.h  447  static inline void node_clear_state(int node,enum node_states state)
num_node_state  function  include/linux/nodemask.h  451  static inline int num_node_state(enum node_states state)
for_each_node_state  macro  include/linux/nodemask.h  456  #define for_each_node_state(node,__state) for ( (node) = 0; (node) == 0; (node) = 1)
first_online_node  macro  include/linux/nodemask.h  459  #define first_online_node 0
next_online_node  macro  include/linux/nodemask.h  460  #define next_online_node(nid) (MAX_NUMNODES)
node_set_online  macro  include/linux/nodemask.h  464  #define node_set_online(node) node_set_state((node),N_ONLINE)
node_set_offline  macro  include/linux/nodemask.h  465  #define node_set_offline(node) node_clear_state((node),N_ONLINE)
nr_node_ids  macro  include/linux/nodemask.h  461  #define nr_node_ids 1
nr_online_nodes  macro  include/linux/nodemask.h  462  #define nr_online_nodes 1
node_random  function  include/linux/nodemask.h  472  static inline int node_random(const nodemask_t *mask)
node_online_map  macro  include/linux/nodemask.h  478  #define node_online_map node_states[N_ONLINE]
node_possible_map  macro  include/linux/nodemask.h  479  #define node_possible_map node_states[N_POSSIBLE]
num_online_nodes  macro  include/linux/nodemask.h  481  #define num_online_nodes() num_node_state(N_ONLINE)
num_possible_nodes  macro  include/linux/nodemask.h  482  #define num_possible_nodes() num_node_state(N_POSSIBLE)
node_online  macro  include/linux/nodemask.h  483  #define node_online(node) node_state((node),N_ONLINE)
node_possible  macro  include/linux/nodemask.h  484  #define node_possible(node) node_state((node),N_POSSIBLE)
for_each_node  macro  include/linux/nodemask.h  486  #define for_each_node(node) for_each_node_state(node,N_POSSIBLE)
for_each_online_node  macro  include/linux/nodemask.h  487  #define for_each_online_node(node) for_each_node_state(node,N_ONLINE)
NODEMASK_ALLOC  macro  include/linux/nodemask.h  499  #define NODEMASK_ALLOC(type,name,gfp_flags) type _##name,*name = &_##name
NODEMASK_FREE  macro  include/linux/nodemask.h  500  #define NODEMASK_FREE(m) do {} while (0)
nodemask_scratch  struct  include/linux/nodemask.h  504  struct nodemask_scratch { nodemask_t mask1; nodemask_t mask2; };
NODEMASK_SCRATCH  macro  include/linux/nodemask.h  509  #define NODEMASK_SCRATCH(x) NODEMASK_ALLOC(struct nodemask_scratch, x, GFP_KERNEL | __GFP_NORETRY)
NODEMASK_SCRATCH_FREE  macro  include/linux/nodemask.h  512  #define NODEMASK_SCRATCH_FREE(x) NODEMASK_FREE(x)
_LINUX_MM_TYPES_H  macro  include/linux/mm_types.h  2  #define _LINUX_MM_TYPES_H
AT_VECTOR_SIZE_ARCH  macro  include/linux/mm_types.h  20  #define AT_VECTOR_SIZE_ARCH 0
AT_VECTOR_SIZE  macro  include/linux/mm_types.h  22  #define AT_VECTOR_SIZE (2*(AT_VECTOR_SIZE_ARCH + AT_VECTOR_SIZE_BASE + 1))
USE_SPLIT_PTLOCKS  macro  include/linux/mm_types.h  26  #define USE_SPLIT_PTLOCKS (NR_CPUS >= CONFIG_SPLIT_PTLOCK_CPUS)
page  struct  include/linux/mm_types.h  41  struct page { unsigned long flags; struct address_space *mapping; pgoff_t index; void *freelist; }; unsigned long counters; atomic_t _mapcount; struct { unsigned inuse:16; unsigned objects:15; unsigned frozen:1; }; atomic_t _count; }; struct list_head lru; struct page *next; int pages; int pobjects; short int pages; short int pobjects; spinlock_t ptl; struct kmem_cache *slab; struct page *first_page; }; unsigned long debug_flags; void *shadow; }
page_frag  struct  include/linux/mm_types.h  173  struct page_frag { struct page *page; __u32 offset; __u32 size; __u16 offset; __u16 size; };
vm_region  struct  include/linux/mm_types.h  191  struct vm_region { struct rb_node vm_rb; vm_flags_t vm_flags; unsigned long vm_start; unsigned long vm_end; unsigned long vm_top; unsigned long vm_pgoff; struct file *vm_file; int vm_usage; bool vm_icache_flushed : 1; };
vm_area_struct  struct  include/linux/mm_types.h  211  struct vm_area_struct { struct mm_struct * vm_mm; unsigned long vm_start; unsigned long vm_end; struct vm_area_struct *vm_next, *vm_prev; pgprot_t vm_page_prot; unsigned long vm_flags; struct rb_node vm_rb; struct list_head list; void *parent; struct vm_area_struct *head; } vm_set; struct raw_prio_tree_node prio_tree_node; } shared; struct list_head anon_vma_chain; struct anon_vma *anon_vma; const struct vm_operations_struct *vm_ops; unsigned long vm_pgoff; struct file * vm_file; void * vm_private_data; struct vm_region *vm_region; struct mempolicy *vm_policy; };
core_thread  struct  include/linux/mm_types.h  268  struct core_thread { struct task_struct *task; struct core_thread *next; };
core_state  struct  include/linux/mm_types.h  273  struct core_state { atomic_t nr_threads; struct core_thread dumper; struct completion startup; };
SPLIT_RSS_COUNTING  macro  include/linux/mm_types.h  287  #define SPLIT_RSS_COUNTING
task_rss_stat  struct  include/linux/mm_types.h  289  struct task_rss_stat { int events; int count[NR_MM_COUNTERS]; };
mm_rss_stat  struct  include/linux/mm_types.h  295  struct mm_rss_stat { atomic_long_t count[NR_MM_COUNTERS]; };
mm_struct  struct  include/linux/mm_types.h  299  struct mm_struct { struct vm_area_struct * mmap; struct rb_root mm_rb; struct vm_area_struct * mmap_cache; unsigned long (*get_unmapped_area) (struct file *filp,unsigned long addr, unsigned long len,unsigned long pgoff, unsigned long flags); void (*unmap_area) (struct mm_struct *mm, unsigned long addr); unsigned long mmap_base; unsigned long task_size; unsigned long cached_hole_size; unsigned long free_area_cache; pgd_t * pgd; atomic_t mm_users; atomic_t mm_count; int map_count; spinlock_t page_table_lock; struct rw_semaphore mmap_sem; struct list_head mmlist; unsigned long hiwater_rss; unsigned long hiwater_vm; unsigned long total_vm; unsigned long locked_vm; unsigned long pinned_vm; unsigned long shared_vm; unsigned long exec_vm; unsigned long stack_vm; unsigned long reserved_vm; unsigned long def_flags; unsigned long nr_ptes; unsigned long start_code, end_code, start_data, end_data; unsigned long start_brk, brk, start_stack; unsigned long arg_start, arg_end, env_start, env_end; unsigned long saved_auxv[AT_VECTOR_SIZE]; struct mm_rss_stat rss_stat; struct linux_binfmt *binfmt; cpumask_var_t cpu_vm_mask_var; mm_context_t context; unsigned long flags; struct core_state *core_state; spinlock_t ioctx_lock; struct hlist_head ioctx_list; struct task_struct __rcu *owner; struct file *exe_file; unsigned long num_exe_file_vmas; struct mmu_notifier_mm *mmu_notifier_mm; pgtable_t pmd_huge_pte; struct cpumask cpumask_allocation; struct uprobes_state uprobes_state; };
mm_init_cpumask  function  include/linux/mm_types.h  394  static inline void mm_init_cpumask(struct mm_struct *mm)
mm_cpumask  function  include/linux/mm_types.h  402  static inline cpumask_t *mm_cpumask(struct mm_struct *mm)
_ASM_X86_PAGE_H  macro  arch/x86/include/asm/page.h  2  #define _ASM_X86_PAGE_H
clear_user_page  function  arch/x86/include/asm/page.h  20  static inline void clear_user_page(void *page,unsigned long vaddr,struct page *pg)
copy_user_page  function  arch/x86/include/asm/page.h  26  static inline void copy_user_page(void *to,void *from,unsigned long vaddr,struct page *topage)
__alloc_zeroed_user_highpage  macro  arch/x86/include/asm/page.h  32  #define __alloc_zeroed_user_highpage(movableflags,vma,vaddr) alloc_page_vma(GFP_HIGHUSER | __GFP_ZERO | movableflags, vma, vaddr)
__HAVE_ARCH_ALLOC_ZEROED_USER_HIGHPAGE  macro  arch/x86/include/asm/page.h  34  #define __HAVE_ARCH_ALLOC_ZEROED_USER_HIGHPAGE
__pa  macro  arch/x86/include/asm/page.h  36  #define __pa(x) __phys_addr((unsigned long)(x))
__pa_nodebug  macro  arch/x86/include/asm/page.h  37  #define __pa_nodebug(x) __phys_addr_nodebug((unsigned long)(x))
__pa_symbol  macro  arch/x86/include/asm/page.h  47  #define __pa_symbol(x) __pa(__phys_reloc_hide((unsigned long)(x)))
__va  macro  arch/x86/include/asm/page.h  49  #define __va(x) ((void *)((unsigned long)(x)+PAGE_OFFSET))
__boot_va  macro  arch/x86/include/asm/page.h  51  #define __boot_va(x) __va(x)
__boot_pa  macro  arch/x86/include/asm/page.h  52  #define __boot_pa(x) __pa(x)
virt_to_page  macro  arch/x86/include/asm/page.h  58  #define virt_to_page(kaddr) pfn_to_page(__pa(kaddr) >> PAGE_SHIFT)
pfn_to_kaddr  macro  arch/x86/include/asm/page.h  59  #define pfn_to_kaddr(pfn) __va((pfn) << PAGE_SHIFT)
__virt_addr_valid  prototype  arch/x86/include/asm/page.h  60  extern bool __virt_addr_valid(unsigned long kaddr);
virt_addr_valid  macro  arch/x86/include/asm/page.h  61  #define virt_addr_valid(kaddr) __virt_addr_valid((unsigned long) (kaddr))
__HAVE_ARCH_GATE_AREA  macro  arch/x86/include/asm/page.h  68  #define __HAVE_ARCH_GATE_AREA 1
_ASM_X86_PTRACE_H  macro  arch/x86/include/asm/ptrace.h  2  #define _ASM_X86_PTRACE_H
pt_regs  struct  arch/x86/include/asm/ptrace.h  99  struct pt_regs { unsigned long r15; unsigned long r14; unsigned long r13; unsigned long r12; unsigned long bp; unsigned long bx; unsigned long r11; unsigned long r10; unsigned long r9; unsigned long r8; unsigned long ax; unsigned long cx; unsigned long dx; unsigned long si; unsigned long di; unsigned long orig_ax; unsigned long ip; unsigned long cs; unsigned long flags; unsigned long sp; unsigned long ss; };
profile_pc  macro  include/asm-generic/ptrace.h  33  #define profile_pc(regs) instruction_pointer(regs)
convert_ip_to_linear  prototype  arch/x86/include/asm/ptrace.h  145  convert_ip_to_linear(struct task_struct *child,struct pt_regs *regs);
send_sigtrap  prototype  arch/x86/include/asm/ptrace.h  146  extern void send_sigtrap(struct task_struct *tsk,struct pt_regs *regs,int error_code, int si_code);
syscall_trace_enter  prototype  arch/x86/include/asm/ptrace.h  149  extern long syscall_trace_enter(struct pt_regs *);
syscall_trace_leave  prototype  arch/x86/include/asm/ptrace.h  150  extern void syscall_trace_leave(struct pt_regs *);
regs_return_value  function  arch/x86/include/asm/ptrace.h  152  static inline unsigned long regs_return_value(struct pt_regs *regs)
user_mode  function  arch/x86/include/asm/ptrace.h  164  static inline int user_mode(struct pt_regs *regs)
user_mode_vm  function  arch/x86/include/asm/ptrace.h  173  static inline int user_mode_vm(struct pt_regs *regs)
v8086_mode  function  arch/x86/include/asm/ptrace.h  183  static inline int v8086_mode(struct pt_regs *regs)
user_64bit_mode  function  arch/x86/include/asm/ptrace.h  193  static inline bool user_64bit_mode(struct pt_regs *regs)
kernel_stack_pointer  function  arch/x86/include/asm/ptrace.h  215  static inline unsigned long kernel_stack_pointer(struct pt_regs *regs)
GET_IP  macro  include/asm-generic/ptrace.h  16  #define GET_IP(regs) ((regs)->pc)
GET_FP  macro  include/asm-generic/ptrace.h  56  #define GET_FP(regs) ((regs)->fp)
GET_USP  macro  include/asm-generic/ptrace.h  38  #define GET_USP(regs) ((regs)->usp)
regs_query_register_offset  prototype  arch/x86/include/asm/ptrace.h  231  extern int regs_query_register_offset(const char *name);
regs_query_register_name  prototype  arch/x86/include/asm/ptrace.h  232  extern const char *regs_query_register_name(unsigned int offset);
MAX_REG_OFFSET  macro  arch/x86/include/asm/ptrace.h  233  #define MAX_REG_OFFSET (offsetof(struct pt_regs,ss))
regs_get_register  function  arch/x86/include/asm/ptrace.h  244  static inline unsigned long regs_get_register(struct pt_regs *regs,unsigned int offset)
regs_within_kernel_stack  function  arch/x86/include/asm/ptrace.h  260  static inline int regs_within_kernel_stack(struct pt_regs *regs,unsigned long addr)
regs_get_kernel_stack_nth  function  arch/x86/include/asm/ptrace.h  276  static inline unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,unsigned int n)
arch_has_single_step  macro  arch/x86/include/asm/ptrace.h  287  #define arch_has_single_step() (1)
arch_has_block_step  macro  arch/x86/include/asm/ptrace.h  291  #define arch_has_block_step() (boot_cpu_data.x86 >= 6)
ARCH_HAS_USER_SINGLE_STEP_INFO  macro  arch/x86/include/asm/ptrace.h  294  #define ARCH_HAS_USER_SINGLE_STEP_INFO
do_get_thread_area  prototype  arch/x86/include/asm/ptrace.h  297  extern int do_get_thread_area(struct task_struct *p,int idx,struct user_desc __user *info);
do_set_thread_area  prototype  arch/x86/include/asm/ptrace.h  299  extern int do_set_thread_area(struct task_struct *p,int idx,struct user_desc __user *info, int can_allocate);
__LINUX_SMP_H  macro  include/linux/smp.h  2  #define __LINUX_SMP_H
cpu_idle  prototype  include/linux/smp.h  15  extern void cpu_idle(void);
call_single_data  struct  include/linux/smp.h  18  struct call_single_data { struct list_head list; smp_call_func_t func; void *info; u16 flags; u16 priv; };
smp_call_function_single  prototype  include/linux/smp.h  29  int smp_call_function_single(int cpuid,smp_call_func_t func,void *info,int wait);
smp_send_stop  function  arch/x86/include/asm/smp.h  93  static inline void smp_send_stop(void)
smp_send_reschedule  function  arch/x86/include/asm/smp.h  138  static inline void smp_send_reschedule(int cpu)
smp_prepare_cpus  function  arch/x86/include/asm/smp.h  108  static inline void smp_prepare_cpus(unsigned int max_cpus)
__cpu_up  function  arch/x86/include/asm/smp.h  118  static inline int __cpu_up(unsigned int cpu,struct task_struct *tidle)
smp_cpus_done  function  arch/x86/include/asm/smp.h  113  static inline void smp_cpus_done(unsigned int max_cpus)
smp_call_function  macro  include/linux/smp.h  144  #define smp_call_function(func,info,wait) (up_smp_call_function(func, info))
smp_call_function_many  macro  include/linux/smp.h  186  #define smp_call_function_many(mask,func,info,wait) (up_smp_call_function(func, info))
__smp_call_function_single  prototype  include/linux/smp.h  78  void __smp_call_function_single(int cpuid,struct call_single_data *data,int wait);
smp_call_function_any  function  include/linux/smp.h  191  smp_call_function_any(const struct cpumask *mask,smp_call_func_t func,void *info, int wait)
kick_all_cpus_sync  function  include/linux/smp.h  197  static inline void kick_all_cpus_sync(void) { }
call_function_init  function  include/linux/smp.h  188  static inline void call_function_init(void) { }
generic_smp_call_function_single_interrupt  prototype  include/linux/smp.h  91  void generic_smp_call_function_single_interrupt(void);
generic_smp_call_function_interrupt  prototype  include/linux/smp.h  92  void generic_smp_call_function_interrupt(void);
ipi_call_lock  prototype  include/linux/smp.h  93  void ipi_call_lock(void);
ipi_call_unlock  prototype  include/linux/smp.h  94  void ipi_call_unlock(void);
ipi_call_lock_irq  prototype  include/linux/smp.h  95  void ipi_call_lock_irq(void);
ipi_call_unlock_irq  prototype  include/linux/smp.h  96  void ipi_call_unlock_irq(void);
on_each_cpu  macro  include/linux/smp.h  146  #define on_each_cpu(func,info,wait) ({ local_irq_disable(); func(info); local_irq_enable(); 0; })
on_each_cpu_mask  macro  include/linux/smp.h  159  #define on_each_cpu_mask(mask,func,info,wait) do { if (cpumask_test_cpu(0, (mask))) { local_irq_disable(); (func)(info); local_irq_enable(); } } while (0)
on_each_cpu_cond  macro  include/linux/smp.h  171  #define on_each_cpu_cond(cond_func,func,info,wait,gfp_flags) do { void *__info = (info); preempt_disable(); if ((cond_func)(0, __info)) { local_irq_disable(); (func)(__info); local_irq_enable(); } preempt_enable(); } while (0)
smp_prepare_boot_cpu  function  arch/x86/include/asm/smp.h  103  static inline void smp_prepare_boot_cpu(void)
setup_nr_cpu_ids  prototype  include/linux/smp.h  129  extern void __init setup_nr_cpu_ids(void);
smp_init  prototype  include/linux/smp.h  130  extern void __init smp_init(void);
raw_smp_processor_id  macro  arch/x86/include/asm/smp.h  198  #define raw_smp_processor_id() (this_cpu_read(cpu_number))
up_smp_call_function  function  include/linux/smp.h  140  static inline int up_smp_call_function(smp_call_func_t func,void *info)
num_booting_cpus  function  arch/x86/include/asm/smp.h  173  static inline int num_booting_cpus(void)
debug_smp_processor_id  prototype  include/linux/smp.h  217  extern unsigned int debug_smp_processor_id(void);
smp_processor_id  macro  include/linux/smp.h  220  # define smp_processor_id() raw_smp_processor_id()
get_cpu  macro  include/linux/smp.h  223  #define get_cpu() ({ preempt_disable(); smp_processor_id(); })
put_cpu  macro  include/linux/smp.h  224  #define put_cpu() preempt_enable()
arch_disable_smp_support  prototype  include/linux/smp.h  230  extern void arch_disable_smp_support(void);
smp_setup_processor_id  prototype  include/linux/smp.h  232  void smp_setup_processor_id(void);
_LINUX_SEM_H  macro  include/linux/sem.h  2  #define _LINUX_SEM_H
SEM_UNDO  macro  include/linux/sem.h  7  #define SEM_UNDO 0x1000
GETPID  macro  include/linux/sem.h  10  #define GETPID 11
GETVAL  macro  include/linux/sem.h  11  #define GETVAL 12
GETALL  macro  include/linux/sem.h  12  #define GETALL 13
GETNCNT  macro  include/linux/sem.h  13  #define GETNCNT 14
GETZCNT  macro  include/linux/sem.h  14  #define GETZCNT 15
SETVAL  macro  include/linux/sem.h  15  #define SETVAL 16
SETALL  macro  include/linux/sem.h  16  #define SETALL 17
SEM_STAT  macro  include/linux/sem.h  19  #define SEM_STAT 18
SEM_INFO  macro  include/linux/sem.h  20  #define SEM_INFO 19
semid_ds  struct  include/linux/sem.h  23  struct semid_ds { struct ipc_perm sem_perm; __kernel_time_t sem_otime; __kernel_time_t sem_ctime; struct sem *sem_base; struct sem_queue *sem_pending; struct sem_queue **sem_pending_last; struct sem_undo *undo; unsigned short sem_nsems; };
sembuf  struct  include/linux/sem.h  38  struct sembuf { unsigned short sem_num; short sem_op; short sem_flg; };
semun  union  include/linux/sem.h  45  union semun { int val; struct semid_ds __user *buf; unsigned short __user *array; struct seminfo __user *__buf; void __user *__pad; };
seminfo  struct  include/linux/sem.h  53  struct seminfo { int semmap; int semmni; int semmns; int semmnu; int semmsl; int semopm; int semume; int semusz; int semvmx; int semaem; };
SEMMNI  macro  include/linux/sem.h  66  #define SEMMNI 128
SEMMSL  macro  include/linux/sem.h  67  #define SEMMSL 250
SEMMNS  macro  include/linux/sem.h  68  #define SEMMNS (SEMMNI*SEMMSL)
SEMOPM  macro  include/linux/sem.h  69  #define SEMOPM 32
SEMVMX  macro  include/linux/sem.h  70  #define SEMVMX 32767
SEMAEM  macro  include/linux/sem.h  71  #define SEMAEM SEMVMX
SEMUME  macro  include/linux/sem.h  74  #define SEMUME SEMOPM
SEMMNU  macro  include/linux/sem.h  75  #define SEMMNU SEMMNS
SEMMAP  macro  include/linux/sem.h  76  #define SEMMAP SEMMNS
SEMUSZ  macro  include/linux/sem.h  77  #define SEMUSZ 20
sem_array  struct  include/linux/sem.h  87  struct sem_array { sem_perm; time_t sem_otime; time_t sem_ctime; struct sem *sem_base; struct list_head sem_pending; struct list_head list_id; int sem_nsems; int complex_count; };
sysv_sem  struct  include/linux/sem.h  110  struct sysv_sem { };
copy_semundo  function  include/linux/sem.h  114  static inline int copy_semundo(unsigned long clone_flags,struct task_struct *tsk)
exit_sem  function  include/linux/sem.h  119  static inline void exit_sem(struct task_struct *tsk)
_LINUX_SIGNAL_H  macro  include/linux/signal.h  2  #define _LINUX_SIGNAL_H
sigqueue  struct  include/linux/signal.h  18  struct sigqueue { struct list_head list; int flags; siginfo_t info; struct user_struct *user; };
SIGQUEUE_PREALLOC  macro  include/linux/signal.h  26  #define SIGQUEUE_PREALLOC 1
sigpending  struct  include/linux/signal.h  28  struct sigpending { struct list_head list; sigset_t signal; };
sigaddset  macro  arch/x86/include/asm/signal.h  193  #define sigaddset(set,sig) (__builtin_constant_p(sig) ? __const_sigaddset((set), (sig)) : __gen_sigaddset((set), (sig)))
sigdelset  macro  arch/x86/include/asm/signal.h  209  #define sigdelset(set,sig) (__builtin_constant_p(sig) ? __const_sigdelset((set), (sig)) : __gen_sigdelset((set), (sig)))
sigismember  macro  arch/x86/include/asm/signal.h  240  #define sigismember(set,sig) (__builtin_constant_p(sig) ? __const_sigismember((set), (sig)) : __gen_sigismember((set), (sig)))
sigfindinword  function  arch/x86/include/asm/signal.h  245  static inline int sigfindinword(unsigned long word)
sigisemptyset  function  include/linux/signal.h  76  static inline int sigisemptyset(sigset_t *set)
sigmask  macro  include/linux/signal.h  93  #define sigmask(sig) (1UL << ((sig) - 1))
_SIG_SET_BINOP  macro  include/linux/signal.h  131  #undef _SIG_SET_BINOP
_sig_or  macro  include/linux/signal.h  132  #undef _sig_or
_sig_and  macro  include/linux/signal.h  133  #undef _sig_and
_sig_andn  macro  include/linux/signal.h  134  #undef _sig_andn
_SIG_SET_OP  macro  include/linux/signal.h  155  #undef _SIG_SET_OP
_sig_not  macro  include/linux/signal.h  156  #undef _sig_not
sigemptyset  function  include/linux/signal.h  158  static inline void sigemptyset(sigset_t *set)
sigfillset  function  include/linux/signal.h  170  static inline void sigfillset(sigset_t *set)
sigaddsetmask  function  include/linux/signal.h  184  static inline void sigaddsetmask(sigset_t *set,unsigned long mask)
sigdelsetmask  function  include/linux/signal.h  189  static inline void sigdelsetmask(sigset_t *set,unsigned long mask)
sigtestsetmask  function  include/linux/signal.h  194  static inline int sigtestsetmask(sigset_t *set,unsigned long mask)
siginitset  function  include/linux/signal.h  199  static inline void siginitset(sigset_t *set,unsigned long mask)
siginitsetinv  function  include/linux/signal.h  211  static inline void siginitsetinv(sigset_t *set,unsigned long mask)
init_sigpending  function  include/linux/signal.h  225  static inline void init_sigpending(struct sigpending *sig)
flush_sigqueue  prototype  include/linux/signal.h  231  extern void flush_sigqueue(struct sigpending *queue);
valid_signal  function  include/linux/signal.h  234  static inline int valid_signal(unsigned long sig)
next_signal  prototype  include/linux/signal.h  242  extern int next_signal(struct sigpending *pending,sigset_t *mask);
do_send_sig_info  prototype  include/linux/signal.h  243  extern int do_send_sig_info(int sig,struct siginfo *info,struct task_struct *p, bool group);
group_send_sig_info  prototype  include/linux/signal.h  245  extern int group_send_sig_info(int sig,struct siginfo *info,struct task_struct *p);
__group_send_sig_info  prototype  include/linux/signal.h  246  extern int __group_send_sig_info(int,struct siginfo *,struct task_struct *);
do_rt_tgsigqueueinfo  prototype  include/linux/signal.h  247  extern long do_rt_tgsigqueueinfo(pid_t tgid,pid_t pid,int sig,siginfo_t *info);
do_sigpending  prototype  include/linux/signal.h  249  extern long do_sigpending(void __user *,unsigned long);
do_sigtimedwait  prototype  include/linux/signal.h  250  extern int do_sigtimedwait(const sigset_t *,siginfo_t *,const struct timespec *);
sigprocmask  prototype  include/linux/signal.h  252  extern int sigprocmask(int,sigset_t *,sigset_t *);
set_current_blocked  prototype  include/linux/signal.h  253  extern void set_current_blocked(sigset_t *);
__set_current_blocked  prototype  include/linux/signal.h  254  extern void __set_current_blocked(const sigset_t *);
sigsuspend  prototype  include/linux/signal.h  256  extern int sigsuspend(sigset_t *);
get_signal_to_deliver  prototype  include/linux/signal.h  258  extern int get_signal_to_deliver(siginfo_t *info,struct k_sigaction *return_ka,struct pt_regs *regs,void *cookie);
signal_delivered  prototype  include/linux/signal.h  259  extern void signal_delivered(int sig,siginfo_t *info,struct k_sigaction *ka,struct pt_regs *regs,int stepping);
exit_signals  prototype  include/linux/signal.h  260  extern void exit_signals(struct task_struct *tsk);
unhandled_signal  prototype  include/linux/signal.h  264  int unhandled_signal(struct task_struct *tsk,int sig);
SIGEMT_MASK  macro  include/linux/signal.h  343  #define SIGEMT_MASK 0
rt_sigmask  macro  include/linux/signal.h  349  #define rt_sigmask(sig) sigmask(sig)
siginmask  macro  include/linux/signal.h  351  #define siginmask(sig,mask) (rt_sigmask(sig) & (mask))
SIG_KERNEL_ONLY_MASK  macro  include/linux/signal.h  353  #define SIG_KERNEL_ONLY_MASK ( rt_sigmask(SIGKILL)   |  rt_sigmask(SIGSTOP))
SIG_KERNEL_STOP_MASK  macro  include/linux/signal.h  356  #define SIG_KERNEL_STOP_MASK ( rt_sigmask(SIGSTOP)   |  rt_sigmask(SIGTSTP)   | rt_sigmask(SIGTTIN)   |  rt_sigmask(SIGTTOU)   )
SIG_KERNEL_COREDUMP_MASK  macro  include/linux/signal.h  360  #define SIG_KERNEL_COREDUMP_MASK ( rt_sigmask(SIGQUIT)   |  rt_sigmask(SIGILL)    | rt_sigmask(SIGTRAP)   |  rt_sigmask(SIGABRT)   | rt_sigmask(SIGFPE)    |  rt_sigmask(SIGSEGV)   | rt_sigmask(SIGBUS)    |  rt_sigmask(SIGSYS)    | rt_sigmask(SIGXCPU)   |  rt_sigmask(SIGXFSZ)   | SIGEMT_MASK				       )
SIG_KERNEL_IGNORE_MASK  macro  include/linux/signal.h  368  #define SIG_KERNEL_IGNORE_MASK ( rt_sigmask(SIGCONT)   |  rt_sigmask(SIGCHLD)   | rt_sigmask(SIGWINCH)  |  rt_sigmask(SIGURG)    )
sig_kernel_only  macro  include/linux/signal.h  372  #define sig_kernel_only(sig) (((sig) < SIGRTMIN) && siginmask(sig, SIG_KERNEL_ONLY_MASK))
sig_kernel_coredump  macro  include/linux/signal.h  374  #define sig_kernel_coredump(sig) (((sig) < SIGRTMIN) && siginmask(sig, SIG_KERNEL_COREDUMP_MASK))
sig_kernel_ignore  macro  include/linux/signal.h  376  #define sig_kernel_ignore(sig) (((sig) < SIGRTMIN) && siginmask(sig, SIG_KERNEL_IGNORE_MASK))
sig_kernel_stop  macro  include/linux/signal.h  378  #define sig_kernel_stop(sig) (((sig) < SIGRTMIN) && siginmask(sig, SIG_KERNEL_STOP_MASK))
sig_user_defined  macro  include/linux/signal.h  381  #define sig_user_defined(t,signr) (((t)->sighand->action[(signr)-1].sa.sa_handler != SIG_DFL) && ((t)->sighand->action[(signr)-1].sa.sa_handler != SIG_IGN))
sig_fatal  macro  include/linux/signal.h  385  #define sig_fatal(t,signr) (!siginmask(signr, SIG_KERNEL_IGNORE_MASK|SIG_KERNEL_STOP_MASK) && (t)->sighand->action[(signr)-1].sa.sa_handler == SIG_DFL)
signals_init  prototype  include/linux/signal.h  389  void signals_init(void);
__LINUX_COMPLETION_H  macro  include/linux/completion.h  2  #define __LINUX_COMPLETION_H
completion  struct  include/linux/completion.h  25  struct completion { unsigned int done; wait_queue_head_t wait; };
COMPLETION_INITIALIZER  macro  include/linux/completion.h  30  #define COMPLETION_INITIALIZER(work) { 0, __WAIT_QUEUE_HEAD_INITIALIZER((work).wait) }
COMPLETION_INITIALIZER_ONSTACK  macro  include/linux/completion.h  33  #define COMPLETION_INITIALIZER_ONSTACK(work) ({ init_completion(&work); work; })
DECLARE_COMPLETION  macro  include/linux/completion.h  44  #define DECLARE_COMPLETION(work) struct completion work = COMPLETION_INITIALIZER(work)
DECLARE_COMPLETION_ONSTACK  macro  include/linux/completion.h  63  # define DECLARE_COMPLETION_ONSTACK(work) DECLARE_COMPLETION(work)
init_completion  function  include/linux/completion.h  73  static inline void init_completion(struct completion *x)
wait_for_completion  prototype  include/linux/completion.h  79  extern void wait_for_completion(struct completion *);
wait_for_completion_interruptible  prototype  include/linux/completion.h  80  extern int wait_for_completion_interruptible(struct completion *x);
wait_for_completion_killable  prototype  include/linux/completion.h  81  extern int wait_for_completion_killable(struct completion *x);
wait_for_completion_timeout  prototype  include/linux/completion.h  82  extern unsigned long wait_for_completion_timeout(struct completion *x,unsigned long timeout);
wait_for_completion_interruptible_timeout  prototype  include/linux/completion.h  84  extern long wait_for_completion_interruptible_timeout(
wait_for_completion_killable_timeout  prototype  include/linux/completion.h  86  extern long wait_for_completion_killable_timeout(
try_wait_for_completion  prototype  include/linux/completion.h  88  extern bool try_wait_for_completion(struct completion *x);
completion_done  prototype  include/linux/completion.h  89  extern bool completion_done(struct completion *x);
complete  prototype  include/linux/completion.h  91  extern void complete(struct completion *);
complete_all  prototype  include/linux/completion.h  92  extern void complete_all(struct completion *);
INIT_COMPLETION  macro  include/linux/completion.h  101  #define INIT_COMPLETION(x) ((x).done = 0)
_LINUX_PID_H  macro  include/linux/pid.h  2  #define _LINUX_PID_H
pid_type  enum  include/linux/pid.h  6  enum pid_type { PIDTYPE_PID, PIDTYPE_PGID, PIDTYPE_SID, PIDTYPE_MAX };
upid  struct  include/linux/pid.h  50  struct upid { int nr; struct pid_namespace *ns; struct hlist_node pid_chain; };
pid  struct  include/linux/pid.h  57  struct pid { atomic_t count; unsigned int level; struct hlist_head tasks[PIDTYPE_MAX]; struct rcu_head rcu; struct upid numbers[1]; };
pid_link  struct  include/linux/pid.h  69  struct pid_link { struct hlist_node node; struct pid *pid; };
get_pid  function  include/linux/pid.h  75  static inline struct pid *get_pid(struct pid *pid)
put_pid  prototype  include/linux/pid.h  82  extern void put_pid(struct pid *pid);
pid_task  prototype  include/linux/pid.h  83  extern struct task_struct *pid_task(struct pid *pid,enum pid_type);
get_pid_task  prototype  include/linux/pid.h  84  extern struct task_struct *get_pid_task(struct pid *pid,enum pid_type);
get_task_pid  prototype  include/linux/pid.h  86  extern struct pid *get_task_pid(struct task_struct *task,enum pid_type type);
attach_pid  prototype  include/linux/pid.h  92  extern void attach_pid(struct task_struct *task,enum pid_type type,struct pid *pid);
detach_pid  prototype  include/linux/pid.h  94  extern void detach_pid(struct task_struct *task,enum pid_type);
change_pid  prototype  include/linux/pid.h  95  extern void change_pid(struct task_struct *task,enum pid_type,struct pid *pid);
transfer_pid  prototype  include/linux/pid.h  97  extern void transfer_pid(struct task_struct *old,struct task_struct *new,enum pid_type);
find_pid_ns  prototype  include/linux/pid.h  112  extern struct pid *find_pid_ns(int nr,struct pid_namespace *ns);
find_vpid  prototype  include/linux/pid.h  113  extern struct pid *find_vpid(int nr);
find_get_pid  prototype  include/linux/pid.h  118  extern struct pid *find_get_pid(int nr);
find_ge_pid  prototype  include/linux/pid.h  119  extern struct pid *find_ge_pid(int nr,struct pid_namespace *);
next_pidmap  prototype  include/linux/pid.h  120  int next_pidmap(struct pid_namespace *pid_ns,unsigned int last);
alloc_pid  prototype  include/linux/pid.h  122  extern struct pid *alloc_pid(struct pid_namespace *ns);
free_pid  prototype  include/linux/pid.h  123  extern void free_pid(struct pid *pid);
ns_of_pid  function  include/linux/pid.h  135  static inline struct pid_namespace *ns_of_pid(struct pid *pid)
is_child_reaper  function  include/linux/pid.h  149  static inline bool is_child_reaper(struct pid *pid)
pid_nr  function  include/linux/pid.h  165  static inline pid_t pid_nr(struct pid *pid)
pid_nr_ns  prototype  include/linux/pid.h  173  pid_t pid_nr_ns(struct pid *pid,struct pid_namespace *ns);
pid_vnr  prototype  include/linux/pid.h  174  pid_t pid_vnr(struct pid *pid);
do_each_pid_task  macro  include/linux/pid.h  176  #define do_each_pid_task(pid,type,task) do { struct hlist_node *pos___; if ((pid) != NULL) hlist_for_each_entry_rcu((task), pos___, &(pid)->tasks[type], pids[type].node) {
while_each_pid_task  macro  include/linux/pid.h  187  #define while_each_pid_task(pid,type,task) if (type == PIDTYPE_PID) break; } } while (0)
do_each_pid_thread  macro  include/linux/pid.h  193  #define do_each_pid_thread(pid,type,task) do_each_pid_task(pid, type, task) { struct task_struct *tg___ = task; do {
while_each_pid_thread  macro  include/linux/pid.h  198  #define while_each_pid_thread(pid,type,task) } while_each_thread(tg___, task); task = tg___; } while_each_pid_task(pid, type, task)
_LINUX_TOPOLOGY_H  macro  include/linux/topology.h  28  #define _LINUX_TOPOLOGY_H
node_has_online_mem  macro  include/linux/topology.h  38  #define node_has_online_mem(nid) (1)
nr_cpus_node  macro  include/linux/topology.h  42  #define nr_cpus_node(node) cpumask_weight(cpumask_of_node(node))
for_each_node_with_cpus  macro  include/linux/topology.h  45  #define for_each_node_with_cpus(node) for_each_online_node(node) if (nr_cpus_node(node))
arch_update_cpu_topology  prototype  include/linux/topology.h  49  int arch_update_cpu_topology(void);
LOCAL_DISTANCE  macro  include/linux/topology.h  52  #define LOCAL_DISTANCE 10
REMOTE_DISTANCE  macro  include/linux/topology.h  53  #define REMOTE_DISTANCE 20
node_distance  macro  arch/x86/include/asm/topology.h  96  #define node_distance(a,b) __node_distance(a,b)
RECLAIM_DISTANCE  macro  include/linux/topology.h  63  #define RECLAIM_DISTANCE 30
PENALTY_FOR_NODE_WITH_CPUS  macro  include/linux/topology.h  66  #define PENALTY_FOR_NODE_WITH_CPUS (1)
ARCH_HAS_SCHED_WAKE_IDLE  macro  include/linux/topology.h  85  #define ARCH_HAS_SCHED_WAKE_IDLE
SD_SIBLING_INIT  macro  include/linux/topology.h  88  #define SD_SIBLING_INIT (struct sched_domain) { .min_interval		= 1, .max_interval		= 2, .busy_factor		= 64, .imbalance_pct		= 110, .flags			= 1*SD_LOAD_BALANCE | 1*SD_BALANCE_NEWIDLE | 1*SD_BALANCE_EXEC | 1*SD_BALANCE_FORK | 0*SD_BALANCE_WAKE | 1*SD_WAKE_AFFINE | 1*SD_SHARE_CPUPOWER | 1*SD_SHARE_PKG_RESOURCES | 0*SD_SERIALIZE | 0*SD_PREFER_SIBLING | arch_sd_sibling_asym_packing() , .last_balance		= jiffies, .balance_interval	= 1, .smt_gain		= 1178,	/* 15% */ }
SD_MC_INIT  macro  include/linux/topology.h  116  #define SD_MC_INIT (struct sched_domain) { .min_interval		= 1, .max_interval		= 4, .busy_factor		= 64, .imbalance_pct		= 125, .cache_nice_tries	= 1, .busy_idx		= 2, .wake_idx		= 0, .forkexec_idx		= 0, .flags			= 1*SD_LOAD_BALANCE | 1*SD_BALANCE_NEWIDLE | 1*SD_BALANCE_EXEC | 1*SD_BALANCE_FORK | 0*SD_BALANCE_WAKE | 1*SD_WAKE_AFFINE | 0*SD_PREFER_LOCAL | 0*SD_SHARE_CPUPOWER | 1*SD_SHARE_PKG_RESOURCES | 0*SD_SERIALIZE , .last_balance		= jiffies, .balance_interval	= 1, }
SD_CPU_INIT  macro  include/linux/topology.h  145  #define SD_CPU_INIT (struct sched_domain) { .min_interval		= 1, .max_interval		= 4, .busy_factor		= 64, .imbalance_pct		= 125, .cache_nice_tries	= 1, .busy_idx		= 2, .idle_idx		= 1, .newidle_idx		= 0, .wake_idx		= 0, .forkexec_idx		= 0, .flags			= 1*SD_LOAD_BALANCE | 1*SD_BALANCE_NEWIDLE | 1*SD_BALANCE_EXEC | 1*SD_BALANCE_FORK | 0*SD_BALANCE_WAKE | 1*SD_WAKE_AFFINE | 0*SD_PREFER_LOCAL | 0*SD_SHARE_CPUPOWER | 0*SD_SHARE_PKG_RESOURCES | 0*SD_SERIALIZE , .last_balance		= jiffies, .balance_interval	= 1, }
numa_node_id  macro  arch/x86/include/asm/topology.h  107  #define numa_node_id numa_node_id
cpu_to_node  macro  arch/x86/include/asm/topology.h  58  #define cpu_to_node __cpu_to_node
set_numa_node  function  include/linux/topology.h  198  static inline void set_numa_node(int node)
set_cpu_numa_node  function  include/linux/topology.h  205  static inline void set_cpu_numa_node(int cpu,int node)
set_numa_mem  function  include/linux/topology.h  233  static inline void set_numa_mem(int node)
numa_mem_id  function  include/linux/topology.h  265  static inline int numa_mem_id(void)
cpu_to_mem  function  include/linux/topology.h  272  static inline int cpu_to_mem(int cpu)
set_cpu_numa_mem  function  include/linux/topology.h  255  static inline void set_cpu_numa_mem(int cpu,int node)
topology_physical_package_id  macro  arch/x86/include/asm/topology.h  123  #define topology_physical_package_id(cpu) (cpu_data(cpu).phys_proc_id)
topology_core_id  macro  arch/x86/include/asm/topology.h  124  #define topology_core_id(cpu) (cpu_data(cpu).cpu_core_id)
topology_thread_cpumask  macro  arch/x86/include/asm/topology.h  126  #define topology_thread_cpumask(cpu) (per_cpu(cpu_sibling_map,cpu))
topology_core_cpumask  macro  arch/x86/include/asm/topology.h  125  #define topology_core_cpumask(cpu) (per_cpu(cpu_core_map,cpu))
_LINUX_PROPORTIONS_H  macro  include/linux/proportions.h  10  #define _LINUX_PROPORTIONS_H
prop_global  struct  include/linux/proportions.h  16  struct prop_global { int shift; struct percpu_counter events; };
prop_descriptor  struct  include/linux/proportions.h  37  struct prop_descriptor { int index; struct prop_global pg[2]; struct mutex mutex; };
prop_descriptor_init  prototype  include/linux/proportions.h  43  int prop_descriptor_init(struct prop_descriptor *pd,int shift);
prop_change_shift  prototype  include/linux/proportions.h  44  void prop_change_shift(struct prop_descriptor *pd,int new_shift);
prop_local_percpu  struct  include/linux/proportions.h  50  struct prop_local_percpu { struct percpu_counter events; int shift; unsigned long period; raw_spinlock_t lock; };
prop_local_init_percpu  prototype  include/linux/proportions.h  64  int prop_local_init_percpu(struct prop_local_percpu *pl);
prop_local_destroy_percpu  prototype  include/linux/proportions.h  65  void prop_local_destroy_percpu(struct prop_local_percpu *pl);
__prop_inc_percpu  prototype  include/linux/proportions.h  66  void __prop_inc_percpu(struct prop_descriptor *pd,struct prop_local_percpu *pl);
prop_fraction_percpu  prototype  include/linux/proportions.h  67  void prop_fraction_percpu(struct prop_descriptor *pd,struct prop_local_percpu *pl,long *numerator, long *denominator);
prop_inc_percpu  function  include/linux/proportions.h  71  void prop_inc_percpu(struct prop_descriptor *pd,struct prop_local_percpu *pl)
PROP_MAX_SHIFT  macro  include/linux/proportions.h  87  #define PROP_MAX_SHIFT (BITS_PER_LONG/2)
PROP_FRAC_SHIFT  macro  include/linux/proportions.h  90  #define PROP_FRAC_SHIFT (BITS_PER_LONG - PROP_MAX_SHIFT - 1)
PROP_FRAC_BASE  macro  include/linux/proportions.h  91  #define PROP_FRAC_BASE (1UL << PROP_FRAC_SHIFT)
__prop_inc_percpu_max  prototype  include/linux/proportions.h  93  void __prop_inc_percpu_max(struct prop_descriptor *pd,struct prop_local_percpu *pl, long frac);
prop_local_single  struct  include/linux/proportions.h  101  struct prop_local_single { unsigned long events; unsigned long period; int shift; raw_spinlock_t lock; };
INIT_PROP_LOCAL_SINGLE  macro  include/linux/proportions.h  116  #define INIT_PROP_LOCAL_SINGLE(name) {	.lock = __RAW_SPIN_LOCK_UNLOCKED(name.lock), }
prop_local_init_single  prototype  include/linux/proportions.h  120  int prop_local_init_single(struct prop_local_single *pl);
prop_local_destroy_single  prototype  include/linux/proportions.h  121  void prop_local_destroy_single(struct prop_local_single *pl);
__prop_inc_single  prototype  include/linux/proportions.h  122  void __prop_inc_single(struct prop_descriptor *pd,struct prop_local_single *pl);
prop_fraction_single  prototype  include/linux/proportions.h  123  void prop_fraction_single(struct prop_descriptor *pd,struct prop_local_single *pl,long *numerator, long *denominator);
prop_inc_single  function  include/linux/proportions.h  127  void prop_inc_single(struct prop_descriptor *pd,struct prop_local_single *pl)
_LINUX_SECCOMP_H  macro  include/linux/seccomp.h  2  #define _LINUX_SECCOMP_H
SECCOMP_MODE_DISABLED  macro  include/linux/seccomp.h  9  #define SECCOMP_MODE_DISABLED 0
SECCOMP_MODE_STRICT  macro  include/linux/seccomp.h  10  #define SECCOMP_MODE_STRICT 1
SECCOMP_MODE_FILTER  macro  include/linux/seccomp.h  11  #define SECCOMP_MODE_FILTER 2
SECCOMP_RET_KILL  macro  include/linux/seccomp.h  21  #define SECCOMP_RET_KILL 0x00000000U
SECCOMP_RET_TRAP  macro  include/linux/seccomp.h  22  #define SECCOMP_RET_TRAP 0x00030000U
SECCOMP_RET_ERRNO  macro  include/linux/seccomp.h  23  #define SECCOMP_RET_ERRNO 0x00050000U
SECCOMP_RET_TRACE  macro  include/linux/seccomp.h  24  #define SECCOMP_RET_TRACE 0x7ff00000U
SECCOMP_RET_ALLOW  macro  include/linux/seccomp.h  25  #define SECCOMP_RET_ALLOW 0x7fff0000U
SECCOMP_RET_ACTION  macro  include/linux/seccomp.h  28  #define SECCOMP_RET_ACTION 0x7fff0000U
SECCOMP_RET_DATA  macro  include/linux/seccomp.h  29  #define SECCOMP_RET_DATA 0x0000ffffU
seccomp_data  struct  include/linux/seccomp.h  40  struct seccomp_data { int nr; __u32 arch; __u64 instruction_pointer; __u64 args[6]; };
seccomp  struct  include/linux/seccomp.h  96  struct seccomp { };
__secure_computing  prototype  include/linux/seccomp.h  70  extern int __secure_computing(int);
secure_computing  function  include/linux/seccomp.h  99  static inline int secure_computing(int this_syscall) { return 0; }
secure_computing_strict  function  include/linux/seccomp.h  100  static inline void secure_computing_strict(int this_syscall) { return; }
prctl_get_seccomp  function  include/linux/seccomp.h  102  static inline long prctl_get_seccomp(void)
prctl_set_seccomp  function  include/linux/seccomp.h  107  static inline long prctl_set_seccomp(unsigned long arg2,char __user *arg3)
seccomp_mode  function  include/linux/seccomp.h  112  static inline int seccomp_mode(struct seccomp *s)
seccomp_filter  struct  include/linux/seccomp.h  97  struct seccomp_filter { };
put_seccomp_filter  function  include/linux/seccomp.h  123  static inline void put_seccomp_filter(struct task_struct *tsk)
get_seccomp_filter  function  include/linux/seccomp.h  127  static inline void get_seccomp_filter(struct task_struct *tsk)
seccomp_bpf_load  prototype  include/linux/seccomp.h  121  extern u32 seccomp_bpf_load(int off);
__LINUX_RCUPDATE_H  macro  include/linux/rcupdate.h  34  #define __LINUX_RCUPDATE_H
rcutorture_record_test_transition  function  include/linux/rcupdate.h  58  static inline void rcutorture_record_test_transition(void)
rcutorture_record_progress  function  include/linux/rcupdate.h  61  static inline void rcutorture_record_progress(unsigned long vernum)
do_trace_rcu_torture_read  macro  include/linux/rcupdate.h  68  #define do_trace_rcu_torture_read(rcutorturename,rhp) do { } while (0)
UINT_CMP_GE  macro  include/linux/rcupdate.h  72  #define UINT_CMP_GE(a,b) (UINT_MAX / 2 >= (a) - (b))
UINT_CMP_LT  macro  include/linux/rcupdate.h  73  #define UINT_CMP_LT(a,b) (UINT_MAX / 2 < (a) - (b))
ULONG_CMP_GE  macro  include/linux/rcupdate.h  74  #define ULONG_CMP_GE(a,b) (ULONG_MAX / 2 >= (a) - (b))
ULONG_CMP_LT  macro  include/linux/rcupdate.h  75  #define ULONG_CMP_LT(a,b) (ULONG_MAX / 2 < (a) - (b))
call_rcu  macro  include/linux/rcupdate.h  100  #define call_rcu call_rcu_sched
call_rcu_bh  prototype  include/linux/rcupdate.h  122  extern void call_rcu_bh(struct rcu_head *head,void (*func)(struct rcu_head *head));
call_rcu_sched  prototype  include/linux/rcupdate.h  141  extern void call_rcu_sched(struct rcu_head *head,void (*func)(struct rcu_head *rcu));
synchronize_sched  prototype  include/linux/rcupdate.h  144  extern void synchronize_sched(void);
__rcu_read_lock  function  include/linux/rcupdate.h  162  static inline void __rcu_read_lock(void)
__rcu_read_unlock  function  include/linux/rcupdate.h  167  static inline void __rcu_read_unlock(void)
synchronize_rcu  function  include/linux/rcupdate.h  172  static inline void synchronize_rcu(void)
rcu_preempt_depth  function  include/linux/rcupdate.h  177  static inline int rcu_preempt_depth(void)
rcu_sched_qs  prototype  include/linux/rcupdate.h  185  extern void rcu_sched_qs(int cpu);
rcu_bh_qs  prototype  include/linux/rcupdate.h  186  extern void rcu_bh_qs(int cpu);
rcu_check_callbacks  prototype  include/linux/rcupdate.h  187  extern void rcu_check_callbacks(int cpu,int user);
rcu_idle_enter  prototype  include/linux/rcupdate.h  189  extern void rcu_idle_enter(void);
rcu_idle_exit  prototype  include/linux/rcupdate.h  190  extern void rcu_idle_exit(void);
rcu_irq_enter  prototype  include/linux/rcupdate.h  191  extern void rcu_irq_enter(void);
rcu_irq_exit  prototype  include/linux/rcupdate.h  192  extern void rcu_irq_exit(void);
exit_rcu  prototype  include/linux/rcupdate.h  193  extern void exit_rcu(void);
RCU_NONIDLE  macro  include/linux/rcupdate.h  215  #define RCU_NONIDLE(a) do { rcu_idle_exit(); do { a; } while (0); rcu_idle_enter(); } while (0)
wait_rcu_gp  prototype  include/linux/rcupdate.h  229  void wait_rcu_gp(call_rcu_func_t crf);
init_rcu_head_on_stack  function  include/linux/rcupdate.h  249  static inline void init_rcu_head_on_stack(struct rcu_head *head)
destroy_rcu_head_on_stack  function  include/linux/rcupdate.h  253  static inline void destroy_rcu_head_on_stack(struct rcu_head *head)
rcu_lockdep_current_cpu_online  function  include/linux/rcupdate.h  261  static inline bool rcu_lockdep_current_cpu_online(void)
rcu_is_cpu_idle  function  include/linux/rcupdate.h  272  static inline int rcu_is_cpu_idle(void)
rcu_lock_acquire  macro  include/linux/rcupdate.h  385  # define rcu_lock_acquire(a) do { } while (0)
rcu_lock_release  macro  include/linux/rcupdate.h  386  # define rcu_lock_release(a) do { } while (0)
debug_lockdep_rcu_enabled  prototype  include/linux/rcupdate.h  291  extern int debug_lockdep_rcu_enabled(void);
rcu_read_lock_held  function  include/linux/rcupdate.h  388  static inline int rcu_read_lock_held(void)
rcu_read_lock_bh_held  function  include/linux/rcupdate.h  393  static inline int rcu_read_lock_bh_held(void)
rcu_read_lock_sched_held  function  include/linux/rcupdate.h  404  static inline int rcu_read_lock_sched_held(void)
rcu_my_thread_group_empty  prototype  include/linux/rcupdate.h  414  extern int rcu_my_thread_group_empty(void);
rcu_lockdep_assert  macro  include/linux/rcupdate.h  456  #define rcu_lockdep_assert(c,s) do { } while (0)
rcu_preempt_sleep_check  function  include/linux/rcupdate.h  438  static inline void rcu_preempt_sleep_check(void)
rcu_sleep_check  macro  include/linux/rcupdate.h  457  #define rcu_sleep_check() do { } while (0)
rcu_dereference_sparse  macro  include/linux/rcupdate.h  474  #define rcu_dereference_sparse(p,space)
__rcu_access_pointer  macro  include/linux/rcupdate.h  477  #define __rcu_access_pointer(p,space) ({ typeof(*p) *_________p1 = (typeof(*p)*__force )ACCESS_ONCE(p); rcu_dereference_sparse(p, space); ((typeof(*p) __force __kernel *)(_________p1)); })
__rcu_dereference_check  macro  include/linux/rcupdate.h  483  #define __rcu_dereference_check(p,c,space) ({ typeof(*p) *_________p1 = (typeof(*p)*__force )ACCESS_ONCE(p); rcu_lockdep_assert(c, "suspicious rcu_dereference_check()" " usage"); rcu_dereference_sparse(p, space); smp_read_barrier_depends(); ((typeof(*p) __force __kernel *)(_________p1)); })
__rcu_dereference_protected  macro  include/linux/rcupdate.h  492  #define __rcu_dereference_protected(p,c,space) ({ rcu_lockdep_assert(c, "suspicious rcu_dereference_protected()" " usage"); rcu_dereference_sparse(p, space); ((typeof(*p) __force __kernel *)(p)); })
__rcu_access_index  macro  include/linux/rcupdate.h  500  #define __rcu_access_index(p,space) ({ typeof(p) _________p1 = ACCESS_ONCE(p); rcu_dereference_sparse(p, space); (_________p1); })
__rcu_dereference_index_check  macro  include/linux/rcupdate.h  506  #define __rcu_dereference_index_check(p,c) ({ typeof(p) _________p1 = ACCESS_ONCE(p); rcu_lockdep_assert(c, "suspicious rcu_dereference_index_check()" " usage"); smp_read_barrier_depends(); (_________p1); })
__rcu_assign_pointer  macro  include/linux/rcupdate.h  515  #define __rcu_assign_pointer(p,v,space) ({ smp_wmb(); (p) = (typeof(*v) __force space *)(v); })
rcu_access_pointer  macro  include/linux/rcupdate.h  541  #define rcu_access_pointer(p) __rcu_access_pointer((p),__rcu)
rcu_dereference_check  macro  include/linux/rcupdate.h  576  #define rcu_dereference_check(p,c) __rcu_dereference_check((p), rcu_read_lock_held() || (c), __rcu)
rcu_dereference_bh_check  macro  include/linux/rcupdate.h  586  #define rcu_dereference_bh_check(p,c) __rcu_dereference_check((p), rcu_read_lock_bh_held() || (c), __rcu)
rcu_dereference_sched_check  macro  include/linux/rcupdate.h  596  #define rcu_dereference_sched_check(p,c) __rcu_dereference_check((p), rcu_read_lock_sched_held() || (c), __rcu)
rcu_dereference_raw  macro  include/linux/rcupdate.h  600  #define rcu_dereference_raw(p) rcu_dereference_check(p,1)
rcu_access_index  macro  include/linux/rcupdate.h  614  #define rcu_access_index(p) __rcu_access_index((p),__rcu)
rcu_dereference_index_check  macro  include/linux/rcupdate.h  634  #define rcu_dereference_index_check(p,c) __rcu_dereference_index_check((p), (c))
rcu_dereference_protected  macro  include/linux/rcupdate.h  654  #define rcu_dereference_protected(p,c) __rcu_dereference_protected((p), (c), __rcu)
rcu_dereference  macro  include/linux/rcupdate.h  664  #define rcu_dereference(p) rcu_dereference_check(p,0)
rcu_dereference_bh  macro  include/linux/rcupdate.h  672  #define rcu_dereference_bh(p) rcu_dereference_bh_check(p,0)
rcu_dereference_sched  macro  include/linux/rcupdate.h  680  #define rcu_dereference_sched(p) rcu_dereference_sched_check(p,0)
rcu_read_lock  function  include/linux/rcupdate.h  724  static inline void rcu_read_lock(void)
rcu_read_unlock  function  include/linux/rcupdate.h  748  static inline void rcu_read_unlock(void)
rcu_read_lock_bh  function  include/linux/rcupdate.h  774  static inline void rcu_read_lock_bh(void)
rcu_read_unlock_bh  function  include/linux/rcupdate.h  788  static inline void rcu_read_unlock_bh(void)
rcu_read_lock_sched  function  include/linux/rcupdate.h  810  static inline void rcu_read_lock_sched(void)
rcu_read_lock_sched_notrace  function  include/linux/rcupdate.h  820  static inline notrace void rcu_read_lock_sched_notrace(void)
rcu_read_unlock_sched  function  include/linux/rcupdate.h  831  static inline void rcu_read_unlock_sched(void)
rcu_read_unlock_sched_notrace  function  include/linux/rcupdate.h  841  static inline notrace void rcu_read_unlock_sched_notrace(void)
rcu_assign_pointer  macro  include/linux/rcupdate.h  870  #define rcu_assign_pointer(p,v) __rcu_assign_pointer((p), (v), __rcu)
RCU_INIT_POINTER  macro  include/linux/rcupdate.h  905  #define RCU_INIT_POINTER(p,v) p = (typeof(*v) __force __rcu *)(v)
__is_kfree_rcu_offset  macro  include/linux/rcupdate.h  930  #define __is_kfree_rcu_offset(offset) ((offset) < 4096)
__kfree_rcu  macro  include/linux/rcupdate.h  935  #define __kfree_rcu(head,offset) do { BUILD_BUG_ON(!__is_kfree_rcu_offset(offset)); call_rcu(head, (void (*)(struct rcu_head *))(unsigned long)(offset)); } while (0)
kfree_rcu  macro  include/linux/rcupdate.h  967  #define kfree_rcu(ptr,rcu_head) __kfree_rcu(&((ptr)->rcu_head), offsetof(typeof(*(ptr)), rcu_head))
_LINUX_RCULIST_H  macro  include/linux/rculist.h  2  #define _LINUX_RCULIST_H
list_next_rcu  macro  include/linux/rculist.h  25  #define list_next_rcu(list) (*((struct list_head __rcu **)(&(list)->next)))
__list_add_rcu  prototype  include/linux/rculist.h  43  extern void __list_add_rcu(struct list_head *new,struct list_head *prev, struct list_head *next);
list_add_rcu  function  include/linux/rculist.h  63  static inline void list_add_rcu(struct list_head *new,struct list_head *head)
list_add_tail_rcu  function  include/linux/rculist.h  84  static inline void list_add_tail_rcu(struct list_head *new,struct list_head *head)
list_del_rcu  function  include/linux/rculist.h  114  static inline void list_del_rcu(struct list_head *entry)
hlist_del_init_rcu  function  include/linux/rculist.h  140  static inline void hlist_del_init_rcu(struct hlist_node *n)
list_replace_rcu  function  include/linux/rculist.h  156  static inline void list_replace_rcu(struct list_head *old,struct list_head *new)
list_splice_init_rcu  function  include/linux/rculist.h  183  static inline void list_splice_init_rcu(struct list_head *list,struct list_head *head,void (*sync)(void))
list_entry_rcu  macro  include/linux/rculist.h  230  #define list_entry_rcu(ptr,type,member) ({typeof (*ptr) __rcu *__ptr = (typeof (*ptr) __rcu __force *)ptr; container_of((typeof(ptr))rcu_dereference_raw(__ptr), type, member); })
list_first_or_null_rcu  macro  include/linux/rculist.h  268  #define list_first_or_null_rcu(ptr,type,member) ({struct list_head *__ptr = (ptr); struct list_head __rcu *__next = list_next_rcu(__ptr); likely(__ptr != __next) ? container_of(__next, type, member) : NULL; })
list_for_each_entry_rcu  macro  include/linux/rculist.h  284  #define list_for_each_entry_rcu(pos,head,member) for (pos = list_entry_rcu((head)->next, typeof(*pos), member); &pos->member != (head); pos = list_entry_rcu(pos->member.next, typeof(*pos), member))
list_for_each_continue_rcu  macro  include/linux/rculist.h  301  #define list_for_each_continue_rcu(pos,head) for ((pos) = rcu_dereference_raw(list_next_rcu(pos)); (pos) != (head); (pos) = rcu_dereference_raw(list_next_rcu(pos)))
list_for_each_entry_continue_rcu  macro  include/linux/rculist.h  315  #define list_for_each_entry_continue_rcu(pos,head,member) for (pos = list_entry_rcu(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = list_entry_rcu(pos->member.next, typeof(*pos), member))
hlist_del_rcu  function  include/linux/rculist.h  339  static inline void hlist_del_rcu(struct hlist_node *n)
hlist_replace_rcu  function  include/linux/rculist.h  352  static inline void hlist_replace_rcu(struct hlist_node *old,struct hlist_node *new)
hlist_first_rcu  macro  include/linux/rculist.h  368  #define hlist_first_rcu(head) (*((struct hlist_node __rcu **)(&(head)->first)))
hlist_next_rcu  macro  include/linux/rculist.h  369  #define hlist_next_rcu(node) (*((struct hlist_node __rcu **)(&(node)->next)))
hlist_pprev_rcu  macro  include/linux/rculist.h  370  #define hlist_pprev_rcu(node) (*((struct hlist_node __rcu **)((node)->pprev)))
hlist_add_head_rcu  function  include/linux/rculist.h  391  static inline void hlist_add_head_rcu(struct hlist_node *n,struct hlist_head *h)
hlist_add_before_rcu  function  include/linux/rculist.h  421  static inline void hlist_add_before_rcu(struct hlist_node *n,struct hlist_node *next)
hlist_add_after_rcu  function  include/linux/rculist.h  448  static inline void hlist_add_after_rcu(struct hlist_node *prev,struct hlist_node *n)
__hlist_for_each_rcu  macro  include/linux/rculist.h  458  #define __hlist_for_each_rcu(pos,head) for (pos = rcu_dereference(hlist_first_rcu(head)); pos; pos = rcu_dereference(hlist_next_rcu(pos)))
hlist_for_each_entry_rcu  macro  include/linux/rculist.h  474  #define hlist_for_each_entry_rcu(tpos,pos,head,member) for (pos = rcu_dereference_raw(hlist_first_rcu(head)); pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); pos = rcu_dereference_raw(hlist_next_rcu(pos)))
hlist_for_each_entry_rcu_bh  macro  include/linux/rculist.h  491  #define hlist_for_each_entry_rcu_bh(tpos,pos,head,member) for (pos = rcu_dereference_bh((head)->first); pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); pos = rcu_dereference_bh(pos->next))
hlist_for_each_entry_continue_rcu  macro  include/linux/rculist.h  503  #define hlist_for_each_entry_continue_rcu(tpos,pos,member) for (pos = rcu_dereference((pos)->next); pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); pos = rcu_dereference(pos->next))
hlist_for_each_entry_continue_rcu_bh  macro  include/linux/rculist.h  515  #define hlist_for_each_entry_continue_rcu_bh(tpos,pos,member) for (pos = rcu_dereference_bh((pos)->next); pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); pos = rcu_dereference_bh(pos->next))
__LINUX_RT_MUTEX_H  macro  include/linux/rtmutex.h  13  #define __LINUX_RT_MUTEX_H
rt_mutex  struct  include/linux/rtmutex.h  28  struct rt_mutex { raw_spinlock_t wait_lock; struct plist_head wait_list; struct task_struct *owner; int save_state; const char *name, *file; int line; void *magic; };
rt_mutex_debug_check_no_locks_freed  function  include/linux/rtmutex.h  48  static inline int rt_mutex_debug_check_no_locks_freed(const void *from,unsigned long len)
rt_mutex_debug_check_no_locks_held  macro  include/linux/rtmutex.h  53  # define rt_mutex_debug_check_no_locks_held(task) do { } while (0)
__DEBUG_RT_MUTEX_INITIALIZER  macro  include/linux/rtmutex.h  62  # define __DEBUG_RT_MUTEX_INITIALIZER(mutexname)
rt_mutex_init  macro  include/linux/rtmutex.h  63  # define rt_mutex_init(mutex) __rt_mutex_init(mutex,NULL)
rt_mutex_debug_task_free  macro  include/linux/rtmutex.h  64  # define rt_mutex_debug_task_free(t) do { } while (0)
__RT_MUTEX_INITIALIZER  macro  include/linux/rtmutex.h  67  #define __RT_MUTEX_INITIALIZER(mutexname) { .wait_lock = __RAW_SPIN_LOCK_UNLOCKED(mutexname.wait_lock) , .wait_list = PLIST_HEAD_INIT(mutexname.wait_list) , .owner = NULL __DEBUG_RT_MUTEX_INITIALIZER(mutexname)}
DEFINE_RT_MUTEX  macro  include/linux/rtmutex.h  73  #define DEFINE_RT_MUTEX(mutexname) struct rt_mutex mutexname = __RT_MUTEX_INITIALIZER(mutexname)
rt_mutex_is_locked  function  include/linux/rtmutex.h  82  static inline int rt_mutex_is_locked(struct rt_mutex *lock)
__rt_mutex_init  prototype  include/linux/rtmutex.h  87  extern void __rt_mutex_init(struct rt_mutex *lock,const char *name);
rt_mutex_destroy  prototype  include/linux/rtmutex.h  88  extern void rt_mutex_destroy(struct rt_mutex *lock);
rt_mutex_lock  prototype  include/linux/rtmutex.h  90  extern void rt_mutex_lock(struct rt_mutex *lock);
rt_mutex_lock_interruptible  prototype  include/linux/rtmutex.h  91  extern int rt_mutex_lock_interruptible(struct rt_mutex *lock,int detect_deadlock);
rt_mutex_timed_lock  prototype  include/linux/rtmutex.h  93  extern int rt_mutex_timed_lock(struct rt_mutex *lock,struct hrtimer_sleeper *timeout,int detect_deadlock);
rt_mutex_trylock  prototype  include/linux/rtmutex.h  97  extern int rt_mutex_trylock(struct rt_mutex *lock);
rt_mutex_unlock  prototype  include/linux/rtmutex.h  99  extern void rt_mutex_unlock(struct rt_mutex *lock);
INIT_RT_MUTEXES  macro  include/linux/rtmutex.h  106  # define INIT_RT_MUTEXES(tsk)
_LINUX_TIME_H  macro  include/linux/time.h  2  #define _LINUX_TIME_H
_STRUCT_TIMESPEC  macro  include/linux/time.h  13  #define _STRUCT_TIMESPEC
timespec  struct  include/linux/time.h  14  struct timespec { __kernel_time_t tv_sec; long tv_nsec; };
timeval  struct  include/linux/time.h  20  struct timeval { __kernel_time_t tv_sec; __kernel_suseconds_t tv_usec; };
timezone  struct  include/linux/time.h  25  struct timezone { int tz_minuteswest; int tz_dsttime; };
MSEC_PER_SEC  macro  include/linux/time.h  35  #define MSEC_PER_SEC 1000L
USEC_PER_MSEC  macro  include/linux/time.h  36  #define USEC_PER_MSEC 1000L
NSEC_PER_USEC  macro  include/linux/time.h  37  #define NSEC_PER_USEC 1000L
NSEC_PER_MSEC  macro  include/linux/time.h  38  #define NSEC_PER_MSEC 1000000L
USEC_PER_SEC  macro  include/linux/time.h  39  #define USEC_PER_SEC 1000000L
NSEC_PER_SEC  macro  include/linux/time.h  40  #define NSEC_PER_SEC 1000000000L
FSEC_PER_SEC  macro  include/linux/time.h  41  #define FSEC_PER_SEC 1000000000000000LL
TIME_T_MAX  macro  include/linux/time.h  43  #define TIME_T_MAX (time_t)((1UL << ((sizeof(time_t) << 3) - 1)) - 1)
timespec_equal  function  include/linux/time.h  45  static inline int timespec_equal(const struct timespec *a,const struct timespec *b)
timespec_compare  function  include/linux/time.h  56  static inline int timespec_compare(const struct timespec *lhs,const struct timespec *rhs)
timeval_compare  function  include/linux/time.h  65  static inline int timeval_compare(const struct timeval *lhs,const struct timeval *rhs)
mktime  prototype  include/linux/time.h  74  extern unsigned long mktime(const unsigned int year,const unsigned int mon,const unsigned int day, const unsigned int hour,const unsigned int min, const unsigned int sec);
set_normalized_timespec  prototype  include/linux/time.h  78  extern void set_normalized_timespec(struct timespec *ts,time_t sec,s64 nsec);
timespec_add_safe  prototype  include/linux/time.h  85  extern struct timespec timespec_add_safe(const struct timespec lhs,const struct timespec rhs);
timespec_add  function  include/linux/time.h  89  static inline struct timespec timespec_add(struct timespec lhs,struct timespec rhs)
timespec_sub  function  include/linux/time.h  101  static inline struct timespec timespec_sub(struct timespec lhs,struct timespec rhs)
KTIME_MAX  macro  include/linux/time.h  110  #define KTIME_MAX ((s64)~((u64)1 << 63))
KTIME_SEC_MAX  macro  include/linux/time.h  114  # define KTIME_SEC_MAX LONG_MAX
timespec_valid  function  include/linux/time.h  120  static inline bool timespec_valid(const struct timespec *ts)
timespec_valid_strict  function  include/linux/time.h  131  static inline bool timespec_valid_strict(const struct timespec *ts)
read_persistent_clock  prototype  include/linux/time.h  141  extern void read_persistent_clock(struct timespec *ts);
read_boot_clock  prototype  include/linux/time.h  142  extern void read_boot_clock(struct timespec *ts);
update_persistent_clock  prototype  include/linux/time.h  143  extern int update_persistent_clock(struct timespec now);
timekeeping_init  prototype  include/linux/time.h  144  void timekeeping_init(void);
get_seconds  prototype  include/linux/time.h  147  unsigned long get_seconds(void);
current_kernel_time  prototype  include/linux/time.h  148  struct timespec current_kernel_time(void);
__current_kernel_time  prototype  include/linux/time.h  149  struct timespec __current_kernel_time(void);
get_monotonic_coarse  prototype  include/linux/time.h  150  struct timespec get_monotonic_coarse(void);
get_xtime_and_monotonic_and_sleep_offset  prototype  include/linux/time.h  151  void get_xtime_and_monotonic_and_sleep_offset(struct timespec *xtim,struct timespec *wtom, struct timespec *sleep);
timekeeping_inject_sleeptime  prototype  include/linux/time.h  153  void timekeeping_inject_sleeptime(struct timespec *delta);
CURRENT_TIME  macro  include/linux/time.h  155  #define CURRENT_TIME (current_kernel_time())
CURRENT_TIME_SEC  macro  include/linux/time.h  156  #define CURRENT_TIME_SEC ((struct timespec) { get_seconds(),0 })
arch_gettimeoffset  function  include/linux/time.h  170  static inline u32 arch_gettimeoffset(void) { return 0; }
do_gettimeofday  prototype  include/linux/time.h  173  extern void do_gettimeofday(struct timeval *tv);
do_settimeofday  prototype  include/linux/time.h  174  extern int do_settimeofday(const struct timespec *tv);
do_sys_settimeofday  prototype  include/linux/time.h  175  extern int do_sys_settimeofday(const struct timespec *tv,const struct timezone *tz);
do_posix_clock_monotonic_gettime  macro  include/linux/time.h  177  #define do_posix_clock_monotonic_gettime(ts) ktime_get_ts(ts)
do_utimes  prototype  include/linux/time.h  178  extern long do_utimes(int dfd,const char __user *filename,struct timespec *times,int flags);
do_setitimer  prototype  include/linux/time.h  180  extern int do_setitimer(int which,struct itimerval *value,struct itimerval *ovalue);
alarm_setitimer  prototype  include/linux/time.h  182  extern unsigned int alarm_setitimer(unsigned int seconds);
do_getitimer  prototype  include/linux/time.h  183  extern int do_getitimer(int which,struct itimerval *value);
getnstimeofday  prototype  include/linux/time.h  184  extern void getnstimeofday(struct timespec *tv);
getrawmonotonic  prototype  include/linux/time.h  185  extern void getrawmonotonic(struct timespec *ts);
getnstime_raw_and_real  prototype  include/linux/time.h  186  extern void getnstime_raw_and_real(struct timespec *ts_raw,struct timespec *ts_real);
getboottime  prototype  include/linux/time.h  188  extern void getboottime(struct timespec *ts);
monotonic_to_bootbased  prototype  include/linux/time.h  189  extern void monotonic_to_bootbased(struct timespec *ts);
get_monotonic_boottime  prototype  include/linux/time.h  190  extern void get_monotonic_boottime(struct timespec *ts);
timespec_trunc  prototype  include/linux/time.h  192  extern struct timespec timespec_trunc(struct timespec t,unsigned gran);
timekeeping_valid_for_hres  prototype  include/linux/time.h  193  extern int timekeeping_valid_for_hres(void);
timekeeping_max_deferment  prototype  include/linux/time.h  194  extern u64 timekeeping_max_deferment(void);
timekeeping_inject_offset  prototype  include/linux/time.h  195  extern int timekeeping_inject_offset(struct timespec *ts);
do_sys_times  prototype  include/linux/time.h  198  extern void do_sys_times(struct tms *);
tm  struct  include/linux/time.h  204  struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; long tm_year; int tm_wday; int tm_yday; };
time_to_tm  prototype  include/linux/time.h  226  void time_to_tm(time_t totalsecs,int offset,struct tm *result);
timespec_to_ns  function  include/linux/time.h  235  static inline s64 timespec_to_ns(const struct timespec *ts)
timeval_to_ns  function  include/linux/time.h  247  static inline s64 timeval_to_ns(const struct timeval *tv)
ns_to_timespec  prototype  include/linux/time.h  259  extern struct timespec ns_to_timespec(const s64 nsec);
ns_to_timeval  prototype  include/linux/time.h  267  extern struct timeval ns_to_timeval(const s64 nsec);
timespec_add_ns  function  include/linux/time.h  277  static __always_inline void timespec_add_ns(struct timespec *a,u64 ns)
ITIMER_REAL  macro  include/linux/time.h  289  #define ITIMER_REAL 0
ITIMER_VIRTUAL  macro  include/linux/time.h  290  #define ITIMER_VIRTUAL 1
ITIMER_PROF  macro  include/linux/time.h  291  #define ITIMER_PROF 2
itimerspec  struct  include/linux/time.h  293  struct itimerspec { struct timespec it_interval; struct timespec it_value; };
itimerval  struct  include/linux/time.h  298  struct itimerval { struct timeval it_interval; struct timeval it_value; };
CLOCK_REALTIME  macro  include/linux/time.h  306  #define CLOCK_REALTIME 0
CLOCK_MONOTONIC  macro  include/linux/time.h  307  #define CLOCK_MONOTONIC 1
CLOCK_PROCESS_CPUTIME_ID  macro  include/linux/time.h  308  #define CLOCK_PROCESS_CPUTIME_ID 2
CLOCK_THREAD_CPUTIME_ID  macro  include/linux/time.h  309  #define CLOCK_THREAD_CPUTIME_ID 3
CLOCK_MONOTONIC_RAW  macro  include/linux/time.h  310  #define CLOCK_MONOTONIC_RAW 4
CLOCK_REALTIME_COARSE  macro  include/linux/time.h  311  #define CLOCK_REALTIME_COARSE 5
CLOCK_MONOTONIC_COARSE  macro  include/linux/time.h  312  #define CLOCK_MONOTONIC_COARSE 6
CLOCK_BOOTTIME  macro  include/linux/time.h  313  #define CLOCK_BOOTTIME 7
CLOCK_REALTIME_ALARM  macro  include/linux/time.h  314  #define CLOCK_REALTIME_ALARM 8
CLOCK_BOOTTIME_ALARM  macro  include/linux/time.h  315  #define CLOCK_BOOTTIME_ALARM 9
CLOCK_SGI_CYCLE  macro  include/linux/time.h  320  #define CLOCK_SGI_CYCLE 10
MAX_CLOCKS  macro  include/linux/time.h  321  #define MAX_CLOCKS 16
CLOCKS_MASK  macro  include/linux/time.h  322  #define CLOCKS_MASK (CLOCK_REALTIME | CLOCK_MONOTONIC)
CLOCKS_MONO  macro  include/linux/time.h  323  #define CLOCKS_MONO CLOCK_MONOTONIC
TIMER_ABSTIME  macro  include/linux/time.h  328  #define TIMER_ABSTIME 0x01
_LINUX_PARAM_H  macro  include/linux/param.h  2  #define _LINUX_PARAM_H
_LINUX_RESOURCE_H  macro  include/linux/resource.h  2  #define _LINUX_RESOURCE_H
RUSAGE_SELF  macro  include/linux/resource.h  18  #define RUSAGE_SELF 0
RUSAGE_CHILDREN  macro  include/linux/resource.h  19  #define RUSAGE_CHILDREN (-1)
RUSAGE_BOTH  macro  include/linux/resource.h  20  #define RUSAGE_BOTH (-2)
RUSAGE_THREAD  macro  include/linux/resource.h  21  #define RUSAGE_THREAD 1
rusage  struct  include/linux/resource.h  23  struct rusage { struct timeval ru_utime; struct timeval ru_stime; long ru_maxrss; long ru_ixrss; long ru_idrss; long ru_isrss; long ru_minflt; long ru_majflt; long ru_nswap; long ru_inblock; long ru_oublock; long ru_msgsnd; long ru_msgrcv; long ru_nsignals; long ru_nvcsw; long ru_nivcsw; };
RLIM64_INFINITY  macro  include/linux/resource.h  47  #define RLIM64_INFINITY (~0ULL)
rlimit64  struct  include/linux/resource.h  49  struct rlimit64 { __u64 rlim_cur; __u64 rlim_max; };
PRIO_MIN  macro  include/linux/resource.h  54  #define PRIO_MIN (-20)
PRIO_MAX  macro  include/linux/resource.h  55  #define PRIO_MAX 20
PRIO_PROCESS  macro  include/linux/resource.h  57  #define PRIO_PROCESS 0
PRIO_PGRP  macro  include/linux/resource.h  58  #define PRIO_PGRP 1
PRIO_USER  macro  include/linux/resource.h  59  #define PRIO_USER 2
_STK_LIM  macro  include/linux/resource.h  65  #define _STK_LIM (8*1024*1024)
MLOCK_LIMIT  macro  include/linux/resource.h  71  #define MLOCK_LIMIT ((PAGE_SIZE > 64*1024) ? PAGE_SIZE : 64*1024)
getrusage  prototype  include/linux/resource.h  83  int getrusage(struct task_struct *p,int who,struct rusage __user *ru);
do_prlimit  prototype  include/linux/resource.h  84  int do_prlimit(struct task_struct *tsk,unsigned int resource,struct rlimit *new_rlim, struct rlimit *old_rlim);
_LINUX_TIMER_H  macro  include/linux/timer.h  2  #define _LINUX_TIMER_H
timer_list  struct  include/linux/timer.h  12  struct timer_list { struct list_head entry; unsigned long expires; struct tvec_base *base; void (*function)(unsigned long); unsigned long data; int slack; int start_pid; void *start_site; char start_comm[16]; struct lockdep_map lockdep_map; };
__TIMER_LOCKDEP_MAP_INITIALIZER  macro  include/linux/timer.h  48  #define __TIMER_LOCKDEP_MAP_INITIALIZER(_kn)
TBASE_DEFERRABLE_FLAG  macro  include/linux/timer.h  61  #define TBASE_DEFERRABLE_FLAG (0x1)
TIMER_INITIALIZER  macro  include/linux/timer.h  63  #define TIMER_INITIALIZER(_function,_expires,_data) { .entry = { .prev = TIMER_ENTRY_STATIC }, .function = (_function), .expires = (_expires), .data = (_data), .base = &boot_tvec_bases, .slack = -1, __TIMER_LOCKDEP_MAP_INITIALIZER( __FILE__ ":" __stringify(__LINE__)) }
TBASE_MAKE_DEFERRED  macro  include/linux/timer.h  74  #define TBASE_MAKE_DEFERRED(ptr) ((struct tvec_base *) ((unsigned char *)(ptr) + TBASE_DEFERRABLE_FLAG))
TIMER_DEFERRED_INITIALIZER  macro  include/linux/timer.h  77  #define TIMER_DEFERRED_INITIALIZER(_function,_expires,_data) { .entry = { .prev = TIMER_ENTRY_STATIC }, .function = (_function), .expires = (_expires), .data = (_data), .base = TBASE_MAKE_DEFERRED(&boot_tvec_bases), __TIMER_LOCKDEP_MAP_INITIALIZER( __FILE__ ":" __stringify(__LINE__)) }
DEFINE_TIMER  macro  include/linux/timer.h  87  #define DEFINE_TIMER(_name,_function,_expires,_data) struct timer_list _name = TIMER_INITIALIZER(_function, _expires, _data)
init_timer_key  prototype  include/linux/timer.h  91  void init_timer_key(struct timer_list *timer,const char *name,struct lock_class_key *key);
init_timer_deferrable_key  prototype  include/linux/timer.h  94  void init_timer_deferrable_key(struct timer_list *timer,const char *name,struct lock_class_key *key);
init_timer  macro  include/linux/timer.h  137  #define init_timer(timer) init_timer_key((timer), NULL, NULL)
init_timer_deferrable  macro  include/linux/timer.h  139  #define init_timer_deferrable(timer) init_timer_deferrable_key((timer), NULL, NULL)
init_timer_on_stack  macro  include/linux/timer.h  141  #define init_timer_on_stack(timer) init_timer_on_stack_key((timer), NULL, NULL)
setup_timer  macro  include/linux/timer.h  143  #define setup_timer(timer,fn,data) setup_timer_key((timer), NULL, NULL, (fn), (data))
setup_timer_on_stack  macro  include/linux/timer.h  145  #define setup_timer_on_stack(timer,fn,data) setup_timer_on_stack_key((timer), NULL, NULL, (fn), (data))
setup_deferrable_timer_on_stack  macro  include/linux/timer.h  147  #define setup_deferrable_timer_on_stack(timer,fn,data) setup_deferrable_timer_on_stack_key((timer), NULL, NULL, (fn), (data))
init_timer_on_stack_key  function  include/linux/timer.h  158  static inline void init_timer_on_stack_key(struct timer_list *timer,const char *name,struct lock_class_key *key)
destroy_timer_on_stack  function  include/linux/timer.h  157  static inline void destroy_timer_on_stack(struct timer_list *timer) { }
setup_timer_key  function  include/linux/timer.h  166  static inline void setup_timer_key(struct timer_list * timer,const char *name,struct lock_class_key *key,void (*function)(unsigned long),unsigned long data)
setup_timer_on_stack_key  function  include/linux/timer.h  177  static inline void setup_timer_on_stack_key(struct timer_list *timer,const char *name,struct lock_class_key *key,void (*function)(unsigned long),unsigned long data)
setup_deferrable_timer_on_stack_key  prototype  include/linux/timer.h  188  extern void setup_deferrable_timer_on_stack_key(struct timer_list *timer,const char *name,struct lock_class_key *key,void (*function)(unsigned long),unsigned long data);
timer_pending  function  include/linux/timer.h  204  static inline int timer_pending(const struct timer_list * timer)
add_timer_on  prototype  include/linux/timer.h  209  extern void add_timer_on(struct timer_list *timer,int cpu);
del_timer  prototype  include/linux/timer.h  210  extern int del_timer(struct timer_list * timer);
mod_timer  prototype  include/linux/timer.h  211  extern int mod_timer(struct timer_list *timer,unsigned long expires);
mod_timer_pending  prototype  include/linux/timer.h  212  extern int mod_timer_pending(struct timer_list *timer,unsigned long expires);
mod_timer_pinned  prototype  include/linux/timer.h  213  extern int mod_timer_pinned(struct timer_list *timer,unsigned long expires);
set_timer_slack  prototype  include/linux/timer.h  215  extern void set_timer_slack(struct timer_list *time,int slack_hz);
TIMER_NOT_PINNED  macro  include/linux/timer.h  217  #define TIMER_NOT_PINNED 0
TIMER_PINNED  macro  include/linux/timer.h  218  #define TIMER_PINNED 1
NEXT_TIMER_MAX_DELTA  macro  include/linux/timer.h  223  #define NEXT_TIMER_MAX_DELTA ((1UL << 30) - 1)
get_next_timer_interrupt  prototype  include/linux/timer.h  230  extern unsigned long get_next_timer_interrupt(unsigned long now);
TIMER_STATS_FLAG_DEFERRABLE  macro  include/linux/timer.h  239  #define TIMER_STATS_FLAG_DEFERRABLE 0x1
init_timer_stats  function  include/linux/timer.h  262  static inline void init_timer_stats(void)
timer_stats_update_stats  prototype  include/linux/timer.h  243  extern void timer_stats_update_stats(void *timer,pid_t pid,void *startf,void *timerf, char *comm,unsigned int timer_flag);
__timer_stats_timer_set_start_info  prototype  include/linux/timer.h  247  extern void __timer_stats_timer_set_start_info(struct timer_list *timer,void *addr);
timer_stats_timer_set_start_info  function  include/linux/timer.h  266  static inline void timer_stats_timer_set_start_info(struct timer_list *timer)
timer_stats_timer_clear_start_info  function  include/linux/timer.h  270  static inline void timer_stats_timer_clear_start_info(struct timer_list *timer)
add_timer  prototype  include/linux/timer.h  275  extern void add_timer(struct timer_list *timer);
try_to_del_timer_sync  prototype  include/linux/timer.h  277  extern int try_to_del_timer_sync(struct timer_list *timer);
del_timer_sync  macro  include/linux/timer.h  282  # define del_timer_sync(t) del_timer(t)
del_singleshot_timer_sync  macro  include/linux/timer.h  285  #define del_singleshot_timer_sync(t) del_timer_sync(t)
init_timers  prototype  include/linux/timer.h  287  extern void init_timers(void);
run_local_timers  prototype  include/linux/timer.h  288  extern void run_local_timers(void);
it_real_fn  prototype  include/linux/timer.h  290  extern enum hrtimer_restart it_real_fn(struct hrtimer *);
__round_jiffies  prototype  include/linux/timer.h  292  unsigned long __round_jiffies(unsigned long j,int cpu);
__round_jiffies_relative  prototype  include/linux/timer.h  293  unsigned long __round_jiffies_relative(unsigned long j,int cpu);
round_jiffies  prototype  include/linux/timer.h  294  unsigned long round_jiffies(unsigned long j);
round_jiffies_relative  prototype  include/linux/timer.h  295  unsigned long round_jiffies_relative(unsigned long j);
__round_jiffies_up  prototype  include/linux/timer.h  297  unsigned long __round_jiffies_up(unsigned long j,int cpu);
__round_jiffies_up_relative  prototype  include/linux/timer.h  298  unsigned long __round_jiffies_up_relative(unsigned long j,int cpu);
round_jiffies_up  prototype  include/linux/timer.h  299  unsigned long round_jiffies_up(unsigned long j);
round_jiffies_up_relative  prototype  include/linux/timer.h  300  unsigned long round_jiffies_up_relative(unsigned long j);
_LINUX_HRTIMER_H  macro  include/linux/hrtimer.h  16  #define _LINUX_HRTIMER_H
hrtimer_mode  enum  include/linux/hrtimer.h  33  enum hrtimer_mode { HRTIMER_MODE_ABS = 0x0, HRTIMER_MODE_REL = 0x1, HRTIMER_MODE_PINNED = 0x02, HRTIMER_MODE_ABS_PINNED = 0x02, HRTIMER_MODE_REL_PINNED = 0x03, };
hrtimer_restart  function  include/linux/hrtimer.h  380  static inline int hrtimer_restart(struct hrtimer *timer)
HRTIMER_STATE_INACTIVE  macro  include/linux/hrtimer.h  80  #define HRTIMER_STATE_INACTIVE 0x00
HRTIMER_STATE_ENQUEUED  macro  include/linux/hrtimer.h  81  #define HRTIMER_STATE_ENQUEUED 0x01
HRTIMER_STATE_CALLBACK  macro  include/linux/hrtimer.h  82  #define HRTIMER_STATE_CALLBACK 0x02
HRTIMER_STATE_MIGRATE  macro  include/linux/hrtimer.h  83  #define HRTIMER_STATE_MIGRATE 0x04
hrtimer  struct  include/linux/hrtimer.h  108  struct hrtimer { struct timerqueue_node node; ktime_t _softexpires; enum hrtimer_restart (*function)(struct hrtimer *); struct hrtimer_clock_base *base; unsigned long state; int start_pid; void *start_site; char start_comm[16]; };
hrtimer_sleeper  struct  include/linux/hrtimer.h  128  struct hrtimer_sleeper { struct hrtimer timer; struct task_struct *task; };
hrtimer_clock_base  struct  include/linux/hrtimer.h  145  struct hrtimer_clock_base { struct hrtimer_cpu_base *cpu_base; int index; clockid_t clockid; struct timerqueue_head active; ktime_t resolution; ktime_t (*get_time)(void); ktime_t softirq_time; ktime_t offset; };
hrtimer_base_type  enum  include/linux/hrtimer.h  156  enum hrtimer_base_type { HRTIMER_BASE_MONOTONIC, HRTIMER_BASE_REALTIME, HRTIMER_BASE_BOOTTIME, HRTIMER_MAX_CLOCK_BASES, };
hrtimer_cpu_base  struct  include/linux/hrtimer.h  179  struct hrtimer_cpu_base { raw_spinlock_t lock; unsigned int active_bases; unsigned int clock_was_set; ktime_t expires_next; int hres_active; int hang_detected; unsigned long nr_events; unsigned long nr_retries; unsigned long nr_hangs; ktime_t max_hang_time; struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES]; };
hrtimer_set_expires  function  include/linux/hrtimer.h  195  static inline void hrtimer_set_expires(struct hrtimer *timer,ktime_t time)
hrtimer_set_expires_range  function  include/linux/hrtimer.h  201  static inline void hrtimer_set_expires_range(struct hrtimer *timer,ktime_t time,ktime_t delta)
hrtimer_set_expires_range_ns  function  include/linux/hrtimer.h  207  static inline void hrtimer_set_expires_range_ns(struct hrtimer *timer,ktime_t time,unsigned long delta)
hrtimer_set_expires_tv64  function  include/linux/hrtimer.h  213  static inline void hrtimer_set_expires_tv64(struct hrtimer *timer,s64 tv64)
hrtimer_add_expires  function  include/linux/hrtimer.h  219  static inline void hrtimer_add_expires(struct hrtimer *timer,ktime_t time)
hrtimer_add_expires_ns  function  include/linux/hrtimer.h  225  static inline void hrtimer_add_expires_ns(struct hrtimer *timer,u64 ns)
hrtimer_get_expires  function  include/linux/hrtimer.h  231  static inline ktime_t hrtimer_get_expires(const struct hrtimer *timer)
hrtimer_get_softexpires  function  include/linux/hrtimer.h  236  static inline ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
hrtimer_get_expires_tv64  function  include/linux/hrtimer.h  241  static inline s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
hrtimer_get_softexpires_tv64  function  include/linux/hrtimer.h  245  static inline s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
hrtimer_get_expires_ns  function  include/linux/hrtimer.h  250  static inline s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
hrtimer_expires_remaining  function  include/linux/hrtimer.h  255  static inline ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
hrtimer_interrupt  prototype  include/linux/hrtimer.h  263  extern void hrtimer_interrupt(struct clock_event_device *dev);
hrtimer_cb_get_time  function  include/linux/hrtimer.h  304  static inline ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
hrtimer_is_hres_active  function  include/linux/hrtimer.h  309  static inline int hrtimer_is_hres_active(struct hrtimer *timer)
hrtimer_peek_ahead_timers  function  include/linux/hrtimer.h  298  static inline void hrtimer_peek_ahead_timers(void) { }
HIGH_RES_NSEC  macro  include/linux/hrtimer.h  286  # define HIGH_RES_NSEC 1
KTIME_HIGH_RES  macro  include/linux/hrtimer.h  287  # define KTIME_HIGH_RES (ktime_t) { .tv64 = HIGH_RES_NSEC }
MONOTONIC_RES_NSEC  macro  include/linux/hrtimer.h  295  # define MONOTONIC_RES_NSEC LOW_RES_NSEC
KTIME_MONOTONIC_RES  macro  include/linux/hrtimer.h  296  # define KTIME_MONOTONIC_RES KTIME_LOW_RES
clock_was_set_delayed  function  include/linux/hrtimer.h  314  static inline void clock_was_set_delayed(void) { }
clock_was_set  prototype  include/linux/hrtimer.h  318  extern void clock_was_set(void);
timerfd_clock_was_set  function  include/linux/hrtimer.h  322  static inline void timerfd_clock_was_set(void) { }
hrtimers_resume  prototype  include/linux/hrtimer.h  324  extern void hrtimers_resume(void);
ktime_get  prototype  include/linux/hrtimer.h  326  extern ktime_t ktime_get(void);
ktime_get_real  prototype  include/linux/hrtimer.h  327  extern ktime_t ktime_get_real(void);
ktime_get_boottime  prototype  include/linux/hrtimer.h  328  extern ktime_t ktime_get_boottime(void);
ktime_get_monotonic_offset  prototype  include/linux/hrtimer.h  329  extern ktime_t ktime_get_monotonic_offset(void);
ktime_get_update_offsets  prototype  include/linux/hrtimer.h  330  extern ktime_t ktime_get_update_offsets(ktime_t *offs_real,ktime_t *offs_boot);
hrtimer_init  prototype  include/linux/hrtimer.h  338  extern void hrtimer_init(struct hrtimer *timer,clockid_t which_clock,enum hrtimer_mode mode);
hrtimer_init_on_stack  function  include/linux/hrtimer.h  347  static inline void hrtimer_init_on_stack(struct hrtimer *timer,clockid_t which_clock,enum hrtimer_mode mode)
destroy_hrtimer_on_stack  function  include/linux/hrtimer.h  353  static inline void destroy_hrtimer_on_stack(struct hrtimer *timer) { }
hrtimer_start  prototype  include/linux/hrtimer.h  357  extern int hrtimer_start(struct hrtimer *timer,ktime_t tim,const enum hrtimer_mode mode);
hrtimer_start_range_ns  prototype  include/linux/hrtimer.h  359  extern int hrtimer_start_range_ns(struct hrtimer *timer,ktime_t tim,unsigned long range_ns, const enum hrtimer_mode mode);
__hrtimer_start_range_ns  prototype  include/linux/hrtimer.h  362  __hrtimer_start_range_ns(struct hrtimer *timer,ktime_t tim,unsigned long delta_ns,const enum hrtimer_mode mode, int wakeup);
hrtimer_cancel  prototype  include/linux/hrtimer.h  366  extern int hrtimer_cancel(struct hrtimer *timer);
hrtimer_try_to_cancel  prototype  include/linux/hrtimer.h  367  extern int hrtimer_try_to_cancel(struct hrtimer *timer);
hrtimer_start_expires  function  include/linux/hrtimer.h  369  static inline int hrtimer_start_expires(struct hrtimer *timer,enum hrtimer_mode mode)
hrtimer_get_remaining  prototype  include/linux/hrtimer.h  386  extern ktime_t hrtimer_get_remaining(const struct hrtimer *timer);
hrtimer_get_res  prototype  include/linux/hrtimer.h  387  extern int hrtimer_get_res(const clockid_t which_clock,struct timespec *tp);
hrtimer_get_next_event  prototype  include/linux/hrtimer.h  389  extern ktime_t hrtimer_get_next_event(void);
hrtimer_active  function  include/linux/hrtimer.h  396  static inline int hrtimer_active(const struct hrtimer *timer)
hrtimer_is_queued  function  include/linux/hrtimer.h  404  static inline int hrtimer_is_queued(struct hrtimer *timer)
hrtimer_callback_running  function  include/linux/hrtimer.h  413  static inline int hrtimer_callback_running(struct hrtimer *timer)
hrtimer_forward  prototype  include/linux/hrtimer.h  420  hrtimer_forward(struct hrtimer *timer,ktime_t now,ktime_t interval);
hrtimer_forward_now  function  include/linux/hrtimer.h  423  static inline u64 hrtimer_forward_now(struct hrtimer *timer,ktime_t interval)
hrtimer_nanosleep  prototype  include/linux/hrtimer.h  430  extern long hrtimer_nanosleep(struct timespec *rqtp,struct timespec __user *rmtp,const enum hrtimer_mode mode,const clockid_t clockid);
hrtimer_nanosleep_restart  prototype  include/linux/hrtimer.h  434  extern long hrtimer_nanosleep_restart(struct restart_block *restart_block);
hrtimer_init_sleeper  prototype  include/linux/hrtimer.h  436  extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl,struct task_struct *tsk);
schedule_hrtimeout_range  prototype  include/linux/hrtimer.h  439  extern int schedule_hrtimeout_range(ktime_t *expires,unsigned long delta,const enum hrtimer_mode mode);
schedule_hrtimeout_range_clock  prototype  include/linux/hrtimer.h  441  extern int schedule_hrtimeout_range_clock(ktime_t *expires,unsigned long delta, const enum hrtimer_mode mode, int clock);
schedule_hrtimeout  prototype  include/linux/hrtimer.h  443  extern int schedule_hrtimeout(ktime_t *expires,const enum hrtimer_mode mode);
hrtimer_run_queues  prototype  include/linux/hrtimer.h  446  extern void hrtimer_run_queues(void);
hrtimer_run_pending  prototype  include/linux/hrtimer.h  447  extern void hrtimer_run_pending(void);
hrtimers_init  prototype  include/linux/hrtimer.h  450  extern void __init hrtimers_init(void);
ktime_divns  macro  include/linux/hrtimer.h  455  # define ktime_divns(kt,div) (u64)((kt).tv64 / (div))
sysrq_timer_list_show  prototype  include/linux/hrtimer.h  459  extern void sysrq_timer_list_show(void);
task_io_accounting  struct  include/linux/task_io_accounting.h  11  struct task_io_accounting { u64 rchar; u64 wchar; u64 syscr; u64 syscw; u64 read_bytes; u64 write_bytes; u64 cancelled_write_bytes; };
_INCLUDE_GUARD_LATENCYTOP_H_  macro  include/linux/latencytop.h  10  #define _INCLUDE_GUARD_LATENCYTOP_H_
LT_SAVECOUNT  macro  include/linux/latencytop.h  17  #define LT_SAVECOUNT 32
LT_BACKTRACEDEPTH  macro  include/linux/latencytop.h  18  #define LT_BACKTRACEDEPTH 12
latency_record  struct  include/linux/latencytop.h  20  struct latency_record { unsigned long backtrace[LT_BACKTRACEDEPTH]; unsigned int count; unsigned long time; unsigned long max; };
__account_scheduler_latency  prototype  include/linux/latencytop.h  30  void __account_scheduler_latency(struct task_struct *task,int usecs,int inter);
account_scheduler_latency  function  include/linux/latencytop.h  43  account_scheduler_latency(struct task_struct *task,int usecs,int inter)
clear_all_latency_tracing  function  include/linux/latencytop.h  47  static inline void clear_all_latency_tracing(struct task_struct *p)
_LINUX_CRED_H  macro  include/linux/cred.h  13  #define _LINUX_CRED_H
NGROUPS_SMALL  macro  include/linux/cred.h  29  #define NGROUPS_SMALL 32
NGROUPS_PER_BLOCK  macro  include/linux/cred.h  30  #define NGROUPS_PER_BLOCK ((unsigned int)(PAGE_SIZE / sizeof(kgid_t)))
group_info  struct  include/linux/cred.h  32  struct group_info { atomic_t usage; int ngroups; int nblocks; kgid_t small_block[NGROUPS_SMALL]; kgid_t *blocks[0]; };
get_group_info  function  include/linux/cred.h  49  static inline struct group_info *get_group_info(struct group_info *gi)
put_group_info  macro  include/linux/cred.h  59  #define put_group_info(group_info) do { if (atomic_dec_and_test(&(group_info)->usage)) groups_free(group_info); } while (0)
groups_alloc  prototype  include/linux/cred.h  65  extern struct group_info *groups_alloc(int);
groups_free  prototype  include/linux/cred.h  67  extern void groups_free(struct group_info *);
set_current_groups  prototype  include/linux/cred.h  68  extern int set_current_groups(struct group_info *);
set_groups  prototype  include/linux/cred.h  69  extern int set_groups(struct cred *,struct group_info *);
groups_search  prototype  include/linux/cred.h  70  extern int groups_search(const struct group_info *,kgid_t);
GROUP_AT  macro  include/linux/cred.h  73  #define GROUP_AT(gi,i) ((gi)->blocks[(i) / NGROUPS_PER_BLOCK][(i) % NGROUPS_PER_BLOCK])
in_group_p  prototype  include/linux/cred.h  76  extern int in_group_p(kgid_t);
in_egroup_p  prototype  include/linux/cred.h  77  extern int in_egroup_p(kgid_t);
thread_group_cred  struct  include/linux/cred.h  84  struct thread_group_cred { atomic_t usage; pid_t tgid; spinlock_t lock; struct key __rcu *session_keyring; struct key *process_keyring; struct rcu_head rcu; };
cred  struct  include/linux/cred.h  117  struct cred { atomic_t usage; atomic_t subscribers; void *put_addr; unsigned magic; #define CRED_MAGIC 0x43736564 #define CRED_MAGIC_DEAD 0x44656144 kuid_t uid; kgid_t gid; kuid_t suid; kgid_t sgid; kuid_t euid; kgid_t egid; kuid_t fsuid; kgid_t fsgid; unsigned securebits; kernel_cap_t cap_inheritable; kernel_cap_t cap_permitted; kernel_cap_t cap_effective; kernel_cap_t cap_bset; unsigned char jit_keyring; struct key *thread_keyring; struct key *request_key_auth; struct thread_group_cred *tgcred; void *security; struct user_struct *user; struct user_namespace *user_ns; struct group_info *group_info; struct rcu_head rcu; };
__put_cred  prototype  include/linux/cred.h  155  extern void __put_cred(struct cred *);
exit_creds  prototype  include/linux/cred.h  156  extern void exit_creds(struct task_struct *);
copy_creds  prototype  include/linux/cred.h  157  extern int copy_creds(struct task_struct *,unsigned long);
get_task_cred  prototype  include/linux/cred.h  158  extern const struct cred *get_task_cred(struct task_struct *);
cred_alloc_blank  prototype  include/linux/cred.h  159  extern struct cred *cred_alloc_blank(void);
prepare_creds  prototype  include/linux/cred.h  160  extern struct cred *prepare_creds(void);
prepare_exec_creds  prototype  include/linux/cred.h  161  extern struct cred *prepare_exec_creds(void);
commit_creds  prototype  include/linux/cred.h  162  extern int commit_creds(struct cred *);
abort_creds  prototype  include/linux/cred.h  163  extern void abort_creds(struct cred *);
override_creds  prototype  include/linux/cred.h  164  extern const struct cred *override_creds(const struct cred *);
revert_creds  prototype  include/linux/cred.h  165  extern void revert_creds(const struct cred *);
prepare_kernel_cred  prototype  include/linux/cred.h  166  extern struct cred *prepare_kernel_cred(struct task_struct *);
change_create_files_as  prototype  include/linux/cred.h  167  extern int change_create_files_as(struct cred *,struct inode *);
set_security_override  prototype  include/linux/cred.h  168  extern int set_security_override(struct cred *,u32);
set_security_override_from_ctx  prototype  include/linux/cred.h  169  extern int set_security_override_from_ctx(struct cred *,const char *);
set_create_files_as  prototype  include/linux/cred.h  170  extern int set_create_files_as(struct cred *,struct inode *);
cred_init  prototype  include/linux/cred.h  171  extern void __init cred_init(void);
__invalid_creds  prototype  include/linux/cred.h  177  extern void __invalid_creds(const struct cred *,const char *,unsigned);
__validate_process_creds  prototype  include/linux/cred.h  178  extern void __validate_process_creds(struct task_struct *,const char *, unsigned);
creds_are_invalid  prototype  include/linux/cred.h  181  extern bool creds_are_invalid(const struct cred *cred);
__validate_creds  function  include/linux/cred.h  183  static inline void __validate_creds(const struct cred *cred,const char *file, unsigned line)
validate_creds  function  include/linux/cred.h  202  static inline void validate_creds(const struct cred *cred)
validate_process_creds  function  include/linux/cred.h  208  static inline void validate_process_creds(void)
validate_creds_for_do_exit  function  include/linux/cred.h  205  static inline void validate_creds_for_do_exit(struct task_struct *tsk)
get_new_cred  function  include/linux/cred.h  220  static inline struct cred *get_new_cred(struct cred *cred)
get_cred  function  include/linux/cred.h  239  static inline const struct cred *get_cred(const struct cred *cred)
put_cred  function  include/linux/cred.h  257  static inline void put_cred(const struct cred *_cred)
current_cred  macro  include/linux/cred.h  272  #define current_cred() rcu_dereference_protected(current->cred, 1)
__task_cred  macro  include/linux/cred.h  285  #define __task_cred(task) rcu_dereference((task)->real_cred)
get_current_cred  macro  include/linux/cred.h  295  #define get_current_cred() (get_cred(current_cred()))
get_current_user  macro  include/linux/cred.h  304  #define get_current_user() ({ struct user_struct *__u; const struct cred *__cred; __cred = current_cred(); __u = get_uid(__cred->user); __u; })
get_current_groups  macro  include/linux/cred.h  319  #define get_current_groups() ({ struct group_info *__groups; const struct cred *__cred; __cred = current_cred(); __groups = get_group_info(__cred->group_info); __groups; })
task_cred_xxx  macro  include/linux/cred.h  328  #define task_cred_xxx(task,xxx) ({ __typeof__(((struct cred *)NULL)->xxx) ___val; rcu_read_lock(); ___val = __task_cred((task))->xxx; rcu_read_unlock(); ___val; })
task_uid  macro  include/linux/cred.h  337  #define task_uid(task) (task_cred_xxx((task),uid))
task_euid  macro  include/linux/cred.h  338  #define task_euid(task) (task_cred_xxx((task),euid))
current_cred_xxx  macro  include/linux/cred.h  340  #define current_cred_xxx(xxx) ({ current_cred()->xxx; })
current_uid  macro  include/linux/cred.h  345  #define current_uid() (current_cred_xxx(uid))
current_gid  macro  include/linux/cred.h  346  #define current_gid() (current_cred_xxx(gid))
current_euid  macro  include/linux/cred.h  347  #define current_euid() (current_cred_xxx(euid))
current_egid  macro  include/linux/cred.h  348  #define current_egid() (current_cred_xxx(egid))
current_suid  macro  include/linux/cred.h  349  #define current_suid() (current_cred_xxx(suid))
current_sgid  macro  include/linux/cred.h  350  #define current_sgid() (current_cred_xxx(sgid))
current_fsuid  macro  include/linux/cred.h  351  #define current_fsuid() (current_cred_xxx(fsuid))
current_fsgid  macro  include/linux/cred.h  352  #define current_fsgid() (current_cred_xxx(fsgid))
current_cap  macro  include/linux/cred.h  353  #define current_cap() (current_cred_xxx(cap_effective))
current_user  macro  include/linux/cred.h  354  #define current_user() (current_cred_xxx(user))
current_security  macro  include/linux/cred.h  355  #define current_security() (current_cred_xxx(security))
task_user_ns  macro  include/linux/cred.h  363  #define task_user_ns(task) (&init_user_ns)
current_uid_gid  macro  include/linux/cred.h  367  #define current_uid_gid(_uid,_gid) do { const struct cred *__cred; __cred = current_cred(); *(_uid) = __cred->uid; *(_gid) = __cred->gid; } while(0)
current_euid_egid  macro  include/linux/cred.h  375  #define current_euid_egid(_euid,_egid) do { const struct cred *__cred; __cred = current_cred(); *(_euid) = __cred->euid; *(_egid) = __cred->egid; } while(0)
current_fsuid_fsgid  macro  include/linux/cred.h  383  #define current_fsuid_fsgid(_fsuid,_fsgid) do { const struct cred *__cred; __cred = current_cred(); *(_fsuid) = __cred->fsuid; *(_fsgid) = __cred->fsgid; } while(0)
LLIST_H  macro  include/linux/llist.h  2  #define LLIST_H
llist_head  struct  include/linux/llist.h  61  struct llist_head { struct llist_node *first; };
llist_node  struct  include/linux/llist.h  65  struct llist_node { struct llist_node *next; };
LLIST_HEAD_INIT  macro  include/linux/llist.h  69  #define LLIST_HEAD_INIT(name) { NULL }
LLIST_HEAD  macro  include/linux/llist.h  70  #define LLIST_HEAD(name) struct llist_head name = LLIST_HEAD_INIT(name)
init_llist_head  function  include/linux/llist.h  76  static inline void init_llist_head(struct llist_head *list)
llist_entry  macro  include/linux/llist.h  87  #define llist_entry(ptr,type,member) container_of(ptr, type, member)
llist_for_each  macro  include/linux/llist.h  104  #define llist_for_each(pos,node) for ((pos) = (node); pos; (pos) = (pos)->next)
llist_for_each_entry  macro  include/linux/llist.h  122  #define llist_for_each_entry(pos,node,member) for ((pos) = llist_entry((node), typeof(*(pos)), member); &(pos)->member != NULL; (pos) = llist_entry((pos)->member.next, typeof(*(pos)), member))
llist_empty  function  include/linux/llist.h  135  static inline bool llist_empty(const struct llist_head *head)
llist_next  function  include/linux/llist.h  140  static inline struct llist_node *llist_next(struct llist_node *node)
llist_add  function  include/linux/llist.h  152  static inline bool llist_add(struct llist_node *new,struct llist_head *head)
llist_del_all  function  include/linux/llist.h  176  static inline struct llist_node *llist_del_all(struct llist_head *head)
llist_add_batch  prototype  include/linux/llist.h  181  extern bool llist_add_batch(struct llist_node *new_first,struct llist_node *new_last,struct llist_head *head);
llist_del_first  prototype  include/linux/llist.h  184  extern struct llist_node *llist_del_first(struct llist_head *head);
_LINUX_UIDGID_H  macro  include/linux/uidgid.h  2  #define _LINUX_UIDGID_H
kuid_t  struct  include/linux/uidgid.h  22  typedef struct { uid_t val; } kuid_t;
kgid_t  struct  include/linux/uidgid.h  27  typedef struct { gid_t val; } kgid_t;
KUIDT_INIT  macro  include/linux/uidgid.h  59  #define KUIDT_INIT(value) ((kuid_t) value )
KGIDT_INIT  macro  include/linux/uidgid.h  60  #define KGIDT_INIT(value) ((kgid_t) value )
__kuid_val  function  include/linux/uidgid.h  49  static inline uid_t __kuid_val(kuid_t uid)
__kgid_val  function  include/linux/uidgid.h  54  static inline gid_t __kgid_val(kgid_t gid)
GLOBAL_ROOT_UID  macro  include/linux/uidgid.h  64  #define GLOBAL_ROOT_UID KUIDT_INIT(0)
GLOBAL_ROOT_GID  macro  include/linux/uidgid.h  65  #define GLOBAL_ROOT_GID KGIDT_INIT(0)
INVALID_UID  macro  include/linux/uidgid.h  67  #define INVALID_UID KUIDT_INIT(-1)
INVALID_GID  macro  include/linux/uidgid.h  68  #define INVALID_GID KGIDT_INIT(-1)
uid_eq  function  include/linux/uidgid.h  70  static inline bool uid_eq(kuid_t left,kuid_t right)
gid_eq  function  include/linux/uidgid.h  75  static inline bool gid_eq(kgid_t left,kgid_t right)
uid_gt  function  include/linux/uidgid.h  80  static inline bool uid_gt(kuid_t left,kuid_t right)
gid_gt  function  include/linux/uidgid.h  85  static inline bool gid_gt(kgid_t left,kgid_t right)
uid_gte  function  include/linux/uidgid.h  90  static inline bool uid_gte(kuid_t left,kuid_t right)
gid_gte  function  include/linux/uidgid.h  95  static inline bool gid_gte(kgid_t left,kgid_t right)
uid_lt  function  include/linux/uidgid.h  100  static inline bool uid_lt(kuid_t left,kuid_t right)
gid_lt  function  include/linux/uidgid.h  105  static inline bool gid_lt(kgid_t left,kgid_t right)
uid_lte  function  include/linux/uidgid.h  110  static inline bool uid_lte(kuid_t left,kuid_t right)
gid_lte  function  include/linux/uidgid.h  115  static inline bool gid_lte(kgid_t left,kgid_t right)
uid_valid  function  include/linux/uidgid.h  120  static inline bool uid_valid(kuid_t uid)
gid_valid  function  include/linux/uidgid.h  125  static inline bool gid_valid(kgid_t gid)
make_kuid  function  include/linux/uidgid.h  152  static inline kuid_t make_kuid(struct user_namespace *from,uid_t uid)
make_kgid  function  include/linux/uidgid.h  157  static inline kgid_t make_kgid(struct user_namespace *from,gid_t gid)
from_kuid  function  include/linux/uidgid.h  162  static inline uid_t from_kuid(struct user_namespace *to,kuid_t kuid)
from_kgid  function  include/linux/uidgid.h  167  static inline gid_t from_kgid(struct user_namespace *to,kgid_t kgid)
from_kuid_munged  function  include/linux/uidgid.h  172  static inline uid_t from_kuid_munged(struct user_namespace *to,kuid_t kuid)
from_kgid_munged  function  include/linux/uidgid.h  180  static inline gid_t from_kgid_munged(struct user_namespace *to,kgid_t kgid)
kuid_has_mapping  function  include/linux/uidgid.h  188  static inline bool kuid_has_mapping(struct user_namespace *ns,kuid_t uid)
kgid_has_mapping  function  include/linux/uidgid.h  193  static inline bool kgid_has_mapping(struct user_namespace *ns,kgid_t gid)
_ASM_X86_PROCESSOR_H  macro  arch/x86/include/asm/processor.h  2  #define _ASM_X86_PROCESSOR_H
HBP_NUM  macro  arch/x86/include/asm/processor.h  42  #define HBP_NUM 4
current_text_addr  function  arch/x86/include/asm/processor.h  47  static inline void *current_text_addr(void)
ARCH_MIN_TASKALIGN  macro  arch/x86/include/asm/processor.h  60  # define ARCH_MIN_TASKALIGN 16
ARCH_MIN_MMSTRUCT_ALIGN  macro  arch/x86/include/asm/processor.h  61  # define ARCH_MIN_MMSTRUCT_ALIGN 0
cpuinfo_x86  struct  arch/x86/include/asm/processor.h  70  struct cpuinfo_x86 { __u8 x86; __u8 x86_vendor; __u8 x86_model; __u8 x86_mask; char wp_works_ok; char hlt_works_ok; char hard_math; char rfu; char fdiv_bug; char f00f_bug; char coma_bug; char pad0; int x86_tlbsize; __u8 x86_virt_bits; __u8 x86_phys_bits; __u8 x86_coreid_bits; __u32 extended_cpuid_level; int cpuid_level; __u32 x86_capability[NCAPINTS]; char x86_vendor_id[16]; char x86_model_id[64]; int x86_cache_size; int x86_cache_alignment; int x86_power; unsigned long loops_per_jiffy; u16 x86_max_cores; u16 apicid; u16 initial_apicid; u16 x86_clflush_size; u16 booted_cores; u16 phys_proc_id; u16 cpu_core_id; u8 compute_unit_id; u16 cpu_index; u32 microcode; } __attribute__((__aligned__(SMP_CACHE_BYTES)));
X86_VENDOR_INTEL  macro  arch/x86/include/asm/processor.h  124  #define X86_VENDOR_INTEL 0
X86_VENDOR_CYRIX  macro  arch/x86/include/asm/processor.h  125  #define X86_VENDOR_CYRIX 1
X86_VENDOR_AMD  macro  arch/x86/include/asm/processor.h  126  #define X86_VENDOR_AMD 2
X86_VENDOR_UMC  macro  arch/x86/include/asm/processor.h  127  #define X86_VENDOR_UMC 3
X86_VENDOR_CENTAUR  macro  arch/x86/include/asm/processor.h  128  #define X86_VENDOR_CENTAUR 5
X86_VENDOR_TRANSMETA  macro  arch/x86/include/asm/processor.h  129  #define X86_VENDOR_TRANSMETA 7
X86_VENDOR_NSC  macro  arch/x86/include/asm/processor.h  130  #define X86_VENDOR_NSC 8
X86_VENDOR_NUM  macro  arch/x86/include/asm/processor.h  131  #define X86_VENDOR_NUM 9
X86_VENDOR_UNKNOWN  macro  arch/x86/include/asm/processor.h  133  #define X86_VENDOR_UNKNOWN 0xff
cpu_data  macro  arch/x86/include/asm/processor.h  150  #define cpu_data(cpu) boot_cpu_data
cpu_info  macro  arch/x86/include/asm/processor.h  149  #define cpu_info boot_cpu_data
hlt_works  function  arch/x86/include/asm/processor.h  155  static inline int hlt_works(int cpu)
cpu_detect  prototype  arch/x86/include/asm/processor.h  166  extern void cpu_detect(struct cpuinfo_x86 *c);
idle_regs  prototype  arch/x86/include/asm/processor.h  168  extern struct pt_regs *idle_regs(struct pt_regs *);
early_cpu_init  prototype  arch/x86/include/asm/processor.h  170  extern void early_cpu_init(void);
identify_boot_cpu  prototype  arch/x86/include/asm/processor.h  171  extern void identify_boot_cpu(void);
identify_secondary_cpu  prototype  arch/x86/include/asm/processor.h  172  extern void identify_secondary_cpu(struct cpuinfo_x86 *);
print_cpu_info  prototype  arch/x86/include/asm/processor.h  173  extern void print_cpu_info(struct cpuinfo_x86 *);
print_cpu_msr  prototype  arch/x86/include/asm/processor.h  174  void print_cpu_msr(struct cpuinfo_x86 *);
init_scattered_cpuid_features  prototype  arch/x86/include/asm/processor.h  175  extern void init_scattered_cpuid_features(struct cpuinfo_x86 *c);
init_intel_cacheinfo  prototype  arch/x86/include/asm/processor.h  176  extern unsigned int init_intel_cacheinfo(struct cpuinfo_x86 *c);
detect_extended_topology  prototype  arch/x86/include/asm/processor.h  179  extern void detect_extended_topology(struct cpuinfo_x86 *c);
detect_ht  prototype  arch/x86/include/asm/processor.h  180  extern void detect_ht(struct cpuinfo_x86 *c);
native_cpuid  function  arch/x86/include/asm/processor.h  182  static inline void native_cpuid(unsigned int *eax,unsigned int *ebx,unsigned int *ecx, unsigned int *edx)
load_cr3  function  arch/x86/include/asm/processor.h  195  static inline void load_cr3(pgd_t *pgdir)
x86_hw_tss  struct  arch/x86/include/asm/processor.h  234  struct x86_hw_tss { u32 reserved1; u64 sp0; u64 sp1; u64 sp2; u64 reserved2; u64 ist[7]; u32 reserved3; u32 reserved4; u16 reserved5; u16 io_bitmap_base; } __attribute__((packed)) ____cacheline_aligned;
IO_BITMAP_BITS  macro  arch/x86/include/asm/processor.h  252  #define IO_BITMAP_BITS 65536
IO_BITMAP_BYTES  macro  arch/x86/include/asm/processor.h  253  #define IO_BITMAP_BYTES (IO_BITMAP_BITS/8)
IO_BITMAP_LONGS  macro  arch/x86/include/asm/processor.h  254  #define IO_BITMAP_LONGS (IO_BITMAP_BYTES/sizeof(long))
IO_BITMAP_OFFSET  macro  arch/x86/include/asm/processor.h  255  #define IO_BITMAP_OFFSET offsetof(struct tss_struct,io_bitmap)
INVALID_IO_BITMAP_OFFSET  macro  arch/x86/include/asm/processor.h  256  #define INVALID_IO_BITMAP_OFFSET 0x8000
tss_struct  struct  arch/x86/include/asm/processor.h  258  struct tss_struct { struct x86_hw_tss x86_tss; unsigned long io_bitmap[IO_BITMAP_LONGS + 1]; unsigned long stack[64]; } ____cacheline_aligned;
orig_ist  struct  arch/x86/include/asm/processor.h  284  struct orig_ist { unsigned long ist[7]; };
MXCSR_DEFAULT  macro  arch/x86/include/asm/processor.h  288  #define MXCSR_DEFAULT 0x1f80
i387_fsave_struct  struct  arch/x86/include/asm/processor.h  290  struct i387_fsave_struct { u32 cwd; u32 swd; u32 twd; u32 fip; u32 fcs; u32 foo; u32 fos; u32 st_space[20]; u32 status; };
i387_fxsave_struct  struct  arch/x86/include/asm/processor.h  306  struct i387_fxsave_struct { u16 cwd; u16 swd; u16 twd; u16 fop; union { u64 rip; u64 rdp; }; u32 fip; u32 fcs; u32 foo; u32 fos; }; u32 mxcsr; u32 mxcsr_mask; u32 st_space[32]; u32 xmm_space[64]; u32 padding[12]; union { u32 padding1[12]; u32 sw_reserved[12]; }; } __attribute__((aligned(16)));
i387_soft_struct  struct  arch/x86/include/asm/processor.h  341  struct i387_soft_struct { u32 cwd; u32 swd; u32 twd; u32 fip; u32 fcs; u32 foo; u32 fos; u32 st_space[20]; u8 ftop; u8 changed; u8 lookahead; u8 no_update; u8 rm; u8 alimit; struct math_emu_info *info; u32 entry_eip; };
ymmh_struct  struct  arch/x86/include/asm/processor.h  361  struct ymmh_struct { u32 ymmh_space[64]; };
xsave_hdr_struct  struct  arch/x86/include/asm/processor.h  366  struct xsave_hdr_struct { u64 xstate_bv; u64 reserved1[2]; u64 reserved2[5]; } __attribute__((packed));
xsave_struct  struct  arch/x86/include/asm/processor.h  372  struct xsave_struct { struct i387_fxsave_struct i387; struct xsave_hdr_struct xsave_hdr; struct ymmh_struct ymmh; } __attribute__ ((packed, aligned (64)));
thread_xstate  union  arch/x86/include/asm/processor.h  379  union thread_xstate { struct i387_fsave_struct fsave; struct i387_fxsave_struct fxsave; struct i387_soft_struct soft; struct xsave_struct xsave; };
fpu  struct  arch/x86/include/asm/processor.h  386  struct fpu { unsigned int last_cpu; unsigned int has_fpu; union thread_xstate *state; };
irq_stack_union  union  arch/x86/include/asm/processor.h  395  union irq_stack_union { char irq_stack[IRQ_STACK_SIZE]; char gs_base[40]; unsigned long stack_canary; };
ignore_sysret  prototype  arch/x86/include/asm/processor.h  414  extern asmlinkage void ignore_sysret(void);
stack_canary  struct  arch/x86/include/asm/processor.h  423  struct stack_canary { char __pad[20]; unsigned long canary; };
free_thread_xstate  prototype  arch/x86/include/asm/processor.h  432  extern void free_thread_xstate(struct task_struct *);
thread_struct  struct  arch/x86/include/asm/processor.h  437  struct thread_struct { struct desc_struct tls_array[GDT_ENTRY_TLS_ENTRIES]; unsigned long sp0; unsigned long sp; unsigned long sysenter_cs; unsigned long usersp; unsigned short es; unsigned short ds; unsigned short fsindex; unsigned short gsindex; unsigned long ip; unsigned long fs; unsigned long gs; struct perf_event *ptrace_bps[HBP_NUM]; unsigned long debugreg6; unsigned long ptrace_dr7; unsigned long cr2; unsigned long trap_nr; unsigned long error_code; struct fpu fpu; struct vm86_struct __user *vm86_info; unsigned long screen_bitmap; unsigned long v86flags; unsigned long v86mask; unsigned long saved_sp0; unsigned int saved_fs; unsigned int saved_gs; unsigned long *io_bitmap_ptr; unsigned long iopl; unsigned io_bitmap_max; };
native_set_iopl_mask  function  arch/x86/include/asm/processor.h  490  static inline void native_set_iopl_mask(unsigned mask)
native_load_sp0  function  arch/x86/include/asm/processor.h  507  native_load_sp0(struct tss_struct *tss,struct thread_struct *thread)
native_swapgs  function  arch/x86/include/asm/processor.h  519  static inline void native_swapgs(void)
__cpuid  function  arch/x86/include/asm/paravirt.h  29  static inline void __cpuid(unsigned int *eax,unsigned int *ebx,unsigned int *ecx, unsigned int *edx)
paravirt_enabled  function  arch/x86/include/asm/paravirt.h  17  static inline int paravirt_enabled(void)
load_sp0  function  arch/x86/include/asm/paravirt.h  22  static inline void load_sp0(struct tss_struct *tss,struct thread_struct *thread)
set_iopl_mask  function  arch/x86/include/asm/paravirt.h  343  static inline void set_iopl_mask(unsigned mask)
set_in_cr4  function  arch/x86/include/asm/processor.h  550  static inline void set_in_cr4(unsigned long mask)
clear_in_cr4  function  arch/x86/include/asm/processor.h  562  static inline void clear_in_cr4(unsigned long mask)
mm_segment_t  struct  arch/x86/include/asm/processor.h  574  typedef struct { unsigned long seg; } mm_segment_t;
kernel_thread  prototype  arch/x86/include/asm/processor.h  582  extern int kernel_thread(int (*fn)(void *),void *arg,unsigned long flags);
release_thread  prototype  arch/x86/include/asm/processor.h  585  extern void release_thread(struct task_struct *);
get_wchan  prototype  arch/x86/include/asm/processor.h  587  unsigned long get_wchan(struct task_struct *p);
cpuid  function  arch/x86/include/asm/processor.h  594  static inline void cpuid(unsigned int op,unsigned int *eax, unsigned int *ebx,unsigned int *ecx, unsigned int *edx)
cpuid_count  function  arch/x86/include/asm/processor.h  604  static inline void cpuid_count(unsigned int op,int count,unsigned int *eax, unsigned int *ebx,unsigned int *ecx, unsigned int *edx)
cpuid_eax  function  arch/x86/include/asm/processor.h  616  static inline unsigned int cpuid_eax(unsigned int op)
cpuid_ebx  function  arch/x86/include/asm/processor.h  625  static inline unsigned int cpuid_ebx(unsigned int op)
cpuid_ecx  function  arch/x86/include/asm/processor.h  634  static inline unsigned int cpuid_ecx(unsigned int op)
cpuid_edx  function  arch/x86/include/asm/processor.h  643  static inline unsigned int cpuid_edx(unsigned int op)
rep_nop  function  arch/x86/include/asm/processor.h  653  static inline void rep_nop(void)
cpu_relax  function  arch/x86/include/asm/processor.h  658  static inline void cpu_relax(void)
sync_core  function  arch/x86/include/asm/processor.h  664  static inline void sync_core(void)
__monitor  function  arch/x86/include/asm/processor.h  682  static inline void __monitor(const void *eax,unsigned long ecx,unsigned long edx)
__mwait  function  arch/x86/include/asm/processor.h  690  static inline void __mwait(unsigned long eax,unsigned long ecx)
__sti_mwait  function  arch/x86/include/asm/processor.h  697  static inline void __sti_mwait(unsigned long eax,unsigned long ecx)
select_idle_routine  prototype  arch/x86/include/asm/processor.h  705  extern void select_idle_routine(const struct cpuinfo_x86 *c);
init_amd_e400_c1e_mask  prototype  arch/x86/include/asm/processor.h  706  extern void init_amd_e400_c1e_mask(void);
idle_boot_override  enum  arch/x86/include/asm/processor.h  711  enum idle_boot_override {IDLE_NO_OVERRIDE=0, IDLE_HALT, IDLE_NOMWAIT, IDLE_POLL, IDLE_FORCE_MWAIT};
enable_sep_cpu  prototype  arch/x86/include/asm/processor.h  714  extern void enable_sep_cpu(void);
sysenter_setup  prototype  arch/x86/include/asm/processor.h  715  extern int sysenter_setup(void);
early_trap_init  prototype  arch/x86/include/asm/processor.h  717  extern void early_trap_init(void);
cpu_set_gdt  prototype  arch/x86/include/asm/processor.h  722  extern void cpu_set_gdt(int);
switch_to_new_gdt  prototype  arch/x86/include/asm/processor.h  723  extern void switch_to_new_gdt(int);
load_percpu_segment  prototype  arch/x86/include/asm/processor.h  724  extern void load_percpu_segment(int);
get_debugctlmsr  function  arch/x86/include/asm/processor.h  727  static inline unsigned long get_debugctlmsr(void)
update_debugctlmsr  function  arch/x86/include/asm/processor.h  740  static inline void update_debugctlmsr(unsigned long debugctlmsr)
HAVE_ARCH_PICK_MMAP_LAYOUT  macro  arch/x86/include/asm/processor.h  763  #define HAVE_ARCH_PICK_MMAP_LAYOUT 1
ARCH_HAS_PREFETCHW  macro  arch/x86/include/asm/processor.h  764  #define ARCH_HAS_PREFETCHW
ARCH_HAS_SPINLOCK_PREFETCH  macro  arch/x86/include/asm/processor.h  765  #define ARCH_HAS_SPINLOCK_PREFETCH
BASE_PREFETCH  macro  arch/x86/include/asm/processor.h  771  # define BASE_PREFETCH "prefetcht0 (%1)"
ARCH_HAS_PREFETCH  macro  arch/x86/include/asm/processor.h  769  # define ARCH_HAS_PREFETCH
prefetch  function  arch/x86/include/asm/processor.h  780  static inline void prefetch(const void *x)
prefetchw  function  arch/x86/include/asm/processor.h  793  static inline void prefetchw(const void *x)
spin_lock_prefetch  function  arch/x86/include/asm/processor.h  801  static inline void spin_lock_prefetch(const void *x)
TASK_SIZE  macro  arch/x86/include/asm/processor.h  878  #define TASK_SIZE (test_thread_flag(TIF_ADDR32) ? IA32_PAGE_OFFSET : TASK_SIZE_MAX)
TASK_SIZE_MAX  macro  arch/x86/include/asm/processor.h  870  #define TASK_SIZE_MAX ((1UL << 47) - PAGE_SIZE)
STACK_TOP  macro  arch/x86/include/asm/processor.h  883  #define STACK_TOP TASK_SIZE
STACK_TOP_MAX  macro  arch/x86/include/asm/processor.h  884  #define STACK_TOP_MAX TASK_SIZE_MAX
INIT_THREAD  macro  arch/x86/include/asm/processor.h  886  #define INIT_THREAD { .sp0 = (unsigned long)&init_stack + sizeof(init_stack) }
INIT_TSS  macro  arch/x86/include/asm/processor.h  890  #define INIT_TSS { .x86_tss.sp0 = (unsigned long)&init_stack + sizeof(init_stack) }
thread_saved_pc  macro  arch/x86/include/asm/processor.h  898  #define thread_saved_pc(t) (*(unsigned long *)((t)->thread.sp - 8))
THREAD_SIZE_LONGS  macro  arch/x86/include/asm/processor.h  840  #define THREAD_SIZE_LONGS (THREAD_SIZE/sizeof(unsigned long))
KSTK_TOP  macro  arch/x86/include/asm/processor.h  841  #define KSTK_TOP(info) ({ unsigned long *__ptr = (unsigned long *)(info); (unsigned long)(&__ptr[THREAD_SIZE_LONGS]); })
task_pt_regs  macro  arch/x86/include/asm/processor.h  900  #define task_pt_regs(tsk) ((struct pt_regs *)(tsk)->thread.sp0 - 1)
KSTK_ESP  prototype  arch/x86/include/asm/processor.h  901  extern unsigned long KSTK_ESP(struct task_struct *task);
IA32_PAGE_OFFSET  macro  arch/x86/include/asm/processor.h  875  #define IA32_PAGE_OFFSET ((current->personality & ADDR_LIMIT_3GB) ? 0xc0000000 : 0xFFFFe000)
start_thread  prototype  arch/x86/include/asm/processor.h  910  extern void start_thread(struct pt_regs *regs,unsigned long new_ip,unsigned long new_sp);
TASK_UNMAPPED_BASE  macro  arch/x86/include/asm/processor.h  917  #define TASK_UNMAPPED_BASE (PAGE_ALIGN(TASK_SIZE / 3))
KSTK_EIP  macro  arch/x86/include/asm/processor.h  919  #define KSTK_EIP(task) (task_pt_regs(task)->ip)
GET_TSC_CTL  macro  arch/x86/include/asm/processor.h  922  #define GET_TSC_CTL(adr) get_tsc_mode((adr))
SET_TSC_CTL  macro  arch/x86/include/asm/processor.h  923  #define SET_TSC_CTL(val) set_tsc_mode((val))
get_tsc_mode  prototype  arch/x86/include/asm/processor.h  925  extern int get_tsc_mode(unsigned long adr);
set_tsc_mode  prototype  arch/x86/include/asm/processor.h  926  extern int set_tsc_mode(unsigned int val);
amd_get_nb_id  prototype  arch/x86/include/asm/processor.h  928  extern int amd_get_nb_id(int cpu);
aperfmperf  struct  arch/x86/include/asm/processor.h  930  struct aperfmperf { u64 aperf, mperf; };
get_aperfmperf  function  arch/x86/include/asm/processor.h  934  static inline void get_aperfmperf(struct aperfmperf *am)
APERFMPERF_SHIFT  macro  arch/x86/include/asm/processor.h  942  #define APERFMPERF_SHIFT 10
calc_aperfmperf_ratio  function  arch/x86/include/asm/processor.h  945  unsigned long calc_aperfmperf_ratio(struct aperfmperf *old,struct aperfmperf *new)
cpu_has_amd_erratum  macro  arch/x86/include/asm/processor.h  976  #define cpu_has_amd_erratum(x) (false)
AMD_LEGACY_ERRATUM  macro  arch/x86/include/asm/processor.h  967  #define AMD_LEGACY_ERRATUM(...) { -1,__VA_ARGS__,0 }
AMD_OSVW_ERRATUM  macro  arch/x86/include/asm/processor.h  968  #define AMD_OSVW_ERRATUM(osvw_id,...) { osvw_id,__VA_ARGS__,0 }
AMD_MODEL_RANGE  macro  arch/x86/include/asm/processor.h  969  #define AMD_MODEL_RANGE(f,m_start,s_start,m_end,s_end) ((f << 24) | (m_start << 16) | (s_start << 12) | (m_end << 4) | (s_end))
AMD_MODEL_RANGE_FAMILY  macro  arch/x86/include/asm/processor.h  971  #define AMD_MODEL_RANGE_FAMILY(range) (((range) >> 24) & 0xff)
AMD_MODEL_RANGE_START  macro  arch/x86/include/asm/processor.h  972  #define AMD_MODEL_RANGE_START(range) (((range) >> 12) & 0xfff)
AMD_MODEL_RANGE_END  macro  arch/x86/include/asm/processor.h  973  #define AMD_MODEL_RANGE_END(range) ((range) & 0xfff)
arch_align_stack  prototype  arch/x86/include/asm/processor.h  979  extern unsigned long arch_align_stack(unsigned long sp);
free_init_pages  prototype  arch/x86/include/asm/processor.h  980  extern void free_init_pages(char *what,unsigned long begin,unsigned long end);
default_idle  prototype  arch/x86/include/asm/processor.h  982  void default_idle(void);
set_pm_idle_to_default  prototype  arch/x86/include/asm/processor.h  983  bool set_pm_idle_to_default(void);
stop_this_cpu  prototype  arch/x86/include/asm/processor.h  985  void stop_this_cpu(void *dummy);
__LINUX__AIO_H  macro  include/linux/aio.h  2  #define __LINUX__AIO_H
AIO_MAXSEGS  macro  include/linux/aio.h  12  #define AIO_MAXSEGS 4
AIO_KIOGRP_NR_ATOMIC  macro  include/linux/aio.h  13  #define AIO_KIOGRP_NR_ATOMIC 8
KIOCB_C_CANCELLED  macro  include/linux/aio.h  23  #define KIOCB_C_CANCELLED 0x01
KIOCB_C_COMPLETE  macro  include/linux/aio.h  24  #define KIOCB_C_COMPLETE 0x02
KIOCB_SYNC_KEY  macro  include/linux/aio.h  26  #define KIOCB_SYNC_KEY (~0U)
KIF_KICKED  macro  include/linux/aio.h  35  #define KIF_KICKED 1
KIF_CANCELLED  macro  include/linux/aio.h  36  #define KIF_CANCELLED 2
kiocbTryLock  macro  include/linux/aio.h  38  #define kiocbTryLock(iocb) test_and_set_bit(KIF_LOCKED,&(iocb)->ki_flags)
kiocbTryKick  macro  include/linux/aio.h  39  #define kiocbTryKick(iocb) test_and_set_bit(KIF_KICKED,&(iocb)->ki_flags)
kiocbSetLocked  macro  include/linux/aio.h  41  #define kiocbSetLocked(iocb) set_bit(KIF_LOCKED,&(iocb)->ki_flags)
kiocbSetKicked  macro  include/linux/aio.h  42  #define kiocbSetKicked(iocb) set_bit(KIF_KICKED,&(iocb)->ki_flags)
kiocbSetCancelled  macro  include/linux/aio.h  43  #define kiocbSetCancelled(iocb) set_bit(KIF_CANCELLED,&(iocb)->ki_flags)
kiocbClearLocked  macro  include/linux/aio.h  45  #define kiocbClearLocked(iocb) clear_bit(KIF_LOCKED,&(iocb)->ki_flags)
kiocbClearKicked  macro  include/linux/aio.h  46  #define kiocbClearKicked(iocb) clear_bit(KIF_KICKED,&(iocb)->ki_flags)
kiocbClearCancelled  macro  include/linux/aio.h  47  #define kiocbClearCancelled(iocb) clear_bit(KIF_CANCELLED,&(iocb)->ki_flags)
kiocbIsLocked  macro  include/linux/aio.h  49  #define kiocbIsLocked(iocb) test_bit(KIF_LOCKED,&(iocb)->ki_flags)
kiocbIsKicked  macro  include/linux/aio.h  50  #define kiocbIsKicked(iocb) test_bit(KIF_KICKED,&(iocb)->ki_flags)
kiocbIsCancelled  macro  include/linux/aio.h  51  #define kiocbIsCancelled(iocb) test_bit(KIF_CANCELLED,&(iocb)->ki_flags)
kiocb  struct  include/linux/aio.h  87  struct kiocb { struct list_head ki_run_list; unsigned long ki_flags; int ki_users; unsigned ki_key; struct file *ki_filp; struct kioctx *ki_ctx; int (*ki_cancel)(struct kiocb *, struct io_event *); ssize_t (*ki_retry)(struct kiocb *); void (*ki_dtor)(struct kiocb *); union { void __user *user; struct task_struct *tsk; } ki_obj; __u64 ki_user_data; loff_t ki_pos; unsigned short ki_opcode; size_t ki_nbytes; char __user *ki_buf; size_t ki_left; struct iovec ki_inline_vec; struct iovec *ki_iovec; unsigned long ki_nr_segs; unsigned long ki_cur_seg; struct list_head ki_list; struct list_head ki_batch; struct eventfd_ctx *ki_eventfd; };
is_sync_kiocb  macro  include/linux/aio.h  129  #define is_sync_kiocb(iocb) ((iocb)->ki_key == KIOCB_SYNC_KEY)
init_sync_kiocb  macro  include/linux/aio.h  130  #define init_sync_kiocb(x,filp) do { struct task_struct *tsk = current; (x)->ki_flags = 0; (x)->ki_users = 1; (x)->ki_key = KIOCB_SYNC_KEY; (x)->ki_filp = (filp); (x)->ki_ctx = NULL; (x)->ki_cancel = NULL; (x)->ki_retry = NULL; (x)->ki_dtor = NULL; (x)->ki_obj.tsk = tsk; (x)->ki_user_data = 0; (x)->private = NULL; } while (0)
AIO_RING_MAGIC  macro  include/linux/aio.h  146  #define AIO_RING_MAGIC 0xa10a10a1
AIO_RING_COMPAT_FEATURES  macro  include/linux/aio.h  147  #define AIO_RING_COMPAT_FEATURES 1
AIO_RING_INCOMPAT_FEATURES  macro  include/linux/aio.h  148  #define AIO_RING_INCOMPAT_FEATURES 0
aio_ring  struct  include/linux/aio.h  149  struct aio_ring { unsigned id; unsigned nr; unsigned head; unsigned tail; unsigned magic; unsigned compat_features; unsigned incompat_features; unsigned header_length; struct io_event io_events[0]; };
aio_ring_avail  macro  include/linux/aio.h  164  #define aio_ring_avail(info,ring) (((ring)->head + (info)->nr - 1 - (ring)->tail) % (info)->nr)
AIO_RING_PAGES  macro  include/linux/aio.h  166  #define AIO_RING_PAGES 8
aio_ring_info  struct  include/linux/aio.h  167  struct aio_ring_info { unsigned long mmap_base; unsigned long mmap_size; struct page **ring_pages; spinlock_t ring_lock; long nr_pages; unsigned nr, tail; struct page *internal_pages[AIO_RING_PAGES]; };
kioctx  struct  include/linux/aio.h  180  struct kioctx { atomic_t users; int dead; struct mm_struct *mm; unsigned long user_id; struct hlist_node list; wait_queue_head_t wait; spinlock_t ctx_lock; int reqs_active; struct list_head active_reqs; struct list_head run_list; unsigned max_reqs; struct aio_ring_info ring_info; struct delayed_work wq; struct rcu_head rcu_head; };
wait_on_sync_kiocb  function  include/linux/aio.h  220  static inline ssize_t wait_on_sync_kiocb(struct kiocb *iocb) { return 0; }
aio_put_req  function  include/linux/aio.h  221  static inline int aio_put_req(struct kiocb *iocb) { return 0; }
kick_iocb  function  include/linux/aio.h  222  static inline void kick_iocb(struct kiocb *iocb) { }
aio_complete  function  include/linux/aio.h  223  static inline int aio_complete(struct kiocb *iocb,long res,long res2) { return 0; }
exit_aio  function  include/linux/aio.h  225  static inline void exit_aio(struct mm_struct *mm) { }
do_io_submit  function  include/linux/aio.h  226  static inline long do_io_submit(aio_context_t ctx_id,long nr,struct iocb __user * __user *iocbpp,bool compat) { return 0; }
list_kiocb  function  include/linux/aio.h  231  static inline struct kiocb *list_kiocb(struct list_head *h)
_LINUX_RWSEM_H  macro  include/linux/rwsem.h  8  #define _LINUX_RWSEM_H
rw_semaphore  struct  include/linux/rwsem-spinlock.h  23  struct rw_semaphore { __s32 activity; raw_spinlock_t wait_lock; struct list_head wait_list; struct lockdep_map dep_map; };
rwsem_down_read_failed  prototype  include/linux/rwsem.h  34  extern struct rw_semaphore *rwsem_down_read_failed(struct rw_semaphore *sem);
rwsem_down_write_failed  prototype  include/linux/rwsem.h  35  extern struct rw_semaphore *rwsem_down_write_failed(struct rw_semaphore *sem);
rwsem_wake  prototype  include/linux/rwsem.h  36  extern struct rw_semaphore *rwsem_wake(struct rw_semaphore *);
rwsem_downgrade_wake  prototype  include/linux/rwsem.h  37  extern struct rw_semaphore *rwsem_downgrade_wake(struct rw_semaphore *sem);
rwsem_is_locked  prototype  include/linux/rwsem-spinlock.h  42  extern int rwsem_is_locked(struct rw_semaphore *sem);
__RWSEM_DEP_MAP_INIT  macro  include/linux/rwsem.h  55  # define __RWSEM_DEP_MAP_INIT(lockname)
__RWSEM_INITIALIZER  macro  include/linux/rwsem.h  58  #define __RWSEM_INITIALIZER(name) { RWSEM_UNLOCKED_VALUE, __RAW_SPIN_LOCK_UNLOCKED(name.wait_lock), LIST_HEAD_INIT((name).wait_list) __RWSEM_DEP_MAP_INIT(name) }
DECLARE_RWSEM  macro  include/linux/rwsem.h  64  #define DECLARE_RWSEM(name) struct rw_semaphore name = __RWSEM_INITIALIZER(name)
__init_rwsem  prototype  include/linux/rwsem.h  67  extern void __init_rwsem(struct rw_semaphore *sem,const char *name,struct lock_class_key *key);
init_rwsem  macro  include/linux/rwsem.h  70  #define init_rwsem(sem) do { static struct lock_class_key __key; __init_rwsem((sem), #sem, &__key); } while (0)
down_read  prototype  include/linux/rwsem.h  80  extern void down_read(struct rw_semaphore *sem);
down_read_trylock  prototype  include/linux/rwsem.h  85  extern int down_read_trylock(struct rw_semaphore *sem);
down_write  prototype  include/linux/rwsem.h  90  extern void down_write(struct rw_semaphore *sem);
down_write_trylock  prototype  include/linux/rwsem.h  95  extern int down_write_trylock(struct rw_semaphore *sem);
up_read  prototype  include/linux/rwsem.h  100  extern void up_read(struct rw_semaphore *sem);
up_write  prototype  include/linux/rwsem.h  105  extern void up_write(struct rw_semaphore *sem);
downgrade_write  prototype  include/linux/rwsem.h  110  extern void downgrade_write(struct rw_semaphore *sem);
down_read_nested  macro  include/linux/rwsem.h  129  # define down_read_nested(sem,subclass) down_read(sem)
down_write_nested  macro  include/linux/rwsem.h  130  # define down_write_nested(sem,subclass) down_write(sem)
_ASM_X86_CURRENT_H  macro  arch/x86/include/asm/current.h  2  #define _ASM_X86_CURRENT_H
get_current  function  arch/x86/include/asm/current.h  12  static __always_inline struct task_struct *get_current(void)
current  macro  arch/x86/include/asm/current.h  17  #define current get_current()
__LINUX_GFP_H  macro  include/linux/gfp.h  2  #define __LINUX_GFP_H
___GFP_DMA  macro  include/linux/gfp.h  13  #define ___GFP_DMA 0x01u
___GFP_HIGHMEM  macro  include/linux/gfp.h  14  #define ___GFP_HIGHMEM 0x02u
___GFP_DMA32  macro  include/linux/gfp.h  15  #define ___GFP_DMA32 0x04u
___GFP_MOVABLE  macro  include/linux/gfp.h  16  #define ___GFP_MOVABLE 0x08u
___GFP_WAIT  macro  include/linux/gfp.h  17  #define ___GFP_WAIT 0x10u
___GFP_HIGH  macro  include/linux/gfp.h  18  #define ___GFP_HIGH 0x20u
___GFP_IO  macro  include/linux/gfp.h  19  #define ___GFP_IO 0x40u
___GFP_FS  macro  include/linux/gfp.h  20  #define ___GFP_FS 0x80u
___GFP_COLD  macro  include/linux/gfp.h  21  #define ___GFP_COLD 0x100u
___GFP_NOWARN  macro  include/linux/gfp.h  22  #define ___GFP_NOWARN 0x200u
___GFP_REPEAT  macro  include/linux/gfp.h  23  #define ___GFP_REPEAT 0x400u
___GFP_NOFAIL  macro  include/linux/gfp.h  24  #define ___GFP_NOFAIL 0x800u
___GFP_NORETRY  macro  include/linux/gfp.h  25  #define ___GFP_NORETRY 0x1000u
___GFP_COMP  macro  include/linux/gfp.h  26  #define ___GFP_COMP 0x4000u
___GFP_ZERO  macro  include/linux/gfp.h  27  #define ___GFP_ZERO 0x8000u
___GFP_NOMEMALLOC  macro  include/linux/gfp.h  28  #define ___GFP_NOMEMALLOC 0x10000u
___GFP_HARDWALL  macro  include/linux/gfp.h  29  #define ___GFP_HARDWALL 0x20000u
___GFP_THISNODE  macro  include/linux/gfp.h  30  #define ___GFP_THISNODE 0x40000u
___GFP_RECLAIMABLE  macro  include/linux/gfp.h  31  #define ___GFP_RECLAIMABLE 0x80000u
___GFP_NOTRACK  macro  include/linux/gfp.h  35  #define ___GFP_NOTRACK 0
___GFP_NO_KSWAPD  macro  include/linux/gfp.h  37  #define ___GFP_NO_KSWAPD 0x400000u
___GFP_OTHER_NODE  macro  include/linux/gfp.h  38  #define ___GFP_OTHER_NODE 0x800000u
___GFP_WRITE  macro  include/linux/gfp.h  39  #define ___GFP_WRITE 0x1000000u
__GFP_DMA  macro  include/linux/gfp.h  50  #define __GFP_DMA ((__force gfp_t)___GFP_DMA)
__GFP_HIGHMEM  macro  include/linux/gfp.h  51  #define __GFP_HIGHMEM ((__force gfp_t)___GFP_HIGHMEM)
__GFP_DMA32  macro  include/linux/gfp.h  52  #define __GFP_DMA32 ((__force gfp_t)___GFP_DMA32)
__GFP_MOVABLE  macro  include/linux/gfp.h  53  #define __GFP_MOVABLE ((__force gfp_t)___GFP_MOVABLE)
GFP_ZONEMASK  macro  include/linux/gfp.h  54  #define GFP_ZONEMASK (__GFP_DMA|__GFP_HIGHMEM|__GFP_DMA32|__GFP_MOVABLE)
__GFP_WAIT  macro  include/linux/gfp.h  70  #define __GFP_WAIT ((__force gfp_t)___GFP_WAIT)
__GFP_HIGH  macro  include/linux/gfp.h  71  #define __GFP_HIGH ((__force gfp_t)___GFP_HIGH)
__GFP_IO  macro  include/linux/gfp.h  72  #define __GFP_IO ((__force gfp_t)___GFP_IO)
__GFP_FS  macro  include/linux/gfp.h  73  #define __GFP_FS ((__force gfp_t)___GFP_FS)
__GFP_COLD  macro  include/linux/gfp.h  74  #define __GFP_COLD ((__force gfp_t)___GFP_COLD)
__GFP_NOWARN  macro  include/linux/gfp.h  75  #define __GFP_NOWARN ((__force gfp_t)___GFP_NOWARN)
__GFP_REPEAT  macro  include/linux/gfp.h  76  #define __GFP_REPEAT ((__force gfp_t)___GFP_REPEAT)
__GFP_NOFAIL  macro  include/linux/gfp.h  77  #define __GFP_NOFAIL ((__force gfp_t)___GFP_NOFAIL)
__GFP_NORETRY  macro  include/linux/gfp.h  78  #define __GFP_NORETRY ((__force gfp_t)___GFP_NORETRY)
__GFP_COMP  macro  include/linux/gfp.h  79  #define __GFP_COMP ((__force gfp_t)___GFP_COMP)
__GFP_ZERO  macro  include/linux/gfp.h  80  #define __GFP_ZERO ((__force gfp_t)___GFP_ZERO)
__GFP_NOMEMALLOC  macro  include/linux/gfp.h  81  #define __GFP_NOMEMALLOC ((__force gfp_t)___GFP_NOMEMALLOC)
__GFP_HARDWALL  macro  include/linux/gfp.h  82  #define __GFP_HARDWALL ((__force gfp_t)___GFP_HARDWALL)
__GFP_THISNODE  macro  include/linux/gfp.h  83  #define __GFP_THISNODE ((__force gfp_t)___GFP_THISNODE)
__GFP_RECLAIMABLE  macro  include/linux/gfp.h  84  #define __GFP_RECLAIMABLE ((__force gfp_t)___GFP_RECLAIMABLE)
__GFP_NOTRACK  macro  include/linux/gfp.h  85  #define __GFP_NOTRACK ((__force gfp_t)___GFP_NOTRACK)
__GFP_NO_KSWAPD  macro  include/linux/gfp.h  87  #define __GFP_NO_KSWAPD ((__force gfp_t)___GFP_NO_KSWAPD)
__GFP_OTHER_NODE  macro  include/linux/gfp.h  88  #define __GFP_OTHER_NODE ((__force gfp_t)___GFP_OTHER_NODE)
__GFP_WRITE  macro  include/linux/gfp.h  89  #define __GFP_WRITE ((__force gfp_t)___GFP_WRITE)
__GFP_NOTRACK_FALSE_POSITIVE  macro  include/linux/gfp.h  95  #define __GFP_NOTRACK_FALSE_POSITIVE (__GFP_NOTRACK)
__GFP_BITS_SHIFT  macro  include/linux/gfp.h  97  #define __GFP_BITS_SHIFT 25
__GFP_BITS_MASK  macro  include/linux/gfp.h  98  #define __GFP_BITS_MASK ((__force gfp_t)((1 << __GFP_BITS_SHIFT) - 1))
GFP_NOWAIT  macro  include/linux/gfp.h  101  #define GFP_NOWAIT (GFP_ATOMIC & ~__GFP_HIGH)
GFP_ATOMIC  macro  include/linux/gfp.h  103  #define GFP_ATOMIC (__GFP_HIGH)
GFP_NOIO  macro  include/linux/gfp.h  104  #define GFP_NOIO (__GFP_WAIT)
GFP_NOFS  macro  include/linux/gfp.h  105  #define GFP_NOFS (__GFP_WAIT | __GFP_IO)
GFP_KERNEL  macro  include/linux/gfp.h  106  #define GFP_KERNEL (__GFP_WAIT | __GFP_IO | __GFP_FS)
GFP_TEMPORARY  macro  include/linux/gfp.h  107  #define GFP_TEMPORARY (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_RECLAIMABLE)
GFP_USER  macro  include/linux/gfp.h  109  #define GFP_USER (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL)
GFP_HIGHUSER  macro  include/linux/gfp.h  110  #define GFP_HIGHUSER (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL | __GFP_HIGHMEM)
GFP_HIGHUSER_MOVABLE  macro  include/linux/gfp.h  112  #define GFP_HIGHUSER_MOVABLE (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL | __GFP_HIGHMEM | __GFP_MOVABLE)
GFP_IOFS  macro  include/linux/gfp.h  115  #define GFP_IOFS (__GFP_IO | __GFP_FS)
GFP_TRANSHUGE  macro  include/linux/gfp.h  116  #define GFP_TRANSHUGE (GFP_HIGHUSER_MOVABLE | __GFP_COMP | __GFP_NOMEMALLOC | __GFP_NORETRY | __GFP_NOWARN | __GFP_NO_KSWAPD)
GFP_THISNODE  macro  include/linux/gfp.h  123  #define GFP_THISNODE ((__force gfp_t)0)
GFP_MOVABLE_MASK  macro  include/linux/gfp.h  127  #define GFP_MOVABLE_MASK (__GFP_RECLAIMABLE|__GFP_MOVABLE)
GFP_RECLAIM_MASK  macro  include/linux/gfp.h  130  #define GFP_RECLAIM_MASK (__GFP_WAIT|__GFP_HIGH|__GFP_IO|__GFP_FS| __GFP_NOWARN|__GFP_REPEAT|__GFP_NOFAIL| __GFP_NORETRY|__GFP_NOMEMALLOC)
GFP_BOOT_MASK  macro  include/linux/gfp.h  135  #define GFP_BOOT_MASK (__GFP_BITS_MASK & ~(__GFP_WAIT|__GFP_IO|__GFP_FS))
GFP_CONSTRAINT_MASK  macro  include/linux/gfp.h  138  #define GFP_CONSTRAINT_MASK (__GFP_HARDWALL|__GFP_THISNODE)
GFP_SLAB_BUG_MASK  macro  include/linux/gfp.h  141  #define GFP_SLAB_BUG_MASK (__GFP_DMA32|__GFP_HIGHMEM|~__GFP_BITS_MASK)
GFP_DMA  macro  include/linux/gfp.h  146  #define GFP_DMA __GFP_DMA
GFP_DMA32  macro  include/linux/gfp.h  149  #define GFP_DMA32 __GFP_DMA32
allocflags_to_migratetype  function  include/linux/gfp.h  152  static inline int allocflags_to_migratetype(gfp_t gfp_flags)
OPT_ZONE_HIGHMEM  macro  include/linux/gfp.h  167  #define OPT_ZONE_HIGHMEM ZONE_NORMAL
OPT_ZONE_DMA  macro  include/linux/gfp.h  173  #define OPT_ZONE_DMA ZONE_NORMAL
OPT_ZONE_DMA32  macro  include/linux/gfp.h  179  #define OPT_ZONE_DMA32 ZONE_NORMAL
GFP_ZONE_TABLE  macro  include/linux/gfp.h  219  #define GFP_ZONE_TABLE ( (ZONE_NORMAL << 0 * ZONES_SHIFT) | (OPT_ZONE_DMA << ___GFP_DMA * ZONES_SHIFT) | (OPT_ZONE_HIGHMEM << ___GFP_HIGHMEM * ZONES_SHIFT) | (OPT_ZONE_DMA32 << ___GFP_DMA32 * ZONES_SHIFT) | (ZONE_NORMAL << ___GFP_MOVABLE * ZONES_SHIFT) | (OPT_ZONE_DMA << (___GFP_MOVABLE | ___GFP_DMA) * ZONES_SHIFT) | (ZONE_MOVABLE << (___GFP_MOVABLE | ___GFP_HIGHMEM) * ZONES_SHIFT) | (OPT_ZONE_DMA32 << (___GFP_MOVABLE | ___GFP_DMA32) * ZONES_SHIFT) )
GFP_ZONE_BAD  macro  include/linux/gfp.h  236  #define GFP_ZONE_BAD ( 1 << (___GFP_DMA | ___GFP_HIGHMEM) | 1 << (___GFP_DMA | ___GFP_DMA32) | 1 << (___GFP_DMA32 | ___GFP_HIGHMEM) | 1 << (___GFP_DMA | ___GFP_DMA32 | ___GFP_HIGHMEM) | 1 << (___GFP_MOVABLE | ___GFP_HIGHMEM | ___GFP_DMA) | 1 << (___GFP_MOVABLE | ___GFP_DMA32 | ___GFP_DMA) | 1 << (___GFP_MOVABLE | ___GFP_DMA32 | ___GFP_HIGHMEM) | 1 << (___GFP_MOVABLE | ___GFP_DMA32 | ___GFP_DMA | ___GFP_HIGHMEM) )
gfp_zone  function  include/linux/gfp.h  247  static inline enum zone_type gfp_zone(gfp_t flags)
gfp_zonelist  function  include/linux/gfp.h  265  static inline int gfp_zonelist(gfp_t flags)
node_zonelist  function  include/linux/gfp.h  282  static inline struct zonelist *node_zonelist(int nid,gfp_t flags)
arch_free_page  function  include/linux/gfp.h  288  static inline void arch_free_page(struct page *page,int order) { }
arch_alloc_page  function  include/linux/gfp.h  291  static inline void arch_alloc_page(struct page *page,int order) { }
__alloc_pages_nodemask  prototype  include/linux/gfp.h  295  __alloc_pages_nodemask(gfp_t gfp_mask,unsigned int order,struct zonelist *zonelist, nodemask_t *nodemask);
__alloc_pages  function  include/linux/gfp.h  299  __alloc_pages(gfp_t gfp_mask,unsigned int order,struct zonelist *zonelist)
alloc_pages_node  function  include/linux/gfp.h  305  static inline struct page *alloc_pages_node(int nid,gfp_t gfp_mask,unsigned int order)
alloc_pages_exact_node  function  include/linux/gfp.h  315  static inline struct page *alloc_pages_exact_node(int nid,gfp_t gfp_mask,unsigned int order)
alloc_pages_current  prototype  include/linux/gfp.h  324  extern struct page *alloc_pages_current(gfp_t gfp_mask,unsigned order);
alloc_pages  macro  include/linux/gfp.h  335  #define alloc_pages(gfp_mask,order) alloc_pages_node(numa_node_id(), gfp_mask, order)
alloc_pages_vma  macro  include/linux/gfp.h  337  #define alloc_pages_vma(gfp_mask,order,vma,addr,node) alloc_pages(gfp_mask, order)
alloc_page  macro  include/linux/gfp.h  340  #define alloc_page(gfp_mask) alloc_pages(gfp_mask,0)
alloc_page_vma  macro  include/linux/gfp.h  341  #define alloc_page_vma(gfp_mask,vma,addr) alloc_pages_vma(gfp_mask, 0, vma, addr, numa_node_id())
alloc_page_vma_node  macro  include/linux/gfp.h  343  #define alloc_page_vma_node(gfp_mask,vma,addr,node) alloc_pages_vma(gfp_mask, 0, vma, addr, node)
__get_free_pages  prototype  include/linux/gfp.h  346  extern unsigned long __get_free_pages(gfp_t gfp_mask,unsigned int order);
get_zeroed_page  prototype  include/linux/gfp.h  347  extern unsigned long get_zeroed_page(gfp_t gfp_mask);
alloc_pages_exact  prototype  include/linux/gfp.h  349  void *alloc_pages_exact(size_t size,gfp_t gfp_mask);
free_pages_exact  prototype  include/linux/gfp.h  350  void free_pages_exact(void *virt,size_t size);
alloc_pages_exact_nid  prototype  include/linux/gfp.h  352  void *alloc_pages_exact_nid(int nid,size_t size,gfp_t gfp_mask);
__get_free_page  macro  include/linux/gfp.h  354  #define __get_free_page(gfp_mask) __get_free_pages((gfp_mask), 0)
__get_dma_pages  macro  include/linux/gfp.h  357  #define __get_dma_pages(gfp_mask,order) __get_free_pages((gfp_mask) | GFP_DMA, (order))
__free_pages  prototype  include/linux/gfp.h  360  extern void __free_pages(struct page *page,unsigned int order);
free_pages  prototype  include/linux/gfp.h  361  extern void free_pages(unsigned long addr,unsigned int order);
free_hot_cold_page  prototype  include/linux/gfp.h  362  extern void free_hot_cold_page(struct page *page,int cold);
free_hot_cold_page_list  prototype  include/linux/gfp.h  363  extern void free_hot_cold_page_list(struct list_head *list,int cold);
__free_page  macro  include/linux/gfp.h  365  #define __free_page(page) __free_pages((page),0)
free_page  macro  include/linux/gfp.h  366  #define free_page(addr) free_pages((addr),0)
page_alloc_init  prototype  include/linux/gfp.h  368  void page_alloc_init(void);
drain_zone_pages  prototype  include/linux/gfp.h  369  void drain_zone_pages(struct zone *zone,struct per_cpu_pages *pcp);
drain_all_pages  prototype  include/linux/gfp.h  370  void drain_all_pages(void);
drain_local_pages  prototype  include/linux/gfp.h  371  void drain_local_pages(void *dummy);
pm_restrict_gfp_mask  prototype  include/linux/gfp.h  382  extern void pm_restrict_gfp_mask(void);
pm_restore_gfp_mask  prototype  include/linux/gfp.h  383  extern void pm_restore_gfp_mask(void);
pm_suspended_storage  function  include/linux/gfp.h  388  static inline bool pm_suspended_storage(void)
alloc_contig_range  prototype  include/linux/gfp.h  397  extern int alloc_contig_range(unsigned long start,unsigned long end,unsigned migratetype);
free_contig_range  prototype  include/linux/gfp.h  399  extern void free_contig_range(unsigned long pfn,unsigned nr_pages);
init_cma_reserved_pageblock  prototype  include/linux/gfp.h  402  extern void init_cma_reserved_pageblock(struct page *page);
_LINUX_SLUB_DEF_H  macro  include/linux/slub_def.h  2  #define _LINUX_SLUB_DEF_H
stat_item  enum  include/linux/slub_def.h  17  enum stat_item { ALLOC_FASTPATH, ALLOC_SLOWPATH, FREE_FASTPATH, FREE_SLOWPATH, FREE_FROZEN, FREE_ADD_PARTIAL, FREE_REMOVE_PARTIAL, ALLOC_FROM_PARTIAL, ALLOC_SLAB, ALLOC_REFILL, ALLOC_NODE_MISMATCH, FREE_SLAB, CPUSLAB_FLUSH, DEACTIVATE_FULL, DEACTIVATE_EMPTY, DEACTIVATE_TO_HEAD, DEACTIVATE_TO_TAIL, DEACTIVATE_REMOTE_FREES, DEACTIVATE_BYPASS, ORDER_FALLBACK, CMPXCHG_DOUBLE_CPU_FAIL, CMPXCHG_DOUBLE_FAIL, CPU_PARTIAL_ALLOC, CPU_PARTIAL_FREE, CPU_PARTIAL_NODE, CPU_PARTIAL_DRAIN, NR_SLUB_STAT_ITEMS };
kmem_cache_cpu  struct  include/linux/slub_def.h  46  struct kmem_cache_cpu { void **freelist; unsigned long tid; struct page *page; struct page *partial; int node; unsigned stat[NR_SLUB_STAT_ITEMS]; };
kmem_cache_node  struct  include/linux/slub_def.h  57  struct kmem_cache_node { spinlock_t list_lock; unsigned long nr_partial; struct list_head partial; atomic_long_t nr_slabs; atomic_long_t total_objects; struct list_head full; };
kmem_cache_order_objects  struct  include/linux/slub_def.h  73  struct kmem_cache_order_objects { unsigned long x; };
kmem_cache  struct  include/linux/slab_def.h  24  struct kmem_cache { unsigned int batchcount; unsigned int limit; unsigned int shared; unsigned int buffer_size; u32 reciprocal_buffer_size; unsigned int flags; unsigned int num; unsigned int gfporder; gfp_t gfpflags; size_t colour; unsigned int colour_off; struct kmem_cache *slabp_cache; unsigned int slab_size; unsigned int dflags; void (*ctor)(void *obj); const char *name; struct list_head next; unsigned long num_active; unsigned long num_allocations; unsigned long high_mark; unsigned long grown; unsigned long reaped; unsigned long errors; unsigned long max_freeable; unsigned long node_allocs; unsigned long node_frees; unsigned long node_overflow; atomic_t allochit; atomic_t allocmiss; atomic_t freehit; atomic_t freemiss; int obj_offset; int obj_size; struct kmem_list3 **nodelists; struct array_cache *array[NR_CPUS]; };
KMALLOC_MIN_SIZE  macro  include/linux/slub_def.h  121  #define KMALLOC_MIN_SIZE 8
KMALLOC_SHIFT_LOW  macro  include/linux/slub_def.h  124  #define KMALLOC_SHIFT_LOW ilog2(KMALLOC_MIN_SIZE)
SLUB_MAX_SIZE  macro  include/linux/slub_def.h  135  #define SLUB_MAX_SIZE (2 * PAGE_SIZE)
SLUB_PAGE_SHIFT  macro  include/linux/slub_def.h  137  #define SLUB_PAGE_SHIFT (PAGE_SHIFT + 2)
SLUB_DMA  macro  include/linux/slub_def.h  143  #define SLUB_DMA (__force gfp_t)0
kmalloc_index  function  include/linux/slub_def.h  156  static __always_inline int kmalloc_index(size_t size)
kmalloc_slab  function  include/linux/slub_def.h  210  static __always_inline struct kmem_cache *kmalloc_slab(size_t size)
__kmalloc  prototype  include/linux/slab_def.h  110  void *__kmalloc(size_t size,gfp_t flags);
kmalloc_order  function  include/linux/slub_def.h  224  kmalloc_order(size_t size,gfp_t flags,unsigned int order)
verify_mem_not_deleted  function  include/linux/slub_def.h  238  static inline bool verify_mem_not_deleted(const void *x)
kmem_cache_alloc_trace  function  include/linux/slab_def.h  118  kmem_cache_alloc_trace(size_t size,struct kmem_cache *cachep,gfp_t flags)
kmalloc_order_trace  function  include/linux/slub_def.h  256  kmalloc_order_trace(size_t size,gfp_t flags,unsigned int order)
kmalloc_large  function  include/linux/slub_def.h  262  static __always_inline void *kmalloc_large(size_t size,gfp_t flags)
kmalloc  function  include/linux/slab_def.h  128  static __always_inline void *kmalloc(size_t size,gfp_t flags)
kmem_cache_alloc_node_trace  function  include/linux/slab_def.h  173  kmem_cache_alloc_node_trace(size_t size,struct kmem_cache *cachep,gfp_t flags,int nodeid)
__LINUX_SLOB_DEF_H  macro  include/linux/slob_def.h  2  #define __LINUX_SLOB_DEF_H
_LINUX_SLAB_DEF_H  macro  include/linux/slab_def.h  2  #define _LINUX_SLAB_DEF_H
cache_sizes  struct  include/linux/slab_def.h  100  struct cache_sizes { size_t cs_size; struct kmem_cache *cs_cachep; struct kmem_cache *cs_dmacachep; };
slab_buffer_size  function  include/linux/slab_def.h  122  static inline size_t slab_buffer_size(struct kmem_cache *cachep)
CACHE  macro  include/linux/slab_def.h  198  #undef CACHE
__LINUX_PREEMPT_H  macro  include/linux/preempt.h  2  #define __LINUX_PREEMPT_H
add_preempt_count  macro  include/linux/preempt.h  17  # define add_preempt_count(val) do { preempt_count() += (val); } while (0)
sub_preempt_count  macro  include/linux/preempt.h  18  # define sub_preempt_count(val) do { preempt_count() -= (val); } while (0)
inc_preempt_count  macro  include/linux/preempt.h  21  #define inc_preempt_count() add_preempt_count(1)
dec_preempt_count  macro  include/linux/preempt.h  22  #define dec_preempt_count() sub_preempt_count(1)
preempt_count  macro  include/linux/preempt.h  24  #define preempt_count() (current_thread_info()->preempt_count)
preempt_schedule  prototype  include/linux/preempt.h  28  asmlinkage void preempt_schedule(void);
preempt_check_resched  macro  include/linux/preempt.h  38  #define preempt_check_resched() do { } while (0)
preempt_disable  macro  include/linux/preempt.h  96  #define preempt_disable() do { } while (0)
sched_preempt_enable_no_resched  macro  include/linux/preempt.h  97  #define sched_preempt_enable_no_resched() do { } while (0)
preempt_enable_no_resched  macro  include/linux/preempt.h  98  #define preempt_enable_no_resched() do { } while (0)
preempt_enable  macro  include/linux/preempt.h  99  #define preempt_enable() do { } while (0)
add_preempt_count_notrace  macro  include/linux/preempt.h  67  #define add_preempt_count_notrace(val) do { preempt_count() += (val); } while (0)
sub_preempt_count_notrace  macro  include/linux/preempt.h  69  #define sub_preempt_count_notrace(val) do { preempt_count() -= (val); } while (0)
inc_preempt_count_notrace  macro  include/linux/preempt.h  71  #define inc_preempt_count_notrace() add_preempt_count_notrace(1)
dec_preempt_count_notrace  macro  include/linux/preempt.h  72  #define dec_preempt_count_notrace() sub_preempt_count_notrace(1)
preempt_disable_notrace  macro  include/linux/preempt.h  101  #define preempt_disable_notrace() do { } while (0)
preempt_enable_no_resched_notrace  macro  include/linux/preempt.h  102  #define preempt_enable_no_resched_notrace() do { } while (0)
preempt_enable_notrace  macro  include/linux/preempt.h  103  #define preempt_enable_notrace() do { } while (0)
preempt_ops  struct  include/linux/preempt.h  125  struct preempt_ops { void (*sched_in)(struct preempt_notifier *notifier, int cpu); void (*sched_out)(struct preempt_notifier *notifier,struct task_struct *next); };
preempt_notifier  struct  include/linux/preempt.h  138  struct preempt_notifier { struct hlist_node link; struct preempt_ops *ops; };
preempt_notifier_register  prototype  include/linux/preempt.h  143  void preempt_notifier_register(struct preempt_notifier *notifier);
preempt_notifier_unregister  prototype  include/linux/preempt.h  144  void preempt_notifier_unregister(struct preempt_notifier *notifier);
preempt_notifier_init  function  include/linux/preempt.h  146  static inline void preempt_notifier_init(struct preempt_notifier *notifier,struct preempt_ops *ops)
_LINUX_IRQRETURN_H  macro  include/linux/irqreturn.h  2  #define _LINUX_IRQRETURN_H
irqreturn  enum  include/linux/irqreturn.h  10  enum irqreturn { IRQ_NONE = (0 << 0), IRQ_HANDLED = (1 << 0), IRQ_WAKE_THREAD = (1 << 1), };
IRQ_RETVAL  macro  include/linux/irqreturn.h  17  #define IRQ_RETVAL(x) ((x) != IRQ_NONE)
_LINUX_IRQNR_H  macro  include/linux/irqnr.h  2  #define _LINUX_IRQNR_H
nr_irqs  macro  include/linux/irqnr.h  15  #define nr_irqs NR_IRQS
irq_to_desc  prototype  include/linux/irqnr.h  27  extern struct irq_desc *irq_to_desc(unsigned int irq);
for_each_irq_desc  macro  include/linux/irqnr.h  30  # define for_each_irq_desc(irq,desc) for (irq = 0, desc = irq_to_desc(irq); irq < nr_irqs; irq++, desc = irq_to_desc(irq)) if (!desc) ; else
for_each_irq_desc_reverse  macro  include/linux/irqnr.h  38  # define for_each_irq_desc_reverse(irq,desc) for (irq = nr_irqs - 1, desc = irq_to_desc(irq); irq >= 0; irq--, desc = irq_to_desc(irq)) if (!desc) ; else
irq_get_next_irq  prototype  include/linux/irqnr.h  28  unsigned int irq_get_next_irq(unsigned int offset);
irq_node  macro  include/linux/irqnr.h  48  #define irq_node(irq) 0
for_each_active_irq  macro  include/linux/irqnr.h  51  # define for_each_active_irq(irq) for (irq = irq_get_next_irq(0); irq < nr_irqs; irq = irq_get_next_irq(irq + 1))
for_each_irq_nr  macro  include/linux/irqnr.h  57  #define for_each_irq_nr(irq) for (irq = 0; irq < nr_irqs; irq++)
LINUX_HARDIRQ_H  macro  include/linux/hardirq.h  2  #define LINUX_HARDIRQ_H
PREEMPT_BITS  macro  include/linux/hardirq.h  32  #define PREEMPT_BITS 8
SOFTIRQ_BITS  macro  include/linux/hardirq.h  33  #define SOFTIRQ_BITS 8
NMI_BITS  macro  include/linux/hardirq.h  34  #define NMI_BITS 1
MAX_HARDIRQ_BITS  macro  include/linux/hardirq.h  36  #define MAX_HARDIRQ_BITS 10
HARDIRQ_BITS  macro  include/linux/hardirq.h  39  # define HARDIRQ_BITS MAX_HARDIRQ_BITS
PREEMPT_SHIFT  macro  include/linux/hardirq.h  46  #define PREEMPT_SHIFT 0
SOFTIRQ_SHIFT  macro  include/linux/hardirq.h  47  #define SOFTIRQ_SHIFT (PREEMPT_SHIFT + PREEMPT_BITS)
HARDIRQ_SHIFT  macro  include/linux/hardirq.h  48  #define HARDIRQ_SHIFT (SOFTIRQ_SHIFT + SOFTIRQ_BITS)
NMI_SHIFT  macro  include/linux/hardirq.h  49  #define NMI_SHIFT (HARDIRQ_SHIFT + HARDIRQ_BITS)
__IRQ_MASK  macro  include/linux/hardirq.h  51  #define __IRQ_MASK(x) ((1UL << (x))-1)
PREEMPT_MASK  macro  include/linux/hardirq.h  53  #define PREEMPT_MASK (__IRQ_MASK(PREEMPT_BITS) << PREEMPT_SHIFT)
SOFTIRQ_MASK  macro  include/linux/hardirq.h  54  #define SOFTIRQ_MASK (__IRQ_MASK(SOFTIRQ_BITS) << SOFTIRQ_SHIFT)
HARDIRQ_MASK  macro  include/linux/hardirq.h  55  #define HARDIRQ_MASK (__IRQ_MASK(HARDIRQ_BITS) << HARDIRQ_SHIFT)
NMI_MASK  macro  include/linux/hardirq.h  56  #define NMI_MASK (__IRQ_MASK(NMI_BITS) << NMI_SHIFT)
PREEMPT_OFFSET  macro  include/linux/hardirq.h  58  #define PREEMPT_OFFSET (1UL << PREEMPT_SHIFT)
SOFTIRQ_OFFSET  macro  include/linux/hardirq.h  59  #define SOFTIRQ_OFFSET (1UL << SOFTIRQ_SHIFT)
HARDIRQ_OFFSET  macro  include/linux/hardirq.h  60  #define HARDIRQ_OFFSET (1UL << HARDIRQ_SHIFT)
NMI_OFFSET  macro  include/linux/hardirq.h  61  #define NMI_OFFSET (1UL << NMI_SHIFT)
SOFTIRQ_DISABLE_OFFSET  macro  include/linux/hardirq.h  63  #define SOFTIRQ_DISABLE_OFFSET (2 * SOFTIRQ_OFFSET)
PREEMPT_ACTIVE_BITS  macro  include/linux/hardirq.h  66  #define PREEMPT_ACTIVE_BITS 1
PREEMPT_ACTIVE_SHIFT  macro  include/linux/hardirq.h  67  #define PREEMPT_ACTIVE_SHIFT (NMI_SHIFT + NMI_BITS)
PREEMPT_ACTIVE  macro  arch/x86/include/asm/thread_info.h  158  #define PREEMPT_ACTIVE 0x10000000
hardirq_count  macro  include/linux/hardirq.h  75  #define hardirq_count() (preempt_count() & HARDIRQ_MASK)
softirq_count  macro  include/linux/hardirq.h  76  #define softirq_count() (preempt_count() & SOFTIRQ_MASK)
irq_count  macro  include/linux/hardirq.h  77  #define irq_count() (preempt_count() & (HARDIRQ_MASK | SOFTIRQ_MASK | NMI_MASK))
in_irq  macro  include/linux/hardirq.h  86  #define in_irq() (hardirq_count())
in_softirq  macro  include/linux/hardirq.h  87  #define in_softirq() (softirq_count())
in_interrupt  macro  include/linux/hardirq.h  88  #define in_interrupt() (irq_count())
in_serving_softirq  macro  include/linux/hardirq.h  89  #define in_serving_softirq() (softirq_count() & SOFTIRQ_OFFSET)
in_nmi  macro  include/linux/hardirq.h  94  #define in_nmi() (preempt_count() & NMI_MASK)
PREEMPT_CHECK_OFFSET  macro  include/linux/hardirq.h  99  # define PREEMPT_CHECK_OFFSET 0
in_atomic  macro  include/linux/hardirq.h  109  #define in_atomic() ((preempt_count() & ~PREEMPT_ACTIVE) != 0)
in_atomic_preempt_off  macro  include/linux/hardirq.h  115  #define in_atomic_preempt_off() ((preempt_count() & ~PREEMPT_ACTIVE) != PREEMPT_CHECK_OFFSET)
preemptible  macro  include/linux/hardirq.h  122  # define preemptible() 0
IRQ_EXIT_OFFSET  macro  include/linux/hardirq.h  123  # define IRQ_EXIT_OFFSET HARDIRQ_OFFSET
synchronize_irq  macro  include/linux/hardirq.h  129  # define synchronize_irq(irq) barrier()
account_system_vtime  prototype  include/linux/hardirq.h  139  extern void account_system_vtime(struct task_struct *tsk);
rcu_nmi_enter  prototype  include/linux/hardirq.h  153  extern void rcu_nmi_enter(void);
rcu_nmi_exit  prototype  include/linux/hardirq.h  154  extern void rcu_nmi_exit(void);
__irq_enter  macro  include/linux/hardirq.h  163  #define __irq_enter() do { account_system_vtime(current); add_preempt_count(HARDIRQ_OFFSET); trace_hardirq_enter(); } while (0)
irq_enter  prototype  include/linux/hardirq.h  173  extern void irq_enter(void);
__irq_exit  macro  include/linux/hardirq.h  178  #define __irq_exit() do { trace_hardirq_exit(); account_system_vtime(current); sub_preempt_count(HARDIRQ_OFFSET); } while (0)
irq_exit  prototype  include/linux/hardirq.h  188  extern void irq_exit(void);
nmi_enter  macro  include/linux/hardirq.h  190  #define nmi_enter() do { ftrace_nmi_enter(); BUG_ON(in_nmi()); add_preempt_count(NMI_OFFSET + HARDIRQ_OFFSET); lockdep_off(); rcu_nmi_enter(); trace_hardirq_enter(); } while (0)
nmi_exit  macro  include/linux/hardirq.h  200  #define nmi_exit() do { trace_hardirq_exit(); rcu_nmi_exit(); lockdep_on(); BUG_ON(!in_nmi()); sub_preempt_count(NMI_OFFSET + HARDIRQ_OFFSET); ftrace_nmi_exit(); } while (0)
_LINUX_TRACE_IRQFLAGS_H  macro  include/linux/irqflags.h  12  #define _LINUX_TRACE_IRQFLAGS_H
trace_softirqs_on  macro  include/linux/irqflags.h  34  # define trace_softirqs_on(ip) do { } while (0)
trace_softirqs_off  macro  include/linux/irqflags.h  35  # define trace_softirqs_off(ip) do { } while (0)
trace_hardirqs_on  macro  include/linux/irqflags.h  32  # define trace_hardirqs_on() do { } while (0)
trace_hardirqs_off  macro  include/linux/irqflags.h  33  # define trace_hardirqs_off() do { } while (0)
trace_hardirq_context  macro  include/linux/irqflags.h  36  # define trace_hardirq_context(p) 0
trace_softirq_context  macro  include/linux/irqflags.h  37  # define trace_softirq_context(p) 0
trace_hardirqs_enabled  macro  include/linux/irqflags.h  38  # define trace_hardirqs_enabled(p) 0
trace_softirqs_enabled  macro  include/linux/irqflags.h  39  # define trace_softirqs_enabled(p) 0
trace_hardirq_enter  macro  include/linux/irqflags.h  40  # define trace_hardirq_enter() do { } while (0)
trace_hardirq_exit  macro  include/linux/irqflags.h  41  # define trace_hardirq_exit() do { } while (0)
lockdep_softirq_enter  macro  include/linux/irqflags.h  42  # define lockdep_softirq_enter() do { } while (0)
lockdep_softirq_exit  macro  include/linux/irqflags.h  43  # define lockdep_softirq_exit() do { } while (0)
INIT_TRACE_IRQFLAGS  macro  include/linux/irqflags.h  44  # define INIT_TRACE_IRQFLAGS
stop_critical_timings  macro  include/linux/irqflags.h  52  # define stop_critical_timings() do { } while (0)
start_critical_timings  macro  include/linux/irqflags.h  53  # define start_critical_timings() do { } while (0)
raw_local_irq_disable  macro  include/linux/irqflags.h  59  #define raw_local_irq_disable() arch_local_irq_disable()
raw_local_irq_enable  macro  include/linux/irqflags.h  60  #define raw_local_irq_enable() arch_local_irq_enable()
raw_local_irq_save  macro  include/linux/irqflags.h  61  #define raw_local_irq_save(flags) do { typecheck(unsigned long, flags); flags = arch_local_irq_save(); } while (0)
raw_local_irq_restore  macro  include/linux/irqflags.h  66  #define raw_local_irq_restore(flags) do { typecheck(unsigned long, flags); arch_local_irq_restore(flags); } while (0)
raw_local_save_flags  macro  include/linux/irqflags.h  71  #define raw_local_save_flags(flags) do { typecheck(unsigned long, flags); flags = arch_local_save_flags(); } while (0)
raw_irqs_disabled_flags  macro  include/linux/irqflags.h  76  #define raw_irqs_disabled_flags(flags) ({ typecheck(unsigned long, flags); arch_irqs_disabled_flags(flags); })
raw_irqs_disabled  macro  include/linux/irqflags.h  81  #define raw_irqs_disabled() (arch_irqs_disabled())
raw_safe_halt  macro  include/linux/irqflags.h  82  #define raw_safe_halt() arch_safe_halt()
local_irq_enable  macro  include/linux/irqflags.h  136  #define local_irq_enable() do { raw_local_irq_enable(); } while (0)
local_irq_disable  macro  include/linux/irqflags.h  137  #define local_irq_disable() do { raw_local_irq_disable(); } while (0)
local_irq_save  macro  include/linux/irqflags.h  138  #define local_irq_save(flags) do { raw_local_irq_save(flags); } while (0)
local_irq_restore  macro  include/linux/irqflags.h  142  #define local_irq_restore(flags) do { raw_local_irq_restore(flags); } while (0)
local_save_flags  macro  include/linux/irqflags.h  143  #define local_save_flags(flags) do { raw_local_save_flags(flags); } while (0)
irqs_disabled_flags  macro  include/linux/irqflags.h  145  #define irqs_disabled_flags(flags) (raw_irqs_disabled_flags(flags))
irqs_disabled  macro  include/linux/irqflags.h  144  #define irqs_disabled() (raw_irqs_disabled())
safe_halt  macro  include/linux/irqflags.h  146  #define safe_halt() do { raw_safe_halt(); } while (0)
_KREF_H_  macro  include/linux/kref.h  16  #define _KREF_H_
kref  struct  include/linux/kref.h  22  struct kref { atomic_t refcount; };
kref_init  function  include/linux/kref.h  30  static inline void kref_init(struct kref *kref)
kref_get  function  include/linux/kref.h  39  static inline void kref_get(struct kref *kref)
kref_sub  function  include/linux/kref.h  63  static inline int kref_sub(struct kref *kref,unsigned int count,void (*release)(struct kref *kref))
kref_put  function  include/linux/kref.h  92  static inline int kref_put(struct kref *kref,void (*release)(struct kref *kref))
_LINUX_WORKQUEUE_H  macro  include/linux/workqueue.h  6  #define _LINUX_WORKQUEUE_H
work_data_bits  macro  include/linux/workqueue.h  24  #define work_data_bits(work) ((unsigned long *)(&(work)->data))
work_struct  struct  include/linux/workqueue.h  79  struct work_struct { atomic_long_t data; struct list_head entry; work_func_t func; struct lockdep_map lockdep_map; };
WORK_DATA_INIT  macro  include/linux/workqueue.h  88  #define WORK_DATA_INIT() ATOMIC_LONG_INIT(WORK_STRUCT_NO_CPU)
WORK_DATA_STATIC_INIT  macro  include/linux/workqueue.h  89  #define WORK_DATA_STATIC_INIT() ATOMIC_LONG_INIT(WORK_STRUCT_NO_CPU | WORK_STRUCT_STATIC)
delayed_work  struct  include/linux/workqueue.h  92  struct delayed_work { struct work_struct work; struct timer_list timer; };
to_delayed_work  function  include/linux/workqueue.h  97  static inline struct delayed_work *to_delayed_work(struct work_struct *work)
execute_work  struct  include/linux/workqueue.h  102  struct execute_work { struct work_struct work; };
__WORK_INIT_LOCKDEP_MAP  macro  include/linux/workqueue.h  115  #define __WORK_INIT_LOCKDEP_MAP(n,k)
__WORK_INITIALIZER  macro  include/linux/workqueue.h  118  #define __WORK_INITIALIZER(n,f) { .data = WORK_DATA_STATIC_INIT(), .entry	= { &(n).entry, &(n).entry }, .func = (f), __WORK_INIT_LOCKDEP_MAP(#n, &(n)) }
__DELAYED_WORK_INITIALIZER  macro  include/linux/workqueue.h  125  #define __DELAYED_WORK_INITIALIZER(n,f) { .work = __WORK_INITIALIZER((n).work, (f)), .timer = TIMER_INITIALIZER(NULL, 0, 0), }
__DEFERRED_WORK_INITIALIZER  macro  include/linux/workqueue.h  130  #define __DEFERRED_WORK_INITIALIZER(n,f) { .work = __WORK_INITIALIZER((n).work, (f)), .timer = TIMER_DEFERRED_INITIALIZER(NULL, 0, 0), }
DECLARE_WORK  macro  include/linux/workqueue.h  135  #define DECLARE_WORK(n,f) struct work_struct n = __WORK_INITIALIZER(n, f)
DECLARE_DELAYED_WORK  macro  include/linux/workqueue.h  138  #define DECLARE_DELAYED_WORK(n,f) struct delayed_work n = __DELAYED_WORK_INITIALIZER(n, f)
DECLARE_DEFERRED_WORK  macro  include/linux/workqueue.h  141  #define DECLARE_DEFERRED_WORK(n,f) struct delayed_work n = __DEFERRED_WORK_INITIALIZER(n, f)
PREPARE_WORK  macro  include/linux/workqueue.h  147  #define PREPARE_WORK(_work,_func) do { (_work)->func = (_func); } while (0)
PREPARE_DELAYED_WORK  macro  include/linux/workqueue.h  152  #define PREPARE_DELAYED_WORK(_work,_func) PREPARE_WORK(&(_work)->work, (_func))
__init_work  function  include/linux/workqueue.h  163  static inline void __init_work(struct work_struct *work,int onstack) { }
destroy_work_on_stack  function  include/linux/workqueue.h  164  static inline void destroy_work_on_stack(struct work_struct *work) { }
work_static  function  include/linux/workqueue.h  165  static inline unsigned int work_static(struct work_struct *work) { return 0; }
__INIT_WORK  macro  include/linux/workqueue.h  187  #define __INIT_WORK(_work,_func,_onstack) do { __init_work((_work), _onstack); (_work)->data = (atomic_long_t) WORK_DATA_INIT(); INIT_LIST_HEAD(&(_work)->entry); PREPARE_WORK((_work), (_func)); } while (0)
INIT_WORK  macro  include/linux/workqueue.h  196  #define INIT_WORK(_work,_func) do { __INIT_WORK((_work), (_func), 0); } while (0)
INIT_WORK_ONSTACK  macro  include/linux/workqueue.h  201  #define INIT_WORK_ONSTACK(_work,_func) do { __INIT_WORK((_work), (_func), 1); } while (0)
INIT_DELAYED_WORK  macro  include/linux/workqueue.h  206  #define INIT_DELAYED_WORK(_work,_func) do { INIT_WORK(&(_work)->work, (_func)); init_timer(&(_work)->timer); } while (0)
INIT_DELAYED_WORK_ONSTACK  macro  include/linux/workqueue.h  212  #define INIT_DELAYED_WORK_ONSTACK(_work,_func) do { INIT_WORK_ONSTACK(&(_work)->work, (_func)); init_timer_on_stack(&(_work)->timer); } while (0)
INIT_DELAYED_WORK_DEFERRABLE  macro  include/linux/workqueue.h  218  #define INIT_DELAYED_WORK_DEFERRABLE(_work,_func) do { INIT_WORK(&(_work)->work, (_func)); init_timer_deferrable(&(_work)->timer); } while (0)
work_pending  macro  include/linux/workqueue.h  228  #define work_pending(work) test_bit(WORK_STRUCT_PENDING_BIT, work_data_bits(work))
delayed_work_pending  macro  include/linux/workqueue.h  236  #define delayed_work_pending(w) work_pending(&(w)->work)
work_clear_pending  macro  include/linux/workqueue.h  243  #define work_clear_pending(work) clear_bit(WORK_STRUCT_PENDING_BIT, work_data_bits(work))
WQ_UNBOUND_MAX_ACTIVE  macro  include/linux/workqueue.h  267  #define WQ_UNBOUND_MAX_ACTIVE max_t(int, WQ_MAX_ACTIVE, num_possible_cpus() * WQ_MAX_UNBOUND_PER_CPU)
alloc_workqueue  macro  include/linux/workqueue.h  338  #define alloc_workqueue(fmt,flags,max_active,args...) __alloc_workqueue_key((fmt), (flags), (max_active), NULL, NULL, ##args)
alloc_ordered_workqueue  macro  include/linux/workqueue.h  356  #define alloc_ordered_workqueue(fmt,flags,args...) alloc_workqueue(fmt, WQ_UNBOUND | (flags), 1, ##args)
create_workqueue  macro  include/linux/workqueue.h  359  #define create_workqueue(name) alloc_workqueue((name), WQ_MEM_RECLAIM, 1)
create_freezable_workqueue  macro  include/linux/workqueue.h  361  #define create_freezable_workqueue(name) alloc_workqueue((name), WQ_FREEZABLE | WQ_UNBOUND | WQ_MEM_RECLAIM, 1)
create_singlethread_workqueue  macro  include/linux/workqueue.h  363  #define create_singlethread_workqueue(name) alloc_workqueue((name), WQ_UNBOUND | WQ_MEM_RECLAIM, 1)
destroy_workqueue  prototype  include/linux/workqueue.h  366  extern void destroy_workqueue(struct workqueue_struct *wq);
queue_work  prototype  include/linux/workqueue.h  368  extern int queue_work(struct workqueue_struct *wq,struct work_struct *work);
queue_work_on  prototype  include/linux/workqueue.h  369  extern int queue_work_on(int cpu,struct workqueue_struct *wq,struct work_struct *work);
queue_delayed_work  prototype  include/linux/workqueue.h  371  extern int queue_delayed_work(struct workqueue_struct *wq,struct delayed_work *work, unsigned long delay);
queue_delayed_work_on  prototype  include/linux/workqueue.h  373  extern int queue_delayed_work_on(int cpu,struct workqueue_struct *wq,struct delayed_work *work, unsigned long delay);
flush_workqueue  prototype  include/linux/workqueue.h  376  extern void flush_workqueue(struct workqueue_struct *wq);
drain_workqueue  prototype  include/linux/workqueue.h  377  extern void drain_workqueue(struct workqueue_struct *wq);
flush_scheduled_work  prototype  include/linux/workqueue.h  378  extern void flush_scheduled_work(void);
schedule_work  prototype  include/linux/workqueue.h  380  extern int schedule_work(struct work_struct *work);
schedule_work_on  prototype  include/linux/workqueue.h  381  extern int schedule_work_on(int cpu,struct work_struct *work);
schedule_delayed_work  prototype  include/linux/workqueue.h  382  extern int schedule_delayed_work(struct delayed_work *work,unsigned long delay);
schedule_delayed_work_on  prototype  include/linux/workqueue.h  383  extern int schedule_delayed_work_on(int cpu,struct delayed_work *work,unsigned long delay);
schedule_on_each_cpu  prototype  include/linux/workqueue.h  385  extern int schedule_on_each_cpu(work_func_t func);
keventd_up  prototype  include/linux/workqueue.h  386  extern int keventd_up(void);
execute_in_process_context  prototype  include/linux/workqueue.h  388  int execute_in_process_context(work_func_t fn,struct execute_work *);
flush_work  prototype  include/linux/workqueue.h  390  extern bool flush_work(struct work_struct *work);
flush_work_sync  prototype  include/linux/workqueue.h  391  extern bool flush_work_sync(struct work_struct *work);
cancel_work_sync  prototype  include/linux/workqueue.h  392  extern bool cancel_work_sync(struct work_struct *work);
flush_delayed_work  prototype  include/linux/workqueue.h  394  extern bool flush_delayed_work(struct delayed_work *dwork);
flush_delayed_work_sync  prototype  include/linux/workqueue.h  395  extern bool flush_delayed_work_sync(struct delayed_work *work);
cancel_delayed_work_sync  prototype  include/linux/workqueue.h  396  extern bool cancel_delayed_work_sync(struct delayed_work *dwork);
workqueue_set_max_active  prototype  include/linux/workqueue.h  398  extern void workqueue_set_max_active(struct workqueue_struct *wq,int max_active);
workqueue_congested  prototype  include/linux/workqueue.h  400  extern bool workqueue_congested(unsigned int cpu,struct workqueue_struct *wq);
work_cpu  prototype  include/linux/workqueue.h  401  extern unsigned int work_cpu(struct work_struct *work);
work_busy  prototype  include/linux/workqueue.h  402  extern unsigned int work_busy(struct work_struct *work);
cancel_delayed_work  function  include/linux/workqueue.h  410  static inline bool cancel_delayed_work(struct delayed_work *work)
__cancel_delayed_work  function  include/linux/workqueue.h  425  static inline bool __cancel_delayed_work(struct delayed_work *work)
work_on_cpu  prototype  include/linux/workqueue.h  441  long work_on_cpu(unsigned int cpu,long (*fn)(void *),void *arg);
freeze_workqueues_begin  prototype  include/linux/workqueue.h  445  extern void freeze_workqueues_begin(void);
freeze_workqueues_busy  prototype  include/linux/workqueue.h  446  extern bool freeze_workqueues_busy(void);
thaw_workqueues  prototype  include/linux/workqueue.h  447  extern void thaw_workqueues(void);
_LINUX_ATOMIC_H  macro  include/linux/atomic.h  3  #define _LINUX_ATOMIC_H
atomic_add_unless  function  include/linux/atomic.h  15  static inline int atomic_add_unless(atomic_t *v,int a,int u)
atomic_inc_not_zero  macro  include/linux/atomic.h  28  #define atomic_inc_not_zero(v) atomic_add_unless((v),1,0)
atomic_inc_not_zero_hint  function  include/linux/atomic.h  44  static inline int atomic_inc_not_zero_hint(atomic_t *v,int hint)
atomic_inc_unless_negative  function  include/linux/atomic.h  64  static inline int atomic_inc_unless_negative(atomic_t *p)
atomic_dec_unless_positive  function  include/linux/atomic.h  77  static inline int atomic_dec_unless_positive(atomic_t *p)
atomic_or  function  include/linux/atomic.h  90  static inline void atomic_or(int i,atomic_t *v)
LINUX_PCI_REGS_H  macro  include/linux/pci_regs.h  23  #define LINUX_PCI_REGS_H
PCI_VENDOR_ID  macro  include/linux/pci_regs.h  29  #define PCI_VENDOR_ID 0x00
PCI_DEVICE_ID  macro  include/linux/pci_regs.h  30  #define PCI_DEVICE_ID 0x02
PCI_COMMAND  macro  include/linux/pci_regs.h  31  #define PCI_COMMAND 0x04
PCI_COMMAND_IO  macro  include/linux/pci_regs.h  32  #define PCI_COMMAND_IO 0x1
PCI_COMMAND_MEMORY  macro  include/linux/pci_regs.h  33  #define PCI_COMMAND_MEMORY 0x2
PCI_COMMAND_MASTER  macro  include/linux/pci_regs.h  34  #define PCI_COMMAND_MASTER 0x4
PCI_COMMAND_SPECIAL  macro  include/linux/pci_regs.h  35  #define PCI_COMMAND_SPECIAL 0x8
PCI_COMMAND_INVALIDATE  macro  include/linux/pci_regs.h  36  #define PCI_COMMAND_INVALIDATE 0x10
PCI_COMMAND_VGA_PALETTE  macro  include/linux/pci_regs.h  37  #define PCI_COMMAND_VGA_PALETTE 0x20
PCI_COMMAND_PARITY  macro  include/linux/pci_regs.h  38  #define PCI_COMMAND_PARITY 0x40
PCI_COMMAND_WAIT  macro  include/linux/pci_regs.h  39  #define PCI_COMMAND_WAIT 0x80
PCI_COMMAND_SERR  macro  include/linux/pci_regs.h  40  #define PCI_COMMAND_SERR 0x100
PCI_COMMAND_FAST_BACK  macro  include/linux/pci_regs.h  41  #define PCI_COMMAND_FAST_BACK 0x200
PCI_COMMAND_INTX_DISABLE  macro  include/linux/pci_regs.h  42  #define PCI_COMMAND_INTX_DISABLE 0x400
PCI_STATUS  macro  include/linux/pci_regs.h  44  #define PCI_STATUS 0x06
PCI_STATUS_INTERRUPT  macro  include/linux/pci_regs.h  45  #define PCI_STATUS_INTERRUPT 0x08
PCI_STATUS_CAP_LIST  macro  include/linux/pci_regs.h  46  #define PCI_STATUS_CAP_LIST 0x10
PCI_STATUS_66MHZ  macro  include/linux/pci_regs.h  47  #define PCI_STATUS_66MHZ 0x20
PCI_STATUS_UDF  macro  include/linux/pci_regs.h  48  #define PCI_STATUS_UDF 0x40
PCI_STATUS_FAST_BACK  macro  include/linux/pci_regs.h  49  #define PCI_STATUS_FAST_BACK 0x80
PCI_STATUS_PARITY  macro  include/linux/pci_regs.h  50  #define PCI_STATUS_PARITY 0x100
PCI_STATUS_DEVSEL_MASK  macro  include/linux/pci_regs.h  51  #define PCI_STATUS_DEVSEL_MASK 0x600
PCI_STATUS_DEVSEL_FAST  macro  include/linux/pci_regs.h  52  #define PCI_STATUS_DEVSEL_FAST 0x000
PCI_STATUS_DEVSEL_MEDIUM  macro  include/linux/pci_regs.h  53  #define PCI_STATUS_DEVSEL_MEDIUM 0x200
PCI_STATUS_DEVSEL_SLOW  macro  include/linux/pci_regs.h  54  #define PCI_STATUS_DEVSEL_SLOW 0x400
PCI_STATUS_SIG_TARGET_ABORT  macro  include/linux/pci_regs.h  55  #define PCI_STATUS_SIG_TARGET_ABORT 0x800
PCI_STATUS_REC_TARGET_ABORT  macro  include/linux/pci_regs.h  56  #define PCI_STATUS_REC_TARGET_ABORT 0x1000
PCI_STATUS_REC_MASTER_ABORT  macro  include/linux/pci_regs.h  57  #define PCI_STATUS_REC_MASTER_ABORT 0x2000
PCI_STATUS_SIG_SYSTEM_ERROR  macro  include/linux/pci_regs.h  58  #define PCI_STATUS_SIG_SYSTEM_ERROR 0x4000
PCI_STATUS_DETECTED_PARITY  macro  include/linux/pci_regs.h  59  #define PCI_STATUS_DETECTED_PARITY 0x8000
PCI_CLASS_REVISION  macro  include/linux/pci_regs.h  61  #define PCI_CLASS_REVISION 0x08
PCI_REVISION_ID  macro  include/linux/pci_regs.h  62  #define PCI_REVISION_ID 0x08
PCI_CLASS_PROG  macro  include/linux/pci_regs.h  63  #define PCI_CLASS_PROG 0x09
PCI_CLASS_DEVICE  macro  include/linux/pci_regs.h  64  #define PCI_CLASS_DEVICE 0x0a
PCI_CACHE_LINE_SIZE  macro  include/linux/pci_regs.h  66  #define PCI_CACHE_LINE_SIZE 0x0c
PCI_LATENCY_TIMER  macro  include/linux/pci_regs.h  67  #define PCI_LATENCY_TIMER 0x0d
PCI_HEADER_TYPE  macro  include/linux/pci_regs.h  68  #define PCI_HEADER_TYPE 0x0e
PCI_HEADER_TYPE_NORMAL  macro  include/linux/pci_regs.h  69  #define PCI_HEADER_TYPE_NORMAL 0
PCI_HEADER_TYPE_BRIDGE  macro  include/linux/pci_regs.h  70  #define PCI_HEADER_TYPE_BRIDGE 1
PCI_HEADER_TYPE_CARDBUS  macro  include/linux/pci_regs.h  71  #define PCI_HEADER_TYPE_CARDBUS 2
PCI_BIST  macro  include/linux/pci_regs.h  73  #define PCI_BIST 0x0f
PCI_BIST_CODE_MASK  macro  include/linux/pci_regs.h  74  #define PCI_BIST_CODE_MASK 0x0f
PCI_BIST_START  macro  include/linux/pci_regs.h  75  #define PCI_BIST_START 0x40
PCI_BIST_CAPABLE  macro  include/linux/pci_regs.h  76  #define PCI_BIST_CAPABLE 0x80
PCI_BASE_ADDRESS_0  macro  include/linux/pci_regs.h  84  #define PCI_BASE_ADDRESS_0 0x10
PCI_BASE_ADDRESS_1  macro  include/linux/pci_regs.h  85  #define PCI_BASE_ADDRESS_1 0x14
PCI_BASE_ADDRESS_2  macro  include/linux/pci_regs.h  86  #define PCI_BASE_ADDRESS_2 0x18
PCI_BASE_ADDRESS_3  macro  include/linux/pci_regs.h  87  #define PCI_BASE_ADDRESS_3 0x1c
PCI_BASE_ADDRESS_4  macro  include/linux/pci_regs.h  88  #define PCI_BASE_ADDRESS_4 0x20
PCI_BASE_ADDRESS_5  macro  include/linux/pci_regs.h  89  #define PCI_BASE_ADDRESS_5 0x24
PCI_BASE_ADDRESS_SPACE  macro  include/linux/pci_regs.h  90  #define PCI_BASE_ADDRESS_SPACE 0x01
PCI_BASE_ADDRESS_SPACE_IO  macro  include/linux/pci_regs.h  91  #define PCI_BASE_ADDRESS_SPACE_IO 0x01
PCI_BASE_ADDRESS_SPACE_MEMORY  macro  include/linux/pci_regs.h  92  #define PCI_BASE_ADDRESS_SPACE_MEMORY 0x00
PCI_BASE_ADDRESS_MEM_TYPE_MASK  macro  include/linux/pci_regs.h  93  #define PCI_BASE_ADDRESS_MEM_TYPE_MASK 0x06
PCI_BASE_ADDRESS_MEM_TYPE_32  macro  include/linux/pci_regs.h  94  #define PCI_BASE_ADDRESS_MEM_TYPE_32 0x00
PCI_BASE_ADDRESS_MEM_TYPE_1M  macro  include/linux/pci_regs.h  95  #define PCI_BASE_ADDRESS_MEM_TYPE_1M 0x02
PCI_BASE_ADDRESS_MEM_TYPE_64  macro  include/linux/pci_regs.h  96  #define PCI_BASE_ADDRESS_MEM_TYPE_64 0x04
PCI_BASE_ADDRESS_MEM_PREFETCH  macro  include/linux/pci_regs.h  97  #define PCI_BASE_ADDRESS_MEM_PREFETCH 0x08
PCI_BASE_ADDRESS_MEM_MASK  macro  include/linux/pci_regs.h  98  #define PCI_BASE_ADDRESS_MEM_MASK (~0x0fUL)
PCI_BASE_ADDRESS_IO_MASK  macro  include/linux/pci_regs.h  99  #define PCI_BASE_ADDRESS_IO_MASK (~0x03UL)
PCI_CARDBUS_CIS  macro  include/linux/pci_regs.h  103  #define PCI_CARDBUS_CIS 0x28
PCI_SUBSYSTEM_VENDOR_ID  macro  include/linux/pci_regs.h  104  #define PCI_SUBSYSTEM_VENDOR_ID 0x2c
PCI_SUBSYSTEM_ID  macro  include/linux/pci_regs.h  105  #define PCI_SUBSYSTEM_ID 0x2e
PCI_ROM_ADDRESS  macro  include/linux/pci_regs.h  106  #define PCI_ROM_ADDRESS 0x30
PCI_ROM_ADDRESS_ENABLE  macro  include/linux/pci_regs.h  107  #define PCI_ROM_ADDRESS_ENABLE 0x01
PCI_ROM_ADDRESS_MASK  macro  include/linux/pci_regs.h  108  #define PCI_ROM_ADDRESS_MASK (~0x7ffUL)
PCI_CAPABILITY_LIST  macro  include/linux/pci_regs.h  110  #define PCI_CAPABILITY_LIST 0x34
PCI_INTERRUPT_LINE  macro  include/linux/pci_regs.h  113  #define PCI_INTERRUPT_LINE 0x3c
PCI_INTERRUPT_PIN  macro  include/linux/pci_regs.h  114  #define PCI_INTERRUPT_PIN 0x3d
PCI_MIN_GNT  macro  include/linux/pci_regs.h  115  #define PCI_MIN_GNT 0x3e
PCI_MAX_LAT  macro  include/linux/pci_regs.h  116  #define PCI_MAX_LAT 0x3f
PCI_PRIMARY_BUS  macro  include/linux/pci_regs.h  119  #define PCI_PRIMARY_BUS 0x18
PCI_SECONDARY_BUS  macro  include/linux/pci_regs.h  120  #define PCI_SECONDARY_BUS 0x19
PCI_SUBORDINATE_BUS  macro  include/linux/pci_regs.h  121  #define PCI_SUBORDINATE_BUS 0x1a
PCI_SEC_LATENCY_TIMER  macro  include/linux/pci_regs.h  122  #define PCI_SEC_LATENCY_TIMER 0x1b
PCI_IO_BASE  macro  include/linux/pci_regs.h  123  #define PCI_IO_BASE 0x1c
PCI_IO_LIMIT  macro  include/linux/pci_regs.h  124  #define PCI_IO_LIMIT 0x1d
PCI_IO_RANGE_TYPE_MASK  macro  include/linux/pci_regs.h  125  #define PCI_IO_RANGE_TYPE_MASK 0x0fUL
PCI_IO_RANGE_TYPE_16  macro  include/linux/pci_regs.h  126  #define PCI_IO_RANGE_TYPE_16 0x00
PCI_IO_RANGE_TYPE_32  macro  include/linux/pci_regs.h  127  #define PCI_IO_RANGE_TYPE_32 0x01
PCI_IO_RANGE_MASK  macro  include/linux/pci_regs.h  128  #define PCI_IO_RANGE_MASK (~0x0fUL)
PCI_SEC_STATUS  macro  include/linux/pci_regs.h  129  #define PCI_SEC_STATUS 0x1e
PCI_MEMORY_BASE  macro  include/linux/pci_regs.h  130  #define PCI_MEMORY_BASE 0x20
PCI_MEMORY_LIMIT  macro  include/linux/pci_regs.h  131  #define PCI_MEMORY_LIMIT 0x22
PCI_MEMORY_RANGE_TYPE_MASK  macro  include/linux/pci_regs.h  132  #define PCI_MEMORY_RANGE_TYPE_MASK 0x0fUL
PCI_MEMORY_RANGE_MASK  macro  include/linux/pci_regs.h  133  #define PCI_MEMORY_RANGE_MASK (~0x0fUL)
PCI_PREF_MEMORY_BASE  macro  include/linux/pci_regs.h  134  #define PCI_PREF_MEMORY_BASE 0x24
PCI_PREF_MEMORY_LIMIT  macro  include/linux/pci_regs.h  135  #define PCI_PREF_MEMORY_LIMIT 0x26
PCI_PREF_RANGE_TYPE_MASK  macro  include/linux/pci_regs.h  136  #define PCI_PREF_RANGE_TYPE_MASK 0x0fUL
PCI_PREF_RANGE_TYPE_32  macro  include/linux/pci_regs.h  137  #define PCI_PREF_RANGE_TYPE_32 0x00
PCI_PREF_RANGE_TYPE_64  macro  include/linux/pci_regs.h  138  #define PCI_PREF_RANGE_TYPE_64 0x01
PCI_PREF_RANGE_MASK  macro  include/linux/pci_regs.h  139  #define PCI_PREF_RANGE_MASK (~0x0fUL)
PCI_PREF_BASE_UPPER32  macro  include/linux/pci_regs.h  140  #define PCI_PREF_BASE_UPPER32 0x28
PCI_PREF_LIMIT_UPPER32  macro  include/linux/pci_regs.h  141  #define PCI_PREF_LIMIT_UPPER32 0x2c
PCI_IO_BASE_UPPER16  macro  include/linux/pci_regs.h  142  #define PCI_IO_BASE_UPPER16 0x30
PCI_IO_LIMIT_UPPER16  macro  include/linux/pci_regs.h  143  #define PCI_IO_LIMIT_UPPER16 0x32
PCI_ROM_ADDRESS1  macro  include/linux/pci_regs.h  146  #define PCI_ROM_ADDRESS1 0x38
PCI_BRIDGE_CONTROL  macro  include/linux/pci_regs.h  148  #define PCI_BRIDGE_CONTROL 0x3e
PCI_BRIDGE_CTL_PARITY  macro  include/linux/pci_regs.h  149  #define PCI_BRIDGE_CTL_PARITY 0x01
PCI_BRIDGE_CTL_SERR  macro  include/linux/pci_regs.h  150  #define PCI_BRIDGE_CTL_SERR 0x02
PCI_BRIDGE_CTL_ISA  macro  include/linux/pci_regs.h  151  #define PCI_BRIDGE_CTL_ISA 0x04
PCI_BRIDGE_CTL_VGA  macro  include/linux/pci_regs.h  152  #define PCI_BRIDGE_CTL_VGA 0x08
PCI_BRIDGE_CTL_MASTER_ABORT  macro  include/linux/pci_regs.h  153  #define PCI_BRIDGE_CTL_MASTER_ABORT 0x20
PCI_BRIDGE_CTL_BUS_RESET  macro  include/linux/pci_regs.h  154  #define PCI_BRIDGE_CTL_BUS_RESET 0x40
PCI_BRIDGE_CTL_FAST_BACK  macro  include/linux/pci_regs.h  155  #define PCI_BRIDGE_CTL_FAST_BACK 0x80
PCI_CB_CAPABILITY_LIST  macro  include/linux/pci_regs.h  158  #define PCI_CB_CAPABILITY_LIST 0x14
PCI_CB_SEC_STATUS  macro  include/linux/pci_regs.h  160  #define PCI_CB_SEC_STATUS 0x16
PCI_CB_PRIMARY_BUS  macro  include/linux/pci_regs.h  161  #define PCI_CB_PRIMARY_BUS 0x18
PCI_CB_CARD_BUS  macro  include/linux/pci_regs.h  162  #define PCI_CB_CARD_BUS 0x19
PCI_CB_SUBORDINATE_BUS  macro  include/linux/pci_regs.h  163  #define PCI_CB_SUBORDINATE_BUS 0x1a
PCI_CB_LATENCY_TIMER  macro  include/linux/pci_regs.h  164  #define PCI_CB_LATENCY_TIMER 0x1b
PCI_CB_MEMORY_BASE_0  macro  include/linux/pci_regs.h  165  #define PCI_CB_MEMORY_BASE_0 0x1c
PCI_CB_MEMORY_LIMIT_0  macro  include/linux/pci_regs.h  166  #define PCI_CB_MEMORY_LIMIT_0 0x20
PCI_CB_MEMORY_BASE_1  macro  include/linux/pci_regs.h  167  #define PCI_CB_MEMORY_BASE_1 0x24
PCI_CB_MEMORY_LIMIT_1  macro  include/linux/pci_regs.h  168  #define PCI_CB_MEMORY_LIMIT_1 0x28
PCI_CB_IO_BASE_0  macro  include/linux/pci_regs.h  169  #define PCI_CB_IO_BASE_0 0x2c
PCI_CB_IO_BASE_0_HI  macro  include/linux/pci_regs.h  170  #define PCI_CB_IO_BASE_0_HI 0x2e
PCI_CB_IO_LIMIT_0  macro  include/linux/pci_regs.h  171  #define PCI_CB_IO_LIMIT_0 0x30
PCI_CB_IO_LIMIT_0_HI  macro  include/linux/pci_regs.h  172  #define PCI_CB_IO_LIMIT_0_HI 0x32
PCI_CB_IO_BASE_1  macro  include/linux/pci_regs.h  173  #define PCI_CB_IO_BASE_1 0x34
PCI_CB_IO_BASE_1_HI  macro  include/linux/pci_regs.h  174  #define PCI_CB_IO_BASE_1_HI 0x36
PCI_CB_IO_LIMIT_1  macro  include/linux/pci_regs.h  175  #define PCI_CB_IO_LIMIT_1 0x38
PCI_CB_IO_LIMIT_1_HI  macro  include/linux/pci_regs.h  176  #define PCI_CB_IO_LIMIT_1_HI 0x3a
PCI_CB_IO_RANGE_MASK  macro  include/linux/pci_regs.h  177  #define PCI_CB_IO_RANGE_MASK (~0x03UL)
PCI_CB_BRIDGE_CONTROL  macro  include/linux/pci_regs.h  179  #define PCI_CB_BRIDGE_CONTROL 0x3e
PCI_CB_BRIDGE_CTL_PARITY  macro  include/linux/pci_regs.h  180  #define PCI_CB_BRIDGE_CTL_PARITY 0x01
PCI_CB_BRIDGE_CTL_SERR  macro  include/linux/pci_regs.h  181  #define PCI_CB_BRIDGE_CTL_SERR 0x02
PCI_CB_BRIDGE_CTL_ISA  macro  include/linux/pci_regs.h  182  #define PCI_CB_BRIDGE_CTL_ISA 0x04
PCI_CB_BRIDGE_CTL_VGA  macro  include/linux/pci_regs.h  183  #define PCI_CB_BRIDGE_CTL_VGA 0x08
PCI_CB_BRIDGE_CTL_MASTER_ABORT  macro  include/linux/pci_regs.h  184  #define PCI_CB_BRIDGE_CTL_MASTER_ABORT 0x20
PCI_CB_BRIDGE_CTL_CB_RESET  macro  include/linux/pci_regs.h  185  #define PCI_CB_BRIDGE_CTL_CB_RESET 0x40
PCI_CB_BRIDGE_CTL_16BIT_INT  macro  include/linux/pci_regs.h  186  #define PCI_CB_BRIDGE_CTL_16BIT_INT 0x80
PCI_CB_BRIDGE_CTL_PREFETCH_MEM0  macro  include/linux/pci_regs.h  187  #define PCI_CB_BRIDGE_CTL_PREFETCH_MEM0 0x100
PCI_CB_BRIDGE_CTL_PREFETCH_MEM1  macro  include/linux/pci_regs.h  188  #define PCI_CB_BRIDGE_CTL_PREFETCH_MEM1 0x200
PCI_CB_BRIDGE_CTL_POST_WRITES  macro  include/linux/pci_regs.h  189  #define PCI_CB_BRIDGE_CTL_POST_WRITES 0x400
PCI_CB_SUBSYSTEM_VENDOR_ID  macro  include/linux/pci_regs.h  190  #define PCI_CB_SUBSYSTEM_VENDOR_ID 0x40
PCI_CB_SUBSYSTEM_ID  macro  include/linux/pci_regs.h  191  #define PCI_CB_SUBSYSTEM_ID 0x42
PCI_CB_LEGACY_MODE_BASE  macro  include/linux/pci_regs.h  192  #define PCI_CB_LEGACY_MODE_BASE 0x44
PCI_CAP_LIST_ID  macro  include/linux/pci_regs.h  197  #define PCI_CAP_LIST_ID 0
PCI_CAP_ID_PM  macro  include/linux/pci_regs.h  198  #define PCI_CAP_ID_PM 0x01
PCI_CAP_ID_AGP  macro  include/linux/pci_regs.h  199  #define PCI_CAP_ID_AGP 0x02
PCI_CAP_ID_VPD  macro  include/linux/pci_regs.h  200  #define PCI_CAP_ID_VPD 0x03
PCI_CAP_ID_SLOTID  macro  include/linux/pci_regs.h  201  #define PCI_CAP_ID_SLOTID 0x04
PCI_CAP_ID_MSI  macro  include/linux/pci_regs.h  202  #define PCI_CAP_ID_MSI 0x05
PCI_CAP_ID_CHSWP  macro  include/linux/pci_regs.h  203  #define PCI_CAP_ID_CHSWP 0x06
PCI_CAP_ID_PCIX  macro  include/linux/pci_regs.h  204  #define PCI_CAP_ID_PCIX 0x07
PCI_CAP_ID_HT  macro  include/linux/pci_regs.h  205  #define PCI_CAP_ID_HT 0x08
PCI_CAP_ID_VNDR  macro  include/linux/pci_regs.h  206  #define PCI_CAP_ID_VNDR 0x09
PCI_CAP_ID_DBG  macro  include/linux/pci_regs.h  207  #define PCI_CAP_ID_DBG 0x0A
PCI_CAP_ID_CCRC  macro  include/linux/pci_regs.h  208  #define PCI_CAP_ID_CCRC 0x0B
PCI_CAP_ID_SHPC  macro  include/linux/pci_regs.h  209  #define PCI_CAP_ID_SHPC 0x0C
PCI_CAP_ID_SSVID  macro  include/linux/pci_regs.h  210  #define PCI_CAP_ID_SSVID 0x0D
PCI_CAP_ID_AGP3  macro  include/linux/pci_regs.h  211  #define PCI_CAP_ID_AGP3 0x0E
PCI_CAP_ID_EXP  macro  include/linux/pci_regs.h  212  #define PCI_CAP_ID_EXP 0x10
PCI_CAP_ID_MSIX  macro  include/linux/pci_regs.h  213  #define PCI_CAP_ID_MSIX 0x11
PCI_CAP_ID_AF  macro  include/linux/pci_regs.h  214  #define PCI_CAP_ID_AF 0x13
PCI_CAP_LIST_NEXT  macro  include/linux/pci_regs.h  215  #define PCI_CAP_LIST_NEXT 1
PCI_CAP_FLAGS  macro  include/linux/pci_regs.h  216  #define PCI_CAP_FLAGS 2
PCI_CAP_SIZEOF  macro  include/linux/pci_regs.h  217  #define PCI_CAP_SIZEOF 4
PCI_PM_PMC  macro  include/linux/pci_regs.h  221  #define PCI_PM_PMC 2
PCI_PM_CAP_VER_MASK  macro  include/linux/pci_regs.h  222  #define PCI_PM_CAP_VER_MASK 0x0007
PCI_PM_CAP_PME_CLOCK  macro  include/linux/pci_regs.h  223  #define PCI_PM_CAP_PME_CLOCK 0x0008
PCI_PM_CAP_RESERVED  macro  include/linux/pci_regs.h  224  #define PCI_PM_CAP_RESERVED 0x0010
PCI_PM_CAP_DSI  macro  include/linux/pci_regs.h  225  #define PCI_PM_CAP_DSI 0x0020
PCI_PM_CAP_AUX_POWER  macro  include/linux/pci_regs.h  226  #define PCI_PM_CAP_AUX_POWER 0x01C0
PCI_PM_CAP_D1  macro  include/linux/pci_regs.h  227  #define PCI_PM_CAP_D1 0x0200
PCI_PM_CAP_D2  macro  include/linux/pci_regs.h  228  #define PCI_PM_CAP_D2 0x0400
PCI_PM_CAP_PME  macro  include/linux/pci_regs.h  229  #define PCI_PM_CAP_PME 0x0800
PCI_PM_CAP_PME_MASK  macro  include/linux/pci_regs.h  230  #define PCI_PM_CAP_PME_MASK 0xF800
PCI_PM_CAP_PME_D0  macro  include/linux/pci_regs.h  231  #define PCI_PM_CAP_PME_D0 0x0800
PCI_PM_CAP_PME_D1  macro  include/linux/pci_regs.h  232  #define PCI_PM_CAP_PME_D1 0x1000
PCI_PM_CAP_PME_D2  macro  include/linux/pci_regs.h  233  #define PCI_PM_CAP_PME_D2 0x2000
PCI_PM_CAP_PME_D3  macro  include/linux/pci_regs.h  234  #define PCI_PM_CAP_PME_D3 0x4000
PCI_PM_CAP_PME_D3cold  macro  include/linux/pci_regs.h  235  #define PCI_PM_CAP_PME_D3cold 0x8000
PCI_PM_CAP_PME_SHIFT  macro  include/linux/pci_regs.h  236  #define PCI_PM_CAP_PME_SHIFT 11
PCI_PM_CTRL  macro  include/linux/pci_regs.h  237  #define PCI_PM_CTRL 4
PCI_PM_CTRL_STATE_MASK  macro  include/linux/pci_regs.h  238  #define PCI_PM_CTRL_STATE_MASK 0x0003
PCI_PM_CTRL_NO_SOFT_RESET  macro  include/linux/pci_regs.h  239  #define PCI_PM_CTRL_NO_SOFT_RESET 0x0008
PCI_PM_CTRL_PME_ENABLE  macro  include/linux/pci_regs.h  240  #define PCI_PM_CTRL_PME_ENABLE 0x0100
PCI_PM_CTRL_DATA_SEL_MASK  macro  include/linux/pci_regs.h  241  #define PCI_PM_CTRL_DATA_SEL_MASK 0x1e00
PCI_PM_CTRL_DATA_SCALE_MASK  macro  include/linux/pci_regs.h  242  #define PCI_PM_CTRL_DATA_SCALE_MASK 0x6000
PCI_PM_CTRL_PME_STATUS  macro  include/linux/pci_regs.h  243  #define PCI_PM_CTRL_PME_STATUS 0x8000
PCI_PM_PPB_EXTENSIONS  macro  include/linux/pci_regs.h  244  #define PCI_PM_PPB_EXTENSIONS 6
PCI_PM_PPB_B2_B3  macro  include/linux/pci_regs.h  245  #define PCI_PM_PPB_B2_B3 0x40
PCI_PM_BPCC_ENABLE  macro  include/linux/pci_regs.h  246  #define PCI_PM_BPCC_ENABLE 0x80
PCI_PM_DATA_REGISTER  macro  include/linux/pci_regs.h  247  #define PCI_PM_DATA_REGISTER 7
PCI_PM_SIZEOF  macro  include/linux/pci_regs.h  248  #define PCI_PM_SIZEOF 8
PCI_AGP_VERSION  macro  include/linux/pci_regs.h  252  #define PCI_AGP_VERSION 2
PCI_AGP_RFU  macro  include/linux/pci_regs.h  253  #define PCI_AGP_RFU 3
PCI_AGP_STATUS  macro  include/linux/pci_regs.h  254  #define PCI_AGP_STATUS 4
PCI_AGP_STATUS_RQ_MASK  macro  include/linux/pci_regs.h  255  #define PCI_AGP_STATUS_RQ_MASK 0xff000000
PCI_AGP_STATUS_SBA  macro  include/linux/pci_regs.h  256  #define PCI_AGP_STATUS_SBA 0x0200
PCI_AGP_STATUS_64BIT  macro  include/linux/pci_regs.h  257  #define PCI_AGP_STATUS_64BIT 0x0020
PCI_AGP_STATUS_FW  macro  include/linux/pci_regs.h  258  #define PCI_AGP_STATUS_FW 0x0010
PCI_AGP_STATUS_RATE4  macro  include/linux/pci_regs.h  259  #define PCI_AGP_STATUS_RATE4 0x0004
PCI_AGP_STATUS_RATE2  macro  include/linux/pci_regs.h  260  #define PCI_AGP_STATUS_RATE2 0x0002
PCI_AGP_STATUS_RATE1  macro  include/linux/pci_regs.h  261  #define PCI_AGP_STATUS_RATE1 0x0001
PCI_AGP_COMMAND  macro  include/linux/pci_regs.h  262  #define PCI_AGP_COMMAND 8
PCI_AGP_COMMAND_RQ_MASK  macro  include/linux/pci_regs.h  263  #define PCI_AGP_COMMAND_RQ_MASK 0xff000000
PCI_AGP_COMMAND_SBA  macro  include/linux/pci_regs.h  264  #define PCI_AGP_COMMAND_SBA 0x0200
PCI_AGP_COMMAND_AGP  macro  include/linux/pci_regs.h  265  #define PCI_AGP_COMMAND_AGP 0x0100
PCI_AGP_COMMAND_64BIT  macro  include/linux/pci_regs.h  266  #define PCI_AGP_COMMAND_64BIT 0x0020
PCI_AGP_COMMAND_FW  macro  include/linux/pci_regs.h  267  #define PCI_AGP_COMMAND_FW 0x0010
PCI_AGP_COMMAND_RATE4  macro  include/linux/pci_regs.h  268  #define PCI_AGP_COMMAND_RATE4 0x0004
PCI_AGP_COMMAND_RATE2  macro  include/linux/pci_regs.h  269  #define PCI_AGP_COMMAND_RATE2 0x0002
PCI_AGP_COMMAND_RATE1  macro  include/linux/pci_regs.h  270  #define PCI_AGP_COMMAND_RATE1 0x0001
PCI_AGP_SIZEOF  macro  include/linux/pci_regs.h  271  #define PCI_AGP_SIZEOF 12
PCI_VPD_ADDR  macro  include/linux/pci_regs.h  275  #define PCI_VPD_ADDR 2
PCI_VPD_ADDR_MASK  macro  include/linux/pci_regs.h  276  #define PCI_VPD_ADDR_MASK 0x7fff
PCI_VPD_ADDR_F  macro  include/linux/pci_regs.h  277  #define PCI_VPD_ADDR_F 0x8000
PCI_VPD_DATA  macro  include/linux/pci_regs.h  278  #define PCI_VPD_DATA 4
PCI_SID_ESR  macro  include/linux/pci_regs.h  282  #define PCI_SID_ESR 2
PCI_SID_ESR_NSLOTS  macro  include/linux/pci_regs.h  283  #define PCI_SID_ESR_NSLOTS 0x1f
PCI_SID_ESR_FIC  macro  include/linux/pci_regs.h  284  #define PCI_SID_ESR_FIC 0x20
PCI_SID_CHASSIS_NR  macro  include/linux/pci_regs.h  285  #define PCI_SID_CHASSIS_NR 3
PCI_MSI_FLAGS  macro  include/linux/pci_regs.h  289  #define PCI_MSI_FLAGS 2
PCI_MSI_FLAGS_64BIT  macro  include/linux/pci_regs.h  290  #define PCI_MSI_FLAGS_64BIT 0x80
PCI_MSI_FLAGS_QSIZE  macro  include/linux/pci_regs.h  291  #define PCI_MSI_FLAGS_QSIZE 0x70
PCI_MSI_FLAGS_QMASK  macro  include/linux/pci_regs.h  292  #define PCI_MSI_FLAGS_QMASK 0x0e
PCI_MSI_FLAGS_ENABLE  macro  include/linux/pci_regs.h  293  #define PCI_MSI_FLAGS_ENABLE 0x01
PCI_MSI_FLAGS_MASKBIT  macro  include/linux/pci_regs.h  294  #define PCI_MSI_FLAGS_MASKBIT 0x100
PCI_MSI_RFU  macro  include/linux/pci_regs.h  295  #define PCI_MSI_RFU 3
PCI_MSI_ADDRESS_LO  macro  include/linux/pci_regs.h  296  #define PCI_MSI_ADDRESS_LO 4
PCI_MSI_ADDRESS_HI  macro  include/linux/pci_regs.h  297  #define PCI_MSI_ADDRESS_HI 8
PCI_MSI_DATA_32  macro  include/linux/pci_regs.h  298  #define PCI_MSI_DATA_32 8
PCI_MSI_MASK_32  macro  include/linux/pci_regs.h  299  #define PCI_MSI_MASK_32 12
PCI_MSI_DATA_64  macro  include/linux/pci_regs.h  300  #define PCI_MSI_DATA_64 12
PCI_MSI_MASK_64  macro  include/linux/pci_regs.h  301  #define PCI_MSI_MASK_64 16
PCI_MSIX_FLAGS  macro  include/linux/pci_regs.h  304  #define PCI_MSIX_FLAGS 2
PCI_MSIX_FLAGS_QSIZE  macro  include/linux/pci_regs.h  305  #define PCI_MSIX_FLAGS_QSIZE 0x7FF
PCI_MSIX_FLAGS_ENABLE  macro  include/linux/pci_regs.h  306  #define PCI_MSIX_FLAGS_ENABLE (1 << 15)
PCI_MSIX_FLAGS_MASKALL  macro  include/linux/pci_regs.h  307  #define PCI_MSIX_FLAGS_MASKALL (1 << 14)
PCI_MSIX_TABLE  macro  include/linux/pci_regs.h  308  #define PCI_MSIX_TABLE 4
PCI_MSIX_PBA  macro  include/linux/pci_regs.h  309  #define PCI_MSIX_PBA 8
PCI_MSIX_FLAGS_BIRMASK  macro  include/linux/pci_regs.h  310  #define PCI_MSIX_FLAGS_BIRMASK (7 << 0)
PCI_MSIX_ENTRY_SIZE  macro  include/linux/pci_regs.h  313  #define PCI_MSIX_ENTRY_SIZE 16
PCI_MSIX_ENTRY_LOWER_ADDR  macro  include/linux/pci_regs.h  314  #define PCI_MSIX_ENTRY_LOWER_ADDR 0
PCI_MSIX_ENTRY_UPPER_ADDR  macro  include/linux/pci_regs.h  315  #define PCI_MSIX_ENTRY_UPPER_ADDR 4
PCI_MSIX_ENTRY_DATA  macro  include/linux/pci_regs.h  316  #define PCI_MSIX_ENTRY_DATA 8
PCI_MSIX_ENTRY_VECTOR_CTRL  macro  include/linux/pci_regs.h  317  #define PCI_MSIX_ENTRY_VECTOR_CTRL 12
PCI_MSIX_ENTRY_CTRL_MASKBIT  macro  include/linux/pci_regs.h  318  #define PCI_MSIX_ENTRY_CTRL_MASKBIT 1
PCI_CHSWP_CSR  macro  include/linux/pci_regs.h  322  #define PCI_CHSWP_CSR 2
PCI_CHSWP_DHA  macro  include/linux/pci_regs.h  323  #define PCI_CHSWP_DHA 0x01
PCI_CHSWP_EIM  macro  include/linux/pci_regs.h  324  #define PCI_CHSWP_EIM 0x02
PCI_CHSWP_PIE  macro  include/linux/pci_regs.h  325  #define PCI_CHSWP_PIE 0x04
PCI_CHSWP_LOO  macro  include/linux/pci_regs.h  326  #define PCI_CHSWP_LOO 0x08
PCI_CHSWP_PI  macro  include/linux/pci_regs.h  327  #define PCI_CHSWP_PI 0x30
PCI_CHSWP_EXT  macro  include/linux/pci_regs.h  328  #define PCI_CHSWP_EXT 0x40
PCI_CHSWP_INS  macro  include/linux/pci_regs.h  329  #define PCI_CHSWP_INS 0x80
PCI_AF_LENGTH  macro  include/linux/pci_regs.h  333  #define PCI_AF_LENGTH 2
PCI_AF_CAP  macro  include/linux/pci_regs.h  334  #define PCI_AF_CAP 3
PCI_AF_CAP_TP  macro  include/linux/pci_regs.h  335  #define PCI_AF_CAP_TP 0x01
PCI_AF_CAP_FLR  macro  include/linux/pci_regs.h  336  #define PCI_AF_CAP_FLR 0x02
PCI_AF_CTRL  macro  include/linux/pci_regs.h  337  #define PCI_AF_CTRL 4
PCI_AF_CTRL_FLR  macro  include/linux/pci_regs.h  338  #define PCI_AF_CTRL_FLR 0x01
PCI_AF_STATUS  macro  include/linux/pci_regs.h  339  #define PCI_AF_STATUS 5
PCI_AF_STATUS_TP  macro  include/linux/pci_regs.h  340  #define PCI_AF_STATUS_TP 0x01
PCI_X_CMD  macro  include/linux/pci_regs.h  344  #define PCI_X_CMD 2
PCI_X_CMD_DPERR_E  macro  include/linux/pci_regs.h  345  #define PCI_X_CMD_DPERR_E 0x0001
PCI_X_CMD_ERO  macro  include/linux/pci_regs.h  346  #define PCI_X_CMD_ERO 0x0002
PCI_X_CMD_READ_512  macro  include/linux/pci_regs.h  347  #define PCI_X_CMD_READ_512 0x0000
PCI_X_CMD_READ_1K  macro  include/linux/pci_regs.h  348  #define PCI_X_CMD_READ_1K 0x0004
PCI_X_CMD_READ_2K  macro  include/linux/pci_regs.h  349  #define PCI_X_CMD_READ_2K 0x0008
PCI_X_CMD_READ_4K  macro  include/linux/pci_regs.h  350  #define PCI_X_CMD_READ_4K 0x000c
PCI_X_CMD_MAX_READ  macro  include/linux/pci_regs.h  351  #define PCI_X_CMD_MAX_READ 0x000c
PCI_X_CMD_SPLIT_1  macro  include/linux/pci_regs.h  353  #define PCI_X_CMD_SPLIT_1 0x0000
PCI_X_CMD_SPLIT_2  macro  include/linux/pci_regs.h  354  #define PCI_X_CMD_SPLIT_2 0x0010
PCI_X_CMD_SPLIT_3  macro  include/linux/pci_regs.h  355  #define PCI_X_CMD_SPLIT_3 0x0020
PCI_X_CMD_SPLIT_4  macro  include/linux/pci_regs.h  356  #define PCI_X_CMD_SPLIT_4 0x0030
PCI_X_CMD_SPLIT_8  macro  include/linux/pci_regs.h  357  #define PCI_X_CMD_SPLIT_8 0x0040
PCI_X_CMD_SPLIT_12  macro  include/linux/pci_regs.h  358  #define PCI_X_CMD_SPLIT_12 0x0050
PCI_X_CMD_SPLIT_16  macro  include/linux/pci_regs.h  359  #define PCI_X_CMD_SPLIT_16 0x0060
PCI_X_CMD_SPLIT_32  macro  include/linux/pci_regs.h  360  #define PCI_X_CMD_SPLIT_32 0x0070
PCI_X_CMD_MAX_SPLIT  macro  include/linux/pci_regs.h  361  #define PCI_X_CMD_MAX_SPLIT 0x0070
PCI_X_CMD_VERSION  macro  include/linux/pci_regs.h  362  #define PCI_X_CMD_VERSION(x) (((x) >> 12) & 3)
PCI_X_STATUS  macro  include/linux/pci_regs.h  363  #define PCI_X_STATUS 4
PCI_X_STATUS_DEVFN  macro  include/linux/pci_regs.h  364  #define PCI_X_STATUS_DEVFN 0x000000ff
PCI_X_STATUS_BUS  macro  include/linux/pci_regs.h  365  #define PCI_X_STATUS_BUS 0x0000ff00
PCI_X_STATUS_64BIT  macro  include/linux/pci_regs.h  366  #define PCI_X_STATUS_64BIT 0x00010000
PCI_X_STATUS_133MHZ  macro  include/linux/pci_regs.h  367  #define PCI_X_STATUS_133MHZ 0x00020000
PCI_X_STATUS_SPL_DISC  macro  include/linux/pci_regs.h  368  #define PCI_X_STATUS_SPL_DISC 0x00040000
PCI_X_STATUS_UNX_SPL  macro  include/linux/pci_regs.h  369  #define PCI_X_STATUS_UNX_SPL 0x00080000
PCI_X_STATUS_COMPLEX  macro  include/linux/pci_regs.h  370  #define PCI_X_STATUS_COMPLEX 0x00100000
PCI_X_STATUS_MAX_READ  macro  include/linux/pci_regs.h  371  #define PCI_X_STATUS_MAX_READ 0x00600000
PCI_X_STATUS_MAX_SPLIT  macro  include/linux/pci_regs.h  372  #define PCI_X_STATUS_MAX_SPLIT 0x03800000
PCI_X_STATUS_MAX_CUM  macro  include/linux/pci_regs.h  373  #define PCI_X_STATUS_MAX_CUM 0x1c000000
PCI_X_STATUS_SPL_ERR  macro  include/linux/pci_regs.h  374  #define PCI_X_STATUS_SPL_ERR 0x20000000
PCI_X_STATUS_266MHZ  macro  include/linux/pci_regs.h  375  #define PCI_X_STATUS_266MHZ 0x40000000
PCI_X_STATUS_533MHZ  macro  include/linux/pci_regs.h  376  #define PCI_X_STATUS_533MHZ 0x80000000
PCI_SSVID_VENDOR_ID  macro  include/linux/pci_regs.h  380  #define PCI_SSVID_VENDOR_ID 4
PCI_SSVID_DEVICE_ID  macro  include/linux/pci_regs.h  381  #define PCI_SSVID_DEVICE_ID 6
PCI_EXP_FLAGS  macro  include/linux/pci_regs.h  385  #define PCI_EXP_FLAGS 2
PCI_EXP_FLAGS_VERS  macro  include/linux/pci_regs.h  386  #define PCI_EXP_FLAGS_VERS 0x000f
PCI_EXP_FLAGS_TYPE  macro  include/linux/pci_regs.h  387  #define PCI_EXP_FLAGS_TYPE 0x00f0
PCI_EXP_TYPE_ENDPOINT  macro  include/linux/pci_regs.h  388  #define PCI_EXP_TYPE_ENDPOINT 0x0
PCI_EXP_TYPE_LEG_END  macro  include/linux/pci_regs.h  389  #define PCI_EXP_TYPE_LEG_END 0x1
PCI_EXP_TYPE_ROOT_PORT  macro  include/linux/pci_regs.h  390  #define PCI_EXP_TYPE_ROOT_PORT 0x4
PCI_EXP_TYPE_UPSTREAM  macro  include/linux/pci_regs.h  391  #define PCI_EXP_TYPE_UPSTREAM 0x5
PCI_EXP_TYPE_DOWNSTREAM  macro  include/linux/pci_regs.h  392  #define PCI_EXP_TYPE_DOWNSTREAM 0x6
PCI_EXP_TYPE_PCI_BRIDGE  macro  include/linux/pci_regs.h  393  #define PCI_EXP_TYPE_PCI_BRIDGE 0x7
PCI_EXP_TYPE_PCIE_BRIDGE  macro  include/linux/pci_regs.h  394  #define PCI_EXP_TYPE_PCIE_BRIDGE 0x8
PCI_EXP_TYPE_RC_END  macro  include/linux/pci_regs.h  395  #define PCI_EXP_TYPE_RC_END 0x9
PCI_EXP_TYPE_RC_EC  macro  include/linux/pci_regs.h  396  #define PCI_EXP_TYPE_RC_EC 0xa
PCI_EXP_FLAGS_SLOT  macro  include/linux/pci_regs.h  397  #define PCI_EXP_FLAGS_SLOT 0x0100
PCI_EXP_FLAGS_IRQ  macro  include/linux/pci_regs.h  398  #define PCI_EXP_FLAGS_IRQ 0x3e00
PCI_EXP_DEVCAP  macro  include/linux/pci_regs.h  399  #define PCI_EXP_DEVCAP 4
PCI_EXP_DEVCAP_PAYLOAD  macro  include/linux/pci_regs.h  400  #define PCI_EXP_DEVCAP_PAYLOAD 0x07
PCI_EXP_DEVCAP_PHANTOM  macro  include/linux/pci_regs.h  401  #define PCI_EXP_DEVCAP_PHANTOM 0x18
PCI_EXP_DEVCAP_EXT_TAG  macro  include/linux/pci_regs.h  402  #define PCI_EXP_DEVCAP_EXT_TAG 0x20
PCI_EXP_DEVCAP_L0S  macro  include/linux/pci_regs.h  403  #define PCI_EXP_DEVCAP_L0S 0x1c0
PCI_EXP_DEVCAP_L1  macro  include/linux/pci_regs.h  404  #define PCI_EXP_DEVCAP_L1 0xe00
PCI_EXP_DEVCAP_ATN_BUT  macro  include/linux/pci_regs.h  405  #define PCI_EXP_DEVCAP_ATN_BUT 0x1000
PCI_EXP_DEVCAP_ATN_IND  macro  include/linux/pci_regs.h  406  #define PCI_EXP_DEVCAP_ATN_IND 0x2000
PCI_EXP_DEVCAP_PWR_IND  macro  include/linux/pci_regs.h  407  #define PCI_EXP_DEVCAP_PWR_IND 0x4000
PCI_EXP_DEVCAP_RBER  macro  include/linux/pci_regs.h  408  #define PCI_EXP_DEVCAP_RBER 0x8000
PCI_EXP_DEVCAP_PWR_VAL  macro  include/linux/pci_regs.h  409  #define PCI_EXP_DEVCAP_PWR_VAL 0x3fc0000
PCI_EXP_DEVCAP_PWR_SCL  macro  include/linux/pci_regs.h  410  #define PCI_EXP_DEVCAP_PWR_SCL 0xc000000
PCI_EXP_DEVCAP_FLR  macro  include/linux/pci_regs.h  411  #define PCI_EXP_DEVCAP_FLR 0x10000000
PCI_EXP_DEVCTL  macro  include/linux/pci_regs.h  412  #define PCI_EXP_DEVCTL 8
PCI_EXP_DEVCTL_CERE  macro  include/linux/pci_regs.h  413  #define PCI_EXP_DEVCTL_CERE 0x0001
PCI_EXP_DEVCTL_NFERE  macro  include/linux/pci_regs.h  414  #define PCI_EXP_DEVCTL_NFERE 0x0002
PCI_EXP_DEVCTL_FERE  macro  include/linux/pci_regs.h  415  #define PCI_EXP_DEVCTL_FERE 0x0004
PCI_EXP_DEVCTL_URRE  macro  include/linux/pci_regs.h  416  #define PCI_EXP_DEVCTL_URRE 0x0008
PCI_EXP_DEVCTL_RELAX_EN  macro  include/linux/pci_regs.h  417  #define PCI_EXP_DEVCTL_RELAX_EN 0x0010
PCI_EXP_DEVCTL_PAYLOAD  macro  include/linux/pci_regs.h  418  #define PCI_EXP_DEVCTL_PAYLOAD 0x00e0
PCI_EXP_DEVCTL_EXT_TAG  macro  include/linux/pci_regs.h  419  #define PCI_EXP_DEVCTL_EXT_TAG 0x0100
PCI_EXP_DEVCTL_PHANTOM  macro  include/linux/pci_regs.h  420  #define PCI_EXP_DEVCTL_PHANTOM 0x0200
PCI_EXP_DEVCTL_AUX_PME  macro  include/linux/pci_regs.h  421  #define PCI_EXP_DEVCTL_AUX_PME 0x0400
PCI_EXP_DEVCTL_NOSNOOP_EN  macro  include/linux/pci_regs.h  422  #define PCI_EXP_DEVCTL_NOSNOOP_EN 0x0800
PCI_EXP_DEVCTL_READRQ  macro  include/linux/pci_regs.h  423  #define PCI_EXP_DEVCTL_READRQ 0x7000
PCI_EXP_DEVCTL_BCR_FLR  macro  include/linux/pci_regs.h  424  #define PCI_EXP_DEVCTL_BCR_FLR 0x8000
PCI_EXP_DEVSTA  macro  include/linux/pci_regs.h  425  #define PCI_EXP_DEVSTA 10
PCI_EXP_DEVSTA_CED  macro  include/linux/pci_regs.h  426  #define PCI_EXP_DEVSTA_CED 0x01
PCI_EXP_DEVSTA_NFED  macro  include/linux/pci_regs.h  427  #define PCI_EXP_DEVSTA_NFED 0x02
PCI_EXP_DEVSTA_FED  macro  include/linux/pci_regs.h  428  #define PCI_EXP_DEVSTA_FED 0x04
PCI_EXP_DEVSTA_URD  macro  include/linux/pci_regs.h  429  #define PCI_EXP_DEVSTA_URD 0x08
PCI_EXP_DEVSTA_AUXPD  macro  include/linux/pci_regs.h  430  #define PCI_EXP_DEVSTA_AUXPD 0x10
PCI_EXP_DEVSTA_TRPND  macro  include/linux/pci_regs.h  431  #define PCI_EXP_DEVSTA_TRPND 0x20
PCI_EXP_LNKCAP  macro  include/linux/pci_regs.h  432  #define PCI_EXP_LNKCAP 12
PCI_EXP_LNKCAP_SLS  macro  include/linux/pci_regs.h  433  #define PCI_EXP_LNKCAP_SLS 0x0000000f
PCI_EXP_LNKCAP_MLW  macro  include/linux/pci_regs.h  434  #define PCI_EXP_LNKCAP_MLW 0x000003f0
PCI_EXP_LNKCAP_ASPMS  macro  include/linux/pci_regs.h  435  #define PCI_EXP_LNKCAP_ASPMS 0x00000c00
PCI_EXP_LNKCAP_L0SEL  macro  include/linux/pci_regs.h  436  #define PCI_EXP_LNKCAP_L0SEL 0x00007000
PCI_EXP_LNKCAP_L1EL  macro  include/linux/pci_regs.h  437  #define PCI_EXP_LNKCAP_L1EL 0x00038000
PCI_EXP_LNKCAP_CLKPM  macro  include/linux/pci_regs.h  438  #define PCI_EXP_LNKCAP_CLKPM 0x00040000
PCI_EXP_LNKCAP_SDERC  macro  include/linux/pci_regs.h  439  #define PCI_EXP_LNKCAP_SDERC 0x00080000
PCI_EXP_LNKCAP_DLLLARC  macro  include/linux/pci_regs.h  440  #define PCI_EXP_LNKCAP_DLLLARC 0x00100000
PCI_EXP_LNKCAP_LBNC  macro  include/linux/pci_regs.h  441  #define PCI_EXP_LNKCAP_LBNC 0x00200000
PCI_EXP_LNKCAP_PN  macro  include/linux/pci_regs.h  442  #define PCI_EXP_LNKCAP_PN 0xff000000
PCI_EXP_LNKCTL  macro  include/linux/pci_regs.h  443  #define PCI_EXP_LNKCTL 16
PCI_EXP_LNKCTL_ASPMC  macro  include/linux/pci_regs.h  444  #define PCI_EXP_LNKCTL_ASPMC 0x0003
PCI_EXP_LNKCTL_RCB  macro  include/linux/pci_regs.h  445  #define PCI_EXP_LNKCTL_RCB 0x0008
PCI_EXP_LNKCTL_LD  macro  include/linux/pci_regs.h  446  #define PCI_EXP_LNKCTL_LD 0x0010
PCI_EXP_LNKCTL_RL  macro  include/linux/pci_regs.h  447  #define PCI_EXP_LNKCTL_RL 0x0020
PCI_EXP_LNKCTL_CCC  macro  include/linux/pci_regs.h  448  #define PCI_EXP_LNKCTL_CCC 0x0040
PCI_EXP_LNKCTL_ES  macro  include/linux/pci_regs.h  449  #define PCI_EXP_LNKCTL_ES 0x0080
PCI_EXP_LNKCTL_CLKREQ_EN  macro  include/linux/pci_regs.h  450  #define PCI_EXP_LNKCTL_CLKREQ_EN 0x100
PCI_EXP_LNKCTL_HAWD  macro  include/linux/pci_regs.h  451  #define PCI_EXP_LNKCTL_HAWD 0x0200
PCI_EXP_LNKCTL_LBMIE  macro  include/linux/pci_regs.h  452  #define PCI_EXP_LNKCTL_LBMIE 0x0400
PCI_EXP_LNKCTL_LABIE  macro  include/linux/pci_regs.h  453  #define PCI_EXP_LNKCTL_LABIE 0x0800
PCI_EXP_LNKSTA  macro  include/linux/pci_regs.h  454  #define PCI_EXP_LNKSTA 18
PCI_EXP_LNKSTA_CLS  macro  include/linux/pci_regs.h  455  #define PCI_EXP_LNKSTA_CLS 0x000f
PCI_EXP_LNKSTA_CLS_2_5GB  macro  include/linux/pci_regs.h  456  #define PCI_EXP_LNKSTA_CLS_2_5GB 0x01
PCI_EXP_LNKSTA_CLS_5_0GB  macro  include/linux/pci_regs.h  457  #define PCI_EXP_LNKSTA_CLS_5_0GB 0x02
PCI_EXP_LNKSTA_NLW  macro  include/linux/pci_regs.h  458  #define PCI_EXP_LNKSTA_NLW 0x03f0
PCI_EXP_LNKSTA_NLW_SHIFT  macro  include/linux/pci_regs.h  459  #define PCI_EXP_LNKSTA_NLW_SHIFT 4
PCI_EXP_LNKSTA_LT  macro  include/linux/pci_regs.h  460  #define PCI_EXP_LNKSTA_LT 0x0800
PCI_EXP_LNKSTA_SLC  macro  include/linux/pci_regs.h  461  #define PCI_EXP_LNKSTA_SLC 0x1000
PCI_EXP_LNKSTA_DLLLA  macro  include/linux/pci_regs.h  462  #define PCI_EXP_LNKSTA_DLLLA 0x2000
PCI_EXP_LNKSTA_LBMS  macro  include/linux/pci_regs.h  463  #define PCI_EXP_LNKSTA_LBMS 0x4000
PCI_EXP_LNKSTA_LABS  macro  include/linux/pci_regs.h  464  #define PCI_EXP_LNKSTA_LABS 0x8000
PCI_EXP_SLTCAP  macro  include/linux/pci_regs.h  465  #define PCI_EXP_SLTCAP 20
PCI_EXP_SLTCAP_ABP  macro  include/linux/pci_regs.h  466  #define PCI_EXP_SLTCAP_ABP 0x00000001
PCI_EXP_SLTCAP_PCP  macro  include/linux/pci_regs.h  467  #define PCI_EXP_SLTCAP_PCP 0x00000002
PCI_EXP_SLTCAP_MRLSP  macro  include/linux/pci_regs.h  468  #define PCI_EXP_SLTCAP_MRLSP 0x00000004
PCI_EXP_SLTCAP_AIP  macro  include/linux/pci_regs.h  469  #define PCI_EXP_SLTCAP_AIP 0x00000008
PCI_EXP_SLTCAP_PIP  macro  include/linux/pci_regs.h  470  #define PCI_EXP_SLTCAP_PIP 0x00000010
PCI_EXP_SLTCAP_HPS  macro  include/linux/pci_regs.h  471  #define PCI_EXP_SLTCAP_HPS 0x00000020
PCI_EXP_SLTCAP_HPC  macro  include/linux/pci_regs.h  472  #define PCI_EXP_SLTCAP_HPC 0x00000040
PCI_EXP_SLTCAP_SPLV  macro  include/linux/pci_regs.h  473  #define PCI_EXP_SLTCAP_SPLV 0x00007f80
PCI_EXP_SLTCAP_SPLS  macro  include/linux/pci_regs.h  474  #define PCI_EXP_SLTCAP_SPLS 0x00018000
PCI_EXP_SLTCAP_EIP  macro  include/linux/pci_regs.h  475  #define PCI_EXP_SLTCAP_EIP 0x00020000
PCI_EXP_SLTCAP_NCCS  macro  include/linux/pci_regs.h  476  #define PCI_EXP_SLTCAP_NCCS 0x00040000
PCI_EXP_SLTCAP_PSN  macro  include/linux/pci_regs.h  477  #define PCI_EXP_SLTCAP_PSN 0xfff80000
PCI_EXP_SLTCTL  macro  include/linux/pci_regs.h  478  #define PCI_EXP_SLTCTL 24
PCI_EXP_SLTCTL_ABPE  macro  include/linux/pci_regs.h  479  #define PCI_EXP_SLTCTL_ABPE 0x0001
PCI_EXP_SLTCTL_PFDE  macro  include/linux/pci_regs.h  480  #define PCI_EXP_SLTCTL_PFDE 0x0002
PCI_EXP_SLTCTL_MRLSCE  macro  include/linux/pci_regs.h  481  #define PCI_EXP_SLTCTL_MRLSCE 0x0004
PCI_EXP_SLTCTL_PDCE  macro  include/linux/pci_regs.h  482  #define PCI_EXP_SLTCTL_PDCE 0x0008
PCI_EXP_SLTCTL_CCIE  macro  include/linux/pci_regs.h  483  #define PCI_EXP_SLTCTL_CCIE 0x0010
PCI_EXP_SLTCTL_HPIE  macro  include/linux/pci_regs.h  484  #define PCI_EXP_SLTCTL_HPIE 0x0020
PCI_EXP_SLTCTL_AIC  macro  include/linux/pci_regs.h  485  #define PCI_EXP_SLTCTL_AIC 0x00c0
PCI_EXP_SLTCTL_PIC  macro  include/linux/pci_regs.h  486  #define PCI_EXP_SLTCTL_PIC 0x0300
PCI_EXP_SLTCTL_PCC  macro  include/linux/pci_regs.h  487  #define PCI_EXP_SLTCTL_PCC 0x0400
PCI_EXP_SLTCTL_EIC  macro  include/linux/pci_regs.h  488  #define PCI_EXP_SLTCTL_EIC 0x0800
PCI_EXP_SLTCTL_DLLSCE  macro  include/linux/pci_regs.h  489  #define PCI_EXP_SLTCTL_DLLSCE 0x1000
PCI_EXP_SLTSTA  macro  include/linux/pci_regs.h  490  #define PCI_EXP_SLTSTA 26
PCI_EXP_SLTSTA_ABP  macro  include/linux/pci_regs.h  491  #define PCI_EXP_SLTSTA_ABP 0x0001
PCI_EXP_SLTSTA_PFD  macro  include/linux/pci_regs.h  492  #define PCI_EXP_SLTSTA_PFD 0x0002
PCI_EXP_SLTSTA_MRLSC  macro  include/linux/pci_regs.h  493  #define PCI_EXP_SLTSTA_MRLSC 0x0004
PCI_EXP_SLTSTA_PDC  macro  include/linux/pci_regs.h  494  #define PCI_EXP_SLTSTA_PDC 0x0008
PCI_EXP_SLTSTA_CC  macro  include/linux/pci_regs.h  495  #define PCI_EXP_SLTSTA_CC 0x0010
PCI_EXP_SLTSTA_MRLSS  macro  include/linux/pci_regs.h  496  #define PCI_EXP_SLTSTA_MRLSS 0x0020
PCI_EXP_SLTSTA_PDS  macro  include/linux/pci_regs.h  497  #define PCI_EXP_SLTSTA_PDS 0x0040
PCI_EXP_SLTSTA_EIS  macro  include/linux/pci_regs.h  498  #define PCI_EXP_SLTSTA_EIS 0x0080
PCI_EXP_SLTSTA_DLLSC  macro  include/linux/pci_regs.h  499  #define PCI_EXP_SLTSTA_DLLSC 0x0100
PCI_EXP_RTCTL  macro  include/linux/pci_regs.h  500  #define PCI_EXP_RTCTL 28
PCI_EXP_RTCTL_SECEE  macro  include/linux/pci_regs.h  501  #define PCI_EXP_RTCTL_SECEE 0x01
PCI_EXP_RTCTL_SENFEE  macro  include/linux/pci_regs.h  502  #define PCI_EXP_RTCTL_SENFEE 0x02
PCI_EXP_RTCTL_SEFEE  macro  include/linux/pci_regs.h  503  #define PCI_EXP_RTCTL_SEFEE 0x04
PCI_EXP_RTCTL_PMEIE  macro  include/linux/pci_regs.h  504  #define PCI_EXP_RTCTL_PMEIE 0x08
PCI_EXP_RTCTL_CRSSVE  macro  include/linux/pci_regs.h  505  #define PCI_EXP_RTCTL_CRSSVE 0x10
PCI_EXP_RTCAP  macro  include/linux/pci_regs.h  506  #define PCI_EXP_RTCAP 30
PCI_EXP_RTSTA  macro  include/linux/pci_regs.h  507  #define PCI_EXP_RTSTA 32
PCI_EXP_RTSTA_PME  macro  include/linux/pci_regs.h  508  #define PCI_EXP_RTSTA_PME 0x10000
PCI_EXP_RTSTA_PENDING  macro  include/linux/pci_regs.h  509  #define PCI_EXP_RTSTA_PENDING 0x20000
PCI_EXP_DEVCAP2  macro  include/linux/pci_regs.h  510  #define PCI_EXP_DEVCAP2 36
PCI_EXP_DEVCAP2_ARI  macro  include/linux/pci_regs.h  511  #define PCI_EXP_DEVCAP2_ARI 0x20
PCI_EXP_DEVCAP2_LTR  macro  include/linux/pci_regs.h  512  #define PCI_EXP_DEVCAP2_LTR 0x800
PCI_EXP_OBFF_MASK  macro  include/linux/pci_regs.h  513  #define PCI_EXP_OBFF_MASK 0xc0000
PCI_EXP_OBFF_MSG  macro  include/linux/pci_regs.h  514  #define PCI_EXP_OBFF_MSG 0x40000
PCI_EXP_OBFF_WAKE  macro  include/linux/pci_regs.h  515  #define PCI_EXP_OBFF_WAKE 0x80000
PCI_EXP_DEVCTL2  macro  include/linux/pci_regs.h  516  #define PCI_EXP_DEVCTL2 40
PCI_EXP_DEVCTL2_ARI  macro  include/linux/pci_regs.h  517  #define PCI_EXP_DEVCTL2_ARI 0x20
PCI_EXP_IDO_REQ_EN  macro  include/linux/pci_regs.h  518  #define PCI_EXP_IDO_REQ_EN 0x100
PCI_EXP_IDO_CMP_EN  macro  include/linux/pci_regs.h  519  #define PCI_EXP_IDO_CMP_EN 0x200
PCI_EXP_LTR_EN  macro  include/linux/pci_regs.h  520  #define PCI_EXP_LTR_EN 0x400
PCI_EXP_OBFF_MSGA_EN  macro  include/linux/pci_regs.h  521  #define PCI_EXP_OBFF_MSGA_EN 0x2000
PCI_EXP_OBFF_MSGB_EN  macro  include/linux/pci_regs.h  522  #define PCI_EXP_OBFF_MSGB_EN 0x4000
PCI_EXP_OBFF_WAKE_EN  macro  include/linux/pci_regs.h  523  #define PCI_EXP_OBFF_WAKE_EN 0x6000
PCI_EXP_LNKCTL2  macro  include/linux/pci_regs.h  524  #define PCI_EXP_LNKCTL2 48
PCI_EXP_SLTCTL2  macro  include/linux/pci_regs.h  525  #define PCI_EXP_SLTCTL2 56
PCI_EXT_CAP_ID  macro  include/linux/pci_regs.h  528  #define PCI_EXT_CAP_ID(header) (header & 0x0000ffff)
PCI_EXT_CAP_VER  macro  include/linux/pci_regs.h  529  #define PCI_EXT_CAP_VER(header) ((header >> 16) & 0xf)
PCI_EXT_CAP_NEXT  macro  include/linux/pci_regs.h  530  #define PCI_EXT_CAP_NEXT(header) ((header >> 20) & 0xffc)
PCI_EXT_CAP_ID_ERR  macro  include/linux/pci_regs.h  532  #define PCI_EXT_CAP_ID_ERR 1
PCI_EXT_CAP_ID_VC  macro  include/linux/pci_regs.h  533  #define PCI_EXT_CAP_ID_VC 2
PCI_EXT_CAP_ID_DSN  macro  include/linux/pci_regs.h  534  #define PCI_EXT_CAP_ID_DSN 3
PCI_EXT_CAP_ID_PWR  macro  include/linux/pci_regs.h  535  #define PCI_EXT_CAP_ID_PWR 4
PCI_EXT_CAP_ID_VNDR  macro  include/linux/pci_regs.h  536  #define PCI_EXT_CAP_ID_VNDR 11
PCI_EXT_CAP_ID_ACS  macro  include/linux/pci_regs.h  537  #define PCI_EXT_CAP_ID_ACS 13
PCI_EXT_CAP_ID_ARI  macro  include/linux/pci_regs.h  538  #define PCI_EXT_CAP_ID_ARI 14
PCI_EXT_CAP_ID_ATS  macro  include/linux/pci_regs.h  539  #define PCI_EXT_CAP_ID_ATS 15
PCI_EXT_CAP_ID_SRIOV  macro  include/linux/pci_regs.h  540  #define PCI_EXT_CAP_ID_SRIOV 16
PCI_EXT_CAP_ID_PRI  macro  include/linux/pci_regs.h  541  #define PCI_EXT_CAP_ID_PRI 19
PCI_EXT_CAP_ID_LTR  macro  include/linux/pci_regs.h  542  #define PCI_EXT_CAP_ID_LTR 24
PCI_EXT_CAP_ID_PASID  macro  include/linux/pci_regs.h  543  #define PCI_EXT_CAP_ID_PASID 27
PCI_ERR_UNCOR_STATUS  macro  include/linux/pci_regs.h  546  #define PCI_ERR_UNCOR_STATUS 4
PCI_ERR_UNC_TRAIN  macro  include/linux/pci_regs.h  547  #define PCI_ERR_UNC_TRAIN 0x00000001
PCI_ERR_UNC_DLP  macro  include/linux/pci_regs.h  548  #define PCI_ERR_UNC_DLP 0x00000010
PCI_ERR_UNC_POISON_TLP  macro  include/linux/pci_regs.h  549  #define PCI_ERR_UNC_POISON_TLP 0x00001000
PCI_ERR_UNC_FCP  macro  include/linux/pci_regs.h  550  #define PCI_ERR_UNC_FCP 0x00002000
PCI_ERR_UNC_COMP_TIME  macro  include/linux/pci_regs.h  551  #define PCI_ERR_UNC_COMP_TIME 0x00004000
PCI_ERR_UNC_COMP_ABORT  macro  include/linux/pci_regs.h  552  #define PCI_ERR_UNC_COMP_ABORT 0x00008000
PCI_ERR_UNC_UNX_COMP  macro  include/linux/pci_regs.h  553  #define PCI_ERR_UNC_UNX_COMP 0x00010000
PCI_ERR_UNC_RX_OVER  macro  include/linux/pci_regs.h  554  #define PCI_ERR_UNC_RX_OVER 0x00020000
PCI_ERR_UNC_MALF_TLP  macro  include/linux/pci_regs.h  555  #define PCI_ERR_UNC_MALF_TLP 0x00040000
PCI_ERR_UNC_ECRC  macro  include/linux/pci_regs.h  556  #define PCI_ERR_UNC_ECRC 0x00080000
PCI_ERR_UNC_UNSUP  macro  include/linux/pci_regs.h  557  #define PCI_ERR_UNC_UNSUP 0x00100000
PCI_ERR_UNCOR_MASK  macro  include/linux/pci_regs.h  558  #define PCI_ERR_UNCOR_MASK 8
PCI_ERR_UNCOR_SEVER  macro  include/linux/pci_regs.h  560  #define PCI_ERR_UNCOR_SEVER 12
PCI_ERR_COR_STATUS  macro  include/linux/pci_regs.h  562  #define PCI_ERR_COR_STATUS 16
PCI_ERR_COR_RCVR  macro  include/linux/pci_regs.h  563  #define PCI_ERR_COR_RCVR 0x00000001
PCI_ERR_COR_BAD_TLP  macro  include/linux/pci_regs.h  564  #define PCI_ERR_COR_BAD_TLP 0x00000040
PCI_ERR_COR_BAD_DLLP  macro  include/linux/pci_regs.h  565  #define PCI_ERR_COR_BAD_DLLP 0x00000080
PCI_ERR_COR_REP_ROLL  macro  include/linux/pci_regs.h  566  #define PCI_ERR_COR_REP_ROLL 0x00000100
PCI_ERR_COR_REP_TIMER  macro  include/linux/pci_regs.h  567  #define PCI_ERR_COR_REP_TIMER 0x00001000
PCI_ERR_COR_MASK  macro  include/linux/pci_regs.h  568  #define PCI_ERR_COR_MASK 20
PCI_ERR_CAP  macro  include/linux/pci_regs.h  570  #define PCI_ERR_CAP 24
PCI_ERR_CAP_FEP  macro  include/linux/pci_regs.h  571  #define PCI_ERR_CAP_FEP(x) ((x) & 31)
PCI_ERR_CAP_ECRC_GENC  macro  include/linux/pci_regs.h  572  #define PCI_ERR_CAP_ECRC_GENC 0x00000020
PCI_ERR_CAP_ECRC_GENE  macro  include/linux/pci_regs.h  573  #define PCI_ERR_CAP_ECRC_GENE 0x00000040
PCI_ERR_CAP_ECRC_CHKC  macro  include/linux/pci_regs.h  574  #define PCI_ERR_CAP_ECRC_CHKC 0x00000080
PCI_ERR_CAP_ECRC_CHKE  macro  include/linux/pci_regs.h  575  #define PCI_ERR_CAP_ECRC_CHKE 0x00000100
PCI_ERR_HEADER_LOG  macro  include/linux/pci_regs.h  576  #define PCI_ERR_HEADER_LOG 28
PCI_ERR_ROOT_COMMAND  macro  include/linux/pci_regs.h  577  #define PCI_ERR_ROOT_COMMAND 44
PCI_ERR_ROOT_CMD_COR_EN  macro  include/linux/pci_regs.h  579  #define PCI_ERR_ROOT_CMD_COR_EN 0x00000001
PCI_ERR_ROOT_CMD_NONFATAL_EN  macro  include/linux/pci_regs.h  581  #define PCI_ERR_ROOT_CMD_NONFATAL_EN 0x00000002
PCI_ERR_ROOT_CMD_FATAL_EN  macro  include/linux/pci_regs.h  583  #define PCI_ERR_ROOT_CMD_FATAL_EN 0x00000004
PCI_ERR_ROOT_STATUS  macro  include/linux/pci_regs.h  584  #define PCI_ERR_ROOT_STATUS 48
PCI_ERR_ROOT_COR_RCV  macro  include/linux/pci_regs.h  585  #define PCI_ERR_ROOT_COR_RCV 0x00000001
PCI_ERR_ROOT_MULTI_COR_RCV  macro  include/linux/pci_regs.h  587  #define PCI_ERR_ROOT_MULTI_COR_RCV 0x00000002
PCI_ERR_ROOT_UNCOR_RCV  macro  include/linux/pci_regs.h  589  #define PCI_ERR_ROOT_UNCOR_RCV 0x00000004
PCI_ERR_ROOT_MULTI_UNCOR_RCV  macro  include/linux/pci_regs.h  591  #define PCI_ERR_ROOT_MULTI_UNCOR_RCV 0x00000008
PCI_ERR_ROOT_FIRST_FATAL  macro  include/linux/pci_regs.h  592  #define PCI_ERR_ROOT_FIRST_FATAL 0x00000010
PCI_ERR_ROOT_NONFATAL_RCV  macro  include/linux/pci_regs.h  593  #define PCI_ERR_ROOT_NONFATAL_RCV 0x00000020
PCI_ERR_ROOT_FATAL_RCV  macro  include/linux/pci_regs.h  594  #define PCI_ERR_ROOT_FATAL_RCV 0x00000040
PCI_ERR_ROOT_ERR_SRC  macro  include/linux/pci_regs.h  595  #define PCI_ERR_ROOT_ERR_SRC 52
PCI_VC_PORT_REG1  macro  include/linux/pci_regs.h  598  #define PCI_VC_PORT_REG1 4
PCI_VC_PORT_REG2  macro  include/linux/pci_regs.h  599  #define PCI_VC_PORT_REG2 8
PCI_VC_PORT_CTRL  macro  include/linux/pci_regs.h  600  #define PCI_VC_PORT_CTRL 12
PCI_VC_PORT_STATUS  macro  include/linux/pci_regs.h  601  #define PCI_VC_PORT_STATUS 14
PCI_VC_RES_CAP  macro  include/linux/pci_regs.h  602  #define PCI_VC_RES_CAP 16
PCI_VC_RES_CTRL  macro  include/linux/pci_regs.h  603  #define PCI_VC_RES_CTRL 20
PCI_VC_RES_STATUS  macro  include/linux/pci_regs.h  604  #define PCI_VC_RES_STATUS 26
PCI_PWR_DSR  macro  include/linux/pci_regs.h  607  #define PCI_PWR_DSR 4
PCI_PWR_DATA  macro  include/linux/pci_regs.h  608  #define PCI_PWR_DATA 8
PCI_PWR_DATA_BASE  macro  include/linux/pci_regs.h  609  #define PCI_PWR_DATA_BASE(x) ((x) & 0xff)
PCI_PWR_DATA_SCALE  macro  include/linux/pci_regs.h  610  #define PCI_PWR_DATA_SCALE(x) (((x) >> 8) & 3)
PCI_PWR_DATA_PM_SUB  macro  include/linux/pci_regs.h  611  #define PCI_PWR_DATA_PM_SUB(x) (((x) >> 10) & 7)
PCI_PWR_DATA_PM_STATE  macro  include/linux/pci_regs.h  612  #define PCI_PWR_DATA_PM_STATE(x) (((x) >> 13) & 3)
PCI_PWR_DATA_TYPE  macro  include/linux/pci_regs.h  613  #define PCI_PWR_DATA_TYPE(x) (((x) >> 15) & 7)
PCI_PWR_DATA_RAIL  macro  include/linux/pci_regs.h  614  #define PCI_PWR_DATA_RAIL(x) (((x) >> 18) & 7)
PCI_PWR_CAP  macro  include/linux/pci_regs.h  615  #define PCI_PWR_CAP 12
PCI_PWR_CAP_BUDGET  macro  include/linux/pci_regs.h  616  #define PCI_PWR_CAP_BUDGET(x) ((x) & 1)
HT_3BIT_CAP_MASK  macro  include/linux/pci_regs.h  626  #define HT_3BIT_CAP_MASK 0xE0
HT_CAPTYPE_SLAVE  macro  include/linux/pci_regs.h  627  #define HT_CAPTYPE_SLAVE 0x00
HT_CAPTYPE_HOST  macro  include/linux/pci_regs.h  628  #define HT_CAPTYPE_HOST 0x20
HT_5BIT_CAP_MASK  macro  include/linux/pci_regs.h  630  #define HT_5BIT_CAP_MASK 0xF8
HT_CAPTYPE_IRQ  macro  include/linux/pci_regs.h  631  #define HT_CAPTYPE_IRQ 0x80
HT_CAPTYPE_REMAPPING_40  macro  include/linux/pci_regs.h  632  #define HT_CAPTYPE_REMAPPING_40 0xA0
HT_CAPTYPE_REMAPPING_64  macro  include/linux/pci_regs.h  633  #define HT_CAPTYPE_REMAPPING_64 0xA2
HT_CAPTYPE_UNITID_CLUMP  macro  include/linux/pci_regs.h  634  #define HT_CAPTYPE_UNITID_CLUMP 0x90
HT_CAPTYPE_EXTCONF  macro  include/linux/pci_regs.h  635  #define HT_CAPTYPE_EXTCONF 0x98
HT_CAPTYPE_MSI_MAPPING  macro  include/linux/pci_regs.h  636  #define HT_CAPTYPE_MSI_MAPPING 0xA8
HT_MSI_FLAGS  macro  include/linux/pci_regs.h  637  #define HT_MSI_FLAGS 0x02
HT_MSI_FLAGS_ENABLE  macro  include/linux/pci_regs.h  638  #define HT_MSI_FLAGS_ENABLE 0x1
HT_MSI_FLAGS_FIXED  macro  include/linux/pci_regs.h  639  #define HT_MSI_FLAGS_FIXED 0x2
HT_MSI_FIXED_ADDR  macro  include/linux/pci_regs.h  640  #define HT_MSI_FIXED_ADDR 0x00000000FEE00000ULL
HT_MSI_ADDR_LO  macro  include/linux/pci_regs.h  641  #define HT_MSI_ADDR_LO 0x04
HT_MSI_ADDR_LO_MASK  macro  include/linux/pci_regs.h  642  #define HT_MSI_ADDR_LO_MASK 0xFFF00000
HT_MSI_ADDR_HI  macro  include/linux/pci_regs.h  643  #define HT_MSI_ADDR_HI 0x08
HT_CAPTYPE_DIRECT_ROUTE  macro  include/linux/pci_regs.h  644  #define HT_CAPTYPE_DIRECT_ROUTE 0xB0
HT_CAPTYPE_VCSET  macro  include/linux/pci_regs.h  645  #define HT_CAPTYPE_VCSET 0xB8
HT_CAPTYPE_ERROR_RETRY  macro  include/linux/pci_regs.h  646  #define HT_CAPTYPE_ERROR_RETRY 0xC0
HT_CAPTYPE_GEN3  macro  include/linux/pci_regs.h  647  #define HT_CAPTYPE_GEN3 0xD0
HT_CAPTYPE_PM  macro  include/linux/pci_regs.h  648  #define HT_CAPTYPE_PM 0xE0
PCI_ARI_CAP  macro  include/linux/pci_regs.h  651  #define PCI_ARI_CAP 0x04
PCI_ARI_CAP_MFVC  macro  include/linux/pci_regs.h  652  #define PCI_ARI_CAP_MFVC 0x0001
PCI_ARI_CAP_ACS  macro  include/linux/pci_regs.h  653  #define PCI_ARI_CAP_ACS 0x0002
PCI_ARI_CAP_NFN  macro  include/linux/pci_regs.h  654  #define PCI_ARI_CAP_NFN(x) (((x) >> 8) & 0xff)
PCI_ARI_CTRL  macro  include/linux/pci_regs.h  655  #define PCI_ARI_CTRL 0x06
PCI_ARI_CTRL_MFVC  macro  include/linux/pci_regs.h  656  #define PCI_ARI_CTRL_MFVC 0x0001
PCI_ARI_CTRL_ACS  macro  include/linux/pci_regs.h  657  #define PCI_ARI_CTRL_ACS 0x0002
PCI_ARI_CTRL_FG  macro  include/linux/pci_regs.h  658  #define PCI_ARI_CTRL_FG(x) (((x) >> 4) & 7)
PCI_ATS_CAP  macro  include/linux/pci_regs.h  661  #define PCI_ATS_CAP 0x04
PCI_ATS_CAP_QDEP  macro  include/linux/pci_regs.h  662  #define PCI_ATS_CAP_QDEP(x) ((x) & 0x1f)
PCI_ATS_MAX_QDEP  macro  include/linux/pci_regs.h  663  #define PCI_ATS_MAX_QDEP 32
PCI_ATS_CTRL  macro  include/linux/pci_regs.h  664  #define PCI_ATS_CTRL 0x06
PCI_ATS_CTRL_ENABLE  macro  include/linux/pci_regs.h  665  #define PCI_ATS_CTRL_ENABLE 0x8000
PCI_ATS_CTRL_STU  macro  include/linux/pci_regs.h  666  #define PCI_ATS_CTRL_STU(x) ((x) & 0x1f)
PCI_ATS_MIN_STU  macro  include/linux/pci_regs.h  667  #define PCI_ATS_MIN_STU 12
PCI_PRI_CTRL  macro  include/linux/pci_regs.h  670  #define PCI_PRI_CTRL 0x04
PCI_PRI_CTRL_ENABLE  macro  include/linux/pci_regs.h  671  #define PCI_PRI_CTRL_ENABLE 0x01
PCI_PRI_CTRL_RESET  macro  include/linux/pci_regs.h  672  #define PCI_PRI_CTRL_RESET 0x02
PCI_PRI_STATUS  macro  include/linux/pci_regs.h  673  #define PCI_PRI_STATUS 0x06
PCI_PRI_STATUS_RF  macro  include/linux/pci_regs.h  674  #define PCI_PRI_STATUS_RF 0x001
PCI_PRI_STATUS_UPRGI  macro  include/linux/pci_regs.h  675  #define PCI_PRI_STATUS_UPRGI 0x002
PCI_PRI_STATUS_STOPPED  macro  include/linux/pci_regs.h  676  #define PCI_PRI_STATUS_STOPPED 0x100
PCI_PRI_MAX_REQ  macro  include/linux/pci_regs.h  677  #define PCI_PRI_MAX_REQ 0x08
PCI_PRI_ALLOC_REQ  macro  include/linux/pci_regs.h  678  #define PCI_PRI_ALLOC_REQ 0x0c
PCI_PASID_CAP  macro  include/linux/pci_regs.h  681  #define PCI_PASID_CAP 0x04
PCI_PASID_CAP_EXEC  macro  include/linux/pci_regs.h  682  #define PCI_PASID_CAP_EXEC 0x02
PCI_PASID_CAP_PRIV  macro  include/linux/pci_regs.h  683  #define PCI_PASID_CAP_PRIV 0x04
PCI_PASID_CTRL  macro  include/linux/pci_regs.h  684  #define PCI_PASID_CTRL 0x06
PCI_PASID_CTRL_ENABLE  macro  include/linux/pci_regs.h  685  #define PCI_PASID_CTRL_ENABLE 0x01
PCI_PASID_CTRL_EXEC  macro  include/linux/pci_regs.h  686  #define PCI_PASID_CTRL_EXEC 0x02
PCI_PASID_CTRL_PRIV  macro  include/linux/pci_regs.h  687  #define PCI_PASID_CTRL_PRIV 0x04
PCI_SRIOV_CAP  macro  include/linux/pci_regs.h  690  #define PCI_SRIOV_CAP 0x04
PCI_SRIOV_CAP_VFM  macro  include/linux/pci_regs.h  691  #define PCI_SRIOV_CAP_VFM 0x01
PCI_SRIOV_CAP_INTR  macro  include/linux/pci_regs.h  692  #define PCI_SRIOV_CAP_INTR(x) ((x) >> 21)
PCI_SRIOV_CTRL  macro  include/linux/pci_regs.h  693  #define PCI_SRIOV_CTRL 0x08
PCI_SRIOV_CTRL_VFE  macro  include/linux/pci_regs.h  694  #define PCI_SRIOV_CTRL_VFE 0x01
PCI_SRIOV_CTRL_VFM  macro  include/linux/pci_regs.h  695  #define PCI_SRIOV_CTRL_VFM 0x02
PCI_SRIOV_CTRL_INTR  macro  include/linux/pci_regs.h  696  #define PCI_SRIOV_CTRL_INTR 0x04
PCI_SRIOV_CTRL_MSE  macro  include/linux/pci_regs.h  697  #define PCI_SRIOV_CTRL_MSE 0x08
PCI_SRIOV_CTRL_ARI  macro  include/linux/pci_regs.h  698  #define PCI_SRIOV_CTRL_ARI 0x10
PCI_SRIOV_STATUS  macro  include/linux/pci_regs.h  699  #define PCI_SRIOV_STATUS 0x0a
PCI_SRIOV_STATUS_VFM  macro  include/linux/pci_regs.h  700  #define PCI_SRIOV_STATUS_VFM 0x01
PCI_SRIOV_INITIAL_VF  macro  include/linux/pci_regs.h  701  #define PCI_SRIOV_INITIAL_VF 0x0c
PCI_SRIOV_TOTAL_VF  macro  include/linux/pci_regs.h  702  #define PCI_SRIOV_TOTAL_VF 0x0e
PCI_SRIOV_NUM_VF  macro  include/linux/pci_regs.h  703  #define PCI_SRIOV_NUM_VF 0x10
PCI_SRIOV_FUNC_LINK  macro  include/linux/pci_regs.h  704  #define PCI_SRIOV_FUNC_LINK 0x12
PCI_SRIOV_VF_OFFSET  macro  include/linux/pci_regs.h  705  #define PCI_SRIOV_VF_OFFSET 0x14
PCI_SRIOV_VF_STRIDE  macro  include/linux/pci_regs.h  706  #define PCI_SRIOV_VF_STRIDE 0x16
PCI_SRIOV_VF_DID  macro  include/linux/pci_regs.h  707  #define PCI_SRIOV_VF_DID 0x1a
PCI_SRIOV_SUP_PGSIZE  macro  include/linux/pci_regs.h  708  #define PCI_SRIOV_SUP_PGSIZE 0x1c
PCI_SRIOV_SYS_PGSIZE  macro  include/linux/pci_regs.h  709  #define PCI_SRIOV_SYS_PGSIZE 0x20
PCI_SRIOV_BAR  macro  include/linux/pci_regs.h  710  #define PCI_SRIOV_BAR 0x24
PCI_SRIOV_NUM_BARS  macro  include/linux/pci_regs.h  711  #define PCI_SRIOV_NUM_BARS 6
PCI_SRIOV_VFM  macro  include/linux/pci_regs.h  712  #define PCI_SRIOV_VFM 0x3c
PCI_SRIOV_VFM_BIR  macro  include/linux/pci_regs.h  713  #define PCI_SRIOV_VFM_BIR(x) ((x) & 7)
PCI_SRIOV_VFM_OFFSET  macro  include/linux/pci_regs.h  714  #define PCI_SRIOV_VFM_OFFSET(x) ((x) & ~7)
PCI_SRIOV_VFM_UA  macro  include/linux/pci_regs.h  715  #define PCI_SRIOV_VFM_UA 0x0
PCI_SRIOV_VFM_MI  macro  include/linux/pci_regs.h  716  #define PCI_SRIOV_VFM_MI 0x1
PCI_SRIOV_VFM_MO  macro  include/linux/pci_regs.h  717  #define PCI_SRIOV_VFM_MO 0x2
PCI_SRIOV_VFM_AV  macro  include/linux/pci_regs.h  718  #define PCI_SRIOV_VFM_AV 0x3
PCI_LTR_MAX_SNOOP_LAT  macro  include/linux/pci_regs.h  720  #define PCI_LTR_MAX_SNOOP_LAT 0x4
PCI_LTR_MAX_NOSNOOP_LAT  macro  include/linux/pci_regs.h  721  #define PCI_LTR_MAX_NOSNOOP_LAT 0x6
PCI_LTR_VALUE_MASK  macro  include/linux/pci_regs.h  722  #define PCI_LTR_VALUE_MASK 0x000003ff
PCI_LTR_SCALE_MASK  macro  include/linux/pci_regs.h  723  #define PCI_LTR_SCALE_MASK 0x00001c00
PCI_LTR_SCALE_SHIFT  macro  include/linux/pci_regs.h  724  #define PCI_LTR_SCALE_SHIFT 10
PCI_ACS_CAP  macro  include/linux/pci_regs.h  727  #define PCI_ACS_CAP 0x04
PCI_ACS_SV  macro  include/linux/pci_regs.h  728  #define PCI_ACS_SV 0x01
PCI_ACS_TB  macro  include/linux/pci_regs.h  729  #define PCI_ACS_TB 0x02
PCI_ACS_RR  macro  include/linux/pci_regs.h  730  #define PCI_ACS_RR 0x04
PCI_ACS_CR  macro  include/linux/pci_regs.h  731  #define PCI_ACS_CR 0x08
PCI_ACS_UF  macro  include/linux/pci_regs.h  732  #define PCI_ACS_UF 0x10
PCI_ACS_EC  macro  include/linux/pci_regs.h  733  #define PCI_ACS_EC 0x20
PCI_ACS_DT  macro  include/linux/pci_regs.h  734  #define PCI_ACS_DT 0x40
PCI_ACS_CTRL  macro  include/linux/pci_regs.h  735  #define PCI_ACS_CTRL 0x06
PCI_ACS_EGRESS_CTL_V  macro  include/linux/pci_regs.h  736  #define PCI_ACS_EGRESS_CTL_V 0x08
LINUX_MOD_DEVICETABLE_H  macro  include/linux/mod_devicetable.h  8  #define LINUX_MOD_DEVICETABLE_H
PCI_ANY_ID  macro  include/linux/mod_devicetable.h  15  #define PCI_ANY_ID (~0)
pci_device_id  struct  include/linux/mod_devicetable.h  17  struct pci_device_id { __u32 vendor, device; __u32 subvendor, subdevice; __u32 class, class_mask; kernel_ulong_t driver_data; };
IEEE1394_MATCH_VENDOR_ID  macro  include/linux/mod_devicetable.h  25  #define IEEE1394_MATCH_VENDOR_ID 0x0001
IEEE1394_MATCH_MODEL_ID  macro  include/linux/mod_devicetable.h  26  #define IEEE1394_MATCH_MODEL_ID 0x0002
IEEE1394_MATCH_SPECIFIER_ID  macro  include/linux/mod_devicetable.h  27  #define IEEE1394_MATCH_SPECIFIER_ID 0x0004
IEEE1394_MATCH_VERSION  macro  include/linux/mod_devicetable.h  28  #define IEEE1394_MATCH_VERSION 0x0008
ieee1394_device_id  struct  include/linux/mod_devicetable.h  30  struct ieee1394_device_id { __u32 match_flags; __u32 vendor_id; __u32 model_id; __u32 specifier_id; __u32 version; kernel_ulong_t driver_data };
usb_device_id  struct  include/linux/mod_devicetable.h  98  struct usb_device_id { __u16 match_flags; __u16 idVendor; __u16 idProduct; __u16 bcdDevice_lo; __u16 bcdDevice_hi; __u8 bDeviceClass; __u8 bDeviceSubClass; __u8 bDeviceProtocol; __u8 bInterfaceClass; __u8 bInterfaceSubClass; __u8 bInterfaceProtocol; kernel_ulong_t driver_info; };
USB_DEVICE_ID_MATCH_VENDOR  macro  include/linux/mod_devicetable.h  123  #define USB_DEVICE_ID_MATCH_VENDOR 0x0001
USB_DEVICE_ID_MATCH_PRODUCT  macro  include/linux/mod_devicetable.h  124  #define USB_DEVICE_ID_MATCH_PRODUCT 0x0002
USB_DEVICE_ID_MATCH_DEV_LO  macro  include/linux/mod_devicetable.h  125  #define USB_DEVICE_ID_MATCH_DEV_LO 0x0004
USB_DEVICE_ID_MATCH_DEV_HI  macro  include/linux/mod_devicetable.h  126  #define USB_DEVICE_ID_MATCH_DEV_HI 0x0008
USB_DEVICE_ID_MATCH_DEV_CLASS  macro  include/linux/mod_devicetable.h  127  #define USB_DEVICE_ID_MATCH_DEV_CLASS 0x0010
USB_DEVICE_ID_MATCH_DEV_SUBCLASS  macro  include/linux/mod_devicetable.h  128  #define USB_DEVICE_ID_MATCH_DEV_SUBCLASS 0x0020
USB_DEVICE_ID_MATCH_DEV_PROTOCOL  macro  include/linux/mod_devicetable.h  129  #define USB_DEVICE_ID_MATCH_DEV_PROTOCOL 0x0040
USB_DEVICE_ID_MATCH_INT_CLASS  macro  include/linux/mod_devicetable.h  130  #define USB_DEVICE_ID_MATCH_INT_CLASS 0x0080
USB_DEVICE_ID_MATCH_INT_SUBCLASS  macro  include/linux/mod_devicetable.h  131  #define USB_DEVICE_ID_MATCH_INT_SUBCLASS 0x0100
USB_DEVICE_ID_MATCH_INT_PROTOCOL  macro  include/linux/mod_devicetable.h  132  #define USB_DEVICE_ID_MATCH_INT_PROTOCOL 0x0200
HID_ANY_ID  macro  include/linux/mod_devicetable.h  134  #define HID_ANY_ID (~0)
HID_BUS_ANY  macro  include/linux/mod_devicetable.h  135  #define HID_BUS_ANY 0xffff
HID_GROUP_ANY  macro  include/linux/mod_devicetable.h  136  #define HID_GROUP_ANY 0x0000
hid_device_id  struct  include/linux/mod_devicetable.h  138  struct hid_device_id { __u16 bus; __u16 group; __u32 vendor; __u32 product; kernel_ulong_t driver_data };
ccw_device_id  struct  include/linux/mod_devicetable.h  148  struct ccw_device_id { __u16 match_flags; __u16 cu_type; __u16 dev_type; __u8 cu_model; __u8 dev_model; kernel_ulong_t driver_info; };
CCW_DEVICE_ID_MATCH_CU_TYPE  macro  include/linux/mod_devicetable.h  159  #define CCW_DEVICE_ID_MATCH_CU_TYPE 0x01
CCW_DEVICE_ID_MATCH_CU_MODEL  macro  include/linux/mod_devicetable.h  160  #define CCW_DEVICE_ID_MATCH_CU_MODEL 0x02
CCW_DEVICE_ID_MATCH_DEVICE_TYPE  macro  include/linux/mod_devicetable.h  161  #define CCW_DEVICE_ID_MATCH_DEVICE_TYPE 0x04
CCW_DEVICE_ID_MATCH_DEVICE_MODEL  macro  include/linux/mod_devicetable.h  162  #define CCW_DEVICE_ID_MATCH_DEVICE_MODEL 0x08
ap_device_id  struct  include/linux/mod_devicetable.h  165  struct ap_device_id { __u16 match_flags; __u8 dev_type; __u8 pad1; __u32 pad2; kernel_ulong_t driver_info; };
AP_DEVICE_ID_MATCH_DEVICE_TYPE  macro  include/linux/mod_devicetable.h  173  #define AP_DEVICE_ID_MATCH_DEVICE_TYPE 0x01
css_device_id  struct  include/linux/mod_devicetable.h  176  struct css_device_id { __u8 match_flags; __u8 type; __u16 pad2; __u32 pad3; kernel_ulong_t driver_data; };
ACPI_ID_LEN  macro  include/linux/mod_devicetable.h  184  #define ACPI_ID_LEN 16
acpi_device_id  struct  include/linux/mod_devicetable.h  187  struct acpi_device_id { __u8 id[ACPI_ID_LEN]; kernel_ulong_t driver_data; };
PNP_ID_LEN  macro  include/linux/mod_devicetable.h  192  #define PNP_ID_LEN 8
PNP_MAX_DEVICES  macro  include/linux/mod_devicetable.h  193  #define PNP_MAX_DEVICES 8
pnp_device_id  struct  include/linux/mod_devicetable.h  195  struct pnp_device_id { __u8 id[PNP_ID_LEN]; kernel_ulong_t driver_data; };
pnp_card_device_id  struct  include/linux/mod_devicetable.h  200  struct pnp_card_device_id { __u8 id[PNP_ID_LEN]; kernel_ulong_t driver_data; struct { __u8 id[PNP_ID_LEN]; } devs[PNP_MAX_DEVICES]; };
SERIO_ANY  macro  include/linux/mod_devicetable.h  209  #define SERIO_ANY 0xff
serio_device_id  struct  include/linux/mod_devicetable.h  211  struct serio_device_id { __u8 type; __u8 extra; __u8 id; __u8 proto; };
of_device_id  struct  include/linux/mod_devicetable.h  221  struct of_device_id { char name[32]; char type[32]; char compatible[128]; void *data; kernel_ulong_t data; };
vio_device_id  struct  include/linux/mod_devicetable.h  234  struct vio_device_id { char type[32]; char compat[32]; };
pcmcia_device_id  struct  include/linux/mod_devicetable.h  241  struct pcmcia_device_id { __u16 match_flags; __u16 manf_id; __u16 card_id; __u8 func_id; __u8 function; __u8 device_no; __u32 prod_id_hash[4] const char * prod_id[4]; kernel_ulong_t prod_id[4] kernel_ulong_t driver_info; char * cisfile; kernel_ulong_t cisfile; };
PCMCIA_DEV_ID_MATCH_MANF_ID  macro  include/linux/mod_devicetable.h  275  #define PCMCIA_DEV_ID_MATCH_MANF_ID 0x0001
PCMCIA_DEV_ID_MATCH_CARD_ID  macro  include/linux/mod_devicetable.h  276  #define PCMCIA_DEV_ID_MATCH_CARD_ID 0x0002
PCMCIA_DEV_ID_MATCH_FUNC_ID  macro  include/linux/mod_devicetable.h  277  #define PCMCIA_DEV_ID_MATCH_FUNC_ID 0x0004
PCMCIA_DEV_ID_MATCH_FUNCTION  macro  include/linux/mod_devicetable.h  278  #define PCMCIA_DEV_ID_MATCH_FUNCTION 0x0008
PCMCIA_DEV_ID_MATCH_PROD_ID1  macro  include/linux/mod_devicetable.h  279  #define PCMCIA_DEV_ID_MATCH_PROD_ID1 0x0010
PCMCIA_DEV_ID_MATCH_PROD_ID2  macro  include/linux/mod_devicetable.h  280  #define PCMCIA_DEV_ID_MATCH_PROD_ID2 0x0020
PCMCIA_DEV_ID_MATCH_PROD_ID3  macro  include/linux/mod_devicetable.h  281  #define PCMCIA_DEV_ID_MATCH_PROD_ID3 0x0040
PCMCIA_DEV_ID_MATCH_PROD_ID4  macro  include/linux/mod_devicetable.h  282  #define PCMCIA_DEV_ID_MATCH_PROD_ID4 0x0080
PCMCIA_DEV_ID_MATCH_DEVICE_NO  macro  include/linux/mod_devicetable.h  283  #define PCMCIA_DEV_ID_MATCH_DEVICE_NO 0x0100
PCMCIA_DEV_ID_MATCH_FAKE_CIS  macro  include/linux/mod_devicetable.h  284  #define PCMCIA_DEV_ID_MATCH_FAKE_CIS 0x0200
PCMCIA_DEV_ID_MATCH_ANONYMOUS  macro  include/linux/mod_devicetable.h  285  #define PCMCIA_DEV_ID_MATCH_ANONYMOUS 0x0400
INPUT_DEVICE_ID_EV_MAX  macro  include/linux/mod_devicetable.h  288  #define INPUT_DEVICE_ID_EV_MAX 0x1f
INPUT_DEVICE_ID_KEY_MIN_INTERESTING  macro  include/linux/mod_devicetable.h  289  #define INPUT_DEVICE_ID_KEY_MIN_INTERESTING 0x71
INPUT_DEVICE_ID_KEY_MAX  macro  include/linux/mod_devicetable.h  290  #define INPUT_DEVICE_ID_KEY_MAX 0x2ff
INPUT_DEVICE_ID_REL_MAX  macro  include/linux/mod_devicetable.h  291  #define INPUT_DEVICE_ID_REL_MAX 0x0f
INPUT_DEVICE_ID_ABS_MAX  macro  include/linux/mod_devicetable.h  292  #define INPUT_DEVICE_ID_ABS_MAX 0x3f
INPUT_DEVICE_ID_MSC_MAX  macro  include/linux/mod_devicetable.h  293  #define INPUT_DEVICE_ID_MSC_MAX 0x07
INPUT_DEVICE_ID_LED_MAX  macro  include/linux/mod_devicetable.h  294  #define INPUT_DEVICE_ID_LED_MAX 0x0f
INPUT_DEVICE_ID_SND_MAX  macro  include/linux/mod_devicetable.h  295  #define INPUT_DEVICE_ID_SND_MAX 0x07
INPUT_DEVICE_ID_FF_MAX  macro  include/linux/mod_devicetable.h  296  #define INPUT_DEVICE_ID_FF_MAX 0x7f
INPUT_DEVICE_ID_SW_MAX  macro  include/linux/mod_devicetable.h  297  #define INPUT_DEVICE_ID_SW_MAX 0x0f
INPUT_DEVICE_ID_MATCH_BUS  macro  include/linux/mod_devicetable.h  299  #define INPUT_DEVICE_ID_MATCH_BUS 1
INPUT_DEVICE_ID_MATCH_VENDOR  macro  include/linux/mod_devicetable.h  300  #define INPUT_DEVICE_ID_MATCH_VENDOR 2
INPUT_DEVICE_ID_MATCH_PRODUCT  macro  include/linux/mod_devicetable.h  301  #define INPUT_DEVICE_ID_MATCH_PRODUCT 4
INPUT_DEVICE_ID_MATCH_VERSION  macro  include/linux/mod_devicetable.h  302  #define INPUT_DEVICE_ID_MATCH_VERSION 8
INPUT_DEVICE_ID_MATCH_EVBIT  macro  include/linux/mod_devicetable.h  304  #define INPUT_DEVICE_ID_MATCH_EVBIT 0x0010
INPUT_DEVICE_ID_MATCH_KEYBIT  macro  include/linux/mod_devicetable.h  305  #define INPUT_DEVICE_ID_MATCH_KEYBIT 0x0020
INPUT_DEVICE_ID_MATCH_RELBIT  macro  include/linux/mod_devicetable.h  306  #define INPUT_DEVICE_ID_MATCH_RELBIT 0x0040
INPUT_DEVICE_ID_MATCH_ABSBIT  macro  include/linux/mod_devicetable.h  307  #define INPUT_DEVICE_ID_MATCH_ABSBIT 0x0080
INPUT_DEVICE_ID_MATCH_MSCIT  macro  include/linux/mod_devicetable.h  308  #define INPUT_DEVICE_ID_MATCH_MSCIT 0x0100
INPUT_DEVICE_ID_MATCH_LEDBIT  macro  include/linux/mod_devicetable.h  309  #define INPUT_DEVICE_ID_MATCH_LEDBIT 0x0200
INPUT_DEVICE_ID_MATCH_SNDBIT  macro  include/linux/mod_devicetable.h  310  #define INPUT_DEVICE_ID_MATCH_SNDBIT 0x0400
INPUT_DEVICE_ID_MATCH_FFBIT  macro  include/linux/mod_devicetable.h  311  #define INPUT_DEVICE_ID_MATCH_FFBIT 0x0800
INPUT_DEVICE_ID_MATCH_SWBIT  macro  include/linux/mod_devicetable.h  312  #define INPUT_DEVICE_ID_MATCH_SWBIT 0x1000
input_device_id  struct  include/linux/mod_devicetable.h  314  struct input_device_id { kernel_ulong_t flags; __u16 bustype; __u16 vendor; __u16 product; __u16 version; kernel_ulong_t evbit[INPUT_DEVICE_ID_EV_MAX / BITS_PER_LONG + 1]; kernel_ulong_t keybit[INPUT_DEVICE_ID_KEY_MAX / BITS_PER_LONG + 1]; kernel_ulong_t relbit[INPUT_DEVICE_ID_REL_MAX / BITS_PER_LONG + 1]; kernel_ulong_t absbit[INPUT_DEVICE_ID_ABS_MAX / BITS_PER_LONG + 1]; kernel_ulong_t mscbit[INPUT_DEVICE_ID_MSC_MAX / BITS_PER_LONG + 1]; kernel_ulong_t ledbit[INPUT_DEVICE_ID_LED_MAX / BITS_PER_LONG + 1]; kernel_ulong_t sndbit[INPUT_DEVICE_ID_SND_MAX / BITS_PER_LONG + 1]; kernel_ulong_t ffbit[INPUT_DEVICE_ID_FF_MAX / BITS_PER_LONG + 1]; kernel_ulong_t swbit[INPUT_DEVICE_ID_SW_MAX / BITS_PER_LONG + 1]; kernel_ulong_t driver_info; };
EISA_SIG_LEN  macro  include/linux/mod_devicetable.h  338  #define EISA_SIG_LEN 8
eisa_device_id  struct  include/linux/mod_devicetable.h  341  struct eisa_device_id { char sig[EISA_SIG_LEN]; kernel_ulong_t driver_data; };
EISA_DEVICE_MODALIAS_FMT  macro  include/linux/mod_devicetable.h  346  #define EISA_DEVICE_MODALIAS_FMT "eisa:s%s"
parisc_device_id  struct  include/linux/mod_devicetable.h  348  struct parisc_device_id { __u8 hw_type; __u8 hversion_rev; __u16 hversion; __u32 sversion; };
PA_HWTYPE_ANY_ID  macro  include/linux/mod_devicetable.h  355  #define PA_HWTYPE_ANY_ID 0xff
PA_HVERSION_REV_ANY_ID  macro  include/linux/mod_devicetable.h  356  #define PA_HVERSION_REV_ANY_ID 0xff
PA_HVERSION_ANY_ID  macro  include/linux/mod_devicetable.h  357  #define PA_HVERSION_ANY_ID 0xffff
PA_SVERSION_ANY_ID  macro  include/linux/mod_devicetable.h  358  #define PA_SVERSION_ANY_ID 0xffffffff
SDIO_ANY_ID  macro  include/linux/mod_devicetable.h  362  #define SDIO_ANY_ID (~0)
sdio_device_id  struct  include/linux/mod_devicetable.h  364  struct sdio_device_id { __u16 vendor; __u16 device; kernel_ulong_t driver_data };
ssb_device_id  struct  include/linux/mod_devicetable.h  373  struct ssb_device_id { __u16 vendor; __u16 coreid; __u8 revision; };
SSB_DEVICE  macro  include/linux/mod_devicetable.h  378  #define SSB_DEVICE(_vendor,_coreid,_revision) { .vendor = _vendor, .coreid = _coreid, .revision = _revision, }
SSB_DEVTABLE_END  macro  include/linux/mod_devicetable.h  380  #define SSB_DEVTABLE_END { 0, },
SSB_ANY_VENDOR  macro  include/linux/mod_devicetable.h  383  #define SSB_ANY_VENDOR 0xFFFF
SSB_ANY_ID  macro  include/linux/mod_devicetable.h  384  #define SSB_ANY_ID 0xFFFF
SSB_ANY_REV  macro  include/linux/mod_devicetable.h  385  #define SSB_ANY_REV 0xFF
bcma_device_id  struct  include/linux/mod_devicetable.h  388  struct bcma_device_id { __u16 manuf; __u16 id; __u8 rev; };
BCMA_CORE  macro  include/linux/mod_devicetable.h  394  #define BCMA_CORE(_manuf,_id,_rev,_class) { .manuf = _manuf, .id = _id, .rev = _rev, .class = _class, }
BCMA_CORETABLE_END  macro  include/linux/mod_devicetable.h  396  #define BCMA_CORETABLE_END { 0, },
BCMA_ANY_MANUF  macro  include/linux/mod_devicetable.h  399  #define BCMA_ANY_MANUF 0xFFFF
BCMA_ANY_ID  macro  include/linux/mod_devicetable.h  400  #define BCMA_ANY_ID 0xFFFF
BCMA_ANY_REV  macro  include/linux/mod_devicetable.h  401  #define BCMA_ANY_REV 0xFF
BCMA_ANY_CLASS  macro  include/linux/mod_devicetable.h  402  #define BCMA_ANY_CLASS 0xFF
virtio_device_id  struct  include/linux/mod_devicetable.h  404  struct virtio_device_id { __u32 device; __u32 vendor; };
VIRTIO_DEV_ANY_ID  macro  include/linux/mod_devicetable.h  408  #define VIRTIO_DEV_ANY_ID 0xffffffff
hv_vmbus_device_id  struct  include/linux/mod_devicetable.h  413  struct hv_vmbus_device_id { __u8 guid[16]; kernel_ulong_t driver_data };
RPMSG_NAME_SIZE  macro  include/linux/mod_devicetable.h  421  #define RPMSG_NAME_SIZE 32
RPMSG_DEVICE_MODALIAS_FMT  macro  include/linux/mod_devicetable.h  422  #define RPMSG_DEVICE_MODALIAS_FMT "rpmsg:%s"
rpmsg_device_id  struct  include/linux/mod_devicetable.h  424  struct rpmsg_device_id { char name[RPMSG_NAME_SIZE]; };
I2C_NAME_SIZE  macro  include/linux/mod_devicetable.h  430  #define I2C_NAME_SIZE 20
I2C_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  431  #define I2C_MODULE_PREFIX "i2c:"
i2c_device_id  struct  include/linux/mod_devicetable.h  433  struct i2c_device_id { char name[I2C_NAME_SIZE]; kernel_ulong_t driver_data };
SPI_NAME_SIZE  macro  include/linux/mod_devicetable.h  441  #define SPI_NAME_SIZE 32
SPI_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  442  #define SPI_MODULE_PREFIX "spi:"
spi_device_id  struct  include/linux/mod_devicetable.h  444  struct spi_device_id { char name[SPI_NAME_SIZE]; kernel_ulong_t driver_data };
dmi_field  enum  include/linux/mod_devicetable.h  451  enum dmi_field { DMI_NONE, DMI_BIOS_VENDOR, DMI_BIOS_VERSION, DMI_BIOS_DATE, DMI_SYS_VENDOR, DMI_PRODUCT_NAME, DMI_PRODUCT_VERSION, DMI_PRODUCT_SERIAL, DMI_PRODUCT_UUID, DMI_BOARD_VENDOR, DMI_BOARD_NAME, DMI_BOARD_VERSION, DMI_BOARD_SERIAL, DMI_BOARD_ASSET_TAG, DMI_CHASSIS_VENDOR, DMI_CHASSIS_TYPE, DMI_CHASSIS_VERSION, DMI_CHASSIS_SERIAL, DMI_CHASSIS_ASSET_TAG, DMI_STRING_MAX, };
dmi_strmatch  struct  include/linux/mod_devicetable.h  474  struct dmi_strmatch { unsigned char slot; char substr[79]; };
dmi_system_id  struct  include/linux/mod_devicetable.h  488  struct dmi_system_id { int (*callback)(const struct dmi_system_id *); const char *ident; struct dmi_strmatch matches[4]; void *driver_data; };
dmi_device_id  macro  include/linux/mod_devicetable.h  500  #define dmi_device_id dmi_system_id
DMI_MATCH  macro  include/linux/mod_devicetable.h  503  #define DMI_MATCH(a,b) { a,b }
PLATFORM_NAME_SIZE  macro  include/linux/mod_devicetable.h  505  #define PLATFORM_NAME_SIZE 20
PLATFORM_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  506  #define PLATFORM_MODULE_PREFIX "platform:"
platform_device_id  struct  include/linux/mod_devicetable.h  508  struct platform_device_id { char name[PLATFORM_NAME_SIZE]; kernel_ulong_t driver_data };
MDIO_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  514  #define MDIO_MODULE_PREFIX "mdio:"
MDIO_ID_FMT  macro  include/linux/mod_devicetable.h  516  #define MDIO_ID_FMT "%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d"
MDIO_ID_ARGS  macro  include/linux/mod_devicetable.h  517  #define MDIO_ID_ARGS(_id) (_id)>>31, ((_id)>>30) & 1, ((_id)>>29) & 1, ((_id)>>28) & 1, ((_id)>>27) & 1, ((_id)>>26) & 1, ((_id)>>25) & 1, ((_id)>>24) & 1, ((_id)>>23) & 1, ((_id)>>22) & 1, ((_id)>>21) & 1, ((_id)>>20) & 1, ((_id)>>19) & 1, ((_id)>>18) & 1, ((_id)>>17) & 1, ((_id)>>16) & 1, ((_id)>>15) & 1, ((_id)>>14) & 1, ((_id)>>13) & 1, ((_id)>>12) & 1, ((_id)>>11) & 1, ((_id)>>10) & 1, ((_id)>>9) & 1, ((_id)>>8) & 1, ((_id)>>7) & 1, ((_id)>>6) & 1, ((_id)>>5) & 1, ((_id)>>4) & 1, ((_id)>>3) & 1, ((_id)>>2) & 1, ((_id)>>1) & 1, (_id) & 1
mdio_device_id  struct  include/linux/mod_devicetable.h  535  struct mdio_device_id { __u32 phy_id; __u32 phy_id_mask; };
zorro_device_id  struct  include/linux/mod_devicetable.h  540  struct zorro_device_id { __u32 id; kernel_ulong_t driver_data; };
ZORRO_WILDCARD  macro  include/linux/mod_devicetable.h  545  #define ZORRO_WILDCARD (0xffffffff)
ZORRO_DEVICE_MODALIAS_FMT  macro  include/linux/mod_devicetable.h  547  #define ZORRO_DEVICE_MODALIAS_FMT "zorro:i%08X"
ISAPNP_ANY_ID  macro  include/linux/mod_devicetable.h  549  #define ISAPNP_ANY_ID 0xffff
isapnp_device_id  struct  include/linux/mod_devicetable.h  550  struct isapnp_device_id { unsigned short card_vendor, card_device; unsigned short vendor, function; kernel_ulong_t driver_data; };
amba_id  struct  include/linux/mod_devicetable.h  564  struct amba_id { unsigned int id; unsigned int mask; kernel_ulong_t data; void *data; };
x86_cpu_id  struct  include/linux/mod_devicetable.h  579  struct x86_cpu_id { __u16 vendor; __u16 family; __u16 model; __u16 feature; kernel_ulong_t driver_data; };
X86_FEATURE_MATCH  macro  include/linux/mod_devicetable.h  587  #define X86_FEATURE_MATCH(x) { X86_VENDOR_ANY, X86_FAMILY_ANY, X86_MODEL_ANY, x }
X86_VENDOR_ANY  macro  include/linux/mod_devicetable.h  590  #define X86_VENDOR_ANY 0xffff
X86_FAMILY_ANY  macro  include/linux/mod_devicetable.h  591  #define X86_FAMILY_ANY 0
X86_MODEL_ANY  macro  include/linux/mod_devicetable.h  592  #define X86_MODEL_ANY 0
X86_FEATURE_ANY  macro  include/linux/mod_devicetable.h  593  #define X86_FEATURE_ANY 0
_DEVICE_H_  macro  include/linux/device.h  14  #define _DEVICE_H_
bus_attribute  struct  include/linux/device.h  40  struct bus_attribute { struct attribute attr; ssize_t (*show)(struct bus_type *bus, char *buf); ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count); };
BUS_ATTR  macro  include/linux/device.h  46  #define BUS_ATTR(_name,_mode,_show,_store) struct bus_attribute bus_attr_##_name = __ATTR(_name, _mode, _show, _store)
bus_create_file  prototype  include/linux/device.h  49  extern int __must_check bus_create_file(struct bus_type *,struct bus_attribute *);
bus_remove_file  prototype  include/linux/device.h  51  extern void bus_remove_file(struct bus_type *,struct bus_attribute *);
bus_type  struct  include/linux/device.h  90  struct bus_type { const char *name; const char *dev_name; struct device *dev_root; struct bus_attribute *bus_attrs; struct device_attribute *dev_attrs; struct driver_attribute *drv_attrs; int (*match)(struct device *dev, struct device_driver *drv); int (*uevent)(struct device *dev, struct kobj_uevent_env *env); int (*probe)(struct device *dev); int (*remove)(struct device *dev); void (*shutdown)(struct device *dev); int (*suspend)(struct device *dev, pm_message_t state); int (*resume)(struct device *dev); const struct dev_pm_ops *pm; struct iommu_ops *iommu_ops; struct subsys_private *p; };
bus_register  macro  include/linux/device.h  116  #define bus_register(subsys) ({ static struct lock_class_key __key; __bus_register(subsys, &__key); })
__bus_register  prototype  include/linux/device.h  121  extern int __must_check __bus_register(struct bus_type *bus,struct lock_class_key *key);
bus_unregister  prototype  include/linux/device.h  123  extern void bus_unregister(struct bus_type *bus);
bus_rescan_devices  prototype  include/linux/device.h  125  extern int __must_check bus_rescan_devices(struct bus_type *bus);
subsys_dev_iter  struct  include/linux/device.h  128  struct subsys_dev_iter { struct klist_iter ki; const struct device_type *type; };
subsys_dev_iter_init  prototype  include/linux/device.h  132  void subsys_dev_iter_init(struct subsys_dev_iter *iter,struct bus_type *subsys,struct device *start,const struct device_type *type);
subsys_dev_iter_next  prototype  include/linux/device.h  136  struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
subsys_dev_iter_exit  prototype  include/linux/device.h  137  void subsys_dev_iter_exit(struct subsys_dev_iter *iter);
bus_for_each_dev  prototype  include/linux/device.h  139  int bus_for_each_dev(struct bus_type *bus,struct device *start,void *data,int (*fn)(struct device *dev, void *data));
bus_find_device  prototype  include/linux/device.h  141  struct device *bus_find_device(struct bus_type *bus,struct device *start,void *data,int (*match)(struct device *dev, void *data));
bus_find_device_by_name  prototype  include/linux/device.h  144  struct device *bus_find_device_by_name(struct bus_type *bus,struct device *start,const char *name);
subsys_find_device_by_id  prototype  include/linux/device.h  147  struct device *subsys_find_device_by_id(struct bus_type *bus,unsigned int id,struct device *hint);
bus_for_each_drv  prototype  include/linux/device.h  149  int bus_for_each_drv(struct bus_type *bus,struct device_driver *start,void *data, int (*fn)(struct device_driver *, void *));
bus_sort_breadthfirst  prototype  include/linux/device.h  151  void bus_sort_breadthfirst(struct bus_type *bus,int (*compare)(const struct device *a,const struct device *b));
bus_register_notifier  prototype  include/linux/device.h  162  extern int bus_register_notifier(struct bus_type *bus,struct notifier_block *nb);
bus_unregister_notifier  prototype  include/linux/device.h  164  extern int bus_unregister_notifier(struct bus_type *bus,struct notifier_block *nb);
BUS_NOTIFY_ADD_DEVICE  macro  include/linux/device.h  171  #define BUS_NOTIFY_ADD_DEVICE 0x00000001
BUS_NOTIFY_DEL_DEVICE  macro  include/linux/device.h  172  #define BUS_NOTIFY_DEL_DEVICE 0x00000002
BUS_NOTIFY_BIND_DRIVER  macro  include/linux/device.h  173  #define BUS_NOTIFY_BIND_DRIVER 0x00000003
BUS_NOTIFY_BOUND_DRIVER  macro  include/linux/device.h  175  #define BUS_NOTIFY_BOUND_DRIVER 0x00000004
BUS_NOTIFY_UNBIND_DRIVER  macro  include/linux/device.h  176  #define BUS_NOTIFY_UNBIND_DRIVER 0x00000005
BUS_NOTIFY_UNBOUND_DRIVER  macro  include/linux/device.h  178  #define BUS_NOTIFY_UNBOUND_DRIVER 0x00000006
bus_get_kset  prototype  include/linux/device.h  181  extern struct kset *bus_get_kset(struct bus_type *bus);
bus_get_device_klist  prototype  include/linux/device.h  182  extern struct klist *bus_get_device_klist(struct bus_type *bus);
device_driver  struct  include/linux/device.h  215  struct device_driver { const char *name; struct bus_type *bus; struct module *owner; const char *mod_name; bool suppress_bind_attrs; const struct of_device_id *of_match_table; int (*probe) (struct device *dev); int (*remove) (struct device *dev); void (*shutdown) (struct device *dev); int (*suspend) (struct device *dev, pm_message_t state); int (*resume) (struct device *dev); const struct attribute_group **groups; const struct dev_pm_ops *pm; struct driver_private *p; };
driver_register  prototype  include/linux/device.h  239  extern int __must_check driver_register(struct device_driver *drv);
driver_unregister  prototype  include/linux/device.h  240  extern void driver_unregister(struct device_driver *drv);
driver_find  prototype  include/linux/device.h  242  extern struct device_driver *driver_find(const char *name,struct bus_type *bus);
driver_probe_done  prototype  include/linux/device.h  244  extern int driver_probe_done(void);
wait_for_device_probe  prototype  include/linux/device.h  245  extern void wait_for_device_probe(void);
driver_attribute  struct  include/linux/device.h  250  struct driver_attribute { struct attribute attr; ssize_t (*show)(struct device_driver *driver, char *buf); ssize_t (*store)(struct device_driver *driver, const char *buf,size_t count); };
DRIVER_ATTR  macro  include/linux/device.h  257  #define DRIVER_ATTR(_name,_mode,_show,_store) struct driver_attribute driver_attr_##_name = __ATTR(_name, _mode, _show, _store)
driver_create_file  prototype  include/linux/device.h  261  extern int __must_check driver_create_file(struct device_driver *driver,const struct driver_attribute *attr);
driver_remove_file  prototype  include/linux/device.h  263  extern void driver_remove_file(struct device_driver *driver,const struct driver_attribute *attr);
driver_for_each_device  prototype  include/linux/device.h  266  extern int __must_check driver_for_each_device(struct device_driver *drv,struct device *start,void *data,int (*fn)(struct device *dev,void *));
driver_find_device  prototype  include/linux/device.h  271  struct device *driver_find_device(struct device_driver *drv,struct device *start, void *data,int (*match)(struct device *dev, void *data));
subsys_interface  struct  include/linux/device.h  288  struct subsys_interface { const char *name; struct bus_type *subsys; struct list_head node; int (*add_dev)(struct device *dev, struct subsys_interface *sif); int (*remove_dev)(struct device *dev, struct subsys_interface *sif); };
subsys_interface_register  prototype  include/linux/device.h  296  int subsys_interface_register(struct subsys_interface *sif);
subsys_interface_unregister  prototype  include/linux/device.h  297  void subsys_interface_unregister(struct subsys_interface *sif);
subsys_system_register  prototype  include/linux/device.h  299  int subsys_system_register(struct bus_type *subsys,const struct attribute_group **groups);
class_dev_iter  struct  include/linux/device.h  357  struct class_dev_iter { struct klist_iter ki; const struct device_type *type; };
__class_register  prototype  include/linux/device.h  364  extern int __must_check __class_register(struct class *class,struct lock_class_key *key);
class_unregister  prototype  include/linux/device.h  366  extern void class_unregister(struct class *class);
class_register  macro  include/linux/device.h  370  #define class_register(class) ({ static struct lock_class_key __key; __class_register(class, &__key); })
class_compat_register  prototype  include/linux/device.h  377  struct class_compat *class_compat_register(const char *name);
class_compat_unregister  prototype  include/linux/device.h  378  void class_compat_unregister(struct class_compat *cls);
class_compat_create_link  prototype  include/linux/device.h  379  int class_compat_create_link(struct class_compat *cls,struct device *dev,struct device *device_link);
class_compat_remove_link  prototype  include/linux/device.h  381  void class_compat_remove_link(struct class_compat *cls,struct device *dev,struct device *device_link);
class_dev_iter_init  prototype  include/linux/device.h  384  extern void class_dev_iter_init(struct class_dev_iter *iter,struct class *class,struct device *start,const struct device_type *type);
class_dev_iter_next  prototype  include/linux/device.h  388  extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
class_dev_iter_exit  prototype  include/linux/device.h  389  extern void class_dev_iter_exit(struct class_dev_iter *iter);
class_for_each_device  prototype  include/linux/device.h  391  extern int class_for_each_device(struct class *class,struct device *start,void *data,int (*fn)(struct device *dev, void *data));
class_find_device  prototype  include/linux/device.h  394  extern struct device *class_find_device(struct class *class,struct device *start, void *data,int (*match)(struct device *, void *));
class_attribute  struct  include/linux/device.h  398  struct class_attribute { struct attribute attr; ssize_t (*show)(struct class *class, struct class_attribute *attr,char *buf); ssize_t (*store)(struct class *class, struct class_attribute *attr,const char *buf, size_t count); };
CLASS_ATTR  macro  include/linux/device.h  408  #define CLASS_ATTR(_name,_mode,_show,_store) struct class_attribute class_attr_##_name = __ATTR(_name, _mode, _show, _store)
class_create_file  prototype  include/linux/device.h  411  extern int __must_check class_create_file(struct class *class,const struct class_attribute *attr);
class_remove_file  prototype  include/linux/device.h  413  extern void class_remove_file(struct class *class,const struct class_attribute *attr);
class_attribute_string  struct  include/linux/device.h  418  struct class_attribute_string { struct class_attribute attr; char *str; };
_CLASS_ATTR_STRING  macro  include/linux/device.h  424  #define _CLASS_ATTR_STRING(_name,_mode,_str) { __ATTR(_name, _mode, show_class_attr_string, NULL), _str }
CLASS_ATTR_STRING  macro  include/linux/device.h  426  #define CLASS_ATTR_STRING(_name,_mode,_str) struct class_attribute_string class_attr_##_name = _CLASS_ATTR_STRING(_name, _mode, _str)
show_class_attr_string  prototype  include/linux/device.h  430  extern ssize_t show_class_attr_string(struct class *class,struct class_attribute *attr,char *buf);
class_interface  struct  include/linux/device.h  433  struct class_interface { struct list_head node; int (*add_dev) (struct device *, struct class_interface *); void (*remove_dev) (struct device *, struct class_interface *); };
class_interface_register  prototype  include/linux/device.h  441  extern int __must_check class_interface_register(struct class_interface *);
class_interface_unregister  prototype  include/linux/device.h  442  extern void class_interface_unregister(struct class_interface *);
__class_create  prototype  include/linux/device.h  444  extern struct class * __must_check __class_create(struct module *owner,const char *name,struct lock_class_key *key);
class_destroy  prototype  include/linux/device.h  447  extern void class_destroy(struct class *cls);
class_create  macro  include/linux/device.h  451  #define class_create(owner,name) ({ static struct lock_class_key __key; __class_create(owner, name, &__key); })
device_type  struct  include/linux/device.h  466  struct device_type { const char *name; const struct attribute_group **groups; int (*uevent)(struct device *dev, struct kobj_uevent_env *env); char *(*devnode)(struct device *dev, umode_t *mode); void (*release)(struct device *dev); const struct dev_pm_ops *pm; };
device_attribute  struct  include/linux/device.h  477  struct device_attribute { struct attribute attr; ssize_t (*show)(struct device *dev, struct device_attribute *attr,char *buf); ssize_t (*store)(struct device *dev, struct device_attribute *attr,const char *buf, size_t count); };
dev_ext_attribute  struct  include/linux/device.h  485  struct dev_ext_attribute { struct device_attribute attr; void *var; };
device_show_ulong  prototype  include/linux/device.h  490  ssize_t device_show_ulong(struct device *dev,struct device_attribute *attr,char *buf);
device_store_ulong  prototype  include/linux/device.h  492  ssize_t device_store_ulong(struct device *dev,struct device_attribute *attr,const char *buf, size_t count);
device_show_int  prototype  include/linux/device.h  494  ssize_t device_show_int(struct device *dev,struct device_attribute *attr,char *buf);
device_store_int  prototype  include/linux/device.h  496  ssize_t device_store_int(struct device *dev,struct device_attribute *attr,const char *buf, size_t count);
DEVICE_ATTR  macro  include/linux/device.h  499  #define DEVICE_ATTR(_name,_mode,_show,_store) struct device_attribute dev_attr_##_name = __ATTR(_name, _mode, _show, _store)
DEVICE_ULONG_ATTR  macro  include/linux/device.h  501  #define DEVICE_ULONG_ATTR(_name,_mode,_var) struct dev_ext_attribute dev_attr_##_name = { __ATTR(_name, _mode, device_show_ulong, device_store_ulong), &(_var) }
DEVICE_INT_ATTR  macro  include/linux/device.h  504  #define DEVICE_INT_ATTR(_name,_mode,_var) struct dev_ext_attribute dev_attr_##_name = { __ATTR(_name, _mode, device_show_int, device_store_int), &(_var) }
DEVICE_ATTR_IGNORE_LOCKDEP  macro  include/linux/device.h  507  #define DEVICE_ATTR_IGNORE_LOCKDEP(_name,_mode,_show,_store) struct device_attribute dev_attr_##_name = __ATTR_IGNORE_LOCKDEP(_name, _mode, _show, _store)
device_create_file  prototype  include/linux/device.h  511  extern int device_create_file(struct device *device,const struct device_attribute *entry);
device_remove_file  prototype  include/linux/device.h  513  extern void device_remove_file(struct device *dev,const struct device_attribute *attr);
device_create_bin_file  prototype  include/linux/device.h  515  extern int __must_check device_create_bin_file(struct device *dev,const struct bin_attribute *attr);
device_remove_bin_file  prototype  include/linux/device.h  517  extern void device_remove_bin_file(struct device *dev,const struct bin_attribute *attr);
device_schedule_callback_owner  prototype  include/linux/device.h  519  extern int device_schedule_callback_owner(struct device *dev,void (*func)(struct device *dev), struct module *owner);
device_schedule_callback  macro  include/linux/device.h  523  #define device_schedule_callback(dev,func) device_schedule_callback_owner(dev, func, THIS_MODULE)
__devres_alloc  prototype  include/linux/device.h  531  extern void *__devres_alloc(dr_release_t release,size_t size,gfp_t gfp,const char *name);
devres_alloc  prototype  include/linux/device.h  536  extern void *devres_alloc(dr_release_t release,size_t size,gfp_t gfp);
devres_free  prototype  include/linux/device.h  538  extern void devres_free(void *res);
devres_add  prototype  include/linux/device.h  539  extern void devres_add(struct device *dev,void *res);
devres_find  prototype  include/linux/device.h  540  extern void *devres_find(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_get  prototype  include/linux/device.h  542  extern void *devres_get(struct device *dev,void *new_res,dr_match_t match, void *match_data);
devres_remove  prototype  include/linux/device.h  544  extern void *devres_remove(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_destroy  prototype  include/linux/device.h  546  extern int devres_destroy(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_release  prototype  include/linux/device.h  548  extern int devres_release(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_open_group  prototype  include/linux/device.h  552  extern void * __must_check devres_open_group(struct device *dev,void *id,gfp_t gfp);
devres_close_group  prototype  include/linux/device.h  554  extern void devres_close_group(struct device *dev,void *id);
devres_remove_group  prototype  include/linux/device.h  555  extern void devres_remove_group(struct device *dev,void *id);
devres_release_group  prototype  include/linux/device.h  556  extern int devres_release_group(struct device *dev,void *id);
devm_kzalloc  prototype  include/linux/device.h  559  extern void *devm_kzalloc(struct device *dev,size_t size,gfp_t gfp);
devm_kfree  prototype  include/linux/device.h  560  extern void devm_kfree(struct device *dev,void *p);
devm_request_and_ioremap  prototype  include/linux/device.h  562  void __iomem *devm_request_and_ioremap(struct device *dev,struct resource *res);
device_dma_parameters  struct  include/linux/device.h  565  struct device_dma_parameters { unsigned int max_segment_size; unsigned long segment_boundary_mask; };
device  struct  include/linux/device.h  633  struct device { struct device *parent; struct device_private *p; struct kobject kobj; const char *init_name; const struct device_type *type; struct mutex mutex; struct bus_type *bus; struct device_driver *driver; void *platform_data; struct dev_pm_info power; struct dev_pm_domain *pm_domain; int numa_node; u64 *dma_mask; u64 coherent_dma_mask; struct device_dma_parameters *dma_parms; struct list_head dma_pools; struct dma_coherent_mem *dma_mem; struct cma *cma_area; struct dev_archdata archdata; struct device_node *of_node; dev_t devt; u32 id; spinlock_t devres_lock; struct list_head devres_head; struct klist_node knode_class; const struct attribute_group **groups; void (*release)(struct device *dev); };
dev_name  function  include/linux/device.h  695  static inline const char *dev_name(const struct device *dev)
dev_set_name  prototype  include/linux/device.h  705  int dev_set_name(struct device *dev,const char *name,...);
dev_to_node  function  include/linux/device.h  717  static inline int dev_to_node(struct device *dev)
set_dev_node  function  include/linux/device.h  721  static inline void set_dev_node(struct device *dev,int node)
dev_to_psd  function  include/linux/device.h  726  static inline struct pm_subsys_data *dev_to_psd(struct device *dev)
dev_get_uevent_suppress  function  include/linux/device.h  731  static inline unsigned int dev_get_uevent_suppress(const struct device *dev)
dev_set_uevent_suppress  function  include/linux/device.h  736  static inline void dev_set_uevent_suppress(struct device *dev,int val)
device_is_registered  function  include/linux/device.h  741  static inline int device_is_registered(struct device *dev)
device_enable_async_suspend  function  include/linux/device.h  746  static inline void device_enable_async_suspend(struct device *dev)
device_disable_async_suspend  function  include/linux/device.h  752  static inline void device_disable_async_suspend(struct device *dev)
device_async_suspend_enabled  function  include/linux/device.h  758  static inline bool device_async_suspend_enabled(struct device *dev)
pm_suspend_ignore_children  function  include/linux/device.h  763  static inline void pm_suspend_ignore_children(struct device *dev,bool enable)
device_lock  function  include/linux/device.h  768  static inline void device_lock(struct device *dev)
device_trylock  function  include/linux/device.h  773  static inline int device_trylock(struct device *dev)
device_unlock  function  include/linux/device.h  778  static inline void device_unlock(struct device *dev)
driver_init  prototype  include/linux/device.h  783  void driver_init(void);
device_register  prototype  include/linux/device.h  788  extern int __must_check device_register(struct device *dev);
device_unregister  prototype  include/linux/device.h  789  extern void device_unregister(struct device *dev);
device_initialize  prototype  include/linux/device.h  790  extern void device_initialize(struct device *dev);
device_add  prototype  include/linux/device.h  791  extern int __must_check device_add(struct device *dev);
device_del  prototype  include/linux/device.h  792  extern void device_del(struct device *dev);
device_for_each_child  prototype  include/linux/device.h  793  extern int device_for_each_child(struct device *dev,void *data,int (*fn)(struct device *dev, void *data));
device_find_child  prototype  include/linux/device.h  795  extern struct device *device_find_child(struct device *dev,void *data,int (*match)(struct device *dev, void *data));
device_rename  prototype  include/linux/device.h  797  extern int device_rename(struct device *dev,const char *new_name);
device_move  prototype  include/linux/device.h  798  extern int device_move(struct device *dev,struct device *new_parent,enum dpm_order dpm_order);
device_get_devnode  prototype  include/linux/device.h  800  extern const char *device_get_devnode(struct device *dev,umode_t *mode, const char **tmp);
dev_get_drvdata  prototype  include/linux/device.h  802  extern void *dev_get_drvdata(const struct device *dev);
dev_set_drvdata  prototype  include/linux/device.h  803  extern int dev_set_drvdata(struct device *dev,void *data);
__root_device_register  prototype  include/linux/device.h  808  extern struct device *__root_device_register(const char *name,struct module *owner);
root_device_register  macro  include/linux/device.h  815  #define root_device_register(name) __root_device_register(name, THIS_MODULE)
root_device_unregister  prototype  include/linux/device.h  818  extern void root_device_unregister(struct device *root);
dev_get_platdata  function  include/linux/device.h  820  static inline void *dev_get_platdata(const struct device *dev)
device_bind_driver  prototype  include/linux/device.h  829  extern int __must_check device_bind_driver(struct device *dev);
device_release_driver  prototype  include/linux/device.h  830  extern void device_release_driver(struct device *dev);
device_attach  prototype  include/linux/device.h  831  extern int __must_check device_attach(struct device *dev);
driver_attach  prototype  include/linux/device.h  832  extern int __must_check driver_attach(struct device_driver *drv);
device_reprobe  prototype  include/linux/device.h  833  extern int __must_check device_reprobe(struct device *dev);
device_create_vargs  prototype  include/linux/device.h  838  extern struct device *device_create_vargs(struct class *cls,struct device *parent,dev_t devt,void *drvdata,const char *fmt,va_list vargs);
device_create  prototype  include/linux/device.h  845  struct device *device_create(struct class *cls,struct device *parent,dev_t devt, void *drvdata,const char *fmt, ...);
device_destroy  prototype  include/linux/device.h  848  extern void device_destroy(struct class *cls,dev_t devt);
get_device  prototype  include/linux/device.h  865  extern struct device *get_device(struct device *dev);
put_device  prototype  include/linux/device.h  866  extern void put_device(struct device *dev);
devtmpfs_create_node  function  include/linux/device.h  873  static inline int devtmpfs_create_node(struct device *dev) { return 0; }
devtmpfs_delete_node  function  include/linux/device.h  874  static inline int devtmpfs_delete_node(struct device *dev) { return 0; }
devtmpfs_mount  function  include/linux/device.h  875  static inline int devtmpfs_mount(const char *mountpoint) { return 0; }
device_shutdown  prototype  include/linux/device.h  879  extern void device_shutdown(void);
dev_driver_string  prototype  include/linux/device.h  882  extern const char *dev_driver_string(const struct device *dev);
__dev_printk  function  include/linux/device.h  910  static inline int __dev_printk(const char *level,const struct device *dev,struct va_format *vaf)
dev_printk  function  include/linux/device.h  914  int dev_printk(const char *level,const struct device *dev,const char *fmt, ...)
dev_emerg  function  include/linux/device.h  919  int dev_emerg(const struct device *dev,const char *fmt,...)
dev_alert  function  include/linux/device.h  925  int dev_alert(const struct device *dev,const char *fmt,...)
dev_crit  function  include/linux/device.h  922  int dev_crit(const struct device *dev,const char *fmt,...)
dev_err  function  include/linux/device.h  928  int dev_err(const struct device *dev,const char *fmt,...)
dev_warn  function  include/linux/device.h  931  int dev_warn(const struct device *dev,const char *fmt,...)
dev_notice  function  include/linux/device.h  934  int dev_notice(const struct device *dev,const char *fmt,...)
_dev_info  function  include/linux/device.h  937  int _dev_info(const struct device *dev,const char *fmt,...)
dev_level_ratelimited  macro  include/linux/device.h  942  #define dev_level_ratelimited(dev_level,dev,fmt,...) do { static DEFINE_RATELIMIT_STATE(_rs, DEFAULT_RATELIMIT_INTERVAL, DEFAULT_RATELIMIT_BURST); if (__ratelimit(&_rs)) dev_level(dev, fmt, ##__VA_ARGS__); } while (0)
dev_emerg_ratelimited  macro  include/linux/device.h  951  #define dev_emerg_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_emerg, dev, fmt, ##__VA_ARGS__)
dev_alert_ratelimited  macro  include/linux/device.h  953  #define dev_alert_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_alert, dev, fmt, ##__VA_ARGS__)
dev_crit_ratelimited  macro  include/linux/device.h  955  #define dev_crit_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_crit, dev, fmt, ##__VA_ARGS__)
dev_err_ratelimited  macro  include/linux/device.h  957  #define dev_err_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_err, dev, fmt, ##__VA_ARGS__)
dev_warn_ratelimited  macro  include/linux/device.h  959  #define dev_warn_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_warn, dev, fmt, ##__VA_ARGS__)
dev_notice_ratelimited  macro  include/linux/device.h  961  #define dev_notice_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_notice, dev, fmt, ##__VA_ARGS__)
dev_info_ratelimited  macro  include/linux/device.h  963  #define dev_info_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_info, dev, fmt, ##__VA_ARGS__)
dev_dbg_ratelimited  macro  include/linux/device.h  965  #define dev_dbg_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_dbg, dev, fmt, ##__VA_ARGS__)
dev_info  macro  include/linux/device.h  975  #define dev_info(dev,fmt,arg...) _dev_info(dev,fmt,##arg)
dev_dbg  macro  include/linux/device.h  986  #define dev_dbg(dev,format,arg...) ({ if (0) dev_printk(KERN_DEBUG, dev, format, ##arg); 0; })
dev_vdbg  macro  include/linux/device.h  997  #define dev_vdbg(dev,format,arg...) ({ if (0) dev_printk(KERN_DEBUG, dev, format, ##arg); 0; })
dev_WARN  macro  include/linux/device.h  1010  #define dev_WARN(dev,format,arg...) WARN(1, "Device: %s\n" format, dev_driver_string(dev), ## arg);
dev_WARN_ONCE  macro  include/linux/device.h  1013  #define dev_WARN_ONCE(dev,condition,format,arg...) WARN_ONCE(condition, "Device %s\n" format, dev_driver_string(dev), ## arg)
MODULE_ALIAS_CHARDEV  macro  include/linux/device.h  1018  #define MODULE_ALIAS_CHARDEV(major,minor) MODULE_ALIAS("char-major-" __stringify(major) "-" __stringify(minor))
MODULE_ALIAS_CHARDEV_MAJOR  macro  include/linux/device.h  1020  #define MODULE_ALIAS_CHARDEV_MAJOR(major) MODULE_ALIAS("char-major-" __stringify(major) "-*")
sysfs_deprecated  macro  include/linux/device.h  1026  #define sysfs_deprecated 0
module_driver  macro  include/linux/device.h  1043  #define module_driver(__driver,__register,__unregister,...) static int __init __driver##_init(void) { return __register(&(__driver) , ##__VA_ARGS__); } module_init(__driver##_init); static void __exit __driver##_exit(void) { __unregister(&(__driver) , ##__VA_ARGS__); } module_exit(__driver##_exit);
PCI_CLASS_NOT_DEFINED  macro  include/linux/pci_ids.h  12  #define PCI_CLASS_NOT_DEFINED 0x0000
PCI_CLASS_NOT_DEFINED_VGA  macro  include/linux/pci_ids.h  13  #define PCI_CLASS_NOT_DEFINED_VGA 0x0001
PCI_BASE_CLASS_STORAGE  macro  include/linux/pci_ids.h  15  #define PCI_BASE_CLASS_STORAGE 0x01
PCI_CLASS_STORAGE_SCSI  macro  include/linux/pci_ids.h  16  #define PCI_CLASS_STORAGE_SCSI 0x0100
PCI_CLASS_STORAGE_IDE  macro  include/linux/pci_ids.h  17  #define PCI_CLASS_STORAGE_IDE 0x0101
PCI_CLASS_STORAGE_FLOPPY  macro  include/linux/pci_ids.h  18  #define PCI_CLASS_STORAGE_FLOPPY 0x0102
PCI_CLASS_STORAGE_IPI  macro  include/linux/pci_ids.h  19  #define PCI_CLASS_STORAGE_IPI 0x0103
PCI_CLASS_STORAGE_RAID  macro  include/linux/pci_ids.h  20  #define PCI_CLASS_STORAGE_RAID 0x0104
PCI_CLASS_STORAGE_SATA  macro  include/linux/pci_ids.h  21  #define PCI_CLASS_STORAGE_SATA 0x0106
PCI_CLASS_STORAGE_SATA_AHCI  macro  include/linux/pci_ids.h  22  #define PCI_CLASS_STORAGE_SATA_AHCI 0x010601
PCI_CLASS_STORAGE_SAS  macro  include/linux/pci_ids.h  23  #define PCI_CLASS_STORAGE_SAS 0x0107
PCI_CLASS_STORAGE_OTHER  macro  include/linux/pci_ids.h  24  #define PCI_CLASS_STORAGE_OTHER 0x0180
PCI_BASE_CLASS_NETWORK  macro  include/linux/pci_ids.h  26  #define PCI_BASE_CLASS_NETWORK 0x02
PCI_CLASS_NETWORK_ETHERNET  macro  include/linux/pci_ids.h  27  #define PCI_CLASS_NETWORK_ETHERNET 0x0200
PCI_CLASS_NETWORK_TOKEN_RING  macro  include/linux/pci_ids.h  28  #define PCI_CLASS_NETWORK_TOKEN_RING 0x0201
PCI_CLASS_NETWORK_FDDI  macro  include/linux/pci_ids.h  29  #define PCI_CLASS_NETWORK_FDDI 0x0202
PCI_CLASS_NETWORK_ATM  macro  include/linux/pci_ids.h  30  #define PCI_CLASS_NETWORK_ATM 0x0203
PCI_CLASS_NETWORK_OTHER  macro  include/linux/pci_ids.h  31  #define PCI_CLASS_NETWORK_OTHER 0x0280
PCI_BASE_CLASS_DISPLAY  macro  include/linux/pci_ids.h  33  #define PCI_BASE_CLASS_DISPLAY 0x03
PCI_CLASS_DISPLAY_VGA  macro  include/linux/pci_ids.h  34  #define PCI_CLASS_DISPLAY_VGA 0x0300
PCI_CLASS_DISPLAY_XGA  macro  include/linux/pci_ids.h  35  #define PCI_CLASS_DISPLAY_XGA 0x0301
PCI_CLASS_DISPLAY_3D  macro  include/linux/pci_ids.h  36  #define PCI_CLASS_DISPLAY_3D 0x0302
PCI_CLASS_DISPLAY_OTHER  macro  include/linux/pci_ids.h  37  #define PCI_CLASS_DISPLAY_OTHER 0x0380
PCI_BASE_CLASS_MULTIMEDIA  macro  include/linux/pci_ids.h  39  #define PCI_BASE_CLASS_MULTIMEDIA 0x04
PCI_CLASS_MULTIMEDIA_VIDEO  macro  include/linux/pci_ids.h  40  #define PCI_CLASS_MULTIMEDIA_VIDEO 0x0400
PCI_CLASS_MULTIMEDIA_AUDIO  macro  include/linux/pci_ids.h  41  #define PCI_CLASS_MULTIMEDIA_AUDIO 0x0401
PCI_CLASS_MULTIMEDIA_PHONE  macro  include/linux/pci_ids.h  42  #define PCI_CLASS_MULTIMEDIA_PHONE 0x0402
PCI_CLASS_MULTIMEDIA_OTHER  macro  include/linux/pci_ids.h  43  #define PCI_CLASS_MULTIMEDIA_OTHER 0x0480
PCI_BASE_CLASS_MEMORY  macro  include/linux/pci_ids.h  45  #define PCI_BASE_CLASS_MEMORY 0x05
PCI_CLASS_MEMORY_RAM  macro  include/linux/pci_ids.h  46  #define PCI_CLASS_MEMORY_RAM 0x0500
PCI_CLASS_MEMORY_FLASH  macro  include/linux/pci_ids.h  47  #define PCI_CLASS_MEMORY_FLASH 0x0501
PCI_CLASS_MEMORY_OTHER  macro  include/linux/pci_ids.h  48  #define PCI_CLASS_MEMORY_OTHER 0x0580
PCI_BASE_CLASS_BRIDGE  macro  include/linux/pci_ids.h  50  #define PCI_BASE_CLASS_BRIDGE 0x06
PCI_CLASS_BRIDGE_HOST  macro  include/linux/pci_ids.h  51  #define PCI_CLASS_BRIDGE_HOST 0x0600
PCI_CLASS_BRIDGE_ISA  macro  include/linux/pci_ids.h  52  #define PCI_CLASS_BRIDGE_ISA 0x0601
PCI_CLASS_BRIDGE_EISA  macro  include/linux/pci_ids.h  53  #define PCI_CLASS_BRIDGE_EISA 0x0602
PCI_CLASS_BRIDGE_MC  macro  include/linux/pci_ids.h  54  #define PCI_CLASS_BRIDGE_MC 0x0603
PCI_CLASS_BRIDGE_PCI  macro  include/linux/pci_ids.h  55  #define PCI_CLASS_BRIDGE_PCI 0x0604
PCI_CLASS_BRIDGE_PCMCIA  macro  include/linux/pci_ids.h  56  #define PCI_CLASS_BRIDGE_PCMCIA 0x0605
PCI_CLASS_BRIDGE_NUBUS  macro  include/linux/pci_ids.h  57  #define PCI_CLASS_BRIDGE_NUBUS 0x0606
PCI_CLASS_BRIDGE_CARDBUS  macro  include/linux/pci_ids.h  58  #define PCI_CLASS_BRIDGE_CARDBUS 0x0607
PCI_CLASS_BRIDGE_RACEWAY  macro  include/linux/pci_ids.h  59  #define PCI_CLASS_BRIDGE_RACEWAY 0x0608
PCI_CLASS_BRIDGE_OTHER  macro  include/linux/pci_ids.h  60  #define PCI_CLASS_BRIDGE_OTHER 0x0680
PCI_BASE_CLASS_COMMUNICATION  macro  include/linux/pci_ids.h  62  #define PCI_BASE_CLASS_COMMUNICATION 0x07
PCI_CLASS_COMMUNICATION_SERIAL  macro  include/linux/pci_ids.h  63  #define PCI_CLASS_COMMUNICATION_SERIAL 0x0700
PCI_CLASS_COMMUNICATION_PARALLEL  macro  include/linux/pci_ids.h  64  #define PCI_CLASS_COMMUNICATION_PARALLEL 0x0701
PCI_CLASS_COMMUNICATION_MULTISERIAL  macro  include/linux/pci_ids.h  65  #define PCI_CLASS_COMMUNICATION_MULTISERIAL 0x0702
PCI_CLASS_COMMUNICATION_MODEM  macro  include/linux/pci_ids.h  66  #define PCI_CLASS_COMMUNICATION_MODEM 0x0703
PCI_CLASS_COMMUNICATION_OTHER  macro  include/linux/pci_ids.h  67  #define PCI_CLASS_COMMUNICATION_OTHER 0x0780
PCI_BASE_CLASS_SYSTEM  macro  include/linux/pci_ids.h  69  #define PCI_BASE_CLASS_SYSTEM 0x08
PCI_CLASS_SYSTEM_PIC  macro  include/linux/pci_ids.h  70  #define PCI_CLASS_SYSTEM_PIC 0x0800
PCI_CLASS_SYSTEM_PIC_IOAPIC  macro  include/linux/pci_ids.h  71  #define PCI_CLASS_SYSTEM_PIC_IOAPIC 0x080010
PCI_CLASS_SYSTEM_PIC_IOXAPIC  macro  include/linux/pci_ids.h  72  #define PCI_CLASS_SYSTEM_PIC_IOXAPIC 0x080020
PCI_CLASS_SYSTEM_DMA  macro  include/linux/pci_ids.h  73  #define PCI_CLASS_SYSTEM_DMA 0x0801
PCI_CLASS_SYSTEM_TIMER  macro  include/linux/pci_ids.h  74  #define PCI_CLASS_SYSTEM_TIMER 0x0802
PCI_CLASS_SYSTEM_RTC  macro  include/linux/pci_ids.h  75  #define PCI_CLASS_SYSTEM_RTC 0x0803
PCI_CLASS_SYSTEM_PCI_HOTPLUG  macro  include/linux/pci_ids.h  76  #define PCI_CLASS_SYSTEM_PCI_HOTPLUG 0x0804
PCI_CLASS_SYSTEM_SDHCI  macro  include/linux/pci_ids.h  77  #define PCI_CLASS_SYSTEM_SDHCI 0x0805
PCI_CLASS_SYSTEM_OTHER  macro  include/linux/pci_ids.h  78  #define PCI_CLASS_SYSTEM_OTHER 0x0880
PCI_BASE_CLASS_INPUT  macro  include/linux/pci_ids.h  80  #define PCI_BASE_CLASS_INPUT 0x09
PCI_CLASS_INPUT_KEYBOARD  macro  include/linux/pci_ids.h  81  #define PCI_CLASS_INPUT_KEYBOARD 0x0900
PCI_CLASS_INPUT_PEN  macro  include/linux/pci_ids.h  82  #define PCI_CLASS_INPUT_PEN 0x0901
PCI_CLASS_INPUT_MOUSE  macro  include/linux/pci_ids.h  83  #define PCI_CLASS_INPUT_MOUSE 0x0902
PCI_CLASS_INPUT_SCANNER  macro  include/linux/pci_ids.h  84  #define PCI_CLASS_INPUT_SCANNER 0x0903
PCI_CLASS_INPUT_GAMEPORT  macro  include/linux/pci_ids.h  85  #define PCI_CLASS_INPUT_GAMEPORT 0x0904
PCI_CLASS_INPUT_OTHER  macro  include/linux/pci_ids.h  86  #define PCI_CLASS_INPUT_OTHER 0x0980
PCI_BASE_CLASS_DOCKING  macro  include/linux/pci_ids.h  88  #define PCI_BASE_CLASS_DOCKING 0x0a
PCI_CLASS_DOCKING_GENERIC  macro  include/linux/pci_ids.h  89  #define PCI_CLASS_DOCKING_GENERIC 0x0a00
PCI_CLASS_DOCKING_OTHER  macro  include/linux/pci_ids.h  90  #define PCI_CLASS_DOCKING_OTHER 0x0a80
PCI_BASE_CLASS_PROCESSOR  macro  include/linux/pci_ids.h  92  #define PCI_BASE_CLASS_PROCESSOR 0x0b
PCI_CLASS_PROCESSOR_386  macro  include/linux/pci_ids.h  93  #define PCI_CLASS_PROCESSOR_386 0x0b00
PCI_CLASS_PROCESSOR_486  macro  include/linux/pci_ids.h  94  #define PCI_CLASS_PROCESSOR_486 0x0b01
PCI_CLASS_PROCESSOR_PENTIUM  macro  include/linux/pci_ids.h  95  #define PCI_CLASS_PROCESSOR_PENTIUM 0x0b02
PCI_CLASS_PROCESSOR_ALPHA  macro  include/linux/pci_ids.h  96  #define PCI_CLASS_PROCESSOR_ALPHA 0x0b10
PCI_CLASS_PROCESSOR_POWERPC  macro  include/linux/pci_ids.h  97  #define PCI_CLASS_PROCESSOR_POWERPC 0x0b20
PCI_CLASS_PROCESSOR_MIPS  macro  include/linux/pci_ids.h  98  #define PCI_CLASS_PROCESSOR_MIPS 0x0b30
PCI_CLASS_PROCESSOR_CO  macro  include/linux/pci_ids.h  99  #define PCI_CLASS_PROCESSOR_CO 0x0b40
PCI_BASE_CLASS_SERIAL  macro  include/linux/pci_ids.h  101  #define PCI_BASE_CLASS_SERIAL 0x0c
PCI_CLASS_SERIAL_FIREWIRE  macro  include/linux/pci_ids.h  102  #define PCI_CLASS_SERIAL_FIREWIRE 0x0c00
PCI_CLASS_SERIAL_FIREWIRE_OHCI  macro  include/linux/pci_ids.h  103  #define PCI_CLASS_SERIAL_FIREWIRE_OHCI 0x0c0010
PCI_CLASS_SERIAL_ACCESS  macro  include/linux/pci_ids.h  104  #define PCI_CLASS_SERIAL_ACCESS 0x0c01
PCI_CLASS_SERIAL_SSA  macro  include/linux/pci_ids.h  105  #define PCI_CLASS_SERIAL_SSA 0x0c02
PCI_CLASS_SERIAL_USB  macro  include/linux/pci_ids.h  106  #define PCI_CLASS_SERIAL_USB 0x0c03
PCI_CLASS_SERIAL_USB_UHCI  macro  include/linux/pci_ids.h  107  #define PCI_CLASS_SERIAL_USB_UHCI 0x0c0300
PCI_CLASS_SERIAL_USB_OHCI  macro  include/linux/pci_ids.h  108  #define PCI_CLASS_SERIAL_USB_OHCI 0x0c0310
PCI_CLASS_SERIAL_USB_EHCI  macro  include/linux/pci_ids.h  109  #define PCI_CLASS_SERIAL_USB_EHCI 0x0c0320
PCI_CLASS_SERIAL_USB_XHCI  macro  include/linux/pci_ids.h  110  #define PCI_CLASS_SERIAL_USB_XHCI 0x0c0330
PCI_CLASS_SERIAL_FIBER  macro  include/linux/pci_ids.h  111  #define PCI_CLASS_SERIAL_FIBER 0x0c04
PCI_CLASS_SERIAL_SMBUS  macro  include/linux/pci_ids.h  112  #define PCI_CLASS_SERIAL_SMBUS 0x0c05
PCI_BASE_CLASS_WIRELESS  macro  include/linux/pci_ids.h  114  #define PCI_BASE_CLASS_WIRELESS 0x0d
PCI_CLASS_WIRELESS_RF_CONTROLLER  macro  include/linux/pci_ids.h  115  #define PCI_CLASS_WIRELESS_RF_CONTROLLER 0x0d10
PCI_CLASS_WIRELESS_WHCI  macro  include/linux/pci_ids.h  116  #define PCI_CLASS_WIRELESS_WHCI 0x0d1010
PCI_BASE_CLASS_INTELLIGENT  macro  include/linux/pci_ids.h  118  #define PCI_BASE_CLASS_INTELLIGENT 0x0e
PCI_CLASS_INTELLIGENT_I2O  macro  include/linux/pci_ids.h  119  #define PCI_CLASS_INTELLIGENT_I2O 0x0e00
PCI_BASE_CLASS_SATELLITE  macro  include/linux/pci_ids.h  121  #define PCI_BASE_CLASS_SATELLITE 0x0f
PCI_CLASS_SATELLITE_TV  macro  include/linux/pci_ids.h  122  #define PCI_CLASS_SATELLITE_TV 0x0f00
PCI_CLASS_SATELLITE_AUDIO  macro  include/linux/pci_ids.h  123  #define PCI_CLASS_SATELLITE_AUDIO 0x0f01
PCI_CLASS_SATELLITE_VOICE  macro  include/linux/pci_ids.h  124  #define PCI_CLASS_SATELLITE_VOICE 0x0f03
PCI_CLASS_SATELLITE_DATA  macro  include/linux/pci_ids.h  125  #define PCI_CLASS_SATELLITE_DATA 0x0f04
PCI_BASE_CLASS_CRYPT  macro  include/linux/pci_ids.h  127  #define PCI_BASE_CLASS_CRYPT 0x10
PCI_CLASS_CRYPT_NETWORK  macro  include/linux/pci_ids.h  128  #define PCI_CLASS_CRYPT_NETWORK 0x1000
PCI_CLASS_CRYPT_ENTERTAINMENT  macro  include/linux/pci_ids.h  129  #define PCI_CLASS_CRYPT_ENTERTAINMENT 0x1001
PCI_CLASS_CRYPT_OTHER  macro  include/linux/pci_ids.h  130  #define PCI_CLASS_CRYPT_OTHER 0x1080
PCI_BASE_CLASS_SIGNAL_PROCESSING  macro  include/linux/pci_ids.h  132  #define PCI_BASE_CLASS_SIGNAL_PROCESSING 0x11
PCI_CLASS_SP_DPIO  macro  include/linux/pci_ids.h  133  #define PCI_CLASS_SP_DPIO 0x1100
PCI_CLASS_SP_OTHER  macro  include/linux/pci_ids.h  134  #define PCI_CLASS_SP_OTHER 0x1180
PCI_CLASS_OTHERS  macro  include/linux/pci_ids.h  136  #define PCI_CLASS_OTHERS 0xff
PCI_VENDOR_ID_TTTECH  macro  include/linux/pci_ids.h  140  #define PCI_VENDOR_ID_TTTECH 0x0357
PCI_DEVICE_ID_TTTECH_MC322  macro  include/linux/pci_ids.h  141  #define PCI_DEVICE_ID_TTTECH_MC322 0x000a
PCI_VENDOR_ID_DYNALINK  macro  include/linux/pci_ids.h  143  #define PCI_VENDOR_ID_DYNALINK 0x0675
PCI_DEVICE_ID_DYNALINK_IS64PH  macro  include/linux/pci_ids.h  144  #define PCI_DEVICE_ID_DYNALINK_IS64PH 0x1702
PCI_VENDOR_ID_BERKOM  macro  include/linux/pci_ids.h  146  #define PCI_VENDOR_ID_BERKOM 0x0871
PCI_DEVICE_ID_BERKOM_A1T  macro  include/linux/pci_ids.h  147  #define PCI_DEVICE_ID_BERKOM_A1T 0xffa1
PCI_DEVICE_ID_BERKOM_T_CONCEPT  macro  include/linux/pci_ids.h  148  #define PCI_DEVICE_ID_BERKOM_T_CONCEPT 0xffa2
PCI_DEVICE_ID_BERKOM_A4T  macro  include/linux/pci_ids.h  149  #define PCI_DEVICE_ID_BERKOM_A4T 0xffa4
PCI_DEVICE_ID_BERKOM_SCITEL_QUADRO  macro  include/linux/pci_ids.h  150  #define PCI_DEVICE_ID_BERKOM_SCITEL_QUADRO 0xffa8
PCI_VENDOR_ID_COMPAQ  macro  include/linux/pci_ids.h  152  #define PCI_VENDOR_ID_COMPAQ 0x0e11
PCI_DEVICE_ID_COMPAQ_TOKENRING  macro  include/linux/pci_ids.h  153  #define PCI_DEVICE_ID_COMPAQ_TOKENRING 0x0508
PCI_DEVICE_ID_COMPAQ_TACHYON  macro  include/linux/pci_ids.h  154  #define PCI_DEVICE_ID_COMPAQ_TACHYON 0xa0fc
PCI_DEVICE_ID_COMPAQ_SMART2P  macro  include/linux/pci_ids.h  155  #define PCI_DEVICE_ID_COMPAQ_SMART2P 0xae10
PCI_DEVICE_ID_COMPAQ_NETEL100  macro  include/linux/pci_ids.h  156  #define PCI_DEVICE_ID_COMPAQ_NETEL100 0xae32
PCI_DEVICE_ID_COMPAQ_NETEL10  macro  include/linux/pci_ids.h  157  #define PCI_DEVICE_ID_COMPAQ_NETEL10 0xae34
PCI_DEVICE_ID_COMPAQ_TRIFLEX_IDE  macro  include/linux/pci_ids.h  158  #define PCI_DEVICE_ID_COMPAQ_TRIFLEX_IDE 0xae33
PCI_DEVICE_ID_COMPAQ_NETFLEX3I  macro  include/linux/pci_ids.h  159  #define PCI_DEVICE_ID_COMPAQ_NETFLEX3I 0xae35
PCI_DEVICE_ID_COMPAQ_NETEL100D  macro  include/linux/pci_ids.h  160  #define PCI_DEVICE_ID_COMPAQ_NETEL100D 0xae40
PCI_DEVICE_ID_COMPAQ_NETEL100PI  macro  include/linux/pci_ids.h  161  #define PCI_DEVICE_ID_COMPAQ_NETEL100PI 0xae43
PCI_DEVICE_ID_COMPAQ_NETEL100I  macro  include/linux/pci_ids.h  162  #define PCI_DEVICE_ID_COMPAQ_NETEL100I 0xb011
PCI_DEVICE_ID_COMPAQ_CISS  macro  include/linux/pci_ids.h  163  #define PCI_DEVICE_ID_COMPAQ_CISS 0xb060
PCI_DEVICE_ID_COMPAQ_CISSB  macro  include/linux/pci_ids.h  164  #define PCI_DEVICE_ID_COMPAQ_CISSB 0xb178
PCI_DEVICE_ID_COMPAQ_CISSC  macro  include/linux/pci_ids.h  165  #define PCI_DEVICE_ID_COMPAQ_CISSC 0x46
PCI_DEVICE_ID_COMPAQ_THUNDER  macro  include/linux/pci_ids.h  166  #define PCI_DEVICE_ID_COMPAQ_THUNDER 0xf130
PCI_DEVICE_ID_COMPAQ_NETFLEX3B  macro  include/linux/pci_ids.h  167  #define PCI_DEVICE_ID_COMPAQ_NETFLEX3B 0xf150
PCI_VENDOR_ID_NCR  macro  include/linux/pci_ids.h  169  #define PCI_VENDOR_ID_NCR 0x1000
PCI_VENDOR_ID_LSI_LOGIC  macro  include/linux/pci_ids.h  170  #define PCI_VENDOR_ID_LSI_LOGIC 0x1000
PCI_DEVICE_ID_NCR_53C810  macro  include/linux/pci_ids.h  171  #define PCI_DEVICE_ID_NCR_53C810 0x0001
PCI_DEVICE_ID_NCR_53C820  macro  include/linux/pci_ids.h  172  #define PCI_DEVICE_ID_NCR_53C820 0x0002
PCI_DEVICE_ID_NCR_53C825  macro  include/linux/pci_ids.h  173  #define PCI_DEVICE_ID_NCR_53C825 0x0003
PCI_DEVICE_ID_NCR_53C815  macro  include/linux/pci_ids.h  174  #define PCI_DEVICE_ID_NCR_53C815 0x0004
PCI_DEVICE_ID_LSI_53C810AP  macro  include/linux/pci_ids.h  175  #define PCI_DEVICE_ID_LSI_53C810AP 0x0005
PCI_DEVICE_ID_NCR_53C860  macro  include/linux/pci_ids.h  176  #define PCI_DEVICE_ID_NCR_53C860 0x0006
PCI_DEVICE_ID_LSI_53C1510  macro  include/linux/pci_ids.h  177  #define PCI_DEVICE_ID_LSI_53C1510 0x000a
PCI_DEVICE_ID_NCR_53C896  macro  include/linux/pci_ids.h  178  #define PCI_DEVICE_ID_NCR_53C896 0x000b
PCI_DEVICE_ID_NCR_53C895  macro  include/linux/pci_ids.h  179  #define PCI_DEVICE_ID_NCR_53C895 0x000c
PCI_DEVICE_ID_NCR_53C885  macro  include/linux/pci_ids.h  180  #define PCI_DEVICE_ID_NCR_53C885 0x000d
PCI_DEVICE_ID_NCR_53C875  macro  include/linux/pci_ids.h  181  #define PCI_DEVICE_ID_NCR_53C875 0x000f
PCI_DEVICE_ID_NCR_53C1510  macro  include/linux/pci_ids.h  182  #define PCI_DEVICE_ID_NCR_53C1510 0x0010
PCI_DEVICE_ID_LSI_53C895A  macro  include/linux/pci_ids.h  183  #define PCI_DEVICE_ID_LSI_53C895A 0x0012
PCI_DEVICE_ID_LSI_53C875A  macro  include/linux/pci_ids.h  184  #define PCI_DEVICE_ID_LSI_53C875A 0x0013
PCI_DEVICE_ID_LSI_53C1010_33  macro  include/linux/pci_ids.h  185  #define PCI_DEVICE_ID_LSI_53C1010_33 0x0020
PCI_DEVICE_ID_LSI_53C1010_66  macro  include/linux/pci_ids.h  186  #define PCI_DEVICE_ID_LSI_53C1010_66 0x0021
PCI_DEVICE_ID_LSI_53C1030  macro  include/linux/pci_ids.h  187  #define PCI_DEVICE_ID_LSI_53C1030 0x0030
PCI_DEVICE_ID_LSI_1030_53C1035  macro  include/linux/pci_ids.h  188  #define PCI_DEVICE_ID_LSI_1030_53C1035 0x0032
PCI_DEVICE_ID_LSI_53C1035  macro  include/linux/pci_ids.h  189  #define PCI_DEVICE_ID_LSI_53C1035 0x0040
PCI_DEVICE_ID_NCR_53C875J  macro  include/linux/pci_ids.h  190  #define PCI_DEVICE_ID_NCR_53C875J 0x008f
PCI_DEVICE_ID_LSI_FC909  macro  include/linux/pci_ids.h  191  #define PCI_DEVICE_ID_LSI_FC909 0x0621
PCI_DEVICE_ID_LSI_FC929  macro  include/linux/pci_ids.h  192  #define PCI_DEVICE_ID_LSI_FC929 0x0622
PCI_DEVICE_ID_LSI_FC929_LAN  macro  include/linux/pci_ids.h  193  #define PCI_DEVICE_ID_LSI_FC929_LAN 0x0623
PCI_DEVICE_ID_LSI_FC919  macro  include/linux/pci_ids.h  194  #define PCI_DEVICE_ID_LSI_FC919 0x0624
PCI_DEVICE_ID_LSI_FC919_LAN  macro  include/linux/pci_ids.h  195  #define PCI_DEVICE_ID_LSI_FC919_LAN 0x0625
PCI_DEVICE_ID_LSI_FC929X  macro  include/linux/pci_ids.h  196  #define PCI_DEVICE_ID_LSI_FC929X 0x0626
PCI_DEVICE_ID_LSI_FC939X  macro  include/linux/pci_ids.h  197  #define PCI_DEVICE_ID_LSI_FC939X 0x0642
PCI_DEVICE_ID_LSI_FC949X  macro  include/linux/pci_ids.h  198  #define PCI_DEVICE_ID_LSI_FC949X 0x0640
PCI_DEVICE_ID_LSI_FC949ES  macro  include/linux/pci_ids.h  199  #define PCI_DEVICE_ID_LSI_FC949ES 0x0646
PCI_DEVICE_ID_LSI_FC919X  macro  include/linux/pci_ids.h  200  #define PCI_DEVICE_ID_LSI_FC919X 0x0628
PCI_DEVICE_ID_NCR_YELLOWFIN  macro  include/linux/pci_ids.h  201  #define PCI_DEVICE_ID_NCR_YELLOWFIN 0x0701
PCI_DEVICE_ID_LSI_61C102  macro  include/linux/pci_ids.h  202  #define PCI_DEVICE_ID_LSI_61C102 0x0901
PCI_DEVICE_ID_LSI_63C815  macro  include/linux/pci_ids.h  203  #define PCI_DEVICE_ID_LSI_63C815 0x1000
PCI_DEVICE_ID_LSI_SAS1064  macro  include/linux/pci_ids.h  204  #define PCI_DEVICE_ID_LSI_SAS1064 0x0050
PCI_DEVICE_ID_LSI_SAS1064R  macro  include/linux/pci_ids.h  205  #define PCI_DEVICE_ID_LSI_SAS1064R 0x0411
PCI_DEVICE_ID_LSI_SAS1066  macro  include/linux/pci_ids.h  206  #define PCI_DEVICE_ID_LSI_SAS1066 0x005E
PCI_DEVICE_ID_LSI_SAS1068  macro  include/linux/pci_ids.h  207  #define PCI_DEVICE_ID_LSI_SAS1068 0x0054
PCI_DEVICE_ID_LSI_SAS1064A  macro  include/linux/pci_ids.h  208  #define PCI_DEVICE_ID_LSI_SAS1064A 0x005C
PCI_DEVICE_ID_LSI_SAS1064E  macro  include/linux/pci_ids.h  209  #define PCI_DEVICE_ID_LSI_SAS1064E 0x0056
PCI_DEVICE_ID_LSI_SAS1066E  macro  include/linux/pci_ids.h  210  #define PCI_DEVICE_ID_LSI_SAS1066E 0x005A
PCI_DEVICE_ID_LSI_SAS1068E  macro  include/linux/pci_ids.h  211  #define PCI_DEVICE_ID_LSI_SAS1068E 0x0058
PCI_DEVICE_ID_LSI_SAS1078  macro  include/linux/pci_ids.h  212  #define PCI_DEVICE_ID_LSI_SAS1078 0x0060
PCI_VENDOR_ID_ATI  macro  include/linux/pci_ids.h  214  #define PCI_VENDOR_ID_ATI 0x1002
PCI_DEVICE_ID_ATI_68800  macro  include/linux/pci_ids.h  216  #define PCI_DEVICE_ID_ATI_68800 0x4158
PCI_DEVICE_ID_ATI_215CT222  macro  include/linux/pci_ids.h  217  #define PCI_DEVICE_ID_ATI_215CT222 0x4354
PCI_DEVICE_ID_ATI_210888CX  macro  include/linux/pci_ids.h  218  #define PCI_DEVICE_ID_ATI_210888CX 0x4358
PCI_DEVICE_ID_ATI_215ET222  macro  include/linux/pci_ids.h  219  #define PCI_DEVICE_ID_ATI_215ET222 0x4554
PCI_DEVICE_ID_ATI_215GB  macro  include/linux/pci_ids.h  221  #define PCI_DEVICE_ID_ATI_215GB 0x4742
PCI_DEVICE_ID_ATI_215GD  macro  include/linux/pci_ids.h  222  #define PCI_DEVICE_ID_ATI_215GD 0x4744
PCI_DEVICE_ID_ATI_215GI  macro  include/linux/pci_ids.h  223  #define PCI_DEVICE_ID_ATI_215GI 0x4749
PCI_DEVICE_ID_ATI_215GP  macro  include/linux/pci_ids.h  224  #define PCI_DEVICE_ID_ATI_215GP 0x4750
PCI_DEVICE_ID_ATI_215GQ  macro  include/linux/pci_ids.h  225  #define PCI_DEVICE_ID_ATI_215GQ 0x4751
PCI_DEVICE_ID_ATI_215XL  macro  include/linux/pci_ids.h  226  #define PCI_DEVICE_ID_ATI_215XL 0x4752
PCI_DEVICE_ID_ATI_215GT  macro  include/linux/pci_ids.h  227  #define PCI_DEVICE_ID_ATI_215GT 0x4754
PCI_DEVICE_ID_ATI_215GTB  macro  include/linux/pci_ids.h  228  #define PCI_DEVICE_ID_ATI_215GTB 0x4755
PCI_DEVICE_ID_ATI_215_IV  macro  include/linux/pci_ids.h  229  #define PCI_DEVICE_ID_ATI_215_IV 0x4756
PCI_DEVICE_ID_ATI_215_IW  macro  include/linux/pci_ids.h  230  #define PCI_DEVICE_ID_ATI_215_IW 0x4757
PCI_DEVICE_ID_ATI_215_IZ  macro  include/linux/pci_ids.h  231  #define PCI_DEVICE_ID_ATI_215_IZ 0x475A
PCI_DEVICE_ID_ATI_210888GX  macro  include/linux/pci_ids.h  232  #define PCI_DEVICE_ID_ATI_210888GX 0x4758
PCI_DEVICE_ID_ATI_215_LB  macro  include/linux/pci_ids.h  233  #define PCI_DEVICE_ID_ATI_215_LB 0x4c42
PCI_DEVICE_ID_ATI_215_LD  macro  include/linux/pci_ids.h  234  #define PCI_DEVICE_ID_ATI_215_LD 0x4c44
PCI_DEVICE_ID_ATI_215_LG  macro  include/linux/pci_ids.h  235  #define PCI_DEVICE_ID_ATI_215_LG 0x4c47
PCI_DEVICE_ID_ATI_215_LI  macro  include/linux/pci_ids.h  236  #define PCI_DEVICE_ID_ATI_215_LI 0x4c49
PCI_DEVICE_ID_ATI_215_LM  macro  include/linux/pci_ids.h  237  #define PCI_DEVICE_ID_ATI_215_LM 0x4c4D
PCI_DEVICE_ID_ATI_215_LN  macro  include/linux/pci_ids.h  238  #define PCI_DEVICE_ID_ATI_215_LN 0x4c4E
PCI_DEVICE_ID_ATI_215_LR  macro  include/linux/pci_ids.h  239  #define PCI_DEVICE_ID_ATI_215_LR 0x4c52
PCI_DEVICE_ID_ATI_215_LS  macro  include/linux/pci_ids.h  240  #define PCI_DEVICE_ID_ATI_215_LS 0x4c53
PCI_DEVICE_ID_ATI_264_LT  macro  include/linux/pci_ids.h  241  #define PCI_DEVICE_ID_ATI_264_LT 0x4c54
PCI_DEVICE_ID_ATI_264VT  macro  include/linux/pci_ids.h  243  #define PCI_DEVICE_ID_ATI_264VT 0x5654
PCI_DEVICE_ID_ATI_264VU  macro  include/linux/pci_ids.h  244  #define PCI_DEVICE_ID_ATI_264VU 0x5655
PCI_DEVICE_ID_ATI_264VV  macro  include/linux/pci_ids.h  245  #define PCI_DEVICE_ID_ATI_264VV 0x5656
PCI_DEVICE_ID_ATI_RAGE128_RE  macro  include/linux/pci_ids.h  247  #define PCI_DEVICE_ID_ATI_RAGE128_RE 0x5245
PCI_DEVICE_ID_ATI_RAGE128_RF  macro  include/linux/pci_ids.h  248  #define PCI_DEVICE_ID_ATI_RAGE128_RF 0x5246
PCI_DEVICE_ID_ATI_RAGE128_RG  macro  include/linux/pci_ids.h  249  #define PCI_DEVICE_ID_ATI_RAGE128_RG 0x5247
PCI_DEVICE_ID_ATI_RAGE128_RK  macro  include/linux/pci_ids.h  251  #define PCI_DEVICE_ID_ATI_RAGE128_RK 0x524b
PCI_DEVICE_ID_ATI_RAGE128_RL  macro  include/linux/pci_ids.h  252  #define PCI_DEVICE_ID_ATI_RAGE128_RL 0x524c
PCI_DEVICE_ID_ATI_RAGE128_SE  macro  include/linux/pci_ids.h  253  #define PCI_DEVICE_ID_ATI_RAGE128_SE 0x5345
PCI_DEVICE_ID_ATI_RAGE128_SF  macro  include/linux/pci_ids.h  254  #define PCI_DEVICE_ID_ATI_RAGE128_SF 0x5346
PCI_DEVICE_ID_ATI_RAGE128_SG  macro  include/linux/pci_ids.h  255  #define PCI_DEVICE_ID_ATI_RAGE128_SG 0x5347
PCI_DEVICE_ID_ATI_RAGE128_SH  macro  include/linux/pci_ids.h  256  #define PCI_DEVICE_ID_ATI_RAGE128_SH 0x5348
PCI_DEVICE_ID_ATI_RAGE128_SK  macro  include/linux/pci_ids.h  257  #define PCI_DEVICE_ID_ATI_RAGE128_SK 0x534b
PCI_DEVICE_ID_ATI_RAGE128_SL  macro  include/linux/pci_ids.h  258  #define PCI_DEVICE_ID_ATI_RAGE128_SL 0x534c
PCI_DEVICE_ID_ATI_RAGE128_SM  macro  include/linux/pci_ids.h  259  #define PCI_DEVICE_ID_ATI_RAGE128_SM 0x534d
PCI_DEVICE_ID_ATI_RAGE128_SN  macro  include/linux/pci_ids.h  260  #define PCI_DEVICE_ID_ATI_RAGE128_SN 0x534e
PCI_DEVICE_ID_ATI_RAGE128_TF  macro  include/linux/pci_ids.h  262  #define PCI_DEVICE_ID_ATI_RAGE128_TF 0x5446
PCI_DEVICE_ID_ATI_RAGE128_TL  macro  include/linux/pci_ids.h  263  #define PCI_DEVICE_ID_ATI_RAGE128_TL 0x544c
PCI_DEVICE_ID_ATI_RAGE128_TR  macro  include/linux/pci_ids.h  264  #define PCI_DEVICE_ID_ATI_RAGE128_TR 0x5452
PCI_DEVICE_ID_ATI_RAGE128_TS  macro  include/linux/pci_ids.h  265  #define PCI_DEVICE_ID_ATI_RAGE128_TS 0x5453
PCI_DEVICE_ID_ATI_RAGE128_TT  macro  include/linux/pci_ids.h  266  #define PCI_DEVICE_ID_ATI_RAGE128_TT 0x5454
PCI_DEVICE_ID_ATI_RAGE128_TU  macro  include/linux/pci_ids.h  267  #define PCI_DEVICE_ID_ATI_RAGE128_TU 0x5455
PCI_DEVICE_ID_ATI_RAGE128_LE  macro  include/linux/pci_ids.h  269  #define PCI_DEVICE_ID_ATI_RAGE128_LE 0x4c45
PCI_DEVICE_ID_ATI_RAGE128_LF  macro  include/linux/pci_ids.h  270  #define PCI_DEVICE_ID_ATI_RAGE128_LF 0x4c46
PCI_DEVICE_ID_ATI_RAGE128_MF  macro  include/linux/pci_ids.h  272  #define PCI_DEVICE_ID_ATI_RAGE128_MF 0x4d46
PCI_DEVICE_ID_ATI_RAGE128_ML  macro  include/linux/pci_ids.h  273  #define PCI_DEVICE_ID_ATI_RAGE128_ML 0x4d4c
PCI_DEVICE_ID_ATI_RAGE128_PA  macro  include/linux/pci_ids.h  275  #define PCI_DEVICE_ID_ATI_RAGE128_PA 0x5041
PCI_DEVICE_ID_ATI_RAGE128_PB  macro  include/linux/pci_ids.h  276  #define PCI_DEVICE_ID_ATI_RAGE128_PB 0x5042
PCI_DEVICE_ID_ATI_RAGE128_PC  macro  include/linux/pci_ids.h  277  #define PCI_DEVICE_ID_ATI_RAGE128_PC 0x5043
PCI_DEVICE_ID_ATI_RAGE128_PD  macro  include/linux/pci_ids.h  278  #define PCI_DEVICE_ID_ATI_RAGE128_PD 0x5044
PCI_DEVICE_ID_ATI_RAGE128_PE  macro  include/linux/pci_ids.h  279  #define PCI_DEVICE_ID_ATI_RAGE128_PE 0x5045
PCI_DEVICE_ID_ATI_RAGE128_PF  macro  include/linux/pci_ids.h  280  #define PCI_DEVICE_ID_ATI_RAGE128_PF 0x5046
PCI_DEVICE_ID_ATI_RAGE128_PG  macro  include/linux/pci_ids.h  282  #define PCI_DEVICE_ID_ATI_RAGE128_PG 0x5047
PCI_DEVICE_ID_ATI_RAGE128_PH  macro  include/linux/pci_ids.h  283  #define PCI_DEVICE_ID_ATI_RAGE128_PH 0x5048
PCI_DEVICE_ID_ATI_RAGE128_PI  macro  include/linux/pci_ids.h  284  #define PCI_DEVICE_ID_ATI_RAGE128_PI 0x5049
PCI_DEVICE_ID_ATI_RAGE128_PJ  macro  include/linux/pci_ids.h  285  #define PCI_DEVICE_ID_ATI_RAGE128_PJ 0x504A
PCI_DEVICE_ID_ATI_RAGE128_PK  macro  include/linux/pci_ids.h  286  #define PCI_DEVICE_ID_ATI_RAGE128_PK 0x504B
PCI_DEVICE_ID_ATI_RAGE128_PL  macro  include/linux/pci_ids.h  287  #define PCI_DEVICE_ID_ATI_RAGE128_PL 0x504C
PCI_DEVICE_ID_ATI_RAGE128_PM  macro  include/linux/pci_ids.h  288  #define PCI_DEVICE_ID_ATI_RAGE128_PM 0x504D
PCI_DEVICE_ID_ATI_RAGE128_PN  macro  include/linux/pci_ids.h  289  #define PCI_DEVICE_ID_ATI_RAGE128_PN 0x504E
PCI_DEVICE_ID_ATI_RAGE128_PO  macro  include/linux/pci_ids.h  290  #define PCI_DEVICE_ID_ATI_RAGE128_PO 0x504F
PCI_DEVICE_ID_ATI_RAGE128_PP  macro  include/linux/pci_ids.h  291  #define PCI_DEVICE_ID_ATI_RAGE128_PP 0x5050
PCI_DEVICE_ID_ATI_RAGE128_PQ  macro  include/linux/pci_ids.h  292  #define PCI_DEVICE_ID_ATI_RAGE128_PQ 0x5051
PCI_DEVICE_ID_ATI_RAGE128_PR  macro  include/linux/pci_ids.h  293  #define PCI_DEVICE_ID_ATI_RAGE128_PR 0x5052
PCI_DEVICE_ID_ATI_RAGE128_PS  macro  include/linux/pci_ids.h  294  #define PCI_DEVICE_ID_ATI_RAGE128_PS 0x5053
PCI_DEVICE_ID_ATI_RAGE128_PT  macro  include/linux/pci_ids.h  295  #define PCI_DEVICE_ID_ATI_RAGE128_PT 0x5054
PCI_DEVICE_ID_ATI_RAGE128_PU  macro  include/linux/pci_ids.h  296  #define PCI_DEVICE_ID_ATI_RAGE128_PU 0x5055
PCI_DEVICE_ID_ATI_RAGE128_PV  macro  include/linux/pci_ids.h  297  #define PCI_DEVICE_ID_ATI_RAGE128_PV 0x5056
PCI_DEVICE_ID_ATI_RAGE128_PW  macro  include/linux/pci_ids.h  298  #define PCI_DEVICE_ID_ATI_RAGE128_PW 0x5057
PCI_DEVICE_ID_ATI_RAGE128_PX  macro  include/linux/pci_ids.h  299  #define PCI_DEVICE_ID_ATI_RAGE128_PX 0x5058
PCI_DEVICE_ID_ATI_RADEON_QD  macro  include/linux/pci_ids.h  302  #define PCI_DEVICE_ID_ATI_RADEON_QD 0x5144
PCI_DEVICE_ID_ATI_RADEON_QE  macro  include/linux/pci_ids.h  303  #define PCI_DEVICE_ID_ATI_RADEON_QE 0x5145
PCI_DEVICE_ID_ATI_RADEON_QF  macro  include/linux/pci_ids.h  304  #define PCI_DEVICE_ID_ATI_RADEON_QF 0x5146
PCI_DEVICE_ID_ATI_RADEON_QG  macro  include/linux/pci_ids.h  305  #define PCI_DEVICE_ID_ATI_RADEON_QG 0x5147
PCI_DEVICE_ID_ATI_RADEON_QY  macro  include/linux/pci_ids.h  307  #define PCI_DEVICE_ID_ATI_RADEON_QY 0x5159
PCI_DEVICE_ID_ATI_RADEON_QZ  macro  include/linux/pci_ids.h  308  #define PCI_DEVICE_ID_ATI_RADEON_QZ 0x515a
PCI_DEVICE_ID_ATI_RADEON_QL  macro  include/linux/pci_ids.h  310  #define PCI_DEVICE_ID_ATI_RADEON_QL 0x514c
PCI_DEVICE_ID_ATI_RADEON_QN  macro  include/linux/pci_ids.h  311  #define PCI_DEVICE_ID_ATI_RADEON_QN 0x514e
PCI_DEVICE_ID_ATI_RADEON_QO  macro  include/linux/pci_ids.h  312  #define PCI_DEVICE_ID_ATI_RADEON_QO 0x514f
PCI_DEVICE_ID_ATI_RADEON_Ql  macro  include/linux/pci_ids.h  313  #define PCI_DEVICE_ID_ATI_RADEON_Ql 0x516c
PCI_DEVICE_ID_ATI_RADEON_BB  macro  include/linux/pci_ids.h  314  #define PCI_DEVICE_ID_ATI_RADEON_BB 0x4242
PCI_DEVICE_ID_ATI_RADEON_QM  macro  include/linux/pci_ids.h  316  #define PCI_DEVICE_ID_ATI_RADEON_QM 0x514d
PCI_DEVICE_ID_ATI_RADEON_QW  macro  include/linux/pci_ids.h  318  #define PCI_DEVICE_ID_ATI_RADEON_QW 0x5157
PCI_DEVICE_ID_ATI_RADEON_QX  macro  include/linux/pci_ids.h  319  #define PCI_DEVICE_ID_ATI_RADEON_QX 0x5158
PCI_DEVICE_ID_ATI_RADEON_Id  macro  include/linux/pci_ids.h  322  #define PCI_DEVICE_ID_ATI_RADEON_Id 0x4964
PCI_DEVICE_ID_ATI_RADEON_Ie  macro  include/linux/pci_ids.h  323  #define PCI_DEVICE_ID_ATI_RADEON_Ie 0x4965
PCI_DEVICE_ID_ATI_RADEON_If  macro  include/linux/pci_ids.h  324  #define PCI_DEVICE_ID_ATI_RADEON_If 0x4966
PCI_DEVICE_ID_ATI_RADEON_Ig  macro  include/linux/pci_ids.h  325  #define PCI_DEVICE_ID_ATI_RADEON_Ig 0x4967
PCI_DEVICE_ID_ATI_RADEON_Ya  macro  include/linux/pci_ids.h  327  #define PCI_DEVICE_ID_ATI_RADEON_Ya 0x5961
PCI_DEVICE_ID_ATI_RADEON_Yd  macro  include/linux/pci_ids.h  328  #define PCI_DEVICE_ID_ATI_RADEON_Yd 0x5964
PCI_DEVICE_ID_ATI_RADEON_ND  macro  include/linux/pci_ids.h  331  #define PCI_DEVICE_ID_ATI_RADEON_ND 0x4e44
PCI_DEVICE_ID_ATI_RADEON_NE  macro  include/linux/pci_ids.h  332  #define PCI_DEVICE_ID_ATI_RADEON_NE 0x4e45
PCI_DEVICE_ID_ATI_RADEON_NF  macro  include/linux/pci_ids.h  333  #define PCI_DEVICE_ID_ATI_RADEON_NF 0x4e46
PCI_DEVICE_ID_ATI_RADEON_NG  macro  include/linux/pci_ids.h  334  #define PCI_DEVICE_ID_ATI_RADEON_NG 0x4e47
PCI_DEVICE_ID_ATI_RADEON_LY  macro  include/linux/pci_ids.h  338  #define PCI_DEVICE_ID_ATI_RADEON_LY 0x4c59
PCI_DEVICE_ID_ATI_RADEON_LZ  macro  include/linux/pci_ids.h  339  #define PCI_DEVICE_ID_ATI_RADEON_LZ 0x4c5a
PCI_DEVICE_ID_ATI_RADEON_LW  macro  include/linux/pci_ids.h  341  #define PCI_DEVICE_ID_ATI_RADEON_LW 0x4c57
PCI_DEVICE_ID_ATI_RADEON_LX  macro  include/linux/pci_ids.h  342  #define PCI_DEVICE_ID_ATI_RADEON_LX 0x4c58
PCI_DEVICE_ID_ATI_RADEON_Ld  macro  include/linux/pci_ids.h  344  #define PCI_DEVICE_ID_ATI_RADEON_Ld 0x4c64
PCI_DEVICE_ID_ATI_RADEON_Le  macro  include/linux/pci_ids.h  345  #define PCI_DEVICE_ID_ATI_RADEON_Le 0x4c65
PCI_DEVICE_ID_ATI_RADEON_Lf  macro  include/linux/pci_ids.h  346  #define PCI_DEVICE_ID_ATI_RADEON_Lf 0x4c66
PCI_DEVICE_ID_ATI_RADEON_Lg  macro  include/linux/pci_ids.h  347  #define PCI_DEVICE_ID_ATI_RADEON_Lg 0x4c67
PCI_DEVICE_ID_ATI_RS100  macro  include/linux/pci_ids.h  350  #define PCI_DEVICE_ID_ATI_RS100 0xcab0
PCI_DEVICE_ID_ATI_RS200  macro  include/linux/pci_ids.h  351  #define PCI_DEVICE_ID_ATI_RS200 0xcab2
PCI_DEVICE_ID_ATI_RS200_B  macro  include/linux/pci_ids.h  352  #define PCI_DEVICE_ID_ATI_RS200_B 0xcbb2
PCI_DEVICE_ID_ATI_RS250  macro  include/linux/pci_ids.h  353  #define PCI_DEVICE_ID_ATI_RS250 0xcab3
PCI_DEVICE_ID_ATI_RS300_100  macro  include/linux/pci_ids.h  354  #define PCI_DEVICE_ID_ATI_RS300_100 0x5830
PCI_DEVICE_ID_ATI_RS300_133  macro  include/linux/pci_ids.h  355  #define PCI_DEVICE_ID_ATI_RS300_133 0x5831
PCI_DEVICE_ID_ATI_RS300_166  macro  include/linux/pci_ids.h  356  #define PCI_DEVICE_ID_ATI_RS300_166 0x5832
PCI_DEVICE_ID_ATI_RS300_200  macro  include/linux/pci_ids.h  357  #define PCI_DEVICE_ID_ATI_RS300_200 0x5833
PCI_DEVICE_ID_ATI_RS350_100  macro  include/linux/pci_ids.h  358  #define PCI_DEVICE_ID_ATI_RS350_100 0x7830
PCI_DEVICE_ID_ATI_RS350_133  macro  include/linux/pci_ids.h  359  #define PCI_DEVICE_ID_ATI_RS350_133 0x7831
PCI_DEVICE_ID_ATI_RS350_166  macro  include/linux/pci_ids.h  360  #define PCI_DEVICE_ID_ATI_RS350_166 0x7832
PCI_DEVICE_ID_ATI_RS350_200  macro  include/linux/pci_ids.h  361  #define PCI_DEVICE_ID_ATI_RS350_200 0x7833
PCI_DEVICE_ID_ATI_RS400_100  macro  include/linux/pci_ids.h  362  #define PCI_DEVICE_ID_ATI_RS400_100 0x5a30
PCI_DEVICE_ID_ATI_RS400_133  macro  include/linux/pci_ids.h  363  #define PCI_DEVICE_ID_ATI_RS400_133 0x5a31
PCI_DEVICE_ID_ATI_RS400_166  macro  include/linux/pci_ids.h  364  #define PCI_DEVICE_ID_ATI_RS400_166 0x5a32
PCI_DEVICE_ID_ATI_RS400_200  macro  include/linux/pci_ids.h  365  #define PCI_DEVICE_ID_ATI_RS400_200 0x5a33
PCI_DEVICE_ID_ATI_RS480  macro  include/linux/pci_ids.h  366  #define PCI_DEVICE_ID_ATI_RS480 0x5950
PCI_DEVICE_ID_ATI_IXP200_IDE  macro  include/linux/pci_ids.h  368  #define PCI_DEVICE_ID_ATI_IXP200_IDE 0x4349
PCI_DEVICE_ID_ATI_IXP200_SMBUS  macro  include/linux/pci_ids.h  369  #define PCI_DEVICE_ID_ATI_IXP200_SMBUS 0x4353
PCI_DEVICE_ID_ATI_IXP300_SMBUS  macro  include/linux/pci_ids.h  370  #define PCI_DEVICE_ID_ATI_IXP300_SMBUS 0x4363
PCI_DEVICE_ID_ATI_IXP300_IDE  macro  include/linux/pci_ids.h  371  #define PCI_DEVICE_ID_ATI_IXP300_IDE 0x4369
PCI_DEVICE_ID_ATI_IXP300_SATA  macro  include/linux/pci_ids.h  372  #define PCI_DEVICE_ID_ATI_IXP300_SATA 0x436e
PCI_DEVICE_ID_ATI_IXP400_SMBUS  macro  include/linux/pci_ids.h  373  #define PCI_DEVICE_ID_ATI_IXP400_SMBUS 0x4372
PCI_DEVICE_ID_ATI_IXP400_IDE  macro  include/linux/pci_ids.h  374  #define PCI_DEVICE_ID_ATI_IXP400_IDE 0x4376
PCI_DEVICE_ID_ATI_IXP400_SATA  macro  include/linux/pci_ids.h  375  #define PCI_DEVICE_ID_ATI_IXP400_SATA 0x4379
PCI_DEVICE_ID_ATI_IXP400_SATA2  macro  include/linux/pci_ids.h  376  #define PCI_DEVICE_ID_ATI_IXP400_SATA2 0x437a
PCI_DEVICE_ID_ATI_IXP600_SATA  macro  include/linux/pci_ids.h  377  #define PCI_DEVICE_ID_ATI_IXP600_SATA 0x4380
PCI_DEVICE_ID_ATI_SBX00_SMBUS  macro  include/linux/pci_ids.h  378  #define PCI_DEVICE_ID_ATI_SBX00_SMBUS 0x4385
PCI_DEVICE_ID_ATI_IXP600_IDE  macro  include/linux/pci_ids.h  379  #define PCI_DEVICE_ID_ATI_IXP600_IDE 0x438c
PCI_DEVICE_ID_ATI_IXP700_SATA  macro  include/linux/pci_ids.h  380  #define PCI_DEVICE_ID_ATI_IXP700_SATA 0x4390
PCI_DEVICE_ID_ATI_IXP700_IDE  macro  include/linux/pci_ids.h  381  #define PCI_DEVICE_ID_ATI_IXP700_IDE 0x439c
PCI_VENDOR_ID_VLSI  macro  include/linux/pci_ids.h  383  #define PCI_VENDOR_ID_VLSI 0x1004
PCI_DEVICE_ID_VLSI_82C592  macro  include/linux/pci_ids.h  384  #define PCI_DEVICE_ID_VLSI_82C592 0x0005
PCI_DEVICE_ID_VLSI_82C593  macro  include/linux/pci_ids.h  385  #define PCI_DEVICE_ID_VLSI_82C593 0x0006
PCI_DEVICE_ID_VLSI_82C594  macro  include/linux/pci_ids.h  386  #define PCI_DEVICE_ID_VLSI_82C594 0x0007
PCI_DEVICE_ID_VLSI_82C597  macro  include/linux/pci_ids.h  387  #define PCI_DEVICE_ID_VLSI_82C597 0x0009
PCI_DEVICE_ID_VLSI_82C541  macro  include/linux/pci_ids.h  388  #define PCI_DEVICE_ID_VLSI_82C541 0x000c
PCI_DEVICE_ID_VLSI_82C543  macro  include/linux/pci_ids.h  389  #define PCI_DEVICE_ID_VLSI_82C543 0x000d
PCI_DEVICE_ID_VLSI_82C532  macro  include/linux/pci_ids.h  390  #define PCI_DEVICE_ID_VLSI_82C532 0x0101
PCI_DEVICE_ID_VLSI_82C534  macro  include/linux/pci_ids.h  391  #define PCI_DEVICE_ID_VLSI_82C534 0x0102
PCI_DEVICE_ID_VLSI_82C535  macro  include/linux/pci_ids.h  392  #define PCI_DEVICE_ID_VLSI_82C535 0x0104
PCI_DEVICE_ID_VLSI_82C147  macro  include/linux/pci_ids.h  393  #define PCI_DEVICE_ID_VLSI_82C147 0x0105
PCI_DEVICE_ID_VLSI_VAS96011  macro  include/linux/pci_ids.h  394  #define PCI_DEVICE_ID_VLSI_VAS96011 0x0702
PCI_DEVICE_ID_RD890_IOMMU  macro  include/linux/pci_ids.h  397  #define PCI_DEVICE_ID_RD890_IOMMU 0x5a23
PCI_VENDOR_ID_ADL  macro  include/linux/pci_ids.h  399  #define PCI_VENDOR_ID_ADL 0x1005
PCI_DEVICE_ID_ADL_2301  macro  include/linux/pci_ids.h  400  #define PCI_DEVICE_ID_ADL_2301 0x2301
PCI_VENDOR_ID_NS  macro  include/linux/pci_ids.h  402  #define PCI_VENDOR_ID_NS 0x100b
PCI_DEVICE_ID_NS_87415  macro  include/linux/pci_ids.h  403  #define PCI_DEVICE_ID_NS_87415 0x0002
PCI_DEVICE_ID_NS_87560_LIO  macro  include/linux/pci_ids.h  404  #define PCI_DEVICE_ID_NS_87560_LIO 0x000e
PCI_DEVICE_ID_NS_87560_USB  macro  include/linux/pci_ids.h  405  #define PCI_DEVICE_ID_NS_87560_USB 0x0012
PCI_DEVICE_ID_NS_83815  macro  include/linux/pci_ids.h  406  #define PCI_DEVICE_ID_NS_83815 0x0020
PCI_DEVICE_ID_NS_83820  macro  include/linux/pci_ids.h  407  #define PCI_DEVICE_ID_NS_83820 0x0022
PCI_DEVICE_ID_NS_CS5535_ISA  macro  include/linux/pci_ids.h  408  #define PCI_DEVICE_ID_NS_CS5535_ISA 0x002b
PCI_DEVICE_ID_NS_CS5535_IDE  macro  include/linux/pci_ids.h  409  #define PCI_DEVICE_ID_NS_CS5535_IDE 0x002d
PCI_DEVICE_ID_NS_CS5535_AUDIO  macro  include/linux/pci_ids.h  410  #define PCI_DEVICE_ID_NS_CS5535_AUDIO 0x002e
PCI_DEVICE_ID_NS_CS5535_USB  macro  include/linux/pci_ids.h  411  #define PCI_DEVICE_ID_NS_CS5535_USB 0x002f
PCI_DEVICE_ID_NS_GX_VIDEO  macro  include/linux/pci_ids.h  412  #define PCI_DEVICE_ID_NS_GX_VIDEO 0x0030
PCI_DEVICE_ID_NS_SATURN  macro  include/linux/pci_ids.h  413  #define PCI_DEVICE_ID_NS_SATURN 0x0035
PCI_DEVICE_ID_NS_SCx200_BRIDGE  macro  include/linux/pci_ids.h  414  #define PCI_DEVICE_ID_NS_SCx200_BRIDGE 0x0500
PCI_DEVICE_ID_NS_SCx200_SMI  macro  include/linux/pci_ids.h  415  #define PCI_DEVICE_ID_NS_SCx200_SMI 0x0501
PCI_DEVICE_ID_NS_SCx200_IDE  macro  include/linux/pci_ids.h  416  #define PCI_DEVICE_ID_NS_SCx200_IDE 0x0502
PCI_DEVICE_ID_NS_SCx200_AUDIO  macro  include/linux/pci_ids.h  417  #define PCI_DEVICE_ID_NS_SCx200_AUDIO 0x0503
PCI_DEVICE_ID_NS_SCx200_VIDEO  macro  include/linux/pci_ids.h  418  #define PCI_DEVICE_ID_NS_SCx200_VIDEO 0x0504
PCI_DEVICE_ID_NS_SCx200_XBUS  macro  include/linux/pci_ids.h  419  #define PCI_DEVICE_ID_NS_SCx200_XBUS 0x0505
PCI_DEVICE_ID_NS_SC1100_BRIDGE  macro  include/linux/pci_ids.h  420  #define PCI_DEVICE_ID_NS_SC1100_BRIDGE 0x0510
PCI_DEVICE_ID_NS_SC1100_SMI  macro  include/linux/pci_ids.h  421  #define PCI_DEVICE_ID_NS_SC1100_SMI 0x0511
PCI_DEVICE_ID_NS_SC1100_XBUS  macro  include/linux/pci_ids.h  422  #define PCI_DEVICE_ID_NS_SC1100_XBUS 0x0515
PCI_DEVICE_ID_NS_87410  macro  include/linux/pci_ids.h  423  #define PCI_DEVICE_ID_NS_87410 0xd001
PCI_DEVICE_ID_NS_GX_HOST_BRIDGE  macro  include/linux/pci_ids.h  425  #define PCI_DEVICE_ID_NS_GX_HOST_BRIDGE 0x0028
PCI_VENDOR_ID_TSENG  macro  include/linux/pci_ids.h  427  #define PCI_VENDOR_ID_TSENG 0x100c
PCI_DEVICE_ID_TSENG_W32P_2  macro  include/linux/pci_ids.h  428  #define PCI_DEVICE_ID_TSENG_W32P_2 0x3202
PCI_DEVICE_ID_TSENG_W32P_b  macro  include/linux/pci_ids.h  429  #define PCI_DEVICE_ID_TSENG_W32P_b 0x3205
PCI_DEVICE_ID_TSENG_W32P_c  macro  include/linux/pci_ids.h  430  #define PCI_DEVICE_ID_TSENG_W32P_c 0x3206
PCI_DEVICE_ID_TSENG_W32P_d  macro  include/linux/pci_ids.h  431  #define PCI_DEVICE_ID_TSENG_W32P_d 0x3207
PCI_DEVICE_ID_TSENG_ET6000  macro  include/linux/pci_ids.h  432  #define PCI_DEVICE_ID_TSENG_ET6000 0x3208
PCI_VENDOR_ID_WEITEK  macro  include/linux/pci_ids.h  434  #define PCI_VENDOR_ID_WEITEK 0x100e
PCI_DEVICE_ID_WEITEK_P9000  macro  include/linux/pci_ids.h  435  #define PCI_DEVICE_ID_WEITEK_P9000 0x9001
PCI_DEVICE_ID_WEITEK_P9100  macro  include/linux/pci_ids.h  436  #define PCI_DEVICE_ID_WEITEK_P9100 0x9100
PCI_VENDOR_ID_DEC  macro  include/linux/pci_ids.h  438  #define PCI_VENDOR_ID_DEC 0x1011
PCI_DEVICE_ID_DEC_BRD  macro  include/linux/pci_ids.h  439  #define PCI_DEVICE_ID_DEC_BRD 0x0001
PCI_DEVICE_ID_DEC_TULIP  macro  include/linux/pci_ids.h  440  #define PCI_DEVICE_ID_DEC_TULIP 0x0002
PCI_DEVICE_ID_DEC_TGA  macro  include/linux/pci_ids.h  441  #define PCI_DEVICE_ID_DEC_TGA 0x0004
PCI_DEVICE_ID_DEC_TULIP_FAST  macro  include/linux/pci_ids.h  442  #define PCI_DEVICE_ID_DEC_TULIP_FAST 0x0009
PCI_DEVICE_ID_DEC_TGA2  macro  include/linux/pci_ids.h  443  #define PCI_DEVICE_ID_DEC_TGA2 0x000D
PCI_DEVICE_ID_DEC_FDDI  macro  include/linux/pci_ids.h  444  #define PCI_DEVICE_ID_DEC_FDDI 0x000F
PCI_DEVICE_ID_DEC_TULIP_PLUS  macro  include/linux/pci_ids.h  445  #define PCI_DEVICE_ID_DEC_TULIP_PLUS 0x0014
PCI_DEVICE_ID_DEC_21142  macro  include/linux/pci_ids.h  446  #define PCI_DEVICE_ID_DEC_21142 0x0019
PCI_DEVICE_ID_DEC_21052  macro  include/linux/pci_ids.h  447  #define PCI_DEVICE_ID_DEC_21052 0x0021
PCI_DEVICE_ID_DEC_21150  macro  include/linux/pci_ids.h  448  #define PCI_DEVICE_ID_DEC_21150 0x0022
PCI_DEVICE_ID_DEC_21152  macro  include/linux/pci_ids.h  449  #define PCI_DEVICE_ID_DEC_21152 0x0024
PCI_DEVICE_ID_DEC_21153  macro  include/linux/pci_ids.h  450  #define PCI_DEVICE_ID_DEC_21153 0x0025
PCI_DEVICE_ID_DEC_21154  macro  include/linux/pci_ids.h  451  #define PCI_DEVICE_ID_DEC_21154 0x0026
PCI_DEVICE_ID_DEC_21285  macro  include/linux/pci_ids.h  452  #define PCI_DEVICE_ID_DEC_21285 0x1065
PCI_DEVICE_ID_COMPAQ_42XX  macro  include/linux/pci_ids.h  453  #define PCI_DEVICE_ID_COMPAQ_42XX 0x0046
PCI_VENDOR_ID_CIRRUS  macro  include/linux/pci_ids.h  455  #define PCI_VENDOR_ID_CIRRUS 0x1013
PCI_DEVICE_ID_CIRRUS_7548  macro  include/linux/pci_ids.h  456  #define PCI_DEVICE_ID_CIRRUS_7548 0x0038
PCI_DEVICE_ID_CIRRUS_5430  macro  include/linux/pci_ids.h  457  #define PCI_DEVICE_ID_CIRRUS_5430 0x00a0
PCI_DEVICE_ID_CIRRUS_5434_4  macro  include/linux/pci_ids.h  458  #define PCI_DEVICE_ID_CIRRUS_5434_4 0x00a4
PCI_DEVICE_ID_CIRRUS_5434_8  macro  include/linux/pci_ids.h  459  #define PCI_DEVICE_ID_CIRRUS_5434_8 0x00a8
PCI_DEVICE_ID_CIRRUS_5436  macro  include/linux/pci_ids.h  460  #define PCI_DEVICE_ID_CIRRUS_5436 0x00ac
PCI_DEVICE_ID_CIRRUS_5446  macro  include/linux/pci_ids.h  461  #define PCI_DEVICE_ID_CIRRUS_5446 0x00b8
PCI_DEVICE_ID_CIRRUS_5480  macro  include/linux/pci_ids.h  462  #define PCI_DEVICE_ID_CIRRUS_5480 0x00bc
PCI_DEVICE_ID_CIRRUS_5462  macro  include/linux/pci_ids.h  463  #define PCI_DEVICE_ID_CIRRUS_5462 0x00d0
PCI_DEVICE_ID_CIRRUS_5464  macro  include/linux/pci_ids.h  464  #define PCI_DEVICE_ID_CIRRUS_5464 0x00d4
PCI_DEVICE_ID_CIRRUS_5465  macro  include/linux/pci_ids.h  465  #define PCI_DEVICE_ID_CIRRUS_5465 0x00d6
PCI_DEVICE_ID_CIRRUS_6729  macro  include/linux/pci_ids.h  466  #define PCI_DEVICE_ID_CIRRUS_6729 0x1100
PCI_DEVICE_ID_CIRRUS_6832  macro  include/linux/pci_ids.h  467  #define PCI_DEVICE_ID_CIRRUS_6832 0x1110
PCI_DEVICE_ID_CIRRUS_7543  macro  include/linux/pci_ids.h  468  #define PCI_DEVICE_ID_CIRRUS_7543 0x1202
PCI_DEVICE_ID_CIRRUS_4610  macro  include/linux/pci_ids.h  469  #define PCI_DEVICE_ID_CIRRUS_4610 0x6001
PCI_DEVICE_ID_CIRRUS_4612  macro  include/linux/pci_ids.h  470  #define PCI_DEVICE_ID_CIRRUS_4612 0x6003
PCI_DEVICE_ID_CIRRUS_4615  macro  include/linux/pci_ids.h  471  #define PCI_DEVICE_ID_CIRRUS_4615 0x6004
PCI_VENDOR_ID_IBM  macro  include/linux/pci_ids.h  473  #define PCI_VENDOR_ID_IBM 0x1014
PCI_DEVICE_ID_IBM_TR  macro  include/linux/pci_ids.h  474  #define PCI_DEVICE_ID_IBM_TR 0x0018
PCI_DEVICE_ID_IBM_TR_WAKE  macro  include/linux/pci_ids.h  475  #define PCI_DEVICE_ID_IBM_TR_WAKE 0x003e
PCI_DEVICE_ID_IBM_CPC710_PCI64  macro  include/linux/pci_ids.h  476  #define PCI_DEVICE_ID_IBM_CPC710_PCI64 0x00fc
PCI_DEVICE_ID_IBM_SNIPE  macro  include/linux/pci_ids.h  477  #define PCI_DEVICE_ID_IBM_SNIPE 0x0180
PCI_DEVICE_ID_IBM_CITRINE  macro  include/linux/pci_ids.h  478  #define PCI_DEVICE_ID_IBM_CITRINE 0x028C
PCI_DEVICE_ID_IBM_GEMSTONE  macro  include/linux/pci_ids.h  479  #define PCI_DEVICE_ID_IBM_GEMSTONE 0xB166
PCI_DEVICE_ID_IBM_OBSIDIAN  macro  include/linux/pci_ids.h  480  #define PCI_DEVICE_ID_IBM_OBSIDIAN 0x02BD
PCI_DEVICE_ID_IBM_ICOM_DEV_ID_1  macro  include/linux/pci_ids.h  481  #define PCI_DEVICE_ID_IBM_ICOM_DEV_ID_1 0x0031
PCI_DEVICE_ID_IBM_ICOM_DEV_ID_2  macro  include/linux/pci_ids.h  482  #define PCI_DEVICE_ID_IBM_ICOM_DEV_ID_2 0x0219
PCI_DEVICE_ID_IBM_ICOM_V2_TWO_PORTS_RVX  macro  include/linux/pci_ids.h  483  #define PCI_DEVICE_ID_IBM_ICOM_V2_TWO_PORTS_RVX 0x021A
PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM  macro  include/linux/pci_ids.h  484  #define PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM 0x0251
PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM_PCIE  macro  include/linux/pci_ids.h  485  #define PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM_PCIE 0x0361
PCI_DEVICE_ID_IBM_ICOM_FOUR_PORT_MODEL  macro  include/linux/pci_ids.h  486  #define PCI_DEVICE_ID_IBM_ICOM_FOUR_PORT_MODEL 0x252
PCI_SUBVENDOR_ID_IBM  macro  include/linux/pci_ids.h  488  #define PCI_SUBVENDOR_ID_IBM 0x1014
PCI_SUBDEVICE_ID_IBM_SATURN_SERIAL_ONE_PORT  macro  include/linux/pci_ids.h  489  #define PCI_SUBDEVICE_ID_IBM_SATURN_SERIAL_ONE_PORT 0x03d4
PCI_VENDOR_ID_UNISYS  macro  include/linux/pci_ids.h  491  #define PCI_VENDOR_ID_UNISYS 0x1018
PCI_DEVICE_ID_UNISYS_DMA_DIRECTOR  macro  include/linux/pci_ids.h  492  #define PCI_DEVICE_ID_UNISYS_DMA_DIRECTOR 0x001C
PCI_VENDOR_ID_COMPEX2  macro  include/linux/pci_ids.h  494  #define PCI_VENDOR_ID_COMPEX2 0x101a
PCI_DEVICE_ID_COMPEX2_100VG  macro  include/linux/pci_ids.h  495  #define PCI_DEVICE_ID_COMPEX2_100VG 0x0005
PCI_VENDOR_ID_WD  macro  include/linux/pci_ids.h  497  #define PCI_VENDOR_ID_WD 0x101c
PCI_DEVICE_ID_WD_90C  macro  include/linux/pci_ids.h  498  #define PCI_DEVICE_ID_WD_90C 0xc24a
PCI_VENDOR_ID_AMI  macro  include/linux/pci_ids.h  500  #define PCI_VENDOR_ID_AMI 0x101e
PCI_DEVICE_ID_AMI_MEGARAID3  macro  include/linux/pci_ids.h  501  #define PCI_DEVICE_ID_AMI_MEGARAID3 0x1960
PCI_DEVICE_ID_AMI_MEGARAID  macro  include/linux/pci_ids.h  502  #define PCI_DEVICE_ID_AMI_MEGARAID 0x9010
PCI_DEVICE_ID_AMI_MEGARAID2  macro  include/linux/pci_ids.h  503  #define PCI_DEVICE_ID_AMI_MEGARAID2 0x9060
PCI_VENDOR_ID_AMD  macro  include/linux/pci_ids.h  505  #define PCI_VENDOR_ID_AMD 0x1022
PCI_DEVICE_ID_AMD_K8_NB  macro  include/linux/pci_ids.h  506  #define PCI_DEVICE_ID_AMD_K8_NB 0x1100
PCI_DEVICE_ID_AMD_K8_NB_ADDRMAP  macro  include/linux/pci_ids.h  507  #define PCI_DEVICE_ID_AMD_K8_NB_ADDRMAP 0x1101
PCI_DEVICE_ID_AMD_K8_NB_MEMCTL  macro  include/linux/pci_ids.h  508  #define PCI_DEVICE_ID_AMD_K8_NB_MEMCTL 0x1102
PCI_DEVICE_ID_AMD_K8_NB_MISC  macro  include/linux/pci_ids.h  509  #define PCI_DEVICE_ID_AMD_K8_NB_MISC 0x1103
PCI_DEVICE_ID_AMD_10H_NB_HT  macro  include/linux/pci_ids.h  510  #define PCI_DEVICE_ID_AMD_10H_NB_HT 0x1200
PCI_DEVICE_ID_AMD_10H_NB_MAP  macro  include/linux/pci_ids.h  511  #define PCI_DEVICE_ID_AMD_10H_NB_MAP 0x1201
PCI_DEVICE_ID_AMD_10H_NB_DRAM  macro  include/linux/pci_ids.h  512  #define PCI_DEVICE_ID_AMD_10H_NB_DRAM 0x1202
PCI_DEVICE_ID_AMD_10H_NB_MISC  macro  include/linux/pci_ids.h  513  #define PCI_DEVICE_ID_AMD_10H_NB_MISC 0x1203
PCI_DEVICE_ID_AMD_10H_NB_LINK  macro  include/linux/pci_ids.h  514  #define PCI_DEVICE_ID_AMD_10H_NB_LINK 0x1204
PCI_DEVICE_ID_AMD_11H_NB_HT  macro  include/linux/pci_ids.h  515  #define PCI_DEVICE_ID_AMD_11H_NB_HT 0x1300
PCI_DEVICE_ID_AMD_11H_NB_MAP  macro  include/linux/pci_ids.h  516  #define PCI_DEVICE_ID_AMD_11H_NB_MAP 0x1301
PCI_DEVICE_ID_AMD_11H_NB_DRAM  macro  include/linux/pci_ids.h  517  #define PCI_DEVICE_ID_AMD_11H_NB_DRAM 0x1302
PCI_DEVICE_ID_AMD_11H_NB_MISC  macro  include/linux/pci_ids.h  518  #define PCI_DEVICE_ID_AMD_11H_NB_MISC 0x1303
PCI_DEVICE_ID_AMD_11H_NB_LINK  macro  include/linux/pci_ids.h  519  #define PCI_DEVICE_ID_AMD_11H_NB_LINK 0x1304
PCI_DEVICE_ID_AMD_15H_NB_F0  macro  include/linux/pci_ids.h  520  #define PCI_DEVICE_ID_AMD_15H_NB_F0 0x1600
PCI_DEVICE_ID_AMD_15H_NB_F1  macro  include/linux/pci_ids.h  521  #define PCI_DEVICE_ID_AMD_15H_NB_F1 0x1601
PCI_DEVICE_ID_AMD_15H_NB_F2  macro  include/linux/pci_ids.h  522  #define PCI_DEVICE_ID_AMD_15H_NB_F2 0x1602
PCI_DEVICE_ID_AMD_15H_NB_F3  macro  include/linux/pci_ids.h  523  #define PCI_DEVICE_ID_AMD_15H_NB_F3 0x1603
PCI_DEVICE_ID_AMD_15H_NB_F4  macro  include/linux/pci_ids.h  524  #define PCI_DEVICE_ID_AMD_15H_NB_F4 0x1604
PCI_DEVICE_ID_AMD_15H_NB_F5  macro  include/linux/pci_ids.h  525  #define PCI_DEVICE_ID_AMD_15H_NB_F5 0x1605
PCI_DEVICE_ID_AMD_CNB17H_F3  macro  include/linux/pci_ids.h  526  #define PCI_DEVICE_ID_AMD_CNB17H_F3 0x1703
PCI_DEVICE_ID_AMD_LANCE  macro  include/linux/pci_ids.h  527  #define PCI_DEVICE_ID_AMD_LANCE 0x2000
PCI_DEVICE_ID_AMD_LANCE_HOME  macro  include/linux/pci_ids.h  528  #define PCI_DEVICE_ID_AMD_LANCE_HOME 0x2001
PCI_DEVICE_ID_AMD_SCSI  macro  include/linux/pci_ids.h  529  #define PCI_DEVICE_ID_AMD_SCSI 0x2020
PCI_DEVICE_ID_AMD_SERENADE  macro  include/linux/pci_ids.h  530  #define PCI_DEVICE_ID_AMD_SERENADE 0x36c0
PCI_DEVICE_ID_AMD_FE_GATE_7006  macro  include/linux/pci_ids.h  531  #define PCI_DEVICE_ID_AMD_FE_GATE_7006 0x7006
PCI_DEVICE_ID_AMD_FE_GATE_7007  macro  include/linux/pci_ids.h  532  #define PCI_DEVICE_ID_AMD_FE_GATE_7007 0x7007
PCI_DEVICE_ID_AMD_FE_GATE_700C  macro  include/linux/pci_ids.h  533  #define PCI_DEVICE_ID_AMD_FE_GATE_700C 0x700C
PCI_DEVICE_ID_AMD_FE_GATE_700E  macro  include/linux/pci_ids.h  534  #define PCI_DEVICE_ID_AMD_FE_GATE_700E 0x700E
PCI_DEVICE_ID_AMD_COBRA_7401  macro  include/linux/pci_ids.h  535  #define PCI_DEVICE_ID_AMD_COBRA_7401 0x7401
PCI_DEVICE_ID_AMD_VIPER_7409  macro  include/linux/pci_ids.h  536  #define PCI_DEVICE_ID_AMD_VIPER_7409 0x7409
PCI_DEVICE_ID_AMD_VIPER_740B  macro  include/linux/pci_ids.h  537  #define PCI_DEVICE_ID_AMD_VIPER_740B 0x740B
PCI_DEVICE_ID_AMD_VIPER_7410  macro  include/linux/pci_ids.h  538  #define PCI_DEVICE_ID_AMD_VIPER_7410 0x7410
PCI_DEVICE_ID_AMD_VIPER_7411  macro  include/linux/pci_ids.h  539  #define PCI_DEVICE_ID_AMD_VIPER_7411 0x7411
PCI_DEVICE_ID_AMD_VIPER_7413  macro  include/linux/pci_ids.h  540  #define PCI_DEVICE_ID_AMD_VIPER_7413 0x7413
PCI_DEVICE_ID_AMD_VIPER_7440  macro  include/linux/pci_ids.h  541  #define PCI_DEVICE_ID_AMD_VIPER_7440 0x7440
PCI_DEVICE_ID_AMD_OPUS_7441  macro  include/linux/pci_ids.h  542  #define PCI_DEVICE_ID_AMD_OPUS_7441 0x7441
PCI_DEVICE_ID_AMD_OPUS_7443  macro  include/linux/pci_ids.h  543  #define PCI_DEVICE_ID_AMD_OPUS_7443 0x7443
PCI_DEVICE_ID_AMD_VIPER_7443  macro  include/linux/pci_ids.h  544  #define PCI_DEVICE_ID_AMD_VIPER_7443 0x7443
PCI_DEVICE_ID_AMD_OPUS_7445  macro  include/linux/pci_ids.h  545  #define PCI_DEVICE_ID_AMD_OPUS_7445 0x7445
PCI_DEVICE_ID_AMD_8111_PCI  macro  include/linux/pci_ids.h  546  #define PCI_DEVICE_ID_AMD_8111_PCI 0x7460
PCI_DEVICE_ID_AMD_8111_LPC  macro  include/linux/pci_ids.h  547  #define PCI_DEVICE_ID_AMD_8111_LPC 0x7468
PCI_DEVICE_ID_AMD_8111_IDE  macro  include/linux/pci_ids.h  548  #define PCI_DEVICE_ID_AMD_8111_IDE 0x7469
PCI_DEVICE_ID_AMD_8111_SMBUS2  macro  include/linux/pci_ids.h  549  #define PCI_DEVICE_ID_AMD_8111_SMBUS2 0x746a
PCI_DEVICE_ID_AMD_8111_SMBUS  macro  include/linux/pci_ids.h  550  #define PCI_DEVICE_ID_AMD_8111_SMBUS 0x746b
PCI_DEVICE_ID_AMD_8111_AUDIO  macro  include/linux/pci_ids.h  551  #define PCI_DEVICE_ID_AMD_8111_AUDIO 0x746d
PCI_DEVICE_ID_AMD_8151_0  macro  include/linux/pci_ids.h  552  #define PCI_DEVICE_ID_AMD_8151_0 0x7454
PCI_DEVICE_ID_AMD_8131_BRIDGE  macro  include/linux/pci_ids.h  553  #define PCI_DEVICE_ID_AMD_8131_BRIDGE 0x7450
PCI_DEVICE_ID_AMD_8131_APIC  macro  include/linux/pci_ids.h  554  #define PCI_DEVICE_ID_AMD_8131_APIC 0x7451
PCI_DEVICE_ID_AMD_8132_BRIDGE  macro  include/linux/pci_ids.h  555  #define PCI_DEVICE_ID_AMD_8132_BRIDGE 0x7458
PCI_DEVICE_ID_AMD_HUDSON2_SMBUS  macro  include/linux/pci_ids.h  556  #define PCI_DEVICE_ID_AMD_HUDSON2_SMBUS 0x780b
PCI_DEVICE_ID_AMD_CS5535_IDE  macro  include/linux/pci_ids.h  557  #define PCI_DEVICE_ID_AMD_CS5535_IDE 0x208F
PCI_DEVICE_ID_AMD_CS5536_ISA  macro  include/linux/pci_ids.h  558  #define PCI_DEVICE_ID_AMD_CS5536_ISA 0x2090
PCI_DEVICE_ID_AMD_CS5536_FLASH  macro  include/linux/pci_ids.h  559  #define PCI_DEVICE_ID_AMD_CS5536_FLASH 0x2091
PCI_DEVICE_ID_AMD_CS5536_AUDIO  macro  include/linux/pci_ids.h  560  #define PCI_DEVICE_ID_AMD_CS5536_AUDIO 0x2093
PCI_DEVICE_ID_AMD_CS5536_OHC  macro  include/linux/pci_ids.h  561  #define PCI_DEVICE_ID_AMD_CS5536_OHC 0x2094
PCI_DEVICE_ID_AMD_CS5536_EHC  macro  include/linux/pci_ids.h  562  #define PCI_DEVICE_ID_AMD_CS5536_EHC 0x2095
PCI_DEVICE_ID_AMD_CS5536_UDC  macro  include/linux/pci_ids.h  563  #define PCI_DEVICE_ID_AMD_CS5536_UDC 0x2096
PCI_DEVICE_ID_AMD_CS5536_UOC  macro  include/linux/pci_ids.h  564  #define PCI_DEVICE_ID_AMD_CS5536_UOC 0x2097
PCI_DEVICE_ID_AMD_CS5536_IDE  macro  include/linux/pci_ids.h  565  #define PCI_DEVICE_ID_AMD_CS5536_IDE 0x209A
PCI_DEVICE_ID_AMD_LX_VIDEO  macro  include/linux/pci_ids.h  566  #define PCI_DEVICE_ID_AMD_LX_VIDEO 0x2081
PCI_DEVICE_ID_AMD_LX_AES  macro  include/linux/pci_ids.h  567  #define PCI_DEVICE_ID_AMD_LX_AES 0x2082
PCI_DEVICE_ID_AMD_HUDSON2_IDE  macro  include/linux/pci_ids.h  568  #define PCI_DEVICE_ID_AMD_HUDSON2_IDE 0x780c
PCI_DEVICE_ID_AMD_HUDSON2_SATA_IDE  macro  include/linux/pci_ids.h  569  #define PCI_DEVICE_ID_AMD_HUDSON2_SATA_IDE 0x7800
PCI_VENDOR_ID_TRIDENT  macro  include/linux/pci_ids.h  571  #define PCI_VENDOR_ID_TRIDENT 0x1023
PCI_DEVICE_ID_TRIDENT_4DWAVE_DX  macro  include/linux/pci_ids.h  572  #define PCI_DEVICE_ID_TRIDENT_4DWAVE_DX 0x2000
PCI_DEVICE_ID_TRIDENT_4DWAVE_NX  macro  include/linux/pci_ids.h  573  #define PCI_DEVICE_ID_TRIDENT_4DWAVE_NX 0x2001
PCI_DEVICE_ID_TRIDENT_9320  macro  include/linux/pci_ids.h  574  #define PCI_DEVICE_ID_TRIDENT_9320 0x9320
PCI_DEVICE_ID_TRIDENT_9388  macro  include/linux/pci_ids.h  575  #define PCI_DEVICE_ID_TRIDENT_9388 0x9388
PCI_DEVICE_ID_TRIDENT_9397  macro  include/linux/pci_ids.h  576  #define PCI_DEVICE_ID_TRIDENT_9397 0x9397
PCI_DEVICE_ID_TRIDENT_939A  macro  include/linux/pci_ids.h  577  #define PCI_DEVICE_ID_TRIDENT_939A 0x939A
PCI_DEVICE_ID_TRIDENT_9520  macro  include/linux/pci_ids.h  578  #define PCI_DEVICE_ID_TRIDENT_9520 0x9520
PCI_DEVICE_ID_TRIDENT_9525  macro  include/linux/pci_ids.h  579  #define PCI_DEVICE_ID_TRIDENT_9525 0x9525
PCI_DEVICE_ID_TRIDENT_9420  macro  include/linux/pci_ids.h  580  #define PCI_DEVICE_ID_TRIDENT_9420 0x9420
PCI_DEVICE_ID_TRIDENT_9440  macro  include/linux/pci_ids.h  581  #define PCI_DEVICE_ID_TRIDENT_9440 0x9440
PCI_DEVICE_ID_TRIDENT_9660  macro  include/linux/pci_ids.h  582  #define PCI_DEVICE_ID_TRIDENT_9660 0x9660
PCI_DEVICE_ID_TRIDENT_9750  macro  include/linux/pci_ids.h  583  #define PCI_DEVICE_ID_TRIDENT_9750 0x9750
PCI_DEVICE_ID_TRIDENT_9850  macro  include/linux/pci_ids.h  584  #define PCI_DEVICE_ID_TRIDENT_9850 0x9850
PCI_DEVICE_ID_TRIDENT_9880  macro  include/linux/pci_ids.h  585  #define PCI_DEVICE_ID_TRIDENT_9880 0x9880
PCI_DEVICE_ID_TRIDENT_8400  macro  include/linux/pci_ids.h  586  #define PCI_DEVICE_ID_TRIDENT_8400 0x8400
PCI_DEVICE_ID_TRIDENT_8420  macro  include/linux/pci_ids.h  587  #define PCI_DEVICE_ID_TRIDENT_8420 0x8420
PCI_DEVICE_ID_TRIDENT_8500  macro  include/linux/pci_ids.h  588  #define PCI_DEVICE_ID_TRIDENT_8500 0x8500
PCI_VENDOR_ID_AI  macro  include/linux/pci_ids.h  590  #define PCI_VENDOR_ID_AI 0x1025
PCI_DEVICE_ID_AI_M1435  macro  include/linux/pci_ids.h  591  #define PCI_DEVICE_ID_AI_M1435 0x1435
PCI_VENDOR_ID_DELL  macro  include/linux/pci_ids.h  593  #define PCI_VENDOR_ID_DELL 0x1028
PCI_DEVICE_ID_DELL_RACIII  macro  include/linux/pci_ids.h  594  #define PCI_DEVICE_ID_DELL_RACIII 0x0008
PCI_DEVICE_ID_DELL_RAC4  macro  include/linux/pci_ids.h  595  #define PCI_DEVICE_ID_DELL_RAC4 0x0012
PCI_DEVICE_ID_DELL_PERC5  macro  include/linux/pci_ids.h  596  #define PCI_DEVICE_ID_DELL_PERC5 0x0015
PCI_VENDOR_ID_MATROX  macro  include/linux/pci_ids.h  598  #define PCI_VENDOR_ID_MATROX 0x102B
PCI_DEVICE_ID_MATROX_MGA_2  macro  include/linux/pci_ids.h  599  #define PCI_DEVICE_ID_MATROX_MGA_2 0x0518
PCI_DEVICE_ID_MATROX_MIL  macro  include/linux/pci_ids.h  600  #define PCI_DEVICE_ID_MATROX_MIL 0x0519
PCI_DEVICE_ID_MATROX_MYS  macro  include/linux/pci_ids.h  601  #define PCI_DEVICE_ID_MATROX_MYS 0x051A
PCI_DEVICE_ID_MATROX_MIL_2  macro  include/linux/pci_ids.h  602  #define PCI_DEVICE_ID_MATROX_MIL_2 0x051b
PCI_DEVICE_ID_MATROX_MYS_AGP  macro  include/linux/pci_ids.h  603  #define PCI_DEVICE_ID_MATROX_MYS_AGP 0x051e
PCI_DEVICE_ID_MATROX_MIL_2_AGP  macro  include/linux/pci_ids.h  604  #define PCI_DEVICE_ID_MATROX_MIL_2_AGP 0x051f
PCI_DEVICE_ID_MATROX_MGA_IMP  macro  include/linux/pci_ids.h  605  #define PCI_DEVICE_ID_MATROX_MGA_IMP 0x0d10
PCI_DEVICE_ID_MATROX_G100_MM  macro  include/linux/pci_ids.h  606  #define PCI_DEVICE_ID_MATROX_G100_MM 0x1000
PCI_DEVICE_ID_MATROX_G100_AGP  macro  include/linux/pci_ids.h  607  #define PCI_DEVICE_ID_MATROX_G100_AGP 0x1001
PCI_DEVICE_ID_MATROX_G200_PCI  macro  include/linux/pci_ids.h  608  #define PCI_DEVICE_ID_MATROX_G200_PCI 0x0520
PCI_DEVICE_ID_MATROX_G200_AGP  macro  include/linux/pci_ids.h  609  #define PCI_DEVICE_ID_MATROX_G200_AGP 0x0521
PCI_DEVICE_ID_MATROX_G400  macro  include/linux/pci_ids.h  610  #define PCI_DEVICE_ID_MATROX_G400 0x0525
PCI_DEVICE_ID_MATROX_G200EV_PCI  macro  include/linux/pci_ids.h  611  #define PCI_DEVICE_ID_MATROX_G200EV_PCI 0x0530
PCI_DEVICE_ID_MATROX_G550  macro  include/linux/pci_ids.h  612  #define PCI_DEVICE_ID_MATROX_G550 0x2527
PCI_DEVICE_ID_MATROX_VIA  macro  include/linux/pci_ids.h  613  #define PCI_DEVICE_ID_MATROX_VIA 0x4536
PCI_VENDOR_ID_MOBILITY_ELECTRONICS  macro  include/linux/pci_ids.h  615  #define PCI_VENDOR_ID_MOBILITY_ELECTRONICS 0x14f2
PCI_VENDOR_ID_CT  macro  include/linux/pci_ids.h  617  #define PCI_VENDOR_ID_CT 0x102c
PCI_DEVICE_ID_CT_69000  macro  include/linux/pci_ids.h  618  #define PCI_DEVICE_ID_CT_69000 0x00c0
PCI_DEVICE_ID_CT_65545  macro  include/linux/pci_ids.h  619  #define PCI_DEVICE_ID_CT_65545 0x00d8
PCI_DEVICE_ID_CT_65548  macro  include/linux/pci_ids.h  620  #define PCI_DEVICE_ID_CT_65548 0x00dc
PCI_DEVICE_ID_CT_65550  macro  include/linux/pci_ids.h  621  #define PCI_DEVICE_ID_CT_65550 0x00e0
PCI_DEVICE_ID_CT_65554  macro  include/linux/pci_ids.h  622  #define PCI_DEVICE_ID_CT_65554 0x00e4
PCI_DEVICE_ID_CT_65555  macro  include/linux/pci_ids.h  623  #define PCI_DEVICE_ID_CT_65555 0x00e5
PCI_VENDOR_ID_MIRO  macro  include/linux/pci_ids.h  625  #define PCI_VENDOR_ID_MIRO 0x1031
PCI_DEVICE_ID_MIRO_36050  macro  include/linux/pci_ids.h  626  #define PCI_DEVICE_ID_MIRO_36050 0x5601
PCI_DEVICE_ID_MIRO_DC10PLUS  macro  include/linux/pci_ids.h  627  #define PCI_DEVICE_ID_MIRO_DC10PLUS 0x7efe
PCI_DEVICE_ID_MIRO_DC30PLUS  macro  include/linux/pci_ids.h  628  #define PCI_DEVICE_ID_MIRO_DC30PLUS 0xd801
PCI_VENDOR_ID_NEC  macro  include/linux/pci_ids.h  630  #define PCI_VENDOR_ID_NEC 0x1033
PCI_DEVICE_ID_NEC_CBUS_1  macro  include/linux/pci_ids.h  631  #define PCI_DEVICE_ID_NEC_CBUS_1 0x0001
PCI_DEVICE_ID_NEC_LOCAL  macro  include/linux/pci_ids.h  632  #define PCI_DEVICE_ID_NEC_LOCAL 0x0002
PCI_DEVICE_ID_NEC_ATM  macro  include/linux/pci_ids.h  633  #define PCI_DEVICE_ID_NEC_ATM 0x0003
PCI_DEVICE_ID_NEC_R4000  macro  include/linux/pci_ids.h  634  #define PCI_DEVICE_ID_NEC_R4000 0x0004
PCI_DEVICE_ID_NEC_486  macro  include/linux/pci_ids.h  635  #define PCI_DEVICE_ID_NEC_486 0x0005
PCI_DEVICE_ID_NEC_ACCEL_1  macro  include/linux/pci_ids.h  636  #define PCI_DEVICE_ID_NEC_ACCEL_1 0x0006
PCI_DEVICE_ID_NEC_UXBUS  macro  include/linux/pci_ids.h  637  #define PCI_DEVICE_ID_NEC_UXBUS 0x0007
PCI_DEVICE_ID_NEC_ACCEL_2  macro  include/linux/pci_ids.h  638  #define PCI_DEVICE_ID_NEC_ACCEL_2 0x0008
PCI_DEVICE_ID_NEC_GRAPH  macro  include/linux/pci_ids.h  639  #define PCI_DEVICE_ID_NEC_GRAPH 0x0009
PCI_DEVICE_ID_NEC_VL  macro  include/linux/pci_ids.h  640  #define PCI_DEVICE_ID_NEC_VL 0x0016
PCI_DEVICE_ID_NEC_STARALPHA2  macro  include/linux/pci_ids.h  641  #define PCI_DEVICE_ID_NEC_STARALPHA2 0x002c
PCI_DEVICE_ID_NEC_CBUS_2  macro  include/linux/pci_ids.h  642  #define PCI_DEVICE_ID_NEC_CBUS_2 0x002d
PCI_DEVICE_ID_NEC_USB  macro  include/linux/pci_ids.h  643  #define PCI_DEVICE_ID_NEC_USB 0x0035
PCI_DEVICE_ID_NEC_CBUS_3  macro  include/linux/pci_ids.h  644  #define PCI_DEVICE_ID_NEC_CBUS_3 0x003b
PCI_DEVICE_ID_NEC_NAPCCARD  macro  include/linux/pci_ids.h  645  #define PCI_DEVICE_ID_NEC_NAPCCARD 0x003e
PCI_DEVICE_ID_NEC_PCX2  macro  include/linux/pci_ids.h  646  #define PCI_DEVICE_ID_NEC_PCX2 0x0046
PCI_DEVICE_ID_NEC_VRC5476  macro  include/linux/pci_ids.h  647  #define PCI_DEVICE_ID_NEC_VRC5476 0x009b
PCI_DEVICE_ID_NEC_VRC4173  macro  include/linux/pci_ids.h  648  #define PCI_DEVICE_ID_NEC_VRC4173 0x00a5
PCI_DEVICE_ID_NEC_VRC5477_AC97  macro  include/linux/pci_ids.h  649  #define PCI_DEVICE_ID_NEC_VRC5477_AC97 0x00a6
PCI_DEVICE_ID_NEC_PC9821CS01  macro  include/linux/pci_ids.h  650  #define PCI_DEVICE_ID_NEC_PC9821CS01 0x800c
PCI_DEVICE_ID_NEC_PC9821NRB06  macro  include/linux/pci_ids.h  651  #define PCI_DEVICE_ID_NEC_PC9821NRB06 0x800d
PCI_VENDOR_ID_FD  macro  include/linux/pci_ids.h  653  #define PCI_VENDOR_ID_FD 0x1036
PCI_DEVICE_ID_FD_36C70  macro  include/linux/pci_ids.h  654  #define PCI_DEVICE_ID_FD_36C70 0x0000
PCI_VENDOR_ID_SI  macro  include/linux/pci_ids.h  656  #define PCI_VENDOR_ID_SI 0x1039
PCI_DEVICE_ID_SI_5591_AGP  macro  include/linux/pci_ids.h  657  #define PCI_DEVICE_ID_SI_5591_AGP 0x0001
PCI_DEVICE_ID_SI_6202  macro  include/linux/pci_ids.h  658  #define PCI_DEVICE_ID_SI_6202 0x0002
PCI_DEVICE_ID_SI_503  macro  include/linux/pci_ids.h  659  #define PCI_DEVICE_ID_SI_503 0x0008
PCI_DEVICE_ID_SI_ACPI  macro  include/linux/pci_ids.h  660  #define PCI_DEVICE_ID_SI_ACPI 0x0009
PCI_DEVICE_ID_SI_SMBUS  macro  include/linux/pci_ids.h  661  #define PCI_DEVICE_ID_SI_SMBUS 0x0016
PCI_DEVICE_ID_SI_LPC  macro  include/linux/pci_ids.h  662  #define PCI_DEVICE_ID_SI_LPC 0x0018
PCI_DEVICE_ID_SI_5597_VGA  macro  include/linux/pci_ids.h  663  #define PCI_DEVICE_ID_SI_5597_VGA 0x0200
PCI_DEVICE_ID_SI_6205  macro  include/linux/pci_ids.h  664  #define PCI_DEVICE_ID_SI_6205 0x0205
PCI_DEVICE_ID_SI_501  macro  include/linux/pci_ids.h  665  #define PCI_DEVICE_ID_SI_501 0x0406
PCI_DEVICE_ID_SI_496  macro  include/linux/pci_ids.h  666  #define PCI_DEVICE_ID_SI_496 0x0496
PCI_DEVICE_ID_SI_300  macro  include/linux/pci_ids.h  667  #define PCI_DEVICE_ID_SI_300 0x0300
PCI_DEVICE_ID_SI_315H  macro  include/linux/pci_ids.h  668  #define PCI_DEVICE_ID_SI_315H 0x0310
PCI_DEVICE_ID_SI_315  macro  include/linux/pci_ids.h  669  #define PCI_DEVICE_ID_SI_315 0x0315
PCI_DEVICE_ID_SI_315PRO  macro  include/linux/pci_ids.h  670  #define PCI_DEVICE_ID_SI_315PRO 0x0325
PCI_DEVICE_ID_SI_530  macro  include/linux/pci_ids.h  671  #define PCI_DEVICE_ID_SI_530 0x0530
PCI_DEVICE_ID_SI_540  macro  include/linux/pci_ids.h  672  #define PCI_DEVICE_ID_SI_540 0x0540
PCI_DEVICE_ID_SI_550  macro  include/linux/pci_ids.h  673  #define PCI_DEVICE_ID_SI_550 0x0550
PCI_DEVICE_ID_SI_540_VGA  macro  include/linux/pci_ids.h  674  #define PCI_DEVICE_ID_SI_540_VGA 0x5300
PCI_DEVICE_ID_SI_550_VGA  macro  include/linux/pci_ids.h  675  #define PCI_DEVICE_ID_SI_550_VGA 0x5315
PCI_DEVICE_ID_SI_620  macro  include/linux/pci_ids.h  676  #define PCI_DEVICE_ID_SI_620 0x0620
PCI_DEVICE_ID_SI_630  macro  include/linux/pci_ids.h  677  #define PCI_DEVICE_ID_SI_630 0x0630
PCI_DEVICE_ID_SI_633  macro  include/linux/pci_ids.h  678  #define PCI_DEVICE_ID_SI_633 0x0633
PCI_DEVICE_ID_SI_635  macro  include/linux/pci_ids.h  679  #define PCI_DEVICE_ID_SI_635 0x0635
PCI_DEVICE_ID_SI_640  macro  include/linux/pci_ids.h  680  #define PCI_DEVICE_ID_SI_640 0x0640
PCI_DEVICE_ID_SI_645  macro  include/linux/pci_ids.h  681  #define PCI_DEVICE_ID_SI_645 0x0645
PCI_DEVICE_ID_SI_646  macro  include/linux/pci_ids.h  682  #define PCI_DEVICE_ID_SI_646 0x0646
PCI_DEVICE_ID_SI_648  macro  include/linux/pci_ids.h  683  #define PCI_DEVICE_ID_SI_648 0x0648
PCI_DEVICE_ID_SI_650  macro  include/linux/pci_ids.h  684  #define PCI_DEVICE_ID_SI_650 0x0650
PCI_DEVICE_ID_SI_651  macro  include/linux/pci_ids.h  685  #define PCI_DEVICE_ID_SI_651 0x0651
PCI_DEVICE_ID_SI_655  macro  include/linux/pci_ids.h  686  #define PCI_DEVICE_ID_SI_655 0x0655
PCI_DEVICE_ID_SI_661  macro  include/linux/pci_ids.h  687  #define PCI_DEVICE_ID_SI_661 0x0661
PCI_DEVICE_ID_SI_730  macro  include/linux/pci_ids.h  688  #define PCI_DEVICE_ID_SI_730 0x0730
PCI_DEVICE_ID_SI_733  macro  include/linux/pci_ids.h  689  #define PCI_DEVICE_ID_SI_733 0x0733
PCI_DEVICE_ID_SI_630_VGA  macro  include/linux/pci_ids.h  690  #define PCI_DEVICE_ID_SI_630_VGA 0x6300
PCI_DEVICE_ID_SI_735  macro  include/linux/pci_ids.h  691  #define PCI_DEVICE_ID_SI_735 0x0735
PCI_DEVICE_ID_SI_740  macro  include/linux/pci_ids.h  692  #define PCI_DEVICE_ID_SI_740 0x0740
PCI_DEVICE_ID_SI_741  macro  include/linux/pci_ids.h  693  #define PCI_DEVICE_ID_SI_741 0x0741
PCI_DEVICE_ID_SI_745  macro  include/linux/pci_ids.h  694  #define PCI_DEVICE_ID_SI_745 0x0745
PCI_DEVICE_ID_SI_746  macro  include/linux/pci_ids.h  695  #define PCI_DEVICE_ID_SI_746 0x0746
PCI_DEVICE_ID_SI_755  macro  include/linux/pci_ids.h  696  #define PCI_DEVICE_ID_SI_755 0x0755
PCI_DEVICE_ID_SI_760  macro  include/linux/pci_ids.h  697  #define PCI_DEVICE_ID_SI_760 0x0760
PCI_DEVICE_ID_SI_900  macro  include/linux/pci_ids.h  698  #define PCI_DEVICE_ID_SI_900 0x0900
PCI_DEVICE_ID_SI_961  macro  include/linux/pci_ids.h  699  #define PCI_DEVICE_ID_SI_961 0x0961
PCI_DEVICE_ID_SI_962  macro  include/linux/pci_ids.h  700  #define PCI_DEVICE_ID_SI_962 0x0962
PCI_DEVICE_ID_SI_963  macro  include/linux/pci_ids.h  701  #define PCI_DEVICE_ID_SI_963 0x0963
PCI_DEVICE_ID_SI_965  macro  include/linux/pci_ids.h  702  #define PCI_DEVICE_ID_SI_965 0x0965
PCI_DEVICE_ID_SI_966  macro  include/linux/pci_ids.h  703  #define PCI_DEVICE_ID_SI_966 0x0966
PCI_DEVICE_ID_SI_968  macro  include/linux/pci_ids.h  704  #define PCI_DEVICE_ID_SI_968 0x0968
PCI_DEVICE_ID_SI_1180  macro  include/linux/pci_ids.h  705  #define PCI_DEVICE_ID_SI_1180 0x1180
PCI_DEVICE_ID_SI_5511  macro  include/linux/pci_ids.h  706  #define PCI_DEVICE_ID_SI_5511 0x5511
PCI_DEVICE_ID_SI_5513  macro  include/linux/pci_ids.h  707  #define PCI_DEVICE_ID_SI_5513 0x5513
PCI_DEVICE_ID_SI_5517  macro  include/linux/pci_ids.h  708  #define PCI_DEVICE_ID_SI_5517 0x5517
PCI_DEVICE_ID_SI_5518  macro  include/linux/pci_ids.h  709  #define PCI_DEVICE_ID_SI_5518 0x5518
PCI_DEVICE_ID_SI_5571  macro  include/linux/pci_ids.h  710  #define PCI_DEVICE_ID_SI_5571 0x5571
PCI_DEVICE_ID_SI_5581  macro  include/linux/pci_ids.h  711  #define PCI_DEVICE_ID_SI_5581 0x5581
PCI_DEVICE_ID_SI_5582  macro  include/linux/pci_ids.h  712  #define PCI_DEVICE_ID_SI_5582 0x5582
PCI_DEVICE_ID_SI_5591  macro  include/linux/pci_ids.h  713  #define PCI_DEVICE_ID_SI_5591 0x5591
PCI_DEVICE_ID_SI_5596  macro  include/linux/pci_ids.h  714  #define PCI_DEVICE_ID_SI_5596 0x5596
PCI_DEVICE_ID_SI_5597  macro  include/linux/pci_ids.h  715  #define PCI_DEVICE_ID_SI_5597 0x5597
PCI_DEVICE_ID_SI_5598  macro  include/linux/pci_ids.h  716  #define PCI_DEVICE_ID_SI_5598 0x5598
PCI_DEVICE_ID_SI_5600  macro  include/linux/pci_ids.h  717  #define PCI_DEVICE_ID_SI_5600 0x5600
PCI_DEVICE_ID_SI_7012  macro  include/linux/pci_ids.h  718  #define PCI_DEVICE_ID_SI_7012 0x7012
PCI_DEVICE_ID_SI_7013  macro  include/linux/pci_ids.h  719  #define PCI_DEVICE_ID_SI_7013 0x7013
PCI_DEVICE_ID_SI_7016  macro  include/linux/pci_ids.h  720  #define PCI_DEVICE_ID_SI_7016 0x7016
PCI_DEVICE_ID_SI_7018  macro  include/linux/pci_ids.h  721  #define PCI_DEVICE_ID_SI_7018 0x7018
PCI_VENDOR_ID_HP  macro  include/linux/pci_ids.h  723  #define PCI_VENDOR_ID_HP 0x103c
PCI_DEVICE_ID_HP_VISUALIZE_EG  macro  include/linux/pci_ids.h  724  #define PCI_DEVICE_ID_HP_VISUALIZE_EG 0x1005
PCI_DEVICE_ID_HP_VISUALIZE_FX6  macro  include/linux/pci_ids.h  725  #define PCI_DEVICE_ID_HP_VISUALIZE_FX6 0x1006
PCI_DEVICE_ID_HP_VISUALIZE_FX4  macro  include/linux/pci_ids.h  726  #define PCI_DEVICE_ID_HP_VISUALIZE_FX4 0x1008
PCI_DEVICE_ID_HP_VISUALIZE_FX2  macro  include/linux/pci_ids.h  727  #define PCI_DEVICE_ID_HP_VISUALIZE_FX2 0x100a
PCI_DEVICE_ID_HP_TACHYON  macro  include/linux/pci_ids.h  728  #define PCI_DEVICE_ID_HP_TACHYON 0x1028
PCI_DEVICE_ID_HP_TACHLITE  macro  include/linux/pci_ids.h  729  #define PCI_DEVICE_ID_HP_TACHLITE 0x1029
PCI_DEVICE_ID_HP_J2585A  macro  include/linux/pci_ids.h  730  #define PCI_DEVICE_ID_HP_J2585A 0x1030
PCI_DEVICE_ID_HP_J2585B  macro  include/linux/pci_ids.h  731  #define PCI_DEVICE_ID_HP_J2585B 0x1031
PCI_DEVICE_ID_HP_J2973A  macro  include/linux/pci_ids.h  732  #define PCI_DEVICE_ID_HP_J2973A 0x1040
PCI_DEVICE_ID_HP_J2970A  macro  include/linux/pci_ids.h  733  #define PCI_DEVICE_ID_HP_J2970A 0x1042
PCI_DEVICE_ID_HP_DIVA  macro  include/linux/pci_ids.h  734  #define PCI_DEVICE_ID_HP_DIVA 0x1048
PCI_DEVICE_ID_HP_DIVA_TOSCA1  macro  include/linux/pci_ids.h  735  #define PCI_DEVICE_ID_HP_DIVA_TOSCA1 0x1049
PCI_DEVICE_ID_HP_DIVA_TOSCA2  macro  include/linux/pci_ids.h  736  #define PCI_DEVICE_ID_HP_DIVA_TOSCA2 0x104A
PCI_DEVICE_ID_HP_DIVA_MAESTRO  macro  include/linux/pci_ids.h  737  #define PCI_DEVICE_ID_HP_DIVA_MAESTRO 0x104B
PCI_DEVICE_ID_HP_REO_IOC  macro  include/linux/pci_ids.h  738  #define PCI_DEVICE_ID_HP_REO_IOC 0x10f1
PCI_DEVICE_ID_HP_VISUALIZE_FXE  macro  include/linux/pci_ids.h  739  #define PCI_DEVICE_ID_HP_VISUALIZE_FXE 0x108b
PCI_DEVICE_ID_HP_DIVA_HALFDOME  macro  include/linux/pci_ids.h  740  #define PCI_DEVICE_ID_HP_DIVA_HALFDOME 0x1223
PCI_DEVICE_ID_HP_DIVA_KEYSTONE  macro  include/linux/pci_ids.h  741  #define PCI_DEVICE_ID_HP_DIVA_KEYSTONE 0x1226
PCI_DEVICE_ID_HP_DIVA_POWERBAR  macro  include/linux/pci_ids.h  742  #define PCI_DEVICE_ID_HP_DIVA_POWERBAR 0x1227
PCI_DEVICE_ID_HP_ZX1_IOC  macro  include/linux/pci_ids.h  743  #define PCI_DEVICE_ID_HP_ZX1_IOC 0x122a
PCI_DEVICE_ID_HP_PCIX_LBA  macro  include/linux/pci_ids.h  744  #define PCI_DEVICE_ID_HP_PCIX_LBA 0x122e
PCI_DEVICE_ID_HP_SX1000_IOC  macro  include/linux/pci_ids.h  745  #define PCI_DEVICE_ID_HP_SX1000_IOC 0x127c
PCI_DEVICE_ID_HP_DIVA_EVEREST  macro  include/linux/pci_ids.h  746  #define PCI_DEVICE_ID_HP_DIVA_EVEREST 0x1282
PCI_DEVICE_ID_HP_DIVA_AUX  macro  include/linux/pci_ids.h  747  #define PCI_DEVICE_ID_HP_DIVA_AUX 0x1290
PCI_DEVICE_ID_HP_DIVA_RMP3  macro  include/linux/pci_ids.h  748  #define PCI_DEVICE_ID_HP_DIVA_RMP3 0x1301
PCI_DEVICE_ID_HP_DIVA_HURRICANE  macro  include/linux/pci_ids.h  749  #define PCI_DEVICE_ID_HP_DIVA_HURRICANE 0x132a
PCI_DEVICE_ID_HP_CISSA  macro  include/linux/pci_ids.h  750  #define PCI_DEVICE_ID_HP_CISSA 0x3220
PCI_DEVICE_ID_HP_CISSC  macro  include/linux/pci_ids.h  751  #define PCI_DEVICE_ID_HP_CISSC 0x3230
PCI_DEVICE_ID_HP_CISSD  macro  include/linux/pci_ids.h  752  #define PCI_DEVICE_ID_HP_CISSD 0x3238
PCI_DEVICE_ID_HP_CISSE  macro  include/linux/pci_ids.h  753  #define PCI_DEVICE_ID_HP_CISSE 0x323a
PCI_DEVICE_ID_HP_CISSF  macro  include/linux/pci_ids.h  754  #define PCI_DEVICE_ID_HP_CISSF 0x323b
PCI_DEVICE_ID_HP_ZX2_IOC  macro  include/linux/pci_ids.h  755  #define PCI_DEVICE_ID_HP_ZX2_IOC 0x4031
PCI_VENDOR_ID_PCTECH  macro  include/linux/pci_ids.h  757  #define PCI_VENDOR_ID_PCTECH 0x1042
PCI_DEVICE_ID_PCTECH_RZ1000  macro  include/linux/pci_ids.h  758  #define PCI_DEVICE_ID_PCTECH_RZ1000 0x1000
PCI_DEVICE_ID_PCTECH_RZ1001  macro  include/linux/pci_ids.h  759  #define PCI_DEVICE_ID_PCTECH_RZ1001 0x1001
PCI_DEVICE_ID_PCTECH_SAMURAI_IDE  macro  include/linux/pci_ids.h  760  #define PCI_DEVICE_ID_PCTECH_SAMURAI_IDE 0x3020
PCI_VENDOR_ID_ASUSTEK  macro  include/linux/pci_ids.h  762  #define PCI_VENDOR_ID_ASUSTEK 0x1043
PCI_DEVICE_ID_ASUSTEK_0675  macro  include/linux/pci_ids.h  763  #define PCI_DEVICE_ID_ASUSTEK_0675 0x0675
PCI_VENDOR_ID_DPT  macro  include/linux/pci_ids.h  765  #define PCI_VENDOR_ID_DPT 0x1044
PCI_DEVICE_ID_DPT  macro  include/linux/pci_ids.h  766  #define PCI_DEVICE_ID_DPT 0xa400
PCI_VENDOR_ID_OPTI  macro  include/linux/pci_ids.h  768  #define PCI_VENDOR_ID_OPTI 0x1045
PCI_DEVICE_ID_OPTI_82C558  macro  include/linux/pci_ids.h  769  #define PCI_DEVICE_ID_OPTI_82C558 0xc558
PCI_DEVICE_ID_OPTI_82C621  macro  include/linux/pci_ids.h  770  #define PCI_DEVICE_ID_OPTI_82C621 0xc621
PCI_DEVICE_ID_OPTI_82C700  macro  include/linux/pci_ids.h  771  #define PCI_DEVICE_ID_OPTI_82C700 0xc700
PCI_DEVICE_ID_OPTI_82C825  macro  include/linux/pci_ids.h  772  #define PCI_DEVICE_ID_OPTI_82C825 0xd568
PCI_VENDOR_ID_ELSA  macro  include/linux/pci_ids.h  774  #define PCI_VENDOR_ID_ELSA 0x1048
PCI_DEVICE_ID_ELSA_MICROLINK  macro  include/linux/pci_ids.h  775  #define PCI_DEVICE_ID_ELSA_MICROLINK 0x1000
PCI_DEVICE_ID_ELSA_QS3000  macro  include/linux/pci_ids.h  776  #define PCI_DEVICE_ID_ELSA_QS3000 0x3000
PCI_VENDOR_ID_STMICRO  macro  include/linux/pci_ids.h  778  #define PCI_VENDOR_ID_STMICRO 0x104A
PCI_DEVICE_ID_STMICRO_USB_HOST  macro  include/linux/pci_ids.h  779  #define PCI_DEVICE_ID_STMICRO_USB_HOST 0xCC00
PCI_DEVICE_ID_STMICRO_USB_OHCI  macro  include/linux/pci_ids.h  780  #define PCI_DEVICE_ID_STMICRO_USB_OHCI 0xCC01
PCI_DEVICE_ID_STMICRO_USB_OTG  macro  include/linux/pci_ids.h  781  #define PCI_DEVICE_ID_STMICRO_USB_OTG 0xCC02
PCI_DEVICE_ID_STMICRO_UART_HWFC  macro  include/linux/pci_ids.h  782  #define PCI_DEVICE_ID_STMICRO_UART_HWFC 0xCC03
PCI_DEVICE_ID_STMICRO_UART_NO_HWFC  macro  include/linux/pci_ids.h  783  #define PCI_DEVICE_ID_STMICRO_UART_NO_HWFC 0xCC04
PCI_DEVICE_ID_STMICRO_SOC_DMA  macro  include/linux/pci_ids.h  784  #define PCI_DEVICE_ID_STMICRO_SOC_DMA 0xCC05
PCI_DEVICE_ID_STMICRO_SATA  macro  include/linux/pci_ids.h  785  #define PCI_DEVICE_ID_STMICRO_SATA 0xCC06
PCI_DEVICE_ID_STMICRO_I2C  macro  include/linux/pci_ids.h  786  #define PCI_DEVICE_ID_STMICRO_I2C 0xCC07
PCI_DEVICE_ID_STMICRO_SPI_HS  macro  include/linux/pci_ids.h  787  #define PCI_DEVICE_ID_STMICRO_SPI_HS 0xCC08
PCI_DEVICE_ID_STMICRO_MAC  macro  include/linux/pci_ids.h  788  #define PCI_DEVICE_ID_STMICRO_MAC 0xCC09
PCI_DEVICE_ID_STMICRO_SDIO_EMMC  macro  include/linux/pci_ids.h  789  #define PCI_DEVICE_ID_STMICRO_SDIO_EMMC 0xCC0A
PCI_DEVICE_ID_STMICRO_SDIO  macro  include/linux/pci_ids.h  790  #define PCI_DEVICE_ID_STMICRO_SDIO 0xCC0B
PCI_DEVICE_ID_STMICRO_GPIO  macro  include/linux/pci_ids.h  791  #define PCI_DEVICE_ID_STMICRO_GPIO 0xCC0C
PCI_DEVICE_ID_STMICRO_VIP  macro  include/linux/pci_ids.h  792  #define PCI_DEVICE_ID_STMICRO_VIP 0xCC0D
PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_DMA  macro  include/linux/pci_ids.h  793  #define PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_DMA 0xCC0E
PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_SRCS  macro  include/linux/pci_ids.h  794  #define PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_SRCS 0xCC0F
PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_MSPS  macro  include/linux/pci_ids.h  795  #define PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_MSPS 0xCC10
PCI_DEVICE_ID_STMICRO_CAN  macro  include/linux/pci_ids.h  796  #define PCI_DEVICE_ID_STMICRO_CAN 0xCC11
PCI_DEVICE_ID_STMICRO_MLB  macro  include/linux/pci_ids.h  797  #define PCI_DEVICE_ID_STMICRO_MLB 0xCC12
PCI_DEVICE_ID_STMICRO_DBP  macro  include/linux/pci_ids.h  798  #define PCI_DEVICE_ID_STMICRO_DBP 0xCC13
PCI_DEVICE_ID_STMICRO_SATA_PHY  macro  include/linux/pci_ids.h  799  #define PCI_DEVICE_ID_STMICRO_SATA_PHY 0xCC14
PCI_DEVICE_ID_STMICRO_ESRAM  macro  include/linux/pci_ids.h  800  #define PCI_DEVICE_ID_STMICRO_ESRAM 0xCC15
PCI_DEVICE_ID_STMICRO_VIC  macro  include/linux/pci_ids.h  801  #define PCI_DEVICE_ID_STMICRO_VIC 0xCC16
PCI_VENDOR_ID_BUSLOGIC  macro  include/linux/pci_ids.h  803  #define PCI_VENDOR_ID_BUSLOGIC 0x104B
PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER_NC  macro  include/linux/pci_ids.h  804  #define PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER_NC 0x0140
PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER  macro  include/linux/pci_ids.h  805  #define PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER 0x1040
PCI_DEVICE_ID_BUSLOGIC_FLASHPOINT  macro  include/linux/pci_ids.h  806  #define PCI_DEVICE_ID_BUSLOGIC_FLASHPOINT 0x8130
PCI_VENDOR_ID_TI  macro  include/linux/pci_ids.h  808  #define PCI_VENDOR_ID_TI 0x104c
PCI_DEVICE_ID_TI_TVP4020  macro  include/linux/pci_ids.h  809  #define PCI_DEVICE_ID_TI_TVP4020 0x3d07
PCI_DEVICE_ID_TI_4450  macro  include/linux/pci_ids.h  810  #define PCI_DEVICE_ID_TI_4450 0x8011
PCI_DEVICE_ID_TI_XX21_XX11  macro  include/linux/pci_ids.h  811  #define PCI_DEVICE_ID_TI_XX21_XX11 0x8031
PCI_DEVICE_ID_TI_XX21_XX11_FM  macro  include/linux/pci_ids.h  812  #define PCI_DEVICE_ID_TI_XX21_XX11_FM 0x8033
PCI_DEVICE_ID_TI_XX21_XX11_SD  macro  include/linux/pci_ids.h  813  #define PCI_DEVICE_ID_TI_XX21_XX11_SD 0x8034
PCI_DEVICE_ID_TI_X515  macro  include/linux/pci_ids.h  814  #define PCI_DEVICE_ID_TI_X515 0x8036
PCI_DEVICE_ID_TI_XX12  macro  include/linux/pci_ids.h  815  #define PCI_DEVICE_ID_TI_XX12 0x8039
PCI_DEVICE_ID_TI_XX12_FM  macro  include/linux/pci_ids.h  816  #define PCI_DEVICE_ID_TI_XX12_FM 0x803b
PCI_DEVICE_ID_TI_XIO2000A  macro  include/linux/pci_ids.h  817  #define PCI_DEVICE_ID_TI_XIO2000A 0x8231
PCI_DEVICE_ID_TI_1130  macro  include/linux/pci_ids.h  818  #define PCI_DEVICE_ID_TI_1130 0xac12
PCI_DEVICE_ID_TI_1031  macro  include/linux/pci_ids.h  819  #define PCI_DEVICE_ID_TI_1031 0xac13
PCI_DEVICE_ID_TI_1131  macro  include/linux/pci_ids.h  820  #define PCI_DEVICE_ID_TI_1131 0xac15
PCI_DEVICE_ID_TI_1250  macro  include/linux/pci_ids.h  821  #define PCI_DEVICE_ID_TI_1250 0xac16
PCI_DEVICE_ID_TI_1220  macro  include/linux/pci_ids.h  822  #define PCI_DEVICE_ID_TI_1220 0xac17
PCI_DEVICE_ID_TI_1221  macro  include/linux/pci_ids.h  823  #define PCI_DEVICE_ID_TI_1221 0xac19
PCI_DEVICE_ID_TI_1210  macro  include/linux/pci_ids.h  824  #define PCI_DEVICE_ID_TI_1210 0xac1a
PCI_DEVICE_ID_TI_1450  macro  include/linux/pci_ids.h  825  #define PCI_DEVICE_ID_TI_1450 0xac1b
PCI_DEVICE_ID_TI_1225  macro  include/linux/pci_ids.h  826  #define PCI_DEVICE_ID_TI_1225 0xac1c
PCI_DEVICE_ID_TI_1251A  macro  include/linux/pci_ids.h  827  #define PCI_DEVICE_ID_TI_1251A 0xac1d
PCI_DEVICE_ID_TI_1211  macro  include/linux/pci_ids.h  828  #define PCI_DEVICE_ID_TI_1211 0xac1e
PCI_DEVICE_ID_TI_1251B  macro  include/linux/pci_ids.h  829  #define PCI_DEVICE_ID_TI_1251B 0xac1f
PCI_DEVICE_ID_TI_4410  macro  include/linux/pci_ids.h  830  #define PCI_DEVICE_ID_TI_4410 0xac41
PCI_DEVICE_ID_TI_4451  macro  include/linux/pci_ids.h  831  #define PCI_DEVICE_ID_TI_4451 0xac42
PCI_DEVICE_ID_TI_4510  macro  include/linux/pci_ids.h  832  #define PCI_DEVICE_ID_TI_4510 0xac44
PCI_DEVICE_ID_TI_4520  macro  include/linux/pci_ids.h  833  #define PCI_DEVICE_ID_TI_4520 0xac46
PCI_DEVICE_ID_TI_7510  macro  include/linux/pci_ids.h  834  #define PCI_DEVICE_ID_TI_7510 0xac47
PCI_DEVICE_ID_TI_7610  macro  include/linux/pci_ids.h  835  #define PCI_DEVICE_ID_TI_7610 0xac48
PCI_DEVICE_ID_TI_7410  macro  include/linux/pci_ids.h  836  #define PCI_DEVICE_ID_TI_7410 0xac49
PCI_DEVICE_ID_TI_1410  macro  include/linux/pci_ids.h  837  #define PCI_DEVICE_ID_TI_1410 0xac50
PCI_DEVICE_ID_TI_1420  macro  include/linux/pci_ids.h  838  #define PCI_DEVICE_ID_TI_1420 0xac51
PCI_DEVICE_ID_TI_1451A  macro  include/linux/pci_ids.h  839  #define PCI_DEVICE_ID_TI_1451A 0xac52
PCI_DEVICE_ID_TI_1620  macro  include/linux/pci_ids.h  840  #define PCI_DEVICE_ID_TI_1620 0xac54
PCI_DEVICE_ID_TI_1520  macro  include/linux/pci_ids.h  841  #define PCI_DEVICE_ID_TI_1520 0xac55
PCI_DEVICE_ID_TI_1510  macro  include/linux/pci_ids.h  842  #define PCI_DEVICE_ID_TI_1510 0xac56
PCI_DEVICE_ID_TI_X620  macro  include/linux/pci_ids.h  843  #define PCI_DEVICE_ID_TI_X620 0xac8d
PCI_DEVICE_ID_TI_X420  macro  include/linux/pci_ids.h  844  #define PCI_DEVICE_ID_TI_X420 0xac8e
PCI_DEVICE_ID_TI_XX20_FM  macro  include/linux/pci_ids.h  845  #define PCI_DEVICE_ID_TI_XX20_FM 0xac8f
PCI_VENDOR_ID_SONY  macro  include/linux/pci_ids.h  847  #define PCI_VENDOR_ID_SONY 0x104d
PCI_VENDOR_ID_WINBOND2  macro  include/linux/pci_ids.h  850  #define PCI_VENDOR_ID_WINBOND2 0x1050
PCI_DEVICE_ID_WINBOND2_89C940F  macro  include/linux/pci_ids.h  851  #define PCI_DEVICE_ID_WINBOND2_89C940F 0x5a5a
PCI_DEVICE_ID_WINBOND2_6692  macro  include/linux/pci_ids.h  852  #define PCI_DEVICE_ID_WINBOND2_6692 0x6692
PCI_VENDOR_ID_ANIGMA  macro  include/linux/pci_ids.h  854  #define PCI_VENDOR_ID_ANIGMA 0x1051
PCI_DEVICE_ID_ANIGMA_MC145575  macro  include/linux/pci_ids.h  855  #define PCI_DEVICE_ID_ANIGMA_MC145575 0x0100
PCI_VENDOR_ID_EFAR  macro  include/linux/pci_ids.h  857  #define PCI_VENDOR_ID_EFAR 0x1055
PCI_DEVICE_ID_EFAR_SLC90E66_1  macro  include/linux/pci_ids.h  858  #define PCI_DEVICE_ID_EFAR_SLC90E66_1 0x9130
PCI_DEVICE_ID_EFAR_SLC90E66_3  macro  include/linux/pci_ids.h  859  #define PCI_DEVICE_ID_EFAR_SLC90E66_3 0x9463
PCI_VENDOR_ID_MOTOROLA  macro  include/linux/pci_ids.h  861  #define PCI_VENDOR_ID_MOTOROLA 0x1057
PCI_DEVICE_ID_MOTOROLA_MPC105  macro  include/linux/pci_ids.h  862  #define PCI_DEVICE_ID_MOTOROLA_MPC105 0x0001
PCI_DEVICE_ID_MOTOROLA_MPC106  macro  include/linux/pci_ids.h  863  #define PCI_DEVICE_ID_MOTOROLA_MPC106 0x0002
PCI_DEVICE_ID_MOTOROLA_MPC107  macro  include/linux/pci_ids.h  864  #define PCI_DEVICE_ID_MOTOROLA_MPC107 0x0004
PCI_DEVICE_ID_MOTOROLA_RAVEN  macro  include/linux/pci_ids.h  865  #define PCI_DEVICE_ID_MOTOROLA_RAVEN 0x4801
PCI_DEVICE_ID_MOTOROLA_FALCON  macro  include/linux/pci_ids.h  866  #define PCI_DEVICE_ID_MOTOROLA_FALCON 0x4802
PCI_DEVICE_ID_MOTOROLA_HAWK  macro  include/linux/pci_ids.h  867  #define PCI_DEVICE_ID_MOTOROLA_HAWK 0x4803
PCI_DEVICE_ID_MOTOROLA_HARRIER  macro  include/linux/pci_ids.h  868  #define PCI_DEVICE_ID_MOTOROLA_HARRIER 0x480b
PCI_DEVICE_ID_MOTOROLA_MPC5200  macro  include/linux/pci_ids.h  869  #define PCI_DEVICE_ID_MOTOROLA_MPC5200 0x5803
PCI_DEVICE_ID_MOTOROLA_MPC5200B  macro  include/linux/pci_ids.h  870  #define PCI_DEVICE_ID_MOTOROLA_MPC5200B 0x5809
PCI_VENDOR_ID_PROMISE  macro  include/linux/pci_ids.h  872  #define PCI_VENDOR_ID_PROMISE 0x105a
PCI_DEVICE_ID_PROMISE_20265  macro  include/linux/pci_ids.h  873  #define PCI_DEVICE_ID_PROMISE_20265 0x0d30
PCI_DEVICE_ID_PROMISE_20267  macro  include/linux/pci_ids.h  874  #define PCI_DEVICE_ID_PROMISE_20267 0x4d30
PCI_DEVICE_ID_PROMISE_20246  macro  include/linux/pci_ids.h  875  #define PCI_DEVICE_ID_PROMISE_20246 0x4d33
PCI_DEVICE_ID_PROMISE_20262  macro  include/linux/pci_ids.h  876  #define PCI_DEVICE_ID_PROMISE_20262 0x4d38
PCI_DEVICE_ID_PROMISE_20263  macro  include/linux/pci_ids.h  877  #define PCI_DEVICE_ID_PROMISE_20263 0x0D38
PCI_DEVICE_ID_PROMISE_20268  macro  include/linux/pci_ids.h  878  #define PCI_DEVICE_ID_PROMISE_20268 0x4d68
PCI_DEVICE_ID_PROMISE_20269  macro  include/linux/pci_ids.h  879  #define PCI_DEVICE_ID_PROMISE_20269 0x4d69
PCI_DEVICE_ID_PROMISE_20270  macro  include/linux/pci_ids.h  880  #define PCI_DEVICE_ID_PROMISE_20270 0x6268
PCI_DEVICE_ID_PROMISE_20271  macro  include/linux/pci_ids.h  881  #define PCI_DEVICE_ID_PROMISE_20271 0x6269
PCI_DEVICE_ID_PROMISE_20275  macro  include/linux/pci_ids.h  882  #define PCI_DEVICE_ID_PROMISE_20275 0x1275
PCI_DEVICE_ID_PROMISE_20276  macro  include/linux/pci_ids.h  883  #define PCI_DEVICE_ID_PROMISE_20276 0x5275
PCI_DEVICE_ID_PROMISE_20277  macro  include/linux/pci_ids.h  884  #define PCI_DEVICE_ID_PROMISE_20277 0x7275
PCI_VENDOR_ID_FOXCONN  macro  include/linux/pci_ids.h  886  #define PCI_VENDOR_ID_FOXCONN 0x105b
PCI_VENDOR_ID_UMC  macro  include/linux/pci_ids.h  888  #define PCI_VENDOR_ID_UMC 0x1060
PCI_DEVICE_ID_UMC_UM8673F  macro  include/linux/pci_ids.h  889  #define PCI_DEVICE_ID_UMC_UM8673F 0x0101
PCI_DEVICE_ID_UMC_UM8886BF  macro  include/linux/pci_ids.h  890  #define PCI_DEVICE_ID_UMC_UM8886BF 0x673a
PCI_DEVICE_ID_UMC_UM8886A  macro  include/linux/pci_ids.h  891  #define PCI_DEVICE_ID_UMC_UM8886A 0x886a
PCI_VENDOR_ID_PICOPOWER  macro  include/linux/pci_ids.h  893  #define PCI_VENDOR_ID_PICOPOWER 0x1066
PCI_DEVICE_ID_PICOPOWER_PT86C523  macro  include/linux/pci_ids.h  894  #define PCI_DEVICE_ID_PICOPOWER_PT86C523 0x0002
PCI_DEVICE_ID_PICOPOWER_PT86C523BBP  macro  include/linux/pci_ids.h  895  #define PCI_DEVICE_ID_PICOPOWER_PT86C523BBP 0x8002
PCI_VENDOR_ID_MYLEX  macro  include/linux/pci_ids.h  897  #define PCI_VENDOR_ID_MYLEX 0x1069
PCI_DEVICE_ID_MYLEX_DAC960_P  macro  include/linux/pci_ids.h  898  #define PCI_DEVICE_ID_MYLEX_DAC960_P 0x0001
PCI_DEVICE_ID_MYLEX_DAC960_PD  macro  include/linux/pci_ids.h  899  #define PCI_DEVICE_ID_MYLEX_DAC960_PD 0x0002
PCI_DEVICE_ID_MYLEX_DAC960_PG  macro  include/linux/pci_ids.h  900  #define PCI_DEVICE_ID_MYLEX_DAC960_PG 0x0010
PCI_DEVICE_ID_MYLEX_DAC960_LA  macro  include/linux/pci_ids.h  901  #define PCI_DEVICE_ID_MYLEX_DAC960_LA 0x0020
PCI_DEVICE_ID_MYLEX_DAC960_LP  macro  include/linux/pci_ids.h  902  #define PCI_DEVICE_ID_MYLEX_DAC960_LP 0x0050
PCI_DEVICE_ID_MYLEX_DAC960_BA  macro  include/linux/pci_ids.h  903  #define PCI_DEVICE_ID_MYLEX_DAC960_BA 0xBA56
PCI_DEVICE_ID_MYLEX_DAC960_GEM  macro  include/linux/pci_ids.h  904  #define PCI_DEVICE_ID_MYLEX_DAC960_GEM 0xB166
PCI_VENDOR_ID_APPLE  macro  include/linux/pci_ids.h  906  #define PCI_VENDOR_ID_APPLE 0x106b
PCI_DEVICE_ID_APPLE_BANDIT  macro  include/linux/pci_ids.h  907  #define PCI_DEVICE_ID_APPLE_BANDIT 0x0001
PCI_DEVICE_ID_APPLE_HYDRA  macro  include/linux/pci_ids.h  908  #define PCI_DEVICE_ID_APPLE_HYDRA 0x000e
PCI_DEVICE_ID_APPLE_UNI_N_FW  macro  include/linux/pci_ids.h  909  #define PCI_DEVICE_ID_APPLE_UNI_N_FW 0x0018
PCI_DEVICE_ID_APPLE_UNI_N_AGP  macro  include/linux/pci_ids.h  910  #define PCI_DEVICE_ID_APPLE_UNI_N_AGP 0x0020
PCI_DEVICE_ID_APPLE_UNI_N_GMAC  macro  include/linux/pci_ids.h  911  #define PCI_DEVICE_ID_APPLE_UNI_N_GMAC 0x0021
PCI_DEVICE_ID_APPLE_UNI_N_GMACP  macro  include/linux/pci_ids.h  912  #define PCI_DEVICE_ID_APPLE_UNI_N_GMACP 0x0024
PCI_DEVICE_ID_APPLE_UNI_N_AGP_P  macro  include/linux/pci_ids.h  913  #define PCI_DEVICE_ID_APPLE_UNI_N_AGP_P 0x0027
PCI_DEVICE_ID_APPLE_UNI_N_AGP15  macro  include/linux/pci_ids.h  914  #define PCI_DEVICE_ID_APPLE_UNI_N_AGP15 0x002d
PCI_DEVICE_ID_APPLE_UNI_N_PCI15  macro  include/linux/pci_ids.h  915  #define PCI_DEVICE_ID_APPLE_UNI_N_PCI15 0x002e
PCI_DEVICE_ID_APPLE_UNI_N_GMAC2  macro  include/linux/pci_ids.h  916  #define PCI_DEVICE_ID_APPLE_UNI_N_GMAC2 0x0032
PCI_DEVICE_ID_APPLE_UNI_N_ATA  macro  include/linux/pci_ids.h  917  #define PCI_DEVICE_ID_APPLE_UNI_N_ATA 0x0033
PCI_DEVICE_ID_APPLE_UNI_N_AGP2  macro  include/linux/pci_ids.h  918  #define PCI_DEVICE_ID_APPLE_UNI_N_AGP2 0x0034
PCI_DEVICE_ID_APPLE_IPID_ATA100  macro  include/linux/pci_ids.h  919  #define PCI_DEVICE_ID_APPLE_IPID_ATA100 0x003b
PCI_DEVICE_ID_APPLE_K2_ATA100  macro  include/linux/pci_ids.h  920  #define PCI_DEVICE_ID_APPLE_K2_ATA100 0x0043
PCI_DEVICE_ID_APPLE_U3_AGP  macro  include/linux/pci_ids.h  921  #define PCI_DEVICE_ID_APPLE_U3_AGP 0x004b
PCI_DEVICE_ID_APPLE_K2_GMAC  macro  include/linux/pci_ids.h  922  #define PCI_DEVICE_ID_APPLE_K2_GMAC 0x004c
PCI_DEVICE_ID_APPLE_SH_ATA  macro  include/linux/pci_ids.h  923  #define PCI_DEVICE_ID_APPLE_SH_ATA 0x0050
PCI_DEVICE_ID_APPLE_SH_SUNGEM  macro  include/linux/pci_ids.h  924  #define PCI_DEVICE_ID_APPLE_SH_SUNGEM 0x0051
PCI_DEVICE_ID_APPLE_U3L_AGP  macro  include/linux/pci_ids.h  925  #define PCI_DEVICE_ID_APPLE_U3L_AGP 0x0058
PCI_DEVICE_ID_APPLE_U3H_AGP  macro  include/linux/pci_ids.h  926  #define PCI_DEVICE_ID_APPLE_U3H_AGP 0x0059
PCI_DEVICE_ID_APPLE_U4_PCIE  macro  include/linux/pci_ids.h  927  #define PCI_DEVICE_ID_APPLE_U4_PCIE 0x005b
PCI_DEVICE_ID_APPLE_IPID2_AGP  macro  include/linux/pci_ids.h  928  #define PCI_DEVICE_ID_APPLE_IPID2_AGP 0x0066
PCI_DEVICE_ID_APPLE_IPID2_ATA  macro  include/linux/pci_ids.h  929  #define PCI_DEVICE_ID_APPLE_IPID2_ATA 0x0069
PCI_DEVICE_ID_APPLE_IPID2_FW  macro  include/linux/pci_ids.h  930  #define PCI_DEVICE_ID_APPLE_IPID2_FW 0x006a
PCI_DEVICE_ID_APPLE_IPID2_GMAC  macro  include/linux/pci_ids.h  931  #define PCI_DEVICE_ID_APPLE_IPID2_GMAC 0x006b
PCI_DEVICE_ID_APPLE_TIGON3  macro  include/linux/pci_ids.h  932  #define PCI_DEVICE_ID_APPLE_TIGON3 0x1645
PCI_VENDOR_ID_YAMAHA  macro  include/linux/pci_ids.h  934  #define PCI_VENDOR_ID_YAMAHA 0x1073
PCI_DEVICE_ID_YAMAHA_724  macro  include/linux/pci_ids.h  935  #define PCI_DEVICE_ID_YAMAHA_724 0x0004
PCI_DEVICE_ID_YAMAHA_724F  macro  include/linux/pci_ids.h  936  #define PCI_DEVICE_ID_YAMAHA_724F 0x000d
PCI_DEVICE_ID_YAMAHA_740  macro  include/linux/pci_ids.h  937  #define PCI_DEVICE_ID_YAMAHA_740 0x000a
PCI_DEVICE_ID_YAMAHA_740C  macro  include/linux/pci_ids.h  938  #define PCI_DEVICE_ID_YAMAHA_740C 0x000c
PCI_DEVICE_ID_YAMAHA_744  macro  include/linux/pci_ids.h  939  #define PCI_DEVICE_ID_YAMAHA_744 0x0010
PCI_DEVICE_ID_YAMAHA_754  macro  include/linux/pci_ids.h  940  #define PCI_DEVICE_ID_YAMAHA_754 0x0012
PCI_VENDOR_ID_QLOGIC  macro  include/linux/pci_ids.h  942  #define PCI_VENDOR_ID_QLOGIC 0x1077
PCI_DEVICE_ID_QLOGIC_ISP10160  macro  include/linux/pci_ids.h  943  #define PCI_DEVICE_ID_QLOGIC_ISP10160 0x1016
PCI_DEVICE_ID_QLOGIC_ISP1020  macro  include/linux/pci_ids.h  944  #define PCI_DEVICE_ID_QLOGIC_ISP1020 0x1020
PCI_DEVICE_ID_QLOGIC_ISP1080  macro  include/linux/pci_ids.h  945  #define PCI_DEVICE_ID_QLOGIC_ISP1080 0x1080
PCI_DEVICE_ID_QLOGIC_ISP12160  macro  include/linux/pci_ids.h  946  #define PCI_DEVICE_ID_QLOGIC_ISP12160 0x1216
PCI_DEVICE_ID_QLOGIC_ISP1240  macro  include/linux/pci_ids.h  947  #define PCI_DEVICE_ID_QLOGIC_ISP1240 0x1240
PCI_DEVICE_ID_QLOGIC_ISP1280  macro  include/linux/pci_ids.h  948  #define PCI_DEVICE_ID_QLOGIC_ISP1280 0x1280
PCI_DEVICE_ID_QLOGIC_ISP2100  macro  include/linux/pci_ids.h  949  #define PCI_DEVICE_ID_QLOGIC_ISP2100 0x2100
PCI_DEVICE_ID_QLOGIC_ISP2200  macro  include/linux/pci_ids.h  950  #define PCI_DEVICE_ID_QLOGIC_ISP2200 0x2200
PCI_DEVICE_ID_QLOGIC_ISP2300  macro  include/linux/pci_ids.h  951  #define PCI_DEVICE_ID_QLOGIC_ISP2300 0x2300
PCI_DEVICE_ID_QLOGIC_ISP2312  macro  include/linux/pci_ids.h  952  #define PCI_DEVICE_ID_QLOGIC_ISP2312 0x2312
PCI_DEVICE_ID_QLOGIC_ISP2322  macro  include/linux/pci_ids.h  953  #define PCI_DEVICE_ID_QLOGIC_ISP2322 0x2322
PCI_DEVICE_ID_QLOGIC_ISP6312  macro  include/linux/pci_ids.h  954  #define PCI_DEVICE_ID_QLOGIC_ISP6312 0x6312
PCI_DEVICE_ID_QLOGIC_ISP6322  macro  include/linux/pci_ids.h  955  #define PCI_DEVICE_ID_QLOGIC_ISP6322 0x6322
PCI_DEVICE_ID_QLOGIC_ISP2422  macro  include/linux/pci_ids.h  956  #define PCI_DEVICE_ID_QLOGIC_ISP2422 0x2422
PCI_DEVICE_ID_QLOGIC_ISP2432  macro  include/linux/pci_ids.h  957  #define PCI_DEVICE_ID_QLOGIC_ISP2432 0x2432
PCI_DEVICE_ID_QLOGIC_ISP2512  macro  include/linux/pci_ids.h  958  #define PCI_DEVICE_ID_QLOGIC_ISP2512 0x2512
PCI_DEVICE_ID_QLOGIC_ISP2522  macro  include/linux/pci_ids.h  959  #define PCI_DEVICE_ID_QLOGIC_ISP2522 0x2522
PCI_DEVICE_ID_QLOGIC_ISP5422  macro  include/linux/pci_ids.h  960  #define PCI_DEVICE_ID_QLOGIC_ISP5422 0x5422
PCI_DEVICE_ID_QLOGIC_ISP5432  macro  include/linux/pci_ids.h  961  #define PCI_DEVICE_ID_QLOGIC_ISP5432 0x5432
PCI_VENDOR_ID_CYRIX  macro  include/linux/pci_ids.h  963  #define PCI_VENDOR_ID_CYRIX 0x1078
PCI_DEVICE_ID_CYRIX_5510  macro  include/linux/pci_ids.h  964  #define PCI_DEVICE_ID_CYRIX_5510 0x0000
PCI_DEVICE_ID_CYRIX_PCI_MASTER  macro  include/linux/pci_ids.h  965  #define PCI_DEVICE_ID_CYRIX_PCI_MASTER 0x0001
PCI_DEVICE_ID_CYRIX_5520  macro  include/linux/pci_ids.h  966  #define PCI_DEVICE_ID_CYRIX_5520 0x0002
PCI_DEVICE_ID_CYRIX_5530_LEGACY  macro  include/linux/pci_ids.h  967  #define PCI_DEVICE_ID_CYRIX_5530_LEGACY 0x0100
PCI_DEVICE_ID_CYRIX_5530_IDE  macro  include/linux/pci_ids.h  968  #define PCI_DEVICE_ID_CYRIX_5530_IDE 0x0102
PCI_DEVICE_ID_CYRIX_5530_AUDIO  macro  include/linux/pci_ids.h  969  #define PCI_DEVICE_ID_CYRIX_5530_AUDIO 0x0103
PCI_DEVICE_ID_CYRIX_5530_VIDEO  macro  include/linux/pci_ids.h  970  #define PCI_DEVICE_ID_CYRIX_5530_VIDEO 0x0104
PCI_VENDOR_ID_CONTAQ  macro  include/linux/pci_ids.h  972  #define PCI_VENDOR_ID_CONTAQ 0x1080
PCI_DEVICE_ID_CONTAQ_82C693  macro  include/linux/pci_ids.h  973  #define PCI_DEVICE_ID_CONTAQ_82C693 0xc693
PCI_VENDOR_ID_OLICOM  macro  include/linux/pci_ids.h  975  #define PCI_VENDOR_ID_OLICOM 0x108d
PCI_DEVICE_ID_OLICOM_OC2325  macro  include/linux/pci_ids.h  976  #define PCI_DEVICE_ID_OLICOM_OC2325 0x0012
PCI_DEVICE_ID_OLICOM_OC2183  macro  include/linux/pci_ids.h  977  #define PCI_DEVICE_ID_OLICOM_OC2183 0x0013
PCI_DEVICE_ID_OLICOM_OC2326  macro  include/linux/pci_ids.h  978  #define PCI_DEVICE_ID_OLICOM_OC2326 0x0014
PCI_VENDOR_ID_SUN  macro  include/linux/pci_ids.h  980  #define PCI_VENDOR_ID_SUN 0x108e
PCI_DEVICE_ID_SUN_EBUS  macro  include/linux/pci_ids.h  981  #define PCI_DEVICE_ID_SUN_EBUS 0x1000
PCI_DEVICE_ID_SUN_HAPPYMEAL  macro  include/linux/pci_ids.h  982  #define PCI_DEVICE_ID_SUN_HAPPYMEAL 0x1001
PCI_DEVICE_ID_SUN_RIO_EBUS  macro  include/linux/pci_ids.h  983  #define PCI_DEVICE_ID_SUN_RIO_EBUS 0x1100
PCI_DEVICE_ID_SUN_RIO_GEM  macro  include/linux/pci_ids.h  984  #define PCI_DEVICE_ID_SUN_RIO_GEM 0x1101
PCI_DEVICE_ID_SUN_RIO_1394  macro  include/linux/pci_ids.h  985  #define PCI_DEVICE_ID_SUN_RIO_1394 0x1102
PCI_DEVICE_ID_SUN_RIO_USB  macro  include/linux/pci_ids.h  986  #define PCI_DEVICE_ID_SUN_RIO_USB 0x1103
PCI_DEVICE_ID_SUN_GEM  macro  include/linux/pci_ids.h  987  #define PCI_DEVICE_ID_SUN_GEM 0x2bad
PCI_DEVICE_ID_SUN_SIMBA  macro  include/linux/pci_ids.h  988  #define PCI_DEVICE_ID_SUN_SIMBA 0x5000
PCI_DEVICE_ID_SUN_PBM  macro  include/linux/pci_ids.h  989  #define PCI_DEVICE_ID_SUN_PBM 0x8000
PCI_DEVICE_ID_SUN_SCHIZO  macro  include/linux/pci_ids.h  990  #define PCI_DEVICE_ID_SUN_SCHIZO 0x8001
PCI_DEVICE_ID_SUN_SABRE  macro  include/linux/pci_ids.h  991  #define PCI_DEVICE_ID_SUN_SABRE 0xa000
PCI_DEVICE_ID_SUN_HUMMINGBIRD  macro  include/linux/pci_ids.h  992  #define PCI_DEVICE_ID_SUN_HUMMINGBIRD 0xa001
PCI_DEVICE_ID_SUN_TOMATILLO  macro  include/linux/pci_ids.h  993  #define PCI_DEVICE_ID_SUN_TOMATILLO 0xa801
PCI_DEVICE_ID_SUN_CASSINI  macro  include/linux/pci_ids.h  994  #define PCI_DEVICE_ID_SUN_CASSINI 0xabba
PCI_VENDOR_ID_NI  macro  include/linux/pci_ids.h  996  #define PCI_VENDOR_ID_NI 0x1093
PCI_DEVICE_ID_NI_PCI2322  macro  include/linux/pci_ids.h  997  #define PCI_DEVICE_ID_NI_PCI2322 0xd130
PCI_DEVICE_ID_NI_PCI2324  macro  include/linux/pci_ids.h  998  #define PCI_DEVICE_ID_NI_PCI2324 0xd140
PCI_DEVICE_ID_NI_PCI2328  macro  include/linux/pci_ids.h  999  #define PCI_DEVICE_ID_NI_PCI2328 0xd150
PCI_DEVICE_ID_NI_PXI8422_2322  macro  include/linux/pci_ids.h  1000  #define PCI_DEVICE_ID_NI_PXI8422_2322 0xd190
PCI_DEVICE_ID_NI_PXI8422_2324  macro  include/linux/pci_ids.h  1001  #define PCI_DEVICE_ID_NI_PXI8422_2324 0xd1a0
PCI_DEVICE_ID_NI_PXI8420_2322  macro  include/linux/pci_ids.h  1002  #define PCI_DEVICE_ID_NI_PXI8420_2322 0xd1d0
PCI_DEVICE_ID_NI_PXI8420_2324  macro  include/linux/pci_ids.h  1003  #define PCI_DEVICE_ID_NI_PXI8420_2324 0xd1e0
PCI_DEVICE_ID_NI_PXI8420_2328  macro  include/linux/pci_ids.h  1004  #define PCI_DEVICE_ID_NI_PXI8420_2328 0xd1f0
PCI_DEVICE_ID_NI_PXI8420_23216  macro  include/linux/pci_ids.h  1005  #define PCI_DEVICE_ID_NI_PXI8420_23216 0xd1f1
PCI_DEVICE_ID_NI_PCI2322I  macro  include/linux/pci_ids.h  1006  #define PCI_DEVICE_ID_NI_PCI2322I 0xd250
PCI_DEVICE_ID_NI_PCI2324I  macro  include/linux/pci_ids.h  1007  #define PCI_DEVICE_ID_NI_PCI2324I 0xd270
PCI_DEVICE_ID_NI_PCI23216  macro  include/linux/pci_ids.h  1008  #define PCI_DEVICE_ID_NI_PCI23216 0xd2b0
PCI_DEVICE_ID_NI_PXI8430_2322  macro  include/linux/pci_ids.h  1009  #define PCI_DEVICE_ID_NI_PXI8430_2322 0x7080
PCI_DEVICE_ID_NI_PCI8430_2322  macro  include/linux/pci_ids.h  1010  #define PCI_DEVICE_ID_NI_PCI8430_2322 0x70db
PCI_DEVICE_ID_NI_PXI8430_2324  macro  include/linux/pci_ids.h  1011  #define PCI_DEVICE_ID_NI_PXI8430_2324 0x70dd
PCI_DEVICE_ID_NI_PCI8430_2324  macro  include/linux/pci_ids.h  1012  #define PCI_DEVICE_ID_NI_PCI8430_2324 0x70df
PCI_DEVICE_ID_NI_PXI8430_2328  macro  include/linux/pci_ids.h  1013  #define PCI_DEVICE_ID_NI_PXI8430_2328 0x70e2
PCI_DEVICE_ID_NI_PCI8430_2328  macro  include/linux/pci_ids.h  1014  #define PCI_DEVICE_ID_NI_PCI8430_2328 0x70e4
PCI_DEVICE_ID_NI_PXI8430_23216  macro  include/linux/pci_ids.h  1015  #define PCI_DEVICE_ID_NI_PXI8430_23216 0x70e6
PCI_DEVICE_ID_NI_PCI8430_23216  macro  include/linux/pci_ids.h  1016  #define PCI_DEVICE_ID_NI_PCI8430_23216 0x70e7
PCI_DEVICE_ID_NI_PXI8432_2322  macro  include/linux/pci_ids.h  1017  #define PCI_DEVICE_ID_NI_PXI8432_2322 0x70e8
PCI_DEVICE_ID_NI_PCI8432_2322  macro  include/linux/pci_ids.h  1018  #define PCI_DEVICE_ID_NI_PCI8432_2322 0x70ea
PCI_DEVICE_ID_NI_PXI8432_2324  macro  include/linux/pci_ids.h  1019  #define PCI_DEVICE_ID_NI_PXI8432_2324 0x70ec
PCI_DEVICE_ID_NI_PCI8432_2324  macro  include/linux/pci_ids.h  1020  #define PCI_DEVICE_ID_NI_PCI8432_2324 0x70ee
PCI_VENDOR_ID_CMD  macro  include/linux/pci_ids.h  1022  #define PCI_VENDOR_ID_CMD 0x1095
PCI_DEVICE_ID_CMD_643  macro  include/linux/pci_ids.h  1023  #define PCI_DEVICE_ID_CMD_643 0x0643
PCI_DEVICE_ID_CMD_646  macro  include/linux/pci_ids.h  1024  #define PCI_DEVICE_ID_CMD_646 0x0646
PCI_DEVICE_ID_CMD_648  macro  include/linux/pci_ids.h  1025  #define PCI_DEVICE_ID_CMD_648 0x0648
PCI_DEVICE_ID_CMD_649  macro  include/linux/pci_ids.h  1026  #define PCI_DEVICE_ID_CMD_649 0x0649
PCI_DEVICE_ID_SII_680  macro  include/linux/pci_ids.h  1028  #define PCI_DEVICE_ID_SII_680 0x0680
PCI_DEVICE_ID_SII_3112  macro  include/linux/pci_ids.h  1029  #define PCI_DEVICE_ID_SII_3112 0x3112
PCI_DEVICE_ID_SII_1210SA  macro  include/linux/pci_ids.h  1030  #define PCI_DEVICE_ID_SII_1210SA 0x0240
PCI_VENDOR_ID_BROOKTREE  macro  include/linux/pci_ids.h  1032  #define PCI_VENDOR_ID_BROOKTREE 0x109e
PCI_DEVICE_ID_BROOKTREE_878  macro  include/linux/pci_ids.h  1033  #define PCI_DEVICE_ID_BROOKTREE_878 0x0878
PCI_DEVICE_ID_BROOKTREE_879  macro  include/linux/pci_ids.h  1034  #define PCI_DEVICE_ID_BROOKTREE_879 0x0879
PCI_VENDOR_ID_SGI  macro  include/linux/pci_ids.h  1036  #define PCI_VENDOR_ID_SGI 0x10a9
PCI_DEVICE_ID_SGI_IOC3  macro  include/linux/pci_ids.h  1037  #define PCI_DEVICE_ID_SGI_IOC3 0x0003
PCI_DEVICE_ID_SGI_LITHIUM  macro  include/linux/pci_ids.h  1038  #define PCI_DEVICE_ID_SGI_LITHIUM 0x1002
PCI_DEVICE_ID_SGI_IOC4  macro  include/linux/pci_ids.h  1039  #define PCI_DEVICE_ID_SGI_IOC4 0x100a
PCI_VENDOR_ID_WINBOND  macro  include/linux/pci_ids.h  1041  #define PCI_VENDOR_ID_WINBOND 0x10ad
PCI_DEVICE_ID_WINBOND_82C105  macro  include/linux/pci_ids.h  1042  #define PCI_DEVICE_ID_WINBOND_82C105 0x0105
PCI_DEVICE_ID_WINBOND_83C553  macro  include/linux/pci_ids.h  1043  #define PCI_DEVICE_ID_WINBOND_83C553 0x0565
PCI_VENDOR_ID_PLX  macro  include/linux/pci_ids.h  1045  #define PCI_VENDOR_ID_PLX 0x10b5
PCI_DEVICE_ID_PLX_R685  macro  include/linux/pci_ids.h  1046  #define PCI_DEVICE_ID_PLX_R685 0x1030
PCI_DEVICE_ID_PLX_ROMULUS  macro  include/linux/pci_ids.h  1047  #define PCI_DEVICE_ID_PLX_ROMULUS 0x106a
PCI_DEVICE_ID_PLX_SPCOM800  macro  include/linux/pci_ids.h  1048  #define PCI_DEVICE_ID_PLX_SPCOM800 0x1076
PCI_DEVICE_ID_PLX_1077  macro  include/linux/pci_ids.h  1049  #define PCI_DEVICE_ID_PLX_1077 0x1077
PCI_DEVICE_ID_PLX_SPCOM200  macro  include/linux/pci_ids.h  1050  #define PCI_DEVICE_ID_PLX_SPCOM200 0x1103
PCI_DEVICE_ID_PLX_DJINN_ITOO  macro  include/linux/pci_ids.h  1051  #define PCI_DEVICE_ID_PLX_DJINN_ITOO 0x1151
PCI_DEVICE_ID_PLX_R753  macro  include/linux/pci_ids.h  1052  #define PCI_DEVICE_ID_PLX_R753 0x1152
PCI_DEVICE_ID_PLX_OLITEC  macro  include/linux/pci_ids.h  1053  #define PCI_DEVICE_ID_PLX_OLITEC 0x1187
PCI_DEVICE_ID_PLX_PCI200SYN  macro  include/linux/pci_ids.h  1054  #define PCI_DEVICE_ID_PLX_PCI200SYN 0x3196
PCI_DEVICE_ID_PLX_9030  macro  include/linux/pci_ids.h  1055  #define PCI_DEVICE_ID_PLX_9030 0x9030
PCI_DEVICE_ID_PLX_9050  macro  include/linux/pci_ids.h  1056  #define PCI_DEVICE_ID_PLX_9050 0x9050
PCI_DEVICE_ID_PLX_9056  macro  include/linux/pci_ids.h  1057  #define PCI_DEVICE_ID_PLX_9056 0x9056
PCI_DEVICE_ID_PLX_9080  macro  include/linux/pci_ids.h  1058  #define PCI_DEVICE_ID_PLX_9080 0x9080
PCI_DEVICE_ID_PLX_GTEK_SERIAL2  macro  include/linux/pci_ids.h  1059  #define PCI_DEVICE_ID_PLX_GTEK_SERIAL2 0xa001
PCI_VENDOR_ID_MADGE  macro  include/linux/pci_ids.h  1061  #define PCI_VENDOR_ID_MADGE 0x10b6
PCI_DEVICE_ID_MADGE_MK2  macro  include/linux/pci_ids.h  1062  #define PCI_DEVICE_ID_MADGE_MK2 0x0002
PCI_VENDOR_ID_3COM  macro  include/linux/pci_ids.h  1064  #define PCI_VENDOR_ID_3COM 0x10b7
PCI_DEVICE_ID_3COM_3C985  macro  include/linux/pci_ids.h  1065  #define PCI_DEVICE_ID_3COM_3C985 0x0001
PCI_DEVICE_ID_3COM_3C940  macro  include/linux/pci_ids.h  1066  #define PCI_DEVICE_ID_3COM_3C940 0x1700
PCI_DEVICE_ID_3COM_3C339  macro  include/linux/pci_ids.h  1067  #define PCI_DEVICE_ID_3COM_3C339 0x3390
PCI_DEVICE_ID_3COM_3C359  macro  include/linux/pci_ids.h  1068  #define PCI_DEVICE_ID_3COM_3C359 0x3590
PCI_DEVICE_ID_3COM_3C940B  macro  include/linux/pci_ids.h  1069  #define PCI_DEVICE_ID_3COM_3C940B 0x80eb
PCI_DEVICE_ID_3COM_3CR990  macro  include/linux/pci_ids.h  1070  #define PCI_DEVICE_ID_3COM_3CR990 0x9900
PCI_DEVICE_ID_3COM_3CR990_TX_95  macro  include/linux/pci_ids.h  1071  #define PCI_DEVICE_ID_3COM_3CR990_TX_95 0x9902
PCI_DEVICE_ID_3COM_3CR990_TX_97  macro  include/linux/pci_ids.h  1072  #define PCI_DEVICE_ID_3COM_3CR990_TX_97 0x9903
PCI_DEVICE_ID_3COM_3CR990B  macro  include/linux/pci_ids.h  1073  #define PCI_DEVICE_ID_3COM_3CR990B 0x9904
PCI_DEVICE_ID_3COM_3CR990_FX  macro  include/linux/pci_ids.h  1074  #define PCI_DEVICE_ID_3COM_3CR990_FX 0x9905
PCI_DEVICE_ID_3COM_3CR990SVR95  macro  include/linux/pci_ids.h  1075  #define PCI_DEVICE_ID_3COM_3CR990SVR95 0x9908
PCI_DEVICE_ID_3COM_3CR990SVR97  macro  include/linux/pci_ids.h  1076  #define PCI_DEVICE_ID_3COM_3CR990SVR97 0x9909
PCI_DEVICE_ID_3COM_3CR990SVR  macro  include/linux/pci_ids.h  1077  #define PCI_DEVICE_ID_3COM_3CR990SVR 0x990a
PCI_VENDOR_ID_AL  macro  include/linux/pci_ids.h  1079  #define PCI_VENDOR_ID_AL 0x10b9
PCI_DEVICE_ID_AL_M1533  macro  include/linux/pci_ids.h  1080  #define PCI_DEVICE_ID_AL_M1533 0x1533
PCI_DEVICE_ID_AL_M1535  macro  include/linux/pci_ids.h  1081  #define PCI_DEVICE_ID_AL_M1535 0x1535
PCI_DEVICE_ID_AL_M1541  macro  include/linux/pci_ids.h  1082  #define PCI_DEVICE_ID_AL_M1541 0x1541
PCI_DEVICE_ID_AL_M1563  macro  include/linux/pci_ids.h  1083  #define PCI_DEVICE_ID_AL_M1563 0x1563
PCI_DEVICE_ID_AL_M1621  macro  include/linux/pci_ids.h  1084  #define PCI_DEVICE_ID_AL_M1621 0x1621
PCI_DEVICE_ID_AL_M1631  macro  include/linux/pci_ids.h  1085  #define PCI_DEVICE_ID_AL_M1631 0x1631
PCI_DEVICE_ID_AL_M1632  macro  include/linux/pci_ids.h  1086  #define PCI_DEVICE_ID_AL_M1632 0x1632
PCI_DEVICE_ID_AL_M1641  macro  include/linux/pci_ids.h  1087  #define PCI_DEVICE_ID_AL_M1641 0x1641
PCI_DEVICE_ID_AL_M1644  macro  include/linux/pci_ids.h  1088  #define PCI_DEVICE_ID_AL_M1644 0x1644
PCI_DEVICE_ID_AL_M1647  macro  include/linux/pci_ids.h  1089  #define PCI_DEVICE_ID_AL_M1647 0x1647
PCI_DEVICE_ID_AL_M1651  macro  include/linux/pci_ids.h  1090  #define PCI_DEVICE_ID_AL_M1651 0x1651
PCI_DEVICE_ID_AL_M1671  macro  include/linux/pci_ids.h  1091  #define PCI_DEVICE_ID_AL_M1671 0x1671
PCI_DEVICE_ID_AL_M1681  macro  include/linux/pci_ids.h  1092  #define PCI_DEVICE_ID_AL_M1681 0x1681
PCI_DEVICE_ID_AL_M1683  macro  include/linux/pci_ids.h  1093  #define PCI_DEVICE_ID_AL_M1683 0x1683
PCI_DEVICE_ID_AL_M1689  macro  include/linux/pci_ids.h  1094  #define PCI_DEVICE_ID_AL_M1689 0x1689
PCI_DEVICE_ID_AL_M5219  macro  include/linux/pci_ids.h  1095  #define PCI_DEVICE_ID_AL_M5219 0x5219
PCI_DEVICE_ID_AL_M5228  macro  include/linux/pci_ids.h  1096  #define PCI_DEVICE_ID_AL_M5228 0x5228
PCI_DEVICE_ID_AL_M5229  macro  include/linux/pci_ids.h  1097  #define PCI_DEVICE_ID_AL_M5229 0x5229
PCI_DEVICE_ID_AL_M5451  macro  include/linux/pci_ids.h  1098  #define PCI_DEVICE_ID_AL_M5451 0x5451
PCI_DEVICE_ID_AL_M7101  macro  include/linux/pci_ids.h  1099  #define PCI_DEVICE_ID_AL_M7101 0x7101
PCI_VENDOR_ID_NEOMAGIC  macro  include/linux/pci_ids.h  1101  #define PCI_VENDOR_ID_NEOMAGIC 0x10c8
PCI_DEVICE_ID_NEOMAGIC_NM256AV_AUDIO  macro  include/linux/pci_ids.h  1102  #define PCI_DEVICE_ID_NEOMAGIC_NM256AV_AUDIO 0x8005
PCI_DEVICE_ID_NEOMAGIC_NM256ZX_AUDIO  macro  include/linux/pci_ids.h  1103  #define PCI_DEVICE_ID_NEOMAGIC_NM256ZX_AUDIO 0x8006
PCI_DEVICE_ID_NEOMAGIC_NM256XL_PLUS_AUDIO  macro  include/linux/pci_ids.h  1104  #define PCI_DEVICE_ID_NEOMAGIC_NM256XL_PLUS_AUDIO 0x8016
PCI_VENDOR_ID_TCONRAD  macro  include/linux/pci_ids.h  1106  #define PCI_VENDOR_ID_TCONRAD 0x10da
PCI_DEVICE_ID_TCONRAD_TOKENRING  macro  include/linux/pci_ids.h  1107  #define PCI_DEVICE_ID_TCONRAD_TOKENRING 0x0508
PCI_VENDOR_ID_NVIDIA  macro  include/linux/pci_ids.h  1109  #define PCI_VENDOR_ID_NVIDIA 0x10de
PCI_DEVICE_ID_NVIDIA_TNT  macro  include/linux/pci_ids.h  1110  #define PCI_DEVICE_ID_NVIDIA_TNT 0x0020
PCI_DEVICE_ID_NVIDIA_TNT2  macro  include/linux/pci_ids.h  1111  #define PCI_DEVICE_ID_NVIDIA_TNT2 0x0028
PCI_DEVICE_ID_NVIDIA_UTNT2  macro  include/linux/pci_ids.h  1112  #define PCI_DEVICE_ID_NVIDIA_UTNT2 0x0029
PCI_DEVICE_ID_NVIDIA_TNT_UNKNOWN  macro  include/linux/pci_ids.h  1113  #define PCI_DEVICE_ID_NVIDIA_TNT_UNKNOWN 0x002a
PCI_DEVICE_ID_NVIDIA_VTNT2  macro  include/linux/pci_ids.h  1114  #define PCI_DEVICE_ID_NVIDIA_VTNT2 0x002C
PCI_DEVICE_ID_NVIDIA_UVTNT2  macro  include/linux/pci_ids.h  1115  #define PCI_DEVICE_ID_NVIDIA_UVTNT2 0x002D
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SMBUS  macro  include/linux/pci_ids.h  1116  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SMBUS 0x0034
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_IDE  macro  include/linux/pci_ids.h  1117  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_IDE 0x0035
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA  macro  include/linux/pci_ids.h  1118  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA 0x0036
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA2  macro  include/linux/pci_ids.h  1119  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA2 0x003e
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_ULTRA  macro  include/linux/pci_ids.h  1120  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_ULTRA 0x0040
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800  macro  include/linux/pci_ids.h  1121  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800 0x0041
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_LE  macro  include/linux/pci_ids.h  1122  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_LE 0x0042
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_GT  macro  include/linux/pci_ids.h  1123  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_GT 0x0045
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_4000  macro  include/linux/pci_ids.h  1124  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_4000 0x004E
PCI_DEVICE_ID_NVIDIA_NFORCE4_SMBUS  macro  include/linux/pci_ids.h  1125  #define PCI_DEVICE_ID_NVIDIA_NFORCE4_SMBUS 0x0052
PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_IDE  macro  include/linux/pci_ids.h  1126  #define PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_IDE 0x0053
PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA  macro  include/linux/pci_ids.h  1127  #define PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA 0x0054
PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA2  macro  include/linux/pci_ids.h  1128  #define PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA2 0x0055
PCI_DEVICE_ID_NVIDIA_CK804_AUDIO  macro  include/linux/pci_ids.h  1129  #define PCI_DEVICE_ID_NVIDIA_CK804_AUDIO 0x0059
PCI_DEVICE_ID_NVIDIA_CK804_PCIE  macro  include/linux/pci_ids.h  1130  #define PCI_DEVICE_ID_NVIDIA_CK804_PCIE 0x005d
PCI_DEVICE_ID_NVIDIA_NFORCE2_SMBUS  macro  include/linux/pci_ids.h  1131  #define PCI_DEVICE_ID_NVIDIA_NFORCE2_SMBUS 0x0064
PCI_DEVICE_ID_NVIDIA_NFORCE2_IDE  macro  include/linux/pci_ids.h  1132  #define PCI_DEVICE_ID_NVIDIA_NFORCE2_IDE 0x0065
PCI_DEVICE_ID_NVIDIA_MCP2_MODEM  macro  include/linux/pci_ids.h  1133  #define PCI_DEVICE_ID_NVIDIA_MCP2_MODEM 0x0069
PCI_DEVICE_ID_NVIDIA_MCP2_AUDIO  macro  include/linux/pci_ids.h  1134  #define PCI_DEVICE_ID_NVIDIA_MCP2_AUDIO 0x006a
PCI_DEVICE_ID_NVIDIA_NFORCE2S_SMBUS  macro  include/linux/pci_ids.h  1135  #define PCI_DEVICE_ID_NVIDIA_NFORCE2S_SMBUS 0x0084
PCI_DEVICE_ID_NVIDIA_NFORCE2S_IDE  macro  include/linux/pci_ids.h  1136  #define PCI_DEVICE_ID_NVIDIA_NFORCE2S_IDE 0x0085
PCI_DEVICE_ID_NVIDIA_MCP2S_MODEM  macro  include/linux/pci_ids.h  1137  #define PCI_DEVICE_ID_NVIDIA_MCP2S_MODEM 0x0089
PCI_DEVICE_ID_NVIDIA_CK8_AUDIO  macro  include/linux/pci_ids.h  1138  #define PCI_DEVICE_ID_NVIDIA_CK8_AUDIO 0x008a
PCI_DEVICE_ID_NVIDIA_NFORCE2S_SATA  macro  include/linux/pci_ids.h  1139  #define PCI_DEVICE_ID_NVIDIA_NFORCE2S_SATA 0x008e
PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GT  macro  include/linux/pci_ids.h  1140  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GT 0x0090
PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GTX  macro  include/linux/pci_ids.h  1141  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GTX 0x0091
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800  macro  include/linux/pci_ids.h  1142  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800 0x0098
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800_GTX  macro  include/linux/pci_ids.h  1143  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800_GTX 0x0099
PCI_DEVICE_ID_NVIDIA_ITNT2  macro  include/linux/pci_ids.h  1144  #define PCI_DEVICE_ID_NVIDIA_ITNT2 0x00A0
PCI_DEVICE_ID_GEFORCE_6800A  macro  include/linux/pci_ids.h  1145  #define PCI_DEVICE_ID_GEFORCE_6800A 0x00c1
PCI_DEVICE_ID_GEFORCE_6800A_LE  macro  include/linux/pci_ids.h  1146  #define PCI_DEVICE_ID_GEFORCE_6800A_LE 0x00c2
PCI_DEVICE_ID_GEFORCE_GO_6800  macro  include/linux/pci_ids.h  1147  #define PCI_DEVICE_ID_GEFORCE_GO_6800 0x00c8
PCI_DEVICE_ID_GEFORCE_GO_6800_ULTRA  macro  include/linux/pci_ids.h  1148  #define PCI_DEVICE_ID_GEFORCE_GO_6800_ULTRA 0x00c9
PCI_DEVICE_ID_QUADRO_FX_GO1400  macro  include/linux/pci_ids.h  1149  #define PCI_DEVICE_ID_QUADRO_FX_GO1400 0x00cc
PCI_DEVICE_ID_QUADRO_FX_1400  macro  include/linux/pci_ids.h  1150  #define PCI_DEVICE_ID_QUADRO_FX_1400 0x00ce
PCI_DEVICE_ID_NVIDIA_NFORCE3  macro  include/linux/pci_ids.h  1151  #define PCI_DEVICE_ID_NVIDIA_NFORCE3 0x00d1
PCI_DEVICE_ID_NVIDIA_NFORCE3_SMBUS  macro  include/linux/pci_ids.h  1152  #define PCI_DEVICE_ID_NVIDIA_NFORCE3_SMBUS 0x00d4
PCI_DEVICE_ID_NVIDIA_NFORCE3_IDE  macro  include/linux/pci_ids.h  1153  #define PCI_DEVICE_ID_NVIDIA_NFORCE3_IDE 0x00d5
PCI_DEVICE_ID_NVIDIA_MCP3_MODEM  macro  include/linux/pci_ids.h  1154  #define PCI_DEVICE_ID_NVIDIA_MCP3_MODEM 0x00d9
PCI_DEVICE_ID_NVIDIA_MCP3_AUDIO  macro  include/linux/pci_ids.h  1155  #define PCI_DEVICE_ID_NVIDIA_MCP3_AUDIO 0x00da
PCI_DEVICE_ID_NVIDIA_NFORCE3S  macro  include/linux/pci_ids.h  1156  #define PCI_DEVICE_ID_NVIDIA_NFORCE3S 0x00e1
PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA  macro  include/linux/pci_ids.h  1157  #define PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA 0x00e3
PCI_DEVICE_ID_NVIDIA_NFORCE3S_SMBUS  macro  include/linux/pci_ids.h  1158  #define PCI_DEVICE_ID_NVIDIA_NFORCE3S_SMBUS 0x00e4
PCI_DEVICE_ID_NVIDIA_NFORCE3S_IDE  macro  include/linux/pci_ids.h  1159  #define PCI_DEVICE_ID_NVIDIA_NFORCE3S_IDE 0x00e5
PCI_DEVICE_ID_NVIDIA_CK8S_AUDIO  macro  include/linux/pci_ids.h  1160  #define PCI_DEVICE_ID_NVIDIA_CK8S_AUDIO 0x00ea
PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA2  macro  include/linux/pci_ids.h  1161  #define PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA2 0x00ee
PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_ALT1  macro  include/linux/pci_ids.h  1162  #define PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_ALT1 0x00f0
PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT1  macro  include/linux/pci_ids.h  1163  #define PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT1 0x00f1
PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT2  macro  include/linux/pci_ids.h  1164  #define PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT2 0x00f2
PCIE_DEVICE_ID_NVIDIA_GEFORCE_6200_ALT1  macro  include/linux/pci_ids.h  1165  #define PCIE_DEVICE_ID_NVIDIA_GEFORCE_6200_ALT1 0x00f3
PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_GT  macro  include/linux/pci_ids.h  1166  #define PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_GT 0x00f9
PCIE_DEVICE_ID_NVIDIA_QUADRO_NVS280  macro  include/linux/pci_ids.h  1167  #define PCIE_DEVICE_ID_NVIDIA_QUADRO_NVS280 0x00fd
PCI_DEVICE_ID_NVIDIA_GEFORCE_SDR  macro  include/linux/pci_ids.h  1168  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_SDR 0x0100
PCI_DEVICE_ID_NVIDIA_GEFORCE_DDR  macro  include/linux/pci_ids.h  1169  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_DDR 0x0101
PCI_DEVICE_ID_NVIDIA_QUADRO  macro  include/linux/pci_ids.h  1170  #define PCI_DEVICE_ID_NVIDIA_QUADRO 0x0103
PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX  macro  include/linux/pci_ids.h  1171  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX 0x0110
PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX2  macro  include/linux/pci_ids.h  1172  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX2 0x0111
PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO  macro  include/linux/pci_ids.h  1173  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO 0x0112
PCI_DEVICE_ID_NVIDIA_QUADRO2_MXR  macro  include/linux/pci_ids.h  1174  #define PCI_DEVICE_ID_NVIDIA_QUADRO2_MXR 0x0113
PCI_DEVICE_ID_NVIDIA_GEFORCE_6600_GT  macro  include/linux/pci_ids.h  1175  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6600_GT 0x0140
PCI_DEVICE_ID_NVIDIA_GEFORCE_6600  macro  include/linux/pci_ids.h  1176  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6600 0x0141
PCI_DEVICE_ID_NVIDIA_GEFORCE_6610_XL  macro  include/linux/pci_ids.h  1177  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6610_XL 0x0145
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_540  macro  include/linux/pci_ids.h  1178  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_540 0x014E
PCI_DEVICE_ID_NVIDIA_GEFORCE_6200  macro  include/linux/pci_ids.h  1179  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6200 0x014F
PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS  macro  include/linux/pci_ids.h  1180  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS 0x0150
PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS2  macro  include/linux/pci_ids.h  1181  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS2 0x0151
PCI_DEVICE_ID_NVIDIA_GEFORCE2_ULTRA  macro  include/linux/pci_ids.h  1182  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_ULTRA 0x0152
PCI_DEVICE_ID_NVIDIA_QUADRO2_PRO  macro  include/linux/pci_ids.h  1183  #define PCI_DEVICE_ID_NVIDIA_QUADRO2_PRO 0x0153
PCI_DEVICE_ID_NVIDIA_GEFORCE_6200_TURBOCACHE  macro  include/linux/pci_ids.h  1184  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6200_TURBOCACHE 0x0161
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200  macro  include/linux/pci_ids.h  1185  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200 0x0164
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250  macro  include/linux/pci_ids.h  1186  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250 0x0166
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200_1  macro  include/linux/pci_ids.h  1187  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200_1 0x0167
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250_1  macro  include/linux/pci_ids.h  1188  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250_1 0x0168
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_460  macro  include/linux/pci_ids.h  1189  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_460 0x0170
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440  macro  include/linux/pci_ids.h  1190  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440 0x0171
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420  macro  include/linux/pci_ids.h  1191  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420 0x0172
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_SE  macro  include/linux/pci_ids.h  1192  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_SE 0x0173
PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO  macro  include/linux/pci_ids.h  1193  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO 0x0174
PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO  macro  include/linux/pci_ids.h  1194  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO 0x0175
PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO_M32  macro  include/linux/pci_ids.h  1195  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO_M32 0x0176
PCI_DEVICE_ID_NVIDIA_GEFORCE4_460_GO  macro  include/linux/pci_ids.h  1196  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_460_GO 0x0177
PCI_DEVICE_ID_NVIDIA_QUADRO4_500XGL  macro  include/linux/pci_ids.h  1197  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_500XGL 0x0178
PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO_M64  macro  include/linux/pci_ids.h  1198  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO_M64 0x0179
PCI_DEVICE_ID_NVIDIA_QUADRO4_200  macro  include/linux/pci_ids.h  1199  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_200 0x017A
PCI_DEVICE_ID_NVIDIA_QUADRO4_550XGL  macro  include/linux/pci_ids.h  1200  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_550XGL 0x017B
PCI_DEVICE_ID_NVIDIA_QUADRO4_500_GOGL  macro  include/linux/pci_ids.h  1201  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_500_GOGL 0x017C
PCI_DEVICE_ID_NVIDIA_GEFORCE4_410_GO_M16  macro  include/linux/pci_ids.h  1202  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_410_GO_M16 0x017D
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_8X  macro  include/linux/pci_ids.h  1203  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_8X 0x0181
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440SE_8X  macro  include/linux/pci_ids.h  1204  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440SE_8X 0x0182
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420_8X  macro  include/linux/pci_ids.h  1205  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420_8X 0x0183
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_4000  macro  include/linux/pci_ids.h  1206  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_4000 0x0185
PCI_DEVICE_ID_NVIDIA_GEFORCE4_448_GO  macro  include/linux/pci_ids.h  1207  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_448_GO 0x0186
PCI_DEVICE_ID_NVIDIA_GEFORCE4_488_GO  macro  include/linux/pci_ids.h  1208  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_488_GO 0x0187
PCI_DEVICE_ID_NVIDIA_QUADRO4_580_XGL  macro  include/linux/pci_ids.h  1209  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_580_XGL 0x0188
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_MAC  macro  include/linux/pci_ids.h  1210  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_MAC 0x0189
PCI_DEVICE_ID_NVIDIA_QUADRO4_280_NVS  macro  include/linux/pci_ids.h  1211  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_280_NVS 0x018A
PCI_DEVICE_ID_NVIDIA_QUADRO4_380_XGL  macro  include/linux/pci_ids.h  1212  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_380_XGL 0x018B
PCI_DEVICE_ID_NVIDIA_IGEFORCE2  macro  include/linux/pci_ids.h  1213  #define PCI_DEVICE_ID_NVIDIA_IGEFORCE2 0x01a0
PCI_DEVICE_ID_NVIDIA_NFORCE  macro  include/linux/pci_ids.h  1214  #define PCI_DEVICE_ID_NVIDIA_NFORCE 0x01a4
PCI_DEVICE_ID_NVIDIA_MCP1_AUDIO  macro  include/linux/pci_ids.h  1215  #define PCI_DEVICE_ID_NVIDIA_MCP1_AUDIO 0x01b1
PCI_DEVICE_ID_NVIDIA_NFORCE_SMBUS  macro  include/linux/pci_ids.h  1216  #define PCI_DEVICE_ID_NVIDIA_NFORCE_SMBUS 0x01b4
PCI_DEVICE_ID_NVIDIA_NFORCE_IDE  macro  include/linux/pci_ids.h  1217  #define PCI_DEVICE_ID_NVIDIA_NFORCE_IDE 0x01bc
PCI_DEVICE_ID_NVIDIA_MCP1_MODEM  macro  include/linux/pci_ids.h  1218  #define PCI_DEVICE_ID_NVIDIA_MCP1_MODEM 0x01c1
PCI_DEVICE_ID_NVIDIA_NFORCE2  macro  include/linux/pci_ids.h  1219  #define PCI_DEVICE_ID_NVIDIA_NFORCE2 0x01e0
PCI_DEVICE_ID_NVIDIA_GEFORCE3  macro  include/linux/pci_ids.h  1220  #define PCI_DEVICE_ID_NVIDIA_GEFORCE3 0x0200
PCI_DEVICE_ID_NVIDIA_GEFORCE3_1  macro  include/linux/pci_ids.h  1221  #define PCI_DEVICE_ID_NVIDIA_GEFORCE3_1 0x0201
PCI_DEVICE_ID_NVIDIA_GEFORCE3_2  macro  include/linux/pci_ids.h  1222  #define PCI_DEVICE_ID_NVIDIA_GEFORCE3_2 0x0202
PCI_DEVICE_ID_NVIDIA_QUADRO_DDC  macro  include/linux/pci_ids.h  1223  #define PCI_DEVICE_ID_NVIDIA_QUADRO_DDC 0x0203
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B  macro  include/linux/pci_ids.h  1224  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B 0x0211
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_LE  macro  include/linux/pci_ids.h  1225  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_LE 0x0212
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_GT  macro  include/linux/pci_ids.h  1226  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_GT 0x0215
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4600  macro  include/linux/pci_ids.h  1227  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4600 0x0250
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4400  macro  include/linux/pci_ids.h  1228  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4400 0x0251
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4200  macro  include/linux/pci_ids.h  1229  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4200 0x0253
PCI_DEVICE_ID_NVIDIA_QUADRO4_900XGL  macro  include/linux/pci_ids.h  1230  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_900XGL 0x0258
PCI_DEVICE_ID_NVIDIA_QUADRO4_750XGL  macro  include/linux/pci_ids.h  1231  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_750XGL 0x0259
PCI_DEVICE_ID_NVIDIA_QUADRO4_700XGL  macro  include/linux/pci_ids.h  1232  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_700XGL 0x025B
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SMBUS  macro  include/linux/pci_ids.h  1233  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SMBUS 0x0264
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_IDE  macro  include/linux/pci_ids.h  1234  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_IDE 0x0265
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA  macro  include/linux/pci_ids.h  1235  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA 0x0266
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA2  macro  include/linux/pci_ids.h  1236  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA2 0x0267
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SMBUS  macro  include/linux/pci_ids.h  1237  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SMBUS 0x0368
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_IDE  macro  include/linux/pci_ids.h  1238  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_IDE 0x036E
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA  macro  include/linux/pci_ids.h  1239  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA 0x037E
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA2  macro  include/linux/pci_ids.h  1240  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA2 0x037F
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800  macro  include/linux/pci_ids.h  1241  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800 0x0280
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800_8X  macro  include/linux/pci_ids.h  1242  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800_8X 0x0281
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800SE  macro  include/linux/pci_ids.h  1243  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800SE 0x0282
PCI_DEVICE_ID_NVIDIA_GEFORCE4_4200_GO  macro  include/linux/pci_ids.h  1244  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_4200_GO 0x0286
PCI_DEVICE_ID_NVIDIA_QUADRO4_980_XGL  macro  include/linux/pci_ids.h  1245  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_980_XGL 0x0288
PCI_DEVICE_ID_NVIDIA_QUADRO4_780_XGL  macro  include/linux/pci_ids.h  1246  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_780_XGL 0x0289
PCI_DEVICE_ID_NVIDIA_QUADRO4_700_GOGL  macro  include/linux/pci_ids.h  1247  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_700_GOGL 0x028C
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800_ULTRA  macro  include/linux/pci_ids.h  1248  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800_ULTRA 0x0301
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800  macro  include/linux/pci_ids.h  1249  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800 0x0302
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_2000  macro  include/linux/pci_ids.h  1250  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_2000 0x0308
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1000  macro  include/linux/pci_ids.h  1251  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1000 0x0309
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600_ULTRA  macro  include/linux/pci_ids.h  1252  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600_ULTRA 0x0311
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600  macro  include/linux/pci_ids.h  1253  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600 0x0312
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600SE  macro  include/linux/pci_ids.h  1254  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600SE 0x0314
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5600  macro  include/linux/pci_ids.h  1255  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5600 0x031A
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5650  macro  include/linux/pci_ids.h  1256  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5650 0x031B
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO700  macro  include/linux/pci_ids.h  1257  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO700 0x031C
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200  macro  include/linux/pci_ids.h  1258  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200 0x0320
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_ULTRA  macro  include/linux/pci_ids.h  1259  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_ULTRA 0x0321
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_1  macro  include/linux/pci_ids.h  1260  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_1 0x0322
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200SE  macro  include/linux/pci_ids.h  1261  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200SE 0x0323
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5200  macro  include/linux/pci_ids.h  1262  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5200 0x0324
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250  macro  include/linux/pci_ids.h  1263  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250 0x0325
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5500  macro  include/linux/pci_ids.h  1264  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5500 0x0326
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5100  macro  include/linux/pci_ids.h  1265  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5100 0x0327
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250_32  macro  include/linux/pci_ids.h  1266  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250_32 0x0328
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO_5200  macro  include/linux/pci_ids.h  1267  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO_5200 0x0329
PCI_DEVICE_ID_NVIDIA_QUADRO_NVS_280_PCI  macro  include/linux/pci_ids.h  1268  #define PCI_DEVICE_ID_NVIDIA_QUADRO_NVS_280_PCI 0x032A
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_500  macro  include/linux/pci_ids.h  1269  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_500 0x032B
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5300  macro  include/linux/pci_ids.h  1270  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5300 0x032C
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5100  macro  include/linux/pci_ids.h  1271  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5100 0x032D
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900_ULTRA  macro  include/linux/pci_ids.h  1272  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900_ULTRA 0x0330
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900  macro  include/linux/pci_ids.h  1273  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900 0x0331
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900XT  macro  include/linux/pci_ids.h  1274  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900XT 0x0332
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5950_ULTRA  macro  include/linux/pci_ids.h  1275  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5950_ULTRA 0x0333
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900ZT  macro  include/linux/pci_ids.h  1276  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900ZT 0x0334
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_3000  macro  include/linux/pci_ids.h  1277  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_3000 0x0338
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_700  macro  include/linux/pci_ids.h  1278  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_700 0x033F
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700_ULTRA  macro  include/linux/pci_ids.h  1279  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700_ULTRA 0x0341
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700  macro  include/linux/pci_ids.h  1280  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700 0x0342
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700LE  macro  include/linux/pci_ids.h  1281  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700LE 0x0343
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700VE  macro  include/linux/pci_ids.h  1282  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700VE 0x0344
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_1  macro  include/linux/pci_ids.h  1283  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_1 0x0347
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_2  macro  include/linux/pci_ids.h  1284  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_2 0x0348
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO1000  macro  include/linux/pci_ids.h  1285  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO1000 0x034C
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1100  macro  include/linux/pci_ids.h  1286  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1100 0x034E
PCI_DEVICE_ID_NVIDIA_MCP55_BRIDGE_V0  macro  include/linux/pci_ids.h  1287  #define PCI_DEVICE_ID_NVIDIA_MCP55_BRIDGE_V0 0x0360
PCI_DEVICE_ID_NVIDIA_MCP55_BRIDGE_V4  macro  include/linux/pci_ids.h  1288  #define PCI_DEVICE_ID_NVIDIA_MCP55_BRIDGE_V4 0x0364
PCI_DEVICE_ID_NVIDIA_NVENET_15  macro  include/linux/pci_ids.h  1289  #define PCI_DEVICE_ID_NVIDIA_NVENET_15 0x0373
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA  macro  include/linux/pci_ids.h  1290  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA 0x03E7
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SMBUS  macro  include/linux/pci_ids.h  1291  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SMBUS 0x03EB
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_IDE  macro  include/linux/pci_ids.h  1292  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_IDE 0x03EC
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA2  macro  include/linux/pci_ids.h  1293  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA2 0x03F6
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA3  macro  include/linux/pci_ids.h  1294  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA3 0x03F7
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_SMBUS  macro  include/linux/pci_ids.h  1295  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_SMBUS 0x0446
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_IDE  macro  include/linux/pci_ids.h  1296  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_IDE 0x0448
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP67_SMBUS  macro  include/linux/pci_ids.h  1297  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP67_SMBUS 0x0542
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP67_IDE  macro  include/linux/pci_ids.h  1298  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP67_IDE 0x0560
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP73_IDE  macro  include/linux/pci_ids.h  1299  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP73_IDE 0x056C
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP78S_SMBUS  macro  include/linux/pci_ids.h  1300  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP78S_SMBUS 0x0752
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP77_IDE  macro  include/linux/pci_ids.h  1301  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP77_IDE 0x0759
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP73_SMBUS  macro  include/linux/pci_ids.h  1302  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP73_SMBUS 0x07D8
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP79_SMBUS  macro  include/linux/pci_ids.h  1303  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP79_SMBUS 0x0AA2
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP89_SATA  macro  include/linux/pci_ids.h  1304  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP89_SATA 0x0D85
PCI_VENDOR_ID_IMS  macro  include/linux/pci_ids.h  1306  #define PCI_VENDOR_ID_IMS 0x10e0
PCI_DEVICE_ID_IMS_TT128  macro  include/linux/pci_ids.h  1307  #define PCI_DEVICE_ID_IMS_TT128 0x9128
PCI_DEVICE_ID_IMS_TT3D  macro  include/linux/pci_ids.h  1308  #define PCI_DEVICE_ID_IMS_TT3D 0x9135
PCI_VENDOR_ID_INTERG  macro  include/linux/pci_ids.h  1310  #define PCI_VENDOR_ID_INTERG 0x10ea
PCI_DEVICE_ID_INTERG_1682  macro  include/linux/pci_ids.h  1311  #define PCI_DEVICE_ID_INTERG_1682 0x1682
PCI_DEVICE_ID_INTERG_2000  macro  include/linux/pci_ids.h  1312  #define PCI_DEVICE_ID_INTERG_2000 0x2000
PCI_DEVICE_ID_INTERG_2010  macro  include/linux/pci_ids.h  1313  #define PCI_DEVICE_ID_INTERG_2010 0x2010
PCI_DEVICE_ID_INTERG_5000  macro  include/linux/pci_ids.h  1314  #define PCI_DEVICE_ID_INTERG_5000 0x5000
PCI_DEVICE_ID_INTERG_5050  macro  include/linux/pci_ids.h  1315  #define PCI_DEVICE_ID_INTERG_5050 0x5050
PCI_VENDOR_ID_REALTEK  macro  include/linux/pci_ids.h  1317  #define PCI_VENDOR_ID_REALTEK 0x10ec
PCI_DEVICE_ID_REALTEK_8139  macro  include/linux/pci_ids.h  1318  #define PCI_DEVICE_ID_REALTEK_8139 0x8139
PCI_VENDOR_ID_XILINX  macro  include/linux/pci_ids.h  1320  #define PCI_VENDOR_ID_XILINX 0x10ee
PCI_DEVICE_ID_RME_DIGI96  macro  include/linux/pci_ids.h  1321  #define PCI_DEVICE_ID_RME_DIGI96 0x3fc0
PCI_DEVICE_ID_RME_DIGI96_8  macro  include/linux/pci_ids.h  1322  #define PCI_DEVICE_ID_RME_DIGI96_8 0x3fc1
PCI_DEVICE_ID_RME_DIGI96_8_PRO  macro  include/linux/pci_ids.h  1323  #define PCI_DEVICE_ID_RME_DIGI96_8_PRO 0x3fc2
PCI_DEVICE_ID_RME_DIGI96_8_PAD_OR_PST  macro  include/linux/pci_ids.h  1324  #define PCI_DEVICE_ID_RME_DIGI96_8_PAD_OR_PST 0x3fc3
PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP  macro  include/linux/pci_ids.h  1325  #define PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP 0x3fc5
PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP_MADI  macro  include/linux/pci_ids.h  1326  #define PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP_MADI 0x3fc6
PCI_VENDOR_ID_INIT  macro  include/linux/pci_ids.h  1328  #define PCI_VENDOR_ID_INIT 0x1101
PCI_VENDOR_ID_CREATIVE  macro  include/linux/pci_ids.h  1330  #define PCI_VENDOR_ID_CREATIVE 0x1102
PCI_DEVICE_ID_CREATIVE_EMU10K1  macro  include/linux/pci_ids.h  1331  #define PCI_DEVICE_ID_CREATIVE_EMU10K1 0x0002
PCI_DEVICE_ID_CREATIVE_20K1  macro  include/linux/pci_ids.h  1332  #define PCI_DEVICE_ID_CREATIVE_20K1 0x0005
PCI_DEVICE_ID_CREATIVE_20K2  macro  include/linux/pci_ids.h  1333  #define PCI_DEVICE_ID_CREATIVE_20K2 0x000b
PCI_SUBDEVICE_ID_CREATIVE_SB0760  macro  include/linux/pci_ids.h  1334  #define PCI_SUBDEVICE_ID_CREATIVE_SB0760 0x0024
PCI_SUBDEVICE_ID_CREATIVE_SB08801  macro  include/linux/pci_ids.h  1335  #define PCI_SUBDEVICE_ID_CREATIVE_SB08801 0x0041
PCI_SUBDEVICE_ID_CREATIVE_SB08802  macro  include/linux/pci_ids.h  1336  #define PCI_SUBDEVICE_ID_CREATIVE_SB08802 0x0042
PCI_SUBDEVICE_ID_CREATIVE_SB08803  macro  include/linux/pci_ids.h  1337  #define PCI_SUBDEVICE_ID_CREATIVE_SB08803 0x0043
PCI_SUBDEVICE_ID_CREATIVE_SB1270  macro  include/linux/pci_ids.h  1338  #define PCI_SUBDEVICE_ID_CREATIVE_SB1270 0x0062
PCI_SUBDEVICE_ID_CREATIVE_HENDRIX  macro  include/linux/pci_ids.h  1339  #define PCI_SUBDEVICE_ID_CREATIVE_HENDRIX 0x6000
PCI_VENDOR_ID_ECTIVA  macro  include/linux/pci_ids.h  1341  #define PCI_VENDOR_ID_ECTIVA 0x1102
PCI_DEVICE_ID_ECTIVA_EV1938  macro  include/linux/pci_ids.h  1342  #define PCI_DEVICE_ID_ECTIVA_EV1938 0x8938
PCI_VENDOR_ID_TTI  macro  include/linux/pci_ids.h  1344  #define PCI_VENDOR_ID_TTI 0x1103
PCI_DEVICE_ID_TTI_HPT343  macro  include/linux/pci_ids.h  1345  #define PCI_DEVICE_ID_TTI_HPT343 0x0003
PCI_DEVICE_ID_TTI_HPT366  macro  include/linux/pci_ids.h  1346  #define PCI_DEVICE_ID_TTI_HPT366 0x0004
PCI_DEVICE_ID_TTI_HPT372  macro  include/linux/pci_ids.h  1347  #define PCI_DEVICE_ID_TTI_HPT372 0x0005
PCI_DEVICE_ID_TTI_HPT302  macro  include/linux/pci_ids.h  1348  #define PCI_DEVICE_ID_TTI_HPT302 0x0006
PCI_DEVICE_ID_TTI_HPT371  macro  include/linux/pci_ids.h  1349  #define PCI_DEVICE_ID_TTI_HPT371 0x0007
PCI_DEVICE_ID_TTI_HPT374  macro  include/linux/pci_ids.h  1350  #define PCI_DEVICE_ID_TTI_HPT374 0x0008
PCI_DEVICE_ID_TTI_HPT372N  macro  include/linux/pci_ids.h  1351  #define PCI_DEVICE_ID_TTI_HPT372N 0x0009
PCI_VENDOR_ID_VIA  macro  include/linux/pci_ids.h  1353  #define PCI_VENDOR_ID_VIA 0x1106
PCI_DEVICE_ID_VIA_8763_0  macro  include/linux/pci_ids.h  1354  #define PCI_DEVICE_ID_VIA_8763_0 0x0198
PCI_DEVICE_ID_VIA_8380_0  macro  include/linux/pci_ids.h  1355  #define PCI_DEVICE_ID_VIA_8380_0 0x0204
PCI_DEVICE_ID_VIA_3238_0  macro  include/linux/pci_ids.h  1356  #define PCI_DEVICE_ID_VIA_3238_0 0x0238
PCI_DEVICE_ID_VIA_PT880  macro  include/linux/pci_ids.h  1357  #define PCI_DEVICE_ID_VIA_PT880 0x0258
PCI_DEVICE_ID_VIA_PT880ULTRA  macro  include/linux/pci_ids.h  1358  #define PCI_DEVICE_ID_VIA_PT880ULTRA 0x0308
PCI_DEVICE_ID_VIA_PX8X0_0  macro  include/linux/pci_ids.h  1359  #define PCI_DEVICE_ID_VIA_PX8X0_0 0x0259
PCI_DEVICE_ID_VIA_3269_0  macro  include/linux/pci_ids.h  1360  #define PCI_DEVICE_ID_VIA_3269_0 0x0269
PCI_DEVICE_ID_VIA_K8T800PRO_0  macro  include/linux/pci_ids.h  1361  #define PCI_DEVICE_ID_VIA_K8T800PRO_0 0x0282
PCI_DEVICE_ID_VIA_3296_0  macro  include/linux/pci_ids.h  1362  #define PCI_DEVICE_ID_VIA_3296_0 0x0296
PCI_DEVICE_ID_VIA_8363_0  macro  include/linux/pci_ids.h  1363  #define PCI_DEVICE_ID_VIA_8363_0 0x0305
PCI_DEVICE_ID_VIA_P4M800CE  macro  include/linux/pci_ids.h  1364  #define PCI_DEVICE_ID_VIA_P4M800CE 0x0314
PCI_DEVICE_ID_VIA_P4M890  macro  include/linux/pci_ids.h  1365  #define PCI_DEVICE_ID_VIA_P4M890 0x0327
PCI_DEVICE_ID_VIA_VT3324  macro  include/linux/pci_ids.h  1366  #define PCI_DEVICE_ID_VIA_VT3324 0x0324
PCI_DEVICE_ID_VIA_VT3336  macro  include/linux/pci_ids.h  1367  #define PCI_DEVICE_ID_VIA_VT3336 0x0336
PCI_DEVICE_ID_VIA_VT3351  macro  include/linux/pci_ids.h  1368  #define PCI_DEVICE_ID_VIA_VT3351 0x0351
PCI_DEVICE_ID_VIA_VT3364  macro  include/linux/pci_ids.h  1369  #define PCI_DEVICE_ID_VIA_VT3364 0x0364
PCI_DEVICE_ID_VIA_8371_0  macro  include/linux/pci_ids.h  1370  #define PCI_DEVICE_ID_VIA_8371_0 0x0391
PCI_DEVICE_ID_VIA_6415  macro  include/linux/pci_ids.h  1371  #define PCI_DEVICE_ID_VIA_6415 0x0415
PCI_DEVICE_ID_VIA_8501_0  macro  include/linux/pci_ids.h  1372  #define PCI_DEVICE_ID_VIA_8501_0 0x0501
PCI_DEVICE_ID_VIA_82C561  macro  include/linux/pci_ids.h  1373  #define PCI_DEVICE_ID_VIA_82C561 0x0561
PCI_DEVICE_ID_VIA_82C586_1  macro  include/linux/pci_ids.h  1374  #define PCI_DEVICE_ID_VIA_82C586_1 0x0571
PCI_DEVICE_ID_VIA_82C576  macro  include/linux/pci_ids.h  1375  #define PCI_DEVICE_ID_VIA_82C576 0x0576
PCI_DEVICE_ID_VIA_82C586_0  macro  include/linux/pci_ids.h  1376  #define PCI_DEVICE_ID_VIA_82C586_0 0x0586
PCI_DEVICE_ID_VIA_82C596  macro  include/linux/pci_ids.h  1377  #define PCI_DEVICE_ID_VIA_82C596 0x0596
PCI_DEVICE_ID_VIA_82C597_0  macro  include/linux/pci_ids.h  1378  #define PCI_DEVICE_ID_VIA_82C597_0 0x0597
PCI_DEVICE_ID_VIA_82C598_0  macro  include/linux/pci_ids.h  1379  #define PCI_DEVICE_ID_VIA_82C598_0 0x0598
PCI_DEVICE_ID_VIA_8601_0  macro  include/linux/pci_ids.h  1380  #define PCI_DEVICE_ID_VIA_8601_0 0x0601
PCI_DEVICE_ID_VIA_8605_0  macro  include/linux/pci_ids.h  1381  #define PCI_DEVICE_ID_VIA_8605_0 0x0605
PCI_DEVICE_ID_VIA_82C686  macro  include/linux/pci_ids.h  1382  #define PCI_DEVICE_ID_VIA_82C686 0x0686
PCI_DEVICE_ID_VIA_82C691_0  macro  include/linux/pci_ids.h  1383  #define PCI_DEVICE_ID_VIA_82C691_0 0x0691
PCI_DEVICE_ID_VIA_82C576_1  macro  include/linux/pci_ids.h  1384  #define PCI_DEVICE_ID_VIA_82C576_1 0x1571
PCI_DEVICE_ID_VIA_82C586_2  macro  include/linux/pci_ids.h  1385  #define PCI_DEVICE_ID_VIA_82C586_2 0x3038
PCI_DEVICE_ID_VIA_82C586_3  macro  include/linux/pci_ids.h  1386  #define PCI_DEVICE_ID_VIA_82C586_3 0x3040
PCI_DEVICE_ID_VIA_82C596_3  macro  include/linux/pci_ids.h  1387  #define PCI_DEVICE_ID_VIA_82C596_3 0x3050
PCI_DEVICE_ID_VIA_82C596B_3  macro  include/linux/pci_ids.h  1388  #define PCI_DEVICE_ID_VIA_82C596B_3 0x3051
PCI_DEVICE_ID_VIA_82C686_4  macro  include/linux/pci_ids.h  1389  #define PCI_DEVICE_ID_VIA_82C686_4 0x3057
PCI_DEVICE_ID_VIA_82C686_5  macro  include/linux/pci_ids.h  1390  #define PCI_DEVICE_ID_VIA_82C686_5 0x3058
PCI_DEVICE_ID_VIA_8233_5  macro  include/linux/pci_ids.h  1391  #define PCI_DEVICE_ID_VIA_8233_5 0x3059
PCI_DEVICE_ID_VIA_8233_0  macro  include/linux/pci_ids.h  1392  #define PCI_DEVICE_ID_VIA_8233_0 0x3074
PCI_DEVICE_ID_VIA_8633_0  macro  include/linux/pci_ids.h  1393  #define PCI_DEVICE_ID_VIA_8633_0 0x3091
PCI_DEVICE_ID_VIA_8367_0  macro  include/linux/pci_ids.h  1394  #define PCI_DEVICE_ID_VIA_8367_0 0x3099
PCI_DEVICE_ID_VIA_8653_0  macro  include/linux/pci_ids.h  1395  #define PCI_DEVICE_ID_VIA_8653_0 0x3101
PCI_DEVICE_ID_VIA_8622  macro  include/linux/pci_ids.h  1396  #define PCI_DEVICE_ID_VIA_8622 0x3102
PCI_DEVICE_ID_VIA_8235_USB_2  macro  include/linux/pci_ids.h  1397  #define PCI_DEVICE_ID_VIA_8235_USB_2 0x3104
PCI_DEVICE_ID_VIA_8233C_0  macro  include/linux/pci_ids.h  1398  #define PCI_DEVICE_ID_VIA_8233C_0 0x3109
PCI_DEVICE_ID_VIA_8361  macro  include/linux/pci_ids.h  1399  #define PCI_DEVICE_ID_VIA_8361 0x3112
PCI_DEVICE_ID_VIA_XM266  macro  include/linux/pci_ids.h  1400  #define PCI_DEVICE_ID_VIA_XM266 0x3116
PCI_DEVICE_ID_VIA_612X  macro  include/linux/pci_ids.h  1401  #define PCI_DEVICE_ID_VIA_612X 0x3119
PCI_DEVICE_ID_VIA_862X_0  macro  include/linux/pci_ids.h  1402  #define PCI_DEVICE_ID_VIA_862X_0 0x3123
PCI_DEVICE_ID_VIA_8753_0  macro  include/linux/pci_ids.h  1403  #define PCI_DEVICE_ID_VIA_8753_0 0x3128
PCI_DEVICE_ID_VIA_8233A  macro  include/linux/pci_ids.h  1404  #define PCI_DEVICE_ID_VIA_8233A 0x3147
PCI_DEVICE_ID_VIA_8703_51_0  macro  include/linux/pci_ids.h  1405  #define PCI_DEVICE_ID_VIA_8703_51_0 0x3148
PCI_DEVICE_ID_VIA_8237_SATA  macro  include/linux/pci_ids.h  1406  #define PCI_DEVICE_ID_VIA_8237_SATA 0x3149
PCI_DEVICE_ID_VIA_XN266  macro  include/linux/pci_ids.h  1407  #define PCI_DEVICE_ID_VIA_XN266 0x3156
PCI_DEVICE_ID_VIA_6410  macro  include/linux/pci_ids.h  1408  #define PCI_DEVICE_ID_VIA_6410 0x3164
PCI_DEVICE_ID_VIA_8754C_0  macro  include/linux/pci_ids.h  1409  #define PCI_DEVICE_ID_VIA_8754C_0 0x3168
PCI_DEVICE_ID_VIA_8235  macro  include/linux/pci_ids.h  1410  #define PCI_DEVICE_ID_VIA_8235 0x3177
PCI_DEVICE_ID_VIA_8385_0  macro  include/linux/pci_ids.h  1411  #define PCI_DEVICE_ID_VIA_8385_0 0x3188
PCI_DEVICE_ID_VIA_8377_0  macro  include/linux/pci_ids.h  1412  #define PCI_DEVICE_ID_VIA_8377_0 0x3189
PCI_DEVICE_ID_VIA_8378_0  macro  include/linux/pci_ids.h  1413  #define PCI_DEVICE_ID_VIA_8378_0 0x3205
PCI_DEVICE_ID_VIA_8783_0  macro  include/linux/pci_ids.h  1414  #define PCI_DEVICE_ID_VIA_8783_0 0x3208
PCI_DEVICE_ID_VIA_8237  macro  include/linux/pci_ids.h  1415  #define PCI_DEVICE_ID_VIA_8237 0x3227
PCI_DEVICE_ID_VIA_8251  macro  include/linux/pci_ids.h  1416  #define PCI_DEVICE_ID_VIA_8251 0x3287
PCI_DEVICE_ID_VIA_8261  macro  include/linux/pci_ids.h  1417  #define PCI_DEVICE_ID_VIA_8261 0x3402
PCI_DEVICE_ID_VIA_8237A  macro  include/linux/pci_ids.h  1418  #define PCI_DEVICE_ID_VIA_8237A 0x3337
PCI_DEVICE_ID_VIA_8237S  macro  include/linux/pci_ids.h  1419  #define PCI_DEVICE_ID_VIA_8237S 0x3372
PCI_DEVICE_ID_VIA_SATA_EIDE  macro  include/linux/pci_ids.h  1420  #define PCI_DEVICE_ID_VIA_SATA_EIDE 0x5324
PCI_DEVICE_ID_VIA_8231  macro  include/linux/pci_ids.h  1421  #define PCI_DEVICE_ID_VIA_8231 0x8231
PCI_DEVICE_ID_VIA_8231_4  macro  include/linux/pci_ids.h  1422  #define PCI_DEVICE_ID_VIA_8231_4 0x8235
PCI_DEVICE_ID_VIA_8365_1  macro  include/linux/pci_ids.h  1423  #define PCI_DEVICE_ID_VIA_8365_1 0x8305
PCI_DEVICE_ID_VIA_CX700  macro  include/linux/pci_ids.h  1424  #define PCI_DEVICE_ID_VIA_CX700 0x8324
PCI_DEVICE_ID_VIA_CX700_IDE  macro  include/linux/pci_ids.h  1425  #define PCI_DEVICE_ID_VIA_CX700_IDE 0x0581
PCI_DEVICE_ID_VIA_VX800  macro  include/linux/pci_ids.h  1426  #define PCI_DEVICE_ID_VIA_VX800 0x8353
PCI_DEVICE_ID_VIA_VX855  macro  include/linux/pci_ids.h  1427  #define PCI_DEVICE_ID_VIA_VX855 0x8409
PCI_DEVICE_ID_VIA_8371_1  macro  include/linux/pci_ids.h  1428  #define PCI_DEVICE_ID_VIA_8371_1 0x8391
PCI_DEVICE_ID_VIA_82C598_1  macro  include/linux/pci_ids.h  1429  #define PCI_DEVICE_ID_VIA_82C598_1 0x8598
PCI_DEVICE_ID_VIA_838X_1  macro  include/linux/pci_ids.h  1430  #define PCI_DEVICE_ID_VIA_838X_1 0xB188
PCI_DEVICE_ID_VIA_83_87XX_1  macro  include/linux/pci_ids.h  1431  #define PCI_DEVICE_ID_VIA_83_87XX_1 0xB198
PCI_DEVICE_ID_VIA_VX855_IDE  macro  include/linux/pci_ids.h  1432  #define PCI_DEVICE_ID_VIA_VX855_IDE 0xC409
PCI_DEVICE_ID_VIA_ANON  macro  include/linux/pci_ids.h  1433  #define PCI_DEVICE_ID_VIA_ANON 0xFFFF
PCI_VENDOR_ID_SIEMENS  macro  include/linux/pci_ids.h  1435  #define PCI_VENDOR_ID_SIEMENS 0x110A
PCI_DEVICE_ID_SIEMENS_DSCC4  macro  include/linux/pci_ids.h  1436  #define PCI_DEVICE_ID_SIEMENS_DSCC4 0x2102
PCI_VENDOR_ID_VORTEX  macro  include/linux/pci_ids.h  1438  #define PCI_VENDOR_ID_VORTEX 0x1119
PCI_DEVICE_ID_VORTEX_GDT60x0  macro  include/linux/pci_ids.h  1439  #define PCI_DEVICE_ID_VORTEX_GDT60x0 0x0000
PCI_DEVICE_ID_VORTEX_GDT6000B  macro  include/linux/pci_ids.h  1440  #define PCI_DEVICE_ID_VORTEX_GDT6000B 0x0001
PCI_DEVICE_ID_VORTEX_GDT6x10  macro  include/linux/pci_ids.h  1441  #define PCI_DEVICE_ID_VORTEX_GDT6x10 0x0002
PCI_DEVICE_ID_VORTEX_GDT6x20  macro  include/linux/pci_ids.h  1442  #define PCI_DEVICE_ID_VORTEX_GDT6x20 0x0003
PCI_DEVICE_ID_VORTEX_GDT6530  macro  include/linux/pci_ids.h  1443  #define PCI_DEVICE_ID_VORTEX_GDT6530 0x0004
PCI_DEVICE_ID_VORTEX_GDT6550  macro  include/linux/pci_ids.h  1444  #define PCI_DEVICE_ID_VORTEX_GDT6550 0x0005
PCI_DEVICE_ID_VORTEX_GDT6x17  macro  include/linux/pci_ids.h  1445  #define PCI_DEVICE_ID_VORTEX_GDT6x17 0x0006
PCI_DEVICE_ID_VORTEX_GDT6x27  macro  include/linux/pci_ids.h  1446  #define PCI_DEVICE_ID_VORTEX_GDT6x27 0x0007
PCI_DEVICE_ID_VORTEX_GDT6537  macro  include/linux/pci_ids.h  1447  #define PCI_DEVICE_ID_VORTEX_GDT6537 0x0008
PCI_DEVICE_ID_VORTEX_GDT6557  macro  include/linux/pci_ids.h  1448  #define PCI_DEVICE_ID_VORTEX_GDT6557 0x0009
PCI_DEVICE_ID_VORTEX_GDT6x15  macro  include/linux/pci_ids.h  1449  #define PCI_DEVICE_ID_VORTEX_GDT6x15 0x000a
PCI_DEVICE_ID_VORTEX_GDT6x25  macro  include/linux/pci_ids.h  1450  #define PCI_DEVICE_ID_VORTEX_GDT6x25 0x000b
PCI_DEVICE_ID_VORTEX_GDT6535  macro  include/linux/pci_ids.h  1451  #define PCI_DEVICE_ID_VORTEX_GDT6535 0x000c
PCI_DEVICE_ID_VORTEX_GDT6555  macro  include/linux/pci_ids.h  1452  #define PCI_DEVICE_ID_VORTEX_GDT6555 0x000d
PCI_DEVICE_ID_VORTEX_GDT6x17RP  macro  include/linux/pci_ids.h  1453  #define PCI_DEVICE_ID_VORTEX_GDT6x17RP 0x0100
PCI_DEVICE_ID_VORTEX_GDT6x27RP  macro  include/linux/pci_ids.h  1454  #define PCI_DEVICE_ID_VORTEX_GDT6x27RP 0x0101
PCI_DEVICE_ID_VORTEX_GDT6537RP  macro  include/linux/pci_ids.h  1455  #define PCI_DEVICE_ID_VORTEX_GDT6537RP 0x0102
PCI_DEVICE_ID_VORTEX_GDT6557RP  macro  include/linux/pci_ids.h  1456  #define PCI_DEVICE_ID_VORTEX_GDT6557RP 0x0103
PCI_DEVICE_ID_VORTEX_GDT6x11RP  macro  include/linux/pci_ids.h  1457  #define PCI_DEVICE_ID_VORTEX_GDT6x11RP 0x0104
PCI_DEVICE_ID_VORTEX_GDT6x21RP  macro  include/linux/pci_ids.h  1458  #define PCI_DEVICE_ID_VORTEX_GDT6x21RP 0x0105
PCI_VENDOR_ID_EF  macro  include/linux/pci_ids.h  1460  #define PCI_VENDOR_ID_EF 0x111a
PCI_DEVICE_ID_EF_ATM_FPGA  macro  include/linux/pci_ids.h  1461  #define PCI_DEVICE_ID_EF_ATM_FPGA 0x0000
PCI_DEVICE_ID_EF_ATM_ASIC  macro  include/linux/pci_ids.h  1462  #define PCI_DEVICE_ID_EF_ATM_ASIC 0x0002
PCI_DEVICE_ID_EF_ATM_LANAI2  macro  include/linux/pci_ids.h  1463  #define PCI_DEVICE_ID_EF_ATM_LANAI2 0x0003
PCI_DEVICE_ID_EF_ATM_LANAIHB  macro  include/linux/pci_ids.h  1464  #define PCI_DEVICE_ID_EF_ATM_LANAIHB 0x0005
PCI_VENDOR_ID_IDT  macro  include/linux/pci_ids.h  1466  #define PCI_VENDOR_ID_IDT 0x111d
PCI_DEVICE_ID_IDT_IDT77201  macro  include/linux/pci_ids.h  1467  #define PCI_DEVICE_ID_IDT_IDT77201 0x0001
PCI_VENDOR_ID_FORE  macro  include/linux/pci_ids.h  1469  #define PCI_VENDOR_ID_FORE 0x1127
PCI_DEVICE_ID_FORE_PCA200E  macro  include/linux/pci_ids.h  1470  #define PCI_DEVICE_ID_FORE_PCA200E 0x0300
PCI_VENDOR_ID_PHILIPS  macro  include/linux/pci_ids.h  1472  #define PCI_VENDOR_ID_PHILIPS 0x1131
PCI_DEVICE_ID_PHILIPS_SAA7146  macro  include/linux/pci_ids.h  1473  #define PCI_DEVICE_ID_PHILIPS_SAA7146 0x7146
PCI_DEVICE_ID_PHILIPS_SAA9730  macro  include/linux/pci_ids.h  1474  #define PCI_DEVICE_ID_PHILIPS_SAA9730 0x9730
PCI_VENDOR_ID_EICON  macro  include/linux/pci_ids.h  1476  #define PCI_VENDOR_ID_EICON 0x1133
PCI_DEVICE_ID_EICON_DIVA20  macro  include/linux/pci_ids.h  1477  #define PCI_DEVICE_ID_EICON_DIVA20 0xe002
PCI_DEVICE_ID_EICON_DIVA20_U  macro  include/linux/pci_ids.h  1478  #define PCI_DEVICE_ID_EICON_DIVA20_U 0xe004
PCI_DEVICE_ID_EICON_DIVA201  macro  include/linux/pci_ids.h  1479  #define PCI_DEVICE_ID_EICON_DIVA201 0xe005
PCI_DEVICE_ID_EICON_DIVA202  macro  include/linux/pci_ids.h  1480  #define PCI_DEVICE_ID_EICON_DIVA202 0xe00b
PCI_DEVICE_ID_EICON_MAESTRA  macro  include/linux/pci_ids.h  1481  #define PCI_DEVICE_ID_EICON_MAESTRA 0xe010
PCI_DEVICE_ID_EICON_MAESTRAQ  macro  include/linux/pci_ids.h  1482  #define PCI_DEVICE_ID_EICON_MAESTRAQ 0xe012
PCI_DEVICE_ID_EICON_MAESTRAQ_U  macro  include/linux/pci_ids.h  1483  #define PCI_DEVICE_ID_EICON_MAESTRAQ_U 0xe013
PCI_DEVICE_ID_EICON_MAESTRAP  macro  include/linux/pci_ids.h  1484  #define PCI_DEVICE_ID_EICON_MAESTRAP 0xe014
PCI_VENDOR_ID_CISCO  macro  include/linux/pci_ids.h  1486  #define PCI_VENDOR_ID_CISCO 0x1137
PCI_VENDOR_ID_ZIATECH  macro  include/linux/pci_ids.h  1488  #define PCI_VENDOR_ID_ZIATECH 0x1138
PCI_DEVICE_ID_ZIATECH_5550_HC  macro  include/linux/pci_ids.h  1489  #define PCI_DEVICE_ID_ZIATECH_5550_HC 0x5550
PCI_VENDOR_ID_SYSKONNECT  macro  include/linux/pci_ids.h  1492  #define PCI_VENDOR_ID_SYSKONNECT 0x1148
PCI_DEVICE_ID_SYSKONNECT_TR  macro  include/linux/pci_ids.h  1493  #define PCI_DEVICE_ID_SYSKONNECT_TR 0x4200
PCI_DEVICE_ID_SYSKONNECT_GE  macro  include/linux/pci_ids.h  1494  #define PCI_DEVICE_ID_SYSKONNECT_GE 0x4300
PCI_DEVICE_ID_SYSKONNECT_YU  macro  include/linux/pci_ids.h  1495  #define PCI_DEVICE_ID_SYSKONNECT_YU 0x4320
PCI_DEVICE_ID_SYSKONNECT_9DXX  macro  include/linux/pci_ids.h  1496  #define PCI_DEVICE_ID_SYSKONNECT_9DXX 0x4400
PCI_DEVICE_ID_SYSKONNECT_9MXX  macro  include/linux/pci_ids.h  1497  #define PCI_DEVICE_ID_SYSKONNECT_9MXX 0x4500
PCI_VENDOR_ID_DIGI  macro  include/linux/pci_ids.h  1499  #define PCI_VENDOR_ID_DIGI 0x114f
PCI_DEVICE_ID_DIGI_DF_M_IOM2_E  macro  include/linux/pci_ids.h  1500  #define PCI_DEVICE_ID_DIGI_DF_M_IOM2_E 0x0070
PCI_DEVICE_ID_DIGI_DF_M_E  macro  include/linux/pci_ids.h  1501  #define PCI_DEVICE_ID_DIGI_DF_M_E 0x0071
PCI_DEVICE_ID_DIGI_DF_M_IOM2_A  macro  include/linux/pci_ids.h  1502  #define PCI_DEVICE_ID_DIGI_DF_M_IOM2_A 0x0072
PCI_DEVICE_ID_DIGI_DF_M_A  macro  include/linux/pci_ids.h  1503  #define PCI_DEVICE_ID_DIGI_DF_M_A 0x0073
PCI_DEVICE_ID_DIGI_NEO_8  macro  include/linux/pci_ids.h  1504  #define PCI_DEVICE_ID_DIGI_NEO_8 0x00B1
PCI_DEVICE_ID_NEO_2DB9  macro  include/linux/pci_ids.h  1505  #define PCI_DEVICE_ID_NEO_2DB9 0x00C8
PCI_DEVICE_ID_NEO_2DB9PRI  macro  include/linux/pci_ids.h  1506  #define PCI_DEVICE_ID_NEO_2DB9PRI 0x00C9
PCI_DEVICE_ID_NEO_2RJ45  macro  include/linux/pci_ids.h  1507  #define PCI_DEVICE_ID_NEO_2RJ45 0x00CA
PCI_DEVICE_ID_NEO_2RJ45PRI  macro  include/linux/pci_ids.h  1508  #define PCI_DEVICE_ID_NEO_2RJ45PRI 0x00CB
PCIE_DEVICE_ID_NEO_4_IBM  macro  include/linux/pci_ids.h  1509  #define PCIE_DEVICE_ID_NEO_4_IBM 0x00F4
PCI_VENDOR_ID_XIRCOM  macro  include/linux/pci_ids.h  1511  #define PCI_VENDOR_ID_XIRCOM 0x115d
PCI_DEVICE_ID_XIRCOM_RBM56G  macro  include/linux/pci_ids.h  1512  #define PCI_DEVICE_ID_XIRCOM_RBM56G 0x0101
PCI_DEVICE_ID_XIRCOM_X3201_MDM  macro  include/linux/pci_ids.h  1513  #define PCI_DEVICE_ID_XIRCOM_X3201_MDM 0x0103
PCI_VENDOR_ID_SERVERWORKS  macro  include/linux/pci_ids.h  1515  #define PCI_VENDOR_ID_SERVERWORKS 0x1166
PCI_DEVICE_ID_SERVERWORKS_HE  macro  include/linux/pci_ids.h  1516  #define PCI_DEVICE_ID_SERVERWORKS_HE 0x0008
PCI_DEVICE_ID_SERVERWORKS_LE  macro  include/linux/pci_ids.h  1517  #define PCI_DEVICE_ID_SERVERWORKS_LE 0x0009
PCI_DEVICE_ID_SERVERWORKS_GCNB_LE  macro  include/linux/pci_ids.h  1518  #define PCI_DEVICE_ID_SERVERWORKS_GCNB_LE 0x0017
PCI_DEVICE_ID_SERVERWORKS_HT1000_PXB  macro  include/linux/pci_ids.h  1519  #define PCI_DEVICE_ID_SERVERWORKS_HT1000_PXB 0x0036
PCI_DEVICE_ID_SERVERWORKS_EPB  macro  include/linux/pci_ids.h  1520  #define PCI_DEVICE_ID_SERVERWORKS_EPB 0x0103
PCI_DEVICE_ID_SERVERWORKS_HT2000_PCIE  macro  include/linux/pci_ids.h  1521  #define PCI_DEVICE_ID_SERVERWORKS_HT2000_PCIE 0x0132
PCI_DEVICE_ID_SERVERWORKS_OSB4  macro  include/linux/pci_ids.h  1522  #define PCI_DEVICE_ID_SERVERWORKS_OSB4 0x0200
PCI_DEVICE_ID_SERVERWORKS_CSB5  macro  include/linux/pci_ids.h  1523  #define PCI_DEVICE_ID_SERVERWORKS_CSB5 0x0201
PCI_DEVICE_ID_SERVERWORKS_CSB6  macro  include/linux/pci_ids.h  1524  #define PCI_DEVICE_ID_SERVERWORKS_CSB6 0x0203
PCI_DEVICE_ID_SERVERWORKS_HT1000SB  macro  include/linux/pci_ids.h  1525  #define PCI_DEVICE_ID_SERVERWORKS_HT1000SB 0x0205
PCI_DEVICE_ID_SERVERWORKS_OSB4IDE  macro  include/linux/pci_ids.h  1526  #define PCI_DEVICE_ID_SERVERWORKS_OSB4IDE 0x0211
PCI_DEVICE_ID_SERVERWORKS_CSB5IDE  macro  include/linux/pci_ids.h  1527  #define PCI_DEVICE_ID_SERVERWORKS_CSB5IDE 0x0212
PCI_DEVICE_ID_SERVERWORKS_CSB6IDE  macro  include/linux/pci_ids.h  1528  #define PCI_DEVICE_ID_SERVERWORKS_CSB6IDE 0x0213
PCI_DEVICE_ID_SERVERWORKS_HT1000IDE  macro  include/linux/pci_ids.h  1529  #define PCI_DEVICE_ID_SERVERWORKS_HT1000IDE 0x0214
PCI_DEVICE_ID_SERVERWORKS_CSB6IDE2  macro  include/linux/pci_ids.h  1530  #define PCI_DEVICE_ID_SERVERWORKS_CSB6IDE2 0x0217
PCI_DEVICE_ID_SERVERWORKS_CSB6LPC  macro  include/linux/pci_ids.h  1531  #define PCI_DEVICE_ID_SERVERWORKS_CSB6LPC 0x0227
PCI_DEVICE_ID_SERVERWORKS_HT1100LD  macro  include/linux/pci_ids.h  1532  #define PCI_DEVICE_ID_SERVERWORKS_HT1100LD 0x0408
PCI_VENDOR_ID_SBE  macro  include/linux/pci_ids.h  1534  #define PCI_VENDOR_ID_SBE 0x1176
PCI_DEVICE_ID_SBE_WANXL100  macro  include/linux/pci_ids.h  1535  #define PCI_DEVICE_ID_SBE_WANXL100 0x0301
PCI_DEVICE_ID_SBE_WANXL200  macro  include/linux/pci_ids.h  1536  #define PCI_DEVICE_ID_SBE_WANXL200 0x0302
PCI_DEVICE_ID_SBE_WANXL400  macro  include/linux/pci_ids.h  1537  #define PCI_DEVICE_ID_SBE_WANXL400 0x0104
PCI_SUBDEVICE_ID_SBE_T3E3  macro  include/linux/pci_ids.h  1538  #define PCI_SUBDEVICE_ID_SBE_T3E3 0x0009
PCI_SUBDEVICE_ID_SBE_2T3E3_P0  macro  include/linux/pci_ids.h  1539  #define PCI_SUBDEVICE_ID_SBE_2T3E3_P0 0x0901
PCI_SUBDEVICE_ID_SBE_2T3E3_P1  macro  include/linux/pci_ids.h  1540  #define PCI_SUBDEVICE_ID_SBE_2T3E3_P1 0x0902
PCI_VENDOR_ID_TOSHIBA  macro  include/linux/pci_ids.h  1542  #define PCI_VENDOR_ID_TOSHIBA 0x1179
PCI_DEVICE_ID_TOSHIBA_PICCOLO_1  macro  include/linux/pci_ids.h  1543  #define PCI_DEVICE_ID_TOSHIBA_PICCOLO_1 0x0101
PCI_DEVICE_ID_TOSHIBA_PICCOLO_2  macro  include/linux/pci_ids.h  1544  #define PCI_DEVICE_ID_TOSHIBA_PICCOLO_2 0x0102
PCI_DEVICE_ID_TOSHIBA_PICCOLO_3  macro  include/linux/pci_ids.h  1545  #define PCI_DEVICE_ID_TOSHIBA_PICCOLO_3 0x0103
PCI_DEVICE_ID_TOSHIBA_PICCOLO_5  macro  include/linux/pci_ids.h  1546  #define PCI_DEVICE_ID_TOSHIBA_PICCOLO_5 0x0105
PCI_DEVICE_ID_TOSHIBA_TOPIC95  macro  include/linux/pci_ids.h  1547  #define PCI_DEVICE_ID_TOSHIBA_TOPIC95 0x060a
PCI_DEVICE_ID_TOSHIBA_TOPIC97  macro  include/linux/pci_ids.h  1548  #define PCI_DEVICE_ID_TOSHIBA_TOPIC97 0x060f
PCI_DEVICE_ID_TOSHIBA_TOPIC100  macro  include/linux/pci_ids.h  1549  #define PCI_DEVICE_ID_TOSHIBA_TOPIC100 0x0617
PCI_VENDOR_ID_TOSHIBA_2  macro  include/linux/pci_ids.h  1551  #define PCI_VENDOR_ID_TOSHIBA_2 0x102f
PCI_DEVICE_ID_TOSHIBA_TC35815CF  macro  include/linux/pci_ids.h  1552  #define PCI_DEVICE_ID_TOSHIBA_TC35815CF 0x0030
PCI_DEVICE_ID_TOSHIBA_TC35815_NWU  macro  include/linux/pci_ids.h  1553  #define PCI_DEVICE_ID_TOSHIBA_TC35815_NWU 0x0031
PCI_DEVICE_ID_TOSHIBA_TC35815_TX4939  macro  include/linux/pci_ids.h  1554  #define PCI_DEVICE_ID_TOSHIBA_TC35815_TX4939 0x0032
PCI_DEVICE_ID_TOSHIBA_TC86C001_IDE  macro  include/linux/pci_ids.h  1555  #define PCI_DEVICE_ID_TOSHIBA_TC86C001_IDE 0x0105
PCI_DEVICE_ID_TOSHIBA_TC86C001_MISC  macro  include/linux/pci_ids.h  1556  #define PCI_DEVICE_ID_TOSHIBA_TC86C001_MISC 0x0108
PCI_DEVICE_ID_TOSHIBA_SPIDER_NET  macro  include/linux/pci_ids.h  1557  #define PCI_DEVICE_ID_TOSHIBA_SPIDER_NET 0x01b3
PCI_VENDOR_ID_ATTO  macro  include/linux/pci_ids.h  1559  #define PCI_VENDOR_ID_ATTO 0x117c
PCI_VENDOR_ID_RICOH  macro  include/linux/pci_ids.h  1561  #define PCI_VENDOR_ID_RICOH 0x1180
PCI_DEVICE_ID_RICOH_RL5C465  macro  include/linux/pci_ids.h  1562  #define PCI_DEVICE_ID_RICOH_RL5C465 0x0465
PCI_DEVICE_ID_RICOH_RL5C466  macro  include/linux/pci_ids.h  1563  #define PCI_DEVICE_ID_RICOH_RL5C466 0x0466
PCI_DEVICE_ID_RICOH_RL5C475  macro  include/linux/pci_ids.h  1564  #define PCI_DEVICE_ID_RICOH_RL5C475 0x0475
PCI_DEVICE_ID_RICOH_RL5C476  macro  include/linux/pci_ids.h  1565  #define PCI_DEVICE_ID_RICOH_RL5C476 0x0476
PCI_DEVICE_ID_RICOH_RL5C478  macro  include/linux/pci_ids.h  1566  #define PCI_DEVICE_ID_RICOH_RL5C478 0x0478
PCI_DEVICE_ID_RICOH_R5C822  macro  include/linux/pci_ids.h  1567  #define PCI_DEVICE_ID_RICOH_R5C822 0x0822
PCI_DEVICE_ID_RICOH_R5CE823  macro  include/linux/pci_ids.h  1568  #define PCI_DEVICE_ID_RICOH_R5CE823 0xe823
PCI_DEVICE_ID_RICOH_R5C832  macro  include/linux/pci_ids.h  1569  #define PCI_DEVICE_ID_RICOH_R5C832 0x0832
PCI_DEVICE_ID_RICOH_R5C843  macro  include/linux/pci_ids.h  1570  #define PCI_DEVICE_ID_RICOH_R5C843 0x0843
PCI_VENDOR_ID_DLINK  macro  include/linux/pci_ids.h  1572  #define PCI_VENDOR_ID_DLINK 0x1186
PCI_DEVICE_ID_DLINK_DGE510T  macro  include/linux/pci_ids.h  1573  #define PCI_DEVICE_ID_DLINK_DGE510T 0x4c00
PCI_VENDOR_ID_ARTOP  macro  include/linux/pci_ids.h  1575  #define PCI_VENDOR_ID_ARTOP 0x1191
PCI_DEVICE_ID_ARTOP_ATP850UF  macro  include/linux/pci_ids.h  1576  #define PCI_DEVICE_ID_ARTOP_ATP850UF 0x0005
PCI_DEVICE_ID_ARTOP_ATP860  macro  include/linux/pci_ids.h  1577  #define PCI_DEVICE_ID_ARTOP_ATP860 0x0006
PCI_DEVICE_ID_ARTOP_ATP860R  macro  include/linux/pci_ids.h  1578  #define PCI_DEVICE_ID_ARTOP_ATP860R 0x0007
PCI_DEVICE_ID_ARTOP_ATP865  macro  include/linux/pci_ids.h  1579  #define PCI_DEVICE_ID_ARTOP_ATP865 0x0008
PCI_DEVICE_ID_ARTOP_ATP865R  macro  include/linux/pci_ids.h  1580  #define PCI_DEVICE_ID_ARTOP_ATP865R 0x0009
PCI_DEVICE_ID_ARTOP_ATP867A  macro  include/linux/pci_ids.h  1581  #define PCI_DEVICE_ID_ARTOP_ATP867A 0x000A
PCI_DEVICE_ID_ARTOP_ATP867B  macro  include/linux/pci_ids.h  1582  #define PCI_DEVICE_ID_ARTOP_ATP867B 0x000B
PCI_DEVICE_ID_ARTOP_AEC7610  macro  include/linux/pci_ids.h  1583  #define PCI_DEVICE_ID_ARTOP_AEC7610 0x8002
PCI_DEVICE_ID_ARTOP_AEC7612UW  macro  include/linux/pci_ids.h  1584  #define PCI_DEVICE_ID_ARTOP_AEC7612UW 0x8010
PCI_DEVICE_ID_ARTOP_AEC7612U  macro  include/linux/pci_ids.h  1585  #define PCI_DEVICE_ID_ARTOP_AEC7612U 0x8020
PCI_DEVICE_ID_ARTOP_AEC7612S  macro  include/linux/pci_ids.h  1586  #define PCI_DEVICE_ID_ARTOP_AEC7612S 0x8030
PCI_DEVICE_ID_ARTOP_AEC7612D  macro  include/linux/pci_ids.h  1587  #define PCI_DEVICE_ID_ARTOP_AEC7612D 0x8040
PCI_DEVICE_ID_ARTOP_AEC7612SUW  macro  include/linux/pci_ids.h  1588  #define PCI_DEVICE_ID_ARTOP_AEC7612SUW 0x8050
PCI_DEVICE_ID_ARTOP_8060  macro  include/linux/pci_ids.h  1589  #define PCI_DEVICE_ID_ARTOP_8060 0x8060
PCI_VENDOR_ID_ZEITNET  macro  include/linux/pci_ids.h  1591  #define PCI_VENDOR_ID_ZEITNET 0x1193
PCI_DEVICE_ID_ZEITNET_1221  macro  include/linux/pci_ids.h  1592  #define PCI_DEVICE_ID_ZEITNET_1221 0x0001
PCI_DEVICE_ID_ZEITNET_1225  macro  include/linux/pci_ids.h  1593  #define PCI_DEVICE_ID_ZEITNET_1225 0x0002
PCI_VENDOR_ID_FUJITSU_ME  macro  include/linux/pci_ids.h  1595  #define PCI_VENDOR_ID_FUJITSU_ME 0x119e
PCI_DEVICE_ID_FUJITSU_FS155  macro  include/linux/pci_ids.h  1596  #define PCI_DEVICE_ID_FUJITSU_FS155 0x0001
PCI_DEVICE_ID_FUJITSU_FS50  macro  include/linux/pci_ids.h  1597  #define PCI_DEVICE_ID_FUJITSU_FS50 0x0003
PCI_SUBVENDOR_ID_KEYSPAN  macro  include/linux/pci_ids.h  1599  #define PCI_SUBVENDOR_ID_KEYSPAN 0x11a9
PCI_SUBDEVICE_ID_KEYSPAN_SX2  macro  include/linux/pci_ids.h  1600  #define PCI_SUBDEVICE_ID_KEYSPAN_SX2 0x5334
PCI_VENDOR_ID_MARVELL  macro  include/linux/pci_ids.h  1602  #define PCI_VENDOR_ID_MARVELL 0x11ab
PCI_DEVICE_ID_MARVELL_GT64111  macro  include/linux/pci_ids.h  1603  #define PCI_DEVICE_ID_MARVELL_GT64111 0x4146
PCI_DEVICE_ID_MARVELL_GT64260  macro  include/linux/pci_ids.h  1604  #define PCI_DEVICE_ID_MARVELL_GT64260 0x6430
PCI_DEVICE_ID_MARVELL_MV64360  macro  include/linux/pci_ids.h  1605  #define PCI_DEVICE_ID_MARVELL_MV64360 0x6460
PCI_DEVICE_ID_MARVELL_MV64460  macro  include/linux/pci_ids.h  1606  #define PCI_DEVICE_ID_MARVELL_MV64460 0x6480
PCI_DEVICE_ID_MARVELL_88ALP01_NAND  macro  include/linux/pci_ids.h  1607  #define PCI_DEVICE_ID_MARVELL_88ALP01_NAND 0x4100
PCI_DEVICE_ID_MARVELL_88ALP01_SD  macro  include/linux/pci_ids.h  1608  #define PCI_DEVICE_ID_MARVELL_88ALP01_SD 0x4101
PCI_DEVICE_ID_MARVELL_88ALP01_CCIC  macro  include/linux/pci_ids.h  1609  #define PCI_DEVICE_ID_MARVELL_88ALP01_CCIC 0x4102
PCI_VENDOR_ID_V3  macro  include/linux/pci_ids.h  1611  #define PCI_VENDOR_ID_V3 0x11b0
PCI_DEVICE_ID_V3_V960  macro  include/linux/pci_ids.h  1612  #define PCI_DEVICE_ID_V3_V960 0x0001
PCI_DEVICE_ID_V3_V351  macro  include/linux/pci_ids.h  1613  #define PCI_DEVICE_ID_V3_V351 0x0002
PCI_VENDOR_ID_ATT  macro  include/linux/pci_ids.h  1615  #define PCI_VENDOR_ID_ATT 0x11c1
PCI_DEVICE_ID_ATT_VENUS_MODEM  macro  include/linux/pci_ids.h  1616  #define PCI_DEVICE_ID_ATT_VENUS_MODEM 0x480
PCI_VENDOR_ID_SPECIALIX  macro  include/linux/pci_ids.h  1618  #define PCI_VENDOR_ID_SPECIALIX 0x11cb
PCI_DEVICE_ID_SPECIALIX_IO8  macro  include/linux/pci_ids.h  1619  #define PCI_DEVICE_ID_SPECIALIX_IO8 0x2000
PCI_DEVICE_ID_SPECIALIX_RIO  macro  include/linux/pci_ids.h  1620  #define PCI_DEVICE_ID_SPECIALIX_RIO 0x8000
PCI_SUBDEVICE_ID_SPECIALIX_SPEED4  macro  include/linux/pci_ids.h  1621  #define PCI_SUBDEVICE_ID_SPECIALIX_SPEED4 0xa004
PCI_VENDOR_ID_ANALOG_DEVICES  macro  include/linux/pci_ids.h  1623  #define PCI_VENDOR_ID_ANALOG_DEVICES 0x11d4
PCI_DEVICE_ID_AD1889JS  macro  include/linux/pci_ids.h  1624  #define PCI_DEVICE_ID_AD1889JS 0x1889
PCI_DEVICE_ID_SEGA_BBA  macro  include/linux/pci_ids.h  1626  #define PCI_DEVICE_ID_SEGA_BBA 0x1234
PCI_VENDOR_ID_ZORAN  macro  include/linux/pci_ids.h  1628  #define PCI_VENDOR_ID_ZORAN 0x11de
PCI_DEVICE_ID_ZORAN_36057  macro  include/linux/pci_ids.h  1629  #define PCI_DEVICE_ID_ZORAN_36057 0x6057
PCI_DEVICE_ID_ZORAN_36120  macro  include/linux/pci_ids.h  1630  #define PCI_DEVICE_ID_ZORAN_36120 0x6120
PCI_VENDOR_ID_COMPEX  macro  include/linux/pci_ids.h  1632  #define PCI_VENDOR_ID_COMPEX 0x11f6
PCI_DEVICE_ID_COMPEX_ENET100VG4  macro  include/linux/pci_ids.h  1633  #define PCI_DEVICE_ID_COMPEX_ENET100VG4 0x0112
PCI_VENDOR_ID_PMC_Sierra  macro  include/linux/pci_ids.h  1635  #define PCI_VENDOR_ID_PMC_Sierra 0x11f8
PCI_VENDOR_ID_RP  macro  include/linux/pci_ids.h  1637  #define PCI_VENDOR_ID_RP 0x11fe
PCI_DEVICE_ID_RP32INTF  macro  include/linux/pci_ids.h  1638  #define PCI_DEVICE_ID_RP32INTF 0x0001
PCI_DEVICE_ID_RP8INTF  macro  include/linux/pci_ids.h  1639  #define PCI_DEVICE_ID_RP8INTF 0x0002
PCI_DEVICE_ID_RP16INTF  macro  include/linux/pci_ids.h  1640  #define PCI_DEVICE_ID_RP16INTF 0x0003
PCI_DEVICE_ID_RP4QUAD  macro  include/linux/pci_ids.h  1641  #define PCI_DEVICE_ID_RP4QUAD 0x0004
PCI_DEVICE_ID_RP8OCTA  macro  include/linux/pci_ids.h  1642  #define PCI_DEVICE_ID_RP8OCTA 0x0005
PCI_DEVICE_ID_RP8J  macro  include/linux/pci_ids.h  1643  #define PCI_DEVICE_ID_RP8J 0x0006
PCI_DEVICE_ID_RP4J  macro  include/linux/pci_ids.h  1644  #define PCI_DEVICE_ID_RP4J 0x0007
PCI_DEVICE_ID_RP8SNI  macro  include/linux/pci_ids.h  1645  #define PCI_DEVICE_ID_RP8SNI 0x0008
PCI_DEVICE_ID_RP16SNI  macro  include/linux/pci_ids.h  1646  #define PCI_DEVICE_ID_RP16SNI 0x0009
PCI_DEVICE_ID_RPP4  macro  include/linux/pci_ids.h  1647  #define PCI_DEVICE_ID_RPP4 0x000A
PCI_DEVICE_ID_RPP8  macro  include/linux/pci_ids.h  1648  #define PCI_DEVICE_ID_RPP8 0x000B
PCI_DEVICE_ID_RP4M  macro  include/linux/pci_ids.h  1649  #define PCI_DEVICE_ID_RP4M 0x000D
PCI_DEVICE_ID_RP2_232  macro  include/linux/pci_ids.h  1650  #define PCI_DEVICE_ID_RP2_232 0x000E
PCI_DEVICE_ID_RP2_422  macro  include/linux/pci_ids.h  1651  #define PCI_DEVICE_ID_RP2_422 0x000F
PCI_DEVICE_ID_URP32INTF  macro  include/linux/pci_ids.h  1652  #define PCI_DEVICE_ID_URP32INTF 0x0801
PCI_DEVICE_ID_URP8INTF  macro  include/linux/pci_ids.h  1653  #define PCI_DEVICE_ID_URP8INTF 0x0802
PCI_DEVICE_ID_URP16INTF  macro  include/linux/pci_ids.h  1654  #define PCI_DEVICE_ID_URP16INTF 0x0803
PCI_DEVICE_ID_URP8OCTA  macro  include/linux/pci_ids.h  1655  #define PCI_DEVICE_ID_URP8OCTA 0x0805
PCI_DEVICE_ID_UPCI_RM3_8PORT  macro  include/linux/pci_ids.h  1656  #define PCI_DEVICE_ID_UPCI_RM3_8PORT 0x080C
PCI_DEVICE_ID_UPCI_RM3_4PORT  macro  include/linux/pci_ids.h  1657  #define PCI_DEVICE_ID_UPCI_RM3_4PORT 0x080D
PCI_DEVICE_ID_CRP16INTF  macro  include/linux/pci_ids.h  1658  #define PCI_DEVICE_ID_CRP16INTF 0x0903
PCI_VENDOR_ID_CYCLADES  macro  include/linux/pci_ids.h  1660  #define PCI_VENDOR_ID_CYCLADES 0x120e
PCI_DEVICE_ID_CYCLOM_Y_Lo  macro  include/linux/pci_ids.h  1661  #define PCI_DEVICE_ID_CYCLOM_Y_Lo 0x0100
PCI_DEVICE_ID_CYCLOM_Y_Hi  macro  include/linux/pci_ids.h  1662  #define PCI_DEVICE_ID_CYCLOM_Y_Hi 0x0101
PCI_DEVICE_ID_CYCLOM_4Y_Lo  macro  include/linux/pci_ids.h  1663  #define PCI_DEVICE_ID_CYCLOM_4Y_Lo 0x0102
PCI_DEVICE_ID_CYCLOM_4Y_Hi  macro  include/linux/pci_ids.h  1664  #define PCI_DEVICE_ID_CYCLOM_4Y_Hi 0x0103
PCI_DEVICE_ID_CYCLOM_8Y_Lo  macro  include/linux/pci_ids.h  1665  #define PCI_DEVICE_ID_CYCLOM_8Y_Lo 0x0104
PCI_DEVICE_ID_CYCLOM_8Y_Hi  macro  include/linux/pci_ids.h  1666  #define PCI_DEVICE_ID_CYCLOM_8Y_Hi 0x0105
PCI_DEVICE_ID_CYCLOM_Z_Lo  macro  include/linux/pci_ids.h  1667  #define PCI_DEVICE_ID_CYCLOM_Z_Lo 0x0200
PCI_DEVICE_ID_CYCLOM_Z_Hi  macro  include/linux/pci_ids.h  1668  #define PCI_DEVICE_ID_CYCLOM_Z_Hi 0x0201
PCI_DEVICE_ID_PC300_RX_2  macro  include/linux/pci_ids.h  1669  #define PCI_DEVICE_ID_PC300_RX_2 0x0300
PCI_DEVICE_ID_PC300_RX_1  macro  include/linux/pci_ids.h  1670  #define PCI_DEVICE_ID_PC300_RX_1 0x0301
PCI_DEVICE_ID_PC300_TE_2  macro  include/linux/pci_ids.h  1671  #define PCI_DEVICE_ID_PC300_TE_2 0x0310
PCI_DEVICE_ID_PC300_TE_1  macro  include/linux/pci_ids.h  1672  #define PCI_DEVICE_ID_PC300_TE_1 0x0311
PCI_DEVICE_ID_PC300_TE_M_2  macro  include/linux/pci_ids.h  1673  #define PCI_DEVICE_ID_PC300_TE_M_2 0x0320
PCI_DEVICE_ID_PC300_TE_M_1  macro  include/linux/pci_ids.h  1674  #define PCI_DEVICE_ID_PC300_TE_M_1 0x0321
PCI_VENDOR_ID_ESSENTIAL  macro  include/linux/pci_ids.h  1676  #define PCI_VENDOR_ID_ESSENTIAL 0x120f
PCI_DEVICE_ID_ESSENTIAL_ROADRUNNER  macro  include/linux/pci_ids.h  1677  #define PCI_DEVICE_ID_ESSENTIAL_ROADRUNNER 0x0001
PCI_VENDOR_ID_O2  macro  include/linux/pci_ids.h  1679  #define PCI_VENDOR_ID_O2 0x1217
PCI_DEVICE_ID_O2_6729  macro  include/linux/pci_ids.h  1680  #define PCI_DEVICE_ID_O2_6729 0x6729
PCI_DEVICE_ID_O2_6730  macro  include/linux/pci_ids.h  1681  #define PCI_DEVICE_ID_O2_6730 0x673a
PCI_DEVICE_ID_O2_6832  macro  include/linux/pci_ids.h  1682  #define PCI_DEVICE_ID_O2_6832 0x6832
PCI_DEVICE_ID_O2_6836  macro  include/linux/pci_ids.h  1683  #define PCI_DEVICE_ID_O2_6836 0x6836
PCI_DEVICE_ID_O2_6812  macro  include/linux/pci_ids.h  1684  #define PCI_DEVICE_ID_O2_6812 0x6872
PCI_DEVICE_ID_O2_6933  macro  include/linux/pci_ids.h  1685  #define PCI_DEVICE_ID_O2_6933 0x6933
PCI_DEVICE_ID_O2_8120  macro  include/linux/pci_ids.h  1686  #define PCI_DEVICE_ID_O2_8120 0x8120
PCI_DEVICE_ID_O2_8220  macro  include/linux/pci_ids.h  1687  #define PCI_DEVICE_ID_O2_8220 0x8220
PCI_DEVICE_ID_O2_8221  macro  include/linux/pci_ids.h  1688  #define PCI_DEVICE_ID_O2_8221 0x8221
PCI_DEVICE_ID_O2_8320  macro  include/linux/pci_ids.h  1689  #define PCI_DEVICE_ID_O2_8320 0x8320
PCI_DEVICE_ID_O2_8321  macro  include/linux/pci_ids.h  1690  #define PCI_DEVICE_ID_O2_8321 0x8321
PCI_VENDOR_ID_3DFX  macro  include/linux/pci_ids.h  1692  #define PCI_VENDOR_ID_3DFX 0x121a
PCI_DEVICE_ID_3DFX_VOODOO  macro  include/linux/pci_ids.h  1693  #define PCI_DEVICE_ID_3DFX_VOODOO 0x0001
PCI_DEVICE_ID_3DFX_VOODOO2  macro  include/linux/pci_ids.h  1694  #define PCI_DEVICE_ID_3DFX_VOODOO2 0x0002
PCI_DEVICE_ID_3DFX_BANSHEE  macro  include/linux/pci_ids.h  1695  #define PCI_DEVICE_ID_3DFX_BANSHEE 0x0003
PCI_DEVICE_ID_3DFX_VOODOO3  macro  include/linux/pci_ids.h  1696  #define PCI_DEVICE_ID_3DFX_VOODOO3 0x0005
PCI_DEVICE_ID_3DFX_VOODOO5  macro  include/linux/pci_ids.h  1697  #define PCI_DEVICE_ID_3DFX_VOODOO5 0x0009
PCI_VENDOR_ID_AVM  macro  include/linux/pci_ids.h  1699  #define PCI_VENDOR_ID_AVM 0x1244
PCI_DEVICE_ID_AVM_B1  macro  include/linux/pci_ids.h  1700  #define PCI_DEVICE_ID_AVM_B1 0x0700
PCI_DEVICE_ID_AVM_C4  macro  include/linux/pci_ids.h  1701  #define PCI_DEVICE_ID_AVM_C4 0x0800
PCI_DEVICE_ID_AVM_A1  macro  include/linux/pci_ids.h  1702  #define PCI_DEVICE_ID_AVM_A1 0x0a00
PCI_DEVICE_ID_AVM_A1_V2  macro  include/linux/pci_ids.h  1703  #define PCI_DEVICE_ID_AVM_A1_V2 0x0e00
PCI_DEVICE_ID_AVM_C2  macro  include/linux/pci_ids.h  1704  #define PCI_DEVICE_ID_AVM_C2 0x1100
PCI_DEVICE_ID_AVM_T1  macro  include/linux/pci_ids.h  1705  #define PCI_DEVICE_ID_AVM_T1 0x1200
PCI_VENDOR_ID_STALLION  macro  include/linux/pci_ids.h  1707  #define PCI_VENDOR_ID_STALLION 0x124d
PCI_VENDOR_ID_AT  macro  include/linux/pci_ids.h  1710  #define PCI_VENDOR_ID_AT 0x1259
PCI_SUBDEVICE_ID_AT_2700FX  macro  include/linux/pci_ids.h  1711  #define PCI_SUBDEVICE_ID_AT_2700FX 0x2701
PCI_SUBDEVICE_ID_AT_2701FX  macro  include/linux/pci_ids.h  1712  #define PCI_SUBDEVICE_ID_AT_2701FX 0x2703
PCI_VENDOR_ID_ESS  macro  include/linux/pci_ids.h  1714  #define PCI_VENDOR_ID_ESS 0x125d
PCI_DEVICE_ID_ESS_ESS1968  macro  include/linux/pci_ids.h  1715  #define PCI_DEVICE_ID_ESS_ESS1968 0x1968
PCI_DEVICE_ID_ESS_ESS1978  macro  include/linux/pci_ids.h  1716  #define PCI_DEVICE_ID_ESS_ESS1978 0x1978
PCI_DEVICE_ID_ESS_ALLEGRO_1  macro  include/linux/pci_ids.h  1717  #define PCI_DEVICE_ID_ESS_ALLEGRO_1 0x1988
PCI_DEVICE_ID_ESS_ALLEGRO  macro  include/linux/pci_ids.h  1718  #define PCI_DEVICE_ID_ESS_ALLEGRO 0x1989
PCI_DEVICE_ID_ESS_CANYON3D_2LE  macro  include/linux/pci_ids.h  1719  #define PCI_DEVICE_ID_ESS_CANYON3D_2LE 0x1990
PCI_DEVICE_ID_ESS_CANYON3D_2  macro  include/linux/pci_ids.h  1720  #define PCI_DEVICE_ID_ESS_CANYON3D_2 0x1992
PCI_DEVICE_ID_ESS_MAESTRO3  macro  include/linux/pci_ids.h  1721  #define PCI_DEVICE_ID_ESS_MAESTRO3 0x1998
PCI_DEVICE_ID_ESS_MAESTRO3_1  macro  include/linux/pci_ids.h  1722  #define PCI_DEVICE_ID_ESS_MAESTRO3_1 0x1999
PCI_DEVICE_ID_ESS_MAESTRO3_HW  macro  include/linux/pci_ids.h  1723  #define PCI_DEVICE_ID_ESS_MAESTRO3_HW 0x199a
PCI_DEVICE_ID_ESS_MAESTRO3_2  macro  include/linux/pci_ids.h  1724  #define PCI_DEVICE_ID_ESS_MAESTRO3_2 0x199b
PCI_VENDOR_ID_SATSAGEM  macro  include/linux/pci_ids.h  1726  #define PCI_VENDOR_ID_SATSAGEM 0x1267
PCI_DEVICE_ID_SATSAGEM_NICCY  macro  include/linux/pci_ids.h  1727  #define PCI_DEVICE_ID_SATSAGEM_NICCY 0x1016
PCI_VENDOR_ID_ENSONIQ  macro  include/linux/pci_ids.h  1729  #define PCI_VENDOR_ID_ENSONIQ 0x1274
PCI_DEVICE_ID_ENSONIQ_CT5880  macro  include/linux/pci_ids.h  1730  #define PCI_DEVICE_ID_ENSONIQ_CT5880 0x5880
PCI_DEVICE_ID_ENSONIQ_ES1370  macro  include/linux/pci_ids.h  1731  #define PCI_DEVICE_ID_ENSONIQ_ES1370 0x5000
PCI_DEVICE_ID_ENSONIQ_ES1371  macro  include/linux/pci_ids.h  1732  #define PCI_DEVICE_ID_ENSONIQ_ES1371 0x1371
PCI_VENDOR_ID_TRANSMETA  macro  include/linux/pci_ids.h  1734  #define PCI_VENDOR_ID_TRANSMETA 0x1279
PCI_DEVICE_ID_EFFICEON  macro  include/linux/pci_ids.h  1735  #define PCI_DEVICE_ID_EFFICEON 0x0060
PCI_VENDOR_ID_ROCKWELL  macro  include/linux/pci_ids.h  1737  #define PCI_VENDOR_ID_ROCKWELL 0x127A
PCI_VENDOR_ID_ITE  macro  include/linux/pci_ids.h  1739  #define PCI_VENDOR_ID_ITE 0x1283
PCI_DEVICE_ID_ITE_8172  macro  include/linux/pci_ids.h  1740  #define PCI_DEVICE_ID_ITE_8172 0x8172
PCI_DEVICE_ID_ITE_8211  macro  include/linux/pci_ids.h  1741  #define PCI_DEVICE_ID_ITE_8211 0x8211
PCI_DEVICE_ID_ITE_8212  macro  include/linux/pci_ids.h  1742  #define PCI_DEVICE_ID_ITE_8212 0x8212
PCI_DEVICE_ID_ITE_8213  macro  include/linux/pci_ids.h  1743  #define PCI_DEVICE_ID_ITE_8213 0x8213
PCI_DEVICE_ID_ITE_8152  macro  include/linux/pci_ids.h  1744  #define PCI_DEVICE_ID_ITE_8152 0x8152
PCI_DEVICE_ID_ITE_8872  macro  include/linux/pci_ids.h  1745  #define PCI_DEVICE_ID_ITE_8872 0x8872
PCI_DEVICE_ID_ITE_IT8330G_0  macro  include/linux/pci_ids.h  1746  #define PCI_DEVICE_ID_ITE_IT8330G_0 0xe886
PCI_DEVICE_ID_ESS_ESS0100  macro  include/linux/pci_ids.h  1749  #define PCI_DEVICE_ID_ESS_ESS0100 0x0100
PCI_VENDOR_ID_ALTEON  macro  include/linux/pci_ids.h  1751  #define PCI_VENDOR_ID_ALTEON 0x12ae
PCI_SUBVENDOR_ID_CONNECT_TECH  macro  include/linux/pci_ids.h  1753  #define PCI_SUBVENDOR_ID_CONNECT_TECH 0x12c4
PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_232  macro  include/linux/pci_ids.h  1754  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_232 0x0001
PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_232  macro  include/linux/pci_ids.h  1755  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_232 0x0002
PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_232  macro  include/linux/pci_ids.h  1756  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_232 0x0003
PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485  macro  include/linux/pci_ids.h  1757  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485 0x0004
PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_4_4  macro  include/linux/pci_ids.h  1758  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_4_4 0x0005
PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485  macro  include/linux/pci_ids.h  1759  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485 0x0006
PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485_2_2  macro  include/linux/pci_ids.h  1760  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485_2_2 0x0007
PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_485  macro  include/linux/pci_ids.h  1761  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_485 0x0008
PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_2_6  macro  include/linux/pci_ids.h  1762  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_2_6 0x0009
PCI_SUBDEVICE_ID_CONNECT_TECH_BH081101V1  macro  include/linux/pci_ids.h  1763  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH081101V1 0x000A
PCI_SUBDEVICE_ID_CONNECT_TECH_BH041101V1  macro  include/linux/pci_ids.h  1764  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH041101V1 0x000B
PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_20MHZ  macro  include/linux/pci_ids.h  1765  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_20MHZ 0x000C
PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_PTM  macro  include/linux/pci_ids.h  1766  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_PTM 0x000D
PCI_SUBDEVICE_ID_CONNECT_TECH_NT960PCI  macro  include/linux/pci_ids.h  1767  #define PCI_SUBDEVICE_ID_CONNECT_TECH_NT960PCI 0x0100
PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_2  macro  include/linux/pci_ids.h  1768  #define PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_2 0x0201
PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_4  macro  include/linux/pci_ids.h  1769  #define PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_4 0x0202
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_232  macro  include/linux/pci_ids.h  1770  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_232 0x0300
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_232  macro  include/linux/pci_ids.h  1771  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_232 0x0301
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_232  macro  include/linux/pci_ids.h  1772  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_232 0x0302
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_1_1  macro  include/linux/pci_ids.h  1773  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_1_1 0x0310
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_2  macro  include/linux/pci_ids.h  1774  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_2 0x0311
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_4  macro  include/linux/pci_ids.h  1775  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_4 0x0312
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2  macro  include/linux/pci_ids.h  1776  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2 0x0320
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4  macro  include/linux/pci_ids.h  1777  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4 0x0321
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8  macro  include/linux/pci_ids.h  1778  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8 0x0322
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_485  macro  include/linux/pci_ids.h  1779  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_485 0x0330
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_485  macro  include/linux/pci_ids.h  1780  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_485 0x0331
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_485  macro  include/linux/pci_ids.h  1781  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_485 0x0332
PCI_VENDOR_ID_NVIDIA_SGS  macro  include/linux/pci_ids.h  1783  #define PCI_VENDOR_ID_NVIDIA_SGS 0x12d2
PCI_DEVICE_ID_NVIDIA_SGS_RIVA128  macro  include/linux/pci_ids.h  1784  #define PCI_DEVICE_ID_NVIDIA_SGS_RIVA128 0x0018
PCI_SUBVENDOR_ID_CHASE_PCIFAST  macro  include/linux/pci_ids.h  1786  #define PCI_SUBVENDOR_ID_CHASE_PCIFAST 0x12E0
PCI_SUBDEVICE_ID_CHASE_PCIFAST4  macro  include/linux/pci_ids.h  1787  #define PCI_SUBDEVICE_ID_CHASE_PCIFAST4 0x0031
PCI_SUBDEVICE_ID_CHASE_PCIFAST8  macro  include/linux/pci_ids.h  1788  #define PCI_SUBDEVICE_ID_CHASE_PCIFAST8 0x0021
PCI_SUBDEVICE_ID_CHASE_PCIFAST16  macro  include/linux/pci_ids.h  1789  #define PCI_SUBDEVICE_ID_CHASE_PCIFAST16 0x0011
PCI_SUBDEVICE_ID_CHASE_PCIFAST16FMC  macro  include/linux/pci_ids.h  1790  #define PCI_SUBDEVICE_ID_CHASE_PCIFAST16FMC 0x0041
PCI_SUBVENDOR_ID_CHASE_PCIRAS  macro  include/linux/pci_ids.h  1791  #define PCI_SUBVENDOR_ID_CHASE_PCIRAS 0x124D
PCI_SUBDEVICE_ID_CHASE_PCIRAS4  macro  include/linux/pci_ids.h  1792  #define PCI_SUBDEVICE_ID_CHASE_PCIRAS4 0xF001
PCI_SUBDEVICE_ID_CHASE_PCIRAS8  macro  include/linux/pci_ids.h  1793  #define PCI_SUBDEVICE_ID_CHASE_PCIRAS8 0xF010
PCI_VENDOR_ID_AUREAL  macro  include/linux/pci_ids.h  1795  #define PCI_VENDOR_ID_AUREAL 0x12eb
PCI_DEVICE_ID_AUREAL_VORTEX_1  macro  include/linux/pci_ids.h  1796  #define PCI_DEVICE_ID_AUREAL_VORTEX_1 0x0001
PCI_DEVICE_ID_AUREAL_VORTEX_2  macro  include/linux/pci_ids.h  1797  #define PCI_DEVICE_ID_AUREAL_VORTEX_2 0x0002
PCI_DEVICE_ID_AUREAL_ADVANTAGE  macro  include/linux/pci_ids.h  1798  #define PCI_DEVICE_ID_AUREAL_ADVANTAGE 0x0003
PCI_VENDOR_ID_ELECTRONICDESIGNGMBH  macro  include/linux/pci_ids.h  1800  #define PCI_VENDOR_ID_ELECTRONICDESIGNGMBH 0x12f8
PCI_DEVICE_ID_LML_33R10  macro  include/linux/pci_ids.h  1801  #define PCI_DEVICE_ID_LML_33R10 0x8a02
PCI_VENDOR_ID_ESDGMBH  macro  include/linux/pci_ids.h  1803  #define PCI_VENDOR_ID_ESDGMBH 0x12fe
PCI_DEVICE_ID_ESDGMBH_CPCIASIO4  macro  include/linux/pci_ids.h  1804  #define PCI_DEVICE_ID_ESDGMBH_CPCIASIO4 0x0111
PCI_VENDOR_ID_SIIG  macro  include/linux/pci_ids.h  1806  #define PCI_VENDOR_ID_SIIG 0x131f
PCI_SUBVENDOR_ID_SIIG  macro  include/linux/pci_ids.h  1807  #define PCI_SUBVENDOR_ID_SIIG 0x131f
PCI_DEVICE_ID_SIIG_1S_10x_550  macro  include/linux/pci_ids.h  1808  #define PCI_DEVICE_ID_SIIG_1S_10x_550 0x1000
PCI_DEVICE_ID_SIIG_1S_10x_650  macro  include/linux/pci_ids.h  1809  #define PCI_DEVICE_ID_SIIG_1S_10x_650 0x1001
PCI_DEVICE_ID_SIIG_1S_10x_850  macro  include/linux/pci_ids.h  1810  #define PCI_DEVICE_ID_SIIG_1S_10x_850 0x1002
PCI_DEVICE_ID_SIIG_1S1P_10x_550  macro  include/linux/pci_ids.h  1811  #define PCI_DEVICE_ID_SIIG_1S1P_10x_550 0x1010
PCI_DEVICE_ID_SIIG_1S1P_10x_650  macro  include/linux/pci_ids.h  1812  #define PCI_DEVICE_ID_SIIG_1S1P_10x_650 0x1011
PCI_DEVICE_ID_SIIG_1S1P_10x_850  macro  include/linux/pci_ids.h  1813  #define PCI_DEVICE_ID_SIIG_1S1P_10x_850 0x1012
PCI_DEVICE_ID_SIIG_1P_10x  macro  include/linux/pci_ids.h  1814  #define PCI_DEVICE_ID_SIIG_1P_10x 0x1020
PCI_DEVICE_ID_SIIG_2P_10x  macro  include/linux/pci_ids.h  1815  #define PCI_DEVICE_ID_SIIG_2P_10x 0x1021
PCI_DEVICE_ID_SIIG_2S_10x_550  macro  include/linux/pci_ids.h  1816  #define PCI_DEVICE_ID_SIIG_2S_10x_550 0x1030
PCI_DEVICE_ID_SIIG_2S_10x_650  macro  include/linux/pci_ids.h  1817  #define PCI_DEVICE_ID_SIIG_2S_10x_650 0x1031
PCI_DEVICE_ID_SIIG_2S_10x_850  macro  include/linux/pci_ids.h  1818  #define PCI_DEVICE_ID_SIIG_2S_10x_850 0x1032
PCI_DEVICE_ID_SIIG_2S1P_10x_550  macro  include/linux/pci_ids.h  1819  #define PCI_DEVICE_ID_SIIG_2S1P_10x_550 0x1034
PCI_DEVICE_ID_SIIG_2S1P_10x_650  macro  include/linux/pci_ids.h  1820  #define PCI_DEVICE_ID_SIIG_2S1P_10x_650 0x1035
PCI_DEVICE_ID_SIIG_2S1P_10x_850  macro  include/linux/pci_ids.h  1821  #define PCI_DEVICE_ID_SIIG_2S1P_10x_850 0x1036
PCI_DEVICE_ID_SIIG_4S_10x_550  macro  include/linux/pci_ids.h  1822  #define PCI_DEVICE_ID_SIIG_4S_10x_550 0x1050
PCI_DEVICE_ID_SIIG_4S_10x_650  macro  include/linux/pci_ids.h  1823  #define PCI_DEVICE_ID_SIIG_4S_10x_650 0x1051
PCI_DEVICE_ID_SIIG_4S_10x_850  macro  include/linux/pci_ids.h  1824  #define PCI_DEVICE_ID_SIIG_4S_10x_850 0x1052
PCI_DEVICE_ID_SIIG_1S_20x_550  macro  include/linux/pci_ids.h  1825  #define PCI_DEVICE_ID_SIIG_1S_20x_550 0x2000
PCI_DEVICE_ID_SIIG_1S_20x_650  macro  include/linux/pci_ids.h  1826  #define PCI_DEVICE_ID_SIIG_1S_20x_650 0x2001
PCI_DEVICE_ID_SIIG_1S_20x_850  macro  include/linux/pci_ids.h  1827  #define PCI_DEVICE_ID_SIIG_1S_20x_850 0x2002
PCI_DEVICE_ID_SIIG_1P_20x  macro  include/linux/pci_ids.h  1828  #define PCI_DEVICE_ID_SIIG_1P_20x 0x2020
PCI_DEVICE_ID_SIIG_2P_20x  macro  include/linux/pci_ids.h  1829  #define PCI_DEVICE_ID_SIIG_2P_20x 0x2021
PCI_DEVICE_ID_SIIG_2S_20x_550  macro  include/linux/pci_ids.h  1830  #define PCI_DEVICE_ID_SIIG_2S_20x_550 0x2030
PCI_DEVICE_ID_SIIG_2S_20x_650  macro  include/linux/pci_ids.h  1831  #define PCI_DEVICE_ID_SIIG_2S_20x_650 0x2031
PCI_DEVICE_ID_SIIG_2S_20x_850  macro  include/linux/pci_ids.h  1832  #define PCI_DEVICE_ID_SIIG_2S_20x_850 0x2032
PCI_DEVICE_ID_SIIG_2P1S_20x_550  macro  include/linux/pci_ids.h  1833  #define PCI_DEVICE_ID_SIIG_2P1S_20x_550 0x2040
PCI_DEVICE_ID_SIIG_2P1S_20x_650  macro  include/linux/pci_ids.h  1834  #define PCI_DEVICE_ID_SIIG_2P1S_20x_650 0x2041
PCI_DEVICE_ID_SIIG_2P1S_20x_850  macro  include/linux/pci_ids.h  1835  #define PCI_DEVICE_ID_SIIG_2P1S_20x_850 0x2042
PCI_DEVICE_ID_SIIG_1S1P_20x_550  macro  include/linux/pci_ids.h  1836  #define PCI_DEVICE_ID_SIIG_1S1P_20x_550 0x2010
PCI_DEVICE_ID_SIIG_1S1P_20x_650  macro  include/linux/pci_ids.h  1837  #define PCI_DEVICE_ID_SIIG_1S1P_20x_650 0x2011
PCI_DEVICE_ID_SIIG_1S1P_20x_850  macro  include/linux/pci_ids.h  1838  #define PCI_DEVICE_ID_SIIG_1S1P_20x_850 0x2012
PCI_DEVICE_ID_SIIG_4S_20x_550  macro  include/linux/pci_ids.h  1839  #define PCI_DEVICE_ID_SIIG_4S_20x_550 0x2050
PCI_DEVICE_ID_SIIG_4S_20x_650  macro  include/linux/pci_ids.h  1840  #define PCI_DEVICE_ID_SIIG_4S_20x_650 0x2051
PCI_DEVICE_ID_SIIG_4S_20x_850  macro  include/linux/pci_ids.h  1841  #define PCI_DEVICE_ID_SIIG_4S_20x_850 0x2052
PCI_DEVICE_ID_SIIG_2S1P_20x_550  macro  include/linux/pci_ids.h  1842  #define PCI_DEVICE_ID_SIIG_2S1P_20x_550 0x2060
PCI_DEVICE_ID_SIIG_2S1P_20x_650  macro  include/linux/pci_ids.h  1843  #define PCI_DEVICE_ID_SIIG_2S1P_20x_650 0x2061
PCI_DEVICE_ID_SIIG_2S1P_20x_850  macro  include/linux/pci_ids.h  1844  #define PCI_DEVICE_ID_SIIG_2S1P_20x_850 0x2062
PCI_DEVICE_ID_SIIG_8S_20x_550  macro  include/linux/pci_ids.h  1845  #define PCI_DEVICE_ID_SIIG_8S_20x_550 0x2080
PCI_DEVICE_ID_SIIG_8S_20x_650  macro  include/linux/pci_ids.h  1846  #define PCI_DEVICE_ID_SIIG_8S_20x_650 0x2081
PCI_DEVICE_ID_SIIG_8S_20x_850  macro  include/linux/pci_ids.h  1847  #define PCI_DEVICE_ID_SIIG_8S_20x_850 0x2082
PCI_SUBDEVICE_ID_SIIG_QUARTET_SERIAL  macro  include/linux/pci_ids.h  1848  #define PCI_SUBDEVICE_ID_SIIG_QUARTET_SERIAL 0x2050
PCI_VENDOR_ID_RADISYS  macro  include/linux/pci_ids.h  1850  #define PCI_VENDOR_ID_RADISYS 0x1331
PCI_VENDOR_ID_MICRO_MEMORY  macro  include/linux/pci_ids.h  1852  #define PCI_VENDOR_ID_MICRO_MEMORY 0x1332
PCI_DEVICE_ID_MICRO_MEMORY_5415CN  macro  include/linux/pci_ids.h  1853  #define PCI_DEVICE_ID_MICRO_MEMORY_5415CN 0x5415
PCI_DEVICE_ID_MICRO_MEMORY_5425CN  macro  include/linux/pci_ids.h  1854  #define PCI_DEVICE_ID_MICRO_MEMORY_5425CN 0x5425
PCI_DEVICE_ID_MICRO_MEMORY_6155  macro  include/linux/pci_ids.h  1855  #define PCI_DEVICE_ID_MICRO_MEMORY_6155 0x6155
PCI_VENDOR_ID_DOMEX  macro  include/linux/pci_ids.h  1857  #define PCI_VENDOR_ID_DOMEX 0x134a
PCI_DEVICE_ID_DOMEX_DMX3191D  macro  include/linux/pci_ids.h  1858  #define PCI_DEVICE_ID_DOMEX_DMX3191D 0x0001
PCI_VENDOR_ID_INTASHIELD  macro  include/linux/pci_ids.h  1860  #define PCI_VENDOR_ID_INTASHIELD 0x135a
PCI_DEVICE_ID_INTASHIELD_IS200  macro  include/linux/pci_ids.h  1861  #define PCI_DEVICE_ID_INTASHIELD_IS200 0x0d80
PCI_DEVICE_ID_INTASHIELD_IS400  macro  include/linux/pci_ids.h  1862  #define PCI_DEVICE_ID_INTASHIELD_IS400 0x0dc0
PCI_VENDOR_ID_QUATECH  macro  include/linux/pci_ids.h  1864  #define PCI_VENDOR_ID_QUATECH 0x135C
PCI_DEVICE_ID_QUATECH_QSC100  macro  include/linux/pci_ids.h  1865  #define PCI_DEVICE_ID_QUATECH_QSC100 0x0010
PCI_DEVICE_ID_QUATECH_DSC100  macro  include/linux/pci_ids.h  1866  #define PCI_DEVICE_ID_QUATECH_DSC100 0x0020
PCI_DEVICE_ID_QUATECH_ESC100D  macro  include/linux/pci_ids.h  1867  #define PCI_DEVICE_ID_QUATECH_ESC100D 0x0050
PCI_DEVICE_ID_QUATECH_ESC100M  macro  include/linux/pci_ids.h  1868  #define PCI_DEVICE_ID_QUATECH_ESC100M 0x0060
PCI_DEVICE_ID_QUATECH_SPPXP_100  macro  include/linux/pci_ids.h  1869  #define PCI_DEVICE_ID_QUATECH_SPPXP_100 0x0278
PCI_VENDOR_ID_SEALEVEL  macro  include/linux/pci_ids.h  1871  #define PCI_VENDOR_ID_SEALEVEL 0x135e
PCI_DEVICE_ID_SEALEVEL_U530  macro  include/linux/pci_ids.h  1872  #define PCI_DEVICE_ID_SEALEVEL_U530 0x7101
PCI_DEVICE_ID_SEALEVEL_UCOMM2  macro  include/linux/pci_ids.h  1873  #define PCI_DEVICE_ID_SEALEVEL_UCOMM2 0x7201
PCI_DEVICE_ID_SEALEVEL_UCOMM422  macro  include/linux/pci_ids.h  1874  #define PCI_DEVICE_ID_SEALEVEL_UCOMM422 0x7402
PCI_DEVICE_ID_SEALEVEL_UCOMM232  macro  include/linux/pci_ids.h  1875  #define PCI_DEVICE_ID_SEALEVEL_UCOMM232 0x7202
PCI_DEVICE_ID_SEALEVEL_COMM4  macro  include/linux/pci_ids.h  1876  #define PCI_DEVICE_ID_SEALEVEL_COMM4 0x7401
PCI_DEVICE_ID_SEALEVEL_COMM8  macro  include/linux/pci_ids.h  1877  #define PCI_DEVICE_ID_SEALEVEL_COMM8 0x7801
PCI_DEVICE_ID_SEALEVEL_7803  macro  include/linux/pci_ids.h  1878  #define PCI_DEVICE_ID_SEALEVEL_7803 0x7803
PCI_DEVICE_ID_SEALEVEL_UCOMM8  macro  include/linux/pci_ids.h  1879  #define PCI_DEVICE_ID_SEALEVEL_UCOMM8 0x7804
PCI_VENDOR_ID_HYPERCOPE  macro  include/linux/pci_ids.h  1881  #define PCI_VENDOR_ID_HYPERCOPE 0x1365
PCI_DEVICE_ID_HYPERCOPE_PLX  macro  include/linux/pci_ids.h  1882  #define PCI_DEVICE_ID_HYPERCOPE_PLX 0x9050
PCI_SUBDEVICE_ID_HYPERCOPE_OLD_ERGO  macro  include/linux/pci_ids.h  1883  #define PCI_SUBDEVICE_ID_HYPERCOPE_OLD_ERGO 0x0104
PCI_SUBDEVICE_ID_HYPERCOPE_ERGO  macro  include/linux/pci_ids.h  1884  #define PCI_SUBDEVICE_ID_HYPERCOPE_ERGO 0x0106
PCI_SUBDEVICE_ID_HYPERCOPE_METRO  macro  include/linux/pci_ids.h  1885  #define PCI_SUBDEVICE_ID_HYPERCOPE_METRO 0x0107
PCI_SUBDEVICE_ID_HYPERCOPE_CHAMP2  macro  include/linux/pci_ids.h  1886  #define PCI_SUBDEVICE_ID_HYPERCOPE_CHAMP2 0x0108
PCI_VENDOR_ID_DIGIGRAM  macro  include/linux/pci_ids.h  1888  #define PCI_VENDOR_ID_DIGIGRAM 0x1369
PCI_SUBDEVICE_ID_DIGIGRAM_LX6464ES_SERIAL_SUBSYSTEM  macro  include/linux/pci_ids.h  1889  #define PCI_SUBDEVICE_ID_DIGIGRAM_LX6464ES_SERIAL_SUBSYSTEM 0xc001
PCI_SUBDEVICE_ID_DIGIGRAM_LX6464ES_CAE_SERIAL_SUBSYSTEM  macro  include/linux/pci_ids.h  1890  #define PCI_SUBDEVICE_ID_DIGIGRAM_LX6464ES_CAE_SERIAL_SUBSYSTEM 0xc002
PCI_VENDOR_ID_KAWASAKI  macro  include/linux/pci_ids.h  1892  #define PCI_VENDOR_ID_KAWASAKI 0x136b
PCI_DEVICE_ID_MCHIP_KL5A72002  macro  include/linux/pci_ids.h  1893  #define PCI_DEVICE_ID_MCHIP_KL5A72002 0xff01
PCI_VENDOR_ID_CNET  macro  include/linux/pci_ids.h  1895  #define PCI_VENDOR_ID_CNET 0x1371
PCI_DEVICE_ID_CNET_GIGACARD  macro  include/linux/pci_ids.h  1896  #define PCI_DEVICE_ID_CNET_GIGACARD 0x434e
PCI_VENDOR_ID_LMC  macro  include/linux/pci_ids.h  1898  #define PCI_VENDOR_ID_LMC 0x1376
PCI_DEVICE_ID_LMC_HSSI  macro  include/linux/pci_ids.h  1899  #define PCI_DEVICE_ID_LMC_HSSI 0x0003
PCI_DEVICE_ID_LMC_DS3  macro  include/linux/pci_ids.h  1900  #define PCI_DEVICE_ID_LMC_DS3 0x0004
PCI_DEVICE_ID_LMC_SSI  macro  include/linux/pci_ids.h  1901  #define PCI_DEVICE_ID_LMC_SSI 0x0005
PCI_DEVICE_ID_LMC_T1  macro  include/linux/pci_ids.h  1902  #define PCI_DEVICE_ID_LMC_T1 0x0006
PCI_VENDOR_ID_NETGEAR  macro  include/linux/pci_ids.h  1904  #define PCI_VENDOR_ID_NETGEAR 0x1385
PCI_DEVICE_ID_NETGEAR_GA620  macro  include/linux/pci_ids.h  1905  #define PCI_DEVICE_ID_NETGEAR_GA620 0x620a
PCI_VENDOR_ID_APPLICOM  macro  include/linux/pci_ids.h  1907  #define PCI_VENDOR_ID_APPLICOM 0x1389
PCI_DEVICE_ID_APPLICOM_PCIGENERIC  macro  include/linux/pci_ids.h  1908  #define PCI_DEVICE_ID_APPLICOM_PCIGENERIC 0x0001
PCI_DEVICE_ID_APPLICOM_PCI2000IBS_CAN  macro  include/linux/pci_ids.h  1909  #define PCI_DEVICE_ID_APPLICOM_PCI2000IBS_CAN 0x0002
PCI_DEVICE_ID_APPLICOM_PCI2000PFB  macro  include/linux/pci_ids.h  1910  #define PCI_DEVICE_ID_APPLICOM_PCI2000PFB 0x0003
PCI_VENDOR_ID_MOXA  macro  include/linux/pci_ids.h  1912  #define PCI_VENDOR_ID_MOXA 0x1393
PCI_DEVICE_ID_MOXA_RC7000  macro  include/linux/pci_ids.h  1913  #define PCI_DEVICE_ID_MOXA_RC7000 0x0001
PCI_DEVICE_ID_MOXA_CP102  macro  include/linux/pci_ids.h  1914  #define PCI_DEVICE_ID_MOXA_CP102 0x1020
PCI_DEVICE_ID_MOXA_CP102UL  macro  include/linux/pci_ids.h  1915  #define PCI_DEVICE_ID_MOXA_CP102UL 0x1021
PCI_DEVICE_ID_MOXA_CP102U  macro  include/linux/pci_ids.h  1916  #define PCI_DEVICE_ID_MOXA_CP102U 0x1022
PCI_DEVICE_ID_MOXA_C104  macro  include/linux/pci_ids.h  1917  #define PCI_DEVICE_ID_MOXA_C104 0x1040
PCI_DEVICE_ID_MOXA_CP104U  macro  include/linux/pci_ids.h  1918  #define PCI_DEVICE_ID_MOXA_CP104U 0x1041
PCI_DEVICE_ID_MOXA_CP104JU  macro  include/linux/pci_ids.h  1919  #define PCI_DEVICE_ID_MOXA_CP104JU 0x1042
PCI_DEVICE_ID_MOXA_CP104EL  macro  include/linux/pci_ids.h  1920  #define PCI_DEVICE_ID_MOXA_CP104EL 0x1043
PCI_DEVICE_ID_MOXA_CT114  macro  include/linux/pci_ids.h  1921  #define PCI_DEVICE_ID_MOXA_CT114 0x1140
PCI_DEVICE_ID_MOXA_CP114  macro  include/linux/pci_ids.h  1922  #define PCI_DEVICE_ID_MOXA_CP114 0x1141
PCI_DEVICE_ID_MOXA_CP118U  macro  include/linux/pci_ids.h  1923  #define PCI_DEVICE_ID_MOXA_CP118U 0x1180
PCI_DEVICE_ID_MOXA_CP118EL  macro  include/linux/pci_ids.h  1924  #define PCI_DEVICE_ID_MOXA_CP118EL 0x1181
PCI_DEVICE_ID_MOXA_CP132  macro  include/linux/pci_ids.h  1925  #define PCI_DEVICE_ID_MOXA_CP132 0x1320
PCI_DEVICE_ID_MOXA_CP132U  macro  include/linux/pci_ids.h  1926  #define PCI_DEVICE_ID_MOXA_CP132U 0x1321
PCI_DEVICE_ID_MOXA_CP134U  macro  include/linux/pci_ids.h  1927  #define PCI_DEVICE_ID_MOXA_CP134U 0x1340
PCI_DEVICE_ID_MOXA_C168  macro  include/linux/pci_ids.h  1928  #define PCI_DEVICE_ID_MOXA_C168 0x1680
PCI_DEVICE_ID_MOXA_CP168U  macro  include/linux/pci_ids.h  1929  #define PCI_DEVICE_ID_MOXA_CP168U 0x1681
PCI_DEVICE_ID_MOXA_CP168EL  macro  include/linux/pci_ids.h  1930  #define PCI_DEVICE_ID_MOXA_CP168EL 0x1682
PCI_DEVICE_ID_MOXA_CP204J  macro  include/linux/pci_ids.h  1931  #define PCI_DEVICE_ID_MOXA_CP204J 0x2040
PCI_DEVICE_ID_MOXA_C218  macro  include/linux/pci_ids.h  1932  #define PCI_DEVICE_ID_MOXA_C218 0x2180
PCI_DEVICE_ID_MOXA_C320  macro  include/linux/pci_ids.h  1933  #define PCI_DEVICE_ID_MOXA_C320 0x3200
PCI_VENDOR_ID_CCD  macro  include/linux/pci_ids.h  1935  #define PCI_VENDOR_ID_CCD 0x1397
PCI_DEVICE_ID_CCD_HFC4S  macro  include/linux/pci_ids.h  1936  #define PCI_DEVICE_ID_CCD_HFC4S 0x08B4
PCI_SUBDEVICE_ID_CCD_PMX2S  macro  include/linux/pci_ids.h  1937  #define PCI_SUBDEVICE_ID_CCD_PMX2S 0x1234
PCI_DEVICE_ID_CCD_HFC8S  macro  include/linux/pci_ids.h  1938  #define PCI_DEVICE_ID_CCD_HFC8S 0x16B8
PCI_DEVICE_ID_CCD_2BD0  macro  include/linux/pci_ids.h  1939  #define PCI_DEVICE_ID_CCD_2BD0 0x2bd0
PCI_DEVICE_ID_CCD_HFCE1  macro  include/linux/pci_ids.h  1940  #define PCI_DEVICE_ID_CCD_HFCE1 0x30B1
PCI_SUBDEVICE_ID_CCD_SPD4S  macro  include/linux/pci_ids.h  1941  #define PCI_SUBDEVICE_ID_CCD_SPD4S 0x3136
PCI_SUBDEVICE_ID_CCD_SPDE1  macro  include/linux/pci_ids.h  1942  #define PCI_SUBDEVICE_ID_CCD_SPDE1 0x3137
PCI_DEVICE_ID_CCD_B000  macro  include/linux/pci_ids.h  1943  #define PCI_DEVICE_ID_CCD_B000 0xb000
PCI_DEVICE_ID_CCD_B006  macro  include/linux/pci_ids.h  1944  #define PCI_DEVICE_ID_CCD_B006 0xb006
PCI_DEVICE_ID_CCD_B007  macro  include/linux/pci_ids.h  1945  #define PCI_DEVICE_ID_CCD_B007 0xb007
PCI_DEVICE_ID_CCD_B008  macro  include/linux/pci_ids.h  1946  #define PCI_DEVICE_ID_CCD_B008 0xb008
PCI_DEVICE_ID_CCD_B009  macro  include/linux/pci_ids.h  1947  #define PCI_DEVICE_ID_CCD_B009 0xb009
PCI_DEVICE_ID_CCD_B00A  macro  include/linux/pci_ids.h  1948  #define PCI_DEVICE_ID_CCD_B00A 0xb00a
PCI_DEVICE_ID_CCD_B00B  macro  include/linux/pci_ids.h  1949  #define PCI_DEVICE_ID_CCD_B00B 0xb00b
PCI_DEVICE_ID_CCD_B00C  macro  include/linux/pci_ids.h  1950  #define PCI_DEVICE_ID_CCD_B00C 0xb00c
PCI_DEVICE_ID_CCD_B100  macro  include/linux/pci_ids.h  1951  #define PCI_DEVICE_ID_CCD_B100 0xb100
PCI_SUBDEVICE_ID_CCD_IOB4ST  macro  include/linux/pci_ids.h  1952  #define PCI_SUBDEVICE_ID_CCD_IOB4ST 0xB520
PCI_SUBDEVICE_ID_CCD_IOB8STR  macro  include/linux/pci_ids.h  1953  #define PCI_SUBDEVICE_ID_CCD_IOB8STR 0xB521
PCI_SUBDEVICE_ID_CCD_IOB8ST  macro  include/linux/pci_ids.h  1954  #define PCI_SUBDEVICE_ID_CCD_IOB8ST 0xB522
PCI_SUBDEVICE_ID_CCD_IOB1E1  macro  include/linux/pci_ids.h  1955  #define PCI_SUBDEVICE_ID_CCD_IOB1E1 0xB523
PCI_SUBDEVICE_ID_CCD_SWYX4S  macro  include/linux/pci_ids.h  1956  #define PCI_SUBDEVICE_ID_CCD_SWYX4S 0xB540
PCI_SUBDEVICE_ID_CCD_JH4S20  macro  include/linux/pci_ids.h  1957  #define PCI_SUBDEVICE_ID_CCD_JH4S20 0xB550
PCI_SUBDEVICE_ID_CCD_IOB8ST_1  macro  include/linux/pci_ids.h  1958  #define PCI_SUBDEVICE_ID_CCD_IOB8ST_1 0xB552
PCI_SUBDEVICE_ID_CCD_JHSE1  macro  include/linux/pci_ids.h  1959  #define PCI_SUBDEVICE_ID_CCD_JHSE1 0xB553
PCI_SUBDEVICE_ID_CCD_JH8S  macro  include/linux/pci_ids.h  1960  #define PCI_SUBDEVICE_ID_CCD_JH8S 0xB55B
PCI_SUBDEVICE_ID_CCD_BN4S  macro  include/linux/pci_ids.h  1961  #define PCI_SUBDEVICE_ID_CCD_BN4S 0xB560
PCI_SUBDEVICE_ID_CCD_BN8S  macro  include/linux/pci_ids.h  1962  #define PCI_SUBDEVICE_ID_CCD_BN8S 0xB562
PCI_SUBDEVICE_ID_CCD_BNE1  macro  include/linux/pci_ids.h  1963  #define PCI_SUBDEVICE_ID_CCD_BNE1 0xB563
PCI_SUBDEVICE_ID_CCD_BNE1D  macro  include/linux/pci_ids.h  1964  #define PCI_SUBDEVICE_ID_CCD_BNE1D 0xB564
PCI_SUBDEVICE_ID_CCD_BNE1DP  macro  include/linux/pci_ids.h  1965  #define PCI_SUBDEVICE_ID_CCD_BNE1DP 0xB565
PCI_SUBDEVICE_ID_CCD_BN2S  macro  include/linux/pci_ids.h  1966  #define PCI_SUBDEVICE_ID_CCD_BN2S 0xB566
PCI_SUBDEVICE_ID_CCD_BN1SM  macro  include/linux/pci_ids.h  1967  #define PCI_SUBDEVICE_ID_CCD_BN1SM 0xB567
PCI_SUBDEVICE_ID_CCD_BN4SM  macro  include/linux/pci_ids.h  1968  #define PCI_SUBDEVICE_ID_CCD_BN4SM 0xB568
PCI_SUBDEVICE_ID_CCD_BN2SM  macro  include/linux/pci_ids.h  1969  #define PCI_SUBDEVICE_ID_CCD_BN2SM 0xB569
PCI_SUBDEVICE_ID_CCD_BNE1M  macro  include/linux/pci_ids.h  1970  #define PCI_SUBDEVICE_ID_CCD_BNE1M 0xB56A
PCI_SUBDEVICE_ID_CCD_BN8SP  macro  include/linux/pci_ids.h  1971  #define PCI_SUBDEVICE_ID_CCD_BN8SP 0xB56B
PCI_SUBDEVICE_ID_CCD_HFC4S  macro  include/linux/pci_ids.h  1972  #define PCI_SUBDEVICE_ID_CCD_HFC4S 0xB620
PCI_SUBDEVICE_ID_CCD_HFC8S  macro  include/linux/pci_ids.h  1973  #define PCI_SUBDEVICE_ID_CCD_HFC8S 0xB622
PCI_DEVICE_ID_CCD_B700  macro  include/linux/pci_ids.h  1974  #define PCI_DEVICE_ID_CCD_B700 0xb700
PCI_DEVICE_ID_CCD_B701  macro  include/linux/pci_ids.h  1975  #define PCI_DEVICE_ID_CCD_B701 0xb701
PCI_SUBDEVICE_ID_CCD_HFCE1  macro  include/linux/pci_ids.h  1976  #define PCI_SUBDEVICE_ID_CCD_HFCE1 0xC523
PCI_SUBDEVICE_ID_CCD_OV2S  macro  include/linux/pci_ids.h  1977  #define PCI_SUBDEVICE_ID_CCD_OV2S 0xE884
PCI_SUBDEVICE_ID_CCD_OV4S  macro  include/linux/pci_ids.h  1978  #define PCI_SUBDEVICE_ID_CCD_OV4S 0xE888
PCI_SUBDEVICE_ID_CCD_OV8S  macro  include/linux/pci_ids.h  1979  #define PCI_SUBDEVICE_ID_CCD_OV8S 0xE998
PCI_VENDOR_ID_EXAR  macro  include/linux/pci_ids.h  1981  #define PCI_VENDOR_ID_EXAR 0x13a8
PCI_DEVICE_ID_EXAR_XR17C152  macro  include/linux/pci_ids.h  1982  #define PCI_DEVICE_ID_EXAR_XR17C152 0x0152
PCI_DEVICE_ID_EXAR_XR17C154  macro  include/linux/pci_ids.h  1983  #define PCI_DEVICE_ID_EXAR_XR17C154 0x0154
PCI_DEVICE_ID_EXAR_XR17C158  macro  include/linux/pci_ids.h  1984  #define PCI_DEVICE_ID_EXAR_XR17C158 0x0158
PCI_VENDOR_ID_MICROGATE  macro  include/linux/pci_ids.h  1986  #define PCI_VENDOR_ID_MICROGATE 0x13c0
PCI_DEVICE_ID_MICROGATE_USC  macro  include/linux/pci_ids.h  1987  #define PCI_DEVICE_ID_MICROGATE_USC 0x0010
PCI_DEVICE_ID_MICROGATE_SCA  macro  include/linux/pci_ids.h  1988  #define PCI_DEVICE_ID_MICROGATE_SCA 0x0030
PCI_VENDOR_ID_3WARE  macro  include/linux/pci_ids.h  1990  #define PCI_VENDOR_ID_3WARE 0x13C1
PCI_DEVICE_ID_3WARE_1000  macro  include/linux/pci_ids.h  1991  #define PCI_DEVICE_ID_3WARE_1000 0x1000
PCI_DEVICE_ID_3WARE_7000  macro  include/linux/pci_ids.h  1992  #define PCI_DEVICE_ID_3WARE_7000 0x1001
PCI_DEVICE_ID_3WARE_9000  macro  include/linux/pci_ids.h  1993  #define PCI_DEVICE_ID_3WARE_9000 0x1002
PCI_VENDOR_ID_IOMEGA  macro  include/linux/pci_ids.h  1995  #define PCI_VENDOR_ID_IOMEGA 0x13ca
PCI_DEVICE_ID_IOMEGA_BUZ  macro  include/linux/pci_ids.h  1996  #define PCI_DEVICE_ID_IOMEGA_BUZ 0x4231
PCI_VENDOR_ID_ABOCOM  macro  include/linux/pci_ids.h  1998  #define PCI_VENDOR_ID_ABOCOM 0x13D1
PCI_DEVICE_ID_ABOCOM_2BD1  macro  include/linux/pci_ids.h  1999  #define PCI_DEVICE_ID_ABOCOM_2BD1 0x2BD1
PCI_VENDOR_ID_SUNDANCE  macro  include/linux/pci_ids.h  2001  #define PCI_VENDOR_ID_SUNDANCE 0x13f0
PCI_VENDOR_ID_CMEDIA  macro  include/linux/pci_ids.h  2003  #define PCI_VENDOR_ID_CMEDIA 0x13f6
PCI_DEVICE_ID_CMEDIA_CM8338A  macro  include/linux/pci_ids.h  2004  #define PCI_DEVICE_ID_CMEDIA_CM8338A 0x0100
PCI_DEVICE_ID_CMEDIA_CM8338B  macro  include/linux/pci_ids.h  2005  #define PCI_DEVICE_ID_CMEDIA_CM8338B 0x0101
PCI_DEVICE_ID_CMEDIA_CM8738  macro  include/linux/pci_ids.h  2006  #define PCI_DEVICE_ID_CMEDIA_CM8738 0x0111
PCI_DEVICE_ID_CMEDIA_CM8738B  macro  include/linux/pci_ids.h  2007  #define PCI_DEVICE_ID_CMEDIA_CM8738B 0x0112
PCI_VENDOR_ID_LAVA  macro  include/linux/pci_ids.h  2009  #define PCI_VENDOR_ID_LAVA 0x1407
PCI_DEVICE_ID_LAVA_DSERIAL  macro  include/linux/pci_ids.h  2010  #define PCI_DEVICE_ID_LAVA_DSERIAL 0x0100
PCI_DEVICE_ID_LAVA_QUATRO_A  macro  include/linux/pci_ids.h  2011  #define PCI_DEVICE_ID_LAVA_QUATRO_A 0x0101
PCI_DEVICE_ID_LAVA_QUATRO_B  macro  include/linux/pci_ids.h  2012  #define PCI_DEVICE_ID_LAVA_QUATRO_B 0x0102
PCI_DEVICE_ID_LAVA_QUATTRO_A  macro  include/linux/pci_ids.h  2013  #define PCI_DEVICE_ID_LAVA_QUATTRO_A 0x0120
PCI_DEVICE_ID_LAVA_QUATTRO_B  macro  include/linux/pci_ids.h  2014  #define PCI_DEVICE_ID_LAVA_QUATTRO_B 0x0121
PCI_DEVICE_ID_LAVA_OCTO_A  macro  include/linux/pci_ids.h  2015  #define PCI_DEVICE_ID_LAVA_OCTO_A 0x0180
PCI_DEVICE_ID_LAVA_OCTO_B  macro  include/linux/pci_ids.h  2016  #define PCI_DEVICE_ID_LAVA_OCTO_B 0x0181
PCI_DEVICE_ID_LAVA_PORT_PLUS  macro  include/linux/pci_ids.h  2017  #define PCI_DEVICE_ID_LAVA_PORT_PLUS 0x0200
PCI_DEVICE_ID_LAVA_QUAD_A  macro  include/linux/pci_ids.h  2018  #define PCI_DEVICE_ID_LAVA_QUAD_A 0x0201
PCI_DEVICE_ID_LAVA_QUAD_B  macro  include/linux/pci_ids.h  2019  #define PCI_DEVICE_ID_LAVA_QUAD_B 0x0202
PCI_DEVICE_ID_LAVA_SSERIAL  macro  include/linux/pci_ids.h  2020  #define PCI_DEVICE_ID_LAVA_SSERIAL 0x0500
PCI_DEVICE_ID_LAVA_PORT_650  macro  include/linux/pci_ids.h  2021  #define PCI_DEVICE_ID_LAVA_PORT_650 0x0600
PCI_DEVICE_ID_LAVA_PARALLEL  macro  include/linux/pci_ids.h  2022  #define PCI_DEVICE_ID_LAVA_PARALLEL 0x8000
PCI_DEVICE_ID_LAVA_DUAL_PAR_A  macro  include/linux/pci_ids.h  2023  #define PCI_DEVICE_ID_LAVA_DUAL_PAR_A 0x8002
PCI_DEVICE_ID_LAVA_DUAL_PAR_B  macro  include/linux/pci_ids.h  2024  #define PCI_DEVICE_ID_LAVA_DUAL_PAR_B 0x8003
PCI_DEVICE_ID_LAVA_BOCA_IOPPAR  macro  include/linux/pci_ids.h  2025  #define PCI_DEVICE_ID_LAVA_BOCA_IOPPAR 0x8800
PCI_VENDOR_ID_TIMEDIA  macro  include/linux/pci_ids.h  2027  #define PCI_VENDOR_ID_TIMEDIA 0x1409
PCI_DEVICE_ID_TIMEDIA_1889  macro  include/linux/pci_ids.h  2028  #define PCI_DEVICE_ID_TIMEDIA_1889 0x7168
PCI_VENDOR_ID_ICE  macro  include/linux/pci_ids.h  2030  #define PCI_VENDOR_ID_ICE 0x1412
PCI_DEVICE_ID_ICE_1712  macro  include/linux/pci_ids.h  2031  #define PCI_DEVICE_ID_ICE_1712 0x1712
PCI_DEVICE_ID_VT1724  macro  include/linux/pci_ids.h  2032  #define PCI_DEVICE_ID_VT1724 0x1724
PCI_VENDOR_ID_OXSEMI  macro  include/linux/pci_ids.h  2034  #define PCI_VENDOR_ID_OXSEMI 0x1415
PCI_DEVICE_ID_OXSEMI_12PCI840  macro  include/linux/pci_ids.h  2035  #define PCI_DEVICE_ID_OXSEMI_12PCI840 0x8403
PCI_DEVICE_ID_OXSEMI_PCIe840  macro  include/linux/pci_ids.h  2036  #define PCI_DEVICE_ID_OXSEMI_PCIe840 0xC000
PCI_DEVICE_ID_OXSEMI_PCIe840_G  macro  include/linux/pci_ids.h  2037  #define PCI_DEVICE_ID_OXSEMI_PCIe840_G 0xC004
PCI_DEVICE_ID_OXSEMI_PCIe952_0  macro  include/linux/pci_ids.h  2038  #define PCI_DEVICE_ID_OXSEMI_PCIe952_0 0xC100
PCI_DEVICE_ID_OXSEMI_PCIe952_0_G  macro  include/linux/pci_ids.h  2039  #define PCI_DEVICE_ID_OXSEMI_PCIe952_0_G 0xC104
PCI_DEVICE_ID_OXSEMI_PCIe952_1  macro  include/linux/pci_ids.h  2040  #define PCI_DEVICE_ID_OXSEMI_PCIe952_1 0xC110
PCI_DEVICE_ID_OXSEMI_PCIe952_1_G  macro  include/linux/pci_ids.h  2041  #define PCI_DEVICE_ID_OXSEMI_PCIe952_1_G 0xC114
PCI_DEVICE_ID_OXSEMI_PCIe952_1_U  macro  include/linux/pci_ids.h  2042  #define PCI_DEVICE_ID_OXSEMI_PCIe952_1_U 0xC118
PCI_DEVICE_ID_OXSEMI_PCIe952_1_GU  macro  include/linux/pci_ids.h  2043  #define PCI_DEVICE_ID_OXSEMI_PCIe952_1_GU 0xC11C
PCI_DEVICE_ID_OXSEMI_16PCI954  macro  include/linux/pci_ids.h  2044  #define PCI_DEVICE_ID_OXSEMI_16PCI954 0x9501
PCI_DEVICE_ID_OXSEMI_C950  macro  include/linux/pci_ids.h  2045  #define PCI_DEVICE_ID_OXSEMI_C950 0x950B
PCI_DEVICE_ID_OXSEMI_16PCI95N  macro  include/linux/pci_ids.h  2046  #define PCI_DEVICE_ID_OXSEMI_16PCI95N 0x9511
PCI_DEVICE_ID_OXSEMI_16PCI954PP  macro  include/linux/pci_ids.h  2047  #define PCI_DEVICE_ID_OXSEMI_16PCI954PP 0x9513
PCI_DEVICE_ID_OXSEMI_16PCI952  macro  include/linux/pci_ids.h  2048  #define PCI_DEVICE_ID_OXSEMI_16PCI952 0x9521
PCI_DEVICE_ID_OXSEMI_16PCI952PP  macro  include/linux/pci_ids.h  2049  #define PCI_DEVICE_ID_OXSEMI_16PCI952PP 0x9523
PCI_SUBDEVICE_ID_OXSEMI_C950  macro  include/linux/pci_ids.h  2050  #define PCI_SUBDEVICE_ID_OXSEMI_C950 0x0001
PCI_VENDOR_ID_CHELSIO  macro  include/linux/pci_ids.h  2052  #define PCI_VENDOR_ID_CHELSIO 0x1425
PCI_VENDOR_ID_SAMSUNG  macro  include/linux/pci_ids.h  2054  #define PCI_VENDOR_ID_SAMSUNG 0x144d
PCI_VENDOR_ID_GIGABYTE  macro  include/linux/pci_ids.h  2056  #define PCI_VENDOR_ID_GIGABYTE 0x1458
PCI_VENDOR_ID_AMBIT  macro  include/linux/pci_ids.h  2058  #define PCI_VENDOR_ID_AMBIT 0x1468
PCI_VENDOR_ID_MYRICOM  macro  include/linux/pci_ids.h  2060  #define PCI_VENDOR_ID_MYRICOM 0x14c1
PCI_VENDOR_ID_TITAN  macro  include/linux/pci_ids.h  2062  #define PCI_VENDOR_ID_TITAN 0x14D2
PCI_DEVICE_ID_TITAN_010L  macro  include/linux/pci_ids.h  2063  #define PCI_DEVICE_ID_TITAN_010L 0x8001
PCI_DEVICE_ID_TITAN_100L  macro  include/linux/pci_ids.h  2064  #define PCI_DEVICE_ID_TITAN_100L 0x8010
PCI_DEVICE_ID_TITAN_110L  macro  include/linux/pci_ids.h  2065  #define PCI_DEVICE_ID_TITAN_110L 0x8011
PCI_DEVICE_ID_TITAN_200L  macro  include/linux/pci_ids.h  2066  #define PCI_DEVICE_ID_TITAN_200L 0x8020
PCI_DEVICE_ID_TITAN_210L  macro  include/linux/pci_ids.h  2067  #define PCI_DEVICE_ID_TITAN_210L 0x8021
PCI_DEVICE_ID_TITAN_400L  macro  include/linux/pci_ids.h  2068  #define PCI_DEVICE_ID_TITAN_400L 0x8040
PCI_DEVICE_ID_TITAN_800L  macro  include/linux/pci_ids.h  2069  #define PCI_DEVICE_ID_TITAN_800L 0x8080
PCI_DEVICE_ID_TITAN_100  macro  include/linux/pci_ids.h  2070  #define PCI_DEVICE_ID_TITAN_100 0xA001
PCI_DEVICE_ID_TITAN_200  macro  include/linux/pci_ids.h  2071  #define PCI_DEVICE_ID_TITAN_200 0xA005
PCI_DEVICE_ID_TITAN_400  macro  include/linux/pci_ids.h  2072  #define PCI_DEVICE_ID_TITAN_400 0xA003
PCI_DEVICE_ID_TITAN_800B  macro  include/linux/pci_ids.h  2073  #define PCI_DEVICE_ID_TITAN_800B 0xA004
PCI_VENDOR_ID_PANACOM  macro  include/linux/pci_ids.h  2075  #define PCI_VENDOR_ID_PANACOM 0x14d4
PCI_DEVICE_ID_PANACOM_QUADMODEM  macro  include/linux/pci_ids.h  2076  #define PCI_DEVICE_ID_PANACOM_QUADMODEM 0x0400
PCI_DEVICE_ID_PANACOM_DUALMODEM  macro  include/linux/pci_ids.h  2077  #define PCI_DEVICE_ID_PANACOM_DUALMODEM 0x0402
PCI_VENDOR_ID_SIPACKETS  macro  include/linux/pci_ids.h  2079  #define PCI_VENDOR_ID_SIPACKETS 0x14d9
PCI_DEVICE_ID_SP1011  macro  include/linux/pci_ids.h  2080  #define PCI_DEVICE_ID_SP1011 0x0010
PCI_VENDOR_ID_AFAVLAB  macro  include/linux/pci_ids.h  2082  #define PCI_VENDOR_ID_AFAVLAB 0x14db
PCI_DEVICE_ID_AFAVLAB_P028  macro  include/linux/pci_ids.h  2083  #define PCI_DEVICE_ID_AFAVLAB_P028 0x2180
PCI_DEVICE_ID_AFAVLAB_P030  macro  include/linux/pci_ids.h  2084  #define PCI_DEVICE_ID_AFAVLAB_P030 0x2182
PCI_SUBDEVICE_ID_AFAVLAB_P061  macro  include/linux/pci_ids.h  2085  #define PCI_SUBDEVICE_ID_AFAVLAB_P061 0x2150
PCI_VENDOR_ID_BCM_GVC  macro  include/linux/pci_ids.h  2087  #define PCI_VENDOR_ID_BCM_GVC 0x14a4
PCI_VENDOR_ID_BROADCOM  macro  include/linux/pci_ids.h  2088  #define PCI_VENDOR_ID_BROADCOM 0x14e4
PCI_DEVICE_ID_TIGON3_5752  macro  include/linux/pci_ids.h  2089  #define PCI_DEVICE_ID_TIGON3_5752 0x1600
PCI_DEVICE_ID_TIGON3_5752M  macro  include/linux/pci_ids.h  2090  #define PCI_DEVICE_ID_TIGON3_5752M 0x1601
PCI_DEVICE_ID_NX2_5709  macro  include/linux/pci_ids.h  2091  #define PCI_DEVICE_ID_NX2_5709 0x1639
PCI_DEVICE_ID_NX2_5709S  macro  include/linux/pci_ids.h  2092  #define PCI_DEVICE_ID_NX2_5709S 0x163a
PCI_DEVICE_ID_TIGON3_5700  macro  include/linux/pci_ids.h  2093  #define PCI_DEVICE_ID_TIGON3_5700 0x1644
PCI_DEVICE_ID_TIGON3_5701  macro  include/linux/pci_ids.h  2094  #define PCI_DEVICE_ID_TIGON3_5701 0x1645
PCI_DEVICE_ID_TIGON3_5702  macro  include/linux/pci_ids.h  2095  #define PCI_DEVICE_ID_TIGON3_5702 0x1646
PCI_DEVICE_ID_TIGON3_5703  macro  include/linux/pci_ids.h  2096  #define PCI_DEVICE_ID_TIGON3_5703 0x1647
PCI_DEVICE_ID_TIGON3_5704  macro  include/linux/pci_ids.h  2097  #define PCI_DEVICE_ID_TIGON3_5704 0x1648
PCI_DEVICE_ID_TIGON3_5704S_2  macro  include/linux/pci_ids.h  2098  #define PCI_DEVICE_ID_TIGON3_5704S_2 0x1649
PCI_DEVICE_ID_NX2_5706  macro  include/linux/pci_ids.h  2099  #define PCI_DEVICE_ID_NX2_5706 0x164a
PCI_DEVICE_ID_NX2_5708  macro  include/linux/pci_ids.h  2100  #define PCI_DEVICE_ID_NX2_5708 0x164c
PCI_DEVICE_ID_TIGON3_5702FE  macro  include/linux/pci_ids.h  2101  #define PCI_DEVICE_ID_TIGON3_5702FE 0x164d
PCI_DEVICE_ID_NX2_57710  macro  include/linux/pci_ids.h  2102  #define PCI_DEVICE_ID_NX2_57710 0x164e
PCI_DEVICE_ID_NX2_57711  macro  include/linux/pci_ids.h  2103  #define PCI_DEVICE_ID_NX2_57711 0x164f
PCI_DEVICE_ID_NX2_57711E  macro  include/linux/pci_ids.h  2104  #define PCI_DEVICE_ID_NX2_57711E 0x1650
PCI_DEVICE_ID_TIGON3_5705  macro  include/linux/pci_ids.h  2105  #define PCI_DEVICE_ID_TIGON3_5705 0x1653
PCI_DEVICE_ID_TIGON3_5705_2  macro  include/linux/pci_ids.h  2106  #define PCI_DEVICE_ID_TIGON3_5705_2 0x1654
PCI_DEVICE_ID_TIGON3_5719  macro  include/linux/pci_ids.h  2107  #define PCI_DEVICE_ID_TIGON3_5719 0x1657
PCI_DEVICE_ID_TIGON3_5721  macro  include/linux/pci_ids.h  2108  #define PCI_DEVICE_ID_TIGON3_5721 0x1659
PCI_DEVICE_ID_TIGON3_5722  macro  include/linux/pci_ids.h  2109  #define PCI_DEVICE_ID_TIGON3_5722 0x165a
PCI_DEVICE_ID_TIGON3_5723  macro  include/linux/pci_ids.h  2110  #define PCI_DEVICE_ID_TIGON3_5723 0x165b
PCI_DEVICE_ID_TIGON3_5705M  macro  include/linux/pci_ids.h  2111  #define PCI_DEVICE_ID_TIGON3_5705M 0x165d
PCI_DEVICE_ID_TIGON3_5705M_2  macro  include/linux/pci_ids.h  2112  #define PCI_DEVICE_ID_TIGON3_5705M_2 0x165e
PCI_DEVICE_ID_NX2_57712  macro  include/linux/pci_ids.h  2113  #define PCI_DEVICE_ID_NX2_57712 0x1662
PCI_DEVICE_ID_NX2_57712E  macro  include/linux/pci_ids.h  2114  #define PCI_DEVICE_ID_NX2_57712E 0x1663
PCI_DEVICE_ID_TIGON3_5714  macro  include/linux/pci_ids.h  2115  #define PCI_DEVICE_ID_TIGON3_5714 0x1668
PCI_DEVICE_ID_TIGON3_5714S  macro  include/linux/pci_ids.h  2116  #define PCI_DEVICE_ID_TIGON3_5714S 0x1669
PCI_DEVICE_ID_TIGON3_5780  macro  include/linux/pci_ids.h  2117  #define PCI_DEVICE_ID_TIGON3_5780 0x166a
PCI_DEVICE_ID_TIGON3_5780S  macro  include/linux/pci_ids.h  2118  #define PCI_DEVICE_ID_TIGON3_5780S 0x166b
PCI_DEVICE_ID_TIGON3_5705F  macro  include/linux/pci_ids.h  2119  #define PCI_DEVICE_ID_TIGON3_5705F 0x166e
PCI_DEVICE_ID_TIGON3_5754M  macro  include/linux/pci_ids.h  2120  #define PCI_DEVICE_ID_TIGON3_5754M 0x1672
PCI_DEVICE_ID_TIGON3_5755M  macro  include/linux/pci_ids.h  2121  #define PCI_DEVICE_ID_TIGON3_5755M 0x1673
PCI_DEVICE_ID_TIGON3_5756  macro  include/linux/pci_ids.h  2122  #define PCI_DEVICE_ID_TIGON3_5756 0x1674
PCI_DEVICE_ID_TIGON3_5751  macro  include/linux/pci_ids.h  2123  #define PCI_DEVICE_ID_TIGON3_5751 0x1677
PCI_DEVICE_ID_TIGON3_5715  macro  include/linux/pci_ids.h  2124  #define PCI_DEVICE_ID_TIGON3_5715 0x1678
PCI_DEVICE_ID_TIGON3_5715S  macro  include/linux/pci_ids.h  2125  #define PCI_DEVICE_ID_TIGON3_5715S 0x1679
PCI_DEVICE_ID_TIGON3_5754  macro  include/linux/pci_ids.h  2126  #define PCI_DEVICE_ID_TIGON3_5754 0x167a
PCI_DEVICE_ID_TIGON3_5755  macro  include/linux/pci_ids.h  2127  #define PCI_DEVICE_ID_TIGON3_5755 0x167b
PCI_DEVICE_ID_TIGON3_5751M  macro  include/linux/pci_ids.h  2128  #define PCI_DEVICE_ID_TIGON3_5751M 0x167d
PCI_DEVICE_ID_TIGON3_5751F  macro  include/linux/pci_ids.h  2129  #define PCI_DEVICE_ID_TIGON3_5751F 0x167e
PCI_DEVICE_ID_TIGON3_5787F  macro  include/linux/pci_ids.h  2130  #define PCI_DEVICE_ID_TIGON3_5787F 0x167f
PCI_DEVICE_ID_TIGON3_5761E  macro  include/linux/pci_ids.h  2131  #define PCI_DEVICE_ID_TIGON3_5761E 0x1680
PCI_DEVICE_ID_TIGON3_5761  macro  include/linux/pci_ids.h  2132  #define PCI_DEVICE_ID_TIGON3_5761 0x1681
PCI_DEVICE_ID_TIGON3_5764  macro  include/linux/pci_ids.h  2133  #define PCI_DEVICE_ID_TIGON3_5764 0x1684
PCI_DEVICE_ID_NX2_57800  macro  include/linux/pci_ids.h  2134  #define PCI_DEVICE_ID_NX2_57800 0x168a
PCI_DEVICE_ID_NX2_57840  macro  include/linux/pci_ids.h  2135  #define PCI_DEVICE_ID_NX2_57840 0x168d
PCI_DEVICE_ID_NX2_57810  macro  include/linux/pci_ids.h  2136  #define PCI_DEVICE_ID_NX2_57810 0x168e
PCI_DEVICE_ID_TIGON3_5787M  macro  include/linux/pci_ids.h  2137  #define PCI_DEVICE_ID_TIGON3_5787M 0x1693
PCI_DEVICE_ID_TIGON3_5782  macro  include/linux/pci_ids.h  2138  #define PCI_DEVICE_ID_TIGON3_5782 0x1696
PCI_DEVICE_ID_TIGON3_5784  macro  include/linux/pci_ids.h  2139  #define PCI_DEVICE_ID_TIGON3_5784 0x1698
PCI_DEVICE_ID_TIGON3_5786  macro  include/linux/pci_ids.h  2140  #define PCI_DEVICE_ID_TIGON3_5786 0x169a
PCI_DEVICE_ID_TIGON3_5787  macro  include/linux/pci_ids.h  2141  #define PCI_DEVICE_ID_TIGON3_5787 0x169b
PCI_DEVICE_ID_TIGON3_5788  macro  include/linux/pci_ids.h  2142  #define PCI_DEVICE_ID_TIGON3_5788 0x169c
PCI_DEVICE_ID_TIGON3_5789  macro  include/linux/pci_ids.h  2143  #define PCI_DEVICE_ID_TIGON3_5789 0x169d
PCI_DEVICE_ID_NX2_57800_MF  macro  include/linux/pci_ids.h  2144  #define PCI_DEVICE_ID_NX2_57800_MF 0x16a5
PCI_DEVICE_ID_TIGON3_5702X  macro  include/linux/pci_ids.h  2145  #define PCI_DEVICE_ID_TIGON3_5702X 0x16a6
PCI_DEVICE_ID_TIGON3_5703X  macro  include/linux/pci_ids.h  2146  #define PCI_DEVICE_ID_TIGON3_5703X 0x16a7
PCI_DEVICE_ID_TIGON3_5704S  macro  include/linux/pci_ids.h  2147  #define PCI_DEVICE_ID_TIGON3_5704S 0x16a8
PCI_DEVICE_ID_NX2_57800_VF  macro  include/linux/pci_ids.h  2148  #define PCI_DEVICE_ID_NX2_57800_VF 0x16a9
PCI_DEVICE_ID_NX2_5706S  macro  include/linux/pci_ids.h  2149  #define PCI_DEVICE_ID_NX2_5706S 0x16aa
PCI_DEVICE_ID_NX2_57840_MF  macro  include/linux/pci_ids.h  2150  #define PCI_DEVICE_ID_NX2_57840_MF 0x16a4
PCI_DEVICE_ID_NX2_5708S  macro  include/linux/pci_ids.h  2151  #define PCI_DEVICE_ID_NX2_5708S 0x16ac
PCI_DEVICE_ID_NX2_57840_VF  macro  include/linux/pci_ids.h  2152  #define PCI_DEVICE_ID_NX2_57840_VF 0x16ad
PCI_DEVICE_ID_NX2_57810_MF  macro  include/linux/pci_ids.h  2153  #define PCI_DEVICE_ID_NX2_57810_MF 0x16ae
PCI_DEVICE_ID_NX2_57810_VF  macro  include/linux/pci_ids.h  2154  #define PCI_DEVICE_ID_NX2_57810_VF 0x16af
PCI_DEVICE_ID_TIGON3_5702A3  macro  include/linux/pci_ids.h  2155  #define PCI_DEVICE_ID_TIGON3_5702A3 0x16c6
PCI_DEVICE_ID_TIGON3_5703A3  macro  include/linux/pci_ids.h  2156  #define PCI_DEVICE_ID_TIGON3_5703A3 0x16c7
PCI_DEVICE_ID_TIGON3_5781  macro  include/linux/pci_ids.h  2157  #define PCI_DEVICE_ID_TIGON3_5781 0x16dd
PCI_DEVICE_ID_TIGON3_5753  macro  include/linux/pci_ids.h  2158  #define PCI_DEVICE_ID_TIGON3_5753 0x16f7
PCI_DEVICE_ID_TIGON3_5753M  macro  include/linux/pci_ids.h  2159  #define PCI_DEVICE_ID_TIGON3_5753M 0x16fd
PCI_DEVICE_ID_TIGON3_5753F  macro  include/linux/pci_ids.h  2160  #define PCI_DEVICE_ID_TIGON3_5753F 0x16fe
PCI_DEVICE_ID_TIGON3_5901  macro  include/linux/pci_ids.h  2161  #define PCI_DEVICE_ID_TIGON3_5901 0x170d
PCI_DEVICE_ID_BCM4401B1  macro  include/linux/pci_ids.h  2162  #define PCI_DEVICE_ID_BCM4401B1 0x170c
PCI_DEVICE_ID_TIGON3_5901_2  macro  include/linux/pci_ids.h  2163  #define PCI_DEVICE_ID_TIGON3_5901_2 0x170e
PCI_DEVICE_ID_TIGON3_5906  macro  include/linux/pci_ids.h  2164  #define PCI_DEVICE_ID_TIGON3_5906 0x1712
PCI_DEVICE_ID_TIGON3_5906M  macro  include/linux/pci_ids.h  2165  #define PCI_DEVICE_ID_TIGON3_5906M 0x1713
PCI_DEVICE_ID_BCM4401  macro  include/linux/pci_ids.h  2166  #define PCI_DEVICE_ID_BCM4401 0x4401
PCI_DEVICE_ID_BCM4401B0  macro  include/linux/pci_ids.h  2167  #define PCI_DEVICE_ID_BCM4401B0 0x4402
PCI_VENDOR_ID_TOPIC  macro  include/linux/pci_ids.h  2169  #define PCI_VENDOR_ID_TOPIC 0x151f
PCI_DEVICE_ID_TOPIC_TP560  macro  include/linux/pci_ids.h  2170  #define PCI_DEVICE_ID_TOPIC_TP560 0x0000
PCI_VENDOR_ID_MAINPINE  macro  include/linux/pci_ids.h  2172  #define PCI_VENDOR_ID_MAINPINE 0x1522
PCI_DEVICE_ID_MAINPINE_PBRIDGE  macro  include/linux/pci_ids.h  2173  #define PCI_DEVICE_ID_MAINPINE_PBRIDGE 0x0100
PCI_VENDOR_ID_ENE  macro  include/linux/pci_ids.h  2174  #define PCI_VENDOR_ID_ENE 0x1524
PCI_DEVICE_ID_ENE_CB710_FLASH  macro  include/linux/pci_ids.h  2175  #define PCI_DEVICE_ID_ENE_CB710_FLASH 0x0510
PCI_DEVICE_ID_ENE_CB712_SD  macro  include/linux/pci_ids.h  2176  #define PCI_DEVICE_ID_ENE_CB712_SD 0x0550
PCI_DEVICE_ID_ENE_CB712_SD_2  macro  include/linux/pci_ids.h  2177  #define PCI_DEVICE_ID_ENE_CB712_SD_2 0x0551
PCI_DEVICE_ID_ENE_CB714_SD  macro  include/linux/pci_ids.h  2178  #define PCI_DEVICE_ID_ENE_CB714_SD 0x0750
PCI_DEVICE_ID_ENE_CB714_SD_2  macro  include/linux/pci_ids.h  2179  #define PCI_DEVICE_ID_ENE_CB714_SD_2 0x0751
PCI_DEVICE_ID_ENE_1211  macro  include/linux/pci_ids.h  2180  #define PCI_DEVICE_ID_ENE_1211 0x1211
PCI_DEVICE_ID_ENE_1225  macro  include/linux/pci_ids.h  2181  #define PCI_DEVICE_ID_ENE_1225 0x1225
PCI_DEVICE_ID_ENE_1410  macro  include/linux/pci_ids.h  2182  #define PCI_DEVICE_ID_ENE_1410 0x1410
PCI_DEVICE_ID_ENE_710  macro  include/linux/pci_ids.h  2183  #define PCI_DEVICE_ID_ENE_710 0x1411
PCI_DEVICE_ID_ENE_712  macro  include/linux/pci_ids.h  2184  #define PCI_DEVICE_ID_ENE_712 0x1412
PCI_DEVICE_ID_ENE_1420  macro  include/linux/pci_ids.h  2185  #define PCI_DEVICE_ID_ENE_1420 0x1420
PCI_DEVICE_ID_ENE_720  macro  include/linux/pci_ids.h  2186  #define PCI_DEVICE_ID_ENE_720 0x1421
PCI_DEVICE_ID_ENE_722  macro  include/linux/pci_ids.h  2187  #define PCI_DEVICE_ID_ENE_722 0x1422
PCI_SUBVENDOR_ID_PERLE  macro  include/linux/pci_ids.h  2189  #define PCI_SUBVENDOR_ID_PERLE 0x155f
PCI_SUBDEVICE_ID_PCI_RAS4  macro  include/linux/pci_ids.h  2190  #define PCI_SUBDEVICE_ID_PCI_RAS4 0xf001
PCI_SUBDEVICE_ID_PCI_RAS8  macro  include/linux/pci_ids.h  2191  #define PCI_SUBDEVICE_ID_PCI_RAS8 0xf010
PCI_VENDOR_ID_SYBA  macro  include/linux/pci_ids.h  2193  #define PCI_VENDOR_ID_SYBA 0x1592
PCI_DEVICE_ID_SYBA_2P_EPP  macro  include/linux/pci_ids.h  2194  #define PCI_DEVICE_ID_SYBA_2P_EPP 0x0782
PCI_DEVICE_ID_SYBA_1P_ECP  macro  include/linux/pci_ids.h  2195  #define PCI_DEVICE_ID_SYBA_1P_ECP 0x0783
PCI_VENDOR_ID_MORETON  macro  include/linux/pci_ids.h  2197  #define PCI_VENDOR_ID_MORETON 0x15aa
PCI_DEVICE_ID_RASTEL_2PORT  macro  include/linux/pci_ids.h  2198  #define PCI_DEVICE_ID_RASTEL_2PORT 0x2000
PCI_VENDOR_ID_ZOLTRIX  macro  include/linux/pci_ids.h  2200  #define PCI_VENDOR_ID_ZOLTRIX 0x15b0
PCI_DEVICE_ID_ZOLTRIX_2BD0  macro  include/linux/pci_ids.h  2201  #define PCI_DEVICE_ID_ZOLTRIX_2BD0 0x2bd0
PCI_VENDOR_ID_MELLANOX  macro  include/linux/pci_ids.h  2203  #define PCI_VENDOR_ID_MELLANOX 0x15b3
PCI_DEVICE_ID_MELLANOX_TAVOR  macro  include/linux/pci_ids.h  2204  #define PCI_DEVICE_ID_MELLANOX_TAVOR 0x5a44
PCI_DEVICE_ID_MELLANOX_TAVOR_BRIDGE  macro  include/linux/pci_ids.h  2205  #define PCI_DEVICE_ID_MELLANOX_TAVOR_BRIDGE 0x5a46
PCI_DEVICE_ID_MELLANOX_ARBEL_COMPAT  macro  include/linux/pci_ids.h  2206  #define PCI_DEVICE_ID_MELLANOX_ARBEL_COMPAT 0x6278
PCI_DEVICE_ID_MELLANOX_ARBEL  macro  include/linux/pci_ids.h  2207  #define PCI_DEVICE_ID_MELLANOX_ARBEL 0x6282
PCI_DEVICE_ID_MELLANOX_SINAI_OLD  macro  include/linux/pci_ids.h  2208  #define PCI_DEVICE_ID_MELLANOX_SINAI_OLD 0x5e8c
PCI_DEVICE_ID_MELLANOX_SINAI  macro  include/linux/pci_ids.h  2209  #define PCI_DEVICE_ID_MELLANOX_SINAI 0x6274
PCI_VENDOR_ID_DFI  macro  include/linux/pci_ids.h  2211  #define PCI_VENDOR_ID_DFI 0x15bd
PCI_VENDOR_ID_QUICKNET  macro  include/linux/pci_ids.h  2213  #define PCI_VENDOR_ID_QUICKNET 0x15e2
PCI_DEVICE_ID_QUICKNET_XJ  macro  include/linux/pci_ids.h  2214  #define PCI_DEVICE_ID_QUICKNET_XJ 0x0500
PCI_VENDOR_ID_ADDIDATA_OLD  macro  include/linux/pci_ids.h  2219  #define PCI_VENDOR_ID_ADDIDATA_OLD 0x10E8
PCI_VENDOR_ID_ADDIDATA  macro  include/linux/pci_ids.h  2220  #define PCI_VENDOR_ID_ADDIDATA 0x15B8
PCI_DEVICE_ID_ADDIDATA_APCI7500  macro  include/linux/pci_ids.h  2221  #define PCI_DEVICE_ID_ADDIDATA_APCI7500 0x7000
PCI_DEVICE_ID_ADDIDATA_APCI7420  macro  include/linux/pci_ids.h  2222  #define PCI_DEVICE_ID_ADDIDATA_APCI7420 0x7001
PCI_DEVICE_ID_ADDIDATA_APCI7300  macro  include/linux/pci_ids.h  2223  #define PCI_DEVICE_ID_ADDIDATA_APCI7300 0x7002
PCI_DEVICE_ID_ADDIDATA_APCI7800  macro  include/linux/pci_ids.h  2224  #define PCI_DEVICE_ID_ADDIDATA_APCI7800 0x818E
PCI_DEVICE_ID_ADDIDATA_APCI7500_2  macro  include/linux/pci_ids.h  2225  #define PCI_DEVICE_ID_ADDIDATA_APCI7500_2 0x7009
PCI_DEVICE_ID_ADDIDATA_APCI7420_2  macro  include/linux/pci_ids.h  2226  #define PCI_DEVICE_ID_ADDIDATA_APCI7420_2 0x700A
PCI_DEVICE_ID_ADDIDATA_APCI7300_2  macro  include/linux/pci_ids.h  2227  #define PCI_DEVICE_ID_ADDIDATA_APCI7300_2 0x700B
PCI_DEVICE_ID_ADDIDATA_APCI7500_3  macro  include/linux/pci_ids.h  2228  #define PCI_DEVICE_ID_ADDIDATA_APCI7500_3 0x700C
PCI_DEVICE_ID_ADDIDATA_APCI7420_3  macro  include/linux/pci_ids.h  2229  #define PCI_DEVICE_ID_ADDIDATA_APCI7420_3 0x700D
PCI_DEVICE_ID_ADDIDATA_APCI7300_3  macro  include/linux/pci_ids.h  2230  #define PCI_DEVICE_ID_ADDIDATA_APCI7300_3 0x700E
PCI_DEVICE_ID_ADDIDATA_APCI7800_3  macro  include/linux/pci_ids.h  2231  #define PCI_DEVICE_ID_ADDIDATA_APCI7800_3 0x700F
PCI_DEVICE_ID_ADDIDATA_APCIe7300  macro  include/linux/pci_ids.h  2232  #define PCI_DEVICE_ID_ADDIDATA_APCIe7300 0x7010
PCI_DEVICE_ID_ADDIDATA_APCIe7420  macro  include/linux/pci_ids.h  2233  #define PCI_DEVICE_ID_ADDIDATA_APCIe7420 0x7011
PCI_DEVICE_ID_ADDIDATA_APCIe7500  macro  include/linux/pci_ids.h  2234  #define PCI_DEVICE_ID_ADDIDATA_APCIe7500 0x7012
PCI_DEVICE_ID_ADDIDATA_APCIe7800  macro  include/linux/pci_ids.h  2235  #define PCI_DEVICE_ID_ADDIDATA_APCIe7800 0x7013
PCI_VENDOR_ID_PDC  macro  include/linux/pci_ids.h  2237  #define PCI_VENDOR_ID_PDC 0x15e9
PCI_VENDOR_ID_FARSITE  macro  include/linux/pci_ids.h  2239  #define PCI_VENDOR_ID_FARSITE 0x1619
PCI_DEVICE_ID_FARSITE_T2P  macro  include/linux/pci_ids.h  2240  #define PCI_DEVICE_ID_FARSITE_T2P 0x0400
PCI_DEVICE_ID_FARSITE_T4P  macro  include/linux/pci_ids.h  2241  #define PCI_DEVICE_ID_FARSITE_T4P 0x0440
PCI_DEVICE_ID_FARSITE_T1U  macro  include/linux/pci_ids.h  2242  #define PCI_DEVICE_ID_FARSITE_T1U 0x0610
PCI_DEVICE_ID_FARSITE_T2U  macro  include/linux/pci_ids.h  2243  #define PCI_DEVICE_ID_FARSITE_T2U 0x0620
PCI_DEVICE_ID_FARSITE_T4U  macro  include/linux/pci_ids.h  2244  #define PCI_DEVICE_ID_FARSITE_T4U 0x0640
PCI_DEVICE_ID_FARSITE_TE1  macro  include/linux/pci_ids.h  2245  #define PCI_DEVICE_ID_FARSITE_TE1 0x1610
PCI_DEVICE_ID_FARSITE_TE1C  macro  include/linux/pci_ids.h  2246  #define PCI_DEVICE_ID_FARSITE_TE1C 0x1612
PCI_VENDOR_ID_ARIMA  macro  include/linux/pci_ids.h  2248  #define PCI_VENDOR_ID_ARIMA 0x161f
PCI_VENDOR_ID_BROCADE  macro  include/linux/pci_ids.h  2250  #define PCI_VENDOR_ID_BROCADE 0x1657
PCI_DEVICE_ID_BROCADE_CT  macro  include/linux/pci_ids.h  2251  #define PCI_DEVICE_ID_BROCADE_CT 0x0014
PCI_DEVICE_ID_BROCADE_FC_8G1P  macro  include/linux/pci_ids.h  2252  #define PCI_DEVICE_ID_BROCADE_FC_8G1P 0x0017
PCI_DEVICE_ID_BROCADE_CT_FC  macro  include/linux/pci_ids.h  2253  #define PCI_DEVICE_ID_BROCADE_CT_FC 0x0021
PCI_VENDOR_ID_SIBYTE  macro  include/linux/pci_ids.h  2255  #define PCI_VENDOR_ID_SIBYTE 0x166d
PCI_DEVICE_ID_BCM1250_PCI  macro  include/linux/pci_ids.h  2256  #define PCI_DEVICE_ID_BCM1250_PCI 0x0001
PCI_DEVICE_ID_BCM1250_HT  macro  include/linux/pci_ids.h  2257  #define PCI_DEVICE_ID_BCM1250_HT 0x0002
PCI_VENDOR_ID_ATHEROS  macro  include/linux/pci_ids.h  2259  #define PCI_VENDOR_ID_ATHEROS 0x168c
PCI_VENDOR_ID_NETCELL  macro  include/linux/pci_ids.h  2261  #define PCI_VENDOR_ID_NETCELL 0x169c
PCI_DEVICE_ID_REVOLUTION  macro  include/linux/pci_ids.h  2262  #define PCI_DEVICE_ID_REVOLUTION 0x0044
PCI_VENDOR_ID_CENATEK  macro  include/linux/pci_ids.h  2264  #define PCI_VENDOR_ID_CENATEK 0x16CA
PCI_DEVICE_ID_CENATEK_IDE  macro  include/linux/pci_ids.h  2265  #define PCI_DEVICE_ID_CENATEK_IDE 0x0001
PCI_VENDOR_ID_VITESSE  macro  include/linux/pci_ids.h  2267  #define PCI_VENDOR_ID_VITESSE 0x1725
PCI_DEVICE_ID_VITESSE_VSC7174  macro  include/linux/pci_ids.h  2268  #define PCI_DEVICE_ID_VITESSE_VSC7174 0x7174
PCI_VENDOR_ID_LINKSYS  macro  include/linux/pci_ids.h  2270  #define PCI_VENDOR_ID_LINKSYS 0x1737
PCI_DEVICE_ID_LINKSYS_EG1064  macro  include/linux/pci_ids.h  2271  #define PCI_DEVICE_ID_LINKSYS_EG1064 0x1064
PCI_VENDOR_ID_ALTIMA  macro  include/linux/pci_ids.h  2273  #define PCI_VENDOR_ID_ALTIMA 0x173b
PCI_DEVICE_ID_ALTIMA_AC1000  macro  include/linux/pci_ids.h  2274  #define PCI_DEVICE_ID_ALTIMA_AC1000 0x03e8
PCI_DEVICE_ID_ALTIMA_AC1001  macro  include/linux/pci_ids.h  2275  #define PCI_DEVICE_ID_ALTIMA_AC1001 0x03e9
PCI_DEVICE_ID_ALTIMA_AC9100  macro  include/linux/pci_ids.h  2276  #define PCI_DEVICE_ID_ALTIMA_AC9100 0x03ea
PCI_DEVICE_ID_ALTIMA_AC1003  macro  include/linux/pci_ids.h  2277  #define PCI_DEVICE_ID_ALTIMA_AC1003 0x03eb
PCI_VENDOR_ID_BELKIN  macro  include/linux/pci_ids.h  2279  #define PCI_VENDOR_ID_BELKIN 0x1799
PCI_DEVICE_ID_BELKIN_F5D7010V7  macro  include/linux/pci_ids.h  2280  #define PCI_DEVICE_ID_BELKIN_F5D7010V7 0x701f
PCI_VENDOR_ID_RDC  macro  include/linux/pci_ids.h  2282  #define PCI_VENDOR_ID_RDC 0x17f3
PCI_DEVICE_ID_RDC_R6020  macro  include/linux/pci_ids.h  2283  #define PCI_DEVICE_ID_RDC_R6020 0x6020
PCI_DEVICE_ID_RDC_R6030  macro  include/linux/pci_ids.h  2284  #define PCI_DEVICE_ID_RDC_R6030 0x6030
PCI_DEVICE_ID_RDC_R6040  macro  include/linux/pci_ids.h  2285  #define PCI_DEVICE_ID_RDC_R6040 0x6040
PCI_DEVICE_ID_RDC_R6060  macro  include/linux/pci_ids.h  2286  #define PCI_DEVICE_ID_RDC_R6060 0x6060
PCI_DEVICE_ID_RDC_R6061  macro  include/linux/pci_ids.h  2287  #define PCI_DEVICE_ID_RDC_R6061 0x6061
PCI_DEVICE_ID_RDC_D1010  macro  include/linux/pci_ids.h  2288  #define PCI_DEVICE_ID_RDC_D1010 0x1010
PCI_VENDOR_ID_LENOVO  macro  include/linux/pci_ids.h  2290  #define PCI_VENDOR_ID_LENOVO 0x17aa
PCI_VENDOR_ID_ARECA  macro  include/linux/pci_ids.h  2292  #define PCI_VENDOR_ID_ARECA 0x17d3
PCI_DEVICE_ID_ARECA_1110  macro  include/linux/pci_ids.h  2293  #define PCI_DEVICE_ID_ARECA_1110 0x1110
PCI_DEVICE_ID_ARECA_1120  macro  include/linux/pci_ids.h  2294  #define PCI_DEVICE_ID_ARECA_1120 0x1120
PCI_DEVICE_ID_ARECA_1130  macro  include/linux/pci_ids.h  2295  #define PCI_DEVICE_ID_ARECA_1130 0x1130
PCI_DEVICE_ID_ARECA_1160  macro  include/linux/pci_ids.h  2296  #define PCI_DEVICE_ID_ARECA_1160 0x1160
PCI_DEVICE_ID_ARECA_1170  macro  include/linux/pci_ids.h  2297  #define PCI_DEVICE_ID_ARECA_1170 0x1170
PCI_DEVICE_ID_ARECA_1200  macro  include/linux/pci_ids.h  2298  #define PCI_DEVICE_ID_ARECA_1200 0x1200
PCI_DEVICE_ID_ARECA_1201  macro  include/linux/pci_ids.h  2299  #define PCI_DEVICE_ID_ARECA_1201 0x1201
PCI_DEVICE_ID_ARECA_1202  macro  include/linux/pci_ids.h  2300  #define PCI_DEVICE_ID_ARECA_1202 0x1202
PCI_DEVICE_ID_ARECA_1210  macro  include/linux/pci_ids.h  2301  #define PCI_DEVICE_ID_ARECA_1210 0x1210
PCI_DEVICE_ID_ARECA_1220  macro  include/linux/pci_ids.h  2302  #define PCI_DEVICE_ID_ARECA_1220 0x1220
PCI_DEVICE_ID_ARECA_1230  macro  include/linux/pci_ids.h  2303  #define PCI_DEVICE_ID_ARECA_1230 0x1230
PCI_DEVICE_ID_ARECA_1260  macro  include/linux/pci_ids.h  2304  #define PCI_DEVICE_ID_ARECA_1260 0x1260
PCI_DEVICE_ID_ARECA_1270  macro  include/linux/pci_ids.h  2305  #define PCI_DEVICE_ID_ARECA_1270 0x1270
PCI_DEVICE_ID_ARECA_1280  macro  include/linux/pci_ids.h  2306  #define PCI_DEVICE_ID_ARECA_1280 0x1280
PCI_DEVICE_ID_ARECA_1380  macro  include/linux/pci_ids.h  2307  #define PCI_DEVICE_ID_ARECA_1380 0x1380
PCI_DEVICE_ID_ARECA_1381  macro  include/linux/pci_ids.h  2308  #define PCI_DEVICE_ID_ARECA_1381 0x1381
PCI_DEVICE_ID_ARECA_1680  macro  include/linux/pci_ids.h  2309  #define PCI_DEVICE_ID_ARECA_1680 0x1680
PCI_DEVICE_ID_ARECA_1681  macro  include/linux/pci_ids.h  2310  #define PCI_DEVICE_ID_ARECA_1681 0x1681
PCI_VENDOR_ID_S2IO  macro  include/linux/pci_ids.h  2312  #define PCI_VENDOR_ID_S2IO 0x17d5
PCI_DEVICE_ID_S2IO_WIN  macro  include/linux/pci_ids.h  2313  #define PCI_DEVICE_ID_S2IO_WIN 0x5731
PCI_DEVICE_ID_S2IO_UNI  macro  include/linux/pci_ids.h  2314  #define PCI_DEVICE_ID_S2IO_UNI 0x5831
PCI_DEVICE_ID_HERC_WIN  macro  include/linux/pci_ids.h  2315  #define PCI_DEVICE_ID_HERC_WIN 0x5732
PCI_DEVICE_ID_HERC_UNI  macro  include/linux/pci_ids.h  2316  #define PCI_DEVICE_ID_HERC_UNI 0x5832
PCI_VENDOR_ID_SITECOM  macro  include/linux/pci_ids.h  2318  #define PCI_VENDOR_ID_SITECOM 0x182d
PCI_DEVICE_ID_SITECOM_DC105V2  macro  include/linux/pci_ids.h  2319  #define PCI_DEVICE_ID_SITECOM_DC105V2 0x3069
PCI_VENDOR_ID_TOPSPIN  macro  include/linux/pci_ids.h  2321  #define PCI_VENDOR_ID_TOPSPIN 0x1867
PCI_VENDOR_ID_SILAN  macro  include/linux/pci_ids.h  2323  #define PCI_VENDOR_ID_SILAN 0x1904
PCI_VENDOR_ID_RENESAS  macro  include/linux/pci_ids.h  2325  #define PCI_VENDOR_ID_RENESAS 0x1912
PCI_DEVICE_ID_RENESAS_SH7781  macro  include/linux/pci_ids.h  2326  #define PCI_DEVICE_ID_RENESAS_SH7781 0x0001
PCI_DEVICE_ID_RENESAS_SH7780  macro  include/linux/pci_ids.h  2327  #define PCI_DEVICE_ID_RENESAS_SH7780 0x0002
PCI_DEVICE_ID_RENESAS_SH7763  macro  include/linux/pci_ids.h  2328  #define PCI_DEVICE_ID_RENESAS_SH7763 0x0004
PCI_DEVICE_ID_RENESAS_SH7785  macro  include/linux/pci_ids.h  2329  #define PCI_DEVICE_ID_RENESAS_SH7785 0x0007
PCI_DEVICE_ID_RENESAS_SH7786  macro  include/linux/pci_ids.h  2330  #define PCI_DEVICE_ID_RENESAS_SH7786 0x0010
PCI_VENDOR_ID_SOLARFLARE  macro  include/linux/pci_ids.h  2332  #define PCI_VENDOR_ID_SOLARFLARE 0x1924
PCI_DEVICE_ID_SOLARFLARE_SFC4000A_0  macro  include/linux/pci_ids.h  2333  #define PCI_DEVICE_ID_SOLARFLARE_SFC4000A_0 0x0703
PCI_DEVICE_ID_SOLARFLARE_SFC4000A_1  macro  include/linux/pci_ids.h  2334  #define PCI_DEVICE_ID_SOLARFLARE_SFC4000A_1 0x6703
PCI_DEVICE_ID_SOLARFLARE_SFC4000B  macro  include/linux/pci_ids.h  2335  #define PCI_DEVICE_ID_SOLARFLARE_SFC4000B 0x0710
PCI_VENDOR_ID_TDI  macro  include/linux/pci_ids.h  2337  #define PCI_VENDOR_ID_TDI 0x192E
PCI_DEVICE_ID_TDI_EHCI  macro  include/linux/pci_ids.h  2338  #define PCI_DEVICE_ID_TDI_EHCI 0x0101
PCI_VENDOR_ID_FREESCALE  macro  include/linux/pci_ids.h  2340  #define PCI_VENDOR_ID_FREESCALE 0x1957
PCI_DEVICE_ID_MPC8308  macro  include/linux/pci_ids.h  2341  #define PCI_DEVICE_ID_MPC8308 0xc006
PCI_DEVICE_ID_MPC8315E  macro  include/linux/pci_ids.h  2342  #define PCI_DEVICE_ID_MPC8315E 0x00b4
PCI_DEVICE_ID_MPC8315  macro  include/linux/pci_ids.h  2343  #define PCI_DEVICE_ID_MPC8315 0x00b5
PCI_DEVICE_ID_MPC8314E  macro  include/linux/pci_ids.h  2344  #define PCI_DEVICE_ID_MPC8314E 0x00b6
PCI_DEVICE_ID_MPC8314  macro  include/linux/pci_ids.h  2345  #define PCI_DEVICE_ID_MPC8314 0x00b7
PCI_DEVICE_ID_MPC8378E  macro  include/linux/pci_ids.h  2346  #define PCI_DEVICE_ID_MPC8378E 0x00c4
PCI_DEVICE_ID_MPC8378  macro  include/linux/pci_ids.h  2347  #define PCI_DEVICE_ID_MPC8378 0x00c5
PCI_DEVICE_ID_MPC8377E  macro  include/linux/pci_ids.h  2348  #define PCI_DEVICE_ID_MPC8377E 0x00c6
PCI_DEVICE_ID_MPC8377  macro  include/linux/pci_ids.h  2349  #define PCI_DEVICE_ID_MPC8377 0x00c7
PCI_DEVICE_ID_MPC8548E  macro  include/linux/pci_ids.h  2350  #define PCI_DEVICE_ID_MPC8548E 0x0012
PCI_DEVICE_ID_MPC8548  macro  include/linux/pci_ids.h  2351  #define PCI_DEVICE_ID_MPC8548 0x0013
PCI_DEVICE_ID_MPC8543E  macro  include/linux/pci_ids.h  2352  #define PCI_DEVICE_ID_MPC8543E 0x0014
PCI_DEVICE_ID_MPC8543  macro  include/linux/pci_ids.h  2353  #define PCI_DEVICE_ID_MPC8543 0x0015
PCI_DEVICE_ID_MPC8547E  macro  include/linux/pci_ids.h  2354  #define PCI_DEVICE_ID_MPC8547E 0x0018
PCI_DEVICE_ID_MPC8545E  macro  include/linux/pci_ids.h  2355  #define PCI_DEVICE_ID_MPC8545E 0x0019
PCI_DEVICE_ID_MPC8545  macro  include/linux/pci_ids.h  2356  #define PCI_DEVICE_ID_MPC8545 0x001a
PCI_DEVICE_ID_MPC8569E  macro  include/linux/pci_ids.h  2357  #define PCI_DEVICE_ID_MPC8569E 0x0061
PCI_DEVICE_ID_MPC8569  macro  include/linux/pci_ids.h  2358  #define PCI_DEVICE_ID_MPC8569 0x0060
PCI_DEVICE_ID_MPC8568E  macro  include/linux/pci_ids.h  2359  #define PCI_DEVICE_ID_MPC8568E 0x0020
PCI_DEVICE_ID_MPC8568  macro  include/linux/pci_ids.h  2360  #define PCI_DEVICE_ID_MPC8568 0x0021
PCI_DEVICE_ID_MPC8567E  macro  include/linux/pci_ids.h  2361  #define PCI_DEVICE_ID_MPC8567E 0x0022
PCI_DEVICE_ID_MPC8567  macro  include/linux/pci_ids.h  2362  #define PCI_DEVICE_ID_MPC8567 0x0023
PCI_DEVICE_ID_MPC8533E  macro  include/linux/pci_ids.h  2363  #define PCI_DEVICE_ID_MPC8533E 0x0030
PCI_DEVICE_ID_MPC8533  macro  include/linux/pci_ids.h  2364  #define PCI_DEVICE_ID_MPC8533 0x0031
PCI_DEVICE_ID_MPC8544E  macro  include/linux/pci_ids.h  2365  #define PCI_DEVICE_ID_MPC8544E 0x0032
PCI_DEVICE_ID_MPC8544  macro  include/linux/pci_ids.h  2366  #define PCI_DEVICE_ID_MPC8544 0x0033
PCI_DEVICE_ID_MPC8572E  macro  include/linux/pci_ids.h  2367  #define PCI_DEVICE_ID_MPC8572E 0x0040
PCI_DEVICE_ID_MPC8572  macro  include/linux/pci_ids.h  2368  #define PCI_DEVICE_ID_MPC8572 0x0041
PCI_DEVICE_ID_MPC8536E  macro  include/linux/pci_ids.h  2369  #define PCI_DEVICE_ID_MPC8536E 0x0050
PCI_DEVICE_ID_MPC8536  macro  include/linux/pci_ids.h  2370  #define PCI_DEVICE_ID_MPC8536 0x0051
PCI_DEVICE_ID_P2020E  macro  include/linux/pci_ids.h  2371  #define PCI_DEVICE_ID_P2020E 0x0070
PCI_DEVICE_ID_P2020  macro  include/linux/pci_ids.h  2372  #define PCI_DEVICE_ID_P2020 0x0071
PCI_DEVICE_ID_P2010E  macro  include/linux/pci_ids.h  2373  #define PCI_DEVICE_ID_P2010E 0x0078
PCI_DEVICE_ID_P2010  macro  include/linux/pci_ids.h  2374  #define PCI_DEVICE_ID_P2010 0x0079
PCI_DEVICE_ID_P1020E  macro  include/linux/pci_ids.h  2375  #define PCI_DEVICE_ID_P1020E 0x0100
PCI_DEVICE_ID_P1020  macro  include/linux/pci_ids.h  2376  #define PCI_DEVICE_ID_P1020 0x0101
PCI_DEVICE_ID_P1021E  macro  include/linux/pci_ids.h  2377  #define PCI_DEVICE_ID_P1021E 0x0102
PCI_DEVICE_ID_P1021  macro  include/linux/pci_ids.h  2378  #define PCI_DEVICE_ID_P1021 0x0103
PCI_DEVICE_ID_P1011E  macro  include/linux/pci_ids.h  2379  #define PCI_DEVICE_ID_P1011E 0x0108
PCI_DEVICE_ID_P1011  macro  include/linux/pci_ids.h  2380  #define PCI_DEVICE_ID_P1011 0x0109
PCI_DEVICE_ID_P1022E  macro  include/linux/pci_ids.h  2381  #define PCI_DEVICE_ID_P1022E 0x0110
PCI_DEVICE_ID_P1022  macro  include/linux/pci_ids.h  2382  #define PCI_DEVICE_ID_P1022 0x0111
PCI_DEVICE_ID_P1013E  macro  include/linux/pci_ids.h  2383  #define PCI_DEVICE_ID_P1013E 0x0118
PCI_DEVICE_ID_P1013  macro  include/linux/pci_ids.h  2384  #define PCI_DEVICE_ID_P1013 0x0119
PCI_DEVICE_ID_P4080E  macro  include/linux/pci_ids.h  2385  #define PCI_DEVICE_ID_P4080E 0x0400
PCI_DEVICE_ID_P4080  macro  include/linux/pci_ids.h  2386  #define PCI_DEVICE_ID_P4080 0x0401
PCI_DEVICE_ID_P4040E  macro  include/linux/pci_ids.h  2387  #define PCI_DEVICE_ID_P4040E 0x0408
PCI_DEVICE_ID_P4040  macro  include/linux/pci_ids.h  2388  #define PCI_DEVICE_ID_P4040 0x0409
PCI_DEVICE_ID_P2040E  macro  include/linux/pci_ids.h  2389  #define PCI_DEVICE_ID_P2040E 0x0410
PCI_DEVICE_ID_P2040  macro  include/linux/pci_ids.h  2390  #define PCI_DEVICE_ID_P2040 0x0411
PCI_DEVICE_ID_P3041E  macro  include/linux/pci_ids.h  2391  #define PCI_DEVICE_ID_P3041E 0x041E
PCI_DEVICE_ID_P3041  macro  include/linux/pci_ids.h  2392  #define PCI_DEVICE_ID_P3041 0x041F
PCI_DEVICE_ID_P5020E  macro  include/linux/pci_ids.h  2393  #define PCI_DEVICE_ID_P5020E 0x0420
PCI_DEVICE_ID_P5020  macro  include/linux/pci_ids.h  2394  #define PCI_DEVICE_ID_P5020 0x0421
PCI_DEVICE_ID_P5010E  macro  include/linux/pci_ids.h  2395  #define PCI_DEVICE_ID_P5010E 0x0428
PCI_DEVICE_ID_P5010  macro  include/linux/pci_ids.h  2396  #define PCI_DEVICE_ID_P5010 0x0429
PCI_DEVICE_ID_MPC8641  macro  include/linux/pci_ids.h  2397  #define PCI_DEVICE_ID_MPC8641 0x7010
PCI_DEVICE_ID_MPC8641D  macro  include/linux/pci_ids.h  2398  #define PCI_DEVICE_ID_MPC8641D 0x7011
PCI_DEVICE_ID_MPC8610  macro  include/linux/pci_ids.h  2399  #define PCI_DEVICE_ID_MPC8610 0x7018
PCI_VENDOR_ID_PASEMI  macro  include/linux/pci_ids.h  2401  #define PCI_VENDOR_ID_PASEMI 0x1959
PCI_VENDOR_ID_ATTANSIC  macro  include/linux/pci_ids.h  2403  #define PCI_VENDOR_ID_ATTANSIC 0x1969
PCI_DEVICE_ID_ATTANSIC_L1  macro  include/linux/pci_ids.h  2404  #define PCI_DEVICE_ID_ATTANSIC_L1 0x1048
PCI_DEVICE_ID_ATTANSIC_L2  macro  include/linux/pci_ids.h  2405  #define PCI_DEVICE_ID_ATTANSIC_L2 0x2048
PCI_VENDOR_ID_JMICRON  macro  include/linux/pci_ids.h  2407  #define PCI_VENDOR_ID_JMICRON 0x197B
PCI_DEVICE_ID_JMICRON_JMB360  macro  include/linux/pci_ids.h  2408  #define PCI_DEVICE_ID_JMICRON_JMB360 0x2360
PCI_DEVICE_ID_JMICRON_JMB361  macro  include/linux/pci_ids.h  2409  #define PCI_DEVICE_ID_JMICRON_JMB361 0x2361
PCI_DEVICE_ID_JMICRON_JMB362  macro  include/linux/pci_ids.h  2410  #define PCI_DEVICE_ID_JMICRON_JMB362 0x2362
PCI_DEVICE_ID_JMICRON_JMB363  macro  include/linux/pci_ids.h  2411  #define PCI_DEVICE_ID_JMICRON_JMB363 0x2363
PCI_DEVICE_ID_JMICRON_JMB364  macro  include/linux/pci_ids.h  2412  #define PCI_DEVICE_ID_JMICRON_JMB364 0x2364
PCI_DEVICE_ID_JMICRON_JMB365  macro  include/linux/pci_ids.h  2413  #define PCI_DEVICE_ID_JMICRON_JMB365 0x2365
PCI_DEVICE_ID_JMICRON_JMB366  macro  include/linux/pci_ids.h  2414  #define PCI_DEVICE_ID_JMICRON_JMB366 0x2366
PCI_DEVICE_ID_JMICRON_JMB368  macro  include/linux/pci_ids.h  2415  #define PCI_DEVICE_ID_JMICRON_JMB368 0x2368
PCI_DEVICE_ID_JMICRON_JMB369  macro  include/linux/pci_ids.h  2416  #define PCI_DEVICE_ID_JMICRON_JMB369 0x2369
PCI_DEVICE_ID_JMICRON_JMB38X_SD  macro  include/linux/pci_ids.h  2417  #define PCI_DEVICE_ID_JMICRON_JMB38X_SD 0x2381
PCI_DEVICE_ID_JMICRON_JMB38X_MMC  macro  include/linux/pci_ids.h  2418  #define PCI_DEVICE_ID_JMICRON_JMB38X_MMC 0x2382
PCI_DEVICE_ID_JMICRON_JMB38X_MS  macro  include/linux/pci_ids.h  2419  #define PCI_DEVICE_ID_JMICRON_JMB38X_MS 0x2383
PCI_DEVICE_ID_JMICRON_JMB385_MS  macro  include/linux/pci_ids.h  2420  #define PCI_DEVICE_ID_JMICRON_JMB385_MS 0x2388
PCI_DEVICE_ID_JMICRON_JMB388_SD  macro  include/linux/pci_ids.h  2421  #define PCI_DEVICE_ID_JMICRON_JMB388_SD 0x2391
PCI_DEVICE_ID_JMICRON_JMB388_ESD  macro  include/linux/pci_ids.h  2422  #define PCI_DEVICE_ID_JMICRON_JMB388_ESD 0x2392
PCI_DEVICE_ID_JMICRON_JMB390_MS  macro  include/linux/pci_ids.h  2423  #define PCI_DEVICE_ID_JMICRON_JMB390_MS 0x2393
PCI_VENDOR_ID_KORENIX  macro  include/linux/pci_ids.h  2425  #define PCI_VENDOR_ID_KORENIX 0x1982
PCI_DEVICE_ID_KORENIX_JETCARDF0  macro  include/linux/pci_ids.h  2426  #define PCI_DEVICE_ID_KORENIX_JETCARDF0 0x1600
PCI_DEVICE_ID_KORENIX_JETCARDF1  macro  include/linux/pci_ids.h  2427  #define PCI_DEVICE_ID_KORENIX_JETCARDF1 0x16ff
PCI_DEVICE_ID_KORENIX_JETCARDF2  macro  include/linux/pci_ids.h  2428  #define PCI_DEVICE_ID_KORENIX_JETCARDF2 0x1700
PCI_DEVICE_ID_KORENIX_JETCARDF3  macro  include/linux/pci_ids.h  2429  #define PCI_DEVICE_ID_KORENIX_JETCARDF3 0x17ff
PCI_VENDOR_ID_QMI  macro  include/linux/pci_ids.h  2431  #define PCI_VENDOR_ID_QMI 0x1a32
PCI_VENDOR_ID_AZWAVE  macro  include/linux/pci_ids.h  2433  #define PCI_VENDOR_ID_AZWAVE 0x1a3b
PCI_VENDOR_ID_ASMEDIA  macro  include/linux/pci_ids.h  2435  #define PCI_VENDOR_ID_ASMEDIA 0x1b21
PCI_VENDOR_ID_TEKRAM  macro  include/linux/pci_ids.h  2437  #define PCI_VENDOR_ID_TEKRAM 0x1de1
PCI_DEVICE_ID_TEKRAM_DC290  macro  include/linux/pci_ids.h  2438  #define PCI_DEVICE_ID_TEKRAM_DC290 0xdc29
PCI_VENDOR_ID_TEHUTI  macro  include/linux/pci_ids.h  2440  #define PCI_VENDOR_ID_TEHUTI 0x1fc9
PCI_DEVICE_ID_TEHUTI_3009  macro  include/linux/pci_ids.h  2441  #define PCI_DEVICE_ID_TEHUTI_3009 0x3009
PCI_DEVICE_ID_TEHUTI_3010  macro  include/linux/pci_ids.h  2442  #define PCI_DEVICE_ID_TEHUTI_3010 0x3010
PCI_DEVICE_ID_TEHUTI_3014  macro  include/linux/pci_ids.h  2443  #define PCI_DEVICE_ID_TEHUTI_3014 0x3014
PCI_VENDOR_ID_HINT  macro  include/linux/pci_ids.h  2445  #define PCI_VENDOR_ID_HINT 0x3388
PCI_DEVICE_ID_HINT_VXPROII_IDE  macro  include/linux/pci_ids.h  2446  #define PCI_DEVICE_ID_HINT_VXPROII_IDE 0x8013
PCI_VENDOR_ID_3DLABS  macro  include/linux/pci_ids.h  2448  #define PCI_VENDOR_ID_3DLABS 0x3d3d
PCI_DEVICE_ID_3DLABS_PERMEDIA2  macro  include/linux/pci_ids.h  2449  #define PCI_DEVICE_ID_3DLABS_PERMEDIA2 0x0007
PCI_DEVICE_ID_3DLABS_PERMEDIA2V  macro  include/linux/pci_ids.h  2450  #define PCI_DEVICE_ID_3DLABS_PERMEDIA2V 0x0009
PCI_VENDOR_ID_NETXEN  macro  include/linux/pci_ids.h  2452  #define PCI_VENDOR_ID_NETXEN 0x4040
PCI_DEVICE_ID_NX2031_10GXSR  macro  include/linux/pci_ids.h  2453  #define PCI_DEVICE_ID_NX2031_10GXSR 0x0001
PCI_DEVICE_ID_NX2031_10GCX4  macro  include/linux/pci_ids.h  2454  #define PCI_DEVICE_ID_NX2031_10GCX4 0x0002
PCI_DEVICE_ID_NX2031_4GCU  macro  include/linux/pci_ids.h  2455  #define PCI_DEVICE_ID_NX2031_4GCU 0x0003
PCI_DEVICE_ID_NX2031_IMEZ  macro  include/linux/pci_ids.h  2456  #define PCI_DEVICE_ID_NX2031_IMEZ 0x0004
PCI_DEVICE_ID_NX2031_HMEZ  macro  include/linux/pci_ids.h  2457  #define PCI_DEVICE_ID_NX2031_HMEZ 0x0005
PCI_DEVICE_ID_NX2031_XG_MGMT  macro  include/linux/pci_ids.h  2458  #define PCI_DEVICE_ID_NX2031_XG_MGMT 0x0024
PCI_DEVICE_ID_NX2031_XG_MGMT2  macro  include/linux/pci_ids.h  2459  #define PCI_DEVICE_ID_NX2031_XG_MGMT2 0x0025
PCI_DEVICE_ID_NX3031  macro  include/linux/pci_ids.h  2460  #define PCI_DEVICE_ID_NX3031 0x0100
PCI_VENDOR_ID_AKS  macro  include/linux/pci_ids.h  2462  #define PCI_VENDOR_ID_AKS 0x416c
PCI_DEVICE_ID_AKS_ALADDINCARD  macro  include/linux/pci_ids.h  2463  #define PCI_DEVICE_ID_AKS_ALADDINCARD 0x0100
PCI_VENDOR_ID_ACCESSIO  macro  include/linux/pci_ids.h  2465  #define PCI_VENDOR_ID_ACCESSIO 0x494f
PCI_DEVICE_ID_ACCESSIO_WDG_CSM  macro  include/linux/pci_ids.h  2466  #define PCI_DEVICE_ID_ACCESSIO_WDG_CSM 0x22c0
PCI_VENDOR_ID_S3  macro  include/linux/pci_ids.h  2468  #define PCI_VENDOR_ID_S3 0x5333
PCI_DEVICE_ID_S3_TRIO  macro  include/linux/pci_ids.h  2469  #define PCI_DEVICE_ID_S3_TRIO 0x8811
PCI_DEVICE_ID_S3_868  macro  include/linux/pci_ids.h  2470  #define PCI_DEVICE_ID_S3_868 0x8880
PCI_DEVICE_ID_S3_968  macro  include/linux/pci_ids.h  2471  #define PCI_DEVICE_ID_S3_968 0x88f0
PCI_DEVICE_ID_S3_SAVAGE4  macro  include/linux/pci_ids.h  2472  #define PCI_DEVICE_ID_S3_SAVAGE4 0x8a25
PCI_DEVICE_ID_S3_PROSAVAGE8  macro  include/linux/pci_ids.h  2473  #define PCI_DEVICE_ID_S3_PROSAVAGE8 0x8d04
PCI_DEVICE_ID_S3_SONICVIBES  macro  include/linux/pci_ids.h  2474  #define PCI_DEVICE_ID_S3_SONICVIBES 0xca00
PCI_VENDOR_ID_DUNORD  macro  include/linux/pci_ids.h  2476  #define PCI_VENDOR_ID_DUNORD 0x5544
PCI_DEVICE_ID_DUNORD_I3000  macro  include/linux/pci_ids.h  2477  #define PCI_DEVICE_ID_DUNORD_I3000 0x0001
PCI_VENDOR_ID_DCI  macro  include/linux/pci_ids.h  2479  #define PCI_VENDOR_ID_DCI 0x6666
PCI_DEVICE_ID_DCI_PCCOM4  macro  include/linux/pci_ids.h  2480  #define PCI_DEVICE_ID_DCI_PCCOM4 0x0001
PCI_DEVICE_ID_DCI_PCCOM8  macro  include/linux/pci_ids.h  2481  #define PCI_DEVICE_ID_DCI_PCCOM8 0x0002
PCI_DEVICE_ID_DCI_PCCOM2  macro  include/linux/pci_ids.h  2482  #define PCI_DEVICE_ID_DCI_PCCOM2 0x0004
PCI_VENDOR_ID_INTEL  macro  include/linux/pci_ids.h  2484  #define PCI_VENDOR_ID_INTEL 0x8086
PCI_DEVICE_ID_INTEL_EESSC  macro  include/linux/pci_ids.h  2485  #define PCI_DEVICE_ID_INTEL_EESSC 0x0008
PCI_DEVICE_ID_INTEL_PXHD_0  macro  include/linux/pci_ids.h  2486  #define PCI_DEVICE_ID_INTEL_PXHD_0 0x0320
PCI_DEVICE_ID_INTEL_PXHD_1  macro  include/linux/pci_ids.h  2487  #define PCI_DEVICE_ID_INTEL_PXHD_1 0x0321
PCI_DEVICE_ID_INTEL_PXH_0  macro  include/linux/pci_ids.h  2488  #define PCI_DEVICE_ID_INTEL_PXH_0 0x0329
PCI_DEVICE_ID_INTEL_PXH_1  macro  include/linux/pci_ids.h  2489  #define PCI_DEVICE_ID_INTEL_PXH_1 0x032A
PCI_DEVICE_ID_INTEL_PXHV  macro  include/linux/pci_ids.h  2490  #define PCI_DEVICE_ID_INTEL_PXHV 0x032C
PCI_DEVICE_ID_INTEL_80332_0  macro  include/linux/pci_ids.h  2491  #define PCI_DEVICE_ID_INTEL_80332_0 0x0330
PCI_DEVICE_ID_INTEL_80332_1  macro  include/linux/pci_ids.h  2492  #define PCI_DEVICE_ID_INTEL_80332_1 0x0332
PCI_DEVICE_ID_INTEL_80333_0  macro  include/linux/pci_ids.h  2493  #define PCI_DEVICE_ID_INTEL_80333_0 0x0370
PCI_DEVICE_ID_INTEL_80333_1  macro  include/linux/pci_ids.h  2494  #define PCI_DEVICE_ID_INTEL_80333_1 0x0372
PCI_DEVICE_ID_INTEL_82375  macro  include/linux/pci_ids.h  2495  #define PCI_DEVICE_ID_INTEL_82375 0x0482
PCI_DEVICE_ID_INTEL_82424  macro  include/linux/pci_ids.h  2496  #define PCI_DEVICE_ID_INTEL_82424 0x0483
PCI_DEVICE_ID_INTEL_82378  macro  include/linux/pci_ids.h  2497  #define PCI_DEVICE_ID_INTEL_82378 0x0484
PCI_DEVICE_ID_INTEL_MRST_SD0  macro  include/linux/pci_ids.h  2498  #define PCI_DEVICE_ID_INTEL_MRST_SD0 0x0807
PCI_DEVICE_ID_INTEL_MRST_SD1  macro  include/linux/pci_ids.h  2499  #define PCI_DEVICE_ID_INTEL_MRST_SD1 0x0808
PCI_DEVICE_ID_INTEL_MFD_SD  macro  include/linux/pci_ids.h  2500  #define PCI_DEVICE_ID_INTEL_MFD_SD 0x0820
PCI_DEVICE_ID_INTEL_MFD_SDIO1  macro  include/linux/pci_ids.h  2501  #define PCI_DEVICE_ID_INTEL_MFD_SDIO1 0x0821
PCI_DEVICE_ID_INTEL_MFD_SDIO2  macro  include/linux/pci_ids.h  2502  #define PCI_DEVICE_ID_INTEL_MFD_SDIO2 0x0822
PCI_DEVICE_ID_INTEL_MFD_EMMC0  macro  include/linux/pci_ids.h  2503  #define PCI_DEVICE_ID_INTEL_MFD_EMMC0 0x0823
PCI_DEVICE_ID_INTEL_MFD_EMMC1  macro  include/linux/pci_ids.h  2504  #define PCI_DEVICE_ID_INTEL_MFD_EMMC1 0x0824
PCI_DEVICE_ID_INTEL_MRST_SD2  macro  include/linux/pci_ids.h  2505  #define PCI_DEVICE_ID_INTEL_MRST_SD2 0x084F
PCI_DEVICE_ID_INTEL_I960  macro  include/linux/pci_ids.h  2506  #define PCI_DEVICE_ID_INTEL_I960 0x0960
PCI_DEVICE_ID_INTEL_I960RM  macro  include/linux/pci_ids.h  2507  #define PCI_DEVICE_ID_INTEL_I960RM 0x0962
PCI_DEVICE_ID_INTEL_CENTERTON_ILB  macro  include/linux/pci_ids.h  2508  #define PCI_DEVICE_ID_INTEL_CENTERTON_ILB 0x0c60
PCI_DEVICE_ID_INTEL_8257X_SOL  macro  include/linux/pci_ids.h  2509  #define PCI_DEVICE_ID_INTEL_8257X_SOL 0x1062
PCI_DEVICE_ID_INTEL_82573E_SOL  macro  include/linux/pci_ids.h  2510  #define PCI_DEVICE_ID_INTEL_82573E_SOL 0x1085
PCI_DEVICE_ID_INTEL_82573L_SOL  macro  include/linux/pci_ids.h  2511  #define PCI_DEVICE_ID_INTEL_82573L_SOL 0x108F
PCI_DEVICE_ID_INTEL_82815_MC  macro  include/linux/pci_ids.h  2512  #define PCI_DEVICE_ID_INTEL_82815_MC 0x1130
PCI_DEVICE_ID_INTEL_82815_CGC  macro  include/linux/pci_ids.h  2513  #define PCI_DEVICE_ID_INTEL_82815_CGC 0x1132
PCI_DEVICE_ID_INTEL_82092AA_0  macro  include/linux/pci_ids.h  2514  #define PCI_DEVICE_ID_INTEL_82092AA_0 0x1221
PCI_DEVICE_ID_INTEL_7505_0  macro  include/linux/pci_ids.h  2515  #define PCI_DEVICE_ID_INTEL_7505_0 0x2550
PCI_DEVICE_ID_INTEL_7205_0  macro  include/linux/pci_ids.h  2516  #define PCI_DEVICE_ID_INTEL_7205_0 0x255d
PCI_DEVICE_ID_INTEL_82437  macro  include/linux/pci_ids.h  2517  #define PCI_DEVICE_ID_INTEL_82437 0x122d
PCI_DEVICE_ID_INTEL_82371FB_0  macro  include/linux/pci_ids.h  2518  #define PCI_DEVICE_ID_INTEL_82371FB_0 0x122e
PCI_DEVICE_ID_INTEL_82371FB_1  macro  include/linux/pci_ids.h  2519  #define PCI_DEVICE_ID_INTEL_82371FB_1 0x1230
PCI_DEVICE_ID_INTEL_82371MX  macro  include/linux/pci_ids.h  2520  #define PCI_DEVICE_ID_INTEL_82371MX 0x1234
PCI_DEVICE_ID_INTEL_82441  macro  include/linux/pci_ids.h  2521  #define PCI_DEVICE_ID_INTEL_82441 0x1237
PCI_DEVICE_ID_INTEL_82380FB  macro  include/linux/pci_ids.h  2522  #define PCI_DEVICE_ID_INTEL_82380FB 0x124b
PCI_DEVICE_ID_INTEL_82439  macro  include/linux/pci_ids.h  2523  #define PCI_DEVICE_ID_INTEL_82439 0x1250
PCI_DEVICE_ID_INTEL_80960_RP  macro  include/linux/pci_ids.h  2524  #define PCI_DEVICE_ID_INTEL_80960_RP 0x1960
PCI_DEVICE_ID_INTEL_82840_HB  macro  include/linux/pci_ids.h  2525  #define PCI_DEVICE_ID_INTEL_82840_HB 0x1a21
PCI_DEVICE_ID_INTEL_82845_HB  macro  include/linux/pci_ids.h  2526  #define PCI_DEVICE_ID_INTEL_82845_HB 0x1a30
PCI_DEVICE_ID_INTEL_IOAT  macro  include/linux/pci_ids.h  2527  #define PCI_DEVICE_ID_INTEL_IOAT 0x1a38
PCI_DEVICE_ID_INTEL_COUGARPOINT_LPC_MIN  macro  include/linux/pci_ids.h  2528  #define PCI_DEVICE_ID_INTEL_COUGARPOINT_LPC_MIN 0x1c41
PCI_DEVICE_ID_INTEL_COUGARPOINT_LPC_MAX  macro  include/linux/pci_ids.h  2529  #define PCI_DEVICE_ID_INTEL_COUGARPOINT_LPC_MAX 0x1c5f
PCI_DEVICE_ID_INTEL_PATSBURG_LPC_0  macro  include/linux/pci_ids.h  2530  #define PCI_DEVICE_ID_INTEL_PATSBURG_LPC_0 0x1d40
PCI_DEVICE_ID_INTEL_PATSBURG_LPC_1  macro  include/linux/pci_ids.h  2531  #define PCI_DEVICE_ID_INTEL_PATSBURG_LPC_1 0x1d41
PCI_DEVICE_ID_INTEL_PANTHERPOINT_XHCI  macro  include/linux/pci_ids.h  2532  #define PCI_DEVICE_ID_INTEL_PANTHERPOINT_XHCI 0x1e31
PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MIN  macro  include/linux/pci_ids.h  2533  #define PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MIN 0x1e40
PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MAX  macro  include/linux/pci_ids.h  2534  #define PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MAX 0x1e5f
PCI_DEVICE_ID_INTEL_DH89XXCC_LPC_MIN  macro  include/linux/pci_ids.h  2535  #define PCI_DEVICE_ID_INTEL_DH89XXCC_LPC_MIN 0x2310
PCI_DEVICE_ID_INTEL_DH89XXCC_LPC_MAX  macro  include/linux/pci_ids.h  2536  #define PCI_DEVICE_ID_INTEL_DH89XXCC_LPC_MAX 0x231f
PCI_DEVICE_ID_INTEL_82801AA_0  macro  include/linux/pci_ids.h  2537  #define PCI_DEVICE_ID_INTEL_82801AA_0 0x2410
PCI_DEVICE_ID_INTEL_82801AA_1  macro  include/linux/pci_ids.h  2538  #define PCI_DEVICE_ID_INTEL_82801AA_1 0x2411
PCI_DEVICE_ID_INTEL_82801AA_3  macro  include/linux/pci_ids.h  2539  #define PCI_DEVICE_ID_INTEL_82801AA_3 0x2413
PCI_DEVICE_ID_INTEL_82801AA_5  macro  include/linux/pci_ids.h  2540  #define PCI_DEVICE_ID_INTEL_82801AA_5 0x2415
PCI_DEVICE_ID_INTEL_82801AA_6  macro  include/linux/pci_ids.h  2541  #define PCI_DEVICE_ID_INTEL_82801AA_6 0x2416
PCI_DEVICE_ID_INTEL_82801AA_8  macro  include/linux/pci_ids.h  2542  #define PCI_DEVICE_ID_INTEL_82801AA_8 0x2418
PCI_DEVICE_ID_INTEL_82801AB_0  macro  include/linux/pci_ids.h  2543  #define PCI_DEVICE_ID_INTEL_82801AB_0 0x2420
PCI_DEVICE_ID_INTEL_82801AB_1  macro  include/linux/pci_ids.h  2544  #define PCI_DEVICE_ID_INTEL_82801AB_1 0x2421
PCI_DEVICE_ID_INTEL_82801AB_3  macro  include/linux/pci_ids.h  2545  #define PCI_DEVICE_ID_INTEL_82801AB_3 0x2423
PCI_DEVICE_ID_INTEL_82801AB_5  macro  include/linux/pci_ids.h  2546  #define PCI_DEVICE_ID_INTEL_82801AB_5 0x2425
PCI_DEVICE_ID_INTEL_82801AB_6  macro  include/linux/pci_ids.h  2547  #define PCI_DEVICE_ID_INTEL_82801AB_6 0x2426
PCI_DEVICE_ID_INTEL_82801AB_8  macro  include/linux/pci_ids.h  2548  #define PCI_DEVICE_ID_INTEL_82801AB_8 0x2428
PCI_DEVICE_ID_INTEL_82801BA_0  macro  include/linux/pci_ids.h  2549  #define PCI_DEVICE_ID_INTEL_82801BA_0 0x2440
PCI_DEVICE_ID_INTEL_82801BA_2  macro  include/linux/pci_ids.h  2550  #define PCI_DEVICE_ID_INTEL_82801BA_2 0x2443
PCI_DEVICE_ID_INTEL_82801BA_4  macro  include/linux/pci_ids.h  2551  #define PCI_DEVICE_ID_INTEL_82801BA_4 0x2445
PCI_DEVICE_ID_INTEL_82801BA_6  macro  include/linux/pci_ids.h  2552  #define PCI_DEVICE_ID_INTEL_82801BA_6 0x2448
PCI_DEVICE_ID_INTEL_82801BA_8  macro  include/linux/pci_ids.h  2553  #define PCI_DEVICE_ID_INTEL_82801BA_8 0x244a
PCI_DEVICE_ID_INTEL_82801BA_9  macro  include/linux/pci_ids.h  2554  #define PCI_DEVICE_ID_INTEL_82801BA_9 0x244b
PCI_DEVICE_ID_INTEL_82801BA_10  macro  include/linux/pci_ids.h  2555  #define PCI_DEVICE_ID_INTEL_82801BA_10 0x244c
PCI_DEVICE_ID_INTEL_82801BA_11  macro  include/linux/pci_ids.h  2556  #define PCI_DEVICE_ID_INTEL_82801BA_11 0x244e
PCI_DEVICE_ID_INTEL_82801E_0  macro  include/linux/pci_ids.h  2557  #define PCI_DEVICE_ID_INTEL_82801E_0 0x2450
PCI_DEVICE_ID_INTEL_82801E_11  macro  include/linux/pci_ids.h  2558  #define PCI_DEVICE_ID_INTEL_82801E_11 0x245b
PCI_DEVICE_ID_INTEL_82801CA_0  macro  include/linux/pci_ids.h  2559  #define PCI_DEVICE_ID_INTEL_82801CA_0 0x2480
PCI_DEVICE_ID_INTEL_82801CA_3  macro  include/linux/pci_ids.h  2560  #define PCI_DEVICE_ID_INTEL_82801CA_3 0x2483
PCI_DEVICE_ID_INTEL_82801CA_5  macro  include/linux/pci_ids.h  2561  #define PCI_DEVICE_ID_INTEL_82801CA_5 0x2485
PCI_DEVICE_ID_INTEL_82801CA_6  macro  include/linux/pci_ids.h  2562  #define PCI_DEVICE_ID_INTEL_82801CA_6 0x2486
PCI_DEVICE_ID_INTEL_82801CA_10  macro  include/linux/pci_ids.h  2563  #define PCI_DEVICE_ID_INTEL_82801CA_10 0x248a
PCI_DEVICE_ID_INTEL_82801CA_11  macro  include/linux/pci_ids.h  2564  #define PCI_DEVICE_ID_INTEL_82801CA_11 0x248b
PCI_DEVICE_ID_INTEL_82801CA_12  macro  include/linux/pci_ids.h  2565  #define PCI_DEVICE_ID_INTEL_82801CA_12 0x248c
PCI_DEVICE_ID_INTEL_82801DB_0  macro  include/linux/pci_ids.h  2566  #define PCI_DEVICE_ID_INTEL_82801DB_0 0x24c0
PCI_DEVICE_ID_INTEL_82801DB_1  macro  include/linux/pci_ids.h  2567  #define PCI_DEVICE_ID_INTEL_82801DB_1 0x24c1
PCI_DEVICE_ID_INTEL_82801DB_2  macro  include/linux/pci_ids.h  2568  #define PCI_DEVICE_ID_INTEL_82801DB_2 0x24c2
PCI_DEVICE_ID_INTEL_82801DB_3  macro  include/linux/pci_ids.h  2569  #define PCI_DEVICE_ID_INTEL_82801DB_3 0x24c3
PCI_DEVICE_ID_INTEL_82801DB_5  macro  include/linux/pci_ids.h  2570  #define PCI_DEVICE_ID_INTEL_82801DB_5 0x24c5
PCI_DEVICE_ID_INTEL_82801DB_6  macro  include/linux/pci_ids.h  2571  #define PCI_DEVICE_ID_INTEL_82801DB_6 0x24c6
PCI_DEVICE_ID_INTEL_82801DB_9  macro  include/linux/pci_ids.h  2572  #define PCI_DEVICE_ID_INTEL_82801DB_9 0x24c9
PCI_DEVICE_ID_INTEL_82801DB_10  macro  include/linux/pci_ids.h  2573  #define PCI_DEVICE_ID_INTEL_82801DB_10 0x24ca
PCI_DEVICE_ID_INTEL_82801DB_11  macro  include/linux/pci_ids.h  2574  #define PCI_DEVICE_ID_INTEL_82801DB_11 0x24cb
PCI_DEVICE_ID_INTEL_82801DB_12  macro  include/linux/pci_ids.h  2575  #define PCI_DEVICE_ID_INTEL_82801DB_12 0x24cc
PCI_DEVICE_ID_INTEL_82801EB_0  macro  include/linux/pci_ids.h  2576  #define PCI_DEVICE_ID_INTEL_82801EB_0 0x24d0
PCI_DEVICE_ID_INTEL_82801EB_1  macro  include/linux/pci_ids.h  2577  #define PCI_DEVICE_ID_INTEL_82801EB_1 0x24d1
PCI_DEVICE_ID_INTEL_82801EB_3  macro  include/linux/pci_ids.h  2578  #define PCI_DEVICE_ID_INTEL_82801EB_3 0x24d3
PCI_DEVICE_ID_INTEL_82801EB_5  macro  include/linux/pci_ids.h  2579  #define PCI_DEVICE_ID_INTEL_82801EB_5 0x24d5
PCI_DEVICE_ID_INTEL_82801EB_6  macro  include/linux/pci_ids.h  2580  #define PCI_DEVICE_ID_INTEL_82801EB_6 0x24d6
PCI_DEVICE_ID_INTEL_82801EB_11  macro  include/linux/pci_ids.h  2581  #define PCI_DEVICE_ID_INTEL_82801EB_11 0x24db
PCI_DEVICE_ID_INTEL_82801EB_12  macro  include/linux/pci_ids.h  2582  #define PCI_DEVICE_ID_INTEL_82801EB_12 0x24dc
PCI_DEVICE_ID_INTEL_82801EB_13  macro  include/linux/pci_ids.h  2583  #define PCI_DEVICE_ID_INTEL_82801EB_13 0x24dd
PCI_DEVICE_ID_INTEL_ESB_1  macro  include/linux/pci_ids.h  2584  #define PCI_DEVICE_ID_INTEL_ESB_1 0x25a1
PCI_DEVICE_ID_INTEL_ESB_2  macro  include/linux/pci_ids.h  2585  #define PCI_DEVICE_ID_INTEL_ESB_2 0x25a2
PCI_DEVICE_ID_INTEL_ESB_4  macro  include/linux/pci_ids.h  2586  #define PCI_DEVICE_ID_INTEL_ESB_4 0x25a4
PCI_DEVICE_ID_INTEL_ESB_5  macro  include/linux/pci_ids.h  2587  #define PCI_DEVICE_ID_INTEL_ESB_5 0x25a6
PCI_DEVICE_ID_INTEL_ESB_9  macro  include/linux/pci_ids.h  2588  #define PCI_DEVICE_ID_INTEL_ESB_9 0x25ab
PCI_DEVICE_ID_INTEL_ESB_10  macro  include/linux/pci_ids.h  2589  #define PCI_DEVICE_ID_INTEL_ESB_10 0x25ac
PCI_DEVICE_ID_INTEL_82820_HB  macro  include/linux/pci_ids.h  2590  #define PCI_DEVICE_ID_INTEL_82820_HB 0x2500
PCI_DEVICE_ID_INTEL_82820_UP_HB  macro  include/linux/pci_ids.h  2591  #define PCI_DEVICE_ID_INTEL_82820_UP_HB 0x2501
PCI_DEVICE_ID_INTEL_82850_HB  macro  include/linux/pci_ids.h  2592  #define PCI_DEVICE_ID_INTEL_82850_HB 0x2530
PCI_DEVICE_ID_INTEL_82860_HB  macro  include/linux/pci_ids.h  2593  #define PCI_DEVICE_ID_INTEL_82860_HB 0x2531
PCI_DEVICE_ID_INTEL_E7501_MCH  macro  include/linux/pci_ids.h  2594  #define PCI_DEVICE_ID_INTEL_E7501_MCH 0x254c
PCI_DEVICE_ID_INTEL_82845G_HB  macro  include/linux/pci_ids.h  2595  #define PCI_DEVICE_ID_INTEL_82845G_HB 0x2560
PCI_DEVICE_ID_INTEL_82845G_IG  macro  include/linux/pci_ids.h  2596  #define PCI_DEVICE_ID_INTEL_82845G_IG 0x2562
PCI_DEVICE_ID_INTEL_82865_HB  macro  include/linux/pci_ids.h  2597  #define PCI_DEVICE_ID_INTEL_82865_HB 0x2570
PCI_DEVICE_ID_INTEL_82865_IG  macro  include/linux/pci_ids.h  2598  #define PCI_DEVICE_ID_INTEL_82865_IG 0x2572
PCI_DEVICE_ID_INTEL_82875_HB  macro  include/linux/pci_ids.h  2599  #define PCI_DEVICE_ID_INTEL_82875_HB 0x2578
PCI_DEVICE_ID_INTEL_82915G_HB  macro  include/linux/pci_ids.h  2600  #define PCI_DEVICE_ID_INTEL_82915G_HB 0x2580
PCI_DEVICE_ID_INTEL_82915G_IG  macro  include/linux/pci_ids.h  2601  #define PCI_DEVICE_ID_INTEL_82915G_IG 0x2582
PCI_DEVICE_ID_INTEL_82915GM_HB  macro  include/linux/pci_ids.h  2602  #define PCI_DEVICE_ID_INTEL_82915GM_HB 0x2590
PCI_DEVICE_ID_INTEL_82915GM_IG  macro  include/linux/pci_ids.h  2603  #define PCI_DEVICE_ID_INTEL_82915GM_IG 0x2592
PCI_DEVICE_ID_INTEL_5000_ERR  macro  include/linux/pci_ids.h  2604  #define PCI_DEVICE_ID_INTEL_5000_ERR 0x25F0
PCI_DEVICE_ID_INTEL_5000_FBD0  macro  include/linux/pci_ids.h  2605  #define PCI_DEVICE_ID_INTEL_5000_FBD0 0x25F5
PCI_DEVICE_ID_INTEL_5000_FBD1  macro  include/linux/pci_ids.h  2606  #define PCI_DEVICE_ID_INTEL_5000_FBD1 0x25F6
PCI_DEVICE_ID_INTEL_82945G_HB  macro  include/linux/pci_ids.h  2607  #define PCI_DEVICE_ID_INTEL_82945G_HB 0x2770
PCI_DEVICE_ID_INTEL_82945G_IG  macro  include/linux/pci_ids.h  2608  #define PCI_DEVICE_ID_INTEL_82945G_IG 0x2772
PCI_DEVICE_ID_INTEL_3000_HB  macro  include/linux/pci_ids.h  2609  #define PCI_DEVICE_ID_INTEL_3000_HB 0x2778
PCI_DEVICE_ID_INTEL_82945GM_HB  macro  include/linux/pci_ids.h  2610  #define PCI_DEVICE_ID_INTEL_82945GM_HB 0x27A0
PCI_DEVICE_ID_INTEL_82945GM_IG  macro  include/linux/pci_ids.h  2611  #define PCI_DEVICE_ID_INTEL_82945GM_IG 0x27A2
PCI_DEVICE_ID_INTEL_ICH6_0  macro  include/linux/pci_ids.h  2612  #define PCI_DEVICE_ID_INTEL_ICH6_0 0x2640
PCI_DEVICE_ID_INTEL_ICH6_1  macro  include/linux/pci_ids.h  2613  #define PCI_DEVICE_ID_INTEL_ICH6_1 0x2641
PCI_DEVICE_ID_INTEL_ICH6_2  macro  include/linux/pci_ids.h  2614  #define PCI_DEVICE_ID_INTEL_ICH6_2 0x2642
PCI_DEVICE_ID_INTEL_ICH6_16  macro  include/linux/pci_ids.h  2615  #define PCI_DEVICE_ID_INTEL_ICH6_16 0x266a
PCI_DEVICE_ID_INTEL_ICH6_17  macro  include/linux/pci_ids.h  2616  #define PCI_DEVICE_ID_INTEL_ICH6_17 0x266d
PCI_DEVICE_ID_INTEL_ICH6_18  macro  include/linux/pci_ids.h  2617  #define PCI_DEVICE_ID_INTEL_ICH6_18 0x266e
PCI_DEVICE_ID_INTEL_ICH6_19  macro  include/linux/pci_ids.h  2618  #define PCI_DEVICE_ID_INTEL_ICH6_19 0x266f
PCI_DEVICE_ID_INTEL_ESB2_0  macro  include/linux/pci_ids.h  2619  #define PCI_DEVICE_ID_INTEL_ESB2_0 0x2670
PCI_DEVICE_ID_INTEL_ESB2_14  macro  include/linux/pci_ids.h  2620  #define PCI_DEVICE_ID_INTEL_ESB2_14 0x2698
PCI_DEVICE_ID_INTEL_ESB2_17  macro  include/linux/pci_ids.h  2621  #define PCI_DEVICE_ID_INTEL_ESB2_17 0x269b
PCI_DEVICE_ID_INTEL_ESB2_18  macro  include/linux/pci_ids.h  2622  #define PCI_DEVICE_ID_INTEL_ESB2_18 0x269e
PCI_DEVICE_ID_INTEL_ICH7_0  macro  include/linux/pci_ids.h  2623  #define PCI_DEVICE_ID_INTEL_ICH7_0 0x27b8
PCI_DEVICE_ID_INTEL_ICH7_1  macro  include/linux/pci_ids.h  2624  #define PCI_DEVICE_ID_INTEL_ICH7_1 0x27b9
PCI_DEVICE_ID_INTEL_ICH7_30  macro  include/linux/pci_ids.h  2625  #define PCI_DEVICE_ID_INTEL_ICH7_30 0x27b0
PCI_DEVICE_ID_INTEL_TGP_LPC  macro  include/linux/pci_ids.h  2626  #define PCI_DEVICE_ID_INTEL_TGP_LPC 0x27bc
PCI_DEVICE_ID_INTEL_ICH7_31  macro  include/linux/pci_ids.h  2627  #define PCI_DEVICE_ID_INTEL_ICH7_31 0x27bd
PCI_DEVICE_ID_INTEL_ICH7_17  macro  include/linux/pci_ids.h  2628  #define PCI_DEVICE_ID_INTEL_ICH7_17 0x27da
PCI_DEVICE_ID_INTEL_ICH7_19  macro  include/linux/pci_ids.h  2629  #define PCI_DEVICE_ID_INTEL_ICH7_19 0x27dd
PCI_DEVICE_ID_INTEL_ICH7_20  macro  include/linux/pci_ids.h  2630  #define PCI_DEVICE_ID_INTEL_ICH7_20 0x27de
PCI_DEVICE_ID_INTEL_ICH7_21  macro  include/linux/pci_ids.h  2631  #define PCI_DEVICE_ID_INTEL_ICH7_21 0x27df
PCI_DEVICE_ID_INTEL_ICH8_0  macro  include/linux/pci_ids.h  2632  #define PCI_DEVICE_ID_INTEL_ICH8_0 0x2810
PCI_DEVICE_ID_INTEL_ICH8_1  macro  include/linux/pci_ids.h  2633  #define PCI_DEVICE_ID_INTEL_ICH8_1 0x2811
PCI_DEVICE_ID_INTEL_ICH8_2  macro  include/linux/pci_ids.h  2634  #define PCI_DEVICE_ID_INTEL_ICH8_2 0x2812
PCI_DEVICE_ID_INTEL_ICH8_3  macro  include/linux/pci_ids.h  2635  #define PCI_DEVICE_ID_INTEL_ICH8_3 0x2814
PCI_DEVICE_ID_INTEL_ICH8_4  macro  include/linux/pci_ids.h  2636  #define PCI_DEVICE_ID_INTEL_ICH8_4 0x2815
PCI_DEVICE_ID_INTEL_ICH8_5  macro  include/linux/pci_ids.h  2637  #define PCI_DEVICE_ID_INTEL_ICH8_5 0x283e
PCI_DEVICE_ID_INTEL_ICH8_6  macro  include/linux/pci_ids.h  2638  #define PCI_DEVICE_ID_INTEL_ICH8_6 0x2850
PCI_DEVICE_ID_INTEL_ICH9_0  macro  include/linux/pci_ids.h  2639  #define PCI_DEVICE_ID_INTEL_ICH9_0 0x2910
PCI_DEVICE_ID_INTEL_ICH9_1  macro  include/linux/pci_ids.h  2640  #define PCI_DEVICE_ID_INTEL_ICH9_1 0x2917
PCI_DEVICE_ID_INTEL_ICH9_2  macro  include/linux/pci_ids.h  2641  #define PCI_DEVICE_ID_INTEL_ICH9_2 0x2912
PCI_DEVICE_ID_INTEL_ICH9_3  macro  include/linux/pci_ids.h  2642  #define PCI_DEVICE_ID_INTEL_ICH9_3 0x2913
PCI_DEVICE_ID_INTEL_ICH9_4  macro  include/linux/pci_ids.h  2643  #define PCI_DEVICE_ID_INTEL_ICH9_4 0x2914
PCI_DEVICE_ID_INTEL_ICH9_5  macro  include/linux/pci_ids.h  2644  #define PCI_DEVICE_ID_INTEL_ICH9_5 0x2919
PCI_DEVICE_ID_INTEL_ICH9_6  macro  include/linux/pci_ids.h  2645  #define PCI_DEVICE_ID_INTEL_ICH9_6 0x2930
PCI_DEVICE_ID_INTEL_ICH9_7  macro  include/linux/pci_ids.h  2646  #define PCI_DEVICE_ID_INTEL_ICH9_7 0x2916
PCI_DEVICE_ID_INTEL_ICH9_8  macro  include/linux/pci_ids.h  2647  #define PCI_DEVICE_ID_INTEL_ICH9_8 0x2918
PCI_DEVICE_ID_INTEL_I7_MCR  macro  include/linux/pci_ids.h  2648  #define PCI_DEVICE_ID_INTEL_I7_MCR 0x2c18
PCI_DEVICE_ID_INTEL_I7_MC_TAD  macro  include/linux/pci_ids.h  2649  #define PCI_DEVICE_ID_INTEL_I7_MC_TAD 0x2c19
PCI_DEVICE_ID_INTEL_I7_MC_RAS  macro  include/linux/pci_ids.h  2650  #define PCI_DEVICE_ID_INTEL_I7_MC_RAS 0x2c1a
PCI_DEVICE_ID_INTEL_I7_MC_TEST  macro  include/linux/pci_ids.h  2651  #define PCI_DEVICE_ID_INTEL_I7_MC_TEST 0x2c1c
PCI_DEVICE_ID_INTEL_I7_MC_CH0_CTRL  macro  include/linux/pci_ids.h  2652  #define PCI_DEVICE_ID_INTEL_I7_MC_CH0_CTRL 0x2c20
PCI_DEVICE_ID_INTEL_I7_MC_CH0_ADDR  macro  include/linux/pci_ids.h  2653  #define PCI_DEVICE_ID_INTEL_I7_MC_CH0_ADDR 0x2c21
PCI_DEVICE_ID_INTEL_I7_MC_CH0_RANK  macro  include/linux/pci_ids.h  2654  #define PCI_DEVICE_ID_INTEL_I7_MC_CH0_RANK 0x2c22
PCI_DEVICE_ID_INTEL_I7_MC_CH0_TC  macro  include/linux/pci_ids.h  2655  #define PCI_DEVICE_ID_INTEL_I7_MC_CH0_TC 0x2c23
PCI_DEVICE_ID_INTEL_I7_MC_CH1_CTRL  macro  include/linux/pci_ids.h  2656  #define PCI_DEVICE_ID_INTEL_I7_MC_CH1_CTRL 0x2c28
PCI_DEVICE_ID_INTEL_I7_MC_CH1_ADDR  macro  include/linux/pci_ids.h  2657  #define PCI_DEVICE_ID_INTEL_I7_MC_CH1_ADDR 0x2c29
PCI_DEVICE_ID_INTEL_I7_MC_CH1_RANK  macro  include/linux/pci_ids.h  2658  #define PCI_DEVICE_ID_INTEL_I7_MC_CH1_RANK 0x2c2a
PCI_DEVICE_ID_INTEL_I7_MC_CH1_TC  macro  include/linux/pci_ids.h  2659  #define PCI_DEVICE_ID_INTEL_I7_MC_CH1_TC 0x2c2b
PCI_DEVICE_ID_INTEL_I7_MC_CH2_CTRL  macro  include/linux/pci_ids.h  2660  #define PCI_DEVICE_ID_INTEL_I7_MC_CH2_CTRL 0x2c30
PCI_DEVICE_ID_INTEL_I7_MC_CH2_ADDR  macro  include/linux/pci_ids.h  2661  #define PCI_DEVICE_ID_INTEL_I7_MC_CH2_ADDR 0x2c31
PCI_DEVICE_ID_INTEL_I7_MC_CH2_RANK  macro  include/linux/pci_ids.h  2662  #define PCI_DEVICE_ID_INTEL_I7_MC_CH2_RANK 0x2c32
PCI_DEVICE_ID_INTEL_I7_MC_CH2_TC  macro  include/linux/pci_ids.h  2663  #define PCI_DEVICE_ID_INTEL_I7_MC_CH2_TC 0x2c33
PCI_DEVICE_ID_INTEL_I7_NONCORE  macro  include/linux/pci_ids.h  2664  #define PCI_DEVICE_ID_INTEL_I7_NONCORE 0x2c41
PCI_DEVICE_ID_INTEL_I7_NONCORE_ALT  macro  include/linux/pci_ids.h  2665  #define PCI_DEVICE_ID_INTEL_I7_NONCORE_ALT 0x2c40
PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE  macro  include/linux/pci_ids.h  2666  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE 0x2c50
PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_ALT  macro  include/linux/pci_ids.h  2667  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_ALT 0x2c51
PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_REV2  macro  include/linux/pci_ids.h  2668  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_REV2 0x2c70
PCI_DEVICE_ID_INTEL_LYNNFIELD_SAD  macro  include/linux/pci_ids.h  2669  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_SAD 0x2c81
PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_LINK0  macro  include/linux/pci_ids.h  2670  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_LINK0 0x2c90
PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_PHY0  macro  include/linux/pci_ids.h  2671  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_PHY0 0x2c91
PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR  macro  include/linux/pci_ids.h  2672  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR 0x2c98
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD  macro  include/linux/pci_ids.h  2673  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD 0x2c99
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST  macro  include/linux/pci_ids.h  2674  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST 0x2c9C
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL  macro  include/linux/pci_ids.h  2675  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL 0x2ca0
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR  macro  include/linux/pci_ids.h  2676  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR 0x2ca1
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK  macro  include/linux/pci_ids.h  2677  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK 0x2ca2
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC  macro  include/linux/pci_ids.h  2678  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC 0x2ca3
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL  macro  include/linux/pci_ids.h  2679  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL 0x2ca8
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR  macro  include/linux/pci_ids.h  2680  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR 0x2ca9
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK  macro  include/linux/pci_ids.h  2681  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK 0x2caa
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC  macro  include/linux/pci_ids.h  2682  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC 0x2cab
PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR_REV2  macro  include/linux/pci_ids.h  2683  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR_REV2 0x2d98
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD_REV2  macro  include/linux/pci_ids.h  2684  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD_REV2 0x2d99
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_RAS_REV2  macro  include/linux/pci_ids.h  2685  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_RAS_REV2 0x2d9a
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST_REV2  macro  include/linux/pci_ids.h  2686  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST_REV2 0x2d9c
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL_REV2  macro  include/linux/pci_ids.h  2687  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL_REV2 0x2da0
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR_REV2  macro  include/linux/pci_ids.h  2688  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR_REV2 0x2da1
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK_REV2  macro  include/linux/pci_ids.h  2689  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK_REV2 0x2da2
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC_REV2  macro  include/linux/pci_ids.h  2690  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC_REV2 0x2da3
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL_REV2  macro  include/linux/pci_ids.h  2691  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL_REV2 0x2da8
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR_REV2  macro  include/linux/pci_ids.h  2692  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR_REV2 0x2da9
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK_REV2  macro  include/linux/pci_ids.h  2693  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK_REV2 0x2daa
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC_REV2  macro  include/linux/pci_ids.h  2694  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC_REV2 0x2dab
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_CTRL_REV2  macro  include/linux/pci_ids.h  2695  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_CTRL_REV2 0x2db0
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_ADDR_REV2  macro  include/linux/pci_ids.h  2696  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_ADDR_REV2 0x2db1
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_RANK_REV2  macro  include/linux/pci_ids.h  2697  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_RANK_REV2 0x2db2
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_TC_REV2  macro  include/linux/pci_ids.h  2698  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_TC_REV2 0x2db3
PCI_DEVICE_ID_INTEL_82855PM_HB  macro  include/linux/pci_ids.h  2699  #define PCI_DEVICE_ID_INTEL_82855PM_HB 0x3340
PCI_DEVICE_ID_INTEL_IOAT_TBG4  macro  include/linux/pci_ids.h  2700  #define PCI_DEVICE_ID_INTEL_IOAT_TBG4 0x3429
PCI_DEVICE_ID_INTEL_IOAT_TBG5  macro  include/linux/pci_ids.h  2701  #define PCI_DEVICE_ID_INTEL_IOAT_TBG5 0x342a
PCI_DEVICE_ID_INTEL_IOAT_TBG6  macro  include/linux/pci_ids.h  2702  #define PCI_DEVICE_ID_INTEL_IOAT_TBG6 0x342b
PCI_DEVICE_ID_INTEL_IOAT_TBG7  macro  include/linux/pci_ids.h  2703  #define PCI_DEVICE_ID_INTEL_IOAT_TBG7 0x342c
PCI_DEVICE_ID_INTEL_X58_HUB_MGMT  macro  include/linux/pci_ids.h  2704  #define PCI_DEVICE_ID_INTEL_X58_HUB_MGMT 0x342e
PCI_DEVICE_ID_INTEL_IOAT_TBG0  macro  include/linux/pci_ids.h  2705  #define PCI_DEVICE_ID_INTEL_IOAT_TBG0 0x3430
PCI_DEVICE_ID_INTEL_IOAT_TBG1  macro  include/linux/pci_ids.h  2706  #define PCI_DEVICE_ID_INTEL_IOAT_TBG1 0x3431
PCI_DEVICE_ID_INTEL_IOAT_TBG2  macro  include/linux/pci_ids.h  2707  #define PCI_DEVICE_ID_INTEL_IOAT_TBG2 0x3432
PCI_DEVICE_ID_INTEL_IOAT_TBG3  macro  include/linux/pci_ids.h  2708  #define PCI_DEVICE_ID_INTEL_IOAT_TBG3 0x3433
PCI_DEVICE_ID_INTEL_82830_HB  macro  include/linux/pci_ids.h  2709  #define PCI_DEVICE_ID_INTEL_82830_HB 0x3575
PCI_DEVICE_ID_INTEL_82830_CGC  macro  include/linux/pci_ids.h  2710  #define PCI_DEVICE_ID_INTEL_82830_CGC 0x3577
PCI_DEVICE_ID_INTEL_82854_HB  macro  include/linux/pci_ids.h  2711  #define PCI_DEVICE_ID_INTEL_82854_HB 0x358c
PCI_DEVICE_ID_INTEL_82854_IG  macro  include/linux/pci_ids.h  2712  #define PCI_DEVICE_ID_INTEL_82854_IG 0x358e
PCI_DEVICE_ID_INTEL_82855GM_HB  macro  include/linux/pci_ids.h  2713  #define PCI_DEVICE_ID_INTEL_82855GM_HB 0x3580
PCI_DEVICE_ID_INTEL_82855GM_IG  macro  include/linux/pci_ids.h  2714  #define PCI_DEVICE_ID_INTEL_82855GM_IG 0x3582
PCI_DEVICE_ID_INTEL_E7520_MCH  macro  include/linux/pci_ids.h  2715  #define PCI_DEVICE_ID_INTEL_E7520_MCH 0x3590
PCI_DEVICE_ID_INTEL_E7320_MCH  macro  include/linux/pci_ids.h  2716  #define PCI_DEVICE_ID_INTEL_E7320_MCH 0x3592
PCI_DEVICE_ID_INTEL_MCH_PA  macro  include/linux/pci_ids.h  2717  #define PCI_DEVICE_ID_INTEL_MCH_PA 0x3595
PCI_DEVICE_ID_INTEL_MCH_PA1  macro  include/linux/pci_ids.h  2718  #define PCI_DEVICE_ID_INTEL_MCH_PA1 0x3596
PCI_DEVICE_ID_INTEL_MCH_PB  macro  include/linux/pci_ids.h  2719  #define PCI_DEVICE_ID_INTEL_MCH_PB 0x3597
PCI_DEVICE_ID_INTEL_MCH_PB1  macro  include/linux/pci_ids.h  2720  #define PCI_DEVICE_ID_INTEL_MCH_PB1 0x3598
PCI_DEVICE_ID_INTEL_MCH_PC  macro  include/linux/pci_ids.h  2721  #define PCI_DEVICE_ID_INTEL_MCH_PC 0x3599
PCI_DEVICE_ID_INTEL_MCH_PC1  macro  include/linux/pci_ids.h  2722  #define PCI_DEVICE_ID_INTEL_MCH_PC1 0x359a
PCI_DEVICE_ID_INTEL_E7525_MCH  macro  include/linux/pci_ids.h  2723  #define PCI_DEVICE_ID_INTEL_E7525_MCH 0x359e
PCI_DEVICE_ID_INTEL_I7300_MCH_ERR  macro  include/linux/pci_ids.h  2724  #define PCI_DEVICE_ID_INTEL_I7300_MCH_ERR 0x360c
PCI_DEVICE_ID_INTEL_I7300_MCH_FB0  macro  include/linux/pci_ids.h  2725  #define PCI_DEVICE_ID_INTEL_I7300_MCH_FB0 0x360f
PCI_DEVICE_ID_INTEL_I7300_MCH_FB1  macro  include/linux/pci_ids.h  2726  #define PCI_DEVICE_ID_INTEL_I7300_MCH_FB1 0x3610
PCI_DEVICE_ID_INTEL_IOAT_CNB  macro  include/linux/pci_ids.h  2727  #define PCI_DEVICE_ID_INTEL_IOAT_CNB 0x360b
PCI_DEVICE_ID_INTEL_FBD_CNB  macro  include/linux/pci_ids.h  2728  #define PCI_DEVICE_ID_INTEL_FBD_CNB 0x360c
PCI_DEVICE_ID_INTEL_IOAT_JSF0  macro  include/linux/pci_ids.h  2729  #define PCI_DEVICE_ID_INTEL_IOAT_JSF0 0x3710
PCI_DEVICE_ID_INTEL_IOAT_JSF1  macro  include/linux/pci_ids.h  2730  #define PCI_DEVICE_ID_INTEL_IOAT_JSF1 0x3711
PCI_DEVICE_ID_INTEL_IOAT_JSF2  macro  include/linux/pci_ids.h  2731  #define PCI_DEVICE_ID_INTEL_IOAT_JSF2 0x3712
PCI_DEVICE_ID_INTEL_IOAT_JSF3  macro  include/linux/pci_ids.h  2732  #define PCI_DEVICE_ID_INTEL_IOAT_JSF3 0x3713
PCI_DEVICE_ID_INTEL_IOAT_JSF4  macro  include/linux/pci_ids.h  2733  #define PCI_DEVICE_ID_INTEL_IOAT_JSF4 0x3714
PCI_DEVICE_ID_INTEL_IOAT_JSF5  macro  include/linux/pci_ids.h  2734  #define PCI_DEVICE_ID_INTEL_IOAT_JSF5 0x3715
PCI_DEVICE_ID_INTEL_IOAT_JSF6  macro  include/linux/pci_ids.h  2735  #define PCI_DEVICE_ID_INTEL_IOAT_JSF6 0x3716
PCI_DEVICE_ID_INTEL_IOAT_JSF7  macro  include/linux/pci_ids.h  2736  #define PCI_DEVICE_ID_INTEL_IOAT_JSF7 0x3717
PCI_DEVICE_ID_INTEL_IOAT_JSF8  macro  include/linux/pci_ids.h  2737  #define PCI_DEVICE_ID_INTEL_IOAT_JSF8 0x3718
PCI_DEVICE_ID_INTEL_IOAT_JSF9  macro  include/linux/pci_ids.h  2738  #define PCI_DEVICE_ID_INTEL_IOAT_JSF9 0x3719
PCI_DEVICE_ID_INTEL_ICH10_0  macro  include/linux/pci_ids.h  2739  #define PCI_DEVICE_ID_INTEL_ICH10_0 0x3a14
PCI_DEVICE_ID_INTEL_ICH10_1  macro  include/linux/pci_ids.h  2740  #define PCI_DEVICE_ID_INTEL_ICH10_1 0x3a16
PCI_DEVICE_ID_INTEL_ICH10_2  macro  include/linux/pci_ids.h  2741  #define PCI_DEVICE_ID_INTEL_ICH10_2 0x3a18
PCI_DEVICE_ID_INTEL_ICH10_3  macro  include/linux/pci_ids.h  2742  #define PCI_DEVICE_ID_INTEL_ICH10_3 0x3a1a
PCI_DEVICE_ID_INTEL_ICH10_4  macro  include/linux/pci_ids.h  2743  #define PCI_DEVICE_ID_INTEL_ICH10_4 0x3a30
PCI_DEVICE_ID_INTEL_ICH10_5  macro  include/linux/pci_ids.h  2744  #define PCI_DEVICE_ID_INTEL_ICH10_5 0x3a60
PCI_DEVICE_ID_INTEL_5_3400_SERIES_LPC_MIN  macro  include/linux/pci_ids.h  2745  #define PCI_DEVICE_ID_INTEL_5_3400_SERIES_LPC_MIN 0x3b00
PCI_DEVICE_ID_INTEL_5_3400_SERIES_LPC_MAX  macro  include/linux/pci_ids.h  2746  #define PCI_DEVICE_ID_INTEL_5_3400_SERIES_LPC_MAX 0x3b1f
PCI_DEVICE_ID_INTEL_IOAT_SNB0  macro  include/linux/pci_ids.h  2747  #define PCI_DEVICE_ID_INTEL_IOAT_SNB0 0x3c20
PCI_DEVICE_ID_INTEL_IOAT_SNB1  macro  include/linux/pci_ids.h  2748  #define PCI_DEVICE_ID_INTEL_IOAT_SNB1 0x3c21
PCI_DEVICE_ID_INTEL_IOAT_SNB2  macro  include/linux/pci_ids.h  2749  #define PCI_DEVICE_ID_INTEL_IOAT_SNB2 0x3c22
PCI_DEVICE_ID_INTEL_IOAT_SNB3  macro  include/linux/pci_ids.h  2750  #define PCI_DEVICE_ID_INTEL_IOAT_SNB3 0x3c23
PCI_DEVICE_ID_INTEL_IOAT_SNB4  macro  include/linux/pci_ids.h  2751  #define PCI_DEVICE_ID_INTEL_IOAT_SNB4 0x3c24
PCI_DEVICE_ID_INTEL_IOAT_SNB5  macro  include/linux/pci_ids.h  2752  #define PCI_DEVICE_ID_INTEL_IOAT_SNB5 0x3c25
PCI_DEVICE_ID_INTEL_IOAT_SNB6  macro  include/linux/pci_ids.h  2753  #define PCI_DEVICE_ID_INTEL_IOAT_SNB6 0x3c26
PCI_DEVICE_ID_INTEL_IOAT_SNB7  macro  include/linux/pci_ids.h  2754  #define PCI_DEVICE_ID_INTEL_IOAT_SNB7 0x3c27
PCI_DEVICE_ID_INTEL_IOAT_SNB8  macro  include/linux/pci_ids.h  2755  #define PCI_DEVICE_ID_INTEL_IOAT_SNB8 0x3c2e
PCI_DEVICE_ID_INTEL_IOAT_SNB9  macro  include/linux/pci_ids.h  2756  #define PCI_DEVICE_ID_INTEL_IOAT_SNB9 0x3c2f
PCI_DEVICE_ID_INTEL_IOAT_SNB  macro  include/linux/pci_ids.h  2757  #define PCI_DEVICE_ID_INTEL_IOAT_SNB 0x402f
PCI_DEVICE_ID_INTEL_5100_16  macro  include/linux/pci_ids.h  2758  #define PCI_DEVICE_ID_INTEL_5100_16 0x65f0
PCI_DEVICE_ID_INTEL_5100_21  macro  include/linux/pci_ids.h  2759  #define PCI_DEVICE_ID_INTEL_5100_21 0x65f5
PCI_DEVICE_ID_INTEL_5100_22  macro  include/linux/pci_ids.h  2760  #define PCI_DEVICE_ID_INTEL_5100_22 0x65f6
PCI_DEVICE_ID_INTEL_5400_ERR  macro  include/linux/pci_ids.h  2761  #define PCI_DEVICE_ID_INTEL_5400_ERR 0x4030
PCI_DEVICE_ID_INTEL_5400_FBD0  macro  include/linux/pci_ids.h  2762  #define PCI_DEVICE_ID_INTEL_5400_FBD0 0x4035
PCI_DEVICE_ID_INTEL_5400_FBD1  macro  include/linux/pci_ids.h  2763  #define PCI_DEVICE_ID_INTEL_5400_FBD1 0x4036
PCI_DEVICE_ID_INTEL_IOAT_SCNB  macro  include/linux/pci_ids.h  2764  #define PCI_DEVICE_ID_INTEL_IOAT_SCNB 0x65ff
PCI_DEVICE_ID_INTEL_EP80579_0  macro  include/linux/pci_ids.h  2765  #define PCI_DEVICE_ID_INTEL_EP80579_0 0x5031
PCI_DEVICE_ID_INTEL_EP80579_1  macro  include/linux/pci_ids.h  2766  #define PCI_DEVICE_ID_INTEL_EP80579_1 0x5032
PCI_DEVICE_ID_INTEL_82371SB_0  macro  include/linux/pci_ids.h  2767  #define PCI_DEVICE_ID_INTEL_82371SB_0 0x7000
PCI_DEVICE_ID_INTEL_82371SB_1  macro  include/linux/pci_ids.h  2768  #define PCI_DEVICE_ID_INTEL_82371SB_1 0x7010
PCI_DEVICE_ID_INTEL_82371SB_2  macro  include/linux/pci_ids.h  2769  #define PCI_DEVICE_ID_INTEL_82371SB_2 0x7020
PCI_DEVICE_ID_INTEL_82437VX  macro  include/linux/pci_ids.h  2770  #define PCI_DEVICE_ID_INTEL_82437VX 0x7030
PCI_DEVICE_ID_INTEL_82439TX  macro  include/linux/pci_ids.h  2771  #define PCI_DEVICE_ID_INTEL_82439TX 0x7100
PCI_DEVICE_ID_INTEL_82371AB_0  macro  include/linux/pci_ids.h  2772  #define PCI_DEVICE_ID_INTEL_82371AB_0 0x7110
PCI_DEVICE_ID_INTEL_82371AB  macro  include/linux/pci_ids.h  2773  #define PCI_DEVICE_ID_INTEL_82371AB 0x7111
PCI_DEVICE_ID_INTEL_82371AB_2  macro  include/linux/pci_ids.h  2774  #define PCI_DEVICE_ID_INTEL_82371AB_2 0x7112
PCI_DEVICE_ID_INTEL_82371AB_3  macro  include/linux/pci_ids.h  2775  #define PCI_DEVICE_ID_INTEL_82371AB_3 0x7113
PCI_DEVICE_ID_INTEL_82810_MC1  macro  include/linux/pci_ids.h  2776  #define PCI_DEVICE_ID_INTEL_82810_MC1 0x7120
PCI_DEVICE_ID_INTEL_82810_IG1  macro  include/linux/pci_ids.h  2777  #define PCI_DEVICE_ID_INTEL_82810_IG1 0x7121
PCI_DEVICE_ID_INTEL_82810_MC3  macro  include/linux/pci_ids.h  2778  #define PCI_DEVICE_ID_INTEL_82810_MC3 0x7122
PCI_DEVICE_ID_INTEL_82810_IG3  macro  include/linux/pci_ids.h  2779  #define PCI_DEVICE_ID_INTEL_82810_IG3 0x7123
PCI_DEVICE_ID_INTEL_82810E_MC  macro  include/linux/pci_ids.h  2780  #define PCI_DEVICE_ID_INTEL_82810E_MC 0x7124
PCI_DEVICE_ID_INTEL_82810E_IG  macro  include/linux/pci_ids.h  2781  #define PCI_DEVICE_ID_INTEL_82810E_IG 0x7125
PCI_DEVICE_ID_INTEL_82443LX_0  macro  include/linux/pci_ids.h  2782  #define PCI_DEVICE_ID_INTEL_82443LX_0 0x7180
PCI_DEVICE_ID_INTEL_82443LX_1  macro  include/linux/pci_ids.h  2783  #define PCI_DEVICE_ID_INTEL_82443LX_1 0x7181
PCI_DEVICE_ID_INTEL_82443BX_0  macro  include/linux/pci_ids.h  2784  #define PCI_DEVICE_ID_INTEL_82443BX_0 0x7190
PCI_DEVICE_ID_INTEL_82443BX_1  macro  include/linux/pci_ids.h  2785  #define PCI_DEVICE_ID_INTEL_82443BX_1 0x7191
PCI_DEVICE_ID_INTEL_82443BX_2  macro  include/linux/pci_ids.h  2786  #define PCI_DEVICE_ID_INTEL_82443BX_2 0x7192
PCI_DEVICE_ID_INTEL_440MX  macro  include/linux/pci_ids.h  2787  #define PCI_DEVICE_ID_INTEL_440MX 0x7195
PCI_DEVICE_ID_INTEL_440MX_6  macro  include/linux/pci_ids.h  2788  #define PCI_DEVICE_ID_INTEL_440MX_6 0x7196
PCI_DEVICE_ID_INTEL_82443MX_0  macro  include/linux/pci_ids.h  2789  #define PCI_DEVICE_ID_INTEL_82443MX_0 0x7198
PCI_DEVICE_ID_INTEL_82443MX_1  macro  include/linux/pci_ids.h  2790  #define PCI_DEVICE_ID_INTEL_82443MX_1 0x7199
PCI_DEVICE_ID_INTEL_82443MX_3  macro  include/linux/pci_ids.h  2791  #define PCI_DEVICE_ID_INTEL_82443MX_3 0x719b
PCI_DEVICE_ID_INTEL_82443GX_0  macro  include/linux/pci_ids.h  2792  #define PCI_DEVICE_ID_INTEL_82443GX_0 0x71a0
PCI_DEVICE_ID_INTEL_82443GX_2  macro  include/linux/pci_ids.h  2793  #define PCI_DEVICE_ID_INTEL_82443GX_2 0x71a2
PCI_DEVICE_ID_INTEL_82372FB_1  macro  include/linux/pci_ids.h  2794  #define PCI_DEVICE_ID_INTEL_82372FB_1 0x7601
PCI_DEVICE_ID_INTEL_SCH_LPC  macro  include/linux/pci_ids.h  2795  #define PCI_DEVICE_ID_INTEL_SCH_LPC 0x8119
PCI_DEVICE_ID_INTEL_SCH_IDE  macro  include/linux/pci_ids.h  2796  #define PCI_DEVICE_ID_INTEL_SCH_IDE 0x811a
PCI_DEVICE_ID_INTEL_ITC_LPC  macro  include/linux/pci_ids.h  2797  #define PCI_DEVICE_ID_INTEL_ITC_LPC 0x8186
PCI_DEVICE_ID_INTEL_82454GX  macro  include/linux/pci_ids.h  2798  #define PCI_DEVICE_ID_INTEL_82454GX 0x84c4
PCI_DEVICE_ID_INTEL_82450GX  macro  include/linux/pci_ids.h  2799  #define PCI_DEVICE_ID_INTEL_82450GX 0x84c5
PCI_DEVICE_ID_INTEL_82451NX  macro  include/linux/pci_ids.h  2800  #define PCI_DEVICE_ID_INTEL_82451NX 0x84ca
PCI_DEVICE_ID_INTEL_82454NX  macro  include/linux/pci_ids.h  2801  #define PCI_DEVICE_ID_INTEL_82454NX 0x84cb
PCI_DEVICE_ID_INTEL_84460GX  macro  include/linux/pci_ids.h  2802  #define PCI_DEVICE_ID_INTEL_84460GX 0x84ea
PCI_DEVICE_ID_INTEL_IXP4XX  macro  include/linux/pci_ids.h  2803  #define PCI_DEVICE_ID_INTEL_IXP4XX 0x8500
PCI_DEVICE_ID_INTEL_IXP2800  macro  include/linux/pci_ids.h  2804  #define PCI_DEVICE_ID_INTEL_IXP2800 0x9004
PCI_DEVICE_ID_INTEL_S21152BB  macro  include/linux/pci_ids.h  2805  #define PCI_DEVICE_ID_INTEL_S21152BB 0xb152
PCI_VENDOR_ID_SCALEMP  macro  include/linux/pci_ids.h  2807  #define PCI_VENDOR_ID_SCALEMP 0x8686
PCI_DEVICE_ID_SCALEMP_VSMP_CTL  macro  include/linux/pci_ids.h  2808  #define PCI_DEVICE_ID_SCALEMP_VSMP_CTL 0x1010
PCI_VENDOR_ID_COMPUTONE  macro  include/linux/pci_ids.h  2810  #define PCI_VENDOR_ID_COMPUTONE 0x8e0e
PCI_DEVICE_ID_COMPUTONE_IP2EX  macro  include/linux/pci_ids.h  2811  #define PCI_DEVICE_ID_COMPUTONE_IP2EX 0x0291
PCI_DEVICE_ID_COMPUTONE_PG  macro  include/linux/pci_ids.h  2812  #define PCI_DEVICE_ID_COMPUTONE_PG 0x0302
PCI_SUBVENDOR_ID_COMPUTONE  macro  include/linux/pci_ids.h  2813  #define PCI_SUBVENDOR_ID_COMPUTONE 0x8e0e
PCI_SUBDEVICE_ID_COMPUTONE_PG4  macro  include/linux/pci_ids.h  2814  #define PCI_SUBDEVICE_ID_COMPUTONE_PG4 0x0001
PCI_SUBDEVICE_ID_COMPUTONE_PG8  macro  include/linux/pci_ids.h  2815  #define PCI_SUBDEVICE_ID_COMPUTONE_PG8 0x0002
PCI_SUBDEVICE_ID_COMPUTONE_PG6  macro  include/linux/pci_ids.h  2816  #define PCI_SUBDEVICE_ID_COMPUTONE_PG6 0x0003
PCI_VENDOR_ID_KTI  macro  include/linux/pci_ids.h  2818  #define PCI_VENDOR_ID_KTI 0x8e2e
PCI_VENDOR_ID_ADAPTEC  macro  include/linux/pci_ids.h  2820  #define PCI_VENDOR_ID_ADAPTEC 0x9004
PCI_DEVICE_ID_ADAPTEC_7810  macro  include/linux/pci_ids.h  2821  #define PCI_DEVICE_ID_ADAPTEC_7810 0x1078
PCI_DEVICE_ID_ADAPTEC_7821  macro  include/linux/pci_ids.h  2822  #define PCI_DEVICE_ID_ADAPTEC_7821 0x2178
PCI_DEVICE_ID_ADAPTEC_38602  macro  include/linux/pci_ids.h  2823  #define PCI_DEVICE_ID_ADAPTEC_38602 0x3860
PCI_DEVICE_ID_ADAPTEC_7850  macro  include/linux/pci_ids.h  2824  #define PCI_DEVICE_ID_ADAPTEC_7850 0x5078
PCI_DEVICE_ID_ADAPTEC_7855  macro  include/linux/pci_ids.h  2825  #define PCI_DEVICE_ID_ADAPTEC_7855 0x5578
PCI_DEVICE_ID_ADAPTEC_3860  macro  include/linux/pci_ids.h  2826  #define PCI_DEVICE_ID_ADAPTEC_3860 0x6038
PCI_DEVICE_ID_ADAPTEC_1480A  macro  include/linux/pci_ids.h  2827  #define PCI_DEVICE_ID_ADAPTEC_1480A 0x6075
PCI_DEVICE_ID_ADAPTEC_7860  macro  include/linux/pci_ids.h  2828  #define PCI_DEVICE_ID_ADAPTEC_7860 0x6078
PCI_DEVICE_ID_ADAPTEC_7861  macro  include/linux/pci_ids.h  2829  #define PCI_DEVICE_ID_ADAPTEC_7861 0x6178
PCI_DEVICE_ID_ADAPTEC_7870  macro  include/linux/pci_ids.h  2830  #define PCI_DEVICE_ID_ADAPTEC_7870 0x7078
PCI_DEVICE_ID_ADAPTEC_7871  macro  include/linux/pci_ids.h  2831  #define PCI_DEVICE_ID_ADAPTEC_7871 0x7178
PCI_DEVICE_ID_ADAPTEC_7872  macro  include/linux/pci_ids.h  2832  #define PCI_DEVICE_ID_ADAPTEC_7872 0x7278
PCI_DEVICE_ID_ADAPTEC_7873  macro  include/linux/pci_ids.h  2833  #define PCI_DEVICE_ID_ADAPTEC_7873 0x7378
PCI_DEVICE_ID_ADAPTEC_7874  macro  include/linux/pci_ids.h  2834  #define PCI_DEVICE_ID_ADAPTEC_7874 0x7478
PCI_DEVICE_ID_ADAPTEC_7895  macro  include/linux/pci_ids.h  2835  #define PCI_DEVICE_ID_ADAPTEC_7895 0x7895
PCI_DEVICE_ID_ADAPTEC_7880  macro  include/linux/pci_ids.h  2836  #define PCI_DEVICE_ID_ADAPTEC_7880 0x8078
PCI_DEVICE_ID_ADAPTEC_7881  macro  include/linux/pci_ids.h  2837  #define PCI_DEVICE_ID_ADAPTEC_7881 0x8178
PCI_DEVICE_ID_ADAPTEC_7882  macro  include/linux/pci_ids.h  2838  #define PCI_DEVICE_ID_ADAPTEC_7882 0x8278
PCI_DEVICE_ID_ADAPTEC_7883  macro  include/linux/pci_ids.h  2839  #define PCI_DEVICE_ID_ADAPTEC_7883 0x8378
PCI_DEVICE_ID_ADAPTEC_7884  macro  include/linux/pci_ids.h  2840  #define PCI_DEVICE_ID_ADAPTEC_7884 0x8478
PCI_DEVICE_ID_ADAPTEC_7885  macro  include/linux/pci_ids.h  2841  #define PCI_DEVICE_ID_ADAPTEC_7885 0x8578
PCI_DEVICE_ID_ADAPTEC_7886  macro  include/linux/pci_ids.h  2842  #define PCI_DEVICE_ID_ADAPTEC_7886 0x8678
PCI_DEVICE_ID_ADAPTEC_7887  macro  include/linux/pci_ids.h  2843  #define PCI_DEVICE_ID_ADAPTEC_7887 0x8778
PCI_DEVICE_ID_ADAPTEC_7888  macro  include/linux/pci_ids.h  2844  #define PCI_DEVICE_ID_ADAPTEC_7888 0x8878
PCI_VENDOR_ID_ADAPTEC2  macro  include/linux/pci_ids.h  2846  #define PCI_VENDOR_ID_ADAPTEC2 0x9005
PCI_DEVICE_ID_ADAPTEC2_2940U2  macro  include/linux/pci_ids.h  2847  #define PCI_DEVICE_ID_ADAPTEC2_2940U2 0x0010
PCI_DEVICE_ID_ADAPTEC2_2930U2  macro  include/linux/pci_ids.h  2848  #define PCI_DEVICE_ID_ADAPTEC2_2930U2 0x0011
PCI_DEVICE_ID_ADAPTEC2_7890B  macro  include/linux/pci_ids.h  2849  #define PCI_DEVICE_ID_ADAPTEC2_7890B 0x0013
PCI_DEVICE_ID_ADAPTEC2_7890  macro  include/linux/pci_ids.h  2850  #define PCI_DEVICE_ID_ADAPTEC2_7890 0x001f
PCI_DEVICE_ID_ADAPTEC2_3940U2  macro  include/linux/pci_ids.h  2851  #define PCI_DEVICE_ID_ADAPTEC2_3940U2 0x0050
PCI_DEVICE_ID_ADAPTEC2_3950U2D  macro  include/linux/pci_ids.h  2852  #define PCI_DEVICE_ID_ADAPTEC2_3950U2D 0x0051
PCI_DEVICE_ID_ADAPTEC2_7896  macro  include/linux/pci_ids.h  2853  #define PCI_DEVICE_ID_ADAPTEC2_7896 0x005f
PCI_DEVICE_ID_ADAPTEC2_7892A  macro  include/linux/pci_ids.h  2854  #define PCI_DEVICE_ID_ADAPTEC2_7892A 0x0080
PCI_DEVICE_ID_ADAPTEC2_7892B  macro  include/linux/pci_ids.h  2855  #define PCI_DEVICE_ID_ADAPTEC2_7892B 0x0081
PCI_DEVICE_ID_ADAPTEC2_7892D  macro  include/linux/pci_ids.h  2856  #define PCI_DEVICE_ID_ADAPTEC2_7892D 0x0083
PCI_DEVICE_ID_ADAPTEC2_7892P  macro  include/linux/pci_ids.h  2857  #define PCI_DEVICE_ID_ADAPTEC2_7892P 0x008f
PCI_DEVICE_ID_ADAPTEC2_7899A  macro  include/linux/pci_ids.h  2858  #define PCI_DEVICE_ID_ADAPTEC2_7899A 0x00c0
PCI_DEVICE_ID_ADAPTEC2_7899B  macro  include/linux/pci_ids.h  2859  #define PCI_DEVICE_ID_ADAPTEC2_7899B 0x00c1
PCI_DEVICE_ID_ADAPTEC2_7899D  macro  include/linux/pci_ids.h  2860  #define PCI_DEVICE_ID_ADAPTEC2_7899D 0x00c3
PCI_DEVICE_ID_ADAPTEC2_7899P  macro  include/linux/pci_ids.h  2861  #define PCI_DEVICE_ID_ADAPTEC2_7899P 0x00cf
PCI_DEVICE_ID_ADAPTEC2_OBSIDIAN  macro  include/linux/pci_ids.h  2862  #define PCI_DEVICE_ID_ADAPTEC2_OBSIDIAN 0x0500
PCI_DEVICE_ID_ADAPTEC2_SCAMP  macro  include/linux/pci_ids.h  2863  #define PCI_DEVICE_ID_ADAPTEC2_SCAMP 0x0503
PCI_VENDOR_ID_HOLTEK  macro  include/linux/pci_ids.h  2865  #define PCI_VENDOR_ID_HOLTEK 0x9412
PCI_DEVICE_ID_HOLTEK_6565  macro  include/linux/pci_ids.h  2866  #define PCI_DEVICE_ID_HOLTEK_6565 0x6565
PCI_VENDOR_ID_NETMOS  macro  include/linux/pci_ids.h  2868  #define PCI_VENDOR_ID_NETMOS 0x9710
PCI_DEVICE_ID_NETMOS_9705  macro  include/linux/pci_ids.h  2869  #define PCI_DEVICE_ID_NETMOS_9705 0x9705
PCI_DEVICE_ID_NETMOS_9715  macro  include/linux/pci_ids.h  2870  #define PCI_DEVICE_ID_NETMOS_9715 0x9715
PCI_DEVICE_ID_NETMOS_9735  macro  include/linux/pci_ids.h  2871  #define PCI_DEVICE_ID_NETMOS_9735 0x9735
PCI_DEVICE_ID_NETMOS_9745  macro  include/linux/pci_ids.h  2872  #define PCI_DEVICE_ID_NETMOS_9745 0x9745
PCI_DEVICE_ID_NETMOS_9755  macro  include/linux/pci_ids.h  2873  #define PCI_DEVICE_ID_NETMOS_9755 0x9755
PCI_DEVICE_ID_NETMOS_9805  macro  include/linux/pci_ids.h  2874  #define PCI_DEVICE_ID_NETMOS_9805 0x9805
PCI_DEVICE_ID_NETMOS_9815  macro  include/linux/pci_ids.h  2875  #define PCI_DEVICE_ID_NETMOS_9815 0x9815
PCI_DEVICE_ID_NETMOS_9835  macro  include/linux/pci_ids.h  2876  #define PCI_DEVICE_ID_NETMOS_9835 0x9835
PCI_DEVICE_ID_NETMOS_9845  macro  include/linux/pci_ids.h  2877  #define PCI_DEVICE_ID_NETMOS_9845 0x9845
PCI_DEVICE_ID_NETMOS_9855  macro  include/linux/pci_ids.h  2878  #define PCI_DEVICE_ID_NETMOS_9855 0x9855
PCI_DEVICE_ID_NETMOS_9865  macro  include/linux/pci_ids.h  2879  #define PCI_DEVICE_ID_NETMOS_9865 0x9865
PCI_DEVICE_ID_NETMOS_9900  macro  include/linux/pci_ids.h  2880  #define PCI_DEVICE_ID_NETMOS_9900 0x9900
PCI_DEVICE_ID_NETMOS_9901  macro  include/linux/pci_ids.h  2881  #define PCI_DEVICE_ID_NETMOS_9901 0x9901
PCI_DEVICE_ID_NETMOS_9904  macro  include/linux/pci_ids.h  2882  #define PCI_DEVICE_ID_NETMOS_9904 0x9904
PCI_DEVICE_ID_NETMOS_9912  macro  include/linux/pci_ids.h  2883  #define PCI_DEVICE_ID_NETMOS_9912 0x9912
PCI_DEVICE_ID_NETMOS_9922  macro  include/linux/pci_ids.h  2884  #define PCI_DEVICE_ID_NETMOS_9922 0x9922
PCI_VENDOR_ID_3COM_2  macro  include/linux/pci_ids.h  2886  #define PCI_VENDOR_ID_3COM_2 0xa727
PCI_VENDOR_ID_DIGIUM  macro  include/linux/pci_ids.h  2888  #define PCI_VENDOR_ID_DIGIUM 0xd161
PCI_DEVICE_ID_DIGIUM_HFC4S  macro  include/linux/pci_ids.h  2889  #define PCI_DEVICE_ID_DIGIUM_HFC4S 0xb410
PCI_SUBVENDOR_ID_EXSYS  macro  include/linux/pci_ids.h  2891  #define PCI_SUBVENDOR_ID_EXSYS 0xd84d
PCI_SUBDEVICE_ID_EXSYS_4014  macro  include/linux/pci_ids.h  2892  #define PCI_SUBDEVICE_ID_EXSYS_4014 0x4014
PCI_SUBDEVICE_ID_EXSYS_4055  macro  include/linux/pci_ids.h  2893  #define PCI_SUBDEVICE_ID_EXSYS_4055 0x4055
PCI_VENDOR_ID_TIGERJET  macro  include/linux/pci_ids.h  2895  #define PCI_VENDOR_ID_TIGERJET 0xe159
PCI_DEVICE_ID_TIGERJET_300  macro  include/linux/pci_ids.h  2896  #define PCI_DEVICE_ID_TIGERJET_300 0x0001
PCI_DEVICE_ID_TIGERJET_100  macro  include/linux/pci_ids.h  2897  #define PCI_DEVICE_ID_TIGERJET_100 0x0002
PCI_VENDOR_ID_XILINX_RME  macro  include/linux/pci_ids.h  2899  #define PCI_VENDOR_ID_XILINX_RME 0xea60
PCI_DEVICE_ID_RME_DIGI32  macro  include/linux/pci_ids.h  2900  #define PCI_DEVICE_ID_RME_DIGI32 0x9896
PCI_DEVICE_ID_RME_DIGI32_PRO  macro  include/linux/pci_ids.h  2901  #define PCI_DEVICE_ID_RME_DIGI32_PRO 0x9897
PCI_DEVICE_ID_RME_DIGI32_8  macro  include/linux/pci_ids.h  2902  #define PCI_DEVICE_ID_RME_DIGI32_8 0x9898
PCI_VENDOR_ID_XEN  macro  include/linux/pci_ids.h  2904  #define PCI_VENDOR_ID_XEN 0x5853
PCI_DEVICE_ID_XEN_PLATFORM  macro  include/linux/pci_ids.h  2905  #define PCI_DEVICE_ID_XEN_PLATFORM 0x0001
PCI_VENDOR_ID_OCZ  macro  include/linux/pci_ids.h  2907  #define PCI_VENDOR_ID_OCZ 0x1b85
_LINUX_PCI_DMA_H  macro  include/linux/pci-dma.h  2  #define _LINUX_PCI_DMA_H
DECLARE_PCI_UNMAP_ADDR  macro  include/linux/pci-dma.h  4  #define DECLARE_PCI_UNMAP_ADDR(ADDR_NAME) DEFINE_DMA_UNMAP_ADDR(ADDR_NAME);
DECLARE_PCI_UNMAP_LEN  macro  include/linux/pci-dma.h  5  #define DECLARE_PCI_UNMAP_LEN(LEN_NAME) DEFINE_DMA_UNMAP_LEN(LEN_NAME);
pci_unmap_addr  macro  include/linux/pci-dma.h  6  #define pci_unmap_addr dma_unmap_addr
pci_unmap_addr_set  macro  include/linux/pci-dma.h  7  #define pci_unmap_addr_set dma_unmap_addr_set
pci_unmap_len  macro  include/linux/pci-dma.h  8  #define pci_unmap_len dma_unmap_len
pci_unmap_len_set  macro  include/linux/pci-dma.h  9  #define pci_unmap_len_set dma_unmap_len_set
LINUX_DMAPOOL_H  macro  include/linux/dmapool.h  12  #define LINUX_DMAPOOL_H
dma_pool_create  prototype  include/linux/dmapool.h  17  struct dma_pool *dma_pool_create(const char *name,struct device *dev,size_t size, size_t align, size_t allocation);
dma_pool_destroy  prototype  include/linux/dmapool.h  20  void dma_pool_destroy(struct dma_pool *pool);
dma_pool_alloc  prototype  include/linux/dmapool.h  22  void *dma_pool_alloc(struct dma_pool *pool,gfp_t mem_flags,dma_addr_t *handle);
dma_pool_free  prototype  include/linux/dmapool.h  25  void dma_pool_free(struct dma_pool *pool,void *vaddr,dma_addr_t addr);
dmam_pool_create  prototype  include/linux/dmapool.h  30  struct dma_pool *dmam_pool_create(const char *name,struct device *dev,size_t size, size_t align, size_t allocation);
dmam_pool_destroy  prototype  include/linux/dmapool.h  32  void dmam_pool_destroy(struct dma_pool *pool);
_ASM_X86_PCI_H  macro  arch/x86/include/asm/pci.h  2  #define _ASM_X86_PCI_H
pci_sysdata  struct  arch/x86/include/asm/pci.h  14  struct pci_sysdata { int domain; int node; void *iommu; };
pci_scan_bus_on_node  prototype  arch/x86/include/asm/pci.h  27  extern struct pci_bus *pci_scan_bus_on_node(int busno,struct pci_ops *ops,int node);
pci_scan_bus_with_sysdata  prototype  arch/x86/include/asm/pci.h  29  extern struct pci_bus *pci_scan_bus_with_sysdata(int busno);
pcibios_assign_all_busses  macro  arch/x86/include/asm/pci.h  58  # define pcibios_assign_all_busses() 0
pci_legacy_init  prototype  arch/x86/include/asm/pci.h  51  extern int pci_legacy_init(void);
x86_default_pci_init  macro  arch/x86/include/asm/pci.h  59  # define x86_default_pci_init NULL
PCIBIOS_MIN_IO  macro  arch/x86/include/asm/pci.h  63  #define PCIBIOS_MIN_IO 0x1000
PCIBIOS_MIN_MEM  macro  arch/x86/include/asm/pci.h  64  #define PCIBIOS_MIN_MEM (pci_mem_start)
PCIBIOS_MIN_CARDBUS_IO  macro  arch/x86/include/asm/pci.h  66  #define PCIBIOS_MIN_CARDBUS_IO 0x4000
pcibios_config_init  prototype  arch/x86/include/asm/pci.h  69  void pcibios_config_init(void);
pcibios_scan_root  prototype  arch/x86/include/asm/pci.h  70  struct pci_bus *pcibios_scan_root(int bus);
pcibios_penalize_isa_irq  prototype  arch/x86/include/asm/pci.h  73  void pcibios_penalize_isa_irq(int irq,int active);
pcibios_get_irq_routing_table  prototype  arch/x86/include/asm/pci.h  74  struct irq_routing_table *pcibios_get_irq_routing_table(void);
pcibios_set_irq_routing  prototype  arch/x86/include/asm/pci.h  75  int pcibios_set_irq_routing(struct pci_dev *dev,int pin,int irq);
HAVE_PCI_MMAP  macro  arch/x86/include/asm/pci.h  78  #define HAVE_PCI_MMAP
pci_mmap_page_range  prototype  arch/x86/include/asm/pci.h  79  extern int pci_mmap_page_range(struct pci_dev *dev,struct vm_area_struct *vma,enum pci_mmap_state mmap_state,int write_combine);
early_quirks  function  arch/x86/include/asm/pci.h  94  static inline void early_quirks(void) { }
pci_iommu_alloc  prototype  arch/x86/include/asm/pci.h  97  extern void pci_iommu_alloc(void);
x86_setup_msi_irqs  function  arch/x86/include/asm/pci.h  101  static inline int x86_setup_msi_irqs(struct pci_dev *dev,int nvec,int type)
x86_teardown_msi_irqs  function  arch/x86/include/asm/pci.h  106  static inline void x86_teardown_msi_irqs(struct pci_dev *dev)
x86_teardown_msi_irq  function  arch/x86/include/asm/pci.h  111  static inline void x86_teardown_msi_irq(unsigned int irq)
x86_restore_msi_irqs  function  arch/x86/include/asm/pci.h  115  static inline void x86_restore_msi_irqs(struct pci_dev *dev,int irq)
arch_setup_msi_irqs  macro  arch/x86/include/asm/pci.h  119  #define arch_setup_msi_irqs x86_setup_msi_irqs
arch_teardown_msi_irqs  macro  arch/x86/include/asm/pci.h  120  #define arch_teardown_msi_irqs x86_teardown_msi_irqs
arch_teardown_msi_irq  macro  arch/x86/include/asm/pci.h  121  #define arch_teardown_msi_irq x86_teardown_msi_irq
arch_restore_msi_irqs  macro  arch/x86/include/asm/pci.h  122  #define arch_restore_msi_irqs x86_restore_msi_irqs
native_setup_msi_irqs  macro  arch/x86/include/asm/pci.h  133  #define native_setup_msi_irqs NULL
native_teardown_msi_irq  macro  arch/x86/include/asm/pci.h  134  #define native_teardown_msi_irq NULL
native_restore_msi_irqs  prototype  arch/x86/include/asm/pci.h  126  void native_restore_msi_irqs(struct pci_dev *dev,int irq);
HAVE_DEFAULT_MSI_TEARDOWN_IRQS  macro  arch/x86/include/asm/pci.h  128  #define HAVE_DEFAULT_MSI_TEARDOWN_IRQS
HAVE_DEFAULT_MSI_RESTORE_IRQS  macro  arch/x86/include/asm/pci.h  129  #define HAVE_DEFAULT_MSI_RESTORE_IRQS
default_teardown_msi_irqs  macro  arch/x86/include/asm/pci.h  135  #define default_teardown_msi_irqs NULL
default_restore_msi_irqs  macro  arch/x86/include/asm/pci.h  136  #define default_restore_msi_irqs NULL
PCI_DMA_BUS_IS_PHYS  macro  include/asm-generic/pci.h  34  #define PCI_DMA_BUS_IS_PHYS (1)
__pcibus_to_node  function  arch/x86/include/asm/pci.h  156  static inline int __pcibus_to_node(const struct pci_bus *bus)
cpumask_of_pcibus  function  arch/x86/include/asm/pci.h  164  cpumask_of_pcibus(const struct pci_bus *bus)
_ASM_X86_DELAY_H  macro  arch/x86/include/asm/delay.h  2  #define _ASM_X86_DELAY_H
use_tsc_delay  prototype  arch/x86/include/asm/delay.h  6  void use_tsc_delay(void);
_LINUX_COMPAT_H  macro  include/linux/compat.h  2  #define _LINUX_COMPAT_H
COMPAT_USE_64BIT_TIME  macro  arch/x86/include/asm/compat.h  200  #define COMPAT_USE_64BIT_TIME (!!(task_pt_regs(current)->orig_ax & __X32_SYSCALL_BIT))
compat_jiffies_to_clock_t  macro  include/linux/compat.h  26  #define compat_jiffies_to_clock_t(x) (((unsigned long)(x) * COMPAT_USER_HZ) / HZ)
compat_itimerspec  struct  include/linux/compat.h  35  struct compat_itimerspec { struct compat_timespec it_interval; struct compat_timespec it_value; };
compat_utimbuf  struct  include/linux/compat.h  40  struct compat_utimbuf { compat_time_t actime; compat_time_t modtime; };
compat_itimerval  struct  include/linux/compat.h  45  struct compat_itimerval { struct compat_timeval it_interval; struct compat_timeval it_value; };
compat_tms  struct  include/linux/compat.h  50  struct compat_tms { compat_clock_t tms_utime; compat_clock_t tms_stime; compat_clock_t tms_cutime; compat_clock_t tms_cstime; };
compat_timex  struct  include/linux/compat.h  57  struct compat_timex { compat_uint_t modes; compat_long_t offset; compat_long_t freq; compat_long_t maxerror; compat_long_t esterror; compat_int_t status; compat_long_t constant; compat_long_t precision; compat_long_t tolerance; struct compat_timeval time; compat_long_t tick; compat_long_t ppsfreq; compat_long_t jitter; compat_int_t shift; compat_long_t stabil; compat_long_t jitcnt; compat_long_t calcnt; compat_long_t errcnt; compat_long_t stbcnt; compat_int_t tai; compat_int_t:32; compat_int_t:32; compat_int_t:32; compat_int_t:32; };
_COMPAT_NSIG_WORDS  macro  include/linux/compat.h  84  #define _COMPAT_NSIG_WORDS (_COMPAT_NSIG / _COMPAT_NSIG_BPW)
compat_sigset_t  struct  include/linux/compat.h  86  typedef struct { compat_sigset_word sig[_COMPAT_NSIG_WORDS]; } compat_sigset_t;
get_compat_timespec  prototype  include/linux/compat.h  93  extern int get_compat_timespec(struct timespec *,const struct compat_timespec __user *);
put_compat_timespec  prototype  include/linux/compat.h  95  extern int put_compat_timespec(const struct timespec *,struct compat_timespec __user *);
get_compat_timeval  prototype  include/linux/compat.h  97  extern int get_compat_timeval(struct timeval *,const struct compat_timeval __user *);
put_compat_timeval  prototype  include/linux/compat.h  99  extern int put_compat_timeval(const struct timeval *,struct compat_timeval __user *);
compat_get_timespec  prototype  include/linux/compat.h  106  extern int compat_get_timespec(struct timespec *,const void __user *);
compat_put_timespec  prototype  include/linux/compat.h  107  extern int compat_put_timespec(const struct timespec *,void __user *);
compat_get_timeval  prototype  include/linux/compat.h  108  extern int compat_get_timeval(struct timeval *,const void __user *);
compat_put_timeval  prototype  include/linux/compat.h  109  extern int compat_put_timeval(const struct timeval *,void __user *);
compat_iovec  struct  include/linux/compat.h  111  struct compat_iovec { compat_uptr_t iov_base; compat_size_t iov_len; };
compat_rlimit  struct  include/linux/compat.h  116  struct compat_rlimit { compat_ulong_t rlim_cur; compat_ulong_t rlim_max; };
compat_rusage  struct  include/linux/compat.h  121  struct compat_rusage { struct compat_timeval ru_utime; struct compat_timeval ru_stime; compat_long_t ru_maxrss; compat_long_t ru_ixrss; compat_long_t ru_idrss; compat_long_t ru_isrss; compat_long_t ru_minflt; compat_long_t ru_majflt; compat_long_t ru_nswap; compat_long_t ru_inblock; compat_long_t ru_oublock; compat_long_t ru_msgsnd; compat_long_t ru_msgrcv; compat_long_t ru_nsignals; compat_long_t ru_nvcsw; compat_long_t ru_nivcsw; };
put_compat_rusage  prototype  include/linux/compat.h  140  extern int put_compat_rusage(const struct rusage *,struct compat_rusage __user *);
compat_sys_waitid  prototype  include/linux/compat.h  145  extern asmlinkage long compat_sys_waitid(int,compat_pid_t,struct compat_siginfo __user *, int,struct compat_rusage __user *);
compat_dirent  struct  include/linux/compat.h  149  struct compat_dirent { u32 d_ino; compat_off_t d_off; u16 d_reclen; char d_name[256]; };
compat_ustat  struct  include/linux/compat.h  156  struct compat_ustat { compat_daddr_t f_tfree; compat_ino_t f_tinode; char f_fname[6]; char f_fpack[6]; };
compat_sigval  union  include/linux/compat.h  163  typedef union compat_sigval { compat_int_t sival_int; compat_uptr_t sival_ptr; } compat_sigval_t;
compat_sigval_t  union  include/linux/compat.h  163  typedef union compat_sigval { compat_int_t sival_int; compat_uptr_t sival_ptr; } compat_sigval_t;
COMPAT_SIGEV_PAD_SIZE  macro  include/linux/compat.h  168  #define COMPAT_SIGEV_PAD_SIZE ((SIGEV_MAX_SIZE/sizeof(int)) - 3)
compat_sigevent  struct  include/linux/compat.h  170  typedef struct compat_sigevent { compat_sigval_t sigev_value; compat_int_t sigev_signo; compat_int_t sigev_notify; union { compat_int_t _pad[COMPAT_SIGEV_PAD_SIZE]; compat_int_t _tid; struct { compat_uptr_t _function; compat_uptr_t _attribute; } _sigev_thread; } _sigev_un; } compat_sigevent_t;
compat_sigevent_t  struct  include/linux/compat.h  170  typedef struct compat_sigevent { compat_sigval_t sigev_value; compat_int_t sigev_signo; compat_int_t sigev_notify; union { compat_int_t _pad[COMPAT_SIGEV_PAD_SIZE]; compat_int_t _tid; struct { compat_uptr_t _function; compat_uptr_t _attribute; } _sigev_thread; } _sigev_un; } compat_sigevent_t;
compat_ifmap  struct  include/linux/compat.h  185  struct compat_ifmap { compat_ulong_t mem_start; compat_ulong_t mem_end; unsigned short base_addr; unsigned char irq; unsigned char dma; unsigned char port; };
compat_if_settings  struct  include/linux/compat.h  194  struct compat_if_settings { unsigned int type; unsigned int size; compat_uptr_t ifs_ifsu; };
compat_ifreq  struct  include/linux/compat.h  200  struct compat_ifreq { char ifrn_name[IFNAMSIZ]; } ifr_ifrn; union { struct sockaddr ifru_addr; struct sockaddr ifru_dstaddr; struct sockaddr ifru_broadaddr; struct sockaddr ifru_netmask; struct sockaddr ifru_hwaddr; short ifru_flags; compat_int_t ifru_ivalue; compat_int_t ifru_mtu; struct compat_ifmap ifru_map; char ifru_slave[IFNAMSIZ]; char ifru_newname[IFNAMSIZ]; compat_caddr_t ifru_data; struct compat_if_settings ifru_settings; } ifr_ifru; };
compat_ifconf  struct  include/linux/compat.h  221  struct compat_ifconf { compat_int_t ifc_len; compat_caddr_t ifcbuf; };
compat_robust_list  struct  include/linux/compat.h  226  struct compat_robust_list { compat_uptr_t next; };
compat_robust_list_head  struct  include/linux/compat.h  230  struct compat_robust_list_head { struct compat_robust_list list; compat_long_t futex_offset; compat_uptr_t list_op_pending; };
compat_exit_robust_list  prototype  include/linux/compat.h  249  extern void compat_exit_robust_list(struct task_struct *curr);
compat_sys_set_robust_list  prototype  include/linux/compat.h  252  compat_sys_set_robust_list(struct compat_robust_list_head __user *head,compat_size_t len);
compat_sys_get_robust_list  prototype  include/linux/compat.h  255  compat_sys_get_robust_list(int pid,compat_uptr_t __user *head_ptr,compat_size_t __user *len_ptr);
compat_sys_semctl  prototype  include/linux/compat.h  266  long compat_sys_semctl(int semid,int semnum,int cmd,int arg);
compat_sys_msgsnd  prototype  include/linux/compat.h  267  long compat_sys_msgsnd(int msqid,struct compat_msgbuf __user *msgp,size_t msgsz, int msgflg);
compat_sys_msgrcv  prototype  include/linux/compat.h  269  long compat_sys_msgrcv(int msqid,struct compat_msgbuf __user *msgp,size_t msgsz, long msgtyp, int msgflg);
compat_sys_shmat  prototype  include/linux/compat.h  271  long compat_sys_shmat(int shmid,compat_uptr_t shmaddr,int shmflg);
compat_sys_msgctl  prototype  include/linux/compat.h  273  long compat_sys_msgctl(int first,int second,void __user *uptr);
compat_sys_shmctl  prototype  include/linux/compat.h  274  long compat_sys_shmctl(int first,int second,void __user *uptr);
compat_sys_semtimedop  prototype  include/linux/compat.h  275  long compat_sys_semtimedop(int semid,struct sembuf __user *tsems,unsigned nsems, const struct compat_timespec __user *timeout);
compat_sys_keyctl  prototype  include/linux/compat.h  277  asmlinkage long compat_sys_keyctl(u32 option,u32 arg2, u32 arg3, u32 arg4, u32 arg5);
compat_sys_ustat  prototype  include/linux/compat.h  279  asmlinkage long compat_sys_ustat(unsigned dev,struct compat_ustat __user *u32);
compat_sys_readv  prototype  include/linux/compat.h  281  asmlinkage ssize_t compat_sys_readv(unsigned long fd,const struct compat_iovec __user *vec, unsigned long vlen);
compat_sys_writev  prototype  include/linux/compat.h  283  asmlinkage ssize_t compat_sys_writev(unsigned long fd,const struct compat_iovec __user *vec, unsigned long vlen);
compat_sys_preadv  prototype  include/linux/compat.h  285  asmlinkage ssize_t compat_sys_preadv(unsigned long fd,const struct compat_iovec __user *vec,unsigned long vlen, u32 pos_low, u32 pos_high);
compat_sys_pwritev  prototype  include/linux/compat.h  288  asmlinkage ssize_t compat_sys_pwritev(unsigned long fd,const struct compat_iovec __user *vec,unsigned long vlen, u32 pos_low, u32 pos_high);
compat_do_execve  prototype  include/linux/compat.h  292  int compat_do_execve(char *filename,compat_uptr_t __user *argv,compat_uptr_t __user *envp, struct pt_regs *regs);
compat_sys_select  prototype  include/linux/compat.h  295  asmlinkage long compat_sys_select(int n,compat_ulong_t __user *inp,compat_ulong_t __user *outp, compat_ulong_t __user *exp,struct compat_timeval __user *tvp);
compat_sys_old_select  prototype  include/linux/compat.h  299  asmlinkage long compat_sys_old_select(struct compat_sel_arg_struct __user *arg);
compat_sys_wait4  prototype  include/linux/compat.h  301  asmlinkage long compat_sys_wait4(compat_pid_t pid,compat_uint_t __user *stat_addr, int options,struct compat_rusage __user *ru);
BITS_PER_COMPAT_LONG  macro  include/linux/compat.h  305  #define BITS_PER_COMPAT_LONG (8*sizeof(compat_long_t))
BITS_TO_COMPAT_LONGS  macro  include/linux/compat.h  307  #define BITS_TO_COMPAT_LONGS(bits) (((bits)+BITS_PER_COMPAT_LONG-1)/BITS_PER_COMPAT_LONG)
compat_get_bitmap  prototype  include/linux/compat.h  310  long compat_get_bitmap(unsigned long *mask,const compat_ulong_t __user *umask,unsigned long bitmap_size);
compat_put_bitmap  prototype  include/linux/compat.h  312  long compat_put_bitmap(compat_ulong_t __user *umask,unsigned long *mask,unsigned long bitmap_size);
copy_siginfo_from_user32  prototype  include/linux/compat.h  314  int copy_siginfo_from_user32(siginfo_t *to,struct compat_siginfo __user *from);
copy_siginfo_to_user32  prototype  include/linux/compat.h  315  int copy_siginfo_to_user32(struct compat_siginfo __user *to,siginfo_t *from);
get_compat_sigevent  prototype  include/linux/compat.h  316  int get_compat_sigevent(struct sigevent *event,const struct compat_sigevent __user *u_event);
compat_sys_rt_tgsigqueueinfo  prototype  include/linux/compat.h  318  long compat_sys_rt_tgsigqueueinfo(compat_pid_t tgid,compat_pid_t pid,int sig,struct compat_siginfo __user *uinfo);
compat_timeval_compare  function  include/linux/compat.h  321  static inline int compat_timeval_compare(struct compat_timeval *lhs,struct compat_timeval *rhs)
compat_timespec_compare  function  include/linux/compat.h  331  static inline int compat_timespec_compare(struct compat_timespec *lhs,struct compat_timespec *rhs)
get_compat_itimerspec  prototype  include/linux/compat.h  341  extern int get_compat_itimerspec(struct itimerspec *dst,const struct compat_itimerspec __user *src);
put_compat_itimerspec  prototype  include/linux/compat.h  343  extern int put_compat_itimerspec(struct compat_itimerspec __user *dst,const struct itimerspec *src);
compat_sys_gettimeofday  prototype  include/linux/compat.h  346  asmlinkage long compat_sys_gettimeofday(struct compat_timeval __user *tv,struct timezone __user *tz);
compat_sys_settimeofday  prototype  include/linux/compat.h  348  asmlinkage long compat_sys_settimeofday(struct compat_timeval __user *tv,struct timezone __user *tz);
compat_sys_adjtimex  prototype  include/linux/compat.h  351  asmlinkage long compat_sys_adjtimex(struct compat_timex __user *utp);
compat_printk  prototype  include/linux/compat.h  353  extern int compat_printk(const char *fmt,...);
sigset_from_compat  prototype  include/linux/compat.h  354  extern void sigset_from_compat(sigset_t *set,compat_sigset_t *compat);
compat_sys_migrate_pages  prototype  include/linux/compat.h  356  asmlinkage long compat_sys_migrate_pages(compat_pid_t pid,compat_ulong_t maxnode, const compat_ulong_t __user *old_nodes,const compat_ulong_t __user *new_nodes);
compat_ptrace_request  prototype  include/linux/compat.h  360  extern int compat_ptrace_request(struct task_struct *child,compat_long_t request,compat_ulong_t addr, compat_ulong_t data);
compat_arch_ptrace  prototype  include/linux/compat.h  364  extern long compat_arch_ptrace(struct task_struct *child,compat_long_t request,compat_ulong_t addr, compat_ulong_t data);
compat_sys_ptrace  prototype  include/linux/compat.h  366  asmlinkage long compat_sys_ptrace(compat_long_t request,compat_long_t pid,compat_long_t addr, compat_long_t data);
compat_epoll_event  macro  include/linux/compat.h  373  #define compat_epoll_event epoll_event
compat_sys_epoll_pwait  prototype  include/linux/compat.h  374  asmlinkage long compat_sys_epoll_pwait(int epfd,struct compat_epoll_event __user *events,int maxevents, int timeout,const compat_sigset_t __user *sigmask,compat_size_t sigsetsize);
compat_sys_utime  prototype  include/linux/compat.h  380  asmlinkage long compat_sys_utime(const char __user *filename,struct compat_utimbuf __user *t);
compat_sys_utimensat  prototype  include/linux/compat.h  382  asmlinkage long compat_sys_utimensat(unsigned int dfd,const char __user *filename,struct compat_timespec __user *t,int flags);
compat_sys_time  prototype  include/linux/compat.h  387  asmlinkage long compat_sys_time(compat_time_t __user *tloc);
compat_sys_stime  prototype  include/linux/compat.h  388  asmlinkage long compat_sys_stime(compat_time_t __user *tptr);
compat_sys_signalfd  prototype  include/linux/compat.h  389  asmlinkage long compat_sys_signalfd(int ufd,const compat_sigset_t __user *sigmask,compat_size_t sigsetsize);
compat_sys_timerfd_settime  prototype  include/linux/compat.h  392  asmlinkage long compat_sys_timerfd_settime(int ufd,int flags,const struct compat_itimerspec __user *utmr,struct compat_itimerspec __user *otmr);
compat_sys_timerfd_gettime  prototype  include/linux/compat.h  395  asmlinkage long compat_sys_timerfd_gettime(int ufd,struct compat_itimerspec __user *otmr);
compat_sys_move_pages  prototype  include/linux/compat.h  398  asmlinkage long compat_sys_move_pages(pid_t pid,unsigned long nr_page,__u32 __user *pages,const int __user *nodes,int __user *status,int flags);
compat_sys_futimesat  prototype  include/linux/compat.h  403  asmlinkage long compat_sys_futimesat(unsigned int dfd,const char __user *filename,struct compat_timeval __user *t);
compat_sys_utimes  prototype  include/linux/compat.h  406  asmlinkage long compat_sys_utimes(const char __user *filename,struct compat_timeval __user *t);
compat_sys_newstat  prototype  include/linux/compat.h  408  asmlinkage long compat_sys_newstat(const char __user *filename,struct compat_stat __user *statbuf);
compat_sys_newlstat  prototype  include/linux/compat.h  410  asmlinkage long compat_sys_newlstat(const char __user *filename,struct compat_stat __user *statbuf);
compat_sys_newfstatat  prototype  include/linux/compat.h  412  asmlinkage long compat_sys_newfstatat(unsigned int dfd,const char __user *filename,struct compat_stat __user *statbuf,int flag);
compat_sys_newfstat  prototype  include/linux/compat.h  416  asmlinkage long compat_sys_newfstat(unsigned int fd,struct compat_stat __user *statbuf);
compat_sys_statfs  prototype  include/linux/compat.h  418  asmlinkage long compat_sys_statfs(const char __user *pathname,struct compat_statfs __user *buf);
compat_sys_fstatfs  prototype  include/linux/compat.h  420  asmlinkage long compat_sys_fstatfs(unsigned int fd,struct compat_statfs __user *buf);
compat_sys_statfs64  prototype  include/linux/compat.h  422  asmlinkage long compat_sys_statfs64(const char __user *pathname,compat_size_t sz,struct compat_statfs64 __user *buf);
compat_sys_fstatfs64  prototype  include/linux/compat.h  425  asmlinkage long compat_sys_fstatfs64(unsigned int fd,compat_size_t sz,struct compat_statfs64 __user *buf);
compat_sys_fcntl64  prototype  include/linux/compat.h  427  asmlinkage long compat_sys_fcntl64(unsigned int fd,unsigned int cmd,unsigned long arg);
compat_sys_fcntl  prototype  include/linux/compat.h  429  asmlinkage long compat_sys_fcntl(unsigned int fd,unsigned int cmd,unsigned long arg);
compat_sys_io_setup  prototype  include/linux/compat.h  431  asmlinkage long compat_sys_io_setup(unsigned nr_reqs,u32 __user *ctx32p);
compat_sys_io_getevents  prototype  include/linux/compat.h  432  asmlinkage long compat_sys_io_getevents(aio_context_t ctx_id,unsigned long min_nr,unsigned long nr,struct io_event __user *events,struct compat_timespec __user *timeout);
compat_sys_io_submit  prototype  include/linux/compat.h  437  asmlinkage long compat_sys_io_submit(aio_context_t ctx_id,int nr,u32 __user *iocb);
compat_sys_mount  prototype  include/linux/compat.h  439  asmlinkage long compat_sys_mount(const char __user *dev_name,const char __user *dir_name,const char __user *type, unsigned long flags,const void __user *data);
compat_sys_old_readdir  prototype  include/linux/compat.h  443  asmlinkage long compat_sys_old_readdir(unsigned int fd,struct compat_old_linux_dirent __user *,unsigned int count);
compat_sys_getdents  prototype  include/linux/compat.h  446  asmlinkage long compat_sys_getdents(unsigned int fd,struct compat_linux_dirent __user *dirent,unsigned int count);
compat_sys_getdents64  prototype  include/linux/compat.h  449  asmlinkage long compat_sys_getdents64(unsigned int fd,struct linux_dirent64 __user *dirent,unsigned int count);
compat_sys_vmsplice  prototype  include/linux/compat.h  452  asmlinkage long compat_sys_vmsplice(int fd,const struct compat_iovec __user *,unsigned int nr_segs, unsigned int flags);
compat_sys_open  prototype  include/linux/compat.h  454  asmlinkage long compat_sys_open(const char __user *filename,int flags,umode_t mode);
compat_sys_openat  prototype  include/linux/compat.h  456  asmlinkage long compat_sys_openat(unsigned int dfd,const char __user *filename,int flags, umode_t mode);
compat_sys_open_by_handle_at  prototype  include/linux/compat.h  458  asmlinkage long compat_sys_open_by_handle_at(int mountdirfd,struct file_handle __user *handle,int flags);
compat_sys_pselect6  prototype  include/linux/compat.h  461  asmlinkage long compat_sys_pselect6(int n,compat_ulong_t __user *inp,compat_ulong_t __user *outp,compat_ulong_t __user *exp,struct compat_timespec __user *tsp,void __user *sig);
compat_sys_ppoll  prototype  include/linux/compat.h  466  asmlinkage long compat_sys_ppoll(struct pollfd __user *ufds,unsigned int nfds,struct compat_timespec __user *tsp,const compat_sigset_t __user *sigmask,compat_size_t sigsetsize);
compat_sys_signalfd4  prototype  include/linux/compat.h  471  asmlinkage long compat_sys_signalfd4(int ufd,const compat_sigset_t __user *sigmask,compat_size_t sigsetsize, int flags);
compat_sys_get_mempolicy  prototype  include/linux/compat.h  474  asmlinkage long compat_sys_get_mempolicy(int __user *policy,compat_ulong_t __user *nmask,compat_ulong_t maxnode,compat_ulong_t addr,compat_ulong_t flags);
compat_sys_set_mempolicy  prototype  include/linux/compat.h  479  asmlinkage long compat_sys_set_mempolicy(int mode,compat_ulong_t __user *nmask,compat_ulong_t maxnode);
compat_sys_mbind  prototype  include/linux/compat.h  481  asmlinkage long compat_sys_mbind(compat_ulong_t start,compat_ulong_t len,compat_ulong_t mode,compat_ulong_t __user *nmask,compat_ulong_t maxnode, compat_ulong_t flags);
compat_sys_setsockopt  prototype  include/linux/compat.h  486  asmlinkage long compat_sys_setsockopt(int fd,int level,int optname,char __user *optval, unsigned int optlen);
compat_sys_sendmsg  prototype  include/linux/compat.h  488  asmlinkage long compat_sys_sendmsg(int fd,struct compat_msghdr __user *msg,unsigned flags);
compat_sys_sendmmsg  prototype  include/linux/compat.h  490  asmlinkage long compat_sys_sendmmsg(int fd,struct compat_mmsghdr __user *mmsg,unsigned vlen, unsigned int flags);
compat_sys_recvmsg  prototype  include/linux/compat.h  492  asmlinkage long compat_sys_recvmsg(int fd,struct compat_msghdr __user *msg,unsigned int flags);
compat_sys_recv  prototype  include/linux/compat.h  494  asmlinkage long compat_sys_recv(int fd,void __user *buf,size_t len,unsigned flags);
compat_sys_recvfrom  prototype  include/linux/compat.h  496  asmlinkage long compat_sys_recvfrom(int fd,void __user *buf,size_t len,unsigned flags, struct sockaddr __user *addr,int __user *addrlen);
compat_sys_recvmmsg  prototype  include/linux/compat.h  499  asmlinkage long compat_sys_recvmmsg(int fd,struct compat_mmsghdr __user *mmsg,unsigned vlen, unsigned int flags,struct compat_timespec __user *timeout);
compat_sys_nanosleep  prototype  include/linux/compat.h  502  asmlinkage long compat_sys_nanosleep(struct compat_timespec __user *rqtp,struct compat_timespec __user *rmtp);
compat_sys_getitimer  prototype  include/linux/compat.h  504  asmlinkage long compat_sys_getitimer(int which,struct compat_itimerval __user *it);
compat_sys_setitimer  prototype  include/linux/compat.h  506  asmlinkage long compat_sys_setitimer(int which,struct compat_itimerval __user *in,struct compat_itimerval __user *out);
compat_sys_times  prototype  include/linux/compat.h  509  asmlinkage long compat_sys_times(struct compat_tms __user *tbuf);
compat_sys_setrlimit  prototype  include/linux/compat.h  510  asmlinkage long compat_sys_setrlimit(unsigned int resource,struct compat_rlimit __user *rlim);
compat_sys_getrlimit  prototype  include/linux/compat.h  512  asmlinkage long compat_sys_getrlimit(unsigned int resource,struct compat_rlimit __user *rlim);
compat_sys_getrusage  prototype  include/linux/compat.h  514  asmlinkage long compat_sys_getrusage(int who,struct compat_rusage __user *ru);
compat_sys_sched_setaffinity  prototype  include/linux/compat.h  515  asmlinkage long compat_sys_sched_setaffinity(compat_pid_t pid,unsigned int len,compat_ulong_t __user *user_mask_ptr);
compat_sys_sched_getaffinity  prototype  include/linux/compat.h  518  asmlinkage long compat_sys_sched_getaffinity(compat_pid_t pid,unsigned int len,compat_ulong_t __user *user_mask_ptr);
compat_sys_timer_create  prototype  include/linux/compat.h  521  asmlinkage long compat_sys_timer_create(clockid_t which_clock,struct compat_sigevent __user *timer_event_spec,timer_t __user *created_timer_id);
compat_sys_timer_settime  prototype  include/linux/compat.h  524  asmlinkage long compat_sys_timer_settime(timer_t timer_id,int flags,struct compat_itimerspec __user *new,struct compat_itimerspec __user *old);
compat_sys_timer_gettime  prototype  include/linux/compat.h  527  asmlinkage long compat_sys_timer_gettime(timer_t timer_id,struct compat_itimerspec __user *setting);
compat_sys_clock_settime  prototype  include/linux/compat.h  529  asmlinkage long compat_sys_clock_settime(clockid_t which_clock,struct compat_timespec __user *tp);
compat_sys_clock_gettime  prototype  include/linux/compat.h  531  asmlinkage long compat_sys_clock_gettime(clockid_t which_clock,struct compat_timespec __user *tp);
compat_sys_clock_adjtime  prototype  include/linux/compat.h  533  asmlinkage long compat_sys_clock_adjtime(clockid_t which_clock,struct compat_timex __user *tp);
compat_sys_clock_getres  prototype  include/linux/compat.h  535  asmlinkage long compat_sys_clock_getres(clockid_t which_clock,struct compat_timespec __user *tp);
compat_sys_clock_nanosleep  prototype  include/linux/compat.h  537  asmlinkage long compat_sys_clock_nanosleep(clockid_t which_clock,int flags,struct compat_timespec __user *rqtp,struct compat_timespec __user *rmtp);
compat_sys_rt_sigtimedwait  prototype  include/linux/compat.h  540  asmlinkage long compat_sys_rt_sigtimedwait(compat_sigset_t __user *uthese,struct compat_siginfo __user *uinfo,struct compat_timespec __user *uts, compat_size_t sigsetsize);
compat_sys_rt_sigsuspend  prototype  include/linux/compat.h  543  asmlinkage long compat_sys_rt_sigsuspend(compat_sigset_t __user *unewset,compat_size_t sigsetsize);
compat_sys_sysinfo  prototype  include/linux/compat.h  545  asmlinkage long compat_sys_sysinfo(struct compat_sysinfo __user *info);
compat_sys_ioctl  prototype  include/linux/compat.h  546  asmlinkage long compat_sys_ioctl(unsigned int fd,unsigned int cmd,unsigned long arg);
compat_sys_futex  prototype  include/linux/compat.h  548  asmlinkage long compat_sys_futex(u32 __user *uaddr,int op,u32 val,struct compat_timespec __user *utime, u32 __user *uaddr2,u32 val3);
compat_sys_getsockopt  prototype  include/linux/compat.h  551  asmlinkage long compat_sys_getsockopt(int fd,int level,int optname,char __user *optval, int __user *optlen);
compat_sys_kexec_load  prototype  include/linux/compat.h  553  asmlinkage long compat_sys_kexec_load(unsigned long entry,unsigned long nr_segments,struct compat_kexec_segment __user *,unsigned long flags);
compat_sys_mq_getsetattr  prototype  include/linux/compat.h  557  asmlinkage long compat_sys_mq_getsetattr(mqd_t mqdes,const struct compat_mq_attr __user *u_mqstat,struct compat_mq_attr __user *u_omqstat);
compat_sys_mq_notify  prototype  include/linux/compat.h  560  asmlinkage long compat_sys_mq_notify(mqd_t mqdes,const struct compat_sigevent __user *u_notification);
compat_sys_mq_open  prototype  include/linux/compat.h  562  asmlinkage long compat_sys_mq_open(const char __user *u_name,int oflag, compat_mode_t mode,struct compat_mq_attr __user *u_attr);
compat_sys_mq_timedsend  prototype  include/linux/compat.h  565  asmlinkage long compat_sys_mq_timedsend(mqd_t mqdes,const char __user *u_msg_ptr,size_t msg_len, unsigned int msg_prio,const struct compat_timespec __user *u_abs_timeout);
compat_sys_mq_timedreceive  prototype  include/linux/compat.h  569  asmlinkage ssize_t compat_sys_mq_timedreceive(mqd_t mqdes,char __user *u_msg_ptr,size_t msg_len, unsigned int __user *u_msg_prio,const struct compat_timespec __user *u_abs_timeout);
compat_sys_socketcall  prototype  include/linux/compat.h  573  asmlinkage long compat_sys_socketcall(int call,u32 __user *args);
compat_sys_sysctl  prototype  include/linux/compat.h  574  asmlinkage long compat_sys_sysctl(struct compat_sysctl_args __user *args);
compat_rw_copy_check_uvector  prototype  include/linux/compat.h  576  extern ssize_t compat_rw_copy_check_uvector(int type,const struct compat_iovec __user *uvector,unsigned long nr_segs,unsigned long fast_segs, struct iovec *fast_pointer,struct iovec **ret_pointer);
compat_alloc_user_space  prototype  include/linux/compat.h  582  extern void __user *compat_alloc_user_space(unsigned long len);
compat_sys_process_vm_readv  prototype  include/linux/compat.h  584  asmlinkage ssize_t compat_sys_process_vm_readv(compat_pid_t pid,const struct compat_iovec __user *lvec,unsigned long liovcnt, const struct compat_iovec __user *rvec,unsigned long riovcnt, unsigned long flags);
compat_sys_process_vm_writev  prototype  include/linux/compat.h  588  asmlinkage ssize_t compat_sys_process_vm_writev(compat_pid_t pid,const struct compat_iovec __user *lvec,unsigned long liovcnt, const struct compat_iovec __user *rvec,unsigned long riovcnt, unsigned long flags);
is_compat_task  function  arch/x86/include/asm/compat.h  247  static inline bool is_compat_task(void)
_LINUX_IF_H  macro  include/linux/if.h  20  #define _LINUX_IF_H
IFNAMSIZ  macro  include/linux/if.h  26  #define IFNAMSIZ 16
IFALIASZ  macro  include/linux/if.h  27  #define IFALIASZ 256
IFF_UP  macro  include/linux/if.h  31  #define IFF_UP 0x1
IFF_BROADCAST  macro  include/linux/if.h  32  #define IFF_BROADCAST 0x2
IFF_DEBUG  macro  include/linux/if.h  33  #define IFF_DEBUG 0x4
IFF_LOOPBACK  macro  include/linux/if.h  34  #define IFF_LOOPBACK 0x8
IFF_POINTOPOINT  macro  include/linux/if.h  35  #define IFF_POINTOPOINT 0x10
IFF_NOTRAILERS  macro  include/linux/if.h  36  #define IFF_NOTRAILERS 0x20
IFF_RUNNING  macro  include/linux/if.h  37  #define IFF_RUNNING 0x40
IFF_NOARP  macro  include/linux/if.h  38  #define IFF_NOARP 0x80
IFF_PROMISC  macro  include/linux/if.h  39  #define IFF_PROMISC 0x100
IFF_ALLMULTI  macro  include/linux/if.h  40  #define IFF_ALLMULTI 0x200
IFF_MASTER  macro  include/linux/if.h  42  #define IFF_MASTER 0x400
IFF_SLAVE  macro  include/linux/if.h  43  #define IFF_SLAVE 0x800
IFF_MULTICAST  macro  include/linux/if.h  45  #define IFF_MULTICAST 0x1000
IFF_PORTSEL  macro  include/linux/if.h  47  #define IFF_PORTSEL 0x2000
IFF_AUTOMEDIA  macro  include/linux/if.h  48  #define IFF_AUTOMEDIA 0x4000
IFF_DYNAMIC  macro  include/linux/if.h  49  #define IFF_DYNAMIC 0x8000
IFF_LOWER_UP  macro  include/linux/if.h  51  #define IFF_LOWER_UP 0x10000
IFF_DORMANT  macro  include/linux/if.h  52  #define IFF_DORMANT 0x20000
IFF_ECHO  macro  include/linux/if.h  54  #define IFF_ECHO 0x40000
IFF_VOLATILE  macro  include/linux/if.h  56  #define IFF_VOLATILE (IFF_LOOPBACK|IFF_POINTOPOINT|IFF_BROADCAST|IFF_ECHO| IFF_MASTER|IFF_SLAVE|IFF_RUNNING|IFF_LOWER_UP|IFF_DORMANT)
IFF_802_1Q_VLAN  macro  include/linux/if.h  60  #define IFF_802_1Q_VLAN 0x1
IFF_EBRIDGE  macro  include/linux/if.h  61  #define IFF_EBRIDGE 0x2
IFF_SLAVE_INACTIVE  macro  include/linux/if.h  62  #define IFF_SLAVE_INACTIVE 0x4
IFF_MASTER_8023AD  macro  include/linux/if.h  63  #define IFF_MASTER_8023AD 0x8
IFF_MASTER_ALB  macro  include/linux/if.h  64  #define IFF_MASTER_ALB 0x10
IFF_BONDING  macro  include/linux/if.h  65  #define IFF_BONDING 0x20
IFF_SLAVE_NEEDARP  macro  include/linux/if.h  66  #define IFF_SLAVE_NEEDARP 0x40
IFF_ISATAP  macro  include/linux/if.h  67  #define IFF_ISATAP 0x80
IFF_MASTER_ARPMON  macro  include/linux/if.h  68  #define IFF_MASTER_ARPMON 0x100
IFF_WAN_HDLC  macro  include/linux/if.h  69  #define IFF_WAN_HDLC 0x200
IFF_XMIT_DST_RELEASE  macro  include/linux/if.h  70  #define IFF_XMIT_DST_RELEASE 0x400
IFF_DONT_BRIDGE  macro  include/linux/if.h  73  #define IFF_DONT_BRIDGE 0x800
IFF_DISABLE_NETPOLL  macro  include/linux/if.h  74  #define IFF_DISABLE_NETPOLL 0x1000
IFF_MACVLAN_PORT  macro  include/linux/if.h  75  #define IFF_MACVLAN_PORT 0x2000
IFF_BRIDGE_PORT  macro  include/linux/if.h  76  #define IFF_BRIDGE_PORT 0x4000
IFF_OVS_DATAPATH  macro  include/linux/if.h  77  #define IFF_OVS_DATAPATH 0x8000
IFF_TX_SKB_SHARING  macro  include/linux/if.h  79  #define IFF_TX_SKB_SHARING 0x10000
IFF_UNICAST_FLT  macro  include/linux/if.h  81  #define IFF_UNICAST_FLT 0x20000
IFF_TEAM_PORT  macro  include/linux/if.h  82  #define IFF_TEAM_PORT 0x40000
IFF_SUPP_NOFCS  macro  include/linux/if.h  83  #define IFF_SUPP_NOFCS 0x80000
IF_GET_IFACE  macro  include/linux/if.h  86  #define IF_GET_IFACE 0x0001
IF_GET_PROTO  macro  include/linux/if.h  87  #define IF_GET_PROTO 0x0002
IF_IFACE_V35  macro  include/linux/if.h  90  #define IF_IFACE_V35 0x1000
IF_IFACE_V24  macro  include/linux/if.h  91  #define IF_IFACE_V24 0x1001
IF_IFACE_X21  macro  include/linux/if.h  92  #define IF_IFACE_X21 0x1002
IF_IFACE_T1  macro  include/linux/if.h  93  #define IF_IFACE_T1 0x1003
IF_IFACE_E1  macro  include/linux/if.h  94  #define IF_IFACE_E1 0x1004
IF_IFACE_SYNC_SERIAL  macro  include/linux/if.h  95  #define IF_IFACE_SYNC_SERIAL 0x1005
IF_IFACE_X21D  macro  include/linux/if.h  96  #define IF_IFACE_X21D 0x1006
IF_PROTO_HDLC  macro  include/linux/if.h  99  #define IF_PROTO_HDLC 0x2000
IF_PROTO_PPP  macro  include/linux/if.h  100  #define IF_PROTO_PPP 0x2001
IF_PROTO_CISCO  macro  include/linux/if.h  101  #define IF_PROTO_CISCO 0x2002
IF_PROTO_FR  macro  include/linux/if.h  102  #define IF_PROTO_FR 0x2003
IF_PROTO_FR_ADD_PVC  macro  include/linux/if.h  103  #define IF_PROTO_FR_ADD_PVC 0x2004
IF_PROTO_FR_DEL_PVC  macro  include/linux/if.h  104  #define IF_PROTO_FR_DEL_PVC 0x2005
IF_PROTO_X25  macro  include/linux/if.h  105  #define IF_PROTO_X25 0x2006
IF_PROTO_HDLC_ETH  macro  include/linux/if.h  106  #define IF_PROTO_HDLC_ETH 0x2007
IF_PROTO_FR_ADD_ETH_PVC  macro  include/linux/if.h  107  #define IF_PROTO_FR_ADD_ETH_PVC 0x2008
IF_PROTO_FR_DEL_ETH_PVC  macro  include/linux/if.h  108  #define IF_PROTO_FR_DEL_ETH_PVC 0x2009
IF_PROTO_FR_PVC  macro  include/linux/if.h  109  #define IF_PROTO_FR_PVC 0x200A
IF_PROTO_FR_ETH_PVC  macro  include/linux/if.h  110  #define IF_PROTO_FR_ETH_PVC 0x200B
IF_PROTO_RAW  macro  include/linux/if.h  111  #define IF_PROTO_RAW 0x200C
ifmap  struct  include/linux/if.h  140  struct ifmap { unsigned long mem_start; unsigned long mem_end; unsigned short base_addr; unsigned char irq; unsigned char dma; unsigned char port; };
if_settings  struct  include/linux/if.h  150  struct if_settings { unsigned int type; unsigned int size; union { raw_hdlc_proto __user *raw_hdlc; cisco_proto __user *cisco; fr_proto __user *fr; fr_proto_pvc __user *fr_pvc; fr_proto_pvc_info __user *fr_pvc_info; sync_serial_settings __user *sync; te1_settings __user *te1; } ifs_ifsu; };
ifreq  struct  include/linux/if.h  174  struct ifreq { #define IFHWADDRLEN 6 union { char ifrn_name[IFNAMSIZ]; } ifr_ifrn; union { struct sockaddr ifru_addr; struct sockaddr ifru_dstaddr; struct sockaddr ifru_broadaddr; struct sockaddr ifru_netmask; struct sockaddr ifru_hwaddr; short ifru_flags; int ifru_ivalue; int ifru_mtu; struct ifmap ifru_map; char ifru_slave[IFNAMSIZ]; char ifru_newname[IFNAMSIZ]; void __user * ifru_data; struct if_settings ifru_settings; } ifr_ifru; };
ifr_name  macro  include/linux/if.h  198  #define ifr_name ifr_ifrn.ifrn_name
ifr_hwaddr  macro  include/linux/if.h  199  #define ifr_hwaddr ifr_ifru.ifru_hwaddr
ifr_addr  macro  include/linux/if.h  200  #define ifr_addr ifr_ifru.ifru_addr
ifr_dstaddr  macro  include/linux/if.h  201  #define ifr_dstaddr ifr_ifru.ifru_dstaddr
ifr_broadaddr  macro  include/linux/if.h  202  #define ifr_broadaddr ifr_ifru.ifru_broadaddr
ifr_netmask  macro  include/linux/if.h  203  #define ifr_netmask ifr_ifru.ifru_netmask
ifr_flags  macro  include/linux/if.h  204  #define ifr_flags ifr_ifru.ifru_flags
ifr_metric  macro  include/linux/if.h  205  #define ifr_metric ifr_ifru.ifru_ivalue
ifr_mtu  macro  include/linux/if.h  206  #define ifr_mtu ifr_ifru.ifru_mtu
ifr_map  macro  include/linux/if.h  207  #define ifr_map ifr_ifru.ifru_map
ifr_slave  macro  include/linux/if.h  208  #define ifr_slave ifr_ifru.ifru_slave
ifr_data  macro  include/linux/if.h  209  #define ifr_data ifr_ifru.ifru_data
ifr_ifindex  macro  include/linux/if.h  210  #define ifr_ifindex ifr_ifru.ifru_ivalue
ifr_bandwidth  macro  include/linux/if.h  211  #define ifr_bandwidth ifr_ifru.ifru_ivalue
ifr_qlen  macro  include/linux/if.h  212  #define ifr_qlen ifr_ifru.ifru_ivalue
ifr_newname  macro  include/linux/if.h  213  #define ifr_newname ifr_ifru.ifru_newname
ifr_settings  macro  include/linux/if.h  214  #define ifr_settings ifr_ifru.ifru_settings
ifconf  struct  include/linux/if.h  223  struct ifconf { int ifc_len; union { char __user *ifcu_buf; struct ifreq __user *ifcu_req; } ifc_ifcu; };
ifc_buf  macro  include/linux/if.h  230  #define ifc_buf ifc_ifcu.ifcu_buf
ifc_req  macro  include/linux/if.h  231  #define ifc_req ifc_ifcu.ifcu_req
_LINUX_BITREV_H  macro  include/linux/bitrev.h  2  #define _LINUX_BITREV_H
bitrev8  function  include/linux/bitrev.h  8  static inline u8 bitrev8(u8 byte)
bitrev16  prototype  include/linux/bitrev.h  13  extern u16 bitrev16(u16 in);
bitrev32  prototype  include/linux/bitrev.h  14  extern u32 bitrev32(u32 in);
__LINUX_IF_PACKET_H  macro  include/linux/if_packet.h  2  #define __LINUX_IF_PACKET_H
sockaddr_pkt  struct  include/linux/if_packet.h  6  struct sockaddr_pkt { unsigned short spkt_family; unsigned char spkt_device[14]; __be16 spkt_protocol; };
sockaddr_ll  struct  include/linux/if_packet.h  12  struct sockaddr_ll { unsigned short sll_family; __be16 sll_protocol; int sll_ifindex; unsigned short sll_hatype; unsigned char sll_pkttype; unsigned char sll_halen; unsigned char sll_addr[8]; };
PACKET_HOST  macro  include/linux/if_packet.h  24  #define PACKET_HOST 0
PACKET_BROADCAST  macro  include/linux/if_packet.h  25  #define PACKET_BROADCAST 1
PACKET_MULTICAST  macro  include/linux/if_packet.h  26  #define PACKET_MULTICAST 2
PACKET_OTHERHOST  macro  include/linux/if_packet.h  27  #define PACKET_OTHERHOST 3
PACKET_OUTGOING  macro  include/linux/if_packet.h  28  #define PACKET_OUTGOING 4
PACKET_LOOPBACK  macro  include/linux/if_packet.h  30  #define PACKET_LOOPBACK 5
PACKET_FASTROUTE  macro  include/linux/if_packet.h  31  #define PACKET_FASTROUTE 6
PACKET_ADD_MEMBERSHIP  macro  include/linux/if_packet.h  35  #define PACKET_ADD_MEMBERSHIP 1
PACKET_DROP_MEMBERSHIP  macro  include/linux/if_packet.h  36  #define PACKET_DROP_MEMBERSHIP 2
PACKET_RECV_OUTPUT  macro  include/linux/if_packet.h  37  #define PACKET_RECV_OUTPUT 3
PACKET_RX_RING  macro  include/linux/if_packet.h  39  #define PACKET_RX_RING 5
PACKET_STATISTICS  macro  include/linux/if_packet.h  40  #define PACKET_STATISTICS 6
PACKET_COPY_THRESH  macro  include/linux/if_packet.h  41  #define PACKET_COPY_THRESH 7
PACKET_AUXDATA  macro  include/linux/if_packet.h  42  #define PACKET_AUXDATA 8
PACKET_ORIGDEV  macro  include/linux/if_packet.h  43  #define PACKET_ORIGDEV 9
PACKET_VERSION  macro  include/linux/if_packet.h  44  #define PACKET_VERSION 10
PACKET_HDRLEN  macro  include/linux/if_packet.h  45  #define PACKET_HDRLEN 11
PACKET_RESERVE  macro  include/linux/if_packet.h  46  #define PACKET_RESERVE 12
PACKET_TX_RING  macro  include/linux/if_packet.h  47  #define PACKET_TX_RING 13
PACKET_LOSS  macro  include/linux/if_packet.h  48  #define PACKET_LOSS 14
PACKET_VNET_HDR  macro  include/linux/if_packet.h  49  #define PACKET_VNET_HDR 15
PACKET_TX_TIMESTAMP  macro  include/linux/if_packet.h  50  #define PACKET_TX_TIMESTAMP 16
PACKET_TIMESTAMP  macro  include/linux/if_packet.h  51  #define PACKET_TIMESTAMP 17
PACKET_FANOUT  macro  include/linux/if_packet.h  52  #define PACKET_FANOUT 18
PACKET_FANOUT_HASH  macro  include/linux/if_packet.h  54  #define PACKET_FANOUT_HASH 0
PACKET_FANOUT_LB  macro  include/linux/if_packet.h  55  #define PACKET_FANOUT_LB 1
PACKET_FANOUT_CPU  macro  include/linux/if_packet.h  56  #define PACKET_FANOUT_CPU 2
PACKET_FANOUT_FLAG_DEFRAG  macro  include/linux/if_packet.h  57  #define PACKET_FANOUT_FLAG_DEFRAG 0x8000
tpacket_stats  struct  include/linux/if_packet.h  59  struct tpacket_stats { unsigned int tp_packets; unsigned int tp_drops; };
tpacket_stats_v3  struct  include/linux/if_packet.h  64  struct tpacket_stats_v3 { unsigned int tp_packets; unsigned int tp_drops; unsigned int tp_freeze_q_cnt; };
tpacket_stats_u  union  include/linux/if_packet.h  70  union tpacket_stats_u { struct tpacket_stats stats1; struct tpacket_stats_v3 stats3; };
tpacket_auxdata  struct  include/linux/if_packet.h  75  struct tpacket_auxdata { __u32 tp_status; __u32 tp_len; __u32 tp_snaplen; __u16 tp_mac; __u16 tp_net; __u16 tp_vlan_tci; __u16 tp_padding; };
TP_STATUS_KERNEL  macro  include/linux/if_packet.h  86  #define TP_STATUS_KERNEL 0x0
TP_STATUS_USER  macro  include/linux/if_packet.h  87  #define TP_STATUS_USER 0x1
TP_STATUS_COPY  macro  include/linux/if_packet.h  88  #define TP_STATUS_COPY 0x2
TP_STATUS_LOSING  macro  include/linux/if_packet.h  89  #define TP_STATUS_LOSING 0x4
TP_STATUS_CSUMNOTREADY  macro  include/linux/if_packet.h  90  #define TP_STATUS_CSUMNOTREADY 0x8
TP_STATUS_VLAN_VALID  macro  include/linux/if_packet.h  91  #define TP_STATUS_VLAN_VALID 0x10
TP_STATUS_BLK_TMO  macro  include/linux/if_packet.h  92  #define TP_STATUS_BLK_TMO 0x20
TP_STATUS_AVAILABLE  macro  include/linux/if_packet.h  95  #define TP_STATUS_AVAILABLE 0x0
TP_STATUS_SEND_REQUEST  macro  include/linux/if_packet.h  96  #define TP_STATUS_SEND_REQUEST 0x1
TP_STATUS_SENDING  macro  include/linux/if_packet.h  97  #define TP_STATUS_SENDING 0x2
TP_STATUS_WRONG_FORMAT  macro  include/linux/if_packet.h  98  #define TP_STATUS_WRONG_FORMAT 0x4
TP_FT_REQ_FILL_RXHASH  macro  include/linux/if_packet.h  101  #define TP_FT_REQ_FILL_RXHASH 0x1
tpacket_hdr  struct  include/linux/if_packet.h  103  struct tpacket_hdr { unsigned long tp_status; unsigned int tp_len; unsigned int tp_snaplen; unsigned short tp_mac; unsigned short tp_net; unsigned int tp_sec; unsigned int tp_usec; };
TPACKET_ALIGNMENT  macro  include/linux/if_packet.h  113  #define TPACKET_ALIGNMENT 16
TPACKET_ALIGN  macro  include/linux/if_packet.h  114  #define TPACKET_ALIGN(x) (((x)+TPACKET_ALIGNMENT-1)&~(TPACKET_ALIGNMENT-1))
TPACKET_HDRLEN  macro  include/linux/if_packet.h  115  #define TPACKET_HDRLEN (TPACKET_ALIGN(sizeof(struct tpacket_hdr)) + sizeof(struct sockaddr_ll))
tpacket2_hdr  struct  include/linux/if_packet.h  117  struct tpacket2_hdr { __u32 tp_status; __u32 tp_len; __u32 tp_snaplen; __u16 tp_mac; __u16 tp_net; __u32 tp_sec; __u32 tp_nsec; __u16 tp_vlan_tci; __u16 tp_padding; };
tpacket_hdr_variant1  struct  include/linux/if_packet.h  129  struct tpacket_hdr_variant1 { __u32 tp_rxhash; __u32 tp_vlan_tci; };
tpacket3_hdr  struct  include/linux/if_packet.h  134  struct tpacket3_hdr { __u32 tp_next_offset; __u32 tp_sec; __u32 tp_nsec; __u32 tp_snaplen; __u32 tp_len; __u32 tp_status; __u16 tp_mac; __u16 tp_net; struct tpacket_hdr_variant1 hv1; };
tpacket_bd_ts  struct  include/linux/if_packet.h  149  struct tpacket_bd_ts { unsigned int ts_sec; union { unsigned int ts_usec; unsigned int ts_nsec; };
tpacket_hdr_v1  struct  include/linux/if_packet.h  157  struct tpacket_hdr_v1 { __u32 block_status; __u32 num_pkts; __u32 offset_to_first_pkt; __u32 blk_len; __aligned_u64 seq_num; struct tpacket_bd_ts ts_first_pkt, ts_last_pkt; };
tpacket_bd_header_u  union  include/linux/if_packet.h  206  union tpacket_bd_header_u { struct tpacket_hdr_v1 bh1; };
tpacket_block_desc  struct  include/linux/if_packet.h  210  struct tpacket_block_desc { __u32 version; __u32 offset_to_priv; union tpacket_bd_header_u hdr; };
TPACKET2_HDRLEN  macro  include/linux/if_packet.h  216  #define TPACKET2_HDRLEN (TPACKET_ALIGN(sizeof(struct tpacket2_hdr)) + sizeof(struct sockaddr_ll))
TPACKET3_HDRLEN  macro  include/linux/if_packet.h  217  #define TPACKET3_HDRLEN (TPACKET_ALIGN(sizeof(struct tpacket3_hdr)) + sizeof(struct sockaddr_ll))
tpacket_versions  enum  include/linux/if_packet.h  219  enum tpacket_versions { TPACKET_V1, TPACKET_V2, TPACKET_V3 };
tpacket_req  struct  include/linux/if_packet.h  238  struct tpacket_req { unsigned int tp_block_size; unsigned int tp_block_nr; unsigned int tp_frame_size; unsigned int tp_frame_nr; };
tpacket_req3  struct  include/linux/if_packet.h  245  struct tpacket_req3 { unsigned int tp_block_size; unsigned int tp_block_nr; unsigned int tp_frame_size; unsigned int tp_frame_nr; unsigned int tp_retire_blk_tov; unsigned int tp_sizeof_priv; unsigned int tp_feature_req_word; };
tpacket_req_u  union  include/linux/if_packet.h  255  union tpacket_req_u { struct tpacket_req req; struct tpacket_req3 req3; };
packet_mreq  struct  include/linux/if_packet.h  260  struct packet_mreq { int mr_ifindex; unsigned short mr_type; unsigned short mr_alen; unsigned char mr_address[8]; };
PACKET_MR_MULTICAST  macro  include/linux/if_packet.h  267  #define PACKET_MR_MULTICAST 0
PACKET_MR_PROMISC  macro  include/linux/if_packet.h  268  #define PACKET_MR_PROMISC 1
PACKET_MR_ALLMULTI  macro  include/linux/if_packet.h  269  #define PACKET_MR_ALLMULTI 2
PACKET_MR_UNICAST  macro  include/linux/if_packet.h  270  #define PACKET_MR_UNICAST 3
_LINUX_IF_LINK_H  macro  include/linux/if_link.h  2  #define _LINUX_IF_LINK_H
rtnl_link_stats  struct  include/linux/if_link.h  8  struct rtnl_link_stats { __u32 rx_packets; __u32 tx_packets; __u32 rx_bytes; __u32 tx_bytes; __u32 rx_errors; __u32 tx_errors; __u32 rx_dropped; __u32 tx_dropped; __u32 multicast; __u32 collisions; __u32 rx_length_errors; __u32 rx_over_errors; __u32 rx_crc_errors; __u32 rx_frame_errors; __u32 rx_fifo_errors; __u32 rx_missed_errors; __u32 tx_aborted_errors; __u32 tx_carrier_errors; __u32 tx_fifo_errors; __u32 tx_heartbeat_errors; __u32 tx_window_errors; __u32 rx_compressed; __u32 tx_compressed; };
rtnl_link_stats64  struct  include/linux/if_link.h  41  struct rtnl_link_stats64 { __u64 rx_packets; __u64 tx_packets; __u64 rx_bytes; __u64 tx_bytes; __u64 rx_errors; __u64 tx_errors; __u64 rx_dropped; __u64 tx_dropped; __u64 multicast; __u64 collisions; __u64 rx_length_errors; __u64 rx_over_errors; __u64 rx_crc_errors; __u64 rx_frame_errors; __u64 rx_fifo_errors; __u64 rx_missed_errors; __u64 tx_aborted_errors; __u64 tx_carrier_errors; __u64 tx_fifo_errors; __u64 tx_heartbeat_errors; __u64 tx_window_errors; __u64 rx_compressed; __u64 tx_compressed; };
rtnl_link_ifmap  struct  include/linux/if_link.h  74  struct rtnl_link_ifmap { __u64 mem_start; __u64 mem_end; __u64 base_addr; __u16 irq; __u8 dma; __u8 port; };
IFLA_MAX  macro  include/linux/if_link.h  147  #define IFLA_MAX (__IFLA_MAX - 1)
IFLA_RTA  macro  include/linux/if_link.h  151  #define IFLA_RTA(r) ((struct rtattr*)(((char*)(r)) + NLMSG_ALIGN(sizeof(struct ifinfomsg))))
IFLA_PAYLOAD  macro  include/linux/if_link.h  152  #define IFLA_PAYLOAD(n) NLMSG_PAYLOAD(n,sizeof(struct ifinfomsg))
IFLA_INET_MAX  macro  include/linux/if_link.h  161  #define IFLA_INET_MAX (__IFLA_INET_MAX - 1)
IFLA_INET6_MAX  macro  include/linux/if_link.h  204  #define IFLA_INET6_MAX (__IFLA_INET6_MAX - 1)
ifla_cacheinfo  struct  include/linux/if_link.h  206  struct ifla_cacheinfo { __u32 max_reasm_len; __u32 tstamp; __u32 reachable_time; __u32 retrans_time; };
IFLA_INFO_MAX  macro  include/linux/if_link.h  221  #define IFLA_INFO_MAX (__IFLA_INFO_MAX - 1)
IFLA_VLAN_MAX  macro  include/linux/if_link.h  234  #define IFLA_VLAN_MAX (__IFLA_VLAN_MAX - 1)
ifla_vlan_flags  struct  include/linux/if_link.h  236  struct ifla_vlan_flags { __u32 flags; __u32 mask; };
IFLA_VLAN_QOS_MAX  macro  include/linux/if_link.h  247  #define IFLA_VLAN_QOS_MAX (__IFLA_VLAN_QOS_MAX - 1)
ifla_vlan_qos_mapping  struct  include/linux/if_link.h  249  struct ifla_vlan_qos_mapping { __u32 from; __u32 to; };
IFLA_MACVLAN_MAX  macro  include/linux/if_link.h  262  #define IFLA_MACVLAN_MAX (__IFLA_MACVLAN_MAX - 1)
macvlan_mode  enum  include/linux/if_link.h  264  enum macvlan_mode { MACVLAN_MODE_PRIVATE = 1, MACVLAN_MODE_VEPA = 2, MACVLAN_MODE_BRIDGE = 4, MACVLAN_MODE_PASSTHRU = 8, };
MACVLAN_FLAG_NOPROMISC  macro  include/linux/if_link.h  271  #define MACVLAN_FLAG_NOPROMISC 1
IFLA_VF_INFO_MAX  macro  include/linux/if_link.h  281  #define IFLA_VF_INFO_MAX (__IFLA_VF_INFO_MAX - 1)
IFLA_VF_MAX  macro  include/linux/if_link.h  292  #define IFLA_VF_MAX (__IFLA_VF_MAX - 1)
ifla_vf_mac  struct  include/linux/if_link.h  294  struct ifla_vf_mac { __u32 vf; __u8 mac[32]; };
ifla_vf_vlan  struct  include/linux/if_link.h  299  struct ifla_vf_vlan { __u32 vf; __u32 vlan; __u32 qos; };
ifla_vf_tx_rate  struct  include/linux/if_link.h  305  struct ifla_vf_tx_rate { __u32 vf; __u32 rate; };
ifla_vf_spoofchk  struct  include/linux/if_link.h  310  struct ifla_vf_spoofchk { __u32 vf; __u32 setting; };
ifla_vf_info  struct  include/linux/if_link.h  317  struct ifla_vf_info { __u32 vf; __u8 mac[32]; __u32 vlan; __u32 qos; __u32 tx_rate; __u32 spoofchk; };
IFLA_VF_PORT_MAX  macro  include/linux/if_link.h  348  #define IFLA_VF_PORT_MAX (__IFLA_VF_PORT_MAX - 1)
IFLA_PORT_MAX  macro  include/linux/if_link.h  362  #define IFLA_PORT_MAX (__IFLA_PORT_MAX - 1)
PORT_PROFILE_MAX  macro  include/linux/if_link.h  364  #define PORT_PROFILE_MAX 40
PORT_UUID_MAX  macro  include/linux/if_link.h  365  #define PORT_UUID_MAX 16
PORT_SELF_VF  macro  include/linux/if_link.h  366  #define PORT_SELF_VF -1
ifla_port_vsi  struct  include/linux/if_link.h  392  struct ifla_port_vsi { __u8 vsi_mgr_id; __u8 vsi_type_id[3]; __u8 vsi_type_version; __u8 pad[3]; };
_LINUX_PM_QOS_H  macro  include/linux/pm_qos.h  2  #define _LINUX_PM_QOS_H
PM_QOS_DEFAULT_VALUE  macro  include/linux/pm_qos.h  23  #define PM_QOS_DEFAULT_VALUE -1
PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE  macro  include/linux/pm_qos.h  25  #define PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE (2000 * USEC_PER_SEC)
PM_QOS_NETWORK_LAT_DEFAULT_VALUE  macro  include/linux/pm_qos.h  26  #define PM_QOS_NETWORK_LAT_DEFAULT_VALUE (2000 * USEC_PER_SEC)
PM_QOS_NETWORK_THROUGHPUT_DEFAULT_VALUE  macro  include/linux/pm_qos.h  27  #define PM_QOS_NETWORK_THROUGHPUT_DEFAULT_VALUE 0
PM_QOS_DEV_LAT_DEFAULT_VALUE  macro  include/linux/pm_qos.h  28  #define PM_QOS_DEV_LAT_DEFAULT_VALUE 0
pm_qos_request  prototype  include/linux/pm_qos.h  82  int pm_qos_request(int pm_qos_class);
dev_pm_qos_request  struct  include/linux/pm_qos.h  36  struct dev_pm_qos_request { struct plist_node node; struct device *dev; };
pm_qos_type  enum  include/linux/pm_qos.h  41  enum pm_qos_type { PM_QOS_UNITIALIZED, PM_QOS_MAX, PM_QOS_MIN };
pm_qos_constraints  struct  include/linux/pm_qos.h  52  struct pm_qos_constraints { struct plist_head list; s32 target_value; s32 default_value; enum pm_qos_type type; struct blocking_notifier_head *notifiers; };
pm_qos_req_action  enum  include/linux/pm_qos.h  61  enum pm_qos_req_action { PM_QOS_ADD_REQ, PM_QOS_UPDATE_REQ, PM_QOS_REMOVE_REQ };
dev_pm_qos_request_active  function  include/linux/pm_qos.h  67  static inline int dev_pm_qos_request_active(struct dev_pm_qos_request *req)
pm_qos_update_target  prototype  include/linux/pm_qos.h  72  int pm_qos_update_target(struct pm_qos_constraints *c,struct plist_node *node,enum pm_qos_req_action action, int value);
pm_qos_add_request  prototype  include/linux/pm_qos.h  74  void pm_qos_add_request(struct pm_qos_request *req,int pm_qos_class,s32 value);
pm_qos_update_request  prototype  include/linux/pm_qos.h  76  void pm_qos_update_request(struct pm_qos_request *req,s32 new_value);
pm_qos_update_request_timeout  prototype  include/linux/pm_qos.h  78  void pm_qos_update_request_timeout(struct pm_qos_request *req,s32 new_value, unsigned long timeout_us);
pm_qos_remove_request  prototype  include/linux/pm_qos.h  80  void pm_qos_remove_request(struct pm_qos_request *req);
pm_qos_add_notifier  prototype  include/linux/pm_qos.h  83  int pm_qos_add_notifier(int pm_qos_class,struct notifier_block *notifier);
pm_qos_remove_notifier  prototype  include/linux/pm_qos.h  84  int pm_qos_remove_notifier(int pm_qos_class,struct notifier_block *notifier);
pm_qos_request_active  prototype  include/linux/pm_qos.h  85  int pm_qos_request_active(struct pm_qos_request *req);
pm_qos_read_value  prototype  include/linux/pm_qos.h  86  s32 pm_qos_read_value(struct pm_qos_constraints *c);
__dev_pm_qos_read_value  function  include/linux/pm_qos.h  106  static inline s32 __dev_pm_qos_read_value(struct device *dev)
dev_pm_qos_read_value  function  include/linux/pm_qos.h  108  static inline s32 dev_pm_qos_read_value(struct device *dev)
dev_pm_qos_add_request  function  include/linux/pm_qos.h  110  static inline int dev_pm_qos_add_request(struct device *dev,struct dev_pm_qos_request *req,s32 value)
dev_pm_qos_update_request  function  include/linux/pm_qos.h  114  static inline int dev_pm_qos_update_request(struct dev_pm_qos_request *req,s32 new_value)
dev_pm_qos_remove_request  function  include/linux/pm_qos.h  117  static inline int dev_pm_qos_remove_request(struct dev_pm_qos_request *req)
dev_pm_qos_add_notifier  function  include/linux/pm_qos.h  119  static inline int dev_pm_qos_add_notifier(struct device *dev,struct notifier_block *notifier)
dev_pm_qos_remove_notifier  function  include/linux/pm_qos.h  122  static inline int dev_pm_qos_remove_notifier(struct device *dev,struct notifier_block *notifier)
dev_pm_qos_add_global_notifier  function  include/linux/pm_qos.h  125  static inline int dev_pm_qos_add_global_notifier(
dev_pm_qos_remove_global_notifier  function  include/linux/pm_qos.h  128  static inline int dev_pm_qos_remove_global_notifier(
dev_pm_qos_constraints_init  function  include/linux/pm_qos.h  131  static inline void dev_pm_qos_constraints_init(struct device *dev)
dev_pm_qos_constraints_destroy  function  include/linux/pm_qos.h  135  static inline void dev_pm_qos_constraints_destroy(struct device *dev)
dev_pm_qos_add_ancestor_request  function  include/linux/pm_qos.h  139  static inline int dev_pm_qos_add_ancestor_request(struct device *dev,struct dev_pm_qos_request *req, s32 value)
dev_pm_qos_expose_latency_limit  function  include/linux/pm_qos.h  148  static inline int dev_pm_qos_expose_latency_limit(struct device *dev,s32 value)
dev_pm_qos_hide_latency_limit  function  include/linux/pm_qos.h  150  static inline void dev_pm_qos_hide_latency_limit(struct device *dev) {}
_LINUX_BUG_H  macro  include/linux/bug.h  2  #define _LINUX_BUG_H
bug_trap_type  enum  include/linux/bug.h  6  enum bug_trap_type { BUG_TRAP_TYPE_NONE = 0, BUG_TRAP_TYPE_WARN = 1, BUG_TRAP_TYPE_BUG = 2, };
BUILD_BUG_ON_NOT_POWER_OF_2  macro  include/linux/bug.h  23  #define BUILD_BUG_ON_NOT_POWER_OF_2(n) BUILD_BUG_ON((n) == 0 || (((n) & ((n) - 1)) != 0))
BUILD_BUG_ON_ZERO  macro  include/linux/bug.h  30  #define BUILD_BUG_ON_ZERO(e) (sizeof(struct { int:-!!(e); }))
BUILD_BUG_ON_NULL  macro  include/linux/bug.h  31  #define BUILD_BUG_ON_NULL(e) ((void *)sizeof(struct { int:-!!(e); }))
BUILD_BUG_ON  macro  include/linux/bug.h  59  #define BUILD_BUG_ON(condition) do { ((void)sizeof(char[1 - 2*!!(condition)])); if (condition) __build_bug_on_failed = 1; } while(0)
BUILD_BUG  macro  include/linux/bug.h  73  #define BUILD_BUG() do { extern void __build_bug_failed(void) __linktime_error("BUILD_BUG failed"); __build_bug_failed(); } while (0)
BUILD_BUG_ON_INVALID  macro  include/linux/bug.h  38  #define BUILD_BUG_ON_INVALID(e) ((void)(sizeof((__force long)(e))))
is_warning_bug  function  include/linux/bug.h  85  static inline int is_warning_bug(const struct bug_entry *bug)
find_bug  prototype  include/linux/bug.h  90  const struct bug_entry *find_bug(unsigned long bugaddr);
report_bug  function  include/linux/bug.h  99  static inline enum bug_trap_type report_bug(unsigned long bug_addr,struct pt_regs *regs)
is_valid_bugaddr  prototype  include/linux/bug.h  95  int is_valid_bugaddr(unsigned long addr);
_ASM_X86_CACHE_H  macro  arch/x86/include/asm/cache.h  2  #define _ASM_X86_CACHE_H
L1_CACHE_SHIFT  macro  arch/x86/include/asm/cache.h  7  #define L1_CACHE_SHIFT (CONFIG_X86_L1_CACHE_SHIFT)
L1_CACHE_BYTES  macro  arch/x86/include/asm/cache.h  8  #define L1_CACHE_BYTES (1 << L1_CACHE_SHIFT)
INTERNODE_CACHE_BYTES  macro  arch/x86/include/asm/cache.h  13  #define INTERNODE_CACHE_BYTES (1 << INTERNODE_CACHE_SHIFT)
LINUX_DMAENGINE_H  macro  include/linux/dmaengine.h  22  #define LINUX_DMAENGINE_H
DMA_MIN_COOKIE  macro  include/linux/dmaengine.h  38  #define DMA_MIN_COOKIE 1
DMA_MAX_COOKIE  macro  include/linux/dmaengine.h  39  #define DMA_MAX_COOKIE INT_MAX
dma_submit_error  macro  include/linux/dmaengine.h  41  #define dma_submit_error(cookie) ((cookie) < 0 ? 1 : 0)
dma_status  enum  include/linux/dmaengine.h  50  enum dma_status { DMA_SUCCESS, DMA_IN_PROGRESS, DMA_PAUSED, DMA_ERROR, };
dma_transaction_type  enum  include/linux/dmaengine.h  63  enum dma_transaction_type { DMA_MEMCPY, DMA_XOR, DMA_PQ, DMA_XOR_VAL, DMA_PQ_VAL, DMA_MEMSET, DMA_INTERRUPT, DMA_SG, DMA_PRIVATE, DMA_ASYNC_TX, DMA_SLAVE, DMA_CYCLIC, DMA_INTERLEAVE, DMA_TX_TYPE_END, };
dma_transfer_direction  enum  include/linux/dmaengine.h  88  enum dma_transfer_direction { DMA_MEM_TO_MEM, DMA_MEM_TO_DEV, DMA_DEV_TO_MEM, DMA_DEV_TO_DEV, DMA_TRANS_NONE, };
data_chunk  struct  include/linux/dmaengine.h  128  struct data_chunk { size_t size; size_t icg; };
dma_interleaved_template  struct  include/linux/dmaengine.h  151  struct dma_interleaved_template { dma_addr_t src_start; dma_addr_t dst_start; enum dma_transfer_direction dir; bool src_inc; bool dst_inc; bool src_sgl; bool dst_sgl; size_t numf; size_t frame_size; struct data_chunk sgl[0]; };
dma_ctrl_flags  enum  include/linux/dmaengine.h  186  enum dma_ctrl_flags { DMA_PREP_INTERRUPT = (1 << 0), DMA_CTRL_ACK = (1 << 1), DMA_COMPL_SKIP_SRC_UNMAP = (1 << 2), DMA_COMPL_SKIP_DEST_UNMAP = (1 << 3), DMA_COMPL_SRC_UNMAP_SINGLE = (1 << 4), DMA_COMPL_DEST_UNMAP_SINGLE = (1 << 5), DMA_PREP_PQ_DISABLE_P = (1 << 6), DMA_PREP_PQ_DISABLE_Q = (1 << 7), DMA_PREP_CONTINUE = (1 << 8), DMA_PREP_FENCE = (1 << 9), };
dma_ctrl_cmd  enum  include/linux/dmaengine.h  213  enum dma_ctrl_cmd { DMA_TERMINATE_ALL, DMA_PAUSE, DMA_RESUME, DMA_SLAVE_CONFIG, FSLDMA_EXTERNAL_START, };
sum_check_bits  enum  include/linux/dmaengine.h  224  enum sum_check_bits { SUM_CHECK_P = 0, SUM_CHECK_Q = 1, };
sum_check_flags  enum  include/linux/dmaengine.h  234  enum sum_check_flags { SUM_CHECK_P_RESULT = (1 << SUM_CHECK_P), SUM_CHECK_Q_RESULT = (1 << SUM_CHECK_Q), };
dma_chan_percpu  struct  include/linux/dmaengine.h  252  struct dma_chan_percpu { unsigned long memcpy_count; unsigned long bytes_transferred; };
dma_chan  struct  include/linux/dmaengine.h  271  struct dma_chan { struct dma_device *device; dma_cookie_t cookie; dma_cookie_t completed_cookie; int chan_id; struct dma_chan_dev *dev; struct list_head device_node; struct dma_chan_percpu __percpu *local; int client_count; int table_count; };
dma_chan_dev  struct  include/linux/dmaengine.h  294  struct dma_chan_dev { struct dma_chan *chan; struct device device; int dev_id; atomic_t *idr_ref; };
dma_slave_buswidth  enum  include/linux/dmaengine.h  305  enum dma_slave_buswidth { DMA_SLAVE_BUSWIDTH_UNDEFINED = 0, DMA_SLAVE_BUSWIDTH_1_BYTE = 1, DMA_SLAVE_BUSWIDTH_2_BYTES = 2, DMA_SLAVE_BUSWIDTH_4_BYTES = 4, DMA_SLAVE_BUSWIDTH_8_BYTES = 8, };
dma_slave_config  struct  include/linux/dmaengine.h  359  struct dma_slave_config { enum dma_transfer_direction direction; dma_addr_t src_addr; dma_addr_t dst_addr; enum dma_slave_buswidth src_addr_width; enum dma_slave_buswidth dst_addr_width; u32 src_maxburst; u32 dst_maxburst; bool device_fc; };
dma_chan_name  function  include/linux/dmaengine.h  370  static inline const char *dma_chan_name(struct dma_chan *chan)
dma_chan_cleanup  prototype  include/linux/dmaengine.h  375  void dma_chan_cleanup(struct kref *kref);
dma_async_tx_descriptor  struct  include/linux/dmaengine.h  408  struct dma_async_tx_descriptor { dma_cookie_t cookie; enum dma_ctrl_flags flags; dma_addr_t phys; struct dma_chan *chan; dma_cookie_t (*tx_submit)(struct dma_async_tx_descriptor *tx); dma_async_tx_callback callback; void *callback_param; struct dma_async_tx_descriptor *next; struct dma_async_tx_descriptor *parent; spinlock_t lock; };
txd_lock  function  include/linux/dmaengine.h  450  static inline void txd_lock(struct dma_async_tx_descriptor *txd)
txd_unlock  function  include/linux/dmaengine.h  454  static inline void txd_unlock(struct dma_async_tx_descriptor *txd)
txd_chain  function  include/linux/dmaengine.h  458  static inline void txd_chain(struct dma_async_tx_descriptor *txd,struct dma_async_tx_descriptor *next)
txd_clear_parent  function  include/linux/dmaengine.h  463  static inline void txd_clear_parent(struct dma_async_tx_descriptor *txd)
txd_clear_next  function  include/linux/dmaengine.h  467  static inline void txd_clear_next(struct dma_async_tx_descriptor *txd)
txd_next  function  include/linux/dmaengine.h  475  static inline struct dma_async_tx_descriptor *txd_next(struct dma_async_tx_descriptor *txd)
txd_parent  function  include/linux/dmaengine.h  471  static inline struct dma_async_tx_descriptor *txd_parent(struct dma_async_tx_descriptor *txd)
dma_tx_state  struct  include/linux/dmaengine.h  490  struct dma_tx_state { dma_cookie_t last; dma_cookie_t used; u32 residue; };
dma_device  struct  include/linux/dmaengine.h  534  struct dma_device { unsigned int chancnt; unsigned int privatecnt; struct list_head channels; struct list_head global_node; dma_cap_mask_t cap_mask; unsigned short max_xor; unsigned short max_pq; u8 copy_align; u8 xor_align; u8 pq_align; u8 fill_align; #define DMA_HAS_PQ_CONTINUE (1 << 15) int dev_id; struct device *dev; int (*device_alloc_chan_resources)(struct dma_chan *chan); void (*device_free_chan_resources)(struct dma_chan *chan); struct dma_async_tx_descriptor *(*device_prep_dma_memcpy)( struct dma_async_tx_descriptor *(*device_prep_dma_xor)( struct dma_async_tx_descriptor *(*device_prep_dma_xor_val)( struct dma_async_tx_descriptor *(*device_prep_dma_pq)( struct dma_async_tx_descriptor *(*device_prep_dma_pq_val)( struct dma_async_tx_descriptor *(*device_prep_dma_memset)( struct dma_async_tx_descriptor *(*device_prep_dma_interrupt)( struct dma_async_tx_descriptor *(*device_prep_dma_sg)( struct dma_async_tx_descriptor *(*device_prep_slave_sg)( struct dma_async_tx_descriptor *(*device_prep_dma_cyclic)( struct dma_async_tx_descriptor *(*device_prep_interleaved_dma)( int (*device_control)(struct dma_chan *chan, enum dma_ctrl_cmd cmd,unsigned long arg); enum dma_status (*device_tx_status)(struct dma_chan *chan,dma_cookie_t cookie,struct dma_tx_state *txstate); void (*device_issue_pending)(struct dma_chan *chan); };
dmaengine_device_control  function  include/linux/dmaengine.h  603  static inline int dmaengine_device_control(struct dma_chan *chan,enum dma_ctrl_cmd cmd,unsigned long arg)
dmaengine_slave_config  function  include/linux/dmaengine.h  610  static inline int dmaengine_slave_config(struct dma_chan *chan,struct dma_slave_config *config)
dmaengine_prep_slave_single  function  include/linux/dmaengine.h  617  static inline struct dma_async_tx_descriptor *dmaengine_prep_slave_single(
dmaengine_prep_slave_sg  function  include/linux/dmaengine.h  630  static inline struct dma_async_tx_descriptor *dmaengine_prep_slave_sg(
dmaengine_prep_rio_sg  function  include/linux/dmaengine.h  640  static inline struct dma_async_tx_descriptor *dmaengine_prep_rio_sg(
dmaengine_prep_dma_cyclic  function  include/linux/dmaengine.h  650  static inline struct dma_async_tx_descriptor *dmaengine_prep_dma_cyclic(
dmaengine_terminate_all  function  include/linux/dmaengine.h  658  static inline int dmaengine_terminate_all(struct dma_chan *chan)
dmaengine_pause  function  include/linux/dmaengine.h  663  static inline int dmaengine_pause(struct dma_chan *chan)
dmaengine_resume  function  include/linux/dmaengine.h  668  static inline int dmaengine_resume(struct dma_chan *chan)
dmaengine_submit  function  include/linux/dmaengine.h  673  static inline dma_cookie_t dmaengine_submit(struct dma_async_tx_descriptor *desc)
dmaengine_check_align  function  include/linux/dmaengine.h  678  static inline bool dmaengine_check_align(u8 align,size_t off1,size_t off2,size_t len)
is_dma_copy_aligned  function  include/linux/dmaengine.h  690  static inline bool is_dma_copy_aligned(struct dma_device *dev,size_t off1,size_t off2, size_t len)
is_dma_xor_aligned  function  include/linux/dmaengine.h  696  static inline bool is_dma_xor_aligned(struct dma_device *dev,size_t off1,size_t off2, size_t len)
is_dma_pq_aligned  function  include/linux/dmaengine.h  702  static inline bool is_dma_pq_aligned(struct dma_device *dev,size_t off1,size_t off2, size_t len)
is_dma_fill_aligned  function  include/linux/dmaengine.h  708  static inline bool is_dma_fill_aligned(struct dma_device *dev,size_t off1,size_t off2, size_t len)
dma_set_maxpq  function  include/linux/dmaengine.h  715  dma_set_maxpq(struct dma_device *dma,int maxpq,int has_pq_continue)
dmaf_continue  function  include/linux/dmaengine.h  722  static inline bool dmaf_continue(enum dma_ctrl_flags flags)
dmaf_p_disabled_continue  function  include/linux/dmaengine.h  727  static inline bool dmaf_p_disabled_continue(enum dma_ctrl_flags flags)
dma_dev_has_pq_continue  function  include/linux/dmaengine.h  734  static inline bool dma_dev_has_pq_continue(struct dma_device *dma)
dma_dev_to_maxpq  function  include/linux/dmaengine.h  739  static inline unsigned short dma_dev_to_maxpq(struct dma_device *dma)
dma_maxpq  function  include/linux/dmaengine.h  757  static inline int dma_maxpq(struct dma_device *dma,enum dma_ctrl_flags flags)
dmaengine_get  function  include/linux/dmaengine.h  774  static inline void dmaengine_get(void)
dmaengine_put  function  include/linux/dmaengine.h  777  static inline void dmaengine_put(void)
net_dmaengine_get  function  include/linux/dmaengine.h  786  static inline void net_dmaengine_get(void)
net_dmaengine_put  function  include/linux/dmaengine.h  789  static inline void net_dmaengine_put(void)
async_dmaengine_get  function  include/linux/dmaengine.h  803  static inline void async_dmaengine_get(void)
async_dmaengine_put  function  include/linux/dmaengine.h  806  static inline void async_dmaengine_put(void)
async_dma_find_channel  function  include/linux/dmaengine.h  810  async_dma_find_channel(enum dma_transaction_type type)
dma_async_memcpy_buf_to_buf  prototype  include/linux/dmaengine.h  816  dma_cookie_t dma_async_memcpy_buf_to_buf(struct dma_chan *chan,void *dest, void *src, size_t len);
dma_async_memcpy_buf_to_pg  prototype  include/linux/dmaengine.h  818  dma_cookie_t dma_async_memcpy_buf_to_pg(struct dma_chan *chan,struct page *page, unsigned int offset, void *kdata, size_t len);
dma_async_memcpy_pg_to_pg  prototype  include/linux/dmaengine.h  820  dma_cookie_t dma_async_memcpy_pg_to_pg(struct dma_chan *chan,struct page *dest_pg, unsigned int dest_off, struct page *src_pg,unsigned int src_off, size_t len);
dma_async_tx_descriptor_init  prototype  include/linux/dmaengine.h  823  void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *tx,struct dma_chan *chan);
async_tx_ack  function  include/linux/dmaengine.h  826  static inline void async_tx_ack(struct dma_async_tx_descriptor *tx)
async_tx_clear_ack  function  include/linux/dmaengine.h  831  static inline void async_tx_clear_ack(struct dma_async_tx_descriptor *tx)
async_tx_test_ack  function  include/linux/dmaengine.h  836  static inline bool async_tx_test_ack(struct dma_async_tx_descriptor *tx)
first_dma_cap  macro  include/linux/dmaengine.h  841  #define first_dma_cap(mask) __first_dma_cap(&(mask))
__first_dma_cap  function  include/linux/dmaengine.h  842  static inline int __first_dma_cap(const dma_cap_mask_t *srcp)
next_dma_cap  macro  include/linux/dmaengine.h  848  #define next_dma_cap(n,mask) __next_dma_cap((n),&(mask))
__next_dma_cap  function  include/linux/dmaengine.h  849  static inline int __next_dma_cap(int n,const dma_cap_mask_t *srcp)
dma_cap_set  macro  include/linux/dmaengine.h  855  #define dma_cap_set(tx,mask) __dma_cap_set((tx),&(mask))
__dma_cap_set  function  include/linux/dmaengine.h  857  __dma_cap_set(enum dma_transaction_type tx_type,dma_cap_mask_t *dstp)
dma_cap_clear  macro  include/linux/dmaengine.h  862  #define dma_cap_clear(tx,mask) __dma_cap_clear((tx),&(mask))
__dma_cap_clear  function  include/linux/dmaengine.h  864  __dma_cap_clear(enum dma_transaction_type tx_type,dma_cap_mask_t *dstp)
dma_cap_zero  macro  include/linux/dmaengine.h  869  #define dma_cap_zero(mask) __dma_cap_zero(&(mask))
__dma_cap_zero  function  include/linux/dmaengine.h  870  static inline void __dma_cap_zero(dma_cap_mask_t *dstp)
dma_has_cap  macro  include/linux/dmaengine.h  875  #define dma_has_cap(tx,mask) __dma_has_cap((tx),&(mask))
__dma_has_cap  function  include/linux/dmaengine.h  877  __dma_has_cap(enum dma_transaction_type tx_type,dma_cap_mask_t *srcp)
for_each_dma_cap_mask  macro  include/linux/dmaengine.h  882  #define for_each_dma_cap_mask(cap,mask) for ((cap) = first_dma_cap(mask); (cap) < DMA_TX_TYPE_END; (cap) = next_dma_cap((cap), (mask)))
dma_async_issue_pending  function  include/linux/dmaengine.h  894  static inline void dma_async_issue_pending(struct dma_chan *chan)
dma_async_memcpy_issue_pending  macro  include/linux/dmaengine.h  899  #define dma_async_memcpy_issue_pending(chan) dma_async_issue_pending(chan)
dma_async_is_tx_complete  function  include/linux/dmaengine.h  912  static inline enum dma_status dma_async_is_tx_complete(struct dma_chan *chan,dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used)
dma_async_memcpy_complete  macro  include/linux/dmaengine.h  926  #define dma_async_memcpy_complete(chan,cookie,last,used) dma_async_is_tx_complete(chan, cookie, last, used)
dma_async_is_complete  function  include/linux/dmaengine.h  938  static inline enum dma_status dma_async_is_complete(dma_cookie_t cookie,dma_cookie_t last_complete, dma_cookie_t last_used)
dma_set_tx_state  function  include/linux/dmaengine.h  952  dma_set_tx_state(struct dma_tx_state *st,dma_cookie_t last,dma_cookie_t used,u32 residue)
dma_sync_wait  prototype  include/linux/dmaengine.h  961  enum dma_status dma_sync_wait(struct dma_chan *chan,dma_cookie_t cookie);
dma_wait_for_async_tx  function  include/linux/dmaengine.h  968  static inline enum dma_status dma_wait_for_async_tx(struct dma_async_tx_descriptor *tx)
dma_issue_pending_all  function  include/linux/dmaengine.h  972  static inline void dma_issue_pending_all(void)
__dma_request_channel  function  include/linux/dmaengine.h  975  static inline struct dma_chan *__dma_request_channel(dma_cap_mask_t *mask,dma_filter_fn fn, void *fn_param)
dma_release_channel  function  include/linux/dmaengine.h  980  static inline void dma_release_channel(struct dma_chan *chan)
dma_async_device_register  prototype  include/linux/dmaengine.h  987  int dma_async_device_register(struct dma_device *device);
dma_async_device_unregister  prototype  include/linux/dmaengine.h  988  void dma_async_device_unregister(struct dma_device *device);
dma_run_dependencies  prototype  include/linux/dmaengine.h  989  void dma_run_dependencies(struct dma_async_tx_descriptor *tx);
dma_find_channel  prototype  include/linux/dmaengine.h  990  struct dma_chan *dma_find_channel(enum dma_transaction_type tx_type);
net_dma_find_channel  prototype  include/linux/dmaengine.h  991  struct dma_chan *net_dma_find_channel(void);
dma_request_channel  macro  include/linux/dmaengine.h  992  #define dma_request_channel(mask,x,y) __dma_request_channel(&(mask),x,y)
dma_page_list  struct  include/linux/dmaengine.h  996  struct dma_page_list { char __user *base_address; int nr_pages; struct page **pages; };
dma_pinned_list  struct  include/linux/dmaengine.h  1002  struct dma_pinned_list { int nr_iovecs; struct dma_page_list page_list[0]; };
dma_pin_iovec_pages  prototype  include/linux/dmaengine.h  1007  struct dma_pinned_list *dma_pin_iovec_pages(struct iovec *iov,size_t len);
dma_unpin_iovec_pages  prototype  include/linux/dmaengine.h  1008  void dma_unpin_iovec_pages(struct dma_pinned_list* pinned_list);
dma_memcpy_to_iovec  prototype  include/linux/dmaengine.h  1010  dma_cookie_t dma_memcpy_to_iovec(struct dma_chan *chan,struct iovec *iov,struct dma_pinned_list *pinned_list, unsigned char *kdata, size_t len);
dma_memcpy_pg_to_iovec  prototype  include/linux/dmaengine.h  1012  dma_cookie_t dma_memcpy_pg_to_iovec(struct dma_chan *chan,struct iovec *iov,struct dma_pinned_list *pinned_list, struct page *page,unsigned int offset, size_t len);
_LINUX_DQL_H  macro  include/linux/dynamic_queue_limits.h  36  #define _LINUX_DQL_H
dql  struct  include/linux/dynamic_queue_limits.h  40  struct dql { unsigned int num_queued; unsigned int adj_limit; unsigned int last_obj_cnt; unsigned int limit ____cacheline_aligned_in_smp; unsigned int num_completed; unsigned int prev_ovlimit; unsigned int prev_num_queued; unsigned int prev_last_obj_cnt; unsigned int lowest_slack; unsigned long slack_start_time; unsigned int max_limit; unsigned int min_limit; unsigned int slack_hold_time; };
DQL_MAX_OBJECT  macro  include/linux/dynamic_queue_limits.h  65  #define DQL_MAX_OBJECT (UINT_MAX / 16)
DQL_MAX_LIMIT  macro  include/linux/dynamic_queue_limits.h  66  #define DQL_MAX_LIMIT ((UINT_MAX / 2) - DQL_MAX_OBJECT)
dql_queued  function  include/linux/dynamic_queue_limits.h  72  static inline void dql_queued(struct dql *dql,unsigned int count)
dql_avail  function  include/linux/dynamic_queue_limits.h  81  static inline int dql_avail(const struct dql *dql)
dql_completed  prototype  include/linux/dynamic_queue_limits.h  87  void dql_completed(struct dql *dql,unsigned int count);
dql_reset  prototype  include/linux/dynamic_queue_limits.h  90  void dql_reset(struct dql *dql);
dql_init  prototype  include/linux/dynamic_queue_limits.h  93  int dql_init(struct dql *dql,unsigned hold_time);
__NET_NET_NAMESPACE_H  macro  include/net/net_namespace.h  5  #define __NET_NET_NAMESPACE_H
NETDEV_HASHBITS  macro  include/net/net_namespace.h  34  #define NETDEV_HASHBITS 8
NETDEV_HASHENTRIES  macro  include/net/net_namespace.h  35  #define NETDEV_HASHENTRIES (1 << NETDEV_HASHBITS)
net  struct  include/net/net_namespace.h  37  struct net { atomic_t passive; atomic_t count; atomic_t use_count; spinlock_t rules_mod_lock; struct list_head list; struct list_head cleanup_list; struct list_head exit_list; struct proc_dir_entry *proc_net; struct proc_dir_entry *proc_net_stat; struct ctl_table_set sysctls; struct sock *rtnl; struct sock *genl_sock; struct list_head dev_base_head; struct hlist_head *dev_name_head; struct hlist_head *dev_index_head; unsigned int dev_base_seq; struct list_head rules_ops; struct net_device *loopback_dev; struct netns_core core; struct netns_mib mib; struct netns_packet packet; struct netns_unix unx; struct netns_ipv4 ipv4; struct netns_ipv6 ipv6; struct netns_dccp dccp; struct netns_xt xt; struct netns_ct ct; struct sock *nfnl; struct sock *nfnl_stash; struct sk_buff_head wext_nlevents; struct net_generic __rcu *gen; struct netns_xfrm xfrm; struct netns_ipvs *ipvs; };
copy_net_ns  function  include/net/net_namespace.h  116  static inline struct net *copy_net_ns(unsigned long flags,struct net *net_ns)
get_net_ns_by_pid  prototype  include/net/net_namespace.h  126  extern struct net *get_net_ns_by_pid(pid_t pid);
get_net_ns_by_fd  prototype  include/net/net_namespace.h  127  extern struct net *get_net_ns_by_fd(int pid);
__put_net  prototype  include/net/net_namespace.h  130  extern void __put_net(struct net *net);
get_net  function  include/net/net_namespace.h  166  static inline struct net *get_net(struct net *net)
maybe_get_net  function  include/net/net_namespace.h  175  static inline struct net *maybe_get_net(struct net *net)
put_net  function  include/net/net_namespace.h  171  static inline void put_net(struct net *net)
net_eq  function  include/net/net_namespace.h  181  int net_eq(const struct net *net1,const struct net *net2)
net_drop_ns  macro  include/net/net_namespace.h  186  #define net_drop_ns NULL
hold_net  function  include/net/net_namespace.h  204  static inline struct net *hold_net(struct net *net)
release_net  function  include/net/net_namespace.h  209  static inline void release_net(struct net *net)
write_pnet  macro  include/net/net_namespace.h  228  #define write_pnet(pnet,net) do { (void)(net);} while (0)
read_pnet  macro  include/net/net_namespace.h  229  #define read_pnet(pnet) (&init_net)
for_each_net  macro  include/net/net_namespace.h  233  #define for_each_net(VAR) list_for_each_entry(VAR, &net_namespace_list, list)
for_each_net_rcu  macro  include/net/net_namespace.h  236  #define for_each_net_rcu(VAR) list_for_each_entry_rcu(VAR, &net_namespace_list, list)
__net_init  macro  include/net/net_namespace.h  244  #define __net_init __init
__net_exit  macro  include/net/net_namespace.h  245  #define __net_exit __exit_refok
__net_initdata  macro  include/net/net_namespace.h  246  #define __net_initdata __initdata
pernet_operations  struct  include/net/net_namespace.h  249  struct pernet_operations { struct list_head list; int (*init)(struct net *net); void (*exit)(struct net *net); void (*exit_batch)(struct list_head *net_exit_list); int *id; size_t size; };
register_pernet_subsys  prototype  include/net/net_namespace.h  277  extern int register_pernet_subsys(struct pernet_operations *);
unregister_pernet_subsys  prototype  include/net/net_namespace.h  278  extern void unregister_pernet_subsys(struct pernet_operations *);
register_pernet_device  prototype  include/net/net_namespace.h  279  extern int register_pernet_device(struct pernet_operations *);
unregister_pernet_device  prototype  include/net/net_namespace.h  280  extern void unregister_pernet_device(struct pernet_operations *);
net_sysctl_init  function  include/net/net_namespace.h  291  static inline int net_sysctl_init(void) { return 0; }
register_net_sysctl  function  include/net/net_namespace.h  292  static inline struct ctl_table_header *register_net_sysctl(struct net *net,const char *path, struct ctl_table *table)
unregister_net_sysctl_table  function  include/net/net_namespace.h  297  static inline void unregister_net_sysctl_table(struct ctl_table_header *header)
__LINUX_NET_DSA_H  macro  include/net/dsa.h  12  #define __LINUX_NET_DSA_H
DSA_MAX_SWITCHES  macro  include/net/dsa.h  19  #define DSA_MAX_SWITCHES 4
DSA_MAX_PORTS  macro  include/net/dsa.h  20  #define DSA_MAX_PORTS 12
dsa_chip_data  struct  include/net/dsa.h  22  struct dsa_chip_data { struct device *mii_bus; int sw_addr; char *port_names[DSA_MAX_PORTS]; s8 *rtable; };
dsa_platform_data  struct  include/net/dsa.h  47  struct dsa_platform_data { struct device *netdev; int nr_chips; struct dsa_chip_data *chip; };
dsa_switch_tree  struct  include/net/dsa.h  62  struct dsa_switch_tree { struct dsa_platform_data *pd; struct net_device *master_netdev; __be16 tag_protocol; s8 cpu_switch; s8 cpu_port; int link_poll_needed; struct work_struct link_poll_work; struct timer_list link_poll_timer; struct dsa_switch *ds[DSA_MAX_SWITCHES]; };
dsa_switch  struct  include/net/dsa.h  95  struct dsa_switch { struct dsa_switch_tree *dst; int index; struct dsa_chip_data *pd; struct dsa_switch_driver *drv; struct mii_bus *master_mii_bus; u32 dsa_port_mask; u32 phys_port_mask; struct mii_bus *slave_mii_bus; struct net_device *ports[DSA_MAX_PORTS]; };
dsa_is_cpu_port  function  include/net/dsa.h  126  static inline bool dsa_is_cpu_port(struct dsa_switch *ds,int p)
dsa_upstream_port  function  include/net/dsa.h  131  static inline u8 dsa_upstream_port(struct dsa_switch *ds)
dsa_switch_driver  struct  include/net/dsa.h  147  struct dsa_switch_driver { struct list_head list; __be16 tag_protocol; int priv_size; char *(*probe)(struct mii_bus *bus, int sw_addr); int (*setup)(struct dsa_switch *ds); int (*set_addr)(struct dsa_switch *ds, u8 *addr); int (*phy_read)(struct dsa_switch *ds, int port, int regnum); int (*phy_write)(struct dsa_switch *ds, int port,int regnum, u16 val); void (*poll_link)(struct dsa_switch *ds); void (*get_strings)(struct dsa_switch *ds, int port, uint8_t *data); void (*get_ethtool_stats)(struct dsa_switch *ds,int port, uint64_t *data); int (*get_sset_count)(struct dsa_switch *ds); };
register_switch_driver  prototype  include/net/dsa.h  181  void register_switch_driver(struct dsa_switch_driver *type);
unregister_switch_driver  prototype  include/net/dsa.h  182  void unregister_switch_driver(struct dsa_switch_driver *type);
dsa_uses_dsa_tags  function  include/net/dsa.h  191  static inline bool dsa_uses_dsa_tags(struct dsa_switch_tree *dst)
dsa_uses_trailer_tags  function  include/net/dsa.h  196  static inline bool dsa_uses_trailer_tags(struct dsa_switch_tree *dst)
__NET_DCBNL_H__  macro  include/net/dcbnl.h  21  #define __NET_DCBNL_H__
dcb_app_type  struct  include/net/dcbnl.h  25  struct dcb_app_type { int ifindex; struct dcb_app app; struct list_head list; u8 dcbx; };
dcb_setapp  prototype  include/net/dcbnl.h  32  int dcb_setapp(struct net_device *,struct dcb_app *);
dcb_getapp  prototype  include/net/dcbnl.h  33  u8 dcb_getapp(struct net_device *,struct dcb_app *);
dcb_ieee_setapp  prototype  include/net/dcbnl.h  34  int dcb_ieee_setapp(struct net_device *,struct dcb_app *);
dcb_ieee_delapp  prototype  include/net/dcbnl.h  35  int dcb_ieee_delapp(struct net_device *,struct dcb_app *);
dcb_ieee_getapp_mask  prototype  include/net/dcbnl.h  36  u8 dcb_ieee_getapp_mask(struct net_device *,struct dcb_app *);
dcbnl_ieee_notify  prototype  include/net/dcbnl.h  38  int dcbnl_ieee_notify(struct net_device *dev,int event,int cmd,u32 seq, u32 pid);
dcbnl_cee_notify  prototype  include/net/dcbnl.h  40  int dcbnl_cee_notify(struct net_device *dev,int event,int cmd,u32 seq, u32 pid);
dcbnl_rtnl_ops  struct  include/net/dcbnl.h  47  struct dcbnl_rtnl_ops { int (*ieee_getets) (struct net_device *, struct ieee_ets *); int (*ieee_setets) (struct net_device *, struct ieee_ets *); int (*ieee_getmaxrate) (struct net_device *, struct ieee_maxrate *); int (*ieee_setmaxrate) (struct net_device *, struct ieee_maxrate *); int (*ieee_getpfc) (struct net_device *, struct ieee_pfc *); int (*ieee_setpfc) (struct net_device *, struct ieee_pfc *); int (*ieee_getapp) (struct net_device *, struct dcb_app *); int (*ieee_setapp) (struct net_device *, struct dcb_app *); int (*ieee_delapp) (struct net_device *, struct dcb_app *); int (*ieee_peer_getets) (struct net_device *, struct ieee_ets *); int (*ieee_peer_getpfc) (struct net_device *, struct ieee_pfc *); u8 (*getstate)(struct net_device *); u8 (*setstate)(struct net_device *, u8); void (*getpermhwaddr)(struct net_device *, u8 *); void (*setpgtccfgtx)(struct net_device *, int, u8, u8, u8, u8); void (*setpgbwgcfgtx)(struct net_device *, int, u8); void (*setpgtccfgrx)(struct net_device *, int, u8, u8, u8, u8); void (*setpgbwgcfgrx)(struct net_device *, int, u8); void (*getpgtccfgtx)(struct net_device *, int, u8 *, u8 *, u8 *, u8 *); void (*getpgbwgcfgtx)(struct net_device *, int, u8 *); void (*getpgtccfgrx)(struct net_device *, int, u8 *, u8 *, u8 *, u8 *); void (*getpgbwgcfgrx)(struct net_device *, int, u8 *); void (*setpfccfg)(struct net_device *, int, u8); void (*getpfccfg)(struct net_device *, int, u8 *); u8 (*setall)(struct net_device *); u8 (*getcap)(struct net_device *, int, u8 *); int (*getnumtcs)(struct net_device *, int, u8 *); int (*setnumtcs)(struct net_device *, int, u8); u8 (*getpfcstate)(struct net_device *); void (*setpfcstate)(struct net_device *, u8); void (*getbcncfg)(struct net_device *, int, u32 *); void (*setbcncfg)(struct net_device *, int, u32); void (*getbcnrp)(struct net_device *, int, u8 *); void (*setbcnrp)(struct net_device *, int, u8); u8 (*setapp)(struct net_device *, u8, u16, u8); u8 (*getapp)(struct net_device *, u8, u16); u8 (*getfeatcfg)(struct net_device *, int, u8 *); u8 (*setfeatcfg)(struct net_device *, int, u8); u8 (*getdcbx)(struct net_device *); u8 (*setdcbx)(struct net_device *, u8); int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *,u16 *); int (*peer_getapptable)(struct net_device *, struct dcb_app *); int (*cee_peer_getpg) (struct net_device *, struct cee_pg *); int (*cee_peer_getpfc) (struct net_device *, struct cee_pfc *); };
_NETPRIO_CGROUP_H  macro  include/net/netprio_cgroup.h  15  #define _NETPRIO_CGROUP_H
netprio_map  struct  include/net/netprio_cgroup.h  21  struct netprio_map { struct rcu_head rcu; u32 priomap_len; u32 priomap[]; };
cgroup_netprio_state  struct  include/net/netprio_cgroup.h  29  struct cgroup_netprio_state { struct cgroup_subsys_state css; u32 prioidx; };
sock_update_netprioidx  macro  include/net/netprio_cgroup.h  85  #define sock_update_netprioidx(sk)
task_netprioidx  function  include/net/netprio_cgroup.h  77  static inline u32 task_netprioidx(struct task_struct *p)
_LINUX_NETDEV_FEATURES_H  macro  include/linux/netdev_features.h  11  #define _LINUX_NETDEV_FEATURES_H
__NETIF_F_BIT  macro  include/linux/netdev_features.h  71  #define __NETIF_F_BIT(bit) ((netdev_features_t)1 << (bit))
__NETIF_F  macro  include/linux/netdev_features.h  72  #define __NETIF_F(name) __NETIF_F_BIT(NETIF_F_##name##_BIT)
NETIF_F_FCOE_CRC  macro  include/linux/netdev_features.h  74  #define NETIF_F_FCOE_CRC __NETIF_F(FCOE_CRC)
NETIF_F_FCOE_MTU  macro  include/linux/netdev_features.h  75  #define NETIF_F_FCOE_MTU __NETIF_F(FCOE_MTU)
NETIF_F_FRAGLIST  macro  include/linux/netdev_features.h  76  #define NETIF_F_FRAGLIST __NETIF_F(FRAGLIST)
NETIF_F_FSO  macro  include/linux/netdev_features.h  77  #define NETIF_F_FSO __NETIF_F(FSO)
NETIF_F_GRO  macro  include/linux/netdev_features.h  78  #define NETIF_F_GRO __NETIF_F(GRO)
NETIF_F_GSO  macro  include/linux/netdev_features.h  79  #define NETIF_F_GSO __NETIF_F(GSO)
NETIF_F_GSO_ROBUST  macro  include/linux/netdev_features.h  80  #define NETIF_F_GSO_ROBUST __NETIF_F(GSO_ROBUST)
NETIF_F_HIGHDMA  macro  include/linux/netdev_features.h  81  #define NETIF_F_HIGHDMA __NETIF_F(HIGHDMA)
NETIF_F_HW_CSUM  macro  include/linux/netdev_features.h  82  #define NETIF_F_HW_CSUM __NETIF_F(HW_CSUM)
NETIF_F_HW_VLAN_FILTER  macro  include/linux/netdev_features.h  83  #define NETIF_F_HW_VLAN_FILTER __NETIF_F(HW_VLAN_FILTER)
NETIF_F_HW_VLAN_RX  macro  include/linux/netdev_features.h  84  #define NETIF_F_HW_VLAN_RX __NETIF_F(HW_VLAN_RX)
NETIF_F_HW_VLAN_TX  macro  include/linux/netdev_features.h  85  #define NETIF_F_HW_VLAN_TX __NETIF_F(HW_VLAN_TX)
NETIF_F_IP_CSUM  macro  include/linux/netdev_features.h  86  #define NETIF_F_IP_CSUM __NETIF_F(IP_CSUM)
NETIF_F_IPV6_CSUM  macro  include/linux/netdev_features.h  87  #define NETIF_F_IPV6_CSUM __NETIF_F(IPV6_CSUM)
NETIF_F_LLTX  macro  include/linux/netdev_features.h  88  #define NETIF_F_LLTX __NETIF_F(LLTX)
NETIF_F_LOOPBACK  macro  include/linux/netdev_features.h  89  #define NETIF_F_LOOPBACK __NETIF_F(LOOPBACK)
NETIF_F_LRO  macro  include/linux/netdev_features.h  90  #define NETIF_F_LRO __NETIF_F(LRO)
NETIF_F_NETNS_LOCAL  macro  include/linux/netdev_features.h  91  #define NETIF_F_NETNS_LOCAL __NETIF_F(NETNS_LOCAL)
NETIF_F_NOCACHE_COPY  macro  include/linux/netdev_features.h  92  #define NETIF_F_NOCACHE_COPY __NETIF_F(NOCACHE_COPY)
NETIF_F_NTUPLE  macro  include/linux/netdev_features.h  93  #define NETIF_F_NTUPLE __NETIF_F(NTUPLE)
NETIF_F_RXCSUM  macro  include/linux/netdev_features.h  94  #define NETIF_F_RXCSUM __NETIF_F(RXCSUM)
NETIF_F_RXHASH  macro  include/linux/netdev_features.h  95  #define NETIF_F_RXHASH __NETIF_F(RXHASH)
NETIF_F_SCTP_CSUM  macro  include/linux/netdev_features.h  96  #define NETIF_F_SCTP_CSUM __NETIF_F(SCTP_CSUM)
NETIF_F_SG  macro  include/linux/netdev_features.h  97  #define NETIF_F_SG __NETIF_F(SG)
NETIF_F_TSO6  macro  include/linux/netdev_features.h  98  #define NETIF_F_TSO6 __NETIF_F(TSO6)
NETIF_F_TSO_ECN  macro  include/linux/netdev_features.h  99  #define NETIF_F_TSO_ECN __NETIF_F(TSO_ECN)
NETIF_F_TSO  macro  include/linux/netdev_features.h  100  #define NETIF_F_TSO __NETIF_F(TSO)
NETIF_F_UFO  macro  include/linux/netdev_features.h  101  #define NETIF_F_UFO __NETIF_F(UFO)
NETIF_F_VLAN_CHALLENGED  macro  include/linux/netdev_features.h  102  #define NETIF_F_VLAN_CHALLENGED __NETIF_F(VLAN_CHALLENGED)
NETIF_F_RXFCS  macro  include/linux/netdev_features.h  103  #define NETIF_F_RXFCS __NETIF_F(RXFCS)
NETIF_F_RXALL  macro  include/linux/netdev_features.h  104  #define NETIF_F_RXALL __NETIF_F(RXALL)
NETIF_F_NEVER_CHANGE  macro  include/linux/netdev_features.h  108  #define NETIF_F_NEVER_CHANGE (NETIF_F_VLAN_CHALLENGED | NETIF_F_LLTX | NETIF_F_NETNS_LOCAL)
NETIF_F_ETHTOOL_BITS  macro  include/linux/netdev_features.h  112  #define NETIF_F_ETHTOOL_BITS ((__NETIF_F_BIT(NETDEV_FEATURE_COUNT - 1) | (__NETIF_F_BIT(NETDEV_FEATURE_COUNT - 1) - 1)) & ~NETIF_F_NEVER_CHANGE)
NETIF_F_GSO_MASK  macro  include/linux/netdev_features.h  117  #define NETIF_F_GSO_MASK (__NETIF_F_BIT(NETIF_F_GSO_LAST + 1) - __NETIF_F_BIT(NETIF_F_GSO_SHIFT))
NETIF_F_GSO_SOFTWARE  macro  include/linux/netdev_features.h  121  #define NETIF_F_GSO_SOFTWARE (NETIF_F_TSO | NETIF_F_TSO_ECN | NETIF_F_TSO6 | NETIF_F_UFO)
NETIF_F_GEN_CSUM  macro  include/linux/netdev_features.h  124  #define NETIF_F_GEN_CSUM NETIF_F_HW_CSUM
NETIF_F_V4_CSUM  macro  include/linux/netdev_features.h  125  #define NETIF_F_V4_CSUM (NETIF_F_GEN_CSUM | NETIF_F_IP_CSUM)
NETIF_F_V6_CSUM  macro  include/linux/netdev_features.h  126  #define NETIF_F_V6_CSUM (NETIF_F_GEN_CSUM | NETIF_F_IPV6_CSUM)
NETIF_F_ALL_CSUM  macro  include/linux/netdev_features.h  127  #define NETIF_F_ALL_CSUM (NETIF_F_V4_CSUM | NETIF_F_V6_CSUM)
NETIF_F_ALL_TSO  macro  include/linux/netdev_features.h  129  #define NETIF_F_ALL_TSO (NETIF_F_TSO | NETIF_F_TSO6 | NETIF_F_TSO_ECN)
NETIF_F_ALL_FCOE  macro  include/linux/netdev_features.h  131  #define NETIF_F_ALL_FCOE (NETIF_F_FCOE_CRC | NETIF_F_FCOE_MTU | NETIF_F_FSO)
NETIF_F_ONE_FOR_ALL  macro  include/linux/netdev_features.h  138  #define NETIF_F_ONE_FOR_ALL (NETIF_F_GSO_SOFTWARE | NETIF_F_GSO_ROBUST | NETIF_F_SG | NETIF_F_HIGHDMA | NETIF_F_FRAGLIST | NETIF_F_VLAN_CHALLENGED)
NETIF_F_ALL_FOR_ALL  macro  include/linux/netdev_features.h  145  #define NETIF_F_ALL_FOR_ALL (NETIF_F_NOCACHE_COPY | NETIF_F_FSO)
NETIF_F_SOFT_FEATURES  macro  include/linux/netdev_features.h  148  #define NETIF_F_SOFT_FEATURES (NETIF_F_GSO | NETIF_F_GRO)
__LINUX_NEIGHBOUR_H  macro  include/linux/neighbour.h  2  #define __LINUX_NEIGHBOUR_H
ndmsg  struct  include/linux/neighbour.h  7  struct ndmsg { __u8 ndm_family; __u8 ndm_pad1; __u16 ndm_pad2; __s32 ndm_ifindex; __u16 ndm_state; __u8 ndm_flags; __u8 ndm_type; };
NDA_MAX  macro  include/linux/neighbour.h  26  #define NDA_MAX (__NDA_MAX - 1)
NTF_USE  macro  include/linux/neighbour.h  32  #define NTF_USE 0x01
NTF_PROXY  macro  include/linux/neighbour.h  33  #define NTF_PROXY 0x08
NTF_ROUTER  macro  include/linux/neighbour.h  34  #define NTF_ROUTER 0x80
NTF_SELF  macro  include/linux/neighbour.h  36  #define NTF_SELF 0x02
NTF_MASTER  macro  include/linux/neighbour.h  37  #define NTF_MASTER 0x04
NUD_INCOMPLETE  macro  include/linux/neighbour.h  43  #define NUD_INCOMPLETE 0x01
NUD_REACHABLE  macro  include/linux/neighbour.h  44  #define NUD_REACHABLE 0x02
NUD_STALE  macro  include/linux/neighbour.h  45  #define NUD_STALE 0x04
NUD_DELAY  macro  include/linux/neighbour.h  46  #define NUD_DELAY 0x08
NUD_PROBE  macro  include/linux/neighbour.h  47  #define NUD_PROBE 0x10
NUD_FAILED  macro  include/linux/neighbour.h  48  #define NUD_FAILED 0x20
NUD_NOARP  macro  include/linux/neighbour.h  51  #define NUD_NOARP 0x40
NUD_PERMANENT  macro  include/linux/neighbour.h  52  #define NUD_PERMANENT 0x80
NUD_NONE  macro  include/linux/neighbour.h  53  #define NUD_NONE 0x00
nda_cacheinfo  struct  include/linux/neighbour.h  60  struct nda_cacheinfo { __u32 ndm_confirmed; __u32 ndm_used; __u32 ndm_updated; __u32 ndm_refcnt; };
ndt_stats  struct  include/linux/neighbour.h  92  struct ndt_stats { __u64 ndts_allocs; __u64 ndts_destroys; __u64 ndts_hash_grows; __u64 ndts_res_failed; __u64 ndts_lookups; __u64 ndts_hits; __u64 ndts_rcv_probes_mcast; __u64 ndts_rcv_probes_ucast; __u64 ndts_periodic_gc_runs; __u64 ndts_forced_gc_runs; };
NDTPA_MAX  macro  include/linux/neighbour.h  125  #define NDTPA_MAX (__NDTPA_MAX - 1)
ndtmsg  struct  include/linux/neighbour.h  127  struct ndtmsg { __u8 ndtm_family; __u8 ndtm_pad1; __u16 ndtm_pad2; };
ndt_config  struct  include/linux/neighbour.h  133  struct ndt_config { __u16 ndtc_key_len; __u16 ndtc_entry_size; __u32 ndtc_entries; __u32 ndtc_last_flush; __u32 ndtc_last_rand; __u32 ndtc_hash_rnd; __u32 ndtc_hash_mask; __u32 ndtc_hash_chain_gc; __u32 ndtc_proxy_qlen; };
NDTA_MAX  macro  include/linux/neighbour.h  157  #define NDTA_MAX (__NDTA_MAX - 1)
_LINUX_NOTIFIER_H  macro  include/linux/notifier.h  11  #define _LINUX_NOTIFIER_H
notifier_block  struct  include/linux/notifier.h  50  struct notifier_block { int (*notifier_call)(struct notifier_block *, unsigned long, void *); struct notifier_block __rcu *next; int priority; };
atomic_notifier_head  struct  include/linux/notifier.h  56  struct atomic_notifier_head { spinlock_t lock; struct notifier_block __rcu *head; };
blocking_notifier_head  struct  include/linux/notifier.h  61  struct blocking_notifier_head { struct rw_semaphore rwsem; struct notifier_block __rcu *head; };
raw_notifier_head  struct  include/linux/notifier.h  66  struct raw_notifier_head { struct notifier_block __rcu *head; };
srcu_notifier_head  struct  include/linux/notifier.h  70  struct srcu_notifier_head { struct mutex mutex; struct srcu_struct srcu; struct notifier_block __rcu *head; };
ATOMIC_INIT_NOTIFIER_HEAD  macro  include/linux/notifier.h  76  #define ATOMIC_INIT_NOTIFIER_HEAD(name) do { spin_lock_init(&(name)->lock); (name)->head = NULL; } while (0)
BLOCKING_INIT_NOTIFIER_HEAD  macro  include/linux/notifier.h  80  #define BLOCKING_INIT_NOTIFIER_HEAD(name) do { init_rwsem(&(name)->rwsem); (name)->head = NULL; } while (0)
RAW_INIT_NOTIFIER_HEAD  macro  include/linux/notifier.h  84  #define RAW_INIT_NOTIFIER_HEAD(name) do { (name)->head = NULL; } while (0)
srcu_init_notifier_head  prototype  include/linux/notifier.h  89  extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
srcu_cleanup_notifier_head  macro  include/linux/notifier.h  90  #define srcu_cleanup_notifier_head(name) cleanup_srcu_struct(&(name)->srcu);
ATOMIC_NOTIFIER_INIT  macro  include/linux/notifier.h  93  #define ATOMIC_NOTIFIER_INIT(name) { .lock = __SPIN_LOCK_UNLOCKED(name.lock), .head = NULL }
BLOCKING_NOTIFIER_INIT  macro  include/linux/notifier.h  96  #define BLOCKING_NOTIFIER_INIT(name) { .rwsem = __RWSEM_INITIALIZER((name).rwsem), .head = NULL }
RAW_NOTIFIER_INIT  macro  include/linux/notifier.h  99  #define RAW_NOTIFIER_INIT(name) { .head = NULL }
ATOMIC_NOTIFIER_HEAD  macro  include/linux/notifier.h  103  #define ATOMIC_NOTIFIER_HEAD(name) struct atomic_notifier_head name = ATOMIC_NOTIFIER_INIT(name)
BLOCKING_NOTIFIER_HEAD  macro  include/linux/notifier.h  106  #define BLOCKING_NOTIFIER_HEAD(name) struct blocking_notifier_head name = BLOCKING_NOTIFIER_INIT(name)
RAW_NOTIFIER_HEAD  macro  include/linux/notifier.h  109  #define RAW_NOTIFIER_HEAD(name) struct raw_notifier_head name = RAW_NOTIFIER_INIT(name)
atomic_notifier_chain_register  prototype  include/linux/notifier.h  115  extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,struct notifier_block *nb);
blocking_notifier_chain_register  prototype  include/linux/notifier.h  117  extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,struct notifier_block *nb);
raw_notifier_chain_register  prototype  include/linux/notifier.h  119  extern int raw_notifier_chain_register(struct raw_notifier_head *nh,struct notifier_block *nb);
srcu_notifier_chain_register  prototype  include/linux/notifier.h  121  extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,struct notifier_block *nb);
blocking_notifier_chain_cond_register  prototype  include/linux/notifier.h  124  extern int blocking_notifier_chain_cond_register(
atomic_notifier_chain_unregister  prototype  include/linux/notifier.h  128  extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,struct notifier_block *nb);
blocking_notifier_chain_unregister  prototype  include/linux/notifier.h  130  extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,struct notifier_block *nb);
raw_notifier_chain_unregister  prototype  include/linux/notifier.h  132  extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,struct notifier_block *nb);
srcu_notifier_chain_unregister  prototype  include/linux/notifier.h  134  extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,struct notifier_block *nb);
atomic_notifier_call_chain  prototype  include/linux/notifier.h  137  extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,unsigned long val, void *v);
__atomic_notifier_call_chain  prototype  include/linux/notifier.h  139  extern int __atomic_notifier_call_chain(struct atomic_notifier_head *nh,unsigned long val, void *v, int nr_to_call, int *nr_calls);
blocking_notifier_call_chain  prototype  include/linux/notifier.h  141  extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,unsigned long val, void *v);
__blocking_notifier_call_chain  prototype  include/linux/notifier.h  143  extern int __blocking_notifier_call_chain(struct blocking_notifier_head *nh,unsigned long val, void *v, int nr_to_call, int *nr_calls);
raw_notifier_call_chain  prototype  include/linux/notifier.h  145  extern int raw_notifier_call_chain(struct raw_notifier_head *nh,unsigned long val, void *v);
__raw_notifier_call_chain  prototype  include/linux/notifier.h  147  extern int __raw_notifier_call_chain(struct raw_notifier_head *nh,unsigned long val, void *v, int nr_to_call, int *nr_calls);
srcu_notifier_call_chain  prototype  include/linux/notifier.h  149  extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,unsigned long val, void *v);
__srcu_notifier_call_chain  prototype  include/linux/notifier.h  151  extern int __srcu_notifier_call_chain(struct srcu_notifier_head *nh,unsigned long val, void *v, int nr_to_call, int *nr_calls);
NOTIFY_DONE  macro  include/linux/notifier.h  154  #define NOTIFY_DONE 0x0000
NOTIFY_OK  macro  include/linux/notifier.h  155  #define NOTIFY_OK 0x0001
NOTIFY_STOP_MASK  macro  include/linux/notifier.h  156  #define NOTIFY_STOP_MASK 0x8000
NOTIFY_BAD  macro  include/linux/notifier.h  157  #define NOTIFY_BAD (NOTIFY_STOP_MASK|0x0002)
NOTIFY_STOP  macro  include/linux/notifier.h  162  #define NOTIFY_STOP (NOTIFY_OK|NOTIFY_STOP_MASK)
notifier_from_errno  function  include/linux/notifier.h  165  static inline int notifier_from_errno(int err)
notifier_to_errno  function  include/linux/notifier.h  174  static inline int notifier_to_errno(int ret)
NETLINK_URELEASE  macro  include/linux/notifier.h  198  #define NETLINK_URELEASE 0x0001
KBD_KEYCODE  macro  include/linux/notifier.h  203  #define KBD_KEYCODE 0x0001
KBD_UNBOUND_KEYCODE  macro  include/linux/notifier.h  204  #define KBD_UNBOUND_KEYCODE 0x0002
KBD_UNICODE  macro  include/linux/notifier.h  205  #define KBD_UNICODE 0x0003
KBD_KEYSYM  macro  include/linux/notifier.h  206  #define KBD_KEYSYM 0x0004
KBD_POST_KEYSYM  macro  include/linux/notifier.h  207  #define KBD_POST_KEYSYM 0x0005
_LINUX_RANDOM_H  macro  include/linux/random.h  8  #define _LINUX_RANDOM_H
RNDGETENTCNT  macro  include/linux/random.h  17  #define RNDGETENTCNT _IOR( 'R',0x00,int )
RNDADDTOENTCNT  macro  include/linux/random.h  20  #define RNDADDTOENTCNT _IOW( 'R',0x01,int )
RNDGETPOOL  macro  include/linux/random.h  23  #define RNDGETPOOL _IOR( 'R',0x02,int [2] )
RNDADDENTROPY  macro  include/linux/random.h  29  #define RNDADDENTROPY _IOW( 'R',0x03,int [2] )
RNDZAPENTCNT  macro  include/linux/random.h  32  #define RNDZAPENTCNT _IO( 'R',0x04 )
RNDCLEARPOOL  macro  include/linux/random.h  35  #define RNDCLEARPOOL _IO( 'R',0x06 )
rand_pool_info  struct  include/linux/random.h  37  struct rand_pool_info { int entropy_count; int buf_size; __u32 buf[0]; };
rnd_state  struct  include/linux/random.h  43  struct rnd_state { __u32 s1, s2, s3; };
add_device_randomness  prototype  include/linux/random.h  51  extern void add_device_randomness(const void *,unsigned int);
add_input_randomness  prototype  include/linux/random.h  52  extern void add_input_randomness(unsigned int type,unsigned int code,unsigned int value);
add_interrupt_randomness  prototype  include/linux/random.h  54  extern void add_interrupt_randomness(int irq,int irq_flags);
get_random_bytes  prototype  include/linux/random.h  56  extern void get_random_bytes(void *buf,int nbytes);
get_random_bytes_arch  prototype  include/linux/random.h  57  extern void get_random_bytes_arch(void *buf,int nbytes);
generate_random_uuid  prototype  include/linux/random.h  58  void generate_random_uuid(unsigned char uuid_out[16]);
get_random_int  prototype  include/linux/random.h  64  unsigned int get_random_int(void);
randomize_range  prototype  include/linux/random.h  65  unsigned long randomize_range(unsigned long start,unsigned long end,unsigned long len);
random32  prototype  include/linux/random.h  67  u32 random32(void);
srandom32  prototype  include/linux/random.h  68  void srandom32(u32 seed);
prandom32  prototype  include/linux/random.h  70  u32 prandom32(struct rnd_state *);
__seed  function  include/linux/random.h  75  static inline u32 __seed(u32 x,u32 m)
prandom32_seed  function  include/linux/random.h  85  static inline void prandom32_seed(struct rnd_state *state,u64 seed)
arch_get_random_long  function  include/linux/random.h  97  static inline int arch_get_random_long(unsigned long *v)
arch_get_random_int  function  include/linux/random.h  101  static inline int arch_get_random_int(unsigned int *v)
_ASM_X86_UNALIGNED_H  macro  arch/x86/include/asm/unaligned.h  2  #define _ASM_X86_UNALIGNED_H
get_unaligned  macro  arch/x86/include/asm/unaligned.h  11  #define get_unaligned __get_unaligned_le
put_unaligned  macro  arch/x86/include/asm/unaligned.h  12  #define put_unaligned __put_unaligned_le
LINUX_KMEMCHECK_H  macro  include/linux/kmemcheck.h  2  #define LINUX_KMEMCHECK_H
kmemcheck_alloc_shadow  function  include/linux/kmemcheck.h  93  kmemcheck_alloc_shadow(struct page *page,int order,gfp_t flags,int node)
kmemcheck_free_shadow  function  include/linux/kmemcheck.h  98  kmemcheck_free_shadow(struct page *page,int order)
kmemcheck_slab_alloc  function  include/linux/kmemcheck.h  103  kmemcheck_slab_alloc(struct kmem_cache *s,gfp_t gfpflags,void *object,size_t size)
kmemcheck_slab_free  function  include/linux/kmemcheck.h  108  static inline void kmemcheck_slab_free(struct kmem_cache *s,void *object,size_t size)
kmemcheck_pagealloc_alloc  function  include/linux/kmemcheck.h  113  static inline void kmemcheck_pagealloc_alloc(struct page *p,unsigned int order, gfp_t gfpflags)
kmemcheck_show_pages  prototype  include/linux/kmemcheck.h  20  void kmemcheck_show_pages(struct page *p,unsigned int n);
kmemcheck_hide_pages  prototype  include/linux/kmemcheck.h  21  void kmemcheck_hide_pages(struct page *p,unsigned int n);
kmemcheck_page_is_tracked  function  include/linux/kmemcheck.h  118  static inline bool kmemcheck_page_is_tracked(struct page *p)
kmemcheck_mark_unallocated  function  include/linux/kmemcheck.h  123  static inline void kmemcheck_mark_unallocated(void *address,unsigned int n)
kmemcheck_mark_uninitialized  function  include/linux/kmemcheck.h  127  static inline void kmemcheck_mark_uninitialized(void *address,unsigned int n)
kmemcheck_mark_initialized  function  include/linux/kmemcheck.h  131  static inline void kmemcheck_mark_initialized(void *address,unsigned int n)
kmemcheck_mark_freed  function  include/linux/kmemcheck.h  135  static inline void kmemcheck_mark_freed(void *address,unsigned int n)
kmemcheck_mark_unallocated_pages  function  include/linux/kmemcheck.h  139  static inline void kmemcheck_mark_unallocated_pages(struct page *p,unsigned int n)
kmemcheck_mark_uninitialized_pages  function  include/linux/kmemcheck.h  144  static inline void kmemcheck_mark_uninitialized_pages(struct page *p,unsigned int n)
kmemcheck_mark_initialized_pages  function  include/linux/kmemcheck.h  149  static inline void kmemcheck_mark_initialized_pages(struct page *p,unsigned int n)
kmemcheck_show_addr  prototype  include/linux/kmemcheck.h  34  int kmemcheck_show_addr(unsigned long address);
kmemcheck_hide_addr  prototype  include/linux/kmemcheck.h  35  int kmemcheck_hide_addr(unsigned long address);
kmemcheck_is_obj_initialized  function  include/linux/kmemcheck.h  154  static inline bool kmemcheck_is_obj_initialized(unsigned long addr,size_t size)
kmemcheck_bitfield_begin  macro  include/linux/kmemcheck.h  159  #define kmemcheck_bitfield_begin(name)
kmemcheck_bitfield_end  macro  include/linux/kmemcheck.h  160  #define kmemcheck_bitfield_end(name)
kmemcheck_annotate_bitfield  macro  include/linux/kmemcheck.h  161  #define kmemcheck_annotate_bitfield(ptr,name) do { } while (0)
kmemcheck_annotate_variable  macro  include/linux/kmemcheck.h  165  #define kmemcheck_annotate_variable(var) do { } while (0)
kmemcheck_enabled  macro  include/linux/kmemcheck.h  90  #define kmemcheck_enabled 0
_ASM_X86_TYPES_H  macro  arch/x86/include/asm/types.h  2  #define _ASM_X86_TYPES_H
_LINUX_NET_H  macro  include/linux/net.h  19  #define _LINUX_NET_H
NPROTO  macro  include/linux/net.h  24  #define NPROTO AF_MAX
SYS_SOCKET  macro  include/linux/net.h  26  #define SYS_SOCKET 1
SYS_BIND  macro  include/linux/net.h  27  #define SYS_BIND 2
SYS_CONNECT  macro  include/linux/net.h  28  #define SYS_CONNECT 3
SYS_LISTEN  macro  include/linux/net.h  29  #define SYS_LISTEN 4
SYS_ACCEPT  macro  include/linux/net.h  30  #define SYS_ACCEPT 5
SYS_GETSOCKNAME  macro  include/linux/net.h  31  #define SYS_GETSOCKNAME 6
SYS_GETPEERNAME  macro  include/linux/net.h  32  #define SYS_GETPEERNAME 7
SYS_SOCKETPAIR  macro  include/linux/net.h  33  #define SYS_SOCKETPAIR 8
SYS_SEND  macro  include/linux/net.h  34  #define SYS_SEND 9
SYS_RECV  macro  include/linux/net.h  35  #define SYS_RECV 10
SYS_SENDTO  macro  include/linux/net.h  36  #define SYS_SENDTO 11
SYS_RECVFROM  macro  include/linux/net.h  37  #define SYS_RECVFROM 12
SYS_SHUTDOWN  macro  include/linux/net.h  38  #define SYS_SHUTDOWN 13
SYS_SETSOCKOPT  macro  include/linux/net.h  39  #define SYS_SETSOCKOPT 14
SYS_GETSOCKOPT  macro  include/linux/net.h  40  #define SYS_GETSOCKOPT 15
SYS_SENDMSG  macro  include/linux/net.h  41  #define SYS_SENDMSG 16
SYS_RECVMSG  macro  include/linux/net.h  42  #define SYS_RECVMSG 17
SYS_ACCEPT4  macro  include/linux/net.h  43  #define SYS_ACCEPT4 18
SYS_RECVMMSG  macro  include/linux/net.h  44  #define SYS_RECVMMSG 19
SYS_SENDMMSG  macro  include/linux/net.h  45  #define SYS_SENDMMSG 20
socket_state  enum  include/linux/net.h  47  typedef enum { SS_FREE = 0, SS_UNCONNECTED, SS_CONNECTING, SS_CONNECTED, SS_DISCONNECTING } socket_state;
__SO_ACCEPTCON  macro  include/linux/net.h  55  #define __SO_ACCEPTCON (1 << 16)
SOCK_ASYNC_NOSPACE  macro  include/linux/net.h  70  #define SOCK_ASYNC_NOSPACE 0
SOCK_ASYNC_WAITDATA  macro  include/linux/net.h  71  #define SOCK_ASYNC_WAITDATA 1
SOCK_NOSPACE  macro  include/linux/net.h  72  #define SOCK_NOSPACE 2
SOCK_PASSCRED  macro  include/linux/net.h  73  #define SOCK_PASSCRED 3
SOCK_PASSSEC  macro  include/linux/net.h  74  #define SOCK_PASSSEC 4
SOCK_EXTERNALLY_ALLOCATED  macro  include/linux/net.h  75  #define SOCK_EXTERNALLY_ALLOCATED 5
sock_type  enum  include/linux/net.h  93  enum sock_type { SOCK_STREAM = 1, SOCK_DGRAM = 2, SOCK_RAW = 3, SOCK_RDM = 4, SOCK_SEQPACKET = 5, SOCK_DCCP = 6, SOCK_PACKET = 10, };
SOCK_MAX  macro  include/linux/net.h  103  #define SOCK_MAX (SOCK_PACKET + 1)
SOCK_TYPE_MASK  macro  include/linux/net.h  106  #define SOCK_TYPE_MASK 0xf
SOCK_CLOEXEC  macro  include/linux/net.h  109  #define SOCK_CLOEXEC O_CLOEXEC
SOCK_NONBLOCK  macro  include/linux/net.h  111  #define SOCK_NONBLOCK O_NONBLOCK
sock_shutdown_cmd  enum  include/linux/net.h  116  enum sock_shutdown_cmd { SHUT_RD = 0, SHUT_WR = 1, SHUT_RDWR = 2, };
socket_wq  struct  include/linux/net.h  122  struct socket_wq { wait_queue_head_t wait; struct fasync_struct *fasync_list; struct rcu_head rcu; } ____cacheline_aligned_in_smp;
socket  struct  include/linux/net.h  139  struct socket { socket_state state; kmemcheck_bitfield_begin(type); short type; kmemcheck_bitfield_end(type); unsigned long flags; struct socket_wq __rcu *wq; struct file *file; struct sock *sk; const struct proto_ops *ops; };
proto_ops  struct  include/linux/net.h  162  struct proto_ops { int family; struct module *owner; int (*release) (struct socket *sock); int (*bind) (struct socket *sock,struct sockaddr *myaddr,int sockaddr_len); int (*connect) (struct socket *sock,struct sockaddr *vaddr,int sockaddr_len, int flags); int (*socketpair)(struct socket *sock1,struct socket *sock2); int (*accept) (struct socket *sock,struct socket *newsock, int flags); int (*getname) (struct socket *sock,struct sockaddr *addr,int *sockaddr_len, int peer); unsigned int (*poll) (struct file *file, struct socket *sock,struct poll_table_struct *wait); int (*ioctl) (struct socket *sock, unsigned int cmd,unsigned long arg); int (*compat_ioctl) (struct socket *sock, unsigned int cmd,unsigned long arg); int (*listen) (struct socket *sock, int len); int (*shutdown) (struct socket *sock, int flags); int (*setsockopt)(struct socket *sock, int level,int optname, char __user *optval, unsigned int optlen); int (*getsockopt)(struct socket *sock, int level,int optname, char __user *optval, int __user *optlen); int (*compat_setsockopt)(struct socket *sock, int level,int optname, char __user *optval, unsigned int optlen); int (*compat_getsockopt)(struct socket *sock, int level,int optname, char __user *optval, int __user *optlen); int (*sendmsg) (struct kiocb *iocb, struct socket *sock,struct msghdr *m, size_t total_len); int (*recvmsg) (struct kiocb *iocb, struct socket *sock,struct msghdr *m, size_t total_len,int flags); int (*mmap) (struct file *file, struct socket *sock,struct vm_area_struct * vma); ssize_t (*sendpage) (struct socket *sock, struct page *page,int offset, size_t size, int flags); ssize_t (*splice_read)(struct socket *sock, loff_t *ppos,struct pipe_inode_info *pipe, size_t len, unsigned int flags); void (*set_peek_off)(struct sock *sk, int val); };
DECLARE_SOCKADDR  macro  include/linux/net.h  213  #define DECLARE_SOCKADDR(type,dst,src) type dst = ({ __sockaddr_check_size(sizeof(*dst)); (type) src; })
net_proto_family  struct  include/linux/net.h  216  struct net_proto_family { int family; int (*create)(struct net *net, struct socket *sock,int protocol, int kern); struct module *owner; };
sock_wake_async  prototype  include/linux/net.h  233  extern int sock_wake_async(struct socket *sk,int how,int band);
sock_register  prototype  include/linux/net.h  234  extern int sock_register(const struct net_proto_family *fam);
sock_unregister  prototype  include/linux/net.h  235  extern void sock_unregister(int family);
__sock_create  prototype  include/linux/net.h  236  extern int __sock_create(struct net *net,int family,int type,int proto,struct socket **res, int kern);
sock_create  prototype  include/linux/net.h  238  extern int sock_create(int family,int type,int proto,struct socket **res);
sock_create_kern  prototype  include/linux/net.h  240  extern int sock_create_kern(int family,int type,int proto,struct socket **res);
sock_create_lite  prototype  include/linux/net.h  242  extern int sock_create_lite(int family,int type,int proto,struct socket **res);
sock_release  prototype  include/linux/net.h  244  extern void sock_release(struct socket *sock);
sock_sendmsg  prototype  include/linux/net.h  245  extern int sock_sendmsg(struct socket *sock,struct msghdr *msg,size_t len);
sock_recvmsg  prototype  include/linux/net.h  247  extern int sock_recvmsg(struct socket *sock,struct msghdr *msg,size_t size, int flags);
sock_map_fd  prototype  include/linux/net.h  249  extern int sock_map_fd(struct socket *sock,int flags);
sockfd_lookup  prototype  include/linux/net.h  250  extern struct socket *sockfd_lookup(int fd,int *err);
sockfd_put  macro  include/linux/net.h  251  #define sockfd_put(sock) fput(sock->file)
net_ratelimit  prototype  include/linux/net.h  252  extern int net_ratelimit(void);
net_ratelimited_function  macro  include/linux/net.h  254  #define net_ratelimited_function(function,...) do { if (net_ratelimit()) function(__VA_ARGS__); } while (0)
net_emerg_ratelimited  macro  include/linux/net.h  260  #define net_emerg_ratelimited(fmt,...) net_ratelimited_function(pr_emerg, fmt, ##__VA_ARGS__)
net_alert_ratelimited  macro  include/linux/net.h  262  #define net_alert_ratelimited(fmt,...) net_ratelimited_function(pr_alert, fmt, ##__VA_ARGS__)
net_crit_ratelimited  macro  include/linux/net.h  264  #define net_crit_ratelimited(fmt,...) net_ratelimited_function(pr_crit, fmt, ##__VA_ARGS__)
net_err_ratelimited  macro  include/linux/net.h  266  #define net_err_ratelimited(fmt,...) net_ratelimited_function(pr_err, fmt, ##__VA_ARGS__)
net_notice_ratelimited  macro  include/linux/net.h  268  #define net_notice_ratelimited(fmt,...) net_ratelimited_function(pr_notice, fmt, ##__VA_ARGS__)
net_warn_ratelimited  macro  include/linux/net.h  270  #define net_warn_ratelimited(fmt,...) net_ratelimited_function(pr_warn, fmt, ##__VA_ARGS__)
net_info_ratelimited  macro  include/linux/net.h  272  #define net_info_ratelimited(fmt,...) net_ratelimited_function(pr_info, fmt, ##__VA_ARGS__)
net_dbg_ratelimited  macro  include/linux/net.h  274  #define net_dbg_ratelimited(fmt,...) net_ratelimited_function(pr_debug, fmt, ##__VA_ARGS__)
net_random  macro  include/linux/net.h  277  #define net_random() random32()
net_srandom  macro  include/linux/net.h  278  #define net_srandom(seed) srandom32((__force u32)seed)
kernel_sendmsg  prototype  include/linux/net.h  280  extern int kernel_sendmsg(struct socket *sock,struct msghdr *msg,struct kvec *vec, size_t num, size_t len);
kernel_recvmsg  prototype  include/linux/net.h  282  extern int kernel_recvmsg(struct socket *sock,struct msghdr *msg,struct kvec *vec, size_t num,size_t len, int flags);
kernel_bind  prototype  include/linux/net.h  286  extern int kernel_bind(struct socket *sock,struct sockaddr *addr,int addrlen);
kernel_listen  prototype  include/linux/net.h  288  extern int kernel_listen(struct socket *sock,int backlog);
kernel_accept  prototype  include/linux/net.h  289  extern int kernel_accept(struct socket *sock,struct socket **newsock,int flags);
kernel_connect  prototype  include/linux/net.h  291  extern int kernel_connect(struct socket *sock,struct sockaddr *addr,int addrlen, int flags);
kernel_getsockname  prototype  include/linux/net.h  293  extern int kernel_getsockname(struct socket *sock,struct sockaddr *addr,int *addrlen);
kernel_getpeername  prototype  include/linux/net.h  295  extern int kernel_getpeername(struct socket *sock,struct sockaddr *addr,int *addrlen);
kernel_getsockopt  prototype  include/linux/net.h  297  extern int kernel_getsockopt(struct socket *sock,int level,int optname,char *optval, int *optlen);
kernel_setsockopt  prototype  include/linux/net.h  299  extern int kernel_setsockopt(struct socket *sock,int level,int optname,char *optval, unsigned int optlen);
kernel_sendpage  prototype  include/linux/net.h  301  extern int kernel_sendpage(struct socket *sock,struct page *page,int offset,size_t size, int flags);
kernel_sock_ioctl  prototype  include/linux/net.h  303  extern int kernel_sock_ioctl(struct socket *sock,int cmd,unsigned long arg);
kernel_sock_shutdown  prototype  include/linux/net.h  304  extern int kernel_sock_shutdown(struct socket *sock,enum sock_shutdown_cmd how);
MODULE_ALIAS_NETPROTO  macro  include/linux/net.h  307  #define MODULE_ALIAS_NETPROTO(proto) MODULE_ALIAS("net-pf-" __stringify(proto))
MODULE_ALIAS_NET_PF_PROTO  macro  include/linux/net.h  310  #define MODULE_ALIAS_NET_PF_PROTO(pf,proto) MODULE_ALIAS("net-pf-" __stringify(pf) "-proto-" __stringify(proto))
MODULE_ALIAS_NET_PF_PROTO_TYPE  macro  include/linux/net.h  313  #define MODULE_ALIAS_NET_PF_PROTO_TYPE(pf,proto,type) MODULE_ALIAS("net-pf-" __stringify(pf) "-proto-" __stringify(proto) "-type-" __stringify(type))
MODULE_ALIAS_NET_PF_PROTO_NAME  macro  include/linux/net.h  317  #define MODULE_ALIAS_NET_PF_PROTO_NAME(pf,proto,name) MODULE_ALIAS("net-pf-" __stringify(pf) "-proto-" __stringify(proto) name)
__LINUX_TEXTSEARCH_H  macro  include/linux/textsearch.h  2  #define __LINUX_TEXTSEARCH_H
TS_AUTOLOAD  macro  include/linux/textsearch.h  14  #define TS_AUTOLOAD 1
TS_IGNORECASE  macro  include/linux/textsearch.h  15  #define TS_IGNORECASE 2
ts_state  struct  include/linux/textsearch.h  22  struct ts_state { unsigned int offset; char cb[40]; };
ts_ops  struct  include/linux/textsearch.h  38  struct ts_ops { const char *name; struct ts_config * (*init)(const void *, unsigned int, gfp_t, int); unsigned int (*find)(struct ts_config *,struct ts_state *); void (*destroy)(struct ts_config *); void * (*get_pattern)(struct ts_config *); unsigned int (*get_pattern_len)(struct ts_config *); struct module *owner; struct list_head list; };
ts_config  struct  include/linux/textsearch.h  58  struct ts_config { struct ts_ops *ops; int flags; unsigned int (*get_next_block)(unsigned int consumed,const u8 **dst,struct ts_config *conf,struct ts_state *state); void (*finish)(struct ts_config *conf,struct ts_state *state); };
textsearch_next  function  include/linux/textsearch.h  104  static inline unsigned int textsearch_next(struct ts_config *conf,struct ts_state *state)
textsearch_find  function  include/linux/textsearch.h  123  static inline unsigned int textsearch_find(struct ts_config *conf,struct ts_state *state)
textsearch_get_pattern  function  include/linux/textsearch.h  134  static inline void *textsearch_get_pattern(struct ts_config *conf)
textsearch_get_pattern_len  function  include/linux/textsearch.h  143  static inline unsigned int textsearch_get_pattern_len(struct ts_config *conf)
textsearch_register  prototype  include/linux/textsearch.h  148  extern int textsearch_register(struct ts_ops *);
textsearch_unregister  prototype  include/linux/textsearch.h  149  extern int textsearch_unregister(struct ts_ops *);
textsearch_prepare  prototype  include/linux/textsearch.h  150  extern struct ts_config *textsearch_prepare(const char *,const void *,unsigned int, gfp_t, int);
textsearch_destroy  prototype  include/linux/textsearch.h  152  extern void textsearch_destroy(struct ts_config *conf);
textsearch_find_continuous  prototype  include/linux/textsearch.h  153  extern unsigned int textsearch_find_continuous(struct ts_config *,struct ts_state *,const void *, unsigned int);
TS_PRIV_ALIGNTO  macro  include/linux/textsearch.h  158  #define TS_PRIV_ALIGNTO 8
TS_PRIV_ALIGN  macro  include/linux/textsearch.h  159  #define TS_PRIV_ALIGN(len) (((len) + TS_PRIV_ALIGNTO-1) & ~(TS_PRIV_ALIGNTO-1))
alloc_ts_config  function  include/linux/textsearch.h  161  static inline struct ts_config *alloc_ts_config(size_t payload,gfp_t gfp_mask)
ts_config_priv  function  include/linux/textsearch.h  173  static inline void *ts_config_priv(struct ts_config *conf)
_CHECKSUM_H  macro  include/net/checksum.h  20  #define _CHECKSUM_H
csum_and_copy_from_user  function  include/net/checksum.h  30  __wsum csum_and_copy_from_user (const void __user *src,void *dst,int len, __wsum sum, int *err_ptr)
csum_and_copy_to_user  function  include/net/checksum.h  44  static __inline__ __wsum csum_and_copy_to_user
csum_add  function  include/net/checksum.h  60  static inline __wsum csum_add(__wsum csum,__wsum addend)
csum_sub  function  include/net/checksum.h  67  static inline __wsum csum_sub(__wsum csum,__wsum addend)
csum_block_add  function  include/net/checksum.h  73  csum_block_add(__wsum csum,__wsum csum2,int offset)
csum_block_sub  function  include/net/checksum.h  82  csum_block_sub(__wsum csum,__wsum csum2,int offset)
csum_unfold  function  include/net/checksum.h  90  static inline __wsum csum_unfold(__sum16 n)
CSUM_MANGLED_0  macro  include/net/checksum.h  95  #define CSUM_MANGLED_0 ((__force __sum16)0xffff)
csum_replace4  function  include/net/checksum.h  97  static inline void csum_replace4(__sum16 *sum,__be32 from,__be32 to)
csum_replace2  function  include/net/checksum.h  104  static inline void csum_replace2(__sum16 *sum,__be16 from,__be16 to)
inet_proto_csum_replace4  prototype  include/net/checksum.h  110  extern void inet_proto_csum_replace4(__sum16 *sum,struct sk_buff *skb,__be32 from, __be32 to, int pseudohdr);
inet_proto_csum_replace2  function  include/net/checksum.h  113  static inline void inet_proto_csum_replace2(__sum16 *sum,struct sk_buff *skb,__be16 from, __be16 to,int pseudohdr)
_LINUX_DMA_MAPPING_H  macro  include/linux/dma-mapping.h  2  #define _LINUX_DMA_MAPPING_H
dma_map_ops  struct  include/linux/dma-mapping.h  11  struct dma_map_ops { void* (*alloc)(struct device *dev, size_t size,dma_addr_t *dma_handle, gfp_t gfp,struct dma_attrs *attrs); void (*free)(struct device *dev, size_t size,void *vaddr, dma_addr_t dma_handle,struct dma_attrs *attrs); int (*mmap)(struct device *, struct vm_area_struct *,void *, dma_addr_t, size_t, struct dma_attrs *attrs); dma_addr_t (*map_page)(struct device *dev, struct page *page,unsigned long offset, size_t size,enum dma_data_direction dir,struct dma_attrs *attrs); void (*unmap_page)(struct device *dev, dma_addr_t dma_handle,size_t size, enum dma_data_direction dir,struct dma_attrs *attrs); int (*map_sg)(struct device *dev, struct scatterlist *sg,int nents, enum dma_data_direction dir,struct dma_attrs *attrs); void (*unmap_sg)(struct device *dev,struct scatterlist *sg, int nents,enum dma_data_direction dir,struct dma_attrs *attrs); void (*sync_single_for_cpu)(struct device *dev,dma_addr_t dma_handle, size_t size,enum dma_data_direction dir); void (*sync_single_for_device)(struct device *dev,dma_addr_t dma_handle, size_t size,enum dma_data_direction dir); void (*sync_sg_for_cpu)(struct device *dev,struct scatterlist *sg, int nents,enum dma_data_direction dir); void (*sync_sg_for_device)(struct device *dev,struct scatterlist *sg, int nents,enum dma_data_direction dir); int (*mapping_error)(struct device *dev, dma_addr_t dma_addr); int (*dma_supported)(struct device *dev, u64 mask); int (*set_dma_mask)(struct device *dev, u64 mask); u64 (*get_required_mask)(struct device *dev); int is_phys; };
DMA_BIT_MASK  macro  include/linux/dma-mapping.h  56  #define DMA_BIT_MASK(n) (((n) == 64) ? ~0ULL : ((1ULL<<(n))-1))
DMA_MASK_NONE  macro  include/linux/dma-mapping.h  58  #define DMA_MASK_NONE 0x0ULL
valid_dma_direction  function  include/linux/dma-mapping.h  60  static inline int valid_dma_direction(int dma_direction)
is_device_dma_capable  function  include/linux/dma-mapping.h  67  static inline int is_device_dma_capable(struct device *dev)
dma_get_mask  function  include/linux/dma-mapping.h  78  static inline u64 dma_get_mask(struct device *dev)
dma_set_coherent_mask  function  include/linux/dma-mapping.h  88  static inline int dma_set_coherent_mask(struct device *dev,u64 mask)
dma_get_required_mask  prototype  include/linux/dma-mapping.h  97  extern u64 dma_get_required_mask(struct device *dev);
dma_get_max_seg_size  function  include/linux/dma-mapping.h  99  static inline unsigned int dma_get_max_seg_size(struct device *dev)
dma_set_max_seg_size  function  include/linux/dma-mapping.h  104  static inline unsigned int dma_set_max_seg_size(struct device *dev,unsigned int size)
dma_get_seg_boundary  function  include/linux/dma-mapping.h  114  static inline unsigned long dma_get_seg_boundary(struct device *dev)
dma_set_seg_boundary  function  include/linux/dma-mapping.h  120  static inline int dma_set_seg_boundary(struct device *dev,unsigned long mask)
dma_zalloc_coherent  function  include/linux/dma-mapping.h  129  static inline void *dma_zalloc_coherent(struct device *dev,size_t size,dma_addr_t *dma_handle, gfp_t flag)
dma_get_cache_alignment  prototype  include/asm-generic/dma-mapping-broken.h  73  dma_get_cache_alignment(void);
DMA_MEMORY_MAP  macro  include/linux/dma-mapping.h  149  #define DMA_MEMORY_MAP 0x01
DMA_MEMORY_IO  macro  include/linux/dma-mapping.h  150  #define DMA_MEMORY_IO 0x02
DMA_MEMORY_INCLUDES_CHILDREN  macro  include/linux/dma-mapping.h  151  #define DMA_MEMORY_INCLUDES_CHILDREN 0x04
DMA_MEMORY_EXCLUSIVE  macro  include/linux/dma-mapping.h  152  #define DMA_MEMORY_EXCLUSIVE 0x08
dma_declare_coherent_memory  function  include/linux/dma-mapping.h  156  dma_declare_coherent_memory(struct device *dev,dma_addr_t bus_addr,dma_addr_t device_addr, size_t size, int flags)
dma_release_declared_memory  function  include/linux/dma-mapping.h  163  dma_release_declared_memory(struct device *dev)
dma_mark_declared_memory_occupied  function  include/linux/dma-mapping.h  168  dma_mark_declared_memory_occupied(struct device *dev,dma_addr_t device_addr, size_t size)
dmam_alloc_coherent  prototype  include/linux/dma-mapping.h  178  extern void *dmam_alloc_coherent(struct device *dev,size_t size,dma_addr_t *dma_handle, gfp_t gfp);
dmam_free_coherent  prototype  include/linux/dma-mapping.h  180  extern void dmam_free_coherent(struct device *dev,size_t size,void *vaddr,dma_addr_t dma_handle);
dmam_alloc_noncoherent  prototype  include/linux/dma-mapping.h  182  extern void *dmam_alloc_noncoherent(struct device *dev,size_t size,dma_addr_t *dma_handle, gfp_t gfp);
dmam_free_noncoherent  prototype  include/linux/dma-mapping.h  184  extern void dmam_free_noncoherent(struct device *dev,size_t size,void *vaddr,dma_addr_t dma_handle);
dmam_declare_coherent_memory  function  include/linux/dma-mapping.h  192  static inline int dmam_declare_coherent_memory(struct device *dev,dma_addr_t bus_addr, dma_addr_t device_addr,size_t size, gfp_t gfp)
dmam_release_declared_memory  function  include/linux/dma-mapping.h  199  static inline void dmam_release_declared_memory(struct device *dev)
dma_map_single_attrs  macro  include/linux/dma-mapping.h  207  #define dma_map_single_attrs(dev,cpu_addr,size,dir,attrs) dma_map_single(dev, cpu_addr, size, dir)
dma_unmap_single_attrs  macro  include/linux/dma-mapping.h  210  #define dma_unmap_single_attrs(dev,dma_addr,size,dir,attrs) dma_unmap_single(dev, dma_addr, size, dir)
dma_map_sg_attrs  macro  include/linux/dma-mapping.h  213  #define dma_map_sg_attrs(dev,sgl,nents,dir,attrs) dma_map_sg(dev, sgl, nents, dir)
dma_unmap_sg_attrs  macro  include/linux/dma-mapping.h  216  #define dma_unmap_sg_attrs(dev,sgl,nents,dir,attrs) dma_unmap_sg(dev, sgl, nents, dir)
DEFINE_DMA_UNMAP_ADDR  macro  include/linux/dma-mapping.h  229  #define DEFINE_DMA_UNMAP_ADDR(ADDR_NAME)
DEFINE_DMA_UNMAP_LEN  macro  include/linux/dma-mapping.h  230  #define DEFINE_DMA_UNMAP_LEN(LEN_NAME)
dma_unmap_addr  macro  include/linux/dma-mapping.h  231  #define dma_unmap_addr(PTR,ADDR_NAME) (0)
dma_unmap_addr_set  macro  include/linux/dma-mapping.h  232  #define dma_unmap_addr_set(PTR,ADDR_NAME,VAL) do { } while (0)
dma_unmap_len  macro  include/linux/dma-mapping.h  233  #define dma_unmap_len(PTR,LEN_NAME) (0)
dma_unmap_len_set  macro  include/linux/dma-mapping.h  234  #define dma_unmap_len_set(PTR,LEN_NAME,VAL) do { } while (0)
_LINUX_BH_H  macro  include/linux/bottom_half.h  2  #define _LINUX_BH_H
local_bh_disable  prototype  include/linux/bottom_half.h  4  extern void local_bh_disable(void);
_local_bh_enable  prototype  include/linux/bottom_half.h  5  extern void _local_bh_enable(void);
local_bh_enable  prototype  include/linux/bottom_half.h  6  extern void local_bh_enable(void);
local_bh_enable_ip  prototype  include/linux/bottom_half.h  7  extern void local_bh_enable_ip(unsigned long ip);
_ASM_X86_BARRIER_H  macro  arch/x86/include/asm/barrier.h  2  #define _ASM_X86_BARRIER_H
mb  macro  arch/x86/include/asm/barrier.h  22  #define mb() asm volatile("mfence":::"memory")
rmb  macro  arch/x86/include/asm/barrier.h  23  #define rmb() asm volatile("lfence":::"memory")
wmb  macro  arch/x86/include/asm/barrier.h  24  #define wmb() asm volatile("sfence" ::: "memory")
read_barrier_depends  macro  arch/x86/include/asm/barrier.h  79  #define read_barrier_depends() do { } while (0)
smp_mb  macro  arch/x86/include/asm/barrier.h  96  #define smp_mb() barrier()
smp_rmb  macro  arch/x86/include/asm/barrier.h  97  #define smp_rmb() barrier()
smp_wmb  macro  arch/x86/include/asm/barrier.h  98  #define smp_wmb() barrier()
smp_read_barrier_depends  macro  arch/x86/include/asm/barrier.h  99  #define smp_read_barrier_depends() do { } while (0)
set_mb  macro  arch/x86/include/asm/barrier.h  100  #define set_mb(var,value) do { var = value; barrier(); } while (0)
rdtsc_barrier  function  arch/x86/include/asm/barrier.h  110  static __always_inline void rdtsc_barrier(void)
__LINUX_SPINLOCK_TYPES_H  macro  include/linux/spinlock_types.h  2  #define __LINUX_SPINLOCK_TYPES_H
raw_spinlock  struct  include/linux/spinlock_types.h  20  typedef struct raw_spinlock { arch_spinlock_t raw_lock; unsigned int break_lock; unsigned int magic, owner_cpu; void *owner; struct lockdep_map dep_map; } raw_spinlock_t;
raw_spinlock_t  struct  include/linux/spinlock_types.h  20  typedef struct raw_spinlock { arch_spinlock_t raw_lock; unsigned int break_lock; unsigned int magic, owner_cpu; void *owner; struct lockdep_map dep_map; } raw_spinlock_t;
SPINLOCK_MAGIC  macro  include/linux/spinlock_types.h  34  #define SPINLOCK_MAGIC 0xdead4ead
SPINLOCK_OWNER_INIT  macro  include/linux/spinlock_types.h  36  #define SPINLOCK_OWNER_INIT ((void *)-1L)
SPIN_DEP_MAP_INIT  macro  include/linux/spinlock_types.h  41  # define SPIN_DEP_MAP_INIT(lockname)
SPIN_DEBUG_INIT  macro  include/linux/spinlock_types.h  50  # define SPIN_DEBUG_INIT(lockname)
__RAW_SPIN_LOCK_INITIALIZER  macro  include/linux/spinlock_types.h  53  #define __RAW_SPIN_LOCK_INITIALIZER(lockname) { .raw_lock = __ARCH_SPIN_LOCK_UNLOCKED, SPIN_DEBUG_INIT(lockname) SPIN_DEP_MAP_INIT(lockname) }
__RAW_SPIN_LOCK_UNLOCKED  macro  include/linux/spinlock_types.h  59  #define __RAW_SPIN_LOCK_UNLOCKED(lockname) (raw_spinlock_t) __RAW_SPIN_LOCK_INITIALIZER(lockname)
DEFINE_RAW_SPINLOCK  macro  include/linux/spinlock_types.h  62  #define DEFINE_RAW_SPINLOCK(x) raw_spinlock_t x = __RAW_SPIN_LOCK_UNLOCKED(x)
spinlock  struct  include/linux/spinlock_types.h  64  typedef struct spinlock { struct raw_spinlock rlock; # define LOCK_PADSIZE (offsetof(struct raw_spinlock, dep_map)) struct { u8 __padding[LOCK_PADSIZE]; struct lockdep_map dep_map; }; } spinlock_t;
spinlock_t  struct  include/linux/spinlock_types.h  64  typedef struct spinlock { struct raw_spinlock rlock; # define LOCK_PADSIZE (offsetof(struct raw_spinlock, dep_map)) struct { u8 __padding[LOCK_PADSIZE]; struct lockdep_map dep_map; }; } spinlock_t;
__SPIN_LOCK_INITIALIZER  macro  include/linux/spinlock_types.h  78  #define __SPIN_LOCK_INITIALIZER(lockname) { { .rlock = __RAW_SPIN_LOCK_INITIALIZER(lockname) } }
__SPIN_LOCK_UNLOCKED  macro  include/linux/spinlock_types.h  81  #define __SPIN_LOCK_UNLOCKED(lockname) (spinlock_t ) __SPIN_LOCK_INITIALIZER(lockname)
DEFINE_SPINLOCK  macro  include/linux/spinlock_types.h  84  #define DEFINE_SPINLOCK(x) spinlock_t x = __SPIN_LOCK_UNLOCKED(x)
_ASM_X86_SPINLOCK_H  macro  arch/x86/include/asm/spinlock.h  2  #define _ASM_X86_SPINLOCK_H
LOCK_PTR_REG  macro  arch/x86/include/asm/spinlock.h  24  # define LOCK_PTR_REG "D"
UNLOCK_LOCK_PREFIX  macro  arch/x86/include/asm/spinlock.h  35  # define UNLOCK_LOCK_PREFIX
__ticket_spin_lock  function  arch/x86/include/asm/spinlock.h  51  static __always_inline void __ticket_spin_lock(arch_spinlock_t *lock)
__ticket_spin_trylock  function  arch/x86/include/asm/spinlock.h  66  static __always_inline int __ticket_spin_trylock(arch_spinlock_t *lock)
__ticket_spin_unlock  function  arch/x86/include/asm/spinlock.h  80  static __always_inline void __ticket_spin_unlock(arch_spinlock_t *lock)
__ticket_spin_is_locked  function  arch/x86/include/asm/spinlock.h  85  static inline int __ticket_spin_is_locked(arch_spinlock_t *lock)
__ticket_spin_is_contended  function  arch/x86/include/asm/spinlock.h  92  static inline int __ticket_spin_is_contended(arch_spinlock_t *lock)
arch_spin_is_locked  function  arch/x86/include/asm/paravirt.h  754  static inline int arch_spin_is_locked(struct arch_spinlock *lock)
arch_spin_is_contended  macro  arch/x86/include/asm/paravirt.h  763  #define arch_spin_is_contended arch_spin_is_contended
arch_spin_lock  function  arch/x86/include/asm/paravirt.h  765  static __always_inline void arch_spin_lock(struct arch_spinlock *lock)
arch_spin_trylock  function  arch/x86/include/asm/paravirt.h  776  static __always_inline int arch_spin_trylock(struct arch_spinlock *lock)
arch_spin_unlock  function  arch/x86/include/asm/paravirt.h  781  static __always_inline void arch_spin_unlock(struct arch_spinlock *lock)
arch_spin_lock_flags  function  arch/x86/include/asm/paravirt.h  770  static __always_inline void arch_spin_lock_flags(struct arch_spinlock *lock,unsigned long flags)
arch_spin_unlock_wait  macro  include/linux/spinlock_up.h  75  #define arch_spin_unlock_wait(lock) do { cpu_relax(); } while (arch_spin_is_locked(lock))
arch_read_can_lock  macro  include/linux/spinlock_up.h  72  #define arch_read_can_lock(lock) (((void)(lock),1))
arch_write_can_lock  macro  include/linux/spinlock_up.h  73  #define arch_write_can_lock(lock) (((void)(lock),1))
arch_read_lock  macro  include/linux/spinlock_up.h  54  #define arch_read_lock(lock) do { (void)(lock); } while (0)
arch_write_lock  macro  include/linux/spinlock_up.h  55  #define arch_write_lock(lock) do { (void)(lock); } while (0)
arch_read_trylock  macro  include/linux/spinlock_up.h  56  #define arch_read_trylock(lock) ({ (void)(lock); 1; })
arch_write_trylock  macro  include/linux/spinlock_up.h  57  #define arch_write_trylock(lock) ({ (void)(lock); 1; })
arch_read_unlock  macro  include/linux/spinlock_up.h  58  #define arch_read_unlock(lock) do { (void)(lock); } while (0)
arch_write_unlock  macro  include/linux/spinlock_up.h  59  #define arch_write_unlock(lock) do { (void)(lock); } while (0)
arch_read_lock_flags  macro  arch/x86/include/asm/spinlock.h  224  #define arch_read_lock_flags(lock,flags) arch_read_lock(lock)
arch_write_lock_flags  macro  arch/x86/include/asm/spinlock.h  225  #define arch_write_lock_flags(lock,flags) arch_write_lock(lock)
READ_LOCK_SIZE  macro  arch/x86/include/asm/spinlock.h  227  #undef READ_LOCK_SIZE
READ_LOCK_ATOMIC  macro  arch/x86/include/asm/spinlock.h  228  #undef READ_LOCK_ATOMIC
WRITE_LOCK_ADD  macro  arch/x86/include/asm/spinlock.h  229  #undef WRITE_LOCK_ADD
WRITE_LOCK_SUB  macro  arch/x86/include/asm/spinlock.h  230  #undef WRITE_LOCK_SUB
WRITE_LOCK_CMP  macro  arch/x86/include/asm/spinlock.h  231  #undef WRITE_LOCK_CMP
arch_spin_relax  macro  arch/x86/include/asm/spinlock.h  233  #define arch_spin_relax(lock) cpu_relax()
arch_read_relax  macro  arch/x86/include/asm/spinlock.h  234  #define arch_read_relax(lock) cpu_relax()
arch_write_relax  macro  arch/x86/include/asm/spinlock.h  235  #define arch_write_relax(lock) cpu_relax()
ARCH_HAS_SMP_MB_AFTER_LOCK  macro  arch/x86/include/asm/spinlock.h  239  #define ARCH_HAS_SMP_MB_AFTER_LOCK
__LINUX_SPINLOCK_UP_H  macro  include/linux/spinlock_up.h  2  #define __LINUX_SPINLOCK_UP_H
__LINUX_RWLOCK_H  macro  include/linux/rwlock.h  2  #define __LINUX_RWLOCK_H
__rwlock_init  prototype  include/linux/rwlock.h  18  extern void __rwlock_init(rwlock_t *lock,const char *name,struct lock_class_key *key);
rwlock_init  macro  include/linux/rwlock.h  27  # define rwlock_init(lock) do { *(lock) = __RW_LOCK_UNLOCKED(lock); } while (0)
do_raw_read_lock_flags  macro  include/linux/rwlock.h  42  # define do_raw_read_lock_flags(lock,flags) do {__acquire(lock); arch_read_lock_flags(&(lock)->raw_lock, *(flags)); } while (0)
do_raw_read_trylock  macro  include/linux/rwlock.h  44  # define do_raw_read_trylock(rwlock) arch_read_trylock(&(rwlock)->raw_lock)
do_raw_write_lock_flags  macro  include/linux/rwlock.h  47  # define do_raw_write_lock_flags(lock,flags) do {__acquire(lock); arch_write_lock_flags(&(lock)->raw_lock, *(flags)); } while (0)
do_raw_write_trylock  macro  include/linux/rwlock.h  49  # define do_raw_write_trylock(rwlock) arch_write_trylock(&(rwlock)->raw_lock)
do_raw_read_lock  macro  include/linux/rwlock.h  41  # define do_raw_read_lock(rwlock) do {__acquire(lock); arch_read_lock(&(rwlock)->raw_lock); } while (0)
do_raw_read_unlock  macro  include/linux/rwlock.h  45  # define do_raw_read_unlock(rwlock) do {arch_read_unlock(&(rwlock)->raw_lock); __release(lock); } while (0)
do_raw_write_lock  macro  include/linux/rwlock.h  46  # define do_raw_write_lock(rwlock) do {__acquire(lock); arch_write_lock(&(rwlock)->raw_lock); } while (0)
do_raw_write_unlock  macro  include/linux/rwlock.h  50  # define do_raw_write_unlock(rwlock) do {arch_write_unlock(&(rwlock)->raw_lock); __release(lock); } while (0)
read_can_lock  macro  include/linux/rwlock.h  53  #define read_can_lock(rwlock) arch_read_can_lock(&(rwlock)->raw_lock)
write_can_lock  macro  include/linux/rwlock.h  54  #define write_can_lock(rwlock) arch_write_can_lock(&(rwlock)->raw_lock)
read_trylock  macro  include/linux/rwlock.h  61  #define read_trylock(lock) __cond_lock(lock,_raw_read_trylock(lock))
write_trylock  macro  include/linux/rwlock.h  62  #define write_trylock(lock) __cond_lock(lock,_raw_write_trylock(lock))
write_lock  macro  include/linux/rwlock.h  64  #define write_lock(lock) _raw_write_lock(lock)
read_lock  macro  include/linux/rwlock.h  65  #define read_lock(lock) _raw_read_lock(lock)
read_lock_irqsave  macro  include/linux/rwlock.h  82  #define read_lock_irqsave(lock,flags) do { typecheck(unsigned long, flags); _raw_read_lock_irqsave(lock, flags); } while (0)
write_lock_irqsave  macro  include/linux/rwlock.h  87  #define write_lock_irqsave(lock,flags) do { typecheck(unsigned long, flags); _raw_write_lock_irqsave(lock, flags); } while (0)
read_lock_irq  macro  include/linux/rwlock.h  95  #define read_lock_irq(lock) _raw_read_lock_irq(lock)
read_lock_bh  macro  include/linux/rwlock.h  96  #define read_lock_bh(lock) _raw_read_lock_bh(lock)
write_lock_irq  macro  include/linux/rwlock.h  97  #define write_lock_irq(lock) _raw_write_lock_irq(lock)
write_lock_bh  macro  include/linux/rwlock.h  98  #define write_lock_bh(lock) _raw_write_lock_bh(lock)
read_unlock  macro  include/linux/rwlock.h  99  #define read_unlock(lock) _raw_read_unlock(lock)
write_unlock  macro  include/linux/rwlock.h  100  #define write_unlock(lock) _raw_write_unlock(lock)
read_unlock_irq  macro  include/linux/rwlock.h  101  #define read_unlock_irq(lock) _raw_read_unlock_irq(lock)
write_unlock_irq  macro  include/linux/rwlock.h  102  #define write_unlock_irq(lock) _raw_write_unlock_irq(lock)
read_unlock_irqrestore  macro  include/linux/rwlock.h  104  #define read_unlock_irqrestore(lock,flags) do { typecheck(unsigned long, flags); _raw_read_unlock_irqrestore(lock, flags); } while (0)
read_unlock_bh  macro  include/linux/rwlock.h  109  #define read_unlock_bh(lock) _raw_read_unlock_bh(lock)
write_unlock_irqrestore  macro  include/linux/rwlock.h  111  #define write_unlock_irqrestore(lock,flags) do { typecheck(unsigned long, flags); _raw_write_unlock_irqrestore(lock, flags); } while (0)
write_unlock_bh  macro  include/linux/rwlock.h  116  #define write_unlock_bh(lock) _raw_write_unlock_bh(lock)
write_trylock_irqsave  macro  include/linux/rwlock.h  118  #define write_trylock_irqsave(lock,flags) ({ local_irq_save(flags); write_trylock(lock) ? 1 : ({ local_irq_restore(flags); 0; }); })
__LINUX_SPINLOCK_API_SMP_H  macro  include/linux/spinlock_api_smp.h  2  #define __LINUX_SPINLOCK_API_SMP_H
in_lock_functions  macro  include/linux/spinlock_api_up.h  17  #define in_lock_functions(ADDR) 0
assert_raw_spin_locked  macro  include/linux/spinlock_api_up.h  19  #define assert_raw_spin_locked(lock) do { (void)(lock); } while (0)
_raw_spin_trylock  macro  include/linux/spinlock_api_up.h  65  #define _raw_spin_trylock(lock) ({ __LOCK(lock); 1; })
_raw_spin_trylock_bh  macro  include/linux/spinlock_api_up.h  68  #define _raw_spin_trylock_bh(lock) ({ __LOCK_BH(lock); 1; })
_raw_spin_lock  macro  include/linux/spinlock_api_up.h  52  #define _raw_spin_lock(lock) __LOCK(lock)
_raw_spin_lock_bh  macro  include/linux/spinlock_api_up.h  56  #define _raw_spin_lock_bh(lock) __LOCK_BH(lock)
_raw_spin_lock_irq  macro  include/linux/spinlock_api_up.h  59  #define _raw_spin_lock_irq(lock) __LOCK_IRQ(lock)
_raw_spin_lock_irqsave  macro  include/linux/spinlock_api_up.h  62  #define _raw_spin_lock_irqsave(lock,flags) __LOCK_IRQSAVE(lock,flags)
_raw_spin_unlock  macro  include/linux/spinlock_api_up.h  69  #define _raw_spin_unlock(lock) __UNLOCK(lock)
_raw_spin_unlock_bh  macro  include/linux/spinlock_api_up.h  72  #define _raw_spin_unlock_bh(lock) __UNLOCK_BH(lock)
_raw_spin_unlock_irq  macro  include/linux/spinlock_api_up.h  75  #define _raw_spin_unlock_irq(lock) __UNLOCK_IRQ(lock)
_raw_spin_unlock_irqrestore  macro  include/linux/spinlock_api_up.h  78  #define _raw_spin_unlock_irqrestore(lock,flags) __UNLOCK_IRQRESTORE(lock, flags)
__raw_spin_trylock  function  include/linux/spinlock_api_smp.h  86  static inline int __raw_spin_trylock(raw_spinlock_t *lock)
__raw_spin_lock_irqsave  function  include/linux/spinlock_api_smp.h  104  static inline unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
__raw_spin_lock_irq  function  include/linux/spinlock_api_smp.h  124  static inline void __raw_spin_lock_irq(raw_spinlock_t *lock)
__raw_spin_lock_bh  function  include/linux/spinlock_api_smp.h  132  static inline void __raw_spin_lock_bh(raw_spinlock_t *lock)
__raw_spin_lock  function  include/linux/spinlock_api_smp.h  140  static inline void __raw_spin_lock(raw_spinlock_t *lock)
__raw_spin_unlock  function  include/linux/spinlock_api_smp.h  149  static inline void __raw_spin_unlock(raw_spinlock_t *lock)
__raw_spin_unlock_irqrestore  function  include/linux/spinlock_api_smp.h  156  static inline void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,unsigned long flags)
__raw_spin_unlock_irq  function  include/linux/spinlock_api_smp.h  165  static inline void __raw_spin_unlock_irq(raw_spinlock_t *lock)
__raw_spin_unlock_bh  function  include/linux/spinlock_api_smp.h  173  static inline void __raw_spin_unlock_bh(raw_spinlock_t *lock)
__raw_spin_trylock_bh  function  include/linux/spinlock_api_smp.h  181  static inline int __raw_spin_trylock_bh(raw_spinlock_t *lock)
__LINUX_SPINLOCK_API_UP_H  macro  include/linux/spinlock_api_up.h  2  #define __LINUX_SPINLOCK_API_UP_H
__LOCK  macro  include/linux/spinlock_api_up.h  27  #define __LOCK(lock) do { preempt_disable(); __acquire(lock); (void)(lock); } while (0)
__LOCK_BH  macro  include/linux/spinlock_api_up.h  30  #define __LOCK_BH(lock) do { local_bh_disable(); __LOCK(lock); } while (0)
__LOCK_IRQ  macro  include/linux/spinlock_api_up.h  33  #define __LOCK_IRQ(lock) do { local_irq_disable(); __LOCK(lock); } while (0)
__LOCK_IRQSAVE  macro  include/linux/spinlock_api_up.h  36  #define __LOCK_IRQSAVE(lock,flags) do { local_irq_save(flags); __LOCK(lock); } while (0)
__UNLOCK  macro  include/linux/spinlock_api_up.h  39  #define __UNLOCK(lock) do { preempt_enable(); __release(lock); (void)(lock); } while (0)
__UNLOCK_BH  macro  include/linux/spinlock_api_up.h  42  #define __UNLOCK_BH(lock) do { preempt_enable_no_resched(); local_bh_enable(); __release(lock); (void)(lock); } while (0)
__UNLOCK_IRQ  macro  include/linux/spinlock_api_up.h  46  #define __UNLOCK_IRQ(lock) do { local_irq_enable(); __UNLOCK(lock); } while (0)
__UNLOCK_IRQRESTORE  macro  include/linux/spinlock_api_up.h  49  #define __UNLOCK_IRQRESTORE(lock,flags) do { local_irq_restore(flags); __UNLOCK(lock); } while (0)
_raw_spin_lock_nested  macro  include/linux/spinlock_api_up.h  53  #define _raw_spin_lock_nested(lock,subclass) __LOCK(lock)
_raw_read_lock  macro  include/linux/rwlock_api_smp.h  44  #define _raw_read_lock(lock) __raw_read_lock(lock)
_raw_write_lock  macro  include/linux/rwlock_api_smp.h  48  #define _raw_write_lock(lock) __raw_write_lock(lock)
_raw_read_lock_bh  macro  include/linux/rwlock_api_smp.h  52  #define _raw_read_lock_bh(lock) __raw_read_lock_bh(lock)
_raw_write_lock_bh  macro  include/linux/rwlock_api_smp.h  56  #define _raw_write_lock_bh(lock) __raw_write_lock_bh(lock)
_raw_read_lock_irq  macro  include/linux/rwlock_api_smp.h  60  #define _raw_read_lock_irq(lock) __raw_read_lock_irq(lock)
_raw_write_lock_irq  macro  include/linux/rwlock_api_smp.h  64  #define _raw_write_lock_irq(lock) __raw_write_lock_irq(lock)
_raw_read_lock_irqsave  macro  include/linux/rwlock_api_smp.h  68  #define _raw_read_lock_irqsave(lock) __raw_read_lock_irqsave(lock)
_raw_write_lock_irqsave  macro  include/linux/rwlock_api_smp.h  72  #define _raw_write_lock_irqsave(lock) __raw_write_lock_irqsave(lock)
_raw_read_trylock  macro  include/linux/rwlock_api_smp.h  76  #define _raw_read_trylock(lock) __raw_read_trylock(lock)
_raw_write_trylock  macro  include/linux/rwlock_api_smp.h  80  #define _raw_write_trylock(lock) __raw_write_trylock(lock)
_raw_read_unlock  macro  include/linux/rwlock_api_smp.h  84  #define _raw_read_unlock(lock) __raw_read_unlock(lock)
_raw_write_unlock  macro  include/linux/rwlock_api_smp.h  88  #define _raw_write_unlock(lock) __raw_write_unlock(lock)
_raw_write_unlock_bh  macro  include/linux/rwlock_api_smp.h  96  #define _raw_write_unlock_bh(lock) __raw_write_unlock_bh(lock)
_raw_read_unlock_bh  macro  include/linux/rwlock_api_smp.h  92  #define _raw_read_unlock_bh(lock) __raw_read_unlock_bh(lock)
_raw_read_unlock_irq  macro  include/linux/rwlock_api_smp.h  100  #define _raw_read_unlock_irq(lock) __raw_read_unlock_irq(lock)
_raw_write_unlock_irq  macro  include/linux/rwlock_api_smp.h  104  #define _raw_write_unlock_irq(lock) __raw_write_unlock_irq(lock)
_raw_read_unlock_irqrestore  macro  include/linux/rwlock_api_smp.h  108  #define _raw_read_unlock_irqrestore(lock,flags) __raw_read_unlock_irqrestore(lock, flags)
_raw_write_unlock_irqrestore  macro  include/linux/rwlock_api_smp.h  113  #define _raw_write_unlock_irqrestore(lock,flags) __raw_write_unlock_irqrestore(lock, flags)
_ASM_X86_BITOPS_H  macro  arch/x86/include/asm/bitops.h  2  #define _ASM_X86_BITOPS_H
BIT_64  macro  arch/x86/include/asm/bitops.h  18  #define BIT_64(n) (U64_C(1) << (n))
BITOP_ADDR  macro  arch/x86/include/asm/bitops.h  33  #define BITOP_ADDR(x) "+m" (*(volatile long *) (x))
ADDR  macro  arch/x86/include/asm/bitops.h  385  #undef ADDR
IS_IMMEDIATE  macro  arch/x86/include/asm/bitops.h  42  #define IS_IMMEDIATE(nr) (__builtin_constant_p(nr))
CONST_MASK_ADDR  macro  arch/x86/include/asm/bitops.h  43  #define CONST_MASK_ADDR(nr,addr) BITOP_ADDR((void *)(addr) + ((nr)>>3))
CONST_MASK  macro  arch/x86/include/asm/bitops.h  44  #define CONST_MASK(nr) (1 << ((nr) & 7))
set_bit  function  arch/x86/include/asm/bitops.h  62  set_bit(unsigned int nr,volatile unsigned long *addr)
__set_bit  function  arch/x86/include/asm/bitops.h  84  static inline void __set_bit(int nr,volatile unsigned long *addr)
clear_bit  function  arch/x86/include/asm/bitops.h  100  clear_bit(int nr,volatile unsigned long *addr)
clear_bit_unlock  function  arch/x86/include/asm/bitops.h  121  static inline void clear_bit_unlock(unsigned nr,volatile unsigned long *addr)
__clear_bit  function  arch/x86/include/asm/bitops.h  127  static inline void __clear_bit(int nr,volatile unsigned long *addr)
__clear_bit_unlock  function  arch/x86/include/asm/bitops.h  144  static inline void __clear_bit_unlock(unsigned nr,volatile unsigned long *addr)
smp_mb__before_clear_bit  macro  arch/x86/include/asm/bitops.h  150  #define smp_mb__before_clear_bit() barrier()
smp_mb__after_clear_bit  macro  arch/x86/include/asm/bitops.h  151  #define smp_mb__after_clear_bit() barrier()
__change_bit  function  arch/x86/include/asm/bitops.h  162  static inline void __change_bit(int nr,volatile unsigned long *addr)
change_bit  function  arch/x86/include/asm/bitops.h  176  static inline void change_bit(int nr,volatile unsigned long *addr)
test_and_set_bit  function  arch/x86/include/asm/bitops.h  197  static inline int test_and_set_bit(int nr,volatile unsigned long *addr)
test_and_set_bit_lock  function  arch/x86/include/asm/bitops.h  215  test_and_set_bit_lock(int nr,volatile unsigned long *addr)
__test_and_set_bit  function  arch/x86/include/asm/bitops.h  229  static inline int __test_and_set_bit(int nr,volatile unsigned long *addr)
test_and_clear_bit  function  arch/x86/include/asm/bitops.h  248  static inline int test_and_clear_bit(int nr,volatile unsigned long *addr)
__test_and_clear_bit  function  arch/x86/include/asm/bitops.h  268  static inline int __test_and_clear_bit(int nr,volatile unsigned long *addr)
__test_and_change_bit  function  arch/x86/include/asm/bitops.h  280  static inline int __test_and_change_bit(int nr,volatile unsigned long *addr)
test_and_change_bit  function  arch/x86/include/asm/bitops.h  300  static inline int test_and_change_bit(int nr,volatile unsigned long *addr)
constant_test_bit  function  arch/x86/include/asm/bitops.h  311  static __always_inline int constant_test_bit(unsigned int nr,const volatile unsigned long *addr)
variable_test_bit  function  arch/x86/include/asm/bitops.h  317  static inline int variable_test_bit(int nr,volatile const unsigned long *addr)
test_bit  macro  arch/x86/include/asm/bitops.h  338  #define test_bit(nr,addr) (__builtin_constant_p((nr)) ? constant_test_bit((nr), (addr)) : variable_test_bit((nr), (addr)))
__ffs  function  arch/x86/include/asm/bitops.h  349  static inline unsigned long __ffs(unsigned long word)
ffz  function  arch/x86/include/asm/bitops.h  363  static inline unsigned long ffz(unsigned long word)
__fls  function  arch/x86/include/asm/bitops.h  377  static inline unsigned long __fls(unsigned long word)
ffs  function  arch/x86/include/asm/bitops.h  399  static inline int ffs(int x)
fls  function  arch/x86/include/asm/bitops.h  441  static inline int fls(int x)
fls64  function  include/asm-generic/bitops/fls64.h  26  static __always_inline int fls64(__u64 x)
ARCH_HAS_FAST_MULTIPLIER  macro  arch/x86/include/asm/bitops.h  505  #define ARCH_HAS_FAST_MULTIPLIER 1
_ASM_X86_IO_H  macro  arch/x86/include/asm/io.h  2  #define _ASM_X86_IO_H
ARCH_HAS_IOREMAP_WC  macro  arch/x86/include/asm/io.h  37  #define ARCH_HAS_IOREMAP_WC
build_mmio_read  macro  arch/x86/include/asm/io.h  43  #define build_mmio_read(name,size,type,reg,barrier) static inline type name(const volatile void __iomem *addr) { type ret; asm volatile("mov" size " %1,%0":reg (ret) :"m" (*(volatile type __force *)addr) barrier); return ret; }
build_mmio_write  macro  arch/x86/include/asm/io.h  48  #define build_mmio_write(name,size,type,reg,barrier) static inline void name(type val, volatile void __iomem *addr) { asm volatile("mov" size " %0,%1": :reg (val), "m" (*(volatile type __force *)addr) barrier); }
readb_relaxed  macro  arch/x86/include/asm/io.h  69  #define readb_relaxed(a) __readb(a)
readw_relaxed  macro  arch/x86/include/asm/io.h  70  #define readw_relaxed(a) __readw(a)
readl_relaxed  macro  arch/x86/include/asm/io.h  71  #define readl_relaxed(a) __readl(a)
__raw_readb  macro  arch/x86/include/asm/io.h  72  #define __raw_readb __readb
__raw_readw  macro  arch/x86/include/asm/io.h  73  #define __raw_readw __readw
__raw_readl  macro  arch/x86/include/asm/io.h  74  #define __raw_readl __readl
__raw_writeb  macro  arch/x86/include/asm/io.h  76  #define __raw_writeb __writeb
__raw_writew  macro  arch/x86/include/asm/io.h  77  #define __raw_writew __writew
__raw_writel  macro  arch/x86/include/asm/io.h  78  #define __raw_writel __writel
mmiowb  macro  arch/x86/include/asm/io.h  80  #define mmiowb() barrier()
readq_relaxed  macro  arch/x86/include/asm/io.h  87  #define readq_relaxed(a) readq(a)
__raw_readq  macro  arch/x86/include/asm/io.h  89  #define __raw_readq(a) readq(a)
__raw_writeq  macro  arch/x86/include/asm/io.h  90  #define __raw_writeq(val,addr) writeq(val,addr)
readq  macro  arch/x86/include/asm/io.h  93  #define readq readq
writeq  macro  arch/x86/include/asm/io.h  94  #define writeq writeq
virt_to_phys  function  arch/x86/include/asm/io.h  111  static inline phys_addr_t virt_to_phys(volatile void *address)
phys_to_virt  function  arch/x86/include/asm/io.h  129  static inline void *phys_to_virt(phys_addr_t address)
page_to_phys  macro  arch/x86/include/asm/io.h  137  #define page_to_phys(page) ((dma_addr_t)page_to_pfn(page) << PAGE_SHIFT)
isa_virt_to_bus  function  arch/x86/include/asm/io.h  144  static inline unsigned int isa_virt_to_bus(volatile void *address)
isa_page_to_bus  macro  arch/x86/include/asm/io.h  148  #define isa_page_to_bus(page) ((unsigned int)page_to_phys(page))
isa_bus_to_virt  macro  arch/x86/include/asm/io.h  149  #define isa_bus_to_virt phys_to_virt
virt_to_bus  macro  arch/x86/include/asm/io.h  157  #define virt_to_bus virt_to_phys
bus_to_virt  macro  arch/x86/include/asm/io.h  158  #define bus_to_virt phys_to_virt
ioremap_nocache  prototype  arch/x86/include/asm/io.h  174  extern void __iomem *ioremap_nocache(resource_size_t offset,unsigned long size);
ioremap_cache  prototype  arch/x86/include/asm/io.h  175  extern void __iomem *ioremap_cache(resource_size_t offset,unsigned long size);
ioremap_prot  prototype  arch/x86/include/asm/io.h  176  extern void __iomem *ioremap_prot(resource_size_t offset,unsigned long size,unsigned long prot_val);
ioremap  function  arch/x86/include/asm/io.h  182  static inline void __iomem *ioremap(resource_size_t offset,unsigned long size)
iounmap  prototype  arch/x86/include/asm/io.h  187  extern void iounmap(volatile void __iomem *addr);
set_iounmap_nonlazy  prototype  arch/x86/include/asm/io.h  189  extern void set_iounmap_nonlazy(void);
xlate_dev_kmem_ptr  macro  arch/x86/include/asm/io.h  200  #define xlate_dev_kmem_ptr(p) p
memset_io  function  arch/x86/include/asm/io.h  203  memset_io(volatile void __iomem *addr,unsigned char val,size_t count)
memcpy_fromio  function  arch/x86/include/asm/io.h  209  memcpy_fromio(void *dst,const volatile void __iomem *src,size_t count)
memcpy_toio  function  arch/x86/include/asm/io.h  215  memcpy_toio(volatile void __iomem *dst,const void *src,size_t count)
__ISA_IO_base  macro  arch/x86/include/asm/io.h  228  #define __ISA_IO_base ((char __iomem *)(PAGE_OFFSET))
flush_write_buffers  function  arch/x86/include/asm/io.h  238  static inline void flush_write_buffers(void)
native_io_delay  prototype  arch/x86/include/asm/io.h  247  extern void native_io_delay(void);
io_delay_init  prototype  arch/x86/include/asm/io.h  250  extern void io_delay_init(void);
slow_down_io  function  arch/x86/include/asm/paravirt.h  349  static inline void slow_down_io(void)
BUILDIO  macro  arch/x86/include/asm/io.h  268  #define BUILDIO(bwl,bw,type) static inline void out##bwl(unsigned type value, int port) { asm volatile("out" #bwl " %" #bw "0, %w1" : : "a"(value), "Nd"(port)); } static inline unsigned type in##bwl(int port) { unsigned type value; asm volatile("in" #bwl " %w1, %" #bw "0" : "=a"(value) : "Nd"(port)); return value; } static inline void out##bwl##_p(unsigned type value, int port) { out##bwl(value, port); slow_down_io(); } static inline unsigned type in##bwl##_p(int port) { unsigned type value = in##bwl(port); slow_down_io(); return value; } static inline void outs##bwl(int port, const void *addr, unsigned long count) { asm volatile("rep; outs" #bwl : "+S"(addr), "+c"(count) : "d"(port)); } static inline void ins##bwl(int port, void *addr, unsigned long count) { asm volatile("rep; ins" #bwl : "+D"(addr), "+c"(count) : "d"(port)); }
xlate_dev_mem_ptr  prototype  arch/x86/include/asm/io.h  312  extern void *xlate_dev_mem_ptr(unsigned long phys);
unxlate_dev_mem_ptr  prototype  arch/x86/include/asm/io.h  313  extern void unxlate_dev_mem_ptr(unsigned long phys,void *addr);
ioremap_change_attr  prototype  arch/x86/include/asm/io.h  315  extern int ioremap_change_attr(unsigned long vaddr,unsigned long size,unsigned long prot_val);
ioremap_wc  macro  include/asm-generic/iomap.h  66  #define ioremap_wc ioremap_nocache
early_ioremap_init  prototype  arch/x86/include/asm/io.h  324  extern void early_ioremap_init(void);
early_ioremap_reset  prototype  arch/x86/include/asm/io.h  325  extern void early_ioremap_reset(void);
early_ioremap  prototype  arch/x86/include/asm/io.h  326  extern void __iomem *early_ioremap(resource_size_t phys_addr,unsigned long size);
early_memremap  prototype  arch/x86/include/asm/io.h  328  extern void __iomem *early_memremap(resource_size_t phys_addr,unsigned long size);
early_iounmap  prototype  arch/x86/include/asm/io.h  330  extern void early_iounmap(void __iomem *addr,unsigned long size);
fixup_early_ioremap  prototype  arch/x86/include/asm/io.h  331  extern void fixup_early_ioremap(void);
is_early_ioremap_ptep  prototype  arch/x86/include/asm/io.h  332  extern bool is_early_ioremap_ptep(pte_t *ptep);
xen_biovec_phys_mergeable  prototype  arch/x86/include/asm/io.h  338  extern bool xen_biovec_phys_mergeable(const struct bio_vec *vec1,const struct bio_vec *vec2);
BIOVEC_PHYS_MERGEABLE  macro  arch/x86/include/asm/io.h  341  #define BIOVEC_PHYS_MERGEABLE(vec1,vec2) (__BIOVEC_PHYS_MERGEABLE(vec1, vec2) && (!xen_domain() || xen_biovec_phys_mergeable(vec1, vec2)))
IO_SPACE_LIMIT  macro  arch/x86/include/asm/io.h  346  #define IO_SPACE_LIMIT 0xffff
_ASM_X86_UACCESS_H  macro  arch/x86/include/asm/uaccess.h  2  #define _ASM_X86_UACCESS_H
VERIFY_READ  macro  arch/x86/include/asm/uaccess.h  13  #define VERIFY_READ 0
VERIFY_WRITE  macro  arch/x86/include/asm/uaccess.h  14  #define VERIFY_WRITE 1
MAKE_MM_SEG  macro  arch/x86/include/asm/uaccess.h  24  #define MAKE_MM_SEG(s) ((mm_segment_t) { (s) })
KERNEL_DS  macro  arch/x86/include/asm/uaccess.h  26  #define KERNEL_DS MAKE_MM_SEG(-1UL)
USER_DS  macro  arch/x86/include/asm/uaccess.h  27  #define USER_DS MAKE_MM_SEG(TASK_SIZE_MAX)
get_ds  macro  arch/x86/include/asm/uaccess.h  29  #define get_ds() (KERNEL_DS)
get_fs  macro  arch/x86/include/asm/uaccess.h  30  #define get_fs() (current_thread_info()->addr_limit)
set_fs  macro  arch/x86/include/asm/uaccess.h  31  #define set_fs(x) (current_thread_info()->addr_limit = (x))
segment_eq  macro  arch/x86/include/asm/uaccess.h  33  #define segment_eq(a,b) ((a).seg == (b).seg)
user_addr_max  macro  arch/x86/include/asm/uaccess.h  35  #define user_addr_max() (current_thread_info()->addr_limit.seg)
__addr_ok  macro  arch/x86/include/asm/uaccess.h  36  #define __addr_ok(addr) ((unsigned long __force)(addr) < user_addr_max())
__range_not_ok  macro  arch/x86/include/asm/uaccess.h  49  #define __range_not_ok(addr,size,limit) ({ unsigned long flag, roksum; __chk_user_ptr(addr); asm("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0" : "=&r" (flag), "=r" (roksum) : "1" (addr), "g" ((long)(size)), "rm" (limit)); flag; })
access_ok  macro  arch/x86/include/asm/uaccess.h  79  #define access_ok(type,addr,size) (likely(__range_not_ok(addr, size, user_addr_max()) == 0))
exception_table_entry  struct  arch/x86/include/asm/uaccess.h  96  struct exception_table_entry { int insn, fixup; };
ARCH_HAS_SORT_EXTABLE  macro  arch/x86/include/asm/uaccess.h  100  #define ARCH_HAS_SORT_EXTABLE
ARCH_HAS_SEARCH_EXTABLE  macro  arch/x86/include/asm/uaccess.h  101  #define ARCH_HAS_SEARCH_EXTABLE
fixup_exception  prototype  arch/x86/include/asm/uaccess.h  103  extern int fixup_exception(struct pt_regs *regs);
early_fixup_exception  prototype  arch/x86/include/asm/uaccess.h  104  extern int early_fixup_exception(unsigned long *ip);
__get_user_1  prototype  arch/x86/include/asm/uaccess.h  121  extern int __get_user_1(void);
__get_user_2  prototype  arch/x86/include/asm/uaccess.h  122  extern int __get_user_2(void);
__get_user_4  prototype  arch/x86/include/asm/uaccess.h  123  extern int __get_user_4(void);
__get_user_8  macro  arch/x86/include/asm/uaccess.h  156  #define __get_user_8(__ret_gu,__val_gu,ptr) __get_user_x(8, __ret_gu, __val_gu, ptr)
__get_user_bad  prototype  arch/x86/include/asm/uaccess.h  125  extern int __get_user_bad(void);
__get_user_x  macro  arch/x86/include/asm/uaccess.h  127  #define __get_user_x(size,ret,x,ptr) asm volatile("call __get_user_" #size : "=a" (ret), "=d" (x) : "0" (ptr)) 
get_user  macro  arch/x86/include/asm/uaccess.h  160  #define get_user(x,ptr) ({ int __ret_gu; unsigned long __val_gu; __chk_user_ptr(ptr); might_fault(); switch (sizeof(*(ptr))) { case 1: __get_user_x(1, __ret_gu, __val_gu, ptr); break; case 2: __get_user_x(2, __ret_gu, __val_gu, ptr); break; case 4: __get_user_x(4, __ret_gu, __val_gu, ptr); break; case 8: __get_user_8(__ret_gu, __val_gu, ptr); break; default: __get_user_x(X, __ret_gu, __val_gu, ptr); break; } (x) = (__typeof__(*(ptr)))__val_gu; __ret_gu; })
__put_user_x  macro  arch/x86/include/asm/uaccess.h  187  #define __put_user_x(size,x,ptr,__ret_pu) asm volatile("call __put_user_" #size : "=a" (__ret_pu) : "0" ((typeof(*(ptr)))(x)), "c" (ptr) : "ebx")
__put_user_asm_u64  macro  arch/x86/include/asm/uaccess.h  219  #define __put_user_asm_u64(x,ptr,retval,errret) __put_user_asm(x, ptr, retval, "q", "", "er", errret)
__put_user_asm_ex_u64  macro  arch/x86/include/asm/uaccess.h  221  #define __put_user_asm_ex_u64(x,addr) __put_user_asm_ex(x, addr, "q", "", "er")
__put_user_x8  macro  arch/x86/include/asm/uaccess.h  223  #define __put_user_x8(x,ptr,__ret_pu) __put_user_x(8,x,ptr,__ret_pu)
__put_user_bad  prototype  arch/x86/include/asm/uaccess.h  226  extern void __put_user_bad(void);
__put_user_1  prototype  arch/x86/include/asm/uaccess.h  232  extern void __put_user_1(void);
__put_user_2  prototype  arch/x86/include/asm/uaccess.h  233  extern void __put_user_2(void);
__put_user_4  prototype  arch/x86/include/asm/uaccess.h  234  extern void __put_user_4(void);
__put_user_8  prototype  arch/x86/include/asm/uaccess.h  235  extern void __put_user_8(void);
put_user  macro  arch/x86/include/asm/uaccess.h  337  #define put_user(x,ptr) ({ int __ret_pu; __typeof__(*(ptr))__pus_tmp = x; __ret_pu = 0; if (unlikely(__copy_to_user_ll(ptr, &__pus_tmp, sizeof(*(ptr))) != 0)) __ret_pu = -EFAULT; __ret_pu; })
__put_user_size  macro  arch/x86/include/asm/uaccess.h  328  #define __put_user_size(x,ptr,size,retval,errret) do { __typeof__(*(ptr))__pus_tmp = x; retval = 0; if (unlikely(__copy_to_user_ll(ptr, &__pus_tmp, size) != 0)) retval = errret; } while (0)
__put_user_size_ex  macro  arch/x86/include/asm/uaccess.h  305  #define __put_user_size_ex(x,ptr,size) do { __chk_user_ptr(ptr); switch (size) { case 1: __put_user_asm_ex(x, ptr, "b", "b", "iq"); break; case 2: __put_user_asm_ex(x, ptr, "w", "w", "ir"); break; case 4: __put_user_asm_ex(x, ptr, "l", "k", "ir"); break; case 8: __put_user_asm_ex_u64((__typeof__(*ptr))(x), ptr); break; default: __put_user_bad(); } } while (0)
__get_user_asm_u64  macro  arch/x86/include/asm/uaccess.h  353  #define __get_user_asm_u64(x,ptr,retval,errret) __get_user_asm(x, ptr, retval, "q", "", "=r", errret)
__get_user_asm_ex_u64  macro  arch/x86/include/asm/uaccess.h  355  #define __get_user_asm_ex_u64(x,ptr) __get_user_asm_ex(x, ptr, "q", "", "=r")
__get_user_size  macro  arch/x86/include/asm/uaccess.h  359  #define __get_user_size(x,ptr,size,retval,errret) do { retval = 0; __chk_user_ptr(ptr); switch (size) { case 1: __get_user_asm(x, ptr, retval, "b", "b", "=q", errret); break; case 2: __get_user_asm(x, ptr, retval, "w", "w", "=r", errret); break; case 4: __get_user_asm(x, ptr, retval, "l", "k", "=r", errret); break; case 8: __get_user_asm_u64(x, ptr, retval, errret); break; default: (x) = __get_user_bad(); } } while (0)
__get_user_asm  macro  arch/x86/include/asm/uaccess.h  381  #define __get_user_asm(x,addr,err,itype,rtype,ltype,errret) asm volatile("1:	mov"itype" %2,%"rtype"1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor"itype" %"rtype"1,%"rtype"1\n" "	jmp 2b\n" ".previous\n" _ASM_EXTABLE(1b, 3b) : "=r" (err), ltype(x) : "m" (__m(addr)), "i" (errret), "0" (err))
__get_user_size_ex  macro  arch/x86/include/asm/uaccess.h  393  #define __get_user_size_ex(x,ptr,size) do { __chk_user_ptr(ptr); switch (size) { case 1: __get_user_asm_ex(x, ptr, "b", "b", "=q"); break; case 2: __get_user_asm_ex(x, ptr, "w", "w", "=r"); break; case 4: __get_user_asm_ex(x, ptr, "l", "k", "=r"); break; case 8: __get_user_asm_ex_u64(x, ptr); break; default: (x) = __get_user_bad(); } } while (0)
__get_user_asm_ex  macro  arch/x86/include/asm/uaccess.h  414  #define __get_user_asm_ex(x,addr,itype,rtype,ltype) asm volatile("1:	mov"itype" %1,%"rtype"0\n" "2:\n" _ASM_EXTABLE_EX(1b, 2b) : ltype(x) : "m" (__m(addr)))
__put_user_nocheck  macro  arch/x86/include/asm/uaccess.h  420  #define __put_user_nocheck(x,ptr,size) ({ int __pu_err; __put_user_size((x), (ptr), (size), __pu_err, -EFAULT); __pu_err; })
__get_user_nocheck  macro  arch/x86/include/asm/uaccess.h  427  #define __get_user_nocheck(x,ptr,size) ({ int __gu_err; unsigned long __gu_val; __get_user_size(__gu_val, (ptr), (size), __gu_err, -EFAULT); (x) = (__force __typeof__(*(ptr)))__gu_val; __gu_err; })
__large_struct  struct  arch/x86/include/asm/uaccess.h  437  struct __large_struct { unsigned long buf[100]; };
__m  macro  arch/x86/include/asm/uaccess.h  438  #define __m(x) (*(struct __large_struct __user *)(x))
__put_user_asm  macro  arch/x86/include/asm/uaccess.h  445  #define __put_user_asm(x,addr,err,itype,rtype,ltype,errret) asm volatile("1:	mov"itype" %"rtype"1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" _ASM_EXTABLE(1b, 3b) : "=r"(err) : ltype(x), "m" (__m(addr)), "i" (errret), "0" (err))
__put_user_asm_ex  macro  arch/x86/include/asm/uaccess.h  456  #define __put_user_asm_ex(x,addr,itype,rtype,ltype) asm volatile("1:	mov"itype" %"rtype"0,%1\n" "2:\n" _ASM_EXTABLE_EX(1b, 2b) : : ltype(x), "m" (__m(addr)))
uaccess_try  macro  arch/x86/include/asm/uaccess.h  465  #define uaccess_try do { int prev_err = current_thread_info()->uaccess_err; current_thread_info()->uaccess_err = 0; barrier();
uaccess_catch  macro  arch/x86/include/asm/uaccess.h  470  #define uaccess_catch(err) (err) |= (current_thread_info()->uaccess_err ? -EFAULT : 0); current_thread_info()->uaccess_err = prev_err; } while (0)
__get_user  macro  arch/x86/include/asm/uaccess.h  496  #define __get_user(x,ptr) __get_user_nocheck((x), (ptr), sizeof(*(ptr)))
__put_user  macro  arch/x86/include/asm/uaccess.h  519  #define __put_user(x,ptr) __put_user_nocheck((__typeof__(*(ptr)))(x), (ptr), sizeof(*(ptr)))
__get_user_unaligned  macro  arch/x86/include/asm/uaccess.h  522  #define __get_user_unaligned __get_user
__put_user_unaligned  macro  arch/x86/include/asm/uaccess.h  523  #define __put_user_unaligned __put_user
get_user_try  macro  arch/x86/include/asm/uaccess.h  532  #define get_user_try uaccess_try
get_user_catch  macro  arch/x86/include/asm/uaccess.h  533  #define get_user_catch(err) uaccess_catch(err)
get_user_ex  macro  arch/x86/include/asm/uaccess.h  535  #define get_user_ex(x,ptr) do { unsigned long __gue_val; __get_user_size_ex((__gue_val), (ptr), (sizeof(*(ptr)))); (x) = (__force __typeof__(*(ptr)))__gue_val; } while (0)
put_user_try  macro  arch/x86/include/asm/uaccess.h  551  #define put_user_try do { int __uaccess_err = 0;
put_user_catch  macro  arch/x86/include/asm/uaccess.h  554  #define put_user_catch(err) (err) |= __uaccess_err; } while (0)
put_user_ex  macro  arch/x86/include/asm/uaccess.h  558  #define put_user_ex(x,ptr) do { __uaccess_err |= __put_user(x, ptr); } while (0)
copy_from_user_nmi  prototype  arch/x86/include/asm/uaccess.h  565  copy_from_user_nmi(void *to,const void __user *from,unsigned long n);
strncpy_from_user  prototype  arch/x86/include/asm/uaccess.h  567  strncpy_from_user(char *dst,const char __user *src,long count);
strlen_user  prototype  arch/x86/include/asm/uaccess.h  569  extern __must_check long strlen_user(const char __user *str);
strnlen_user  prototype  arch/x86/include/asm/uaccess.h  570  extern __must_check long strnlen_user(const char __user *str,long n);
movsl_mask  struct  arch/x86/include/asm/uaccess.h  576  extern struct movsl_mask { int mask; } ____cacheline_aligned_in_smp movsl_mask;
ARCH_HAS_NOCACHE_UACCESS  macro  arch/x86/include/asm/uaccess.h  581  #define ARCH_HAS_NOCACHE_UACCESS 1
_ASM_X86_APICDEF_H  macro  arch/x86/include/asm/apicdef.h  2  #define _ASM_X86_APICDEF_H
IO_APIC_DEFAULT_PHYS_BASE  macro  arch/x86/include/asm/apicdef.h  11  #define IO_APIC_DEFAULT_PHYS_BASE 0xfec00000
APIC_DEFAULT_PHYS_BASE  macro  arch/x86/include/asm/apicdef.h  12  #define APIC_DEFAULT_PHYS_BASE 0xfee00000
IO_APIC_SLOT_SIZE  macro  arch/x86/include/asm/apicdef.h  18  #define IO_APIC_SLOT_SIZE 1024
APIC_ID  macro  arch/x86/include/asm/apicdef.h  20  #define APIC_ID 0x20
APIC_LVR  macro  arch/x86/include/asm/apicdef.h  22  #define APIC_LVR 0x30
APIC_LVR_MASK  macro  arch/x86/include/asm/apicdef.h  23  #define APIC_LVR_MASK 0xFF00FF
APIC_LVR_DIRECTED_EOI  macro  arch/x86/include/asm/apicdef.h  24  #define APIC_LVR_DIRECTED_EOI (1 << 24)
GET_APIC_VERSION  macro  arch/x86/include/asm/apicdef.h  25  #define GET_APIC_VERSION(x) ((x) & 0xFFu)
GET_APIC_MAXLVT  macro  arch/x86/include/asm/apicdef.h  26  #define GET_APIC_MAXLVT(x) (((x) >> 16) & 0xFFu)
APIC_INTEGRATED  macro  arch/x86/include/asm/apicdef.h  30  # define APIC_INTEGRATED(x) (1)
APIC_XAPIC  macro  arch/x86/include/asm/apicdef.h  32  #define APIC_XAPIC(x) ((x) >= 0x14)
APIC_EXT_SPACE  macro  arch/x86/include/asm/apicdef.h  33  #define APIC_EXT_SPACE(x) ((x) & 0x80000000)
APIC_TASKPRI  macro  arch/x86/include/asm/apicdef.h  34  #define APIC_TASKPRI 0x80
APIC_TPRI_MASK  macro  arch/x86/include/asm/apicdef.h  35  #define APIC_TPRI_MASK 0xFFu
APIC_ARBPRI  macro  arch/x86/include/asm/apicdef.h  36  #define APIC_ARBPRI 0x90
APIC_ARBPRI_MASK  macro  arch/x86/include/asm/apicdef.h  37  #define APIC_ARBPRI_MASK 0xFFu
APIC_PROCPRI  macro  arch/x86/include/asm/apicdef.h  38  #define APIC_PROCPRI 0xA0
APIC_EOI  macro  arch/x86/include/asm/apicdef.h  39  #define APIC_EOI 0xB0
APIC_EOI_ACK  macro  arch/x86/include/asm/apicdef.h  40  #define APIC_EOI_ACK 0x0
APIC_RRR  macro  arch/x86/include/asm/apicdef.h  41  #define APIC_RRR 0xC0
APIC_LDR  macro  arch/x86/include/asm/apicdef.h  42  #define APIC_LDR 0xD0
APIC_LDR_MASK  macro  arch/x86/include/asm/apicdef.h  43  #define APIC_LDR_MASK (0xFFu << 24)
GET_APIC_LOGICAL_ID  macro  arch/x86/include/asm/apicdef.h  44  #define GET_APIC_LOGICAL_ID(x) (((x) >> 24) & 0xFFu)
SET_APIC_LOGICAL_ID  macro  arch/x86/include/asm/apicdef.h  45  #define SET_APIC_LOGICAL_ID(x) (((x) << 24))
APIC_ALL_CPUS  macro  arch/x86/include/asm/apicdef.h  46  #define APIC_ALL_CPUS 0xFFu
APIC_DFR  macro  arch/x86/include/asm/apicdef.h  47  #define APIC_DFR 0xE0
APIC_DFR_CLUSTER  macro  arch/x86/include/asm/apicdef.h  48  #define APIC_DFR_CLUSTER 0x0FFFFFFFul
APIC_DFR_FLAT  macro  arch/x86/include/asm/apicdef.h  49  #define APIC_DFR_FLAT 0xFFFFFFFFul
APIC_SPIV  macro  arch/x86/include/asm/apicdef.h  50  #define APIC_SPIV 0xF0
APIC_SPIV_DIRECTED_EOI  macro  arch/x86/include/asm/apicdef.h  51  #define APIC_SPIV_DIRECTED_EOI (1 << 12)
APIC_SPIV_FOCUS_DISABLED  macro  arch/x86/include/asm/apicdef.h  52  #define APIC_SPIV_FOCUS_DISABLED (1 << 9)
APIC_SPIV_APIC_ENABLED  macro  arch/x86/include/asm/apicdef.h  53  #define APIC_SPIV_APIC_ENABLED (1 << 8)
APIC_ISR  macro  arch/x86/include/asm/apicdef.h  54  #define APIC_ISR 0x100
APIC_ISR_NR  macro  arch/x86/include/asm/apicdef.h  55  #define APIC_ISR_NR 0x8
APIC_TMR  macro  arch/x86/include/asm/apicdef.h  56  #define APIC_TMR 0x180
APIC_IRR  macro  arch/x86/include/asm/apicdef.h  57  #define APIC_IRR 0x200
APIC_ESR  macro  arch/x86/include/asm/apicdef.h  58  #define APIC_ESR 0x280
APIC_ESR_SEND_CS  macro  arch/x86/include/asm/apicdef.h  59  #define APIC_ESR_SEND_CS 0x00001
APIC_ESR_RECV_CS  macro  arch/x86/include/asm/apicdef.h  60  #define APIC_ESR_RECV_CS 0x00002
APIC_ESR_SEND_ACC  macro  arch/x86/include/asm/apicdef.h  61  #define APIC_ESR_SEND_ACC 0x00004
APIC_ESR_RECV_ACC  macro  arch/x86/include/asm/apicdef.h  62  #define APIC_ESR_RECV_ACC 0x00008
APIC_ESR_SENDILL  macro  arch/x86/include/asm/apicdef.h  63  #define APIC_ESR_SENDILL 0x00020
APIC_ESR_RECVILL  macro  arch/x86/include/asm/apicdef.h  64  #define APIC_ESR_RECVILL 0x00040
APIC_ESR_ILLREGA  macro  arch/x86/include/asm/apicdef.h  65  #define APIC_ESR_ILLREGA 0x00080
APIC_LVTCMCI  macro  arch/x86/include/asm/apicdef.h  66  #define APIC_LVTCMCI 0x2f0
APIC_ICR  macro  arch/x86/include/asm/apicdef.h  67  #define APIC_ICR 0x300
APIC_DEST_SELF  macro  arch/x86/include/asm/apicdef.h  68  #define APIC_DEST_SELF 0x40000
APIC_DEST_ALLINC  macro  arch/x86/include/asm/apicdef.h  69  #define APIC_DEST_ALLINC 0x80000
APIC_DEST_ALLBUT  macro  arch/x86/include/asm/apicdef.h  70  #define APIC_DEST_ALLBUT 0xC0000
APIC_ICR_RR_MASK  macro  arch/x86/include/asm/apicdef.h  71  #define APIC_ICR_RR_MASK 0x30000
APIC_ICR_RR_INVALID  macro  arch/x86/include/asm/apicdef.h  72  #define APIC_ICR_RR_INVALID 0x00000
APIC_ICR_RR_INPROG  macro  arch/x86/include/asm/apicdef.h  73  #define APIC_ICR_RR_INPROG 0x10000
APIC_ICR_RR_VALID  macro  arch/x86/include/asm/apicdef.h  74  #define APIC_ICR_RR_VALID 0x20000
APIC_INT_LEVELTRIG  macro  arch/x86/include/asm/apicdef.h  75  #define APIC_INT_LEVELTRIG 0x08000
APIC_INT_ASSERT  macro  arch/x86/include/asm/apicdef.h  76  #define APIC_INT_ASSERT 0x04000
APIC_ICR_BUSY  macro  arch/x86/include/asm/apicdef.h  77  #define APIC_ICR_BUSY 0x01000
APIC_DEST_LOGICAL  macro  arch/x86/include/asm/apicdef.h  78  #define APIC_DEST_LOGICAL 0x00800
APIC_DEST_PHYSICAL  macro  arch/x86/include/asm/apicdef.h  79  #define APIC_DEST_PHYSICAL 0x00000
APIC_DM_FIXED  macro  arch/x86/include/asm/apicdef.h  80  #define APIC_DM_FIXED 0x00000
APIC_DM_FIXED_MASK  macro  arch/x86/include/asm/apicdef.h  81  #define APIC_DM_FIXED_MASK 0x00700
APIC_DM_LOWEST  macro  arch/x86/include/asm/apicdef.h  82  #define APIC_DM_LOWEST 0x00100
APIC_DM_SMI  macro  arch/x86/include/asm/apicdef.h  83  #define APIC_DM_SMI 0x00200
APIC_DM_REMRD  macro  arch/x86/include/asm/apicdef.h  84  #define APIC_DM_REMRD 0x00300
APIC_DM_NMI  macro  arch/x86/include/asm/apicdef.h  85  #define APIC_DM_NMI 0x00400
APIC_DM_INIT  macro  arch/x86/include/asm/apicdef.h  86  #define APIC_DM_INIT 0x00500
APIC_DM_STARTUP  macro  arch/x86/include/asm/apicdef.h  87  #define APIC_DM_STARTUP 0x00600
APIC_DM_EXTINT  macro  arch/x86/include/asm/apicdef.h  88  #define APIC_DM_EXTINT 0x00700
APIC_VECTOR_MASK  macro  arch/x86/include/asm/apicdef.h  89  #define APIC_VECTOR_MASK 0x000FF
APIC_ICR2  macro  arch/x86/include/asm/apicdef.h  90  #define APIC_ICR2 0x310
GET_APIC_DEST_FIELD  macro  arch/x86/include/asm/apicdef.h  91  #define GET_APIC_DEST_FIELD(x) (((x) >> 24) & 0xFF)
SET_APIC_DEST_FIELD  macro  arch/x86/include/asm/apicdef.h  92  #define SET_APIC_DEST_FIELD(x) ((x) << 24)
APIC_LVTT  macro  arch/x86/include/asm/apicdef.h  93  #define APIC_LVTT 0x320
APIC_LVTTHMR  macro  arch/x86/include/asm/apicdef.h  94  #define APIC_LVTTHMR 0x330
APIC_LVTPC  macro  arch/x86/include/asm/apicdef.h  95  #define APIC_LVTPC 0x340
APIC_LVT0  macro  arch/x86/include/asm/apicdef.h  96  #define APIC_LVT0 0x350
APIC_LVT_TIMER_BASE_MASK  macro  arch/x86/include/asm/apicdef.h  97  #define APIC_LVT_TIMER_BASE_MASK (0x3 << 18)
GET_APIC_TIMER_BASE  macro  arch/x86/include/asm/apicdef.h  98  #define GET_APIC_TIMER_BASE(x) (((x) >> 18) & 0x3)
SET_APIC_TIMER_BASE  macro  arch/x86/include/asm/apicdef.h  99  #define SET_APIC_TIMER_BASE(x) (((x) << 18))
APIC_TIMER_BASE_CLKIN  macro  arch/x86/include/asm/apicdef.h  100  #define APIC_TIMER_BASE_CLKIN 0x0
APIC_TIMER_BASE_TMBASE  macro  arch/x86/include/asm/apicdef.h  101  #define APIC_TIMER_BASE_TMBASE 0x1
APIC_TIMER_BASE_DIV  macro  arch/x86/include/asm/apicdef.h  102  #define APIC_TIMER_BASE_DIV 0x2
APIC_LVT_TIMER_ONESHOT  macro  arch/x86/include/asm/apicdef.h  103  #define APIC_LVT_TIMER_ONESHOT (0 << 17)
APIC_LVT_TIMER_PERIODIC  macro  arch/x86/include/asm/apicdef.h  104  #define APIC_LVT_TIMER_PERIODIC (1 << 17)
APIC_LVT_TIMER_TSCDEADLINE  macro  arch/x86/include/asm/apicdef.h  105  #define APIC_LVT_TIMER_TSCDEADLINE (2 << 17)
APIC_LVT_MASKED  macro  arch/x86/include/asm/apicdef.h  106  #define APIC_LVT_MASKED (1 << 16)
APIC_LVT_LEVEL_TRIGGER  macro  arch/x86/include/asm/apicdef.h  107  #define APIC_LVT_LEVEL_TRIGGER (1 << 15)
APIC_LVT_REMOTE_IRR  macro  arch/x86/include/asm/apicdef.h  108  #define APIC_LVT_REMOTE_IRR (1 << 14)
APIC_INPUT_POLARITY  macro  arch/x86/include/asm/apicdef.h  109  #define APIC_INPUT_POLARITY (1 << 13)
APIC_SEND_PENDING  macro  arch/x86/include/asm/apicdef.h  110  #define APIC_SEND_PENDING (1 << 12)
APIC_MODE_MASK  macro  arch/x86/include/asm/apicdef.h  111  #define APIC_MODE_MASK 0x700
GET_APIC_DELIVERY_MODE  macro  arch/x86/include/asm/apicdef.h  112  #define GET_APIC_DELIVERY_MODE(x) (((x) >> 8) & 0x7)
SET_APIC_DELIVERY_MODE  macro  arch/x86/include/asm/apicdef.h  113  #define SET_APIC_DELIVERY_MODE(x,y) (((x) & ~0x700) | ((y) << 8))
APIC_MODE_FIXED  macro  arch/x86/include/asm/apicdef.h  114  #define APIC_MODE_FIXED 0x0
APIC_MODE_NMI  macro  arch/x86/include/asm/apicdef.h  115  #define APIC_MODE_NMI 0x4
APIC_MODE_EXTINT  macro  arch/x86/include/asm/apicdef.h  116  #define APIC_MODE_EXTINT 0x7
APIC_LVT1  macro  arch/x86/include/asm/apicdef.h  117  #define APIC_LVT1 0x360
APIC_LVTERR  macro  arch/x86/include/asm/apicdef.h  118  #define APIC_LVTERR 0x370
APIC_TMICT  macro  arch/x86/include/asm/apicdef.h  119  #define APIC_TMICT 0x380
APIC_TMCCT  macro  arch/x86/include/asm/apicdef.h  120  #define APIC_TMCCT 0x390
APIC_TDCR  macro  arch/x86/include/asm/apicdef.h  121  #define APIC_TDCR 0x3E0
APIC_SELF_IPI  macro  arch/x86/include/asm/apicdef.h  122  #define APIC_SELF_IPI 0x3F0
APIC_TDR_DIV_TMBASE  macro  arch/x86/include/asm/apicdef.h  123  #define APIC_TDR_DIV_TMBASE (1 << 2)
APIC_TDR_DIV_1  macro  arch/x86/include/asm/apicdef.h  124  #define APIC_TDR_DIV_1 0xB
APIC_TDR_DIV_2  macro  arch/x86/include/asm/apicdef.h  125  #define APIC_TDR_DIV_2 0x0
APIC_TDR_DIV_4  macro  arch/x86/include/asm/apicdef.h  126  #define APIC_TDR_DIV_4 0x1
APIC_TDR_DIV_8  macro  arch/x86/include/asm/apicdef.h  127  #define APIC_TDR_DIV_8 0x2
APIC_TDR_DIV_16  macro  arch/x86/include/asm/apicdef.h  128  #define APIC_TDR_DIV_16 0x3
APIC_TDR_DIV_32  macro  arch/x86/include/asm/apicdef.h  129  #define APIC_TDR_DIV_32 0x8
APIC_TDR_DIV_64  macro  arch/x86/include/asm/apicdef.h  130  #define APIC_TDR_DIV_64 0x9
APIC_TDR_DIV_128  macro  arch/x86/include/asm/apicdef.h  131  #define APIC_TDR_DIV_128 0xA
APIC_EFEAT  macro  arch/x86/include/asm/apicdef.h  132  #define APIC_EFEAT 0x400
APIC_ECTRL  macro  arch/x86/include/asm/apicdef.h  133  #define APIC_ECTRL 0x410
APIC_EILVTn  macro  arch/x86/include/asm/apicdef.h  134  #define APIC_EILVTn(n) (0x500 + 0x10 * n)
APIC_EILVT_NR_AMD_K8  macro  arch/x86/include/asm/apicdef.h  135  #define APIC_EILVT_NR_AMD_K8 1
APIC_EILVT_NR_AMD_10H  macro  arch/x86/include/asm/apicdef.h  136  #define APIC_EILVT_NR_AMD_10H 4
APIC_EILVT_NR_MAX  macro  arch/x86/include/asm/apicdef.h  137  #define APIC_EILVT_NR_MAX APIC_EILVT_NR_AMD_10H
APIC_EILVT_LVTOFF  macro  arch/x86/include/asm/apicdef.h  138  #define APIC_EILVT_LVTOFF(x) (((x) >> 4) & 0xF)
APIC_EILVT_MSG_FIX  macro  arch/x86/include/asm/apicdef.h  139  #define APIC_EILVT_MSG_FIX 0x0
APIC_EILVT_MSG_SMI  macro  arch/x86/include/asm/apicdef.h  140  #define APIC_EILVT_MSG_SMI 0x2
APIC_EILVT_MSG_NMI  macro  arch/x86/include/asm/apicdef.h  141  #define APIC_EILVT_MSG_NMI 0x4
APIC_EILVT_MSG_EXT  macro  arch/x86/include/asm/apicdef.h  142  #define APIC_EILVT_MSG_EXT 0x7
APIC_EILVT_MASKED  macro  arch/x86/include/asm/apicdef.h  143  #define APIC_EILVT_MASKED (1 << 16)
APIC_BASE  macro  arch/x86/include/asm/apicdef.h  145  #define APIC_BASE (fix_to_virt(FIX_APIC_BASE))
APIC_BASE_MSR  macro  arch/x86/include/asm/apicdef.h  146  #define APIC_BASE_MSR 0x800
XAPIC_ENABLE  macro  arch/x86/include/asm/apicdef.h  147  #define XAPIC_ENABLE (1UL << 11)
X2APIC_ENABLE  macro  arch/x86/include/asm/apicdef.h  148  #define X2APIC_ENABLE (1UL << 10)
MAX_IO_APICS  macro  arch/x86/include/asm/apicdef.h  154  # define MAX_IO_APICS 128
MAX_LOCAL_APIC  macro  arch/x86/include/asm/apicdef.h  155  # define MAX_LOCAL_APIC 32768
XAPIC_DEST_CPUS_SHIFT  macro  arch/x86/include/asm/apicdef.h  162  #define XAPIC_DEST_CPUS_SHIFT 4
XAPIC_DEST_CPUS_MASK  macro  arch/x86/include/asm/apicdef.h  163  #define XAPIC_DEST_CPUS_MASK ((1u << XAPIC_DEST_CPUS_SHIFT) - 1)
XAPIC_DEST_CLUSTER_MASK  macro  arch/x86/include/asm/apicdef.h  164  #define XAPIC_DEST_CLUSTER_MASK (XAPIC_DEST_CPUS_MASK << XAPIC_DEST_CPUS_SHIFT)
APIC_CLUSTER  macro  arch/x86/include/asm/apicdef.h  165  #define APIC_CLUSTER(apicid) ((apicid) & XAPIC_DEST_CLUSTER_MASK)
APIC_CLUSTERID  macro  arch/x86/include/asm/apicdef.h  166  #define APIC_CLUSTERID(apicid) (APIC_CLUSTER(apicid) >> XAPIC_DEST_CPUS_SHIFT)
APIC_CPUID  macro  arch/x86/include/asm/apicdef.h  167  #define APIC_CPUID(apicid) ((apicid) & XAPIC_DEST_CPUS_MASK)
NUM_APIC_CLUSTERS  macro  arch/x86/include/asm/apicdef.h  168  #define NUM_APIC_CLUSTERS ((BAD_APICID + 1) >> XAPIC_DEST_CPUS_SHIFT)
u32  macro  arch/x86/include/asm/apicdef.h  426  #undef u32
local_apic  struct  arch/x86/include/asm/apicdef.h  178  struct local_apic { u32 __reserved_1 : 24,phys_apic_id	:  4,__reserved_2	:  4; phys_apic_id : 4,__reserved_2	:  4; __reserved_2 : 4; u32 __reserved[3]; } id; u32 version : 8,__reserved_1	:  8,max_lvt		:  8,__reserved_2	:  8; __reserved_1 : 8,max_lvt		:  8,__reserved_2	:  8; max_lvt : 8,__reserved_2	:  8; __reserved_2 : 8; u32 __reserved[3]; } version; u32 priority : 8,__reserved_1	: 24; __reserved_1 : 24; u32 __reserved_2[3]; } tpr; u32 priority : 8,__reserved_1	: 24; __reserved_1 : 24; u32 __reserved_2[3]; } apr; u32 priority : 8,__reserved_1	: 24; __reserved_1 : 24; u32 __reserved_2[3]; } ppr; u32 eoi; u32 __reserved[3]; } eoi; u32 __reserved_1 : 24,logical_dest	:  8; logical_dest : 8; u32 __reserved_2[3]; } ldr; u32 __reserved_1 : 28,model		:  4; model : 4; u32 __reserved_2[3]; } dfr; u32 spurious_vector : 8,apic_enabled	:  1,focus_cpu	:  1,__reserved_2	: 22; apic_enabled : 1,focus_cpu	:  1,__reserved_2	: 22; focus_cpu : 1,__reserved_2	: 22; __reserved_2 : 22; u32 __reserved_3[3]; } svr; u32 __reserved[3]; } isr [8]; u32 __reserved[3]; } tmr [8]; u32 __reserved[3]; } irr [8]; u32 send_cs_error : 1,receive_cs_error		:  1,send_accept_error		:  1,receive_accept_error		:  1,__reserved_1			:  1,send_illegal_vector		:  1,receive_illegal_vector		:  1,illegal_register_address	:  1,__reserved_2			: 24; receive_cs_error : 1,send_accept_error		:  1,receive_accept_error		:  1,__reserved_1			:  1,send_illegal_vector		:  1,receive_illegal_vector		:  1,illegal_register_address	:  1,__reserved_2			: 24; send_accept_error : 1,receive_accept_error		:  1,__reserved_1			:  1,send_illegal_vector		:  1,receive_illegal_vector		:  1,illegal_register_address	:  1,__reserved_2			: 24; receive_accept_error : 1,__reserved_1			:  1,send_illegal_vector		:  1,receive_illegal_vector		:  1,illegal_register_address	:  1,__reserved_2			: 24; __reserved_1 : 1,send_illegal_vector		:  1,receive_illegal_vector		:  1,illegal_register_address	:  1,__reserved_2			: 24; send_illegal_vector : 1,receive_illegal_vector		:  1,illegal_register_address	:  1,__reserved_2			: 24; receive_illegal_vector : 1,illegal_register_address	:  1,__reserved_2			: 24; illegal_register_address : 1,__reserved_2			: 24; __reserved_2 : 24; u32 __reserved_3[3]; } error_bits; struct { u32 errors; u32 __reserved_3[3]; } all_errors; } esr; u32 vector : 8,delivery_mode		:  3,destination_mode	:  1,delivery_status		:  1,__reserved_1		:  1,level			:  1,trigger			:  1,__reserved_2		:  2,shorthand		:  2,__reserved_3		:  12; delivery_mode : 3,destination_mode	:  1,delivery_status		:  1,__reserved_1		:  1,level			:  1,trigger			:  1,__reserved_2		:  2,shorthand		:  2,__reserved_3		:  12; destination_mode : 1,delivery_status		:  1,__reserved_1		:  1,level			:  1,trigger			:  1,__reserved_2		:  2,shorthand		:  2,__reserved_3		:  12; delivery_status : 1,__reserved_1		:  1,level			:  1,trigger			:  1,__reserved_2		:  2,shorthand		:  2,__reserved_3		:  12; __reserved_1 : 1,level			:  1,trigger			:  1,__reserved_2		:  2,shorthand		:  2,__reserved_3		:  12; level : 1,trigger			:  1,__reserved_2		:  2,shorthand		:  2,__reserved_3		:  12; trigger : 1,__reserved_2		:  2,shorthand		:  2,__reserved_3		:  12; __reserved_2 : 2,shorthand		:  2,__reserved_3		:  12; shorthand : 2,__reserved_3		:  12; __reserved_3 : 12; u32 __reserved_4[3]; } icr1; } dest; u32 __reserved_4[3]; } icr2; u32 vector : 8,__reserved_1	:  4,delivery_status	:  1,__reserved_2	:  3,mask		:  1,timer_mode	:  1,__reserved_3	: 14; __reserved_1 : 4,delivery_status	:  1,__reserved_2	:  3,mask		:  1,timer_mode	:  1,__reserved_3	: 14; delivery_status : 1,__reserved_2	:  3,mask		:  1,timer_mode	:  1,__reserved_3	: 14; __reserved_2 : 3,mask		:  1,timer_mode	:  1,__reserved_3	: 14; mask : 1,timer_mode	:  1,__reserved_3	: 14; timer_mode : 1,__reserved_3	: 14; __reserved_3 : 14; u32 __reserved_4[3]; } lvt_timer; u32 vector : 8,delivery_mode	:  3,__reserved_1	:  1,delivery_status	:  1,__reserved_2	:  3,mask		:  1,__reserved_3	: 15; delivery_mode : 3,__reserved_1	:  1,delivery_status	:  1,__reserved_2	:  3,mask		:  1,__reserved_3	: 15; __reserved_1 : 1,delivery_status	:  1,__reserved_2	:  3,mask		:  1,__reserved_3	: 15; delivery_status : 1,__reserved_2	:  3,mask		:  1,__reserved_3	: 15; __reserved_2 : 3,mask		:  1,__reserved_3	: 15; mask : 1,__reserved_3	: 15; __reserved_3 : 15; u32 __reserved_4[3]; } lvt_thermal; u32 vector : 8,delivery_mode	:  3,__reserved_1	:  1,delivery_status	:  1,__reserved_2	:  3,mask		:  1,__reserved_3	: 15; delivery_mode : 3,__reserved_1	:  1,delivery_status	:  1,__reserved_2	:  3,mask		:  1,__reserved_3	: 15; __reserved_1 : 1,delivery_status	:  1,__reserved_2	:  3,mask		:  1,__reserved_3	: 15; delivery_status : 1,__reserved_2	:  3,mask		:  1,__reserved_3	: 15; __reserved_2 : 3,mask		:  1,__reserved_3	: 15; mask : 1,__reserved_3	: 15; __reserved_3 : 15; u32 __reserved_4[3]; } lvt_pc; u32 vector : 8,delivery_mode	:  3,__reserved_1	:  1,delivery_status	:  1,polarity	:  1,remote_irr	:  1,trigger		:  1,mask		:  1,__reserved_2	: 15; delivery_mode : 3,__reserved_1	:  1,delivery_status	:  1,polarity	:  1,remote_irr	:  1,trigger		:  1,mask		:  1,__reserved_2	: 15; __reserved_1 : 1,delivery_status	:  1,polarity	:  1,remote_irr	:  1,trigger		:  1,mask		:  1,__reserved_2	: 15; delivery_status : 1,polarity	:  1,remote_irr	:  1,trigger		:  1,mask		:  1,__reserved_2	: 15; polarity : 1,remote_irr	:  1,trigger		:  1,mask		:  1,__reserved_2	: 15; remote_irr : 1,trigger		:  1,mask		:  1,__reserved_2	: 15; trigger : 1,mask		:  1,__reserved_2	: 15; mask : 1,__reserved_2	: 15; __reserved_2 : 15; u32 __reserved_3[3]; } lvt_lint0; u32 vector : 8,delivery_mode	:  3,__reserved_1	:  1,delivery_status	:  1,polarity	:  1,remote_irr	:  1,trigger		:  1,mask		:  1,__reserved_2	: 15; delivery_mode : 3,__reserved_1	:  1,delivery_status	:  1,polarity	:  1,remote_irr	:  1,trigger		:  1,mask		:  1,__reserved_2	: 15; __reserved_1 : 1,delivery_status	:  1,polarity	:  1,remote_irr	:  1,trigger		:  1,mask		:  1,__reserved_2	: 15; delivery_status : 1,polarity	:  1,remote_irr	:  1,trigger		:  1,mask		:  1,__reserved_2	: 15; polarity : 1,remote_irr	:  1,trigger		:  1,mask		:  1,__reserved_2	: 15; remote_irr : 1,trigger		:  1,mask		:  1,__reserved_2	: 15; trigger : 1,mask		:  1,__reserved_2	: 15; mask : 1,__reserved_2	: 15; __reserved_2 : 15; u32 __reserved_3[3]; } lvt_lint1; u32 vector : 8,__reserved_1	:  4,delivery_status	:  1,__reserved_2	:  3,mask		:  1,__reserved_3	: 15; __reserved_1 : 4,delivery_status	:  1,__reserved_2	:  3,mask		:  1,__reserved_3	: 15; delivery_status : 1,__reserved_2	:  3,mask		:  1,__reserved_3	: 15; __reserved_2 : 3,mask		:  1,__reserved_3	: 15; mask : 1,__reserved_3	: 15; __reserved_3 : 15; u32 __reserved_4[3]; } lvt_error; u32 initial_count; u32 __reserved_2[3]; } timer_icr; u32 curr_count; u32 __reserved_2[3]; } timer_ccr; u32 divisor : 4,__reserved_1	: 28; __reserved_1 : 28; u32 __reserved_2[3]; } timer_dcr; } __attribute__ ((packed));
BAD_APICID  macro  arch/x86/include/asm/apicdef.h  431  #define BAD_APICID 0xFFFFu
ioapic_irq_destination_types  enum  arch/x86/include/asm/apicdef.h  434  enum ioapic_irq_destination_types { dest_Fixed = 0, dest_LowestPrio = 1, dest_SMI = 2, dest__reserved_1 = 3, dest_NMI = 4, dest_INIT = 5, dest__reserved_2 = 6, dest_ExtINT = 7 };
_ASM_X86_IRQ_VECTORS_H  macro  arch/x86/include/asm/irq_vectors.h  2  #define _ASM_X86_IRQ_VECTORS_H
NMI_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  28  #define NMI_VECTOR 0x02
MCE_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  29  #define MCE_VECTOR 0x12
FIRST_EXTERNAL_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  35  #define FIRST_EXTERNAL_VECTOR 0x20
VECTOR_OFFSET_START  macro  arch/x86/include/asm/irq_vectors.h  40  #define VECTOR_OFFSET_START 1
IRQ_MOVE_CLEANUP_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  47  #define IRQ_MOVE_CLEANUP_VECTOR FIRST_EXTERNAL_VECTOR
IA32_SYSCALL_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  49  #define IA32_SYSCALL_VECTOR 0x80
SYSCALL_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  51  # define SYSCALL_VECTOR 0x80
IRQ0_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  58  #define IRQ0_VECTOR ((FIRST_EXTERNAL_VECTOR + 16) & ~15)
IRQ1_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  60  #define IRQ1_VECTOR (IRQ0_VECTOR + 1)
IRQ2_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  61  #define IRQ2_VECTOR (IRQ0_VECTOR + 2)
IRQ3_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  62  #define IRQ3_VECTOR (IRQ0_VECTOR + 3)
IRQ4_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  63  #define IRQ4_VECTOR (IRQ0_VECTOR + 4)
IRQ5_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  64  #define IRQ5_VECTOR (IRQ0_VECTOR + 5)
IRQ6_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  65  #define IRQ6_VECTOR (IRQ0_VECTOR + 6)
IRQ7_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  66  #define IRQ7_VECTOR (IRQ0_VECTOR + 7)
IRQ8_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  67  #define IRQ8_VECTOR (IRQ0_VECTOR + 8)
IRQ9_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  68  #define IRQ9_VECTOR (IRQ0_VECTOR + 9)
IRQ10_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  69  #define IRQ10_VECTOR (IRQ0_VECTOR + 10)
IRQ11_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  70  #define IRQ11_VECTOR (IRQ0_VECTOR + 11)
IRQ12_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  71  #define IRQ12_VECTOR (IRQ0_VECTOR + 12)
IRQ13_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  72  #define IRQ13_VECTOR (IRQ0_VECTOR + 13)
IRQ14_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  73  #define IRQ14_VECTOR (IRQ0_VECTOR + 14)
IRQ15_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  74  #define IRQ15_VECTOR (IRQ0_VECTOR + 15)
SPURIOUS_APIC_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  84  #define SPURIOUS_APIC_VECTOR 0xff
ERROR_APIC_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  92  #define ERROR_APIC_VECTOR 0xfe
RESCHEDULE_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  93  #define RESCHEDULE_VECTOR 0xfd
CALL_FUNCTION_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  94  #define CALL_FUNCTION_VECTOR 0xfc
CALL_FUNCTION_SINGLE_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  95  #define CALL_FUNCTION_SINGLE_VECTOR 0xfb
THERMAL_APIC_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  96  #define THERMAL_APIC_VECTOR 0xfa
THRESHOLD_APIC_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  97  #define THRESHOLD_APIC_VECTOR 0xf9
REBOOT_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  98  #define REBOOT_VECTOR 0xf8
X86_PLATFORM_IPI_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  103  #define X86_PLATFORM_IPI_VECTOR 0xf7
IRQ_WORK_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  108  #define IRQ_WORK_VECTOR 0xf6
UV_BAU_MESSAGE  macro  arch/x86/include/asm/irq_vectors.h  110  #define UV_BAU_MESSAGE 0xf5
XEN_HVM_EVTCHN_CALLBACK  macro  arch/x86/include/asm/irq_vectors.h  113  #define XEN_HVM_EVTCHN_CALLBACK 0xf3
LOCAL_TIMER_VECTOR  macro  arch/x86/include/asm/irq_vectors.h  120  #define LOCAL_TIMER_VECTOR 0xef
NUM_INVALIDATE_TLB_VECTORS  macro  arch/x86/include/asm/irq_vectors.h  126  # define NUM_INVALIDATE_TLB_VECTORS (32)
INVALIDATE_TLB_VECTOR_END  macro  arch/x86/include/asm/irq_vectors.h  129  #define INVALIDATE_TLB_VECTOR_END (0xee)
INVALIDATE_TLB_VECTOR_START  macro  arch/x86/include/asm/irq_vectors.h  130  #define INVALIDATE_TLB_VECTOR_START (INVALIDATE_TLB_VECTOR_END-NUM_INVALIDATE_TLB_VECTORS+1)
NR_VECTORS  macro  arch/x86/include/asm/irq_vectors.h  133  #define NR_VECTORS 256
FPU_IRQ  macro  arch/x86/include/asm/irq_vectors.h  135  #define FPU_IRQ 13
FIRST_VM86_IRQ  macro  arch/x86/include/asm/irq_vectors.h  137  #define FIRST_VM86_IRQ 3
LAST_VM86_IRQ  macro  arch/x86/include/asm/irq_vectors.h  138  #define LAST_VM86_IRQ 15
invalid_vm86_irq  function  arch/x86/include/asm/irq_vectors.h  141  static inline int invalid_vm86_irq(int irq)
NR_IRQS_LEGACY  macro  arch/x86/include/asm/irq_vectors.h  158  #define NR_IRQS_LEGACY 16
IO_APIC_VECTOR_LIMIT  macro  arch/x86/include/asm/irq_vectors.h  160  #define IO_APIC_VECTOR_LIMIT ( 32 * MAX_IO_APICS )
CPU_VECTOR_LIMIT  macro  arch/x86/include/asm/irq_vectors.h  163  # define CPU_VECTOR_LIMIT (64 * NR_CPUS)
NR_IRQS  macro  arch/x86/include/asm/irq_vectors.h  169  # define NR_IRQS NR_IRQS_LEGACY
_LINUX_POISON_H  macro  include/linux/poison.h  2  #define _LINUX_POISON_H
POISON_POINTER_DELTA  macro  include/linux/poison.h  14  # define POISON_POINTER_DELTA 0
LIST_POISON1  macro  include/linux/poison.h  22  #define LIST_POISON1 ((void *) 0x00100100 + POISON_POINTER_DELTA)
LIST_POISON2  macro  include/linux/poison.h  23  #define LIST_POISON2 ((void *) 0x00200200 + POISON_POINTER_DELTA)
TIMER_ENTRY_STATIC  macro  include/linux/poison.h  30  #define TIMER_ENTRY_STATIC ((void *) 0x74737461)
PAGE_POISON  macro  include/linux/poison.h  33  #define PAGE_POISON 0xaa
RED_INACTIVE  macro  include/linux/poison.h  40  #define RED_INACTIVE 0x09F911029D74E35BULL
RED_ACTIVE  macro  include/linux/poison.h  41  #define RED_ACTIVE 0xD84156C5635688C0ULL
SLUB_RED_INACTIVE  macro  include/linux/poison.h  43  #define SLUB_RED_INACTIVE 0xbb
SLUB_RED_ACTIVE  macro  include/linux/poison.h  44  #define SLUB_RED_ACTIVE 0xcc
POISON_INUSE  macro  include/linux/poison.h  47  #define POISON_INUSE 0x5a
POISON_FREE  macro  include/linux/poison.h  48  #define POISON_FREE 0x6b
POISON_END  macro  include/linux/poison.h  49  #define POISON_END 0xa5
POISON_FREE_INITMEM  macro  include/linux/poison.h  52  #define POISON_FREE_INITMEM 0xcc
JBD_POISON_FREE  macro  include/linux/poison.h  61  #define JBD_POISON_FREE 0x5b
JBD2_POISON_FREE  macro  include/linux/poison.h  62  #define JBD2_POISON_FREE 0x5c
POOL_POISON_FREED  macro  include/linux/poison.h  65  #define POOL_POISON_FREED 0xa7
POOL_POISON_ALLOCATED  macro  include/linux/poison.h  66  #define POOL_POISON_ALLOCATED 0xa9
ATM_POISON_FREE  macro  include/linux/poison.h  69  #define ATM_POISON_FREE 0x12
ATM_POISON  macro  include/linux/poison.h  70  #define ATM_POISON 0xdeadbeef
NEIGHBOR_DEAD  macro  include/linux/poison.h  73  #define NEIGHBOR_DEAD 0xdeadbeef
NETFILTER_LINK_POISON  macro  include/linux/poison.h  74  #define NETFILTER_LINK_POISON 0xdead57ac
MUTEX_DEBUG_INIT  macro  include/linux/poison.h  77  #define MUTEX_DEBUG_INIT 0x11
MUTEX_DEBUG_FREE  macro  include/linux/poison.h  78  #define MUTEX_DEBUG_FREE 0x22
FLEX_ARRAY_FREE  macro  include/linux/poison.h  81  #define FLEX_ARRAY_FREE 0x6c
KEY_DESTROY  macro  include/linux/poison.h  84  #define KEY_DESTROY 0xbd
OSS_POISON_FREE  macro  include/linux/poison.h  87  #define OSS_POISON_FREE 0xAB
_LINUX_CONST_H  macro  include/linux/const.h  4  #define _LINUX_CONST_H
_AC  macro  include/linux/const.h  20  #define _AC(X,Y) __AC(X,Y)
_AT  macro  include/linux/const.h  21  #define _AT(T,X) ((T)(X))
__AC  macro  include/linux/const.h  19  #define __AC(X,Y) (X##Y)
_ASM_X86_STAT_H  macro  arch/x86/include/asm/stat.h  2  #define _ASM_X86_STAT_H
STAT_HAVE_NSEC  macro  arch/x86/include/asm/stat.h  4  #define STAT_HAVE_NSEC 1
stat  struct  arch/x86/include/asm/stat.h  80  struct stat { unsigned long st_dev; unsigned long st_ino; unsigned long st_nlink; unsigned int st_mode; unsigned int st_uid; unsigned int st_gid; unsigned int __pad0; unsigned long st_rdev; long st_size; long st_blksize; long st_blocks; unsigned long st_atime; unsigned long st_atime_nsec; unsigned long st_mtime; unsigned long st_mtime_nsec; unsigned long st_ctime; unsigned long st_ctime_nsec; long __unused[3]; };
INIT_STRUCT_STAT_PADDING  macro  arch/x86/include/asm/stat.h  104  #define INIT_STRUCT_STAT_PADDING(st) do { st.__pad0 = 0; st.__unused[0] = 0; st.__unused[1] = 0; st.__unused[2] = 0; } while (0)
STAT64_HAS_BROKEN_ST_INO  macro  arch/x86/include/asm/stat.h  34  #define STAT64_HAS_BROKEN_ST_INO 1
stat64  struct  arch/x86/include/asm/stat.h  39  struct stat64 { unsigned long long st_dev; unsigned char __pad0[4]; unsigned long __st_ino; unsigned int st_mode; unsigned int st_nlink; unsigned long st_uid; unsigned long st_gid; unsigned long long st_rdev; unsigned char __pad3[4]; long long st_size; unsigned long st_blksize; unsigned long long st_blocks; unsigned long st_atime; unsigned long st_atime_nsec; unsigned long st_mtime; unsigned int st_mtime_nsec; unsigned long st_ctime; unsigned long st_ctime_nsec; unsigned long long st_ino; };
INIT_STRUCT_STAT64_PADDING  macro  arch/x86/include/asm/stat.h  73  #define INIT_STRUCT_STAT64_PADDING(st) do { memset(&st.__pad0, 0, sizeof(st.__pad0)); memset(&st.__pad3, 0, sizeof(st.__pad3)); } while (0)
__old_kernel_stat  struct  arch/x86/include/asm/stat.h  114  struct __old_kernel_stat { unsigned short st_dev; unsigned short st_ino; unsigned short st_mode; unsigned short st_nlink; unsigned short st_uid; unsigned short st_gid; unsigned short st_rdev; unsigned long st_size; unsigned long st_atime; unsigned long st_mtime; unsigned long st_ctime; unsigned int st_size; unsigned int st_atime; unsigned int st_mtime; unsigned int st_ctime; };
__must_be_array  macro  include/linux/compiler-intel.h  27  #define __must_be_array(a) 0
inline  macro  include/linux/compiler-gcc.h  55  # define inline inline notrace
__inline__  macro  include/linux/compiler-gcc.h  56  # define __inline__ __inline__ notrace
__inline  macro  include/linux/compiler-gcc.h  57  # define __inline __inline notrace
__packed  macro  include/linux/compiler-gcc.h  61  #define __packed __attribute__((packed))
__weak  macro  include/linux/compiler-gcc.h  62  #define __weak __attribute__((weak))
__naked  macro  include/linux/compiler-gcc.h  74  #define __naked __attribute__((naked)) noinline __noclone notrace
__noreturn  macro  include/linux/compiler-gcc.h  76  #define __noreturn __attribute__((noreturn))
__pure  macro  include/linux/compiler-gcc.h  88  #define __pure __attribute__((pure))
__aligned  macro  include/linux/compiler-gcc.h  89  #define __aligned(x) __attribute__((aligned(x)))
__printf  macro  include/linux/compiler-gcc.h  90  #define __printf(a,b) __attribute__((format(printf,a,b)))
__scanf  macro  include/linux/compiler-gcc.h  91  #define __scanf(a,b) __attribute__((format(scanf,a,b)))
__gcc_header  macro  include/linux/compiler-gcc.h  97  #define __gcc_header(x) #x
_gcc_header  macro  include/linux/compiler-gcc.h  98  #define _gcc_header(x) __gcc_header(linux/compiler-gcc##x.h)
gcc_header  macro  include/linux/compiler-gcc.h  99  #define gcc_header(x) _gcc_header(x)
__noclone  macro  include/linux/compiler-gcc.h  103  #define __noclone
uninitialized_var  macro  include/linux/compiler-intel.h  31  #define uninitialized_var(x) x
_LINUX_SYSCTL_H  macro  include/linux/sysctl.h  23  #define _LINUX_SYSCTL_H
CTL_MAXNAME  macro  include/linux/sysctl.h  31  #define CTL_MAXNAME 10
__sysctl_args  struct  include/linux/sysctl.h  36  struct __sysctl_args { int __user *name; int nlen; void __user *oldval; size_t __user *oldlenp; void __user *newval; size_t newlen; unsigned long __unused[4]; };
proc_dostring  prototype  include/linux/sysctl.h  949  extern int proc_dostring(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec  prototype  include/linux/sysctl.h  951  extern int proc_dointvec(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_minmax  prototype  include/linux/sysctl.h  953  extern int proc_dointvec_minmax(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_jiffies  prototype  include/linux/sysctl.h  955  extern int proc_dointvec_jiffies(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_userhz_jiffies  prototype  include/linux/sysctl.h  957  extern int proc_dointvec_userhz_jiffies(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_ms_jiffies  prototype  include/linux/sysctl.h  959  extern int proc_dointvec_ms_jiffies(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_doulongvec_minmax  prototype  include/linux/sysctl.h  961  extern int proc_doulongvec_minmax(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_doulongvec_ms_jiffies_minmax  prototype  include/linux/sysctl.h  963  extern int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table,int,void __user *, size_t *, loff_t *);
proc_do_large_bitmap  prototype  include/linux/sysctl.h  965  extern int proc_do_large_bitmap(struct ctl_table *,int,void __user *, size_t *, loff_t *);
ctl_table_poll  struct  include/linux/sysctl.h  996  struct ctl_table_poll { atomic_t event; wait_queue_head_t wait; };
proc_sys_poll_event  function  include/linux/sysctl.h  1001  static inline void *proc_sys_poll_event(struct ctl_table_poll *poll)
__CTL_TABLE_POLL_INITIALIZER  macro  include/linux/sysctl.h  1006  #define __CTL_TABLE_POLL_INITIALIZER(name) { .event = ATOMIC_INIT(0), .wait = __WAIT_QUEUE_HEAD_INITIALIZER(name.wait) }
DEFINE_CTL_TABLE_POLL  macro  include/linux/sysctl.h  1010  #define DEFINE_CTL_TABLE_POLL(name) struct ctl_table_poll name = __CTL_TABLE_POLL_INITIALIZER(name)
ctl_table  struct  include/linux/sysctl.h  1014  struct ctl_table { const char *procname; void *data; int maxlen; umode_t mode; struct ctl_table *child; proc_handler *proc_handler; struct ctl_table_poll *poll; void *extra1; void *extra2; };
ctl_node  struct  include/linux/sysctl.h  1027  struct ctl_node { struct rb_node node; struct ctl_table_header *header; };
ctl_table_header  struct  include/linux/sysctl.h  1034  struct ctl_table_header { struct ctl_table *ctl_table; int used; int count; int nreg; }; struct rcu_head rcu; }; struct completion *unregistering; struct ctl_table *ctl_table_arg; struct ctl_table_root *root; struct ctl_table_set *set; struct ctl_dir *parent; struct ctl_node *node; };
ctl_dir  struct  include/linux/sysctl.h  1053  struct ctl_dir { struct ctl_table_header header; struct rb_root root; };
ctl_table_set  struct  include/linux/sysctl.h  1059  struct ctl_table_set { int (*is_seen)(struct ctl_table_set *); struct ctl_dir dir; };
ctl_table_root  struct  include/linux/sysctl.h  1064  struct ctl_table_root { struct ctl_table_set default_set; struct ctl_table_set *(*lookup)(struct ctl_table_root *root,struct nsproxy *namespaces); int (*permissions)(struct ctl_table_root *root,struct nsproxy *namespaces, struct ctl_table *table); };
ctl_path  struct  include/linux/sysctl.h  1073  struct ctl_path { const char *procname; };
proc_sys_poll_notify  prototype  include/linux/sysctl.h  1079  void proc_sys_poll_notify(struct ctl_table_poll *poll);
setup_sysctl_set  function  include/linux/sysctl.h  1117  static inline void setup_sysctl_set(struct ctl_table_set *p,struct ctl_table_root *root,int (*is_seen)(struct ctl_table_set *))
retire_sysctl_set  prototype  include/linux/sysctl.h  1084  extern void retire_sysctl_set(struct ctl_table_set *set);
register_sysctl_root  prototype  include/linux/sysctl.h  1086  void register_sysctl_root(struct ctl_table_root *root);
__register_sysctl_table  prototype  include/linux/sysctl.h  1087  struct ctl_table_header *__register_sysctl_table(
__register_sysctl_paths  prototype  include/linux/sysctl.h  1090  struct ctl_table_header *__register_sysctl_paths(
register_sysctl  prototype  include/linux/sysctl.h  1093  struct ctl_table_header *register_sysctl(const char *path,struct ctl_table *table);
register_sysctl_table  function  include/linux/sysctl.h  1102  static inline struct ctl_table_header *register_sysctl_table(struct ctl_table * table)
register_sysctl_paths  function  include/linux/sysctl.h  1107  static inline struct ctl_table_header *register_sysctl_paths(
unregister_sysctl_table  function  include/linux/sysctl.h  1113  static inline void unregister_sysctl_table(struct ctl_table_header * table)
sysctl_init  prototype  include/linux/sysctl.h  1100  extern int sysctl_init(void);
_LINUX_ELF_EM_H  macro  include/linux/elf-em.h  2  #define _LINUX_ELF_EM_H
EM_NONE  macro  include/linux/elf-em.h  5  #define EM_NONE 0
EM_M32  macro  include/linux/elf-em.h  6  #define EM_M32 1
EM_SPARC  macro  include/linux/elf-em.h  7  #define EM_SPARC 2
EM_386  macro  include/linux/elf-em.h  8  #define EM_386 3
EM_68K  macro  include/linux/elf-em.h  9  #define EM_68K 4
EM_88K  macro  include/linux/elf-em.h  10  #define EM_88K 5
EM_486  macro  include/linux/elf-em.h  11  #define EM_486 6
EM_860  macro  include/linux/elf-em.h  12  #define EM_860 7
EM_MIPS  macro  include/linux/elf-em.h  13  #define EM_MIPS 8
EM_MIPS_RS3_LE  macro  include/linux/elf-em.h  17  #define EM_MIPS_RS3_LE 10
EM_MIPS_RS4_BE  macro  include/linux/elf-em.h  18  #define EM_MIPS_RS4_BE 10
EM_PARISC  macro  include/linux/elf-em.h  20  #define EM_PARISC 15
EM_SPARC32PLUS  macro  include/linux/elf-em.h  21  #define EM_SPARC32PLUS 18
EM_PPC  macro  include/linux/elf-em.h  22  #define EM_PPC 20
EM_PPC64  macro  include/linux/elf-em.h  23  #define EM_PPC64 21
EM_SPU  macro  include/linux/elf-em.h  24  #define EM_SPU 23
EM_SH  macro  include/linux/elf-em.h  25  #define EM_SH 42
EM_SPARCV9  macro  include/linux/elf-em.h  26  #define EM_SPARCV9 43
EM_IA_64  macro  include/linux/elf-em.h  27  #define EM_IA_64 50
EM_X86_64  macro  include/linux/elf-em.h  28  #define EM_X86_64 62
EM_S390  macro  include/linux/elf-em.h  29  #define EM_S390 22
EM_CRIS  macro  include/linux/elf-em.h  30  #define EM_CRIS 76
EM_V850  macro  include/linux/elf-em.h  31  #define EM_V850 87
EM_M32R  macro  include/linux/elf-em.h  32  #define EM_M32R 88
EM_H8_300  macro  include/linux/elf-em.h  33  #define EM_H8_300 46
EM_MN10300  macro  include/linux/elf-em.h  34  #define EM_MN10300 89
EM_BLACKFIN  macro  include/linux/elf-em.h  35  #define EM_BLACKFIN 106
EM_TI_C6000  macro  include/linux/elf-em.h  36  #define EM_TI_C6000 140
EM_FRV  macro  include/linux/elf-em.h  37  #define EM_FRV 0x5441
EM_AVR32  macro  include/linux/elf-em.h  38  #define EM_AVR32 0x18ad
EM_ALPHA  macro  include/linux/elf-em.h  44  #define EM_ALPHA 0x9026
EM_CYGNUS_V850  macro  include/linux/elf-em.h  47  #define EM_CYGNUS_V850 0x9080
EM_CYGNUS_M32R  macro  include/linux/elf-em.h  49  #define EM_CYGNUS_M32R 0x9041
EM_S390_OLD  macro  include/linux/elf-em.h  51  #define EM_S390_OLD 0xA390
EM_CYGNUS_MN10300  macro  include/linux/elf-em.h  53  #define EM_CYGNUS_MN10300 0xbeef
_ASM_X86_ELF_H  macro  arch/x86/include/asm/elf.h  2  #define _ASM_X86_ELF_H
ELF_NGREG  macro  arch/x86/include/asm/elf.h  15  #define ELF_NGREG (sizeof(struct user_regs_struct) / sizeof(elf_greg_t))
R_386_NONE  macro  arch/x86/include/asm/elf.h  24  #define R_386_NONE 0
R_386_32  macro  arch/x86/include/asm/elf.h  25  #define R_386_32 1
R_386_PC32  macro  arch/x86/include/asm/elf.h  26  #define R_386_PC32 2
R_386_GOT32  macro  arch/x86/include/asm/elf.h  27  #define R_386_GOT32 3
R_386_PLT32  macro  arch/x86/include/asm/elf.h  28  #define R_386_PLT32 4
R_386_COPY  macro  arch/x86/include/asm/elf.h  29  #define R_386_COPY 5
R_386_GLOB_DAT  macro  arch/x86/include/asm/elf.h  30  #define R_386_GLOB_DAT 6
R_386_JMP_SLOT  macro  arch/x86/include/asm/elf.h  31  #define R_386_JMP_SLOT 7
R_386_RELATIVE  macro  arch/x86/include/asm/elf.h  32  #define R_386_RELATIVE 8
R_386_GOTOFF  macro  arch/x86/include/asm/elf.h  33  #define R_386_GOTOFF 9
R_386_GOTPC  macro  arch/x86/include/asm/elf.h  34  #define R_386_GOTPC 10
R_386_NUM  macro  arch/x86/include/asm/elf.h  35  #define R_386_NUM 11
ELF_CLASS  macro  arch/x86/include/asm/elf.h  70  #define ELF_CLASS ELFCLASS64
ELF_DATA  macro  arch/x86/include/asm/elf.h  71  #define ELF_DATA ELFDATA2LSB
ELF_ARCH  macro  arch/x86/include/asm/elf.h  72  #define ELF_ARCH EM_X86_64
R_X86_64_NONE  macro  arch/x86/include/asm/elf.h  47  #define R_X86_64_NONE 0
R_X86_64_64  macro  arch/x86/include/asm/elf.h  48  #define R_X86_64_64 1
R_X86_64_PC32  macro  arch/x86/include/asm/elf.h  49  #define R_X86_64_PC32 2
R_X86_64_GOT32  macro  arch/x86/include/asm/elf.h  50  #define R_X86_64_GOT32 3
R_X86_64_PLT32  macro  arch/x86/include/asm/elf.h  51  #define R_X86_64_PLT32 4
R_X86_64_COPY  macro  arch/x86/include/asm/elf.h  52  #define R_X86_64_COPY 5
R_X86_64_GLOB_DAT  macro  arch/x86/include/asm/elf.h  53  #define R_X86_64_GLOB_DAT 6
R_X86_64_JUMP_SLOT  macro  arch/x86/include/asm/elf.h  54  #define R_X86_64_JUMP_SLOT 7
R_X86_64_RELATIVE  macro  arch/x86/include/asm/elf.h  55  #define R_X86_64_RELATIVE 8
R_X86_64_GOTPCREL  macro  arch/x86/include/asm/elf.h  56  #define R_X86_64_GOTPCREL 9
R_X86_64_32  macro  arch/x86/include/asm/elf.h  58  #define R_X86_64_32 10
R_X86_64_32S  macro  arch/x86/include/asm/elf.h  59  #define R_X86_64_32S 11
R_X86_64_16  macro  arch/x86/include/asm/elf.h  60  #define R_X86_64_16 12
R_X86_64_PC16  macro  arch/x86/include/asm/elf.h  61  #define R_X86_64_PC16 13
R_X86_64_8  macro  arch/x86/include/asm/elf.h  62  #define R_X86_64_8 14
R_X86_64_PC8  macro  arch/x86/include/asm/elf.h  63  #define R_X86_64_PC8 15
R_X86_64_NUM  macro  arch/x86/include/asm/elf.h  65  #define R_X86_64_NUM 16
elf_check_arch_ia32  macro  arch/x86/include/asm/elf.h  83  #define elf_check_arch_ia32(x) (((x)->e_machine == EM_386) || ((x)->e_machine == EM_486))
elf_check_arch  macro  arch/x86/include/asm/elf.h  155  #define elf_check_arch(x) ((x)->e_machine == EM_X86_64)
ELF_PLAT_INIT  macro  arch/x86/include/asm/elf.h  177  #define ELF_PLAT_INIT(_r,load_addr) elf_common_init(&current->thread, _r, 0)
ELF_CORE_COPY_REGS_COMMON  macro  arch/x86/include/asm/elf.h  115  #define ELF_CORE_COPY_REGS_COMMON(pr_reg,regs) do { pr_reg[0] = regs->bx; pr_reg[1] = regs->cx; pr_reg[2] = regs->dx; pr_reg[3] = regs->si; pr_reg[4] = regs->di; pr_reg[5] = regs->bp; pr_reg[6] = regs->ax; pr_reg[7] = regs->ds & 0xffff; pr_reg[8] = regs->es & 0xffff; pr_reg[9] = regs->fs & 0xffff; pr_reg[11] = regs->orig_ax; pr_reg[12] = regs->ip; pr_reg[13] = regs->cs & 0xffff; pr_reg[14] = regs->flags; pr_reg[15] = regs->sp; pr_reg[16] = regs->ss & 0xffff; } while (0);
ELF_CORE_COPY_REGS  macro  arch/x86/include/asm/elf.h  198  #define ELF_CORE_COPY_REGS(pr_reg,regs) do { unsigned v; (pr_reg)[0] = (regs)->r15; (pr_reg)[1] = (regs)->r14; (pr_reg)[2] = (regs)->r13; (pr_reg)[3] = (regs)->r12; (pr_reg)[4] = (regs)->bp; (pr_reg)[5] = (regs)->bx; (pr_reg)[6] = (regs)->r11; (pr_reg)[7] = (regs)->r10; (pr_reg)[8] = (regs)->r9; (pr_reg)[9] = (regs)->r8; (pr_reg)[10] = (regs)->ax; (pr_reg)[11] = (regs)->cx; (pr_reg)[12] = (regs)->dx; (pr_reg)[13] = (regs)->si; (pr_reg)[14] = (regs)->di; (pr_reg)[15] = (regs)->orig_ax; (pr_reg)[16] = (regs)->ip; (pr_reg)[17] = (regs)->cs; (pr_reg)[18] = (regs)->flags; (pr_reg)[19] = (regs)->sp; (pr_reg)[20] = (regs)->ss; (pr_reg)[21] = current->thread.fs; (pr_reg)[22] = current->thread.gs; asm("movl %%ds,%0" : "=r" (v)); (pr_reg)[23] = v; asm("movl %%es,%0" : "=r" (v)); (pr_reg)[24] = v; asm("movl %%fs,%0" : "=r" (v)); (pr_reg)[25] = v; asm("movl %%gs,%0" : "=r" (v)); (pr_reg)[26] = v; } while (0);
ELF_CORE_COPY_KERNEL_REGS  macro  arch/x86/include/asm/elf.h  141  #define ELF_CORE_COPY_KERNEL_REGS(pr_reg,regs) do { ELF_CORE_COPY_REGS_COMMON(pr_reg, regs); savesegment(gs, pr_reg[10]); } while (0);
ELF_PLATFORM  macro  arch/x86/include/asm/elf.h  231  #define ELF_PLATFORM ("x86_64")
set_personality_64bit  prototype  arch/x86/include/asm/elf.h  232  extern void set_personality_64bit(void);
compat_elf_check_arch  macro  arch/x86/include/asm/elf.h  158  #define compat_elf_check_arch(x) (elf_check_arch_ia32(x) || (x)->e_machine == EM_X86_64)
elf_common_init  function  arch/x86/include/asm/elf.h  165  static inline void elf_common_init(struct thread_struct *t,struct pt_regs *regs, const u16 ds)
COMPAT_ELF_PLAT_INIT  macro  arch/x86/include/asm/elf.h  180  #define COMPAT_ELF_PLAT_INIT(regs,load_addr) elf_common_init(&current->thread, regs, __USER_DS)
start_thread_ia32  prototype  arch/x86/include/asm/elf.h  183  void start_thread_ia32(struct pt_regs *regs,u32 new_ip,u32 new_sp);
compat_start_thread  macro  arch/x86/include/asm/elf.h  184  #define compat_start_thread start_thread_ia32
set_personality_ia32  prototype  arch/x86/include/asm/elf.h  186  void set_personality_ia32(bool);
COMPAT_SET_PERSONALITY  macro  arch/x86/include/asm/elf.h  187  #define COMPAT_SET_PERSONALITY(ex) set_personality_ia32((ex).e_machine == EM_X86_64)
COMPAT_ELF_PLATFORM  macro  arch/x86/include/asm/elf.h  190  #define COMPAT_ELF_PLATFORM ("i686")
CORE_DUMP_USE_REGSET  macro  arch/x86/include/asm/elf.h  238  #define CORE_DUMP_USE_REGSET
ELF_EXEC_PAGESIZE  macro  arch/x86/include/asm/elf.h  239  #define ELF_EXEC_PAGESIZE 4096
ELF_ET_DYN_BASE  macro  arch/x86/include/asm/elf.h  246  #define ELF_ET_DYN_BASE (TASK_SIZE / 3 * 2)
ELF_HWCAP  macro  arch/x86/include/asm/elf.h  252  #define ELF_HWCAP (boot_cpu_data.x86_capability[0])
SET_PERSONALITY  macro  arch/x86/include/asm/elf.h  261  #define SET_PERSONALITY(ex) set_personality_64bit()
ARCH_DLINFO_IA32  macro  arch/x86/include/asm/elf.h  272  #define ARCH_DLINFO_IA32(vdso_enabled) do { if (vdso_enabled) { NEW_AUX_ENT(AT_SYSINFO,	VDSO_ENTRY); NEW_AUX_ENT(AT_SYSINFO_EHDR, VDSO_CURRENT_BASE); } } while (0)
STACK_RND_MASK  macro  arch/x86/include/asm/elf.h  295  #define STACK_RND_MASK (test_thread_flag(TIF_ADDR32) ? 0x7ff : 0x3fffff)
VDSO_HIGH_BASE  macro  arch/x86/include/asm/elf.h  292  #define VDSO_HIGH_BASE 0xffffe000U
ARCH_DLINFO  macro  arch/x86/include/asm/elf.h  297  #define ARCH_DLINFO do { if (vdso_enabled) NEW_AUX_ENT(AT_SYSINFO_EHDR, (unsigned long)current->mm->context.vdso); } while (0)
ARCH_DLINFO_X32  macro  arch/x86/include/asm/elf.h  304  #define ARCH_DLINFO_X32 do { if (vdso_enabled) NEW_AUX_ENT(AT_SYSINFO_EHDR, (unsigned long)current->mm->context.vdso); } while (0)
AT_SYSINFO  macro  arch/x86/include/asm/elf.h  311  #define AT_SYSINFO 32
COMPAT_ARCH_DLINFO  macro  arch/x86/include/asm/elf.h  313  #define COMPAT_ARCH_DLINFO if (test_thread_flag(TIF_X32)) ARCH_DLINFO_X32; else ARCH_DLINFO_IA32(sysctl_vsyscall32)
COMPAT_ELF_ET_DYN_BASE  macro  arch/x86/include/asm/elf.h  319  #define COMPAT_ELF_ET_DYN_BASE (TASK_UNMAPPED_BASE + 0x1000000)
VDSO_CURRENT_BASE  macro  arch/x86/include/asm/elf.h  323  #define VDSO_CURRENT_BASE ((unsigned long)current->mm->context.vdso)
VDSO_ENTRY  macro  arch/x86/include/asm/elf.h  325  #define VDSO_ENTRY ((unsigned long)VDSO32_SYMBOL(VDSO_CURRENT_BASE, vsyscall))
ARCH_HAS_SETUP_ADDITIONAL_PAGES  macro  arch/x86/include/asm/elf.h  330  #define ARCH_HAS_SETUP_ADDITIONAL_PAGES 1
arch_setup_additional_pages  prototype  arch/x86/include/asm/elf.h  331  extern int arch_setup_additional_pages(struct linux_binprm *bprm,int uses_interp);
x32_setup_additional_pages  prototype  arch/x86/include/asm/elf.h  333  extern int x32_setup_additional_pages(struct linux_binprm *bprm,int uses_interp);
syscall32_setup_pages  prototype  arch/x86/include/asm/elf.h  336  extern int syscall32_setup_pages(struct linux_binprm *,int exstack);
compat_arch_setup_additional_pages  macro  arch/x86/include/asm/elf.h  337  #define compat_arch_setup_additional_pages syscall32_setup_pages
arch_randomize_brk  macro  arch/x86/include/asm/elf.h  340  #define arch_randomize_brk arch_randomize_brk
mmap_is_ia32  function  arch/x86/include/asm/elf.h  345  static inline int mmap_is_ia32(void)
align_flags  enum  arch/x86/include/asm/elf.h  358  enum align_flags { ALIGN_VA_32 = BIT(0), ALIGN_VA_64 = BIT(1), ALIGN_VDSO = BIT(2), ALIGN_TOPDOWN = BIT(3), };
va_alignment  struct  arch/x86/include/asm/elf.h  365  struct va_alignment { int flags; unsigned long mask; } ____cacheline_aligned;
align_addr  prototype  arch/x86/include/asm/elf.h  371  extern unsigned long align_addr(unsigned long,struct file *,enum align_flags);
_SYSFS_H_  macro  include/linux/sysfs.h  13  #define _SYSFS_H_
attribute  struct  include/linux/sysfs.h  26  struct attribute { const char *name; umode_t mode; bool ignore_lockdep:1; struct lock_class_key *key; struct lock_class_key skey; };
sysfs_attr_init  macro  include/linux/sysfs.h  54  #define sysfs_attr_init(attr) do {} while(0)
attribute_group  struct  include/linux/sysfs.h  57  struct attribute_group { const char *name; umode_t (*is_visible)(struct kobject *,struct attribute *, int); struct attribute **attrs; };
__ATTR  macro  include/linux/sysfs.h  71  #define __ATTR(_name,_mode,_show,_store) { .attr = {.name = __stringify(_name), .mode = _mode }, .show	= _show, .store	= _store, }
__ATTR_RO  macro  include/linux/sysfs.h  77  #define __ATTR_RO(_name) { .attr	= { .name = __stringify(_name), .mode = 0444 }, .show	= _name##_show, }
__ATTR_NULL  macro  include/linux/sysfs.h  82  #define __ATTR_NULL { .attr = { .name = NULL } }
__ATTR_IGNORE_LOCKDEP  macro  include/linux/sysfs.h  92  #define __ATTR_IGNORE_LOCKDEP __ATTR
attr_name  macro  include/linux/sysfs.h  95  #define attr_name(_attr) (_attr).attr.name
bin_attribute  struct  include/linux/sysfs.h  100  struct bin_attribute { struct attribute attr; size_t size; ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,char *, loff_t, size_t); ssize_t (*write)(struct file *,struct kobject *, struct bin_attribute *,char *, loff_t, size_t); int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,struct vm_area_struct *vma); };
sysfs_bin_attr_init  macro  include/linux/sysfs.h  122  #define sysfs_bin_attr_init(bin_attr) sysfs_attr_init(&(bin_attr)->attr)
sysfs_ops  struct  include/linux/sysfs.h  124  struct sysfs_ops { ssize_t (*show)(struct kobject *, struct attribute *,char *); ssize_t (*store)(struct kobject *,struct attribute *,const char *, size_t); };
sysfs_schedule_callback  function  include/linux/sysfs.h  197  static inline int sysfs_schedule_callback(struct kobject *kobj,void (*func)(void *), void *data, struct module *owner)
sysfs_create_dir  function  include/linux/sysfs.h  203  static inline int sysfs_create_dir(struct kobject *kobj)
sysfs_remove_dir  function  include/linux/sysfs.h  208  static inline void sysfs_remove_dir(struct kobject *kobj)
sysfs_rename_dir  function  include/linux/sysfs.h  212  static inline int sysfs_rename_dir(struct kobject *kobj,const char *new_name)
sysfs_move_dir  function  include/linux/sysfs.h  217  static inline int sysfs_move_dir(struct kobject *kobj,struct kobject *new_parent_kobj)
sysfs_create_file  function  include/linux/sysfs.h  223  static inline int sysfs_create_file(struct kobject *kobj,const struct attribute *attr)
sysfs_create_files  function  include/linux/sysfs.h  229  static inline int sysfs_create_files(struct kobject *kobj,const struct attribute **attr)
sysfs_chmod_file  function  include/linux/sysfs.h  235  static inline int sysfs_chmod_file(struct kobject *kobj,const struct attribute *attr, umode_t mode)
sysfs_remove_file  function  include/linux/sysfs.h  241  static inline void sysfs_remove_file(struct kobject *kobj,const struct attribute *attr)
sysfs_remove_files  function  include/linux/sysfs.h  246  static inline void sysfs_remove_files(struct kobject *kobj,const struct attribute **attr)
sysfs_create_bin_file  function  include/linux/sysfs.h  251  static inline int sysfs_create_bin_file(struct kobject *kobj,const struct bin_attribute *attr)
sysfs_remove_bin_file  function  include/linux/sysfs.h  257  static inline void sysfs_remove_bin_file(struct kobject *kobj,const struct bin_attribute *attr)
sysfs_create_link  function  include/linux/sysfs.h  262  static inline int sysfs_create_link(struct kobject *kobj,struct kobject *target, const char *name)
sysfs_create_link_nowarn  function  include/linux/sysfs.h  268  static inline int sysfs_create_link_nowarn(struct kobject *kobj,struct kobject *target,const char *name)
sysfs_remove_link  function  include/linux/sysfs.h  275  static inline void sysfs_remove_link(struct kobject *kobj,const char *name)
sysfs_rename_link  function  include/linux/sysfs.h  279  static inline int sysfs_rename_link(struct kobject *k,struct kobject *t,const char *old_name, const char *new_name)
sysfs_delete_link  function  include/linux/sysfs.h  285  static inline void sysfs_delete_link(struct kobject *k,struct kobject *t,const char *name)
sysfs_create_group  function  include/linux/sysfs.h  290  static inline int sysfs_create_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_update_group  function  include/linux/sysfs.h  296  static inline int sysfs_update_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_remove_group  function  include/linux/sysfs.h  302  static inline void sysfs_remove_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_add_file_to_group  function  include/linux/sysfs.h  307  static inline int sysfs_add_file_to_group(struct kobject *kobj,const struct attribute *attr, const char *group)
sysfs_remove_file_from_group  function  include/linux/sysfs.h  313  static inline void sysfs_remove_file_from_group(struct kobject *kobj,const struct attribute *attr, const char *group)
sysfs_merge_group  function  include/linux/sysfs.h  318  static inline int sysfs_merge_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_unmerge_group  function  include/linux/sysfs.h  324  static inline void sysfs_unmerge_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_notify  function  include/linux/sysfs.h  329  static inline void sysfs_notify(struct kobject *kobj,const char *dir,const char *attr)
sysfs_notify_dirent  function  include/linux/sysfs.h  333  static inline void sysfs_notify_dirent(struct sysfs_dirent *sd)
sysfs_get_dirent  function  include/linux/sysfs.h  337  struct sysfs_dirent *sysfs_get_dirent(struct sysfs_dirent *parent_sd,const void *ns,const unsigned char *name)
sysfs_get  function  include/linux/sysfs.h  343  static inline struct sysfs_dirent *sysfs_get(struct sysfs_dirent *sd)
sysfs_put  function  include/linux/sysfs.h  347  static inline void sysfs_put(struct sysfs_dirent *sd)
sysfs_init  function  include/linux/sysfs.h  351  static inline int __must_check sysfs_init(void)
_LINUX_KOBJECT_NS_H  macro  include/linux/kobject_ns.h  18  #define _LINUX_KOBJECT_NS_H
kobj_ns_type  enum  include/linux/kobject_ns.h  27  enum kobj_ns_type { KOBJ_NS_TYPE_NONE = 0, KOBJ_NS_TYPE_NET, KOBJ_NS_TYPES };
kobj_ns_type_operations  struct  include/linux/kobject_ns.h  40  struct kobj_ns_type_operations { enum kobj_ns_type type; void *(*grab_current_ns)(void); const void *(*netlink_ns)(struct sock *sk); const void *(*initial_ns)(void); void (*drop_ns)(void *); };
kobj_ns_type_register  prototype  include/linux/kobject_ns.h  48  int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
kobj_ns_type_registered  prototype  include/linux/kobject_ns.h  49  int kobj_ns_type_registered(enum kobj_ns_type type);
kobj_child_ns_ops  prototype  include/linux/kobject_ns.h  50  const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
kobj_ns_ops  prototype  include/linux/kobject_ns.h  51  const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);
kobj_ns_grab_current  prototype  include/linux/kobject_ns.h  53  void *kobj_ns_grab_current(enum kobj_ns_type type);
kobj_ns_netlink  prototype  include/linux/kobject_ns.h  54  const void *kobj_ns_netlink(enum kobj_ns_type type,struct sock *sk);
kobj_ns_initial  prototype  include/linux/kobject_ns.h  55  const void *kobj_ns_initial(enum kobj_ns_type type);
kobj_ns_drop  prototype  include/linux/kobject_ns.h  56  void kobj_ns_drop(enum kobj_ns_type type,void *ns);
_LINUX_WAIT_H  macro  include/linux/wait.h  2  #define _LINUX_WAIT_H
WNOHANG  macro  include/linux/wait.h  4  #define WNOHANG 0x00000001
WUNTRACED  macro  include/linux/wait.h  5  #define WUNTRACED 0x00000002
WSTOPPED  macro  include/linux/wait.h  6  #define WSTOPPED WUNTRACED
WEXITED  macro  include/linux/wait.h  7  #define WEXITED 0x00000004
WCONTINUED  macro  include/linux/wait.h  8  #define WCONTINUED 0x00000008
WNOWAIT  macro  include/linux/wait.h  9  #define WNOWAIT 0x01000000
__WNOTHREAD  macro  include/linux/wait.h  11  #define __WNOTHREAD 0x20000000
__WALL  macro  include/linux/wait.h  12  #define __WALL 0x40000000
__WCLONE  macro  include/linux/wait.h  13  #define __WCLONE 0x80000000
P_ALL  macro  include/linux/wait.h  16  #define P_ALL 0
P_PID  macro  include/linux/wait.h  17  #define P_PID 1
P_PGID  macro  include/linux/wait.h  18  #define P_PGID 2
default_wake_function  prototype  include/linux/wait.h  29  int default_wake_function(wait_queue_t *wait,unsigned mode,int flags,void *key);
__wait_queue  struct  include/linux/wait.h  31  struct __wait_queue { unsigned int flags; #define WQ_FLAG_EXCLUSIVE 0x01 wait_queue_func_t func; struct list_head task_list; };
wait_bit_key  struct  include/linux/wait.h  39  struct wait_bit_key { void *flags; int bit_nr; };
wait_bit_queue  struct  include/linux/wait.h  44  struct wait_bit_queue { struct wait_bit_key key; wait_queue_t wait; };
__wait_queue_head  struct  include/linux/wait.h  49  struct __wait_queue_head { spinlock_t lock; struct list_head task_list; };
__WAITQUEUE_INITIALIZER  macro  include/linux/wait.h  61  #define __WAITQUEUE_INITIALIZER(name,tsk) { .private	= tsk, .func		= default_wake_function, .task_list	= { NULL, NULL } }
DECLARE_WAITQUEUE  macro  include/linux/wait.h  66  #define DECLARE_WAITQUEUE(name,tsk) wait_queue_t name = __WAITQUEUE_INITIALIZER(name, tsk)
__WAIT_QUEUE_HEAD_INITIALIZER  macro  include/linux/wait.h  69  #define __WAIT_QUEUE_HEAD_INITIALIZER(name) { .lock		= __SPIN_LOCK_UNLOCKED(name.lock), .task_list	= { &(name).task_list, &(name).task_list } }
DECLARE_WAIT_QUEUE_HEAD  macro  include/linux/wait.h  73  #define DECLARE_WAIT_QUEUE_HEAD(name) wait_queue_head_t name = __WAIT_QUEUE_HEAD_INITIALIZER(name)
__WAIT_BIT_KEY_INITIALIZER  macro  include/linux/wait.h  76  #define __WAIT_BIT_KEY_INITIALIZER(word,bit) { .flags = word, .bit_nr = bit, }
__init_waitqueue_head  prototype  include/linux/wait.h  79  extern void __init_waitqueue_head(wait_queue_head_t *q,const char *name,struct lock_class_key *);
init_waitqueue_head  macro  include/linux/wait.h  81  #define init_waitqueue_head(q) do { static struct lock_class_key __key; __init_waitqueue_head((q), #q, &__key); } while (0)
__WAIT_QUEUE_HEAD_INIT_ONSTACK  macro  include/linux/wait.h  89  # define __WAIT_QUEUE_HEAD_INIT_ONSTACK(name) ({ init_waitqueue_head(&name); name; })
DECLARE_WAIT_QUEUE_HEAD_ONSTACK  macro  include/linux/wait.h  94  # define DECLARE_WAIT_QUEUE_HEAD_ONSTACK(name) DECLARE_WAIT_QUEUE_HEAD(name)
init_waitqueue_entry  function  include/linux/wait.h  97  static inline void init_waitqueue_entry(wait_queue_t *q,struct task_struct *p)
init_waitqueue_func_entry  function  include/linux/wait.h  104  static inline void init_waitqueue_func_entry(wait_queue_t *q,wait_queue_func_t func)
waitqueue_active  function  include/linux/wait.h  112  static inline int waitqueue_active(wait_queue_head_t *q)
add_wait_queue  prototype  include/linux/wait.h  117  extern void add_wait_queue(wait_queue_head_t *q,wait_queue_t *wait);
add_wait_queue_exclusive  prototype  include/linux/wait.h  118  extern void add_wait_queue_exclusive(wait_queue_head_t *q,wait_queue_t *wait);
remove_wait_queue  prototype  include/linux/wait.h  119  extern void remove_wait_queue(wait_queue_head_t *q,wait_queue_t *wait);
__add_wait_queue  function  include/linux/wait.h  121  static inline void __add_wait_queue(wait_queue_head_t *head,wait_queue_t *new)
__add_wait_queue_exclusive  function  include/linux/wait.h  129  static inline void __add_wait_queue_exclusive(wait_queue_head_t *q,wait_queue_t *wait)
__add_wait_queue_tail  function  include/linux/wait.h  136  static inline void __add_wait_queue_tail(wait_queue_head_t *head,wait_queue_t *new)
__add_wait_queue_tail_exclusive  function  include/linux/wait.h  142  static inline void __add_wait_queue_tail_exclusive(wait_queue_head_t *q,wait_queue_t *wait)
__remove_wait_queue  function  include/linux/wait.h  149  static inline void __remove_wait_queue(wait_queue_head_t *head,wait_queue_t *old)
__wake_up  prototype  include/linux/wait.h  155  void __wake_up(wait_queue_head_t *q,unsigned int mode,int nr,void *key);
__wake_up_locked_key  prototype  include/linux/wait.h  156  void __wake_up_locked_key(wait_queue_head_t *q,unsigned int mode,void *key);
__wake_up_sync_key  prototype  include/linux/wait.h  157  void __wake_up_sync_key(wait_queue_head_t *q,unsigned int mode,int nr,void *key);
__wake_up_locked  prototype  include/linux/wait.h  159  void __wake_up_locked(wait_queue_head_t *q,unsigned int mode,int nr);
__wake_up_sync  prototype  include/linux/wait.h  160  void __wake_up_sync(wait_queue_head_t *q,unsigned int mode,int nr);
__wake_up_bit  prototype  include/linux/wait.h  161  void __wake_up_bit(wait_queue_head_t *,void *,int);
__wait_on_bit  prototype  include/linux/wait.h  162  int __wait_on_bit(wait_queue_head_t *,struct wait_bit_queue *,int (*)(void *),unsigned);
__wait_on_bit_lock  prototype  include/linux/wait.h  163  int __wait_on_bit_lock(wait_queue_head_t *,struct wait_bit_queue *,int (*)(void *),unsigned);
wake_up_bit  prototype  include/linux/wait.h  164  void wake_up_bit(void *,int);
out_of_line_wait_on_bit  prototype  include/linux/wait.h  165  int out_of_line_wait_on_bit(void *,int,int (*)(void *),unsigned);
out_of_line_wait_on_bit_lock  prototype  include/linux/wait.h  166  int out_of_line_wait_on_bit_lock(void *,int,int (*)(void *),unsigned);
bit_waitqueue  prototype  include/linux/wait.h  167  wait_queue_head_t *bit_waitqueue(void *,int);
wake_up  macro  include/linux/wait.h  169  #define wake_up(x) __wake_up(x,TASK_NORMAL,1,NULL)
wake_up_nr  macro  include/linux/wait.h  170  #define wake_up_nr(x,nr) __wake_up(x,TASK_NORMAL,nr,NULL)
wake_up_all  macro  include/linux/wait.h  171  #define wake_up_all(x) __wake_up(x,TASK_NORMAL,0,NULL)
wake_up_locked  macro  include/linux/wait.h  172  #define wake_up_locked(x) __wake_up_locked((x),TASK_NORMAL,1)
wake_up_all_locked  macro  include/linux/wait.h  173  #define wake_up_all_locked(x) __wake_up_locked((x),TASK_NORMAL,0)
wake_up_interruptible  macro  include/linux/wait.h  175  #define wake_up_interruptible(x) __wake_up(x,TASK_INTERRUPTIBLE,1,NULL)
wake_up_interruptible_nr  macro  include/linux/wait.h  176  #define wake_up_interruptible_nr(x,nr) __wake_up(x,TASK_INTERRUPTIBLE,nr,NULL)
wake_up_interruptible_all  macro  include/linux/wait.h  177  #define wake_up_interruptible_all(x) __wake_up(x,TASK_INTERRUPTIBLE,0,NULL)
wake_up_interruptible_sync  macro  include/linux/wait.h  178  #define wake_up_interruptible_sync(x) __wake_up_sync((x),TASK_INTERRUPTIBLE,1)
wake_up_poll  macro  include/linux/wait.h  183  #define wake_up_poll(x,m) __wake_up(x, TASK_NORMAL, 1, (void *) (m))
wake_up_locked_poll  macro  include/linux/wait.h  185  #define wake_up_locked_poll(x,m) __wake_up_locked_key((x), TASK_NORMAL, (void *) (m))
wake_up_interruptible_poll  macro  include/linux/wait.h  187  #define wake_up_interruptible_poll(x,m) __wake_up(x, TASK_INTERRUPTIBLE, 1, (void *) (m))
wake_up_interruptible_sync_poll  macro  include/linux/wait.h  189  #define wake_up_interruptible_sync_poll(x,m) __wake_up_sync_key((x), TASK_INTERRUPTIBLE, 1, (void *) (m))
__wait_event  macro  include/linux/wait.h  192  #define __wait_event(wq,condition) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_UNINTERRUPTIBLE); if (condition) break; schedule(); } finish_wait(&wq, &__wait); } while (0)
wait_event  macro  include/linux/wait.h  217  #define wait_event(wq,condition) do { if (condition) break; __wait_event(wq, condition); } while (0)
__wait_event_timeout  macro  include/linux/wait.h  224  #define __wait_event_timeout(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_UNINTERRUPTIBLE); if (condition) break; ret = schedule_timeout(ret); if (!ret) break; } finish_wait(&wq, &__wait); } while (0)
wait_event_timeout  macro  include/linux/wait.h  255  #define wait_event_timeout(wq,condition,timeout) ({ long __ret = timeout; if (!(condition)) __wait_event_timeout(wq, condition, __ret); __ret; })
__wait_event_interruptible  macro  include/linux/wait.h  263  #define __wait_event_interruptible(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_INTERRUPTIBLE); if (condition) break; if (!signal_pending(current)) { schedule(); continue; } ret = -ERESTARTSYS; break; } finish_wait(&wq, &__wait); } while (0)
wait_event_interruptible  macro  include/linux/wait.h  296  #define wait_event_interruptible(wq,condition) ({ int __ret = 0; if (!(condition)) __wait_event_interruptible(wq, condition, __ret); __ret; })
__wait_event_interruptible_timeout  macro  include/linux/wait.h  304  #define __wait_event_interruptible_timeout(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_INTERRUPTIBLE); if (condition) break; if (!signal_pending(current)) { ret = schedule_timeout(ret); if (!ret) break; continue; } ret = -ERESTARTSYS; break; } finish_wait(&wq, &__wait); } while (0)
wait_event_interruptible_timeout  macro  include/linux/wait.h  341  #define wait_event_interruptible_timeout(wq,condition,timeout) ({ long __ret = timeout; if (!(condition)) __wait_event_interruptible_timeout(wq, condition, __ret); __ret; })
__wait_event_interruptible_exclusive  macro  include/linux/wait.h  349  #define __wait_event_interruptible_exclusive(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait_exclusive(&wq, &__wait, TASK_INTERRUPTIBLE); if (condition) { finish_wait(&wq, &__wait); break; } if (!signal_pending(current)) { schedule(); continue; } ret = -ERESTARTSYS; abort_exclusive_wait(&wq, &__wait, TASK_INTERRUPTIBLE, NULL); break; } } while (0)
wait_event_interruptible_exclusive  macro  include/linux/wait.h  371  #define wait_event_interruptible_exclusive(wq,condition) ({ int __ret = 0; if (!(condition)) __wait_event_interruptible_exclusive(wq, condition, __ret); __ret; })
__wait_event_interruptible_locked  macro  include/linux/wait.h  380  #define __wait_event_interruptible_locked(wq,condition,exclusive,irq) ({ int __ret = 0; DEFINE_WAIT(__wait); if (exclusive) __wait.flags |= WQ_FLAG_EXCLUSIVE; do { if (likely(list_empty(&__wait.task_list))) __add_wait_queue_tail(&(wq), &__wait); set_current_state(TASK_INTERRUPTIBLE); if (signal_pending(current)) { __ret = -ERESTARTSYS; break; } if (irq) spin_unlock_irq(&(wq).lock); else spin_unlock(&(wq).lock); schedule(); if (irq) spin_lock_irq(&(wq).lock); else spin_lock(&(wq).lock); } while (!(condition)); __remove_wait_queue(&(wq), &__wait); __set_current_state(TASK_RUNNING); __ret; })
wait_event_interruptible_locked  macro  include/linux/wait.h  433  #define wait_event_interruptible_locked(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 0, 0))
wait_event_interruptible_locked_irq  macro  include/linux/wait.h  460  #define wait_event_interruptible_locked_irq(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 0, 1))
wait_event_interruptible_exclusive_locked  macro  include/linux/wait.h  491  #define wait_event_interruptible_exclusive_locked(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 1, 0))
wait_event_interruptible_exclusive_locked_irq  macro  include/linux/wait.h  522  #define wait_event_interruptible_exclusive_locked_irq(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 1, 1))
__wait_event_killable  macro  include/linux/wait.h  528  #define __wait_event_killable(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_KILLABLE); if (condition) break; if (!fatal_signal_pending(current)) { schedule(); continue; } ret = -ERESTARTSYS; break; } finish_wait(&wq, &__wait); } while (0)
wait_event_killable  macro  include/linux/wait.h  561  #define wait_event_killable(wq,condition) ({ int __ret = 0; if (!(condition)) __wait_event_killable(wq, condition, __ret); __ret; })
sleep_on  prototype  include/linux/wait.h  574  extern void sleep_on(wait_queue_head_t *q);
sleep_on_timeout  prototype  include/linux/wait.h  575  extern long sleep_on_timeout(wait_queue_head_t *q,signed long timeout);
interruptible_sleep_on  prototype  include/linux/wait.h  577  extern void interruptible_sleep_on(wait_queue_head_t *q);
interruptible_sleep_on_timeout  prototype  include/linux/wait.h  578  extern long interruptible_sleep_on_timeout(wait_queue_head_t *q,signed long timeout);
prepare_to_wait  prototype  include/linux/wait.h  584  void prepare_to_wait(wait_queue_head_t *q,wait_queue_t *wait,int state);
prepare_to_wait_exclusive  prototype  include/linux/wait.h  585  void prepare_to_wait_exclusive(wait_queue_head_t *q,wait_queue_t *wait,int state);
finish_wait  prototype  include/linux/wait.h  586  void finish_wait(wait_queue_head_t *q,wait_queue_t *wait);
abort_exclusive_wait  prototype  include/linux/wait.h  587  void abort_exclusive_wait(wait_queue_head_t *q,wait_queue_t *wait,unsigned int mode, void *key);
autoremove_wake_function  prototype  include/linux/wait.h  589  int autoremove_wake_function(wait_queue_t *wait,unsigned mode,int sync,void *key);
wake_bit_function  prototype  include/linux/wait.h  590  int wake_bit_function(wait_queue_t *wait,unsigned mode,int sync,void *key);
DEFINE_WAIT_FUNC  macro  include/linux/wait.h  592  #define DEFINE_WAIT_FUNC(name,function) wait_queue_t name = { .private	= current, .func		= function, .task_list	= LIST_HEAD_INIT((name).task_list), }
DEFINE_WAIT  macro  include/linux/wait.h  599  #define DEFINE_WAIT(name) DEFINE_WAIT_FUNC(name,autoremove_wake_function)
DEFINE_WAIT_BIT  macro  include/linux/wait.h  601  #define DEFINE_WAIT_BIT(name,word,bit) struct wait_bit_queue name = { .key = __WAIT_BIT_KEY_INITIALIZER(word, bit), .wait	= { .private	= current, .func		= wake_bit_function, .task_list	= LIST_HEAD_INIT((name).wait.task_list), }, }
init_wait  macro  include/linux/wait.h  612  #define init_wait(wait) do { (wait)->private = current; (wait)->func = autoremove_wake_function; INIT_LIST_HEAD(&(wait)->task_list); (wait)->flags = 0; } while (0)
wait_on_bit  function  include/linux/wait.h  634  static inline int wait_on_bit(void *word,int bit,int (*action)(void *), unsigned mode)
wait_on_bit_lock  function  include/linux/wait.h  658  static inline int wait_on_bit_lock(void *word,int bit,int (*action)(void *), unsigned mode)
_LINUX_PFN_H_  macro  include/linux/pfn.h  2  #define _LINUX_PFN_H_
PFN_ALIGN  macro  include/linux/pfn.h  8  #define PFN_ALIGN(x) (((unsigned long)(x) + (PAGE_SIZE - 1)) & PAGE_MASK)
PFN_UP  macro  include/linux/pfn.h  9  #define PFN_UP(x) (((x) + PAGE_SIZE-1) >> PAGE_SHIFT)
PFN_DOWN  macro  include/linux/pfn.h  10  #define PFN_DOWN(x) ((x) >> PAGE_SHIFT)
PFN_PHYS  macro  include/linux/pfn.h  11  #define PFN_PHYS(x) ((phys_addr_t)(x) << PAGE_SHIFT)
_ASM_X86_PERCPU_H  macro  arch/x86/include/asm/percpu.h  2  #define _ASM_X86_PERCPU_H
__percpu_seg  macro  arch/x86/include/asm/percpu.h  8  #define __percpu_seg fs
__percpu_mov_op  macro  arch/x86/include/asm/percpu.h  9  #define __percpu_mov_op movl
PER_CPU  macro  arch/x86/include/asm/percpu.h  32  #define PER_CPU(var,reg) __percpu_mov_op $var,reg
PER_CPU_VAR  macro  arch/x86/include/asm/percpu.h  33  #define PER_CPU_VAR(var) var
INIT_PER_CPU_VAR  macro  arch/x86/include/asm/percpu.h  39  #define INIT_PER_CPU_VAR(var) var
__percpu_prefix  macro  arch/x86/include/asm/percpu.h  65  #define __percpu_prefix ""
__my_cpu_offset  macro  arch/x86/include/asm/percpu.h  49  #define __my_cpu_offset this_cpu_read(this_cpu_off)
__this_cpu_ptr  macro  arch/x86/include/asm/percpu.h  55  #define __this_cpu_ptr(ptr) ({ unsigned long tcp_ptr__; __verify_pcpu_ptr(ptr); asm volatile("add " __percpu_arg(1) ", %0" : "=r" (tcp_ptr__) : "m" (this_cpu_off), "0" (ptr)); (typeof(*(ptr)) __kernel __force *)tcp_ptr__; })
__percpu_arg  macro  arch/x86/include/asm/percpu.h  68  #define __percpu_arg(x) __percpu_prefix "%P" #x
DECLARE_INIT_PER_CPU  macro  arch/x86/include/asm/percpu.h  77  #define DECLARE_INIT_PER_CPU(var) extern typeof(var) init_per_cpu_var(var)
init_per_cpu_var  macro  arch/x86/include/asm/percpu.h  83  #define init_per_cpu_var(var) var
__bad_percpu_size  prototype  arch/x86/include/asm/percpu.h  88  extern void __bad_percpu_size(void);
percpu_to_op  macro  arch/x86/include/asm/percpu.h  90  #define percpu_to_op(op,var,val) do { typedef typeof(var) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (val); (void)pto_tmp__; } switch (sizeof(var)) { case 1: asm(op "b %1,"__percpu_arg(0) : "+m" (var) : "qi" ((pto_T__)(val))); break; case 2: asm(op "w %1,"__percpu_arg(0) : "+m" (var) : "ri" ((pto_T__)(val))); break; case 4: asm(op "l %1,"__percpu_arg(0) : "+m" (var) : "ri" ((pto_T__)(val))); break; case 8: asm(op "q %1,"__percpu_arg(0) : "+m" (var) : "re" ((pto_T__)(val))); break; default: __bad_percpu_size(); } } while (0)
percpu_add_op  macro  arch/x86/include/asm/percpu.h  127  #define percpu_add_op(var,val) do { typedef typeof(var) pao_T__; const int pao_ID__ = (__builtin_constant_p(val) && ((val) == 1 || (val) == -1)) ? (val) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (val); (void)pao_tmp__; } switch (sizeof(var)) { case 1: if (pao_ID__ == 1) asm("incb "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decb "__percpu_arg(0) : "+m" (var)); else asm("addb %1, "__percpu_arg(0) : "+m" (var) : "qi" ((pao_T__)(val))); break; case 2: if (pao_ID__ == 1) asm("incw "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decw "__percpu_arg(0) : "+m" (var)); else asm("addw %1, "__percpu_arg(0) : "+m" (var) : "ri" ((pao_T__)(val))); break; case 4: if (pao_ID__ == 1) asm("incl "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decl "__percpu_arg(0) : "+m" (var)); else asm("addl %1, "__percpu_arg(0) : "+m" (var) : "ri" ((pao_T__)(val))); break; case 8: if (pao_ID__ == 1) asm("incq "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decq "__percpu_arg(0) : "+m" (var)); else asm("addq %1, "__percpu_arg(0) : "+m" (var) : "re" ((pao_T__)(val))); break; default: __bad_percpu_size(); } } while (0)
percpu_from_op  macro  arch/x86/include/asm/percpu.h  182  #define percpu_from_op(op,var,constraint) ({ typeof(var) pfo_ret__; switch (sizeof(var)) { case 1: asm(op "b "__percpu_arg(1)",%0" : "=q" (pfo_ret__) : constraint); break; case 2: asm(op "w "__percpu_arg(1)",%0" : "=r" (pfo_ret__) : constraint); break; case 4: asm(op "l "__percpu_arg(1)",%0" : "=r" (pfo_ret__) : constraint); break; case 8: asm(op "q "__percpu_arg(1)",%0" : "=r" (pfo_ret__) : constraint); break; default: __bad_percpu_size(); } pfo_ret__; })
percpu_unary_op  macro  arch/x86/include/asm/percpu.h  211  #define percpu_unary_op(op,var) ({ switch (sizeof(var)) { case 1: asm(op "b "__percpu_arg(0) : "+m" (var)); break; case 2: asm(op "w "__percpu_arg(0) : "+m" (var)); break; case 4: asm(op "l "__percpu_arg(0) : "+m" (var)); break; case 8: asm(op "q "__percpu_arg(0) : "+m" (var)); break; default: __bad_percpu_size(); } })
percpu_add_return_op  macro  arch/x86/include/asm/percpu.h  237  #define percpu_add_return_op(var,val) ({ typeof(var) paro_ret__ = val; switch (sizeof(var)) { case 1: asm("xaddb %0, "__percpu_arg(1) : "+q" (paro_ret__), "+m" (var) : : "memory"); break; case 2: asm("xaddw %0, "__percpu_arg(1) : "+r" (paro_ret__), "+m" (var) : : "memory"); break; case 4: asm("xaddl %0, "__percpu_arg(1) : "+r" (paro_ret__), "+m" (var) : : "memory"); break; case 8: asm("xaddq %0, "__percpu_arg(1) : "+re" (paro_ret__), "+m" (var) : : "memory"); break; default: __bad_percpu_size(); } paro_ret__ += val; paro_ret__; })
percpu_xchg_op  macro  arch/x86/include/asm/percpu.h  272  #define percpu_xchg_op(var,nval) ({ typeof(var) pxo_ret__; typeof(var) pxo_new__ = (nval); switch (sizeof(var)) { case 1: asm("\n\tmov "__percpu_arg(1)",%%al" "\n1:\tcmpxchgb %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "q" (pxo_new__) : "memory"); break; case 2: asm("\n\tmov "__percpu_arg(1)",%%ax" "\n1:\tcmpxchgw %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "r" (pxo_new__) : "memory"); break; case 4: asm("\n\tmov "__percpu_arg(1)",%%eax" "\n1:\tcmpxchgl %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "r" (pxo_new__) : "memory"); break; case 8: asm("\n\tmov "__percpu_arg(1)",%%rax" "\n1:\tcmpxchgq %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "r" (pxo_new__) : "memory"); break; default: __bad_percpu_size(); } pxo_ret__; })
percpu_cmpxchg_op  macro  arch/x86/include/asm/percpu.h  318  #define percpu_cmpxchg_op(var,oval,nval) ({ typeof(var) pco_ret__; typeof(var) pco_old__ = (oval); typeof(var) pco_new__ = (nval); switch (sizeof(var)) { case 1: asm("cmpxchgb %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "q" (pco_new__), "0" (pco_old__) : "memory"); break; case 2: asm("cmpxchgw %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; case 4: asm("cmpxchgl %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; case 8: asm("cmpxchgq %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; default: __bad_percpu_size(); } pco_ret__; })
this_cpu_read_stable  macro  arch/x86/include/asm/percpu.h  362  #define this_cpu_read_stable(var) percpu_from_op("mov",var,"p" (&(var)))
percpu_cmpxchg8b_double  macro  arch/x86/include/asm/percpu.h  427  #define percpu_cmpxchg8b_double(pcp1,pcp2,o1,o2,n1,n2) ({ bool __ret; typeof(pcp1) __o1 = (o1), __n1 = (n1); typeof(pcp2) __o2 = (o2), __n2 = (n2); asm volatile("cmpxchg8b "__percpu_arg(1)"\n\tsetz %0\n\t" : "=a" (__ret), "+m" (pcp1), "+m" (pcp2), "+d" (__o2) :  "b" (__n1), "c" (__n2), "a" (__o1)); __ret; })
percpu_cmpxchg16b_double  macro  arch/x86/include/asm/percpu.h  473  #define percpu_cmpxchg16b_double(pcp1,pcp2,o1,o2,n1,n2) ({ bool __ret; typeof(pcp1) __o1 = (o1), __n1 = (n1); typeof(pcp2) __o2 = (o2), __n2 = (n2); alternative_io("leaq %P1,%%rsi\n\tcall this_cpu_cmpxchg16b_emu\n\t", "cmpxchg16b " __percpu_arg(1) "\n\tsetz %0\n\t", X86_FEATURE_CX16, ASM_OUTPUT2("=a" (__ret), "+m" (pcp1), "+m" (pcp2), "+d" (__o2)), "b" (__n1), "c" (__n2), "a" (__o1) : "rsi"); __ret; })
x86_test_and_clear_bit_percpu  macro  arch/x86/include/asm/percpu.h  493  #define x86_test_and_clear_bit_percpu(bit,var) ({ int old__; asm volatile("btr %2,"__percpu_arg(1)"\n\tsbbl %0,%0" : "=r" (old__), "+m" (var) : "dIr" (bit)); old__; })
x86_this_cpu_constant_test_bit  function  arch/x86/include/asm/percpu.h  502  static __always_inline int x86_this_cpu_constant_test_bit(unsigned int nr,const unsigned long __percpu *addr)
x86_this_cpu_variable_test_bit  function  arch/x86/include/asm/percpu.h  514  static inline int x86_this_cpu_variable_test_bit(int nr,const unsigned long __percpu *addr)
x86_this_cpu_test_bit  macro  arch/x86/include/asm/percpu.h  527  #define x86_this_cpu_test_bit(nr,addr) (__builtin_constant_p((nr)) ? x86_this_cpu_constant_test_bit((nr), (addr)) : x86_this_cpu_variable_test_bit((nr), (addr)))
DEFINE_EARLY_PER_CPU  macro  arch/x86/include/asm/percpu.h  570  #define DEFINE_EARLY_PER_CPU(_type,_name,_initvalue) DEFINE_PER_CPU(_type, _name) = _initvalue
EXPORT_EARLY_PER_CPU_SYMBOL  macro  arch/x86/include/asm/percpu.h  573  #define EXPORT_EARLY_PER_CPU_SYMBOL(_name) EXPORT_PER_CPU_SYMBOL(_name)
DECLARE_EARLY_PER_CPU  macro  arch/x86/include/asm/percpu.h  576  #define DECLARE_EARLY_PER_CPU(_type,_name) DECLARE_PER_CPU(_type, _name)
early_per_cpu_ptr  macro  arch/x86/include/asm/percpu.h  580  #define early_per_cpu_ptr(_name) NULL
early_per_cpu_map  macro  arch/x86/include/asm/percpu.h  563  #define early_per_cpu_map(_name,_idx) (_name##_early_map[_idx])
early_per_cpu  macro  arch/x86/include/asm/percpu.h  579  #define early_per_cpu(_name,_cpu) per_cpu(_name,_cpu)
__ASM_GENERIC_MODULE_H  macro  include/asm-generic/module.h  2  #define __ASM_GENERIC_MODULE_H
mod_arch_specific  struct  include/asm-generic/module.h  8  struct mod_arch_specific { };
Elf_Shdr  macro  include/asm-generic/module.h  17  #define Elf_Shdr Elf32_Shdr
Elf_Sym  macro  include/asm-generic/module.h  18  #define Elf_Sym Elf32_Sym
Elf_Ehdr  macro  include/asm-generic/module.h  19  #define Elf_Ehdr Elf32_Ehdr
_ASM_X86_LINKAGE_H  macro  arch/x86/include/asm/linkage.h  2  #define _ASM_X86_LINKAGE_H
__asmlinkage_protect_n  macro  arch/x86/include/asm/linkage.h  25  #define __asmlinkage_protect_n(ret,args...) __asm__ __volatile__ ("" : "=r" (ret) : "0" (ret), ##args)
__asmlinkage_protect0  macro  arch/x86/include/asm/linkage.h  27  #define __asmlinkage_protect0(ret) __asmlinkage_protect_n(ret)
__asmlinkage_protect1  macro  arch/x86/include/asm/linkage.h  29  #define __asmlinkage_protect1(ret,arg1) __asmlinkage_protect_n(ret, "g" (arg1))
__asmlinkage_protect2  macro  arch/x86/include/asm/linkage.h  31  #define __asmlinkage_protect2(ret,arg1,arg2) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2))
__asmlinkage_protect3  macro  arch/x86/include/asm/linkage.h  33  #define __asmlinkage_protect3(ret,arg1,arg2,arg3) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3))
__asmlinkage_protect4  macro  arch/x86/include/asm/linkage.h  35  #define __asmlinkage_protect4(ret,arg1,arg2,arg3,arg4) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3), "g" (arg4))
__asmlinkage_protect5  macro  arch/x86/include/asm/linkage.h  38  #define __asmlinkage_protect5(ret,arg1,arg2,arg3,arg4,arg5) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3), "g" (arg4), "g" (arg5))
__asmlinkage_protect6  macro  arch/x86/include/asm/linkage.h  41  #define __asmlinkage_protect6(ret,arg1,arg2,arg3,arg4,arg5,arg6) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3), "g" (arg4), "g" (arg5), "g" (arg6))
GLOBAL  macro  arch/x86/include/asm/linkage.h  49  #define GLOBAL(name) .globl name; name:
_LINUX_POSIX_TYPES_H  macro  include/linux/posix_types.h  2  #define _LINUX_POSIX_TYPES_H
__FD_SETSIZE  macro  include/linux/posix_types.h  22  #define __FD_SETSIZE 1024
__kernel_fd_set  struct  include/linux/posix_types.h  24  typedef struct { unsigned long fds_bits[__FD_SETSIZE / (8 * sizeof(long))]; } __kernel_fd_set;
_LINUX_BYTEORDER_LITTLE_ENDIAN_H  macro  include/linux/byteorder/little_endian.h  2  #define _LINUX_BYTEORDER_LITTLE_ENDIAN_H
__LITTLE_ENDIAN  macro  include/linux/byteorder/little_endian.h  5  #define __LITTLE_ENDIAN 1234
__LITTLE_ENDIAN_BITFIELD  macro  include/linux/byteorder/little_endian.h  8  #define __LITTLE_ENDIAN_BITFIELD
__constant_htonl  macro  include/linux/byteorder/little_endian.h  14  #define __constant_htonl(x) ((__force __be32)___constant_swab32((x)))
__constant_ntohl  macro  include/linux/byteorder/little_endian.h  15  #define __constant_ntohl(x) ___constant_swab32((__force __be32)(x))
__constant_htons  macro  include/linux/byteorder/little_endian.h  16  #define __constant_htons(x) ((__force __be16)___constant_swab16((x)))
__constant_ntohs  macro  include/linux/byteorder/little_endian.h  17  #define __constant_ntohs(x) ___constant_swab16((__force __be16)(x))
__constant_cpu_to_le64  macro  include/linux/byteorder/little_endian.h  18  #define __constant_cpu_to_le64(x) ((__force __le64)(__u64)(x))
__constant_le64_to_cpu  macro  include/linux/byteorder/little_endian.h  19  #define __constant_le64_to_cpu(x) ((__force __u64)(__le64)(x))
__constant_cpu_to_le32  macro  include/linux/byteorder/little_endian.h  20  #define __constant_cpu_to_le32(x) ((__force __le32)(__u32)(x))
__constant_le32_to_cpu  macro  include/linux/byteorder/little_endian.h  21  #define __constant_le32_to_cpu(x) ((__force __u32)(__le32)(x))
__constant_cpu_to_le16  macro  include/linux/byteorder/little_endian.h  22  #define __constant_cpu_to_le16(x) ((__force __le16)(__u16)(x))
__constant_le16_to_cpu  macro  include/linux/byteorder/little_endian.h  23  #define __constant_le16_to_cpu(x) ((__force __u16)(__le16)(x))
__constant_cpu_to_be64  macro  include/linux/byteorder/little_endian.h  24  #define __constant_cpu_to_be64(x) ((__force __be64)___constant_swab64((x)))
__constant_be64_to_cpu  macro  include/linux/byteorder/little_endian.h  25  #define __constant_be64_to_cpu(x) ___constant_swab64((__force __u64)(__be64)(x))
__constant_cpu_to_be32  macro  include/linux/byteorder/little_endian.h  26  #define __constant_cpu_to_be32(x) ((__force __be32)___constant_swab32((x)))
__constant_be32_to_cpu  macro  include/linux/byteorder/little_endian.h  27  #define __constant_be32_to_cpu(x) ___constant_swab32((__force __u32)(__be32)(x))
__constant_cpu_to_be16  macro  include/linux/byteorder/little_endian.h  28  #define __constant_cpu_to_be16(x) ((__force __be16)___constant_swab16((x)))
__constant_be16_to_cpu  macro  include/linux/byteorder/little_endian.h  29  #define __constant_be16_to_cpu(x) ___constant_swab16((__force __u16)(__be16)(x))
__cpu_to_le64  macro  include/linux/byteorder/little_endian.h  30  #define __cpu_to_le64(x) ((__force __le64)(__u64)(x))
__le64_to_cpu  macro  include/linux/byteorder/little_endian.h  31  #define __le64_to_cpu(x) ((__force __u64)(__le64)(x))
__cpu_to_le32  macro  include/linux/byteorder/little_endian.h  32  #define __cpu_to_le32(x) ((__force __le32)(__u32)(x))
__le32_to_cpu  macro  include/linux/byteorder/little_endian.h  33  #define __le32_to_cpu(x) ((__force __u32)(__le32)(x))
__cpu_to_le16  macro  include/linux/byteorder/little_endian.h  34  #define __cpu_to_le16(x) ((__force __le16)(__u16)(x))
__le16_to_cpu  macro  include/linux/byteorder/little_endian.h  35  #define __le16_to_cpu(x) ((__force __u16)(__le16)(x))
__cpu_to_be64  macro  include/linux/byteorder/little_endian.h  36  #define __cpu_to_be64(x) ((__force __be64)__swab64((x)))
__be64_to_cpu  macro  include/linux/byteorder/little_endian.h  37  #define __be64_to_cpu(x) __swab64((__force __u64)(__be64)(x))
__cpu_to_be32  macro  include/linux/byteorder/little_endian.h  38  #define __cpu_to_be32(x) ((__force __be32)__swab32((x)))
__be32_to_cpu  macro  include/linux/byteorder/little_endian.h  39  #define __be32_to_cpu(x) __swab32((__force __u32)(__be32)(x))
__cpu_to_be16  macro  include/linux/byteorder/little_endian.h  40  #define __cpu_to_be16(x) ((__force __be16)__swab16((x)))
__be16_to_cpu  macro  include/linux/byteorder/little_endian.h  41  #define __be16_to_cpu(x) __swab16((__force __u16)(__be16)(x))
__cpu_to_le64p  function  include/linux/byteorder/little_endian.h  43  static inline __le64 __cpu_to_le64p(const __u64 *p)
__le64_to_cpup  function  include/linux/byteorder/little_endian.h  47  static inline __u64 __le64_to_cpup(const __le64 *p)
__cpu_to_le32p  function  include/linux/byteorder/little_endian.h  51  static inline __le32 __cpu_to_le32p(const __u32 *p)
__le32_to_cpup  function  include/linux/byteorder/little_endian.h  55  static inline __u32 __le32_to_cpup(const __le32 *p)
__cpu_to_le16p  function  include/linux/byteorder/little_endian.h  59  static inline __le16 __cpu_to_le16p(const __u16 *p)
__le16_to_cpup  function  include/linux/byteorder/little_endian.h  63  static inline __u16 __le16_to_cpup(const __le16 *p)
__cpu_to_be64p  function  include/linux/byteorder/little_endian.h  67  static inline __be64 __cpu_to_be64p(const __u64 *p)
__be64_to_cpup  function  include/linux/byteorder/little_endian.h  71  static inline __u64 __be64_to_cpup(const __be64 *p)
__cpu_to_be32p  function  include/linux/byteorder/little_endian.h  75  static inline __be32 __cpu_to_be32p(const __u32 *p)
__be32_to_cpup  function  include/linux/byteorder/little_endian.h  79  static inline __u32 __be32_to_cpup(const __be32 *p)
__cpu_to_be16p  function  include/linux/byteorder/little_endian.h  83  static inline __be16 __cpu_to_be16p(const __u16 *p)
__be16_to_cpup  function  include/linux/byteorder/little_endian.h  87  static inline __u16 __be16_to_cpup(const __be16 *p)
__cpu_to_le64s  macro  include/linux/byteorder/little_endian.h  91  #define __cpu_to_le64s(x) do { (void)(x); } while (0)
__le64_to_cpus  macro  include/linux/byteorder/little_endian.h  92  #define __le64_to_cpus(x) do { (void)(x); } while (0)
__cpu_to_le32s  macro  include/linux/byteorder/little_endian.h  93  #define __cpu_to_le32s(x) do { (void)(x); } while (0)
__le32_to_cpus  macro  include/linux/byteorder/little_endian.h  94  #define __le32_to_cpus(x) do { (void)(x); } while (0)
__cpu_to_le16s  macro  include/linux/byteorder/little_endian.h  95  #define __cpu_to_le16s(x) do { (void)(x); } while (0)
__le16_to_cpus  macro  include/linux/byteorder/little_endian.h  96  #define __le16_to_cpus(x) do { (void)(x); } while (0)
__cpu_to_be64s  macro  include/linux/byteorder/little_endian.h  97  #define __cpu_to_be64s(x) __swab64s((x))
__be64_to_cpus  macro  include/linux/byteorder/little_endian.h  98  #define __be64_to_cpus(x) __swab64s((x))
__cpu_to_be32s  macro  include/linux/byteorder/little_endian.h  99  #define __cpu_to_be32s(x) __swab32s((x))
__be32_to_cpus  macro  include/linux/byteorder/little_endian.h  100  #define __be32_to_cpus(x) __swab32s((x))
__cpu_to_be16s  macro  include/linux/byteorder/little_endian.h  101  #define __cpu_to_be16s(x) __swab16s((x))
__be16_to_cpus  macro  include/linux/byteorder/little_endian.h  102  #define __be16_to_cpus(x) __swab16s((x))
_ASM_GENERIC_DIV64_H  macro  include/asm-generic/div64.h  2  #define _ASM_GENERIC_DIV64_H
__div64_32  prototype  include/asm-generic/div64.h  35  extern uint32_t __div64_32(uint64_t *dividend,uint32_t divisor);
__ASM_GENERIC_PARAM_H  macro  include/asm-generic/param.h  2  #define __ASM_GENERIC_PARAM_H
HZ  macro  include/asm-generic/param.h  20  # define HZ CONFIG_HZ
EXEC_PAGESIZE  macro  include/asm-generic/param.h  9  #define EXEC_PAGESIZE 4096
NOGROUP  macro  include/asm-generic/param.h  13  #define NOGROUP (-1)
MAXHOSTNAMELEN  macro  include/asm-generic/param.h  16  #define MAXHOSTNAMELEN 64
USER_HZ  macro  include/asm-generic/param.h  21  # define USER_HZ 100
CLOCKS_PER_SEC  macro  include/asm-generic/param.h  22  # define CLOCKS_PER_SEC (USER_HZ)
_ASM_X86_TIMEX_H  macro  arch/x86/include/asm/timex.h  2  #define _ASM_X86_TIMEX_H
CLOCK_TICK_RATE  macro  arch/x86/include/asm/timex.h  8  #define CLOCK_TICK_RATE PIT_TICK_RATE
ARCH_HAS_READ_CURRENT_TIMER  macro  arch/x86/include/asm/timex.h  10  #define ARCH_HAS_READ_CURRENT_TIMER
_LINUX_MATH64_H  macro  include/linux/math64.h  2  #define _LINUX_MATH64_H
div64_long  macro  include/linux/math64.h  50  #define div64_long(x,y) div_s64((x),(y))
div_s64_rem  prototype  include/linux/math64.h  61  extern s64 div_s64_rem(s64 dividend,s32 divisor,s32 *remainder);
div64_u64  prototype  include/linux/math64.h  65  extern u64 div64_u64(u64 dividend,u64 divisor);
div64_s64  prototype  include/linux/math64.h  69  extern s64 div64_s64(s64 dividend,s64 divisor);
div_u64  function  include/linux/math64.h  82  static inline u64 div_u64(u64 dividend,u32 divisor)
div_s64  function  include/linux/math64.h  93  static inline s64 div_s64(s64 dividend,s32 divisor)
iter_div_u64_rem  prototype  include/linux/math64.h  100  u32 iter_div_u64_rem(u64 dividend,u32 divisor,u64 *remainder);
__iter_div_u64_rem  function  include/linux/math64.h  103  __iter_div_u64_rem(u64 dividend,u32 divisor,u64 *remainder)
_ASM_X86_THREAD_INFO_H  macro  arch/x86/include/asm/thread_info.h  8  #define _ASM_X86_THREAD_INFO_H
thread_info  struct  arch/x86/include/asm/thread_info.h  26  struct thread_info { struct task_struct *task; struct exec_domain *exec_domain; __u32 flags; __u32 status; __u32 cpu; int preempt_count; mm_segment_t addr_limit; struct restart_block restart_block; void __user *sysenter_return; unsigned long previous_esp; __u8 supervisor_stack[0]; unsigned int sig_on_uaccess_error:1; unsigned int uaccess_err:1; };
INIT_THREAD_INFO  macro  arch/x86/include/asm/thread_info.h  47  #define INIT_THREAD_INFO(tsk) { .task		= &tsk, .exec_domain	= &default_exec_domain, .flags		= 0, .cpu		= 0, .preempt_count	= INIT_PREEMPT_COUNT, .addr_limit	= KERNEL_DS, .restart_block = { .fn = do_no_restart_syscall, }, }
init_thread_info  macro  arch/x86/include/asm/thread_info.h  60  #define init_thread_info (init_thread_union.thread_info)
init_stack  macro  arch/x86/include/asm/thread_info.h  61  #define init_stack (init_thread_union.stack)
TIF_SYSCALL_TRACE  macro  arch/x86/include/asm/thread_info.h  77  #define TIF_SYSCALL_TRACE 0
TIF_NOTIFY_RESUME  macro  arch/x86/include/asm/thread_info.h  78  #define TIF_NOTIFY_RESUME 1
TIF_SIGPENDING  macro  arch/x86/include/asm/thread_info.h  79  #define TIF_SIGPENDING 2
TIF_NEED_RESCHED  macro  arch/x86/include/asm/thread_info.h  80  #define TIF_NEED_RESCHED 3
TIF_SINGLESTEP  macro  arch/x86/include/asm/thread_info.h  81  #define TIF_SINGLESTEP 4
TIF_IRET  macro  arch/x86/include/asm/thread_info.h  82  #define TIF_IRET 5
TIF_SYSCALL_EMU  macro  arch/x86/include/asm/thread_info.h  83  #define TIF_SYSCALL_EMU 6
TIF_SYSCALL_AUDIT  macro  arch/x86/include/asm/thread_info.h  84  #define TIF_SYSCALL_AUDIT 7
TIF_SECCOMP  macro  arch/x86/include/asm/thread_info.h  85  #define TIF_SECCOMP 8
TIF_MCE_NOTIFY  macro  arch/x86/include/asm/thread_info.h  86  #define TIF_MCE_NOTIFY 10
TIF_USER_RETURN_NOTIFY  macro  arch/x86/include/asm/thread_info.h  87  #define TIF_USER_RETURN_NOTIFY 11
TIF_UPROBE  macro  arch/x86/include/asm/thread_info.h  88  #define TIF_UPROBE 12
TIF_NOTSC  macro  arch/x86/include/asm/thread_info.h  89  #define TIF_NOTSC 16
TIF_IA32  macro  arch/x86/include/asm/thread_info.h  90  #define TIF_IA32 17
TIF_FORK  macro  arch/x86/include/asm/thread_info.h  91  #define TIF_FORK 18
TIF_MEMDIE  macro  arch/x86/include/asm/thread_info.h  92  #define TIF_MEMDIE 20
TIF_DEBUG  macro  arch/x86/include/asm/thread_info.h  93  #define TIF_DEBUG 21
TIF_IO_BITMAP  macro  arch/x86/include/asm/thread_info.h  94  #define TIF_IO_BITMAP 22
TIF_FORCED_TF  macro  arch/x86/include/asm/thread_info.h  95  #define TIF_FORCED_TF 24
TIF_BLOCKSTEP  macro  arch/x86/include/asm/thread_info.h  96  #define TIF_BLOCKSTEP 25
TIF_LAZY_MMU_UPDATES  macro  arch/x86/include/asm/thread_info.h  97  #define TIF_LAZY_MMU_UPDATES 27
TIF_SYSCALL_TRACEPOINT  macro  arch/x86/include/asm/thread_info.h  98  #define TIF_SYSCALL_TRACEPOINT 28
TIF_ADDR32  macro  arch/x86/include/asm/thread_info.h  99  #define TIF_ADDR32 29
TIF_X32  macro  arch/x86/include/asm/thread_info.h  100  #define TIF_X32 30
_TIF_SYSCALL_TRACE  macro  arch/x86/include/asm/thread_info.h  102  #define _TIF_SYSCALL_TRACE (1 << TIF_SYSCALL_TRACE)
_TIF_NOTIFY_RESUME  macro  arch/x86/include/asm/thread_info.h  103  #define _TIF_NOTIFY_RESUME (1 << TIF_NOTIFY_RESUME)
_TIF_SIGPENDING  macro  arch/x86/include/asm/thread_info.h  104  #define _TIF_SIGPENDING (1 << TIF_SIGPENDING)
_TIF_SINGLESTEP  macro  arch/x86/include/asm/thread_info.h  105  #define _TIF_SINGLESTEP (1 << TIF_SINGLESTEP)
_TIF_NEED_RESCHED  macro  arch/x86/include/asm/thread_info.h  106  #define _TIF_NEED_RESCHED (1 << TIF_NEED_RESCHED)
_TIF_IRET  macro  arch/x86/include/asm/thread_info.h  107  #define _TIF_IRET (1 << TIF_IRET)
_TIF_SYSCALL_EMU  macro  arch/x86/include/asm/thread_info.h  108  #define _TIF_SYSCALL_EMU (1 << TIF_SYSCALL_EMU)
_TIF_SYSCALL_AUDIT  macro  arch/x86/include/asm/thread_info.h  109  #define _TIF_SYSCALL_AUDIT (1 << TIF_SYSCALL_AUDIT)
_TIF_SECCOMP  macro  arch/x86/include/asm/thread_info.h  110  #define _TIF_SECCOMP (1 << TIF_SECCOMP)
_TIF_MCE_NOTIFY  macro  arch/x86/include/asm/thread_info.h  111  #define _TIF_MCE_NOTIFY (1 << TIF_MCE_NOTIFY)
_TIF_USER_RETURN_NOTIFY  macro  arch/x86/include/asm/thread_info.h  112  #define _TIF_USER_RETURN_NOTIFY (1 << TIF_USER_RETURN_NOTIFY)
_TIF_UPROBE  macro  arch/x86/include/asm/thread_info.h  113  #define _TIF_UPROBE (1 << TIF_UPROBE)
_TIF_NOTSC  macro  arch/x86/include/asm/thread_info.h  114  #define _TIF_NOTSC (1 << TIF_NOTSC)
_TIF_IA32  macro  arch/x86/include/asm/thread_info.h  115  #define _TIF_IA32 (1 << TIF_IA32)
_TIF_FORK  macro  arch/x86/include/asm/thread_info.h  116  #define _TIF_FORK (1 << TIF_FORK)
_TIF_DEBUG  macro  arch/x86/include/asm/thread_info.h  117  #define _TIF_DEBUG (1 << TIF_DEBUG)
_TIF_IO_BITMAP  macro  arch/x86/include/asm/thread_info.h  118  #define _TIF_IO_BITMAP (1 << TIF_IO_BITMAP)
_TIF_FORCED_TF  macro  arch/x86/include/asm/thread_info.h  119  #define _TIF_FORCED_TF (1 << TIF_FORCED_TF)
_TIF_BLOCKSTEP  macro  arch/x86/include/asm/thread_info.h  120  #define _TIF_BLOCKSTEP (1 << TIF_BLOCKSTEP)
_TIF_LAZY_MMU_UPDATES  macro  arch/x86/include/asm/thread_info.h  121  #define _TIF_LAZY_MMU_UPDATES (1 << TIF_LAZY_MMU_UPDATES)
_TIF_SYSCALL_TRACEPOINT  macro  arch/x86/include/asm/thread_info.h  122  #define _TIF_SYSCALL_TRACEPOINT (1 << TIF_SYSCALL_TRACEPOINT)
_TIF_ADDR32  macro  arch/x86/include/asm/thread_info.h  123  #define _TIF_ADDR32 (1 << TIF_ADDR32)
_TIF_X32  macro  arch/x86/include/asm/thread_info.h  124  #define _TIF_X32 (1 << TIF_X32)
_TIF_WORK_SYSCALL_ENTRY  macro  arch/x86/include/asm/thread_info.h  127  #define _TIF_WORK_SYSCALL_ENTRY (_TIF_SYSCALL_TRACE | _TIF_SYSCALL_EMU | _TIF_SYSCALL_AUDIT | _TIF_SECCOMP | _TIF_SINGLESTEP | _TIF_SYSCALL_TRACEPOINT)
_TIF_WORK_SYSCALL_EXIT  macro  arch/x86/include/asm/thread_info.h  132  #define _TIF_WORK_SYSCALL_EXIT (_TIF_SYSCALL_TRACE | _TIF_SYSCALL_AUDIT | _TIF_SINGLESTEP | _TIF_SYSCALL_TRACEPOINT)
_TIF_WORK_MASK  macro  arch/x86/include/asm/thread_info.h  137  #define _TIF_WORK_MASK (0x0000FFFF & ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT| _TIF_SINGLESTEP|_TIF_SECCOMP|_TIF_SYSCALL_EMU))
_TIF_ALLWORK_MASK  macro  arch/x86/include/asm/thread_info.h  143  #define _TIF_ALLWORK_MASK ((0x0000FFFF & ~_TIF_SECCOMP) | _TIF_SYSCALL_TRACEPOINT)
_TIF_DO_NOTIFY_MASK  macro  arch/x86/include/asm/thread_info.h  147  #define _TIF_DO_NOTIFY_MASK (_TIF_SIGPENDING | _TIF_MCE_NOTIFY | _TIF_NOTIFY_RESUME | _TIF_USER_RETURN_NOTIFY)
_TIF_WORK_CTXSW  macro  arch/x86/include/asm/thread_info.h  152  #define _TIF_WORK_CTXSW (_TIF_IO_BITMAP|_TIF_NOTSC|_TIF_BLOCKSTEP)
_TIF_WORK_CTXSW_PREV  macro  arch/x86/include/asm/thread_info.h  155  #define _TIF_WORK_CTXSW_PREV (_TIF_WORK_CTXSW|_TIF_USER_RETURN_NOTIFY)
_TIF_WORK_CTXSW_NEXT  macro  arch/x86/include/asm/thread_info.h  156  #define _TIF_WORK_CTXSW_NEXT (_TIF_WORK_CTXSW|_TIF_DEBUG)
STACK_WARN  macro  arch/x86/include/asm/thread_info.h  162  #define STACK_WARN (THREAD_SIZE/8)
current_thread_info  function  arch/x86/include/asm/thread_info.h  206  static inline struct thread_info *current_thread_info(void)
GET_THREAD_INFO  macro  arch/x86/include/asm/thread_info.h  217  #define GET_THREAD_INFO(reg) movq PER_CPU_VAR(kernel_stack),reg ; subq $(THREAD_SIZE-KERNEL_STACK_OFFSET),reg
GET_THREAD_INFO_WITH_ESP  macro  arch/x86/include/asm/thread_info.h  189  #define GET_THREAD_INFO_WITH_ESP(reg) andl $-THREAD_SIZE, reg
KERNEL_STACK_OFFSET  macro  arch/x86/include/asm/thread_info.h  197  #define KERNEL_STACK_OFFSET (5*8)
THREAD_INFO  macro  arch/x86/include/asm/thread_info.h  225  #define THREAD_INFO(reg,off) KERNEL_STACK_OFFSET+(off)-THREAD_SIZE(reg)
TS_COMPAT  macro  arch/x86/include/asm/thread_info.h  238  #define TS_COMPAT 0x0002
TS_POLLING  macro  arch/x86/include/asm/thread_info.h  239  #define TS_POLLING 0x0004
TS_RESTORE_SIGMASK  macro  arch/x86/include/asm/thread_info.h  241  #define TS_RESTORE_SIGMASK 0x0008
tsk_is_polling  macro  arch/x86/include/asm/thread_info.h  243  #define tsk_is_polling(t) (task_thread_info(t)->status & TS_POLLING)
is_ia32_task  function  arch/x86/include/asm/thread_info.h  270  static inline bool is_ia32_task(void)
arch_task_cache_init  prototype  arch/x86/include/asm/thread_info.h  284  extern void arch_task_cache_init(void);
arch_dup_task_struct  prototype  arch/x86/include/asm/thread_info.h  285  extern int arch_dup_task_struct(struct task_struct *dst,struct task_struct *src);
arch_release_task_struct  prototype  arch/x86/include/asm/thread_info.h  286  extern void arch_release_task_struct(struct task_struct *tsk);
__LINUX_BITMAP_H  macro  include/linux/bitmap.h  2  #define __LINUX_BITMAP_H
__bitmap_empty  prototype  include/linux/bitmap.h  91  extern int __bitmap_empty(const unsigned long *bitmap,int bits);
__bitmap_full  prototype  include/linux/bitmap.h  92  extern int __bitmap_full(const unsigned long *bitmap,int bits);
__bitmap_equal  prototype  include/linux/bitmap.h  93  extern int __bitmap_equal(const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_complement  prototype  include/linux/bitmap.h  95  extern void __bitmap_complement(unsigned long *dst,const unsigned long *src,int bits);
__bitmap_shift_right  prototype  include/linux/bitmap.h  97  extern void __bitmap_shift_right(unsigned long *dst,const unsigned long *src, int shift, int bits);
__bitmap_shift_left  prototype  include/linux/bitmap.h  99  extern void __bitmap_shift_left(unsigned long *dst,const unsigned long *src, int shift, int bits);
__bitmap_and  prototype  include/linux/bitmap.h  101  extern int __bitmap_and(unsigned long *dst,const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_or  prototype  include/linux/bitmap.h  103  extern void __bitmap_or(unsigned long *dst,const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_xor  prototype  include/linux/bitmap.h  105  extern void __bitmap_xor(unsigned long *dst,const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_andnot  prototype  include/linux/bitmap.h  107  extern int __bitmap_andnot(unsigned long *dst,const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_intersects  prototype  include/linux/bitmap.h  109  extern int __bitmap_intersects(const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_subset  prototype  include/linux/bitmap.h  111  extern int __bitmap_subset(const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_weight  prototype  include/linux/bitmap.h  113  extern int __bitmap_weight(const unsigned long *bitmap,int bits);
bitmap_set  prototype  include/linux/bitmap.h  115  extern void bitmap_set(unsigned long *map,int i,int len);
bitmap_clear  prototype  include/linux/bitmap.h  116  extern void bitmap_clear(unsigned long *map,int start,int nr);
bitmap_find_next_zero_area  prototype  include/linux/bitmap.h  117  extern unsigned long bitmap_find_next_zero_area(unsigned long *map,unsigned long size,unsigned long start,unsigned int nr,unsigned long align_mask);
bitmap_scnprintf  prototype  include/linux/bitmap.h  123  extern int bitmap_scnprintf(char *buf,unsigned int len,const unsigned long *src, int nbits);
__bitmap_parse  prototype  include/linux/bitmap.h  125  extern int __bitmap_parse(const char *buf,unsigned int buflen,int is_user,unsigned long *dst, int nbits);
bitmap_parse_user  prototype  include/linux/bitmap.h  127  extern int bitmap_parse_user(const char __user *ubuf,unsigned int ulen,unsigned long *dst, int nbits);
bitmap_scnlistprintf  prototype  include/linux/bitmap.h  129  extern int bitmap_scnlistprintf(char *buf,unsigned int len,const unsigned long *src, int nbits);
bitmap_parselist  prototype  include/linux/bitmap.h  131  extern int bitmap_parselist(const char *buf,unsigned long *maskp,int nmaskbits);
bitmap_parselist_user  prototype  include/linux/bitmap.h  133  extern int bitmap_parselist_user(const char __user *ubuf,unsigned int ulen,unsigned long *dst, int nbits);
bitmap_remap  prototype  include/linux/bitmap.h  135  extern void bitmap_remap(unsigned long *dst,const unsigned long *src,const unsigned long *old, const unsigned long *new, int bits);
bitmap_bitremap  prototype  include/linux/bitmap.h  137  extern int bitmap_bitremap(int oldbit,const unsigned long *old, const unsigned long *new, int bits);
bitmap_onto  prototype  include/linux/bitmap.h  139  extern void bitmap_onto(unsigned long *dst,const unsigned long *orig,const unsigned long *relmap, int bits);
bitmap_fold  prototype  include/linux/bitmap.h  141  extern void bitmap_fold(unsigned long *dst,const unsigned long *orig,int sz, int bits);
bitmap_find_free_region  prototype  include/linux/bitmap.h  143  extern int bitmap_find_free_region(unsigned long *bitmap,int bits,int order);
bitmap_release_region  prototype  include/linux/bitmap.h  144  extern void bitmap_release_region(unsigned long *bitmap,int pos,int order);
bitmap_allocate_region  prototype  include/linux/bitmap.h  145  extern int bitmap_allocate_region(unsigned long *bitmap,int pos,int order);
bitmap_copy_le  prototype  include/linux/bitmap.h  146  extern void bitmap_copy_le(void *dst,const unsigned long *src,int nbits);
bitmap_ord_to_pos  prototype  include/linux/bitmap.h  147  extern int bitmap_ord_to_pos(const unsigned long *bitmap,int n,int bits);
BITMAP_FIRST_WORD_MASK  macro  include/linux/bitmap.h  149  #define BITMAP_FIRST_WORD_MASK(start) (~0UL << ((start) % BITS_PER_LONG))
BITMAP_LAST_WORD_MASK  macro  include/linux/bitmap.h  150  #define BITMAP_LAST_WORD_MASK(nbits) ( ((nbits) % BITS_PER_LONG) ? (1UL<<((nbits) % BITS_PER_LONG))-1 : ~0UL )
small_const_nbits  macro  include/linux/bitmap.h  156  #define small_const_nbits(nbits) (__builtin_constant_p(nbits) && (nbits) <= BITS_PER_LONG)
bitmap_zero  function  include/linux/bitmap.h  159  static inline void bitmap_zero(unsigned long *dst,int nbits)
bitmap_fill  function  include/linux/bitmap.h  169  static inline void bitmap_fill(unsigned long *dst,int nbits)
bitmap_copy  function  include/linux/bitmap.h  179  static inline void bitmap_copy(unsigned long *dst,const unsigned long *src,int nbits)
bitmap_and  function  include/linux/bitmap.h  190  static inline int bitmap_and(unsigned long *dst,const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_or  function  include/linux/bitmap.h  198  static inline void bitmap_or(unsigned long *dst,const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_xor  function  include/linux/bitmap.h  207  static inline void bitmap_xor(unsigned long *dst,const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_andnot  function  include/linux/bitmap.h  216  static inline int bitmap_andnot(unsigned long *dst,const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_complement  function  include/linux/bitmap.h  224  static inline void bitmap_complement(unsigned long *dst,const unsigned long *src,int nbits)
bitmap_equal  function  include/linux/bitmap.h  233  static inline int bitmap_equal(const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_intersects  function  include/linux/bitmap.h  242  static inline int bitmap_intersects(const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_subset  function  include/linux/bitmap.h  251  static inline int bitmap_subset(const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_empty  function  include/linux/bitmap.h  260  static inline int bitmap_empty(const unsigned long *src,int nbits)
bitmap_full  function  include/linux/bitmap.h  268  static inline int bitmap_full(const unsigned long *src,int nbits)
bitmap_weight  function  include/linux/bitmap.h  276  static inline int bitmap_weight(const unsigned long *src,int nbits)
bitmap_shift_right  function  include/linux/bitmap.h  283  static inline void bitmap_shift_right(unsigned long *dst,const unsigned long *src, int n, int nbits)
bitmap_shift_left  function  include/linux/bitmap.h  292  static inline void bitmap_shift_left(unsigned long *dst,const unsigned long *src, int n, int nbits)
bitmap_parse  function  include/linux/bitmap.h  301  static inline int bitmap_parse(const char *buf,unsigned int buflen,unsigned long *maskp, int nmaskbits)
_LINUX_NUMA_H  macro  include/linux/numa.h  2  #define _LINUX_NUMA_H
NODES_SHIFT  macro  include/linux/numa.h  8  #define NODES_SHIFT 0
MAX_NUMNODES  macro  include/linux/numa.h  11  #define MAX_NUMNODES (1 << NODES_SHIFT)
NUMA_NO_NODE  macro  include/linux/numa.h  13  #define NUMA_NO_NODE (-1)
_LINUX_AUXVEC_H  macro  include/linux/auxvec.h  2  #define _LINUX_AUXVEC_H
AT_NULL  macro  include/linux/auxvec.h  8  #define AT_NULL 0
AT_IGNORE  macro  include/linux/auxvec.h  9  #define AT_IGNORE 1
AT_EXECFD  macro  include/linux/auxvec.h  10  #define AT_EXECFD 2
AT_PHDR  macro  include/linux/auxvec.h  11  #define AT_PHDR 3
AT_PHENT  macro  include/linux/auxvec.h  12  #define AT_PHENT 4
AT_PHNUM  macro  include/linux/auxvec.h  13  #define AT_PHNUM 5
AT_PAGESZ  macro  include/linux/auxvec.h  14  #define AT_PAGESZ 6
AT_BASE  macro  include/linux/auxvec.h  15  #define AT_BASE 7
AT_FLAGS  macro  include/linux/auxvec.h  16  #define AT_FLAGS 8
AT_ENTRY  macro  include/linux/auxvec.h  17  #define AT_ENTRY 9
AT_NOTELF  macro  include/linux/auxvec.h  18  #define AT_NOTELF 10
AT_UID  macro  include/linux/auxvec.h  19  #define AT_UID 11
AT_EUID  macro  include/linux/auxvec.h  20  #define AT_EUID 12
AT_GID  macro  include/linux/auxvec.h  21  #define AT_GID 13
AT_EGID  macro  include/linux/auxvec.h  22  #define AT_EGID 14
AT_PLATFORM  macro  include/linux/auxvec.h  23  #define AT_PLATFORM 15
AT_HWCAP  macro  include/linux/auxvec.h  24  #define AT_HWCAP 16
AT_CLKTCK  macro  include/linux/auxvec.h  25  #define AT_CLKTCK 17
AT_SECURE  macro  include/linux/auxvec.h  27  #define AT_SECURE 23
AT_BASE_PLATFORM  macro  include/linux/auxvec.h  28  #define AT_BASE_PLATFORM 24
AT_RANDOM  macro  include/linux/auxvec.h  30  #define AT_RANDOM 25
AT_EXECFN  macro  include/linux/auxvec.h  32  #define AT_EXECFN 31
AT_VECTOR_SIZE_BASE  macro  include/linux/auxvec.h  35  #define AT_VECTOR_SIZE_BASE 19
_LINUX_PRIO_TREE_H  macro  include/linux/prio_tree.h  2  #define _LINUX_PRIO_TREE_H
raw_prio_tree_node  struct  include/linux/prio_tree.h  14  struct raw_prio_tree_node { struct prio_tree_node *left; struct prio_tree_node *right; struct prio_tree_node *parent; };
prio_tree_node  struct  include/linux/prio_tree.h  20  struct prio_tree_node { struct prio_tree_node *left; struct prio_tree_node *right; struct prio_tree_node *parent; unsigned long start; unsigned long last; };
prio_tree_root  function  include/linux/prio_tree.h  89  static inline int prio_tree_root(const struct prio_tree_node *node)
prio_tree_iter  struct  include/linux/prio_tree.h  38  struct prio_tree_iter { struct prio_tree_node *cur; unsigned long mask; unsigned long value; int size_level; struct prio_tree_root *root; pgoff_t r_index; pgoff_t h_index; };
prio_tree_iter_init  function  include/linux/prio_tree.h  49  static inline void prio_tree_iter_init(struct prio_tree_iter *iter,struct prio_tree_root *root, pgoff_t r_index, pgoff_t h_index)
__INIT_PRIO_TREE_ROOT  macro  include/linux/prio_tree.h  58  #define __INIT_PRIO_TREE_ROOT(ptr,_raw) do { (ptr)->prio_tree_node = NULL; (ptr)->index_bits = 1; (ptr)->raw = (_raw); } while (0)
INIT_PRIO_TREE_ROOT  macro  include/linux/prio_tree.h  65  #define INIT_PRIO_TREE_ROOT(ptr) __INIT_PRIO_TREE_ROOT(ptr,0)
INIT_RAW_PRIO_TREE_ROOT  macro  include/linux/prio_tree.h  66  #define INIT_RAW_PRIO_TREE_ROOT(ptr) __INIT_PRIO_TREE_ROOT(ptr,1)
INIT_PRIO_TREE_NODE  macro  include/linux/prio_tree.h  68  #define INIT_PRIO_TREE_NODE(ptr) do { (ptr)->left = (ptr)->right = (ptr)->parent = (ptr); } while (0)
INIT_PRIO_TREE_ITER  macro  include/linux/prio_tree.h  73  #define INIT_PRIO_TREE_ITER(ptr) do { (ptr)->cur = NULL; (ptr)->mask = 0UL; (ptr)->value = 0UL; (ptr)->size_level = 0; } while (0)
prio_tree_entry  macro  include/linux/prio_tree.h  81  #define prio_tree_entry(ptr,type,member) ((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))
prio_tree_empty  function  include/linux/prio_tree.h  84  static inline int prio_tree_empty(const struct prio_tree_root *root)
prio_tree_left_empty  function  include/linux/prio_tree.h  94  static inline int prio_tree_left_empty(const struct prio_tree_node *node)
prio_tree_right_empty  function  include/linux/prio_tree.h  99  static inline int prio_tree_right_empty(const struct prio_tree_node *node)
prio_tree_replace  prototype  include/linux/prio_tree.h  105  struct prio_tree_node *prio_tree_replace(struct prio_tree_root *root,struct prio_tree_node *old, struct prio_tree_node *node);
prio_tree_insert  prototype  include/linux/prio_tree.h  107  struct prio_tree_node *prio_tree_insert(struct prio_tree_root *root,struct prio_tree_node *node);
prio_tree_remove  prototype  include/linux/prio_tree.h  109  void prio_tree_remove(struct prio_tree_root *root,struct prio_tree_node *node);
prio_tree_next  prototype  include/linux/prio_tree.h  110  struct prio_tree_node *prio_tree_next(struct prio_tree_iter *iter);
raw_prio_tree_replace  macro  include/linux/prio_tree.h  112  #define raw_prio_tree_replace(root,old,node) prio_tree_replace(root, (struct prio_tree_node *) (old), (struct prio_tree_node *) (node))
raw_prio_tree_insert  macro  include/linux/prio_tree.h  115  #define raw_prio_tree_insert(root,node) prio_tree_insert(root, (struct prio_tree_node *) (node))
raw_prio_tree_remove  macro  include/linux/prio_tree.h  117  #define raw_prio_tree_remove(root,node) prio_tree_remove(root, (struct prio_tree_node *) (node))
LINUX_PAGE_DEBUG_FLAGS_H  macro  include/linux/page-debug-flags.h  2  #define LINUX_PAGE_DEBUG_FLAGS_H
page_debug_flags  enum  include/linux/page-debug-flags.h  14  enum page_debug_flags { PAGE_DEBUG_FLAG_POISON, PAGE_DEBUG_FLAG_GUARD, };
_LINUX_UPROBES_H  macro  include/linux/uprobes.h  2  #define _LINUX_UPROBES_H
UPROBE_COPY_INSN  macro  include/linux/uprobes.h  41  #define UPROBE_COPY_INSN 0x1
UPROBE_RUN_HANDLER  macro  include/linux/uprobes.h  44  #define UPROBE_RUN_HANDLER 0x2
UPROBE_SKIP_SSTEP  macro  include/linux/uprobes.h  46  #define UPROBE_SKIP_SSTEP 0x4
uprobe_consumer  struct  include/linux/uprobes.h  48  struct uprobe_consumer { int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs); bool (*filter)(struct uprobe_consumer *self, struct task_struct *task); struct uprobe_consumer *next; };
uprobe_task_state  enum  include/linux/uprobes.h  60  enum uprobe_task_state { UTASK_RUNNING, UTASK_BP_HIT, UTASK_SSTEP, UTASK_SSTEP_ACK, UTASK_SSTEP_TRAPPED, };
uprobe_task  struct  include/linux/uprobes.h  71  struct uprobe_task { enum uprobe_task_state state; struct arch_uprobe_task autask; struct uprobe *active_uprobe; unsigned long xol_vaddr; unsigned long vaddr; };
xol_area  struct  include/linux/uprobes.h  86  struct xol_area { wait_queue_head_t wq; atomic_t slot_count; unsigned long *bitmap; struct page *page; unsigned long vaddr; };
uprobes_state  struct  include/linux/uprobes.h  122  struct uprobes_state { };
set_swbp  prototype  include/linux/uprobes.h  104  extern int __weak set_swbp(struct arch_uprobe *aup,struct mm_struct *mm,unsigned long vaddr);
set_orig_insn  prototype  include/linux/uprobes.h  105  extern int __weak set_orig_insn(struct arch_uprobe *aup,struct mm_struct *mm,unsigned long vaddr,bool verify);
is_swbp_insn  prototype  include/linux/uprobes.h  106  extern bool __weak is_swbp_insn(uprobe_opcode_t *insn);
uprobe_register  function  include/linux/uprobes.h  125  uprobe_register(struct inode *inode,loff_t offset,struct uprobe_consumer *uc)
uprobe_unregister  function  include/linux/uprobes.h  130  uprobe_unregister(struct inode *inode,loff_t offset,struct uprobe_consumer *uc)
uprobe_mmap  function  include/linux/uprobes.h  133  static inline int uprobe_mmap(struct vm_area_struct *vma)
uprobe_munmap  function  include/linux/uprobes.h  138  uprobe_munmap(struct vm_area_struct *vma,unsigned long start,unsigned long end)
uprobe_free_utask  function  include/linux/uprobes.h  152  static inline void uprobe_free_utask(struct task_struct *t)
uprobe_copy_process  function  include/linux/uprobes.h  155  static inline void uprobe_copy_process(struct task_struct *t)
uprobe_get_swbp_addr  function  include/linux/uprobes.h  148  static inline unsigned long uprobe_get_swbp_addr(struct pt_regs *regs)
uprobe_post_sstep_notifier  prototype  include/linux/uprobes.h  114  extern int uprobe_post_sstep_notifier(struct pt_regs *regs);
uprobe_pre_sstep_notifier  prototype  include/linux/uprobes.h  115  extern int uprobe_pre_sstep_notifier(struct pt_regs *regs);
uprobe_notify_resume  function  include/linux/uprobes.h  141  static inline void uprobe_notify_resume(struct pt_regs *regs)
uprobe_deny_signal  function  include/linux/uprobes.h  144  static inline bool uprobe_deny_signal(void)
arch_uprobe_skip_sstep  prototype  include/linux/uprobes.h  118  extern bool __weak arch_uprobe_skip_sstep(struct arch_uprobe *aup,struct pt_regs *regs);
uprobe_clear_state  function  include/linux/uprobes.h  158  static inline void uprobe_clear_state(struct mm_struct *mm)
uprobe_reset_state  function  include/linux/uprobes.h  161  static inline void uprobe_reset_state(struct mm_struct *mm)
_ASM_X86_MMU_H  macro  arch/x86/include/asm/mmu.h  2  #define _ASM_X86_MMU_H
mm_context_t  struct  arch/x86/include/asm/mmu.h  11  typedef struct { void *ldt; int size; unsigned short ia32_compat; struct mutex lock; void *vdso; } mm_context_t;
leave_mm  function  arch/x86/include/asm/mmu.h  27  static inline void leave_mm(int cpu)
_ASM_X86_PAGE_DEFS_H  macro  arch/x86/include/asm/page_types.h  2  #define _ASM_X86_PAGE_DEFS_H
PAGE_SHIFT  macro  arch/x86/include/asm/page_types.h  8  #define PAGE_SHIFT 12
PAGE_SIZE  macro  arch/x86/include/asm/page_types.h  9  #define PAGE_SIZE (_AC(1,UL) << PAGE_SHIFT)
PAGE_MASK  macro  arch/x86/include/asm/page_types.h  10  #define PAGE_MASK (~(PAGE_SIZE-1))
__PHYSICAL_MASK  macro  arch/x86/include/asm/page_types.h  12  #define __PHYSICAL_MASK ((phys_addr_t)((1ULL << __PHYSICAL_MASK_SHIFT) - 1))
__VIRTUAL_MASK  macro  arch/x86/include/asm/page_types.h  13  #define __VIRTUAL_MASK ((1UL << __VIRTUAL_MASK_SHIFT) - 1)
PHYSICAL_PAGE_MASK  macro  arch/x86/include/asm/page_types.h  18  #define PHYSICAL_PAGE_MASK (((signed long)PAGE_MASK) & __PHYSICAL_MASK)
PMD_PAGE_SIZE  macro  arch/x86/include/asm/page_types.h  20  #define PMD_PAGE_SIZE (_AC(1,UL) << PMD_SHIFT)
PMD_PAGE_MASK  macro  arch/x86/include/asm/page_types.h  21  #define PMD_PAGE_MASK (~(PMD_PAGE_SIZE-1))
HPAGE_SHIFT  macro  arch/x86/include/asm/page_types.h  23  #define HPAGE_SHIFT PMD_SHIFT
HPAGE_SIZE  macro  arch/x86/include/asm/page_types.h  24  #define HPAGE_SIZE (_AC(1,UL) << HPAGE_SHIFT)
HPAGE_MASK  macro  arch/x86/include/asm/page_types.h  25  #define HPAGE_MASK (~(HPAGE_SIZE - 1))
HUGETLB_PAGE_ORDER  macro  arch/x86/include/asm/page_types.h  26  #define HUGETLB_PAGE_ORDER (HPAGE_SHIFT - PAGE_SHIFT)
HUGE_MAX_HSTATE  macro  arch/x86/include/asm/page_types.h  28  #define HUGE_MAX_HSTATE 2
PAGE_OFFSET  macro  arch/x86/include/asm/page_types.h  30  #define PAGE_OFFSET ((unsigned long)__PAGE_OFFSET)
VM_DATA_DEFAULT_FLAGS  macro  arch/x86/include/asm/page_types.h  32  #define VM_DATA_DEFAULT_FLAGS (((current->personality & READ_IMPLIES_EXEC) ? VM_EXEC : 0 ) | VM_READ | VM_WRITE | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)
devmem_is_allowed  prototype  arch/x86/include/asm/page_types.h  44  extern int devmem_is_allowed(unsigned long pagenr);
get_max_mapped  function  arch/x86/include/asm/page_types.h  49  static inline phys_addr_t get_max_mapped(void)
init_memory_mapping  prototype  arch/x86/include/asm/page_types.h  54  extern unsigned long init_memory_mapping(unsigned long start,unsigned long end);
initmem_init  prototype  arch/x86/include/asm/page_types.h  57  extern void initmem_init(void);
_ASM_X86_PAGE_64_H  macro  arch/x86/include/asm/page_64.h  2  #define _ASM_X86_PAGE_64_H
_ASM_X86_PAGE_32_H  macro  arch/x86/include/asm/page_32.h  2  #define _ASM_X86_PAGE_32_H
HAVE_ARCH_HUGETLB_UNMAPPED_AREA  macro  arch/x86/include/asm/page_32.h  9  #define HAVE_ARCH_HUGETLB_UNMAPPED_AREA
__phys_addr_nodebug  macro  arch/x86/include/asm/page_32.h  12  #define __phys_addr_nodebug(x) ((x) - PAGE_OFFSET)
__phys_addr  macro  arch/x86/include/asm/page_32.h  16  #define __phys_addr(x) __phys_addr_nodebug(x)
__phys_reloc_hide  macro  arch/x86/include/asm/page_32.h  18  #define __phys_reloc_hide(x) RELOC_HIDE((x),0)
pfn_valid  function  include/linux/mmzone.h  1134  static inline int pfn_valid(unsigned long pfn)
clear_page  function  arch/x86/include/asm/page_32.h  39  static inline void clear_page(void *page)
copy_page  function  arch/x86/include/asm/page_32.h  44  static inline void copy_page(void *to,void *from)
__ASM_MEMORY_MODEL_H  macro  include/asm-generic/memory_model.h  2  #define __ASM_MEMORY_MODEL_H
ARCH_PFN_OFFSET  macro  include/asm-generic/memory_model.h  9  #define ARCH_PFN_OFFSET (0UL)
arch_pfn_to_nid  macro  include/asm-generic/memory_model.h  15  #define arch_pfn_to_nid(pfn) pfn_to_nid(pfn)
arch_local_page_offset  macro  include/asm-generic/memory_model.h  19  #define arch_local_page_offset(pfn,nid) ((pfn) - NODE_DATA(nid)->node_start_pfn)
__pfn_to_page  macro  include/asm-generic/memory_model.h  65  #define __pfn_to_page(pfn) ({	unsigned long __pfn = (pfn); struct mem_section *__sec = __pfn_to_section(__pfn); __section_mem_map_addr(__sec) + __pfn; })
__page_to_pfn  macro  include/asm-generic/memory_model.h  59  #define __page_to_pfn(pg) ({	const struct page *__pg = (pg); int __sec = page_to_section(__pg); (unsigned long)(__pg - __section_mem_map_addr(__nr_to_section(__sec))); })
page_to_pfn  macro  include/asm-generic/memory_model.h  72  #define page_to_pfn __page_to_pfn
pfn_to_page  macro  include/asm-generic/memory_model.h  73  #define pfn_to_page __pfn_to_page
__ASM_GENERIC_GETORDER_H  macro  include/asm-generic/getorder.h  2  #define __ASM_GENERIC_GETORDER_H
__get_order  function  include/asm-generic/getorder.h  13  int __get_order(unsigned long size)
get_order  macro  include/asm-generic/getorder.h  49  #define get_order(n) ( __builtin_constant_p(n) ? ( ((n) == 0UL) ? BITS_PER_LONG - PAGE_SHIFT : (((n) < (1UL << PAGE_SHIFT)) ? 0 : ilog2((n) - 1) - PAGE_SHIFT + 1) ) : __get_order(n) )
_ASM_X86_PTRACE_ABI_H  macro  arch/x86/include/asm/ptrace-abi.h  2  #define _ASM_X86_PTRACE_ABI_H
EBX  macro  arch/x86/include/asm/ptrace-abi.h  6  #define EBX 0
ECX  macro  arch/x86/include/asm/ptrace-abi.h  7  #define ECX 1
EDX  macro  arch/x86/include/asm/ptrace-abi.h  8  #define EDX 2
ESI  macro  arch/x86/include/asm/ptrace-abi.h  9  #define ESI 3
EDI  macro  arch/x86/include/asm/ptrace-abi.h  10  #define EDI 4
EBP  macro  arch/x86/include/asm/ptrace-abi.h  11  #define EBP 5
EAX  macro  arch/x86/include/asm/ptrace-abi.h  12  #define EAX 6
DS  macro  arch/x86/include/asm/ptrace-abi.h  13  #define DS 7
ES  macro  arch/x86/include/asm/ptrace-abi.h  14  #define ES 8
FS  macro  arch/x86/include/asm/ptrace-abi.h  15  #define FS 9
GS  macro  arch/x86/include/asm/ptrace-abi.h  16  #define GS 10
ORIG_EAX  macro  arch/x86/include/asm/ptrace-abi.h  17  #define ORIG_EAX 11
EIP  macro  arch/x86/include/asm/ptrace-abi.h  18  #define EIP 12
CS  macro  arch/x86/include/asm/ptrace-abi.h  48  #define CS 136
EFL  macro  arch/x86/include/asm/ptrace-abi.h  20  #define EFL 14
UESP  macro  arch/x86/include/asm/ptrace-abi.h  21  #define UESP 15
SS  macro  arch/x86/include/asm/ptrace-abi.h  51  #define SS 160
FRAME_SIZE  macro  arch/x86/include/asm/ptrace-abi.h  56  #define FRAME_SIZE 168
R15  macro  arch/x86/include/asm/ptrace-abi.h  28  #define R15 0
R14  macro  arch/x86/include/asm/ptrace-abi.h  29  #define R14 8
R13  macro  arch/x86/include/asm/ptrace-abi.h  30  #define R13 16
R12  macro  arch/x86/include/asm/ptrace-abi.h  31  #define R12 24
RBP  macro  arch/x86/include/asm/ptrace-abi.h  32  #define RBP 32
RBX  macro  arch/x86/include/asm/ptrace-abi.h  33  #define RBX 40
R11  macro  arch/x86/include/asm/ptrace-abi.h  35  #define R11 48
R10  macro  arch/x86/include/asm/ptrace-abi.h  36  #define R10 56
R9  macro  arch/x86/include/asm/ptrace-abi.h  37  #define R9 64
R8  macro  arch/x86/include/asm/ptrace-abi.h  38  #define R8 72
RAX  macro  arch/x86/include/asm/ptrace-abi.h  39  #define RAX 80
RCX  macro  arch/x86/include/asm/ptrace-abi.h  40  #define RCX 88
RDX  macro  arch/x86/include/asm/ptrace-abi.h  41  #define RDX 96
RSI  macro  arch/x86/include/asm/ptrace-abi.h  42  #define RSI 104
RDI  macro  arch/x86/include/asm/ptrace-abi.h  43  #define RDI 112
ORIG_RAX  macro  arch/x86/include/asm/ptrace-abi.h  44  #define ORIG_RAX 120
RIP  macro  arch/x86/include/asm/ptrace-abi.h  47  #define RIP 128
EFLAGS  macro  arch/x86/include/asm/ptrace-abi.h  49  #define EFLAGS 144
RSP  macro  arch/x86/include/asm/ptrace-abi.h  50  #define RSP 152
ARGOFFSET  macro  arch/x86/include/asm/ptrace-abi.h  52  #define ARGOFFSET R11
PTRACE_GETREGS  macro  arch/x86/include/asm/ptrace-abi.h  61  #define PTRACE_GETREGS 12
PTRACE_SETREGS  macro  arch/x86/include/asm/ptrace-abi.h  62  #define PTRACE_SETREGS 13
PTRACE_GETFPREGS  macro  arch/x86/include/asm/ptrace-abi.h  63  #define PTRACE_GETFPREGS 14
PTRACE_SETFPREGS  macro  arch/x86/include/asm/ptrace-abi.h  64  #define PTRACE_SETFPREGS 15
PTRACE_GETFPXREGS  macro  arch/x86/include/asm/ptrace-abi.h  65  #define PTRACE_GETFPXREGS 18
PTRACE_SETFPXREGS  macro  arch/x86/include/asm/ptrace-abi.h  66  #define PTRACE_SETFPXREGS 19
PTRACE_OLDSETOPTIONS  macro  arch/x86/include/asm/ptrace-abi.h  68  #define PTRACE_OLDSETOPTIONS 21
PTRACE_GET_THREAD_AREA  macro  arch/x86/include/asm/ptrace-abi.h  71  #define PTRACE_GET_THREAD_AREA 25
PTRACE_SET_THREAD_AREA  macro  arch/x86/include/asm/ptrace-abi.h  72  #define PTRACE_SET_THREAD_AREA 26
PTRACE_ARCH_PRCTL  macro  arch/x86/include/asm/ptrace-abi.h  75  # define PTRACE_ARCH_PRCTL 30
PTRACE_SYSEMU  macro  arch/x86/include/asm/ptrace-abi.h  78  #define PTRACE_SYSEMU 31
PTRACE_SYSEMU_SINGLESTEP  macro  arch/x86/include/asm/ptrace-abi.h  79  #define PTRACE_SYSEMU_SINGLESTEP 32
PTRACE_SINGLEBLOCK  macro  arch/x86/include/asm/ptrace-abi.h  81  #define PTRACE_SINGLEBLOCK 33
_ASM_X86_PROCESSOR_FLAGS_H  macro  arch/x86/include/asm/processor-flags.h  2  #define _ASM_X86_PROCESSOR_FLAGS_H
X86_EFLAGS_CF  macro  arch/x86/include/asm/processor-flags.h  8  #define X86_EFLAGS_CF 0x00000001
X86_EFLAGS_BIT1  macro  arch/x86/include/asm/processor-flags.h  9  #define X86_EFLAGS_BIT1 0x00000002
X86_EFLAGS_PF  macro  arch/x86/include/asm/processor-flags.h  10  #define X86_EFLAGS_PF 0x00000004
X86_EFLAGS_AF  macro  arch/x86/include/asm/processor-flags.h  11  #define X86_EFLAGS_AF 0x00000010
X86_EFLAGS_ZF  macro  arch/x86/include/asm/processor-flags.h  12  #define X86_EFLAGS_ZF 0x00000040
X86_EFLAGS_SF  macro  arch/x86/include/asm/processor-flags.h  13  #define X86_EFLAGS_SF 0x00000080
X86_EFLAGS_TF  macro  arch/x86/include/asm/processor-flags.h  14  #define X86_EFLAGS_TF 0x00000100
X86_EFLAGS_IF  macro  arch/x86/include/asm/processor-flags.h  15  #define X86_EFLAGS_IF 0x00000200
X86_EFLAGS_DF  macro  arch/x86/include/asm/processor-flags.h  16  #define X86_EFLAGS_DF 0x00000400
X86_EFLAGS_OF  macro  arch/x86/include/asm/processor-flags.h  17  #define X86_EFLAGS_OF 0x00000800
X86_EFLAGS_IOPL  macro  arch/x86/include/asm/processor-flags.h  18  #define X86_EFLAGS_IOPL 0x00003000
X86_EFLAGS_NT  macro  arch/x86/include/asm/processor-flags.h  19  #define X86_EFLAGS_NT 0x00004000
X86_EFLAGS_RF  macro  arch/x86/include/asm/processor-flags.h  20  #define X86_EFLAGS_RF 0x00010000
X86_EFLAGS_VM  macro  arch/x86/include/asm/processor-flags.h  21  #define X86_EFLAGS_VM 0x00020000
X86_EFLAGS_AC  macro  arch/x86/include/asm/processor-flags.h  22  #define X86_EFLAGS_AC 0x00040000
X86_EFLAGS_VIF  macro  arch/x86/include/asm/processor-flags.h  23  #define X86_EFLAGS_VIF 0x00080000
X86_EFLAGS_VIP  macro  arch/x86/include/asm/processor-flags.h  24  #define X86_EFLAGS_VIP 0x00100000
X86_EFLAGS_ID  macro  arch/x86/include/asm/processor-flags.h  25  #define X86_EFLAGS_ID 0x00200000
X86_CR0_PE  macro  arch/x86/include/asm/processor-flags.h  30  #define X86_CR0_PE 0x00000001
X86_CR0_MP  macro  arch/x86/include/asm/processor-flags.h  31  #define X86_CR0_MP 0x00000002
X86_CR0_EM  macro  arch/x86/include/asm/processor-flags.h  32  #define X86_CR0_EM 0x00000004
X86_CR0_TS  macro  arch/x86/include/asm/processor-flags.h  33  #define X86_CR0_TS 0x00000008
X86_CR0_ET  macro  arch/x86/include/asm/processor-flags.h  34  #define X86_CR0_ET 0x00000010
X86_CR0_NE  macro  arch/x86/include/asm/processor-flags.h  35  #define X86_CR0_NE 0x00000020
X86_CR0_WP  macro  arch/x86/include/asm/processor-flags.h  36  #define X86_CR0_WP 0x00010000
X86_CR0_AM  macro  arch/x86/include/asm/processor-flags.h  37  #define X86_CR0_AM 0x00040000
X86_CR0_NW  macro  arch/x86/include/asm/processor-flags.h  38  #define X86_CR0_NW 0x20000000
X86_CR0_CD  macro  arch/x86/include/asm/processor-flags.h  39  #define X86_CR0_CD 0x40000000
X86_CR0_PG  macro  arch/x86/include/asm/processor-flags.h  40  #define X86_CR0_PG 0x80000000
X86_CR3_PWT  macro  arch/x86/include/asm/processor-flags.h  45  #define X86_CR3_PWT 0x00000008
X86_CR3_PCD  macro  arch/x86/include/asm/processor-flags.h  46  #define X86_CR3_PCD 0x00000010
X86_CR4_VME  macro  arch/x86/include/asm/processor-flags.h  51  #define X86_CR4_VME 0x00000001
X86_CR4_PVI  macro  arch/x86/include/asm/processor-flags.h  52  #define X86_CR4_PVI 0x00000002
X86_CR4_TSD  macro  arch/x86/include/asm/processor-flags.h  53  #define X86_CR4_TSD 0x00000004
X86_CR4_DE  macro  arch/x86/include/asm/processor-flags.h  54  #define X86_CR4_DE 0x00000008
X86_CR4_PSE  macro  arch/x86/include/asm/processor-flags.h  55  #define X86_CR4_PSE 0x00000010
X86_CR4_PAE  macro  arch/x86/include/asm/processor-flags.h  56  #define X86_CR4_PAE 0x00000020
X86_CR4_MCE  macro  arch/x86/include/asm/processor-flags.h  57  #define X86_CR4_MCE 0x00000040
X86_CR4_PGE  macro  arch/x86/include/asm/processor-flags.h  58  #define X86_CR4_PGE 0x00000080
X86_CR4_PCE  macro  arch/x86/include/asm/processor-flags.h  59  #define X86_CR4_PCE 0x00000100
X86_CR4_OSFXSR  macro  arch/x86/include/asm/processor-flags.h  60  #define X86_CR4_OSFXSR 0x00000200
X86_CR4_OSXMMEXCPT  macro  arch/x86/include/asm/processor-flags.h  61  #define X86_CR4_OSXMMEXCPT 0x00000400
X86_CR4_VMXE  macro  arch/x86/include/asm/processor-flags.h  62  #define X86_CR4_VMXE 0x00002000
X86_CR4_RDWRGSFS  macro  arch/x86/include/asm/processor-flags.h  63  #define X86_CR4_RDWRGSFS 0x00010000
X86_CR4_OSXSAVE  macro  arch/x86/include/asm/processor-flags.h  64  #define X86_CR4_OSXSAVE 0x00040000
X86_CR4_SMEP  macro  arch/x86/include/asm/processor-flags.h  65  #define X86_CR4_SMEP 0x00100000
X86_CR8_TPR  macro  arch/x86/include/asm/processor-flags.h  70  #define X86_CR8_TPR 0x0000000F
CX86_PCR0  macro  arch/x86/include/asm/processor-flags.h  79  #define CX86_PCR0 0x20
CX86_GCR  macro  arch/x86/include/asm/processor-flags.h  80  #define CX86_GCR 0xb8
CX86_CCR0  macro  arch/x86/include/asm/processor-flags.h  81  #define CX86_CCR0 0xc0
CX86_CCR1  macro  arch/x86/include/asm/processor-flags.h  82  #define CX86_CCR1 0xc1
CX86_CCR2  macro  arch/x86/include/asm/processor-flags.h  83  #define CX86_CCR2 0xc2
CX86_CCR3  macro  arch/x86/include/asm/processor-flags.h  84  #define CX86_CCR3 0xc3
CX86_CCR4  macro  arch/x86/include/asm/processor-flags.h  85  #define CX86_CCR4 0xe8
CX86_CCR5  macro  arch/x86/include/asm/processor-flags.h  86  #define CX86_CCR5 0xe9
CX86_CCR6  macro  arch/x86/include/asm/processor-flags.h  87  #define CX86_CCR6 0xea
CX86_CCR7  macro  arch/x86/include/asm/processor-flags.h  88  #define CX86_CCR7 0xeb
CX86_PCR1  macro  arch/x86/include/asm/processor-flags.h  89  #define CX86_PCR1 0xf0
CX86_DIR0  macro  arch/x86/include/asm/processor-flags.h  90  #define CX86_DIR0 0xfe
CX86_DIR1  macro  arch/x86/include/asm/processor-flags.h  91  #define CX86_DIR1 0xff
CX86_ARR_BASE  macro  arch/x86/include/asm/processor-flags.h  92  #define CX86_ARR_BASE 0xc4
CX86_RCR_BASE  macro  arch/x86/include/asm/processor-flags.h  93  #define CX86_RCR_BASE 0xdc
X86_VM_MASK  macro  arch/x86/include/asm/processor-flags.h  99  #define X86_VM_MASK 0
_ASM_X86_SEGMENT_H  macro  arch/x86/include/asm/segment.h  2  #define _ASM_X86_SEGMENT_H
GDT_ENTRY  macro  arch/x86/include/asm/segment.h  8  #define GDT_ENTRY(flags,base,limit) ((((base)  & _AC(0xff000000,ULL)) << (56-24)) | (((flags) & _AC(0x0000f0ff,ULL)) << 40) | (((limit) & _AC(0x000f0000,ULL)) << (48-16)) | (((base)  & _AC(0x00ffffff,ULL)) << 16) | (((limit) & _AC(0x0000ffff,ULL))))
GDT_ENTRY_BOOT_CS  macro  arch/x86/include/asm/segment.h  17  #define GDT_ENTRY_BOOT_CS 2
__BOOT_CS  macro  arch/x86/include/asm/segment.h  18  #define __BOOT_CS (GDT_ENTRY_BOOT_CS * 8)
GDT_ENTRY_BOOT_DS  macro  arch/x86/include/asm/segment.h  20  #define GDT_ENTRY_BOOT_DS (GDT_ENTRY_BOOT_CS + 1)
__BOOT_DS  macro  arch/x86/include/asm/segment.h  21  #define __BOOT_DS (GDT_ENTRY_BOOT_DS * 8)
GDT_ENTRY_BOOT_TSS  macro  arch/x86/include/asm/segment.h  23  #define GDT_ENTRY_BOOT_TSS (GDT_ENTRY_BOOT_CS + 2)
__BOOT_TSS  macro  arch/x86/include/asm/segment.h  24  #define __BOOT_TSS (GDT_ENTRY_BOOT_TSS * 8)
GDT_ENTRY_TLS_MIN  macro  arch/x86/include/asm/segment.h  170  #define GDT_ENTRY_TLS_MIN 12
GDT_ENTRY_TLS_MAX  macro  arch/x86/include/asm/segment.h  171  #define GDT_ENTRY_TLS_MAX 14
GDT_ENTRY_DEFAULT_USER_CS  macro  arch/x86/include/asm/segment.h  164  #define GDT_ENTRY_DEFAULT_USER_CS 6
GDT_ENTRY_DEFAULT_USER_DS  macro  arch/x86/include/asm/segment.h  163  #define GDT_ENTRY_DEFAULT_USER_DS 5
GDT_ENTRY_KERNEL_BASE  macro  arch/x86/include/asm/segment.h  78  #define GDT_ENTRY_KERNEL_BASE (12)
GDT_ENTRY_KERNEL_CS  macro  arch/x86/include/asm/segment.h  151  #define GDT_ENTRY_KERNEL_CS 2
GDT_ENTRY_KERNEL_DS  macro  arch/x86/include/asm/segment.h  152  #define GDT_ENTRY_KERNEL_DS 3
GDT_ENTRY_TSS  macro  arch/x86/include/asm/segment.h  168  #define GDT_ENTRY_TSS 8
GDT_ENTRY_LDT  macro  arch/x86/include/asm/segment.h  169  #define GDT_ENTRY_LDT 10
GDT_ENTRY_PNPBIOS_BASE  macro  arch/x86/include/asm/segment.h  87  #define GDT_ENTRY_PNPBIOS_BASE (GDT_ENTRY_KERNEL_BASE+6)
GDT_ENTRY_APMBIOS_BASE  macro  arch/x86/include/asm/segment.h  88  #define GDT_ENTRY_APMBIOS_BASE (GDT_ENTRY_KERNEL_BASE+11)
GDT_ENTRY_ESPFIX_SS  macro  arch/x86/include/asm/segment.h  90  #define GDT_ENTRY_ESPFIX_SS (GDT_ENTRY_KERNEL_BASE+14)
__ESPFIX_SS  macro  arch/x86/include/asm/segment.h  91  #define __ESPFIX_SS (GDT_ENTRY_ESPFIX_SS*8)
GDT_ENTRY_PERCPU  macro  arch/x86/include/asm/segment.h  93  #define GDT_ENTRY_PERCPU (GDT_ENTRY_KERNEL_BASE+15)
__KERNEL_PERCPU  macro  arch/x86/include/asm/segment.h  97  #define __KERNEL_PERCPU 0
GDT_ENTRY_STACK_CANARY  macro  arch/x86/include/asm/segment.h  100  #define GDT_ENTRY_STACK_CANARY (GDT_ENTRY_KERNEL_BASE+16)
__KERNEL_STACK_CANARY  macro  arch/x86/include/asm/segment.h  104  #define __KERNEL_STACK_CANARY 0
GDT_ENTRY_DOUBLEFAULT_TSS  macro  arch/x86/include/asm/segment.h  107  #define GDT_ENTRY_DOUBLEFAULT_TSS 31
GDT_ENTRIES  macro  arch/x86/include/asm/segment.h  183  #define GDT_ENTRIES 16
GDT_ENTRY_PNPBIOS_CS32  macro  arch/x86/include/asm/segment.h  115  #define GDT_ENTRY_PNPBIOS_CS32 (GDT_ENTRY_PNPBIOS_BASE + 0)
GDT_ENTRY_PNPBIOS_CS16  macro  arch/x86/include/asm/segment.h  116  #define GDT_ENTRY_PNPBIOS_CS16 (GDT_ENTRY_PNPBIOS_BASE + 1)
GDT_ENTRY_PNPBIOS_DS  macro  arch/x86/include/asm/segment.h  117  #define GDT_ENTRY_PNPBIOS_DS (GDT_ENTRY_PNPBIOS_BASE + 2)
GDT_ENTRY_PNPBIOS_TS1  macro  arch/x86/include/asm/segment.h  118  #define GDT_ENTRY_PNPBIOS_TS1 (GDT_ENTRY_PNPBIOS_BASE + 3)
GDT_ENTRY_PNPBIOS_TS2  macro  arch/x86/include/asm/segment.h  119  #define GDT_ENTRY_PNPBIOS_TS2 (GDT_ENTRY_PNPBIOS_BASE + 4)
PNP_CS32  macro  arch/x86/include/asm/segment.h  122  #define PNP_CS32 (GDT_ENTRY_PNPBIOS_CS32 * 8)
PNP_CS16  macro  arch/x86/include/asm/segment.h  123  #define PNP_CS16 (GDT_ENTRY_PNPBIOS_CS16 * 8)
PNP_DS  macro  arch/x86/include/asm/segment.h  124  #define PNP_DS (GDT_ENTRY_PNPBIOS_DS * 8)
PNP_TS1  macro  arch/x86/include/asm/segment.h  125  #define PNP_TS1 (GDT_ENTRY_PNPBIOS_TS1 * 8)
PNP_TS2  macro  arch/x86/include/asm/segment.h  126  #define PNP_TS2 (GDT_ENTRY_PNPBIOS_TS2 * 8)
SEGMENT_RPL_MASK  macro  arch/x86/include/asm/segment.h  202  #define SEGMENT_RPL_MASK 0x3
SEGMENT_TI_MASK  macro  arch/x86/include/asm/segment.h  204  #define SEGMENT_TI_MASK 0x4
USER_RPL  macro  arch/x86/include/asm/segment.h  196  #define USER_RPL 0x3
SEGMENT_LDT  macro  arch/x86/include/asm/segment.h  198  #define SEGMENT_LDT 0x4
SEGMENT_GDT  macro  arch/x86/include/asm/segment.h  199  #define SEGMENT_GDT 0x0
SEGMENT_IS_PNP_CODE  macro  arch/x86/include/asm/segment.h  144  #define SEGMENT_IS_PNP_CODE(x) (((x) & 0xf4) == GDT_ENTRY_PNPBIOS_BASE * 8)
GDT_ENTRY_KERNEL32_CS  macro  arch/x86/include/asm/segment.h  150  #define GDT_ENTRY_KERNEL32_CS 1
__KERNEL32_CS  macro  arch/x86/include/asm/segment.h  154  #define __KERNEL32_CS (GDT_ENTRY_KERNEL32_CS * 8)
GDT_ENTRY_DEFAULT_USER32_CS  macro  arch/x86/include/asm/segment.h  162  #define GDT_ENTRY_DEFAULT_USER32_CS 4
__USER32_CS  macro  arch/x86/include/asm/segment.h  165  #define __USER32_CS (GDT_ENTRY_DEFAULT_USER32_CS*8+3)
__USER32_DS  macro  arch/x86/include/asm/segment.h  166  #define __USER32_DS __USER_DS
GDT_ENTRY_PER_CPU  macro  arch/x86/include/asm/segment.h  173  #define GDT_ENTRY_PER_CPU 15
__PER_CPU_SEG  macro  arch/x86/include/asm/segment.h  174  #define __PER_CPU_SEG (GDT_ENTRY_PER_CPU * 8 + 3)
FS_TLS  macro  arch/x86/include/asm/segment.h  177  #define FS_TLS 0
GS_TLS  macro  arch/x86/include/asm/segment.h  178  #define GS_TLS 1
GS_TLS_SEL  macro  arch/x86/include/asm/segment.h  180  #define GS_TLS_SEL ((GDT_ENTRY_TLS_MIN+GS_TLS)*8 + 3)
FS_TLS_SEL  macro  arch/x86/include/asm/segment.h  181  #define FS_TLS_SEL ((GDT_ENTRY_TLS_MIN+FS_TLS)*8 + 3)
__KERNEL_CS  macro  arch/x86/include/asm/segment.h  187  #define __KERNEL_CS (GDT_ENTRY_KERNEL_CS*8)
__KERNEL_DS  macro  arch/x86/include/asm/segment.h  188  #define __KERNEL_DS (GDT_ENTRY_KERNEL_DS*8)
__USER_DS  macro  arch/x86/include/asm/segment.h  189  #define __USER_DS (GDT_ENTRY_DEFAULT_USER_DS*8+3)
__USER_CS  macro  arch/x86/include/asm/segment.h  190  #define __USER_CS (GDT_ENTRY_DEFAULT_USER_CS*8+3)
get_kernel_rpl  macro  arch/x86/include/asm/paravirt.h  124  #define get_kernel_rpl() (pv_info.kernel_rpl)
IDT_ENTRIES  macro  arch/x86/include/asm/segment.h  206  #define IDT_ENTRIES 256
NUM_EXCEPTION_VECTORS  macro  arch/x86/include/asm/segment.h  207  #define NUM_EXCEPTION_VECTORS 32
EXCEPTION_ERRCODE_MASK  macro  arch/x86/include/asm/segment.h  209  #define EXCEPTION_ERRCODE_MASK 0x00027d00
GDT_SIZE  macro  arch/x86/include/asm/segment.h  210  #define GDT_SIZE (GDT_ENTRIES * 8)
GDT_ENTRY_TLS_ENTRIES  macro  arch/x86/include/asm/segment.h  211  #define GDT_ENTRY_TLS_ENTRIES 3
TLS_SIZE  macro  arch/x86/include/asm/segment.h  212  #define TLS_SIZE (GDT_ENTRY_TLS_ENTRIES * 8)
loadsegment  macro  arch/x86/include/asm/segment.h  222  #define loadsegment(seg,value) do { unsigned short __val = (value); asm volatile("						\n" "1:	movl %k0,%%" #seg "		\n" ".section .fixup,\"ax\"			\n" "2:	xorl %k0,%k0			\n" "		jmp 1b				\n" ".previous					\n" _ASM_EXTABLE(1b, 2b) : "+r" (__val) : : "memory"); } while (0)
savesegment  macro  arch/x86/include/asm/segment.h  242  #define savesegment(seg,value) asm("mov %%" #seg ",%0":"=r" (value) : : "memory")
get_user_gs  macro  arch/x86/include/asm/segment.h  256  #define get_user_gs(regs) (u16)((regs)->gs)
set_user_gs  macro  arch/x86/include/asm/segment.h  257  #define set_user_gs(regs,v) do { (regs)->gs = (v); } while (0)
task_user_gs  macro  arch/x86/include/asm/segment.h  258  #define task_user_gs(tsk) (task_pt_regs(tsk)->gs)
lazy_save_gs  macro  arch/x86/include/asm/segment.h  259  #define lazy_save_gs(v) do { } while (0)
lazy_load_gs  macro  arch/x86/include/asm/segment.h  260  #define lazy_load_gs(v) do { } while (0)
get_limit  function  arch/x86/include/asm/segment.h  264  static inline unsigned long get_limit(unsigned long segment)
_ASM_X86_PARAVIRT_TYPES_H  macro  arch/x86/include/asm/paravirt_types.h  2  #define _ASM_X86_PARAVIRT_TYPES_H
CLBR_NONE  macro  arch/x86/include/asm/paravirt_types.h  5  #define CLBR_NONE 0
CLBR_EAX  macro  arch/x86/include/asm/paravirt_types.h  6  #define CLBR_EAX (1 << 0)
CLBR_ECX  macro  arch/x86/include/asm/paravirt_types.h  7  #define CLBR_ECX (1 << 1)
CLBR_EDX  macro  arch/x86/include/asm/paravirt_types.h  8  #define CLBR_EDX (1 << 2)
CLBR_EDI  macro  arch/x86/include/asm/paravirt_types.h  9  #define CLBR_EDI (1 << 3)
CLBR_ANY  macro  arch/x86/include/asm/paravirt_types.h  29  #define CLBR_ANY ((1 << 9) - 1)
CLBR_ARG_REGS  macro  arch/x86/include/asm/paravirt_types.h  31  #define CLBR_ARG_REGS (CLBR_RDI | CLBR_RSI | CLBR_RDX | CLBR_RCX | CLBR_R8 | CLBR_R9)
CLBR_RET_REG  macro  arch/x86/include/asm/paravirt_types.h  33  #define CLBR_RET_REG (CLBR_RAX)
CLBR_SCRATCH  macro  arch/x86/include/asm/paravirt_types.h  34  #define CLBR_SCRATCH (CLBR_R10 | CLBR_R11)
CLBR_RAX  macro  arch/x86/include/asm/paravirt_types.h  19  #define CLBR_RAX CLBR_EAX
CLBR_RCX  macro  arch/x86/include/asm/paravirt_types.h  20  #define CLBR_RCX CLBR_ECX
CLBR_RDX  macro  arch/x86/include/asm/paravirt_types.h  21  #define CLBR_RDX CLBR_EDX
CLBR_RDI  macro  arch/x86/include/asm/paravirt_types.h  22  #define CLBR_RDI CLBR_EDI
CLBR_RSI  macro  arch/x86/include/asm/paravirt_types.h  23  #define CLBR_RSI (1 << 4)
CLBR_R8  macro  arch/x86/include/asm/paravirt_types.h  24  #define CLBR_R8 (1 << 5)
CLBR_R9  macro  arch/x86/include/asm/paravirt_types.h  25  #define CLBR_R9 (1 << 6)
CLBR_R10  macro  arch/x86/include/asm/paravirt_types.h  26  #define CLBR_R10 (1 << 7)
CLBR_R11  macro  arch/x86/include/asm/paravirt_types.h  27  #define CLBR_R11 (1 << 8)
CLBR_CALLEE_SAVE  macro  arch/x86/include/asm/paravirt_types.h  38  #define CLBR_CALLEE_SAVE ((CLBR_ARG_REGS | CLBR_SCRATCH) & ~CLBR_RET_REG)
paravirt_callee_save  struct  arch/x86/include/asm/paravirt_types.h  59  struct paravirt_callee_save { void *func; };
pv_info  struct  arch/x86/include/asm/paravirt_types.h  64  struct pv_info { unsigned int kernel_rpl; int shared_kernel_pmd; u16 extra_user_64bit_cs; int paravirt_enabled; const char *name; };
pv_init_ops  struct  arch/x86/include/asm/paravirt_types.h  76  struct pv_init_ops { unsigned (*patch)(u8 type, u16 clobber, void *insnbuf,unsigned long addr, unsigned len); };
pv_lazy_ops  struct  arch/x86/include/asm/paravirt_types.h  90  struct pv_lazy_ops { void (*enter)(void); void (*leave)(void); };
pv_time_ops  struct  arch/x86/include/asm/paravirt_types.h  96  struct pv_time_ops { unsigned long long (*sched_clock)(void); unsigned long long (*steal_clock)(int cpu); unsigned long (*get_tsc_khz)(void); };
pv_cpu_ops  struct  arch/x86/include/asm/paravirt_types.h  102  struct pv_cpu_ops { unsigned long (*get_debugreg)(int regno); void (*set_debugreg)(int regno, unsigned long value); void (*clts)(void); unsigned long (*read_cr0)(void); void (*write_cr0)(unsigned long); unsigned long (*read_cr4_safe)(void); unsigned long (*read_cr4)(void); void (*write_cr4)(unsigned long); unsigned long (*read_cr8)(void); void (*write_cr8)(unsigned long); void (*load_tr_desc)(void); void (*load_gdt)(const struct desc_ptr *); void (*load_idt)(const struct desc_ptr *); void (*store_gdt)(struct desc_ptr *); void (*store_idt)(struct desc_ptr *); void (*set_ldt)(const void *desc, unsigned entries); unsigned long (*store_tr)(void); void (*load_tls)(struct thread_struct *t, unsigned int cpu); void (*load_gs_index)(unsigned int idx); void (*write_ldt_entry)(struct desc_struct *ldt, int entrynum,const void *desc); void (*write_gdt_entry)(struct desc_struct *,int entrynum, const void *desc, int size); void (*write_idt_entry)(gate_desc *,int entrynum, const gate_desc *gate); void (*alloc_ldt)(struct desc_struct *ldt, unsigned entries); void (*free_ldt)(struct desc_struct *ldt, unsigned entries); void (*load_sp0)(struct tss_struct *tss, struct thread_struct *t); void (*set_iopl_mask)(unsigned mask); void (*wbinvd)(void); void (*io_delay)(void); void (*cpuid)(unsigned int *eax, unsigned int *ebx,unsigned int *ecx, unsigned int *edx); u64 (*read_msr)(unsigned int msr, int *err); int (*rdmsr_regs)(u32 *regs); int (*write_msr)(unsigned int msr, unsigned low, unsigned high); int (*wrmsr_regs)(u32 *regs); u64 (*read_tsc)(void); u64 (*read_pmc)(int counter); unsigned long long (*read_tscp)(unsigned int *aux); void (*irq_enable_sysexit)(void); void (*usergs_sysret64)(void); void (*usergs_sysret32)(void); void (*iret)(void); void (*swapgs)(void); void (*start_context_switch)(struct task_struct *prev); void (*end_context_switch)(struct task_struct *next); };
pv_irq_ops  struct  arch/x86/include/asm/paravirt_types.h  198  struct pv_irq_ops { struct paravirt_callee_save save_fl; struct paravirt_callee_save restore_fl; struct paravirt_callee_save irq_disable; struct paravirt_callee_save irq_enable; void (*safe_halt)(void); void (*halt)(void); void (*adjust_exception_frame)(void); };
pv_apic_ops  struct  arch/x86/include/asm/paravirt_types.h  221  struct pv_apic_ops { void (*startup_ipi_hook)(int phys_apicid,unsigned long start_eip,unsigned long start_esp); };
pv_mmu_ops  struct  arch/x86/include/asm/paravirt_types.h  229  struct pv_mmu_ops { unsigned long (*read_cr2)(void); void (*write_cr2)(unsigned long); unsigned long (*read_cr3)(void); void (*write_cr3)(unsigned long); void (*activate_mm)(struct mm_struct *prev,struct mm_struct *next); void (*dup_mmap)(struct mm_struct *oldmm,struct mm_struct *mm); void (*exit_mmap)(struct mm_struct *mm); void (*flush_tlb_user)(void); void (*flush_tlb_kernel)(void); void (*flush_tlb_single)(unsigned long addr); void (*flush_tlb_others)(const struct cpumask *cpus,struct mm_struct *mm,unsigned long va); int (*pgd_alloc)(struct mm_struct *mm); void (*pgd_free)(struct mm_struct *mm, pgd_t *pgd); void (*alloc_pte)(struct mm_struct *mm, unsigned long pfn); void (*alloc_pmd)(struct mm_struct *mm, unsigned long pfn); void (*alloc_pud)(struct mm_struct *mm, unsigned long pfn); void (*release_pte)(unsigned long pfn); void (*release_pmd)(unsigned long pfn); void (*release_pud)(unsigned long pfn); void (*set_pte)(pte_t *ptep, pte_t pteval); void (*set_pte_at)(struct mm_struct *mm, unsigned long addr,pte_t *ptep, pte_t pteval); void (*set_pmd)(pmd_t *pmdp, pmd_t pmdval); void (*set_pmd_at)(struct mm_struct *mm, unsigned long addr,pmd_t *pmdp, pmd_t pmdval); void (*pte_update)(struct mm_struct *mm, unsigned long addr,pte_t *ptep); void (*pte_update_defer)(struct mm_struct *mm,unsigned long addr, pte_t *ptep); void (*pmd_update)(struct mm_struct *mm, unsigned long addr,pmd_t *pmdp); void (*pmd_update_defer)(struct mm_struct *mm,unsigned long addr, pmd_t *pmdp); pte_t (*ptep_modify_prot_start)(struct mm_struct *mm, unsigned long addr,pte_t *ptep); void (*ptep_modify_prot_commit)(struct mm_struct *mm, unsigned long addr,pte_t *ptep, pte_t pte); struct paravirt_callee_save pte_val; struct paravirt_callee_save make_pte; struct paravirt_callee_save pgd_val; struct paravirt_callee_save make_pgd; void (*set_pte_atomic)(pte_t *ptep, pte_t pteval); void (*pte_clear)(struct mm_struct *mm, unsigned long addr,pte_t *ptep); void (*pmd_clear)(pmd_t *pmdp); void (*set_pud)(pud_t *pudp, pud_t pudval); struct paravirt_callee_save pmd_val; struct paravirt_callee_save make_pmd; struct paravirt_callee_save pud_val; struct paravirt_callee_save make_pud; void (*set_pgd)(pgd_t *pudp, pgd_t pgdval); struct pv_lazy_ops lazy_mode; void (*set_fixmap)(unsigned };
pv_lock_ops  struct  arch/x86/include/asm/paravirt_types.h  330  struct pv_lock_ops { int (*spin_is_locked)(struct arch_spinlock *lock); int (*spin_is_contended)(struct arch_spinlock *lock); void (*spin_lock)(struct arch_spinlock *lock); void (*spin_lock_flags)(struct arch_spinlock *lock, unsigned long flags); int (*spin_trylock)(struct arch_spinlock *lock); void (*spin_unlock)(struct arch_spinlock *lock); };
paravirt_patch_template  struct  arch/x86/include/asm/paravirt_types.h  342  struct paravirt_patch_template { struct pv_init_ops pv_init_ops; struct pv_time_ops pv_time_ops; struct pv_cpu_ops pv_cpu_ops; struct pv_irq_ops pv_irq_ops; struct pv_apic_ops pv_apic_ops; struct pv_mmu_ops pv_mmu_ops; struct pv_lock_ops pv_lock_ops; };
PARAVIRT_PATCH  macro  arch/x86/include/asm/paravirt_types.h  361  #define PARAVIRT_PATCH(x) (offsetof(struct paravirt_patch_template, x) / sizeof(void *))
paravirt_type  macro  arch/x86/include/asm/paravirt_types.h  364  #define paravirt_type(op) [paravirt_typenum] "i" (PARAVIRT_PATCH(op)), [paravirt_opptr] "i" (&(op))
paravirt_clobber  macro  arch/x86/include/asm/paravirt_types.h  367  #define paravirt_clobber(clobber) [paravirt_clobber] "i" (clobber)
_paravirt_alt  macro  arch/x86/include/asm/paravirt_types.h  374  #define _paravirt_alt(insn_string,type,clobber) "771:\n\t" insn_string "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" _ASM_ALIGN "\n" _ASM_PTR " 771b\n" "  .byte " type "\n" "  .byte 772b-771b\n" "  .short " clobber "\n" ".popsection\n"
paravirt_alt  macro  arch/x86/include/asm/paravirt_types.h  385  #define paravirt_alt(insn_string) _paravirt_alt(insn_string, "%c[paravirt_typenum]", "%c[paravirt_clobber]")
DEF_NATIVE  macro  arch/x86/include/asm/paravirt_types.h  389  #define DEF_NATIVE(ops,name,code) extern const char start_##ops##_##name[], end_##ops##_##name[]; asm("start_" #ops "_" #name ": " code "; end_" #ops "_" #name ":")
paravirt_patch_nop  prototype  arch/x86/include/asm/paravirt_types.h  393  unsigned paravirt_patch_nop(void);
paravirt_patch_ident_32  prototype  arch/x86/include/asm/paravirt_types.h  394  unsigned paravirt_patch_ident_32(void *insnbuf,unsigned len);
paravirt_patch_ident_64  prototype  arch/x86/include/asm/paravirt_types.h  395  unsigned paravirt_patch_ident_64(void *insnbuf,unsigned len);
paravirt_patch_ignore  prototype  arch/x86/include/asm/paravirt_types.h  396  unsigned paravirt_patch_ignore(unsigned len);
paravirt_patch_call  prototype  arch/x86/include/asm/paravirt_types.h  397  unsigned paravirt_patch_call(void *insnbuf,const void *target, u16 tgt_clobbers,unsigned long addr, u16 site_clobbers,unsigned len);
paravirt_patch_jmp  prototype  arch/x86/include/asm/paravirt_types.h  401  unsigned paravirt_patch_jmp(void *insnbuf,const void *target,unsigned long addr, unsigned len);
paravirt_patch_default  prototype  arch/x86/include/asm/paravirt_types.h  403  unsigned paravirt_patch_default(u8 type,u16 clobbers,void *insnbuf,unsigned long addr, unsigned len);
paravirt_patch_insns  prototype  arch/x86/include/asm/paravirt_types.h  406  unsigned paravirt_patch_insns(void *insnbuf,unsigned len,const char *start, const char *end);
native_patch  prototype  arch/x86/include/asm/paravirt_types.h  409  unsigned native_patch(u8 type,u16 clobbers,void *ibuf,unsigned long addr, unsigned len);
paravirt_disable_iospace  prototype  arch/x86/include/asm/paravirt_types.h  412  int paravirt_disable_iospace(void);
PARAVIRT_CALL  macro  arch/x86/include/asm/paravirt.h  892  #undef PARAVIRT_CALL
PVOP_VCALL_ARGS  macro  arch/x86/include/asm/paravirt_types.h  506  #define PVOP_VCALL_ARGS unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax
PVOP_CALL_ARGS  macro  arch/x86/include/asm/paravirt_types.h  509  #define PVOP_CALL_ARGS PVOP_VCALL_ARGS
PVOP_CALL_ARG1  macro  arch/x86/include/asm/paravirt_types.h  511  #define PVOP_CALL_ARG1(x) "D" ((unsigned long)(x))
PVOP_CALL_ARG2  macro  arch/x86/include/asm/paravirt_types.h  512  #define PVOP_CALL_ARG2(x) "S" ((unsigned long)(x))
PVOP_CALL_ARG3  macro  arch/x86/include/asm/paravirt_types.h  513  #define PVOP_CALL_ARG3(x) "d" ((unsigned long)(x))
PVOP_VCALL_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  516  #define PVOP_VCALL_CLOBBERS "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx)
PVOP_CALL_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  519  #define PVOP_CALL_CLOBBERS PVOP_VCALL_CLOBBERS,"=a" (__eax)
PVOP_VCALLEE_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  522  #define PVOP_VCALLEE_CLOBBERS "=a" (__eax)
PVOP_CALLEE_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  523  #define PVOP_CALLEE_CLOBBERS PVOP_VCALLEE_CLOBBERS
EXTRA_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  525  #define EXTRA_CLOBBERS ,"r8","r9","r10","r11"
VEXTRA_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  526  #define VEXTRA_CLOBBERS ,"rax","r8","r9","r10","r11"
PVOP_CALL_ARG4  macro  arch/x86/include/asm/paravirt_types.h  514  #define PVOP_CALL_ARG4(x) "c" ((unsigned long)(x))
PVOP_TEST_NULL  macro  arch/x86/include/asm/paravirt_types.h  532  #define PVOP_TEST_NULL(op) ((void)op)
____PVOP_CALL  macro  arch/x86/include/asm/paravirt_types.h  535  #define ____PVOP_CALL(rettype,op,clbr,call_clbr,extra_clbr, pre, post, ...) ({ rettype __ret; PVOP_CALL_ARGS; PVOP_TEST_NULL(op); /* This is 32-bit specific, but is okay in 64-bit */ /* since this condition will never hold */ if (sizeof(rettype) > sizeof(unsigned long)) { asm volatile(pre paravirt_alt(PARAVIRT_CALL) post : call_clbr : paravirt_type(op), paravirt_clobber(clbr), ##__VA_ARGS__ : "memory", "cc" extra_clbr); __ret = (rettype)((((u64)__edx) << 32) | __eax); } else { asm volatile(pre paravirt_alt(PARAVIRT_CALL) post : call_clbr : paravirt_type(op), paravirt_clobber(clbr), ##__VA_ARGS__ : "memory", "cc" extra_clbr); __ret = (rettype)__eax; } __ret; })
__PVOP_CALL  macro  arch/x86/include/asm/paravirt.h  893  #undef __PVOP_CALL
__PVOP_CALLEESAVE  macro  arch/x86/include/asm/paravirt_types.h  571  #define __PVOP_CALLEESAVE(rettype,op,pre,post,...) ____PVOP_CALL(rettype, op.func, CLBR_RET_REG, PVOP_CALLEE_CLOBBERS, , pre, post, ##__VA_ARGS__)
____PVOP_VCALL  macro  arch/x86/include/asm/paravirt_types.h  577  #define ____PVOP_VCALL(op,clbr,call_clbr,extra_clbr,pre,post,...) ({ PVOP_VCALL_ARGS; PVOP_TEST_NULL(op); asm volatile(pre paravirt_alt(PARAVIRT_CALL) post : call_clbr : paravirt_type(op), paravirt_clobber(clbr), ##__VA_ARGS__ : "memory", "cc" extra_clbr); })
__PVOP_VCALL  macro  arch/x86/include/asm/paravirt.h  894  #undef __PVOP_VCALL
__PVOP_VCALLEESAVE  macro  arch/x86/include/asm/paravirt_types.h  596  #define __PVOP_VCALLEESAVE(op,pre,post,...) ____PVOP_VCALL(op.func, CLBR_RET_REG, PVOP_VCALLEE_CLOBBERS, , pre, post, ##__VA_ARGS__)
PVOP_CALL0  macro  arch/x86/include/asm/paravirt.h  896  #undef PVOP_CALL0
PVOP_VCALL0  macro  arch/x86/include/asm/paravirt.h  895  #undef PVOP_VCALL0
PVOP_CALLEE0  macro  arch/x86/include/asm/paravirt_types.h  608  #define PVOP_CALLEE0(rettype,op) __PVOP_CALLEESAVE(rettype, op, "", "")
PVOP_VCALLEE0  macro  arch/x86/include/asm/paravirt_types.h  610  #define PVOP_VCALLEE0(op) __PVOP_VCALLEESAVE(op, "", "")
PVOP_CALL1  macro  arch/x86/include/asm/paravirt.h  898  #undef PVOP_CALL1
PVOP_VCALL1  macro  arch/x86/include/asm/paravirt.h  897  #undef PVOP_VCALL1
PVOP_CALLEE1  macro  arch/x86/include/asm/paravirt_types.h  619  #define PVOP_CALLEE1(rettype,op,arg1) __PVOP_CALLEESAVE(rettype, op, "", "", PVOP_CALL_ARG1(arg1))
PVOP_VCALLEE1  macro  arch/x86/include/asm/paravirt_types.h  621  #define PVOP_VCALLEE1(op,arg1) __PVOP_VCALLEESAVE(op, "", "", PVOP_CALL_ARG1(arg1))
PVOP_CALL2  macro  arch/x86/include/asm/paravirt.h  900  #undef PVOP_CALL2
PVOP_VCALL2  macro  arch/x86/include/asm/paravirt.h  899  #undef PVOP_VCALL2
PVOP_CALLEE2  macro  arch/x86/include/asm/paravirt_types.h  632  #define PVOP_CALLEE2(rettype,op,arg1,arg2) __PVOP_CALLEESAVE(rettype, op, "", "", PVOP_CALL_ARG1(arg1), PVOP_CALL_ARG2(arg2))
PVOP_VCALLEE2  macro  arch/x86/include/asm/paravirt_types.h  635  #define PVOP_VCALLEE2(op,arg1,arg2) __PVOP_VCALLEESAVE(op, "", "", PVOP_CALL_ARG1(arg1), PVOP_CALL_ARG2(arg2))
PVOP_CALL3  macro  arch/x86/include/asm/paravirt.h  902  #undef PVOP_CALL3
PVOP_VCALL3  macro  arch/x86/include/asm/paravirt.h  901  #undef PVOP_VCALL3
PVOP_CALL4  macro  arch/x86/include/asm/paravirt.h  904  #undef PVOP_CALL4
PVOP_VCALL4  macro  arch/x86/include/asm/paravirt.h  903  #undef PVOP_VCALL4
paravirt_lazy_mode  enum  arch/x86/include/asm/paravirt_types.h  671  enum paravirt_lazy_mode { PARAVIRT_LAZY_NONE, PARAVIRT_LAZY_MMU, PARAVIRT_LAZY_CPU, };
paravirt_get_lazy_mode  prototype  arch/x86/include/asm/paravirt_types.h  677  enum paravirt_lazy_mode paravirt_get_lazy_mode(void);
paravirt_start_context_switch  prototype  arch/x86/include/asm/paravirt_types.h  678  void paravirt_start_context_switch(struct task_struct *prev);
paravirt_end_context_switch  prototype  arch/x86/include/asm/paravirt_types.h  679  void paravirt_end_context_switch(struct task_struct *next);
paravirt_enter_lazy_mmu  prototype  arch/x86/include/asm/paravirt_types.h  681  void paravirt_enter_lazy_mmu(void);
paravirt_leave_lazy_mmu  prototype  arch/x86/include/asm/paravirt_types.h  682  void paravirt_leave_lazy_mmu(void);
_paravirt_nop  prototype  arch/x86/include/asm/paravirt_types.h  684  void _paravirt_nop(void);
_paravirt_ident_32  prototype  arch/x86/include/asm/paravirt_types.h  685  u32 _paravirt_ident_32(u32);
_paravirt_ident_64  prototype  arch/x86/include/asm/paravirt_types.h  686  u64 _paravirt_ident_64(u64);
paravirt_nop  macro  arch/x86/include/asm/paravirt_types.h  688  #define paravirt_nop ((void *)_paravirt_nop)
paravirt_patch_site  struct  arch/x86/include/asm/paravirt_types.h  691  struct paravirt_patch_site { u8 *instr; u8 instrtype; u8 len; u16 clobbers; };
__ASM_GENERIC_PTRACE_H__  macro  include/asm-generic/ptrace.h  10  #define __ASM_GENERIC_PTRACE_H__
SET_IP  macro  include/asm-generic/ptrace.h  19  #define SET_IP(regs,val) (GET_IP(regs) = (val))
instruction_pointer  function  include/asm-generic/ptrace.h  22  static inline unsigned long instruction_pointer(struct pt_regs *regs)
instruction_pointer_set  function  include/asm-generic/ptrace.h  26  static inline void instruction_pointer_set(struct pt_regs *regs,unsigned long val)
SET_USP  macro  include/asm-generic/ptrace.h  41  #define SET_USP(regs,val) (GET_USP(regs) = (val))
user_stack_pointer  function  include/asm-generic/ptrace.h  44  static inline unsigned long user_stack_pointer(struct pt_regs *regs)
user_stack_pointer_set  function  include/asm-generic/ptrace.h  48  static inline void user_stack_pointer_set(struct pt_regs *regs,unsigned long val)
SET_FP  macro  include/asm-generic/ptrace.h  59  #define SET_FP(regs,val) (GET_FP(regs) = (val))
frame_pointer  function  include/asm-generic/ptrace.h  62  static inline unsigned long frame_pointer(struct pt_regs *regs)
frame_pointer_set  function  include/asm-generic/ptrace.h  66  static inline void frame_pointer_set(struct pt_regs *regs,unsigned long val)
_ASM_GENERIC_CPUTIME_H  macro  include/asm-generic/cputime.h  2  #define _ASM_GENERIC_CPUTIME_H
cputime_one_jiffy  macro  include/asm-generic/cputime.h  9  #define cputime_one_jiffy jiffies_to_cputime(1)
cputime_to_jiffies  macro  include/asm-generic/cputime.h  10  #define cputime_to_jiffies(__ct) (__force unsigned long)(__ct)
cputime_to_scaled  macro  include/asm-generic/cputime.h  11  #define cputime_to_scaled(__ct) (__ct)
jiffies_to_cputime  macro  include/asm-generic/cputime.h  12  #define jiffies_to_cputime(__hz) (__force cputime_t)(__hz)
cputime64_to_jiffies64  macro  include/asm-generic/cputime.h  16  #define cputime64_to_jiffies64(__ct) (__force u64)(__ct)
jiffies64_to_cputime64  macro  include/asm-generic/cputime.h  17  #define jiffies64_to_cputime64(__jif) (__force cputime64_t)(__jif)
nsecs_to_cputime64  macro  include/asm-generic/cputime.h  19  #define nsecs_to_cputime64(__ct) jiffies64_to_cputime64(nsecs_to_jiffies64(__ct))
cputime_to_usecs  macro  include/asm-generic/cputime.h  26  #define cputime_to_usecs(__ct) jiffies_to_usecs(cputime_to_jiffies(__ct))
usecs_to_cputime  macro  include/asm-generic/cputime.h  28  #define usecs_to_cputime(__usec) jiffies_to_cputime(usecs_to_jiffies(__usec))
usecs_to_cputime64  macro  include/asm-generic/cputime.h  30  #define usecs_to_cputime64(__usec) jiffies64_to_cputime64(nsecs_to_jiffies64((__usec) * 1000))
cputime_to_secs  macro  include/asm-generic/cputime.h  36  #define cputime_to_secs(jif) (cputime_to_jiffies(jif) / HZ)
secs_to_cputime  macro  include/asm-generic/cputime.h  37  #define secs_to_cputime(sec) jiffies_to_cputime((sec) * HZ)
timespec_to_cputime  macro  include/asm-generic/cputime.h  42  #define timespec_to_cputime(__val) jiffies_to_cputime(timespec_to_jiffies(__val))
cputime_to_timespec  macro  include/asm-generic/cputime.h  44  #define cputime_to_timespec(__ct,__val) jiffies_to_timespec(cputime_to_jiffies(__ct),__val)
timeval_to_cputime  macro  include/asm-generic/cputime.h  50  #define timeval_to_cputime(__val) jiffies_to_cputime(timeval_to_jiffies(__val))
cputime_to_timeval  macro  include/asm-generic/cputime.h  52  #define cputime_to_timeval(__ct,__val) jiffies_to_timeval(cputime_to_jiffies(__ct),__val)
cputime_to_clock_t  macro  include/asm-generic/cputime.h  58  #define cputime_to_clock_t(__ct) jiffies_to_clock_t(cputime_to_jiffies(__ct))
clock_t_to_cputime  macro  include/asm-generic/cputime.h  60  #define clock_t_to_cputime(__x) jiffies_to_cputime(clock_t_to_jiffies(__x))
cputime64_to_clock_t  macro  include/asm-generic/cputime.h  66  #define cputime64_to_clock_t(__ct) jiffies_64_to_clock_t(cputime64_to_jiffies64(__ct))
_ASM_X86_SMP_H  macro  arch/x86/include/asm/smp.h  2  #define _ASM_X86_SMP_H
cpu_has_ht_siblings  function  arch/x86/include/asm/smp.h  25  static inline bool cpu_has_ht_siblings(void)
cpu_sibling_mask  function  arch/x86/include/asm/smp.h  41  static inline struct cpumask *cpu_sibling_mask(int cpu)
cpu_core_mask  function  arch/x86/include/asm/smp.h  46  static inline struct cpumask *cpu_core_mask(int cpu)
cpu_llc_shared_mask  function  arch/x86/include/asm/smp.h  51  static inline struct cpumask *cpu_llc_shared_mask(int cpu)
smp_ops  struct  arch/x86/include/asm/smp.h  67  struct smp_ops { void (*smp_prepare_boot_cpu)(void); void (*smp_prepare_cpus)(unsigned max_cpus); void (*smp_cpus_done)(unsigned max_cpus); void (*stop_other_cpus)(int wait); void (*smp_send_reschedule)(int cpu); int (*cpu_up)(unsigned cpu, struct task_struct *tidle); int (*cpu_disable)(void); void (*cpu_die)(unsigned int cpu); void (*play_dead)(void); void (*send_call_func_ipi)(const struct cpumask *mask); void (*send_call_func_single_ipi)(int cpu); };
set_cpu_sibling_map  prototype  arch/x86/include/asm/smp.h  85  extern void set_cpu_sibling_map(int cpu);
startup_ipi_hook  function  arch/x86/include/asm/paravirt.h  360  static inline void startup_ipi_hook(int phys_apicid,unsigned long start_eip,unsigned long start_esp)
stop_other_cpus  function  arch/x86/include/asm/smp.h  98  static inline void stop_other_cpus(void)
__cpu_disable  function  arch/x86/include/asm/smp.h  123  static inline int __cpu_disable(void)
__cpu_die  function  arch/x86/include/asm/smp.h  128  static inline void __cpu_die(unsigned int cpu)
play_dead  function  arch/x86/include/asm/smp.h  133  static inline void play_dead(void)
arch_send_call_function_single_ipi  function  arch/x86/include/asm/smp.h  143  static inline void arch_send_call_function_single_ipi(int cpu)
arch_send_call_function_ipi_mask  function  arch/x86/include/asm/smp.h  148  static inline void arch_send_call_function_ipi_mask(const struct cpumask *mask)
cpu_disable_common  prototype  arch/x86/include/asm/smp.h  153  void cpu_disable_common(void);
native_smp_prepare_boot_cpu  prototype  arch/x86/include/asm/smp.h  154  void native_smp_prepare_boot_cpu(void);
native_smp_prepare_cpus  prototype  arch/x86/include/asm/smp.h  155  void native_smp_prepare_cpus(unsigned int max_cpus);
native_smp_cpus_done  prototype  arch/x86/include/asm/smp.h  156  void native_smp_cpus_done(unsigned int max_cpus);
native_cpu_up  prototype  arch/x86/include/asm/smp.h  157  int native_cpu_up(unsigned int cpunum,struct task_struct *tidle);
native_cpu_disable  prototype  arch/x86/include/asm/smp.h  158  int native_cpu_disable(void);
native_cpu_die  prototype  arch/x86/include/asm/smp.h  159  void native_cpu_die(unsigned int cpu);
native_play_dead  prototype  arch/x86/include/asm/smp.h  160  void native_play_dead(void);
play_dead_common  prototype  arch/x86/include/asm/smp.h  161  void play_dead_common(void);
wbinvd_on_cpu  macro  arch/x86/include/asm/smp.h  178  #define wbinvd_on_cpu(cpu) wbinvd()
wbinvd_on_all_cpus  function  arch/x86/include/asm/smp.h  179  static inline int wbinvd_on_all_cpus(void)
native_send_call_func_ipi  prototype  arch/x86/include/asm/smp.h  165  void native_send_call_func_ipi(const struct cpumask *mask);
native_send_call_func_single_ipi  prototype  arch/x86/include/asm/smp.h  166  void native_send_call_func_single_ipi(int cpu);
x86_idle_thread_init  prototype  arch/x86/include/asm/smp.h  167  void x86_idle_thread_init(unsigned int cpu,struct task_struct *idle);
smp_store_cpu_info  prototype  arch/x86/include/asm/smp.h  169  void smp_store_cpu_info(int id);
cpu_physical_id  macro  arch/x86/include/asm/smp.h  170  #define cpu_physical_id(cpu) per_cpu(x86_cpu_to_apicid,cpu)
safe_smp_processor_id  macro  arch/x86/include/asm/smp.h  206  #define safe_smp_processor_id() smp_processor_id()
stack_smp_processor_id  macro  arch/x86/include/asm/smp.h  200  #define stack_smp_processor_id() ({ struct thread_info *ti; __asm__("andq %%rsp,%0; ":"=r" (ti) : "0" (CURRENT_MASK)); ti->cpu; })
logical_smp_processor_id  function  arch/x86/include/asm/smp.h  213  static inline int logical_smp_processor_id(void)
hard_smp_processor_id  macro  arch/x86/include/asm/smp.h  226  # define hard_smp_processor_id() 0
nmi_selftest  macro  arch/x86/include/asm/smp.h  234  #define nmi_selftest() do { } while (0)
_LINUX_IPC_H  macro  include/linux/ipc.h  2  #define _LINUX_IPC_H
IPC_PRIVATE  macro  include/linux/ipc.h  6  #define IPC_PRIVATE ((__kernel_key_t) 0)
ipc_perm  struct  include/linux/ipc.h  9  struct ipc_perm { __kernel_key_t key; __kernel_uid_t uid; __kernel_gid_t gid; __kernel_uid_t cuid; __kernel_gid_t cgid; __kernel_mode_t mode; unsigned short seq; };
IPC_CREAT  macro  include/linux/ipc.h  24  #define IPC_CREAT 00001000
IPC_EXCL  macro  include/linux/ipc.h  25  #define IPC_EXCL 00002000
IPC_NOWAIT  macro  include/linux/ipc.h  26  #define IPC_NOWAIT 00004000
IPC_DIPC  macro  include/linux/ipc.h  31  #define IPC_DIPC 00010000
IPC_OWN  macro  include/linux/ipc.h  32  #define IPC_OWN 00020000
IPC_RMID  macro  include/linux/ipc.h  38  #define IPC_RMID 0
IPC_SET  macro  include/linux/ipc.h  39  #define IPC_SET 1
IPC_STAT  macro  include/linux/ipc.h  40  #define IPC_STAT 2
IPC_INFO  macro  include/linux/ipc.h  41  #define IPC_INFO 3
IPC_OLD  macro  include/linux/ipc.h  47  #define IPC_OLD 0
IPC_64  macro  include/linux/ipc.h  49  #define IPC_64 0x0100
ipc_kludge  struct  include/linux/ipc.h  57  struct ipc_kludge { struct msgbuf __user *msgp; long msgtyp; };
SEMOP  macro  include/linux/ipc.h  62  #define SEMOP 1
SEMGET  macro  include/linux/ipc.h  63  #define SEMGET 2
SEMCTL  macro  include/linux/ipc.h  64  #define SEMCTL 3
SEMTIMEDOP  macro  include/linux/ipc.h  65  #define SEMTIMEDOP 4
MSGSND  macro  include/linux/ipc.h  66  #define MSGSND 11
MSGRCV  macro  include/linux/ipc.h  67  #define MSGRCV 12
MSGGET  macro  include/linux/ipc.h  68  #define MSGGET 13
MSGCTL  macro  include/linux/ipc.h  69  #define MSGCTL 14
SHMAT  macro  include/linux/ipc.h  70  #define SHMAT 21
SHMDT  macro  include/linux/ipc.h  71  #define SHMDT 22
SHMGET  macro  include/linux/ipc.h  72  #define SHMGET 23
SHMCTL  macro  include/linux/ipc.h  73  #define SHMCTL 24
DIPC  macro  include/linux/ipc.h  76  #define DIPC 25
IPCCALL  macro  include/linux/ipc.h  78  #define IPCCALL(version,op) ((version)<<16 | (op))
IPCMNI  macro  include/linux/ipc.h  83  #define IPCMNI 32768
kern_ipc_perm  struct  include/linux/ipc.h  86  struct kern_ipc_perm { spinlock_t lock; int deleted; int id; key_t key; uid_t uid; gid_t gid; uid_t cuid; gid_t cgid; umode_t mode; unsigned long seq; void *security; };
_ASM_X86_SEMBUF_H  macro  arch/x86/include/asm/sembuf.h  2  #define _ASM_X86_SEMBUF_H
semid64_ds  struct  arch/x86/include/asm/sembuf.h  13  struct semid64_ds { struct ipc64_perm sem_perm; __kernel_time_t sem_otime; unsigned long __unused1; __kernel_time_t sem_ctime; unsigned long __unused2; unsigned long sem_nsems; unsigned long __unused3; unsigned long __unused4; };
_ASM_X86_SIGNAL_H  macro  arch/x86/include/asm/signal.h  2  #define _ASM_X86_SIGNAL_H
_NSIG  macro  arch/x86/include/asm/signal.h  18  #define _NSIG 64
_NSIG_BPW  macro  arch/x86/include/asm/signal.h  23  # define _NSIG_BPW 64
_NSIG_WORDS  macro  arch/x86/include/asm/signal.h  26  #define _NSIG_WORDS (_NSIG / _NSIG_BPW)
sigset_t  struct  arch/x86/include/asm/signal.h  30  typedef struct { unsigned long sig[_NSIG_WORDS]; } sigset_t;
NSIG  macro  arch/x86/include/asm/signal.h  37  #define NSIG 32
SIGHUP  macro  arch/x86/include/asm/signal.h  43  #define SIGHUP 1
SIGINT  macro  arch/x86/include/asm/signal.h  44  #define SIGINT 2
SIGQUIT  macro  arch/x86/include/asm/signal.h  45  #define SIGQUIT 3
SIGILL  macro  arch/x86/include/asm/signal.h  46  #define SIGILL 4
SIGTRAP  macro  arch/x86/include/asm/signal.h  47  #define SIGTRAP 5
SIGABRT  macro  arch/x86/include/asm/signal.h  48  #define SIGABRT 6
SIGIOT  macro  arch/x86/include/asm/signal.h  49  #define SIGIOT 6
SIGBUS  macro  arch/x86/include/asm/signal.h  50  #define SIGBUS 7
SIGFPE  macro  arch/x86/include/asm/signal.h  51  #define SIGFPE 8
SIGKILL  macro  arch/x86/include/asm/signal.h  52  #define SIGKILL 9
SIGUSR1  macro  arch/x86/include/asm/signal.h  53  #define SIGUSR1 10
SIGSEGV  macro  arch/x86/include/asm/signal.h  54  #define SIGSEGV 11
SIGUSR2  macro  arch/x86/include/asm/signal.h  55  #define SIGUSR2 12
SIGPIPE  macro  arch/x86/include/asm/signal.h  56  #define SIGPIPE 13
SIGALRM  macro  arch/x86/include/asm/signal.h  57  #define SIGALRM 14
SIGTERM  macro  arch/x86/include/asm/signal.h  58  #define SIGTERM 15
SIGSTKFLT  macro  arch/x86/include/asm/signal.h  59  #define SIGSTKFLT 16
SIGCHLD  macro  arch/x86/include/asm/signal.h  60  #define SIGCHLD 17
SIGCONT  macro  arch/x86/include/asm/signal.h  61  #define SIGCONT 18
SIGSTOP  macro  arch/x86/include/asm/signal.h  62  #define SIGSTOP 19
SIGTSTP  macro  arch/x86/include/asm/signal.h  63  #define SIGTSTP 20
SIGTTIN  macro  arch/x86/include/asm/signal.h  64  #define SIGTTIN 21
SIGTTOU  macro  arch/x86/include/asm/signal.h  65  #define SIGTTOU 22
SIGURG  macro  arch/x86/include/asm/signal.h  66  #define SIGURG 23
SIGXCPU  macro  arch/x86/include/asm/signal.h  67  #define SIGXCPU 24
SIGXFSZ  macro  arch/x86/include/asm/signal.h  68  #define SIGXFSZ 25
SIGVTALRM  macro  arch/x86/include/asm/signal.h  69  #define SIGVTALRM 26
SIGPROF  macro  arch/x86/include/asm/signal.h  70  #define SIGPROF 27
SIGWINCH  macro  arch/x86/include/asm/signal.h  71  #define SIGWINCH 28
SIGIO  macro  arch/x86/include/asm/signal.h  72  #define SIGIO 29
SIGPOLL  macro  arch/x86/include/asm/signal.h  73  #define SIGPOLL SIGIO
SIGPWR  macro  arch/x86/include/asm/signal.h  77  #define SIGPWR 30
SIGSYS  macro  arch/x86/include/asm/signal.h  78  #define SIGSYS 31
SIGUNUSED  macro  arch/x86/include/asm/signal.h  79  #define SIGUNUSED 31
SIGRTMIN  macro  arch/x86/include/asm/signal.h  82  #define SIGRTMIN 32
SIGRTMAX  macro  arch/x86/include/asm/signal.h  83  #define SIGRTMAX _NSIG
SA_NOCLDSTOP  macro  arch/x86/include/asm/signal.h  98  #define SA_NOCLDSTOP 0x00000001u
SA_NOCLDWAIT  macro  arch/x86/include/asm/signal.h  99  #define SA_NOCLDWAIT 0x00000002u
SA_SIGINFO  macro  arch/x86/include/asm/signal.h  100  #define SA_SIGINFO 0x00000004u
SA_ONSTACK  macro  arch/x86/include/asm/signal.h  101  #define SA_ONSTACK 0x08000000u
SA_RESTART  macro  arch/x86/include/asm/signal.h  102  #define SA_RESTART 0x10000000u
SA_NODEFER  macro  arch/x86/include/asm/signal.h  103  #define SA_NODEFER 0x40000000u
SA_RESETHAND  macro  arch/x86/include/asm/signal.h  104  #define SA_RESETHAND 0x80000000u
SA_NOMASK  macro  arch/x86/include/asm/signal.h  106  #define SA_NOMASK SA_NODEFER
SA_ONESHOT  macro  arch/x86/include/asm/signal.h  107  #define SA_ONESHOT SA_RESETHAND
SA_RESTORER  macro  arch/x86/include/asm/signal.h  109  #define SA_RESTORER 0x04000000
SS_ONSTACK  macro  arch/x86/include/asm/signal.h  114  #define SS_ONSTACK 1
SS_DISABLE  macro  arch/x86/include/asm/signal.h  115  #define SS_DISABLE 2
MINSIGSTKSZ  macro  arch/x86/include/asm/signal.h  117  #define MINSIGSTKSZ 2048
SIGSTKSZ  macro  arch/x86/include/asm/signal.h  118  #define SIGSTKSZ 8192
do_notify_resume  prototype  arch/x86/include/asm/signal.h  125  extern void do_notify_resume(struct pt_regs *,void *,__u32);
old_sigaction  struct  arch/x86/include/asm/signal.h  130  struct old_sigaction { __sighandler_t sa_handler; old_sigset_t sa_mask; unsigned long sa_flags; __sigrestore_t sa_restorer; };
sigaction  struct  arch/x86/include/asm/signal.h  167  struct sigaction { __sighandler_t sa_handler; unsigned long sa_flags; __sigrestore_t sa_restorer; sigset_t sa_mask; };
k_sigaction  struct  arch/x86/include/asm/signal.h  174  struct k_sigaction { struct sigaction sa; };
sa_handler  macro  arch/x86/include/asm/signal.h  161  #define sa_handler _u._sa_handler
sa_sigaction  macro  arch/x86/include/asm/signal.h  162  #define sa_sigaction _u._sa_sigaction
sigaltstack  struct  arch/x86/include/asm/signal.h  180  typedef struct sigaltstack { void __user *ss_sp; int ss_flags; size_t ss_size; } stack_t;
stack_t  struct  arch/x86/include/asm/signal.h  180  typedef struct sigaltstack { void __user *ss_sp; int ss_flags; size_t ss_size; } stack_t;
__HAVE_ARCH_SIG_BITOPS  macro  arch/x86/include/asm/signal.h  255  #undef __HAVE_ARCH_SIG_BITOPS
__gen_sigaddset  function  arch/x86/include/asm/signal.h  198  static inline void __gen_sigaddset(sigset_t *set,int _sig)
__const_sigaddset  function  arch/x86/include/asm/signal.h  203  static inline void __const_sigaddset(sigset_t *set,int _sig)
__gen_sigdelset  function  arch/x86/include/asm/signal.h  215  static inline void __gen_sigdelset(sigset_t *set,int _sig)
__const_sigdelset  function  arch/x86/include/asm/signal.h  220  static inline void __const_sigdelset(sigset_t *set,int _sig)
__const_sigismember  function  arch/x86/include/asm/signal.h  226  static inline int __const_sigismember(sigset_t *set,int _sig)
__gen_sigismember  function  arch/x86/include/asm/signal.h  232  static inline int __gen_sigismember(sigset_t *set,int _sig)
ptrace_signal_deliver  macro  arch/x86/include/asm/signal.h  259  #define ptrace_signal_deliver(regs,cookie) do { } while (0)
_ASM_X86_SIGINFO_H  macro  arch/x86/include/asm/siginfo.h  2  #define _ASM_X86_SIGINFO_H
__ARCH_SI_CLOCK_T  macro  arch/x86/include/asm/siginfo.h  7  # define __ARCH_SI_CLOCK_T __kernel_si_clock_t
__ARCH_SI_ATTRIBUTES  macro  arch/x86/include/asm/siginfo.h  8  # define __ARCH_SI_ATTRIBUTES __attribute__((aligned(8)))
__ARCH_SI_PREAMBLE_SIZE  macro  arch/x86/include/asm/siginfo.h  10  # define __ARCH_SI_PREAMBLE_SIZE (4 * sizeof(int))
_LINUX_MMZONE_H  macro  include/linux/mmzone.h  2  #define _LINUX_MMZONE_H
MAX_ORDER  macro  include/linux/mmzone.h  26  #define MAX_ORDER CONFIG_FORCE_MAX_ZONEORDER
MAX_ORDER_NR_PAGES  macro  include/linux/mmzone.h  28  #define MAX_ORDER_NR_PAGES (1 << (MAX_ORDER - 1))
PAGE_ALLOC_COSTLY_ORDER  macro  include/linux/mmzone.h  36  #define PAGE_ALLOC_COSTLY_ORDER 3
is_migrate_cma  macro  include/linux/mmzone.h  68  # define is_migrate_cma(migratetype) false
cma_wmark_pages  macro  include/linux/mmzone.h  69  # define cma_wmark_pages(zone) 0
for_each_migratetype_order  macro  include/linux/mmzone.h  72  #define for_each_migratetype_order(order,type) for (order = 0; order < MAX_ORDER; order++) for (type = 0; type < MIGRATE_TYPES; type++)
get_pageblock_migratetype  function  include/linux/mmzone.h  78  static inline int get_pageblock_migratetype(struct page *page)
free_area  struct  include/linux/mmzone.h  83  struct free_area { struct list_head free_list[MIGRATE_TYPES]; unsigned long nr_free; };
zone_padding  struct  include/linux/mmzone.h  97  struct zone_padding { char x[0]; } ____cacheline_internodealigned_in_smp;
ZONE_PADDING  macro  include/linux/mmzone.h  102  #define ZONE_PADDING(name)
zone_stat_item  enum  include/linux/mmzone.h  105  enum zone_stat_item { NR_FREE_PAGES, NR_LRU_BASE, NR_INACTIVE_ANON = NR_LRU_BASE, NR_ACTIVE_ANON, NR_INACTIVE_FILE, NR_ACTIVE_FILE, NR_UNEVICTABLE, NR_MLOCK, NR_ANON_PAGES, NR_FILE_MAPPED, NR_FILE_PAGES, NR_FILE_DIRTY, NR_WRITEBACK, NR_SLAB_RECLAIMABLE, NR_SLAB_UNRECLAIMABLE, NR_PAGETABLE, NR_KERNEL_STACK, NR_UNSTABLE_NFS, NR_BOUNCE, NR_VMSCAN_WRITE, NR_VMSCAN_IMMEDIATE, NR_WRITEBACK_TEMP, NR_ISOLATED_ANON, NR_ISOLATED_FILE, NR_SHMEM, NR_DIRTIED, NR_WRITTEN, NUMA_HIT, NUMA_MISS, NUMA_FOREIGN, NUMA_INTERLEAVE_HIT, NUMA_LOCAL, NUMA_OTHER, NR_ANON_TRANSPARENT_HUGEPAGES, NR_VM_ZONE_STAT_ITEMS };
LRU_BASE  macro  include/linux/mmzone.h  156  #define LRU_BASE 0
LRU_ACTIVE  macro  include/linux/mmzone.h  157  #define LRU_ACTIVE 1
LRU_FILE  macro  include/linux/mmzone.h  158  #define LRU_FILE 2
lru_list  enum  include/linux/mmzone.h  160  enum lru_list { LRU_INACTIVE_ANON = LRU_BASE, LRU_ACTIVE_ANON = LRU_BASE + LRU_ACTIVE, LRU_INACTIVE_FILE = LRU_BASE + LRU_FILE, LRU_ACTIVE_FILE = LRU_BASE + LRU_FILE + LRU_ACTIVE, LRU_UNEVICTABLE, NR_LRU_LISTS };
for_each_lru  macro  include/linux/mmzone.h  169  #define for_each_lru(lru) for (lru = 0; lru < NR_LRU_LISTS; lru++)
for_each_evictable_lru  macro  include/linux/mmzone.h  171  #define for_each_evictable_lru(lru) for (lru = 0; lru <= LRU_ACTIVE_FILE; lru++)
is_file_lru  function  include/linux/mmzone.h  173  static inline int is_file_lru(enum lru_list lru)
is_active_lru  function  include/linux/mmzone.h  178  static inline int is_active_lru(enum lru_list lru)
is_unevictable_lru  function  include/linux/mmzone.h  183  static inline int is_unevictable_lru(enum lru_list lru)
zone_reclaim_stat  struct  include/linux/mmzone.h  188  struct zone_reclaim_stat { unsigned long recent_rotated[2]; unsigned long recent_scanned[2]; };
lruvec  struct  include/linux/mmzone.h  201  struct lruvec { struct list_head lists[NR_LRU_LISTS]; struct zone_reclaim_stat reclaim_stat; struct zone *zone; };
LRU_ALL_FILE  macro  include/linux/mmzone.h  210  #define LRU_ALL_FILE (BIT(LRU_INACTIVE_FILE) | BIT(LRU_ACTIVE_FILE))
LRU_ALL_ANON  macro  include/linux/mmzone.h  211  #define LRU_ALL_ANON (BIT(LRU_INACTIVE_ANON) | BIT(LRU_ACTIVE_ANON))
LRU_ALL_EVICTABLE  macro  include/linux/mmzone.h  212  #define LRU_ALL_EVICTABLE (LRU_ALL_FILE | LRU_ALL_ANON)
LRU_ALL  macro  include/linux/mmzone.h  213  #define LRU_ALL ((1 << NR_LRU_LISTS) - 1)
ISOLATE_CLEAN  macro  include/linux/mmzone.h  216  #define ISOLATE_CLEAN ((__force isolate_mode_t)0x1)
ISOLATE_UNMAPPED  macro  include/linux/mmzone.h  218  #define ISOLATE_UNMAPPED ((__force isolate_mode_t)0x2)
ISOLATE_ASYNC_MIGRATE  macro  include/linux/mmzone.h  220  #define ISOLATE_ASYNC_MIGRATE ((__force isolate_mode_t)0x4)
zone_watermarks  enum  include/linux/mmzone.h  225  enum zone_watermarks { WMARK_MIN, WMARK_LOW, WMARK_HIGH, NR_WMARK };
min_wmark_pages  macro  include/linux/mmzone.h  232  #define min_wmark_pages(z) (z->watermark[WMARK_MIN])
low_wmark_pages  macro  include/linux/mmzone.h  233  #define low_wmark_pages(z) (z->watermark[WMARK_LOW])
high_wmark_pages  macro  include/linux/mmzone.h  234  #define high_wmark_pages(z) (z->watermark[WMARK_HIGH])
per_cpu_pages  struct  include/linux/mmzone.h  236  struct per_cpu_pages { int count; int high; int batch; struct list_head lists[MIGRATE_PCPTYPES]; };
per_cpu_pageset  struct  include/linux/mmzone.h  245  struct per_cpu_pageset { struct per_cpu_pages pcp; s8 expire; s8 stat_threshold; s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS]; };
zone_type  enum  include/linux/mmzone.h  258  enum zone_type { ZONE_DMA, ZONE_DMA32, ZONE_NORMAL, ZONE_HIGHMEM, ZONE_MOVABLE, __MAX_NR_ZONES };
ZONES_SHIFT  macro  include/linux/mmzone.h  324  #define ZONES_SHIFT 2
zone  struct  include/linux/mmzone.h  329  struct zone { unsigned long watermark[NR_WMARK]; unsigned long percpu_drift_mark; unsigned long lowmem_reserve[MAX_NR_ZONES]; unsigned long dirty_balance_reserve; int node; unsigned long min_unmapped_pages; unsigned long min_slab_pages; struct per_cpu_pageset __percpu *pageset; spinlock_t lock; int all_unreclaimable; seqlock_t span_seqlock; unsigned long min_cma_pages; struct free_area free_area[MAX_ORDER]; unsigned long *pageblock_flags; unsigned int compact_considered; unsigned int compact_defer_shift; int compact_order_failed; spinlock_t lru_lock; struct lruvec lruvec; unsigned long pages_scanned; unsigned long flags; atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS]; unsigned int inactive_ratio; wait_queue_head_t * wait_table; unsigned long wait_table_hash_nr_entries; unsigned long wait_table_bits; struct pglist_data *zone_pgdat; unsigned long zone_start_pfn; unsigned long spanned_pages; unsigned long present_pages; const char *name; } ____cacheline_internodealigned_in_smp;
zone_flags_t  enum  include/linux/mmzone.h  480  typedef enum { ZONE_RECLAIM_LOCKED, ZONE_OOM_LOCKED, ZONE_CONGESTED, } zone_flags_t;
zone_set_flag  function  include/linux/mmzone.h  488  static inline void zone_set_flag(struct zone *zone,zone_flags_t flag)
zone_test_and_set_flag  function  include/linux/mmzone.h  493  static inline int zone_test_and_set_flag(struct zone *zone,zone_flags_t flag)
zone_clear_flag  function  include/linux/mmzone.h  498  static inline void zone_clear_flag(struct zone *zone,zone_flags_t flag)
zone_is_reclaim_congested  function  include/linux/mmzone.h  503  static inline int zone_is_reclaim_congested(const struct zone *zone)
zone_is_reclaim_locked  function  include/linux/mmzone.h  508  static inline int zone_is_reclaim_locked(const struct zone *zone)
zone_is_oom_locked  function  include/linux/mmzone.h  513  static inline int zone_is_oom_locked(const struct zone *zone)
DEF_PRIORITY  macro  include/linux/mmzone.h  523  #define DEF_PRIORITY 12
MAX_ZONES_PER_ZONELIST  macro  include/linux/mmzone.h  526  #define MAX_ZONES_PER_ZONELIST (MAX_NUMNODES * MAX_NR_ZONES)
MAX_ZONELISTS  macro  include/linux/mmzone.h  605  #define MAX_ZONELISTS 1
zonelist_cache  struct  include/linux/mmzone.h  599  struct zonelist_cache { unsigned short z_to_n[MAX_ZONES_PER_ZONELIST]; DECLARE_BITMAP(fullzones, MAX_ZONES_PER_ZONELIST); unsigned long last_full_zap; };
zoneref  struct  include/linux/mmzone.h  613  struct zoneref { struct zone *zone; int zone_idx; };
zonelist  struct  include/linux/mmzone.h  635  struct zonelist { struct zonelist_cache *zlcache_ptr; // NULL or &zlcache struct zoneref _zonerefs[MAX_ZONES_PER_ZONELIST + 1]; struct zonelist_cache zlcache; // optional ... };
node_active_region  struct  include/linux/mmzone.h  644  struct node_active_region { unsigned long start_pfn; unsigned long end_pfn; int nid; };
pglist_data  struct  include/linux/mmzone.h  668  typedef struct pglist_data { struct zone node_zones[MAX_NR_ZONES]; struct zonelist node_zonelists[MAX_ZONELISTS]; int nr_zones; struct page *node_mem_map; struct page_cgroup *node_page_cgroup; struct bootmem_data *bdata; spinlock_t node_size_lock; unsigned long node_start_pfn; unsigned long node_present_pages; unsigned long node_spanned_pages; int node_id; wait_queue_head_t kswapd_wait; struct task_struct *kswapd; int kswapd_max_order; enum zone_type classzone_idx; } pg_data_t;
pg_data_t  struct  include/linux/mmzone.h  668  typedef struct pglist_data { struct zone node_zones[MAX_NR_ZONES]; struct zonelist node_zonelists[MAX_ZONELISTS]; int nr_zones; struct page *node_mem_map; struct page_cgroup *node_page_cgroup; struct bootmem_data *bdata; spinlock_t node_size_lock; unsigned long node_start_pfn; unsigned long node_present_pages; unsigned long node_spanned_pages; int node_id; wait_queue_head_t kswapd_wait; struct task_struct *kswapd; int kswapd_max_order; enum zone_type classzone_idx; } pg_data_t;
node_present_pages  macro  include/linux/mmzone.h  702  #define node_present_pages(nid) (NODE_DATA(nid)->node_present_pages)
node_spanned_pages  macro  include/linux/mmzone.h  703  #define node_spanned_pages(nid) (NODE_DATA(nid)->node_spanned_pages)
pgdat_page_nr  macro  include/linux/mmzone.h  707  #define pgdat_page_nr(pgdat,pagenr) pfn_to_page((pgdat)->node_start_pfn + (pagenr))
nid_page_nr  macro  include/linux/mmzone.h  709  #define nid_page_nr(nid,pagenr) pgdat_page_nr(NODE_DATA(nid),(pagenr))
node_start_pfn  macro  include/linux/mmzone.h  711  #define node_start_pfn(nid) (NODE_DATA(nid)->node_start_pfn)
node_end_pfn  macro  include/linux/mmzone.h  713  #define node_end_pfn(nid) ({ pg_data_t *__pgdat = NODE_DATA(nid); __pgdat->node_start_pfn + __pgdat->node_spanned_pages; })
build_all_zonelists  prototype  include/linux/mmzone.h  721  void build_all_zonelists(void *data);
wakeup_kswapd  prototype  include/linux/mmzone.h  722  void wakeup_kswapd(struct zone *zone,int order,enum zone_type classzone_idx);
zone_watermark_ok  prototype  include/linux/mmzone.h  723  bool zone_watermark_ok(struct zone *z,int order,unsigned long mark,int classzone_idx, int alloc_flags);
zone_watermark_ok_safe  prototype  include/linux/mmzone.h  725  bool zone_watermark_ok_safe(struct zone *z,int order,unsigned long mark,int classzone_idx, int alloc_flags);
memmap_context  enum  include/linux/mmzone.h  727  enum memmap_context { MEMMAP_EARLY, MEMMAP_HOTPLUG, };
init_currently_empty_zone  prototype  include/linux/mmzone.h  731  extern int init_currently_empty_zone(struct zone *zone,unsigned long start_pfn,unsigned long size,enum memmap_context context);
lruvec_init  prototype  include/linux/mmzone.h  735  extern void lruvec_init(struct lruvec *lruvec,struct zone *zone);
lruvec_zone  function  include/linux/mmzone.h  737  static inline struct zone *lruvec_zone(struct lruvec *lruvec)
memory_present  prototype  include/linux/mmzone.h  1181  void memory_present(int nid,unsigned long start,unsigned long end);
local_memory_node  function  include/linux/mmzone.h  755  static inline int local_memory_node(int node_id) { return node_id; };
node_memmap_size_bytes  prototype  include/linux/mmzone.h  1182  unsigned long __init node_memmap_size_bytes(int,unsigned long,unsigned long);
zone_idx  macro  include/linux/mmzone.h  765  #define zone_idx(zone) ((zone) - (zone)->zone_pgdat->node_zones)
populated_zone  function  include/linux/mmzone.h  767  static inline int populated_zone(struct zone *zone)
zone_movable_is_highmem  function  include/linux/mmzone.h  774  static inline int zone_movable_is_highmem(void)
is_highmem_idx  function  include/linux/mmzone.h  783  static inline int is_highmem_idx(enum zone_type idx)
is_normal_idx  function  include/linux/mmzone.h  793  static inline int is_normal_idx(enum zone_type idx)
is_highmem  function  include/linux/mmzone.h  804  static inline int is_highmem(struct zone *zone)
is_normal  function  include/linux/mmzone.h  816  static inline int is_normal(struct zone *zone)
is_dma32  function  include/linux/mmzone.h  821  static inline int is_dma32(struct zone *zone)
is_dma  function  include/linux/mmzone.h  830  static inline int is_dma(struct zone *zone)
min_free_kbytes_sysctl_handler  prototype  include/linux/mmzone.h  841  int min_free_kbytes_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
lowmem_reserve_ratio_sysctl_handler  prototype  include/linux/mmzone.h  844  int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
percpu_pagelist_fraction_sysctl_handler  prototype  include/linux/mmzone.h  846  int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
sysctl_min_unmapped_ratio_sysctl_handler  prototype  include/linux/mmzone.h  848  int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
sysctl_min_slab_ratio_sysctl_handler  prototype  include/linux/mmzone.h  850  int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
numa_zonelist_order_handler  prototype  include/linux/mmzone.h  853  extern int numa_zonelist_order_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
NUMA_ZONELIST_ORDER_LEN  macro  include/linux/mmzone.h  856  #define NUMA_ZONELIST_ORDER_LEN 16
NODE_DATA  macro  include/linux/mmzone.h  861  #define NODE_DATA(nid) (&contig_page_data)
NODE_MEM_MAP  macro  include/linux/mmzone.h  862  #define NODE_MEM_MAP(nid) mem_map
first_online_pgdat  prototype  include/linux/mmzone.h  870  extern struct pglist_data *first_online_pgdat(void);
next_online_pgdat  prototype  include/linux/mmzone.h  871  extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
next_zone  prototype  include/linux/mmzone.h  872  extern struct zone *next_zone(struct zone *zone);
for_each_online_pgdat  macro  include/linux/mmzone.h  878  #define for_each_online_pgdat(pgdat) for (pgdat = first_online_pgdat(); pgdat; pgdat = next_online_pgdat(pgdat))
for_each_zone  macro  include/linux/mmzone.h  889  #define for_each_zone(zone) for (zone = (first_online_pgdat())->node_zones; zone; zone = next_zone(zone))
for_each_populated_zone  macro  include/linux/mmzone.h  894  #define for_each_populated_zone(zone) for (zone = (first_online_pgdat())->node_zones; zone; zone = next_zone(zone)) if (!populated_zone(zone)) ; /* do nothing */ else
zonelist_zone  function  include/linux/mmzone.h  902  static inline struct zone *zonelist_zone(struct zoneref *zoneref)
zonelist_zone_idx  function  include/linux/mmzone.h  907  static inline int zonelist_zone_idx(struct zoneref *zoneref)
zonelist_node_idx  function  include/linux/mmzone.h  912  static inline int zonelist_node_idx(struct zoneref *zoneref)
next_zones_zonelist  prototype  include/linux/mmzone.h  935  struct zoneref *next_zones_zonelist(struct zoneref *z,enum zone_type highest_zoneidx,nodemask_t *nodes,struct zone **zone);
first_zones_zonelist  function  include/linux/mmzone.h  952  static inline struct zoneref *first_zones_zonelist(struct zonelist *zonelist,enum zone_type highest_zoneidx,nodemask_t *nodes,struct zone **zone)
for_each_zone_zonelist_nodemask  macro  include/linux/mmzone.h  972  #define for_each_zone_zonelist_nodemask(zone,z,zlist,highidx,nodemask) for (z = first_zones_zonelist(zlist, highidx, nodemask, &zone); zone; z = next_zones_zonelist(++z, highidx, nodemask, &zone)) 
for_each_zone_zonelist  macro  include/linux/mmzone.h  986  #define for_each_zone_zonelist(zone,z,zlist,highidx) for_each_zone_zonelist_nodemask(zone, z, zlist, highidx, NULL)
early_pfn_to_nid  prototype  include/linux/mm.h  1309  extern int __meminit early_pfn_to_nid(unsigned long pfn);
pfn_to_nid  macro  include/linux/mmzone.h  1161  #define pfn_to_nid(pfn) (0)
SECTIONS_SHIFT  macro  include/linux/mmzone.h  1013  #define SECTIONS_SHIFT (MAX_PHYSMEM_BITS - SECTION_SIZE_BITS)
PA_SECTION_SHIFT  macro  include/linux/mmzone.h  1015  #define PA_SECTION_SHIFT (SECTION_SIZE_BITS)
PFN_SECTION_SHIFT  macro  include/linux/mmzone.h  1016  #define PFN_SECTION_SHIFT (SECTION_SIZE_BITS - PAGE_SHIFT)
NR_MEM_SECTIONS  macro  include/linux/mmzone.h  1018  #define NR_MEM_SECTIONS (1UL << SECTIONS_SHIFT)
PAGES_PER_SECTION  macro  include/linux/mmzone.h  1020  #define PAGES_PER_SECTION (1UL << PFN_SECTION_SHIFT)
PAGE_SECTION_MASK  macro  include/linux/mmzone.h  1021  #define PAGE_SECTION_MASK (~(PAGES_PER_SECTION-1))
SECTION_BLOCKFLAGS_BITS  macro  include/linux/mmzone.h  1023  #define SECTION_BLOCKFLAGS_BITS ((1UL << (PFN_SECTION_SHIFT - pageblock_order)) * NR_PAGEBLOCK_BITS)
pfn_to_section_nr  macro  include/linux/mmzone.h  1030  #define pfn_to_section_nr(pfn) ((pfn) >> PFN_SECTION_SHIFT)
section_nr_to_pfn  macro  include/linux/mmzone.h  1031  #define section_nr_to_pfn(sec) ((sec) << PFN_SECTION_SHIFT)
SECTION_ALIGN_UP  macro  include/linux/mmzone.h  1033  #define SECTION_ALIGN_UP(pfn) (((pfn) + PAGES_PER_SECTION - 1) & PAGE_SECTION_MASK)
SECTION_ALIGN_DOWN  macro  include/linux/mmzone.h  1034  #define SECTION_ALIGN_DOWN(pfn) ((pfn) & PAGE_SECTION_MASK)
mem_section  struct  include/linux/mmzone.h  1038  struct mem_section { unsigned long section_mem_map; unsigned long *pageblock_flags; struct page_cgroup *page_cgroup; unsigned long pad; };
SECTIONS_PER_ROOT  macro  include/linux/mmzone.h  1068  #define SECTIONS_PER_ROOT 1
SECTION_NR_TO_ROOT  macro  include/linux/mmzone.h  1071  #define SECTION_NR_TO_ROOT(sec) ((sec) / SECTIONS_PER_ROOT)
NR_SECTION_ROOTS  macro  include/linux/mmzone.h  1072  #define NR_SECTION_ROOTS DIV_ROUND_UP(NR_MEM_SECTIONS,SECTIONS_PER_ROOT)
SECTION_ROOT_MASK  macro  include/linux/mmzone.h  1073  #define SECTION_ROOT_MASK (SECTIONS_PER_ROOT - 1)
__nr_to_section  function  include/linux/mmzone.h  1081  static inline struct mem_section *__nr_to_section(unsigned long nr)
__section_nr  prototype  include/linux/mmzone.h  1087  extern int __section_nr(struct mem_section* ms);
usemap_size  prototype  include/linux/mmzone.h  1088  extern unsigned long usemap_size(void);
SECTION_MARKED_PRESENT  macro  include/linux/mmzone.h  1095  #define SECTION_MARKED_PRESENT (1UL<<0)
SECTION_HAS_MEM_MAP  macro  include/linux/mmzone.h  1096  #define SECTION_HAS_MEM_MAP (1UL<<1)
SECTION_MAP_LAST_BIT  macro  include/linux/mmzone.h  1097  #define SECTION_MAP_LAST_BIT (1UL<<2)
SECTION_MAP_MASK  macro  include/linux/mmzone.h  1098  #define SECTION_MAP_MASK (~(SECTION_MAP_LAST_BIT-1))
SECTION_NID_SHIFT  macro  include/linux/mmzone.h  1099  #define SECTION_NID_SHIFT 2
__section_mem_map_addr  function  include/linux/mmzone.h  1101  static inline struct page *__section_mem_map_addr(struct mem_section *section)
present_section  function  include/linux/mmzone.h  1108  static inline int present_section(struct mem_section *section)
present_section_nr  function  include/linux/mmzone.h  1113  static inline int present_section_nr(unsigned long nr)
valid_section  function  include/linux/mmzone.h  1118  static inline int valid_section(struct mem_section *section)
valid_section_nr  function  include/linux/mmzone.h  1123  static inline int valid_section_nr(unsigned long nr)
__pfn_to_section  function  include/linux/mmzone.h  1128  static inline struct mem_section *__pfn_to_section(unsigned long pfn)
pfn_present  function  include/linux/mmzone.h  1142  static inline int pfn_present(unsigned long pfn)
early_pfn_valid  macro  include/linux/mmzone.h  1178  #define early_pfn_valid(pfn) (1)
sparse_init  macro  include/linux/mmzone.h  1167  #define sparse_init() do {} while (0)
sparse_index_init  macro  include/linux/mmzone.h  1168  #define sparse_index_init(_sec,_nid) do {} while (0)
early_pfn_in_nid  macro  include/linux/mmzone.h  1174  #define early_pfn_in_nid(pfn,nid) (1)
pfn_valid_within  macro  include/linux/mmzone.h  1193  #define pfn_valid_within(pfn) (1)
memmap_valid_within  function  include/linux/mmzone.h  1215  static inline int memmap_valid_within(unsigned long pfn,struct page *page, struct zone *zone)
_ASM_X86_TOPOLOGY_H  macro  arch/x86/include/asm/topology.h  26  #define _ASM_X86_TOPOLOGY_H
ENABLE_TOPO_DEFINES  macro  arch/x86/include/asm/topology.h  34  # define ENABLE_TOPO_DEFINES
__cpu_to_node  prototype  arch/x86/include/asm/topology.h  57  extern int __cpu_to_node(int cpu);
early_cpu_to_node  function  arch/x86/include/asm/topology.h  109  static inline int early_cpu_to_node(int cpu)
cpumask_of_node  function  arch/x86/include/asm/topology.h  79  static inline const struct cpumask *cpumask_of_node(int node)
setup_node_to_cpumask_map  function  arch/x86/include/asm/topology.h  114  static inline void setup_node_to_cpumask_map(void) { }
parent_node  macro  arch/x86/include/asm/topology.h  91  #define parent_node(node) (node)
pcibus_to_node  macro  arch/x86/include/asm/topology.h  93  #define pcibus_to_node(bus) __pcibus_to_node(bus)
__node_distance  prototype  arch/x86/include/asm/topology.h  95  extern int __node_distance(int,int);
cpu_coregroup_mask  prototype  arch/x86/include/asm/topology.h  120  extern const struct cpumask *cpu_coregroup_mask(int cpu);
arch_provides_topology_pointers  macro  arch/x86/include/asm/topology.h  129  #define arch_provides_topology_pointers yes
arch_fix_phys_package_id  function  arch/x86/include/asm/topology.h  132  static inline void arch_fix_phys_package_id(int num,u32 slot)
x86_pci_root_bus_resources  prototype  arch/x86/include/asm/topology.h  137  void x86_pci_root_bus_resources(int bus,struct list_head *resources);
mc_capable  macro  arch/x86/include/asm/topology.h  140  #define mc_capable() ((boot_cpu_data.x86_max_cores > 1) && (cpumask_weight(cpu_core_mask(0)) != nr_cpu_ids))
smt_capable  macro  arch/x86/include/asm/topology.h  142  #define smt_capable() (smp_num_siblings > 1)
get_mp_bus_to_node  function  arch/x86/include/asm/topology.h  149  static inline int get_mp_bus_to_node(int busnum)
set_mp_bus_to_node  function  arch/x86/include/asm/topology.h  153  static inline void set_mp_bus_to_node(int busnum,int node)
_LINUX_PERCPU_COUNTER_H  macro  include/linux/percpu_counter.h  2  #define _LINUX_PERCPU_COUNTER_H
percpu_counter  struct  include/linux/percpu_counter.h  88  struct percpu_counter { s64 count; };
__percpu_counter_init  prototype  include/linux/percpu_counter.h  29  int __percpu_counter_init(struct percpu_counter *fbc,s64 amount,struct lock_class_key *key);
percpu_counter_init  function  include/linux/percpu_counter.h  92  static inline int percpu_counter_init(struct percpu_counter *fbc,s64 amount)
percpu_counter_destroy  function  include/linux/percpu_counter.h  98  static inline void percpu_counter_destroy(struct percpu_counter *fbc)
percpu_counter_set  function  include/linux/percpu_counter.h  102  static inline void percpu_counter_set(struct percpu_counter *fbc,s64 amount)
__percpu_counter_add  function  include/linux/percpu_counter.h  126  __percpu_counter_add(struct percpu_counter *fbc,s64 amount,s32 batch)
__percpu_counter_sum  prototype  include/linux/percpu_counter.h  42  s64 __percpu_counter_sum(struct percpu_counter *fbc);
percpu_counter_compare  function  include/linux/percpu_counter.h  107  static inline int percpu_counter_compare(struct percpu_counter *fbc,s64 rhs)
percpu_counter_add  function  include/linux/percpu_counter.h  118  percpu_counter_add(struct percpu_counter *fbc,s64 amount)
percpu_counter_sum_positive  function  include/linux/percpu_counter.h  145  static inline s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
percpu_counter_sum  function  include/linux/percpu_counter.h  150  static inline s64 percpu_counter_sum(struct percpu_counter *fbc)
percpu_counter_read  function  include/linux/percpu_counter.h  131  static inline s64 percpu_counter_read(struct percpu_counter *fbc)
percpu_counter_read_positive  function  include/linux/percpu_counter.h  140  static inline s64 percpu_counter_read_positive(struct percpu_counter *fbc)
percpu_counter_initialized  function  include/linux/percpu_counter.h  155  static inline int percpu_counter_initialized(struct percpu_counter *fbc)
percpu_counter_inc  function  include/linux/percpu_counter.h  162  static inline void percpu_counter_inc(struct percpu_counter *fbc)
percpu_counter_dec  function  include/linux/percpu_counter.h  167  static inline void percpu_counter_dec(struct percpu_counter *fbc)
percpu_counter_sub  function  include/linux/percpu_counter.h  172  static inline void percpu_counter_sub(struct percpu_counter *fbc,s64 amount)
__LINUX_MUTEX_H  macro  include/linux/mutex.h  11  #define __LINUX_MUTEX_H
mutex  struct  include/linux/mutex.h  48  struct mutex { atomic_t count; spinlock_t wait_lock; struct list_head wait_list; struct task_struct *owner; const char *name; void *magic; struct lockdep_map dep_map; };
mutex_waiter  struct  include/linux/mutex.h  69  struct mutex_waiter { struct list_head list; struct task_struct *task; void *magic; };
__DEBUG_MUTEX_INITIALIZER  macro  include/linux/mutex.h  80  # define __DEBUG_MUTEX_INITIALIZER(lockname)
mutex_init  macro  include/linux/mutex.h  89  # define mutex_init(mutex) do { static struct lock_class_key __key; __mutex_init((mutex), #mutex, &__key); } while (0)
mutex_destroy  function  include/linux/mutex.h  95  static inline void mutex_destroy(struct mutex *lock) {}
__DEP_MAP_MUTEX_INITIALIZER  macro  include/linux/mutex.h  102  # define __DEP_MAP_MUTEX_INITIALIZER(lockname)
__MUTEX_INITIALIZER  macro  include/linux/mutex.h  105  #define __MUTEX_INITIALIZER(lockname) { .count = ATOMIC_INIT(1) , .wait_lock = __SPIN_LOCK_UNLOCKED(lockname.wait_lock) , .wait_list = LIST_HEAD_INIT(lockname.wait_list) __DEBUG_MUTEX_INITIALIZER(lockname) __DEP_MAP_MUTEX_INITIALIZER(lockname) }
DEFINE_MUTEX  macro  include/linux/mutex.h  112  #define DEFINE_MUTEX(mutexname) struct mutex mutexname = __MUTEX_INITIALIZER(mutexname)
__mutex_init  prototype  include/linux/mutex.h  115  extern void __mutex_init(struct mutex *lock,const char *name,struct lock_class_key *key);
mutex_is_locked  function  include/linux/mutex.h  124  static inline int mutex_is_locked(struct mutex *lock)
mutex_lock_nested  macro  include/linux/mutex.h  156  # define mutex_lock_nested(lock,subclass) mutex_lock(lock)
_mutex_lock_nest_lock  prototype  include/linux/mutex.h  135  extern void _mutex_lock_nest_lock(struct mutex *lock,struct lockdep_map *nest_lock);
mutex_lock_interruptible_nested  macro  include/linux/mutex.h  157  # define mutex_lock_interruptible_nested(lock,subclass) mutex_lock_interruptible(lock)
mutex_lock_killable_nested  macro  include/linux/mutex.h  158  # define mutex_lock_killable_nested(lock,subclass) mutex_lock_killable(lock)
mutex_lock  prototype  include/linux/mutex.h  152  extern void mutex_lock(struct mutex *lock);
mutex_lock_interruptible  prototype  include/linux/mutex.h  153  extern int __must_check mutex_lock_interruptible(struct mutex *lock);
mutex_lock_killable  prototype  include/linux/mutex.h  154  extern int __must_check mutex_lock_killable(struct mutex *lock);
mutex_lock_nest_lock  macro  include/linux/mutex.h  159  # define mutex_lock_nest_lock(lock,nest_lock) mutex_lock(lock)
mutex_trylock  prototype  include/linux/mutex.h  168  extern int mutex_trylock(struct mutex *lock);
mutex_unlock  prototype  include/linux/mutex.h  169  extern void mutex_unlock(struct mutex *lock);
atomic_dec_and_mutex_lock  prototype  include/linux/mutex.h  170  extern int atomic_dec_and_mutex_lock(atomic_t *cnt,struct mutex *lock);
arch_mutex_cpu_relax  macro  include/linux/mutex.h  173  #define arch_mutex_cpu_relax() cpu_relax()
__LINUX_SEQLOCK_H  macro  include/linux/seqlock.h  2  #define __LINUX_SEQLOCK_H
seqlock_t  struct  include/linux/seqlock.h  33  typedef struct { unsigned sequence; spinlock_t lock; } seqlock_t;
__SEQLOCK_UNLOCKED  macro  include/linux/seqlock.h  42  #define __SEQLOCK_UNLOCKED(lockname) { 0, __SPIN_LOCK_UNLOCKED(lockname) }
seqlock_init  macro  include/linux/seqlock.h  45  #define seqlock_init(x) do { (x)->sequence = 0; spin_lock_init(&(x)->lock); } while (0)
DEFINE_SEQLOCK  macro  include/linux/seqlock.h  51  #define DEFINE_SEQLOCK(x) seqlock_t x = __SEQLOCK_UNLOCKED(x)
write_seqlock  function  include/linux/seqlock.h  58  static inline void write_seqlock(seqlock_t *sl)
write_sequnlock  function  include/linux/seqlock.h  65  static inline void write_sequnlock(seqlock_t *sl)
write_tryseqlock  function  include/linux/seqlock.h  72  static inline int write_tryseqlock(seqlock_t *sl)
read_seqbegin  function  include/linux/seqlock.h  84  static __always_inline unsigned read_seqbegin(const seqlock_t *sl)
read_seqretry  function  include/linux/seqlock.h  104  static __always_inline int read_seqretry(const seqlock_t *sl,unsigned start)
seqcount  struct  include/linux/seqlock.h  119  typedef struct seqcount { unsigned sequence; } seqcount_t;
seqcount_t  struct  include/linux/seqlock.h  119  typedef struct seqcount { unsigned sequence; } seqcount_t;
SEQCNT_ZERO  macro  include/linux/seqlock.h  123  #define SEQCNT_ZERO { 0 }
seqcount_init  macro  include/linux/seqlock.h  124  #define seqcount_init(x) do { *(x) = (seqcount_t) SEQCNT_ZERO; } while (0)
__read_seqcount_begin  function  include/linux/seqlock.h  139  static inline unsigned __read_seqcount_begin(const seqcount_t *s)
read_seqcount_begin  function  include/linux/seqlock.h  161  static inline unsigned read_seqcount_begin(const seqcount_t *s)
raw_seqcount_begin  function  include/linux/seqlock.h  182  static inline unsigned raw_seqcount_begin(const seqcount_t *s)
__read_seqcount_retry  function  include/linux/seqlock.h  203  static inline int __read_seqcount_retry(const seqcount_t *s,unsigned start)
read_seqcount_retry  function  include/linux/seqlock.h  218  static inline int read_seqcount_retry(const seqcount_t *s,unsigned start)
write_seqcount_begin  function  include/linux/seqlock.h  230  static inline void write_seqcount_begin(seqcount_t *s)
write_seqcount_end  function  include/linux/seqlock.h  236  static inline void write_seqcount_end(seqcount_t *s)
write_seqcount_barrier  function  include/linux/seqlock.h  249  static inline void write_seqcount_barrier(seqcount_t *s)
write_seqlock_irqsave  macro  include/linux/seqlock.h  258  #define write_seqlock_irqsave(lock,flags) do { local_irq_save(flags); write_seqlock(lock); } while (0)
write_seqlock_irq  macro  include/linux/seqlock.h  260  #define write_seqlock_irq(lock) do { local_irq_disable();   write_seqlock(lock); } while (0)
write_seqlock_bh  macro  include/linux/seqlock.h  262  #define write_seqlock_bh(lock) do { local_bh_disable();    write_seqlock(lock); } while (0)
write_sequnlock_irqrestore  macro  include/linux/seqlock.h  265  #define write_sequnlock_irqrestore(lock,flags) do { write_sequnlock(lock); local_irq_restore(flags); } while(0)
write_sequnlock_irq  macro  include/linux/seqlock.h  267  #define write_sequnlock_irq(lock) do { write_sequnlock(lock); local_irq_enable(); } while(0)
write_sequnlock_bh  macro  include/linux/seqlock.h  269  #define write_sequnlock_bh(lock) do { write_sequnlock(lock); local_bh_enable(); } while(0)
read_seqbegin_irqsave  macro  include/linux/seqlock.h  272  #define read_seqbegin_irqsave(lock,flags) ({ local_irq_save(flags);   read_seqbegin(lock); })
read_seqretry_irqrestore  macro  include/linux/seqlock.h  275  #define read_seqretry_irqrestore(lock,iv,flags) ({ int ret = read_seqretry(lock, iv); local_irq_restore(flags); ret; })
__LINUX_LOCKDEP_H  macro  include/linux/lockdep.h  10  #define __LINUX_LOCKDEP_H
XXX_LOCK_USAGE_STATES  macro  include/linux/lockdep.h  30  #define XXX_LOCK_USAGE_STATES (1+3*4)
MAX_LOCKDEP_SUBCLASSES  macro  include/linux/lockdep.h  32  #define MAX_LOCKDEP_SUBCLASSES 8UL
NR_LOCKDEP_CACHING_CLASSES  macro  include/linux/lockdep.h  43  #define NR_LOCKDEP_CACHING_CLASSES 2
lockdep_subclass_key  struct  include/linux/lockdep.h  50  struct lockdep_subclass_key { char __one_byte; } __attribute__ ((__packed__));
lock_class_key  struct  include/linux/lockdep.h  409  struct lock_class_key { };
LOCKSTAT_POINTS  macro  include/linux/lockdep.h  60  #define LOCKSTAT_POINTS 4
lock_class  struct  include/linux/lockdep.h  65  struct lock_class { struct list_head hash_entry; struct list_head lock_entry; struct lockdep_subclass_key *key; unsigned int subclass; unsigned int dep_gen_id; unsigned long usage_mask; struct stack_trace usage_traces[XXX_LOCK_USAGE_STATES]; struct list_head locks_after, locks_before; unsigned int version; unsigned long ops; const char *name; int name_version; unsigned long contention_point[LOCKSTAT_POINTS]; unsigned long contending_point[LOCKSTAT_POINTS]; };
lock_time  struct  include/linux/lockdep.h  114  struct lock_time { s64 min; s64 max; s64 total; unsigned long nr; };
bounce_type  enum  include/linux/lockdep.h  121  enum bounce_type { bounce_acquired_write, bounce_acquired_read, bounce_contended_write, bounce_contended_read, nr_bounce_types, bounce_acquired = bounce_acquired_write, bounce_contended = bounce_contended_write, };
lock_class_stats  struct  include/linux/lockdep.h  132  struct lock_class_stats { unsigned long contention_point[4]; unsigned long contending_point[4]; struct lock_time read_waittime; struct lock_time write_waittime; struct lock_time read_holdtime; struct lock_time write_holdtime; unsigned long bounces[nr_bounce_types]; };
lock_stats  prototype  include/linux/lockdep.h  142  struct lock_class_stats lock_stats(struct lock_class *class);
clear_lock_stats  prototype  include/linux/lockdep.h  143  void clear_lock_stats(struct lock_class *class);
lockdep_map  struct  include/linux/lockdep.h  150  struct lockdep_map { struct lock_class_key *key; struct lock_class *class_cache[NR_LOCKDEP_CACHING_CLASSES]; const char *name; int cpu; unsigned long ip; };
lockdep_copy_map  function  include/linux/lockdep.h  160  static inline void lockdep_copy_map(struct lockdep_map *to,struct lockdep_map *from)
lock_list  struct  include/linux/lockdep.h  182  struct lock_list { struct list_head entry; struct stack_trace trace; int distance; struct lock_list *parent; };
lock_chain  struct  include/linux/lockdep.h  198  struct lock_chain { u8 irq_context; u8 depth; u16 base; struct list_head entry; u64 chain_key; };
MAX_LOCKDEP_KEYS_BITS  macro  include/linux/lockdep.h  206  #define MAX_LOCKDEP_KEYS_BITS 13
MAX_LOCKDEP_KEYS  macro  include/linux/lockdep.h  212  #define MAX_LOCKDEP_KEYS ((1UL << MAX_LOCKDEP_KEYS_BITS) - 1)
held_lock  struct  include/linux/lockdep.h  214  struct held_lock { u64 prev_chain_key; unsigned long acquire_ip; struct lockdep_map *instance; struct lockdep_map *nest_lock; u64 waittime_stamp; u64 holdtime_stamp; unsigned int class_idx:MAX_LOCKDEP_KEYS_BITS; unsigned int irq_context:2; unsigned int trylock:1; unsigned int read:2; unsigned int check:2; unsigned int hardirqs_off:1; unsigned int references:11; };
lockdep_init  macro  include/linux/lockdep.h  383  # define lockdep_init() do { } while (0)
lockdep_info  macro  include/linux/lockdep.h  384  # define lockdep_info() do { } while (0)
lockdep_reset  macro  include/linux/lockdep.h  403  # define lockdep_reset() do { debug_locks = 1; } while (0)
lockdep_reset_lock  prototype  include/linux/lockdep.h  266  extern void lockdep_reset_lock(struct lockdep_map *lock);
lockdep_free_key_range  macro  include/linux/lockdep.h  404  # define lockdep_free_key_range(start,size) do { } while (0)
lockdep_sys_exit  macro  include/linux/lockdep.h  405  # define lockdep_sys_exit() do { } while (0)
lockdep_off  function  include/linux/lockdep.h  368  static inline void lockdep_off(void)
lockdep_on  function  include/linux/lockdep.h  372  static inline void lockdep_on(void)
lockdep_init_map  macro  include/linux/lockdep.h  385  # define lockdep_init_map(lock,name,key,sub) do { (void)(name); (void)(key); } while (0)
STATIC_LOCKDEP_MAP_INIT  macro  include/linux/lockdep.h  286  #define STATIC_LOCKDEP_MAP_INIT(_name,_key) { .name = (_name), .key = (void *)(_key), }
lockdep_set_class  macro  include/linux/lockdep.h  387  # define lockdep_set_class(lock,key) do { (void)(key); } while (0)
lockdep_set_class_and_name  macro  include/linux/lockdep.h  388  # define lockdep_set_class_and_name(lock,key,name) do { (void)(key); (void)(name); } while (0)
lockdep_set_class_and_subclass  macro  include/linux/lockdep.h  390  #define lockdep_set_class_and_subclass(lock,key,sub) do { (void)(key); } while (0)
lockdep_set_subclass  macro  include/linux/lockdep.h  392  #define lockdep_set_subclass(lock,sub) do { } while (0)
lockdep_set_novalidate_class  macro  include/linux/lockdep.h  394  #define lockdep_set_novalidate_class(lock) do { } while (0)
lockdep_match_class  macro  include/linux/lockdep.h  310  #define lockdep_match_class(lock,key) lockdep_match_key(&(lock)->dep_map,key)
lockdep_match_key  function  include/linux/lockdep.h  312  static inline int lockdep_match_key(struct lockdep_map *lock,struct lock_class_key *key)
lock_acquire  macro  include/linux/lockdep.h  376  # define lock_acquire(l,s,t,r,c,n,i) do { } while (0)
lock_release  macro  include/linux/lockdep.h  377  # define lock_release(l,n,i) do { } while (0)
lockdep_is_held  macro  include/linux/lockdep.h  340  #define lockdep_is_held(lock) lock_is_held(&(lock)->dep_map)
lock_is_held  prototype  include/linux/lockdep.h  342  extern int lock_is_held(struct lockdep_map *lock);
lock_set_class  macro  include/linux/lockdep.h  378  # define lock_set_class(l,n,k,s,i) do { } while (0)
lock_set_subclass  macro  include/linux/lockdep.h  379  # define lock_set_subclass(l,s,i) do { } while (0)
lockdep_set_current_reclaim_state  macro  include/linux/lockdep.h  380  # define lockdep_set_current_reclaim_state(g) do { } while (0)
lockdep_clear_current_reclaim_state  macro  include/linux/lockdep.h  381  # define lockdep_clear_current_reclaim_state() do { } while (0)
lockdep_trace_alloc  macro  include/linux/lockdep.h  382  # define lockdep_trace_alloc(g) do { } while (0)
INIT_LOCKDEP  macro  include/linux/lockdep.h  402  # define INIT_LOCKDEP
lockdep_depth  macro  include/linux/lockdep.h  411  #define lockdep_depth(tsk) (0)
lockdep_assert_held  macro  include/linux/lockdep.h  413  #define lockdep_assert_held(l) do { } while (0)
lockdep_recursing  macro  include/linux/lockdep.h  415  #define lockdep_recursing(tsk) (0)
lock_contended  macro  include/linux/lockdep.h  435  #define lock_contended(lockdep_map,ip) do {} while (0)
lock_acquired  macro  include/linux/lockdep.h  436  #define lock_acquired(lockdep_map,ip) do {} while (0)
LOCK_CONTENDED  macro  include/linux/lockdep.h  438  #define LOCK_CONTENDED(_lock,try,lock) lock(_lock)
LOCK_CONTENDED_FLAGS  macro  include/linux/lockdep.h  455  #define LOCK_CONTENDED_FLAGS(_lock,try,lock,lockfl,flags) lockfl((_lock), (flags))
print_irqtrace_events  function  include/linux/lockdep.h  463  static inline void print_irqtrace_events(struct task_struct *curr)
SINGLE_DEPTH_NESTING  macro  include/linux/lockdep.h  473  #define SINGLE_DEPTH_NESTING 1
spin_acquire  macro  include/linux/lockdep.h  490  # define spin_acquire(l,s,t,i) do { } while (0)
spin_acquire_nest  macro  include/linux/lockdep.h  486  # define spin_acquire_nest(l,s,t,n,i) lock_acquire(l,s,t,0,1,NULL,i)
spin_release  macro  include/linux/lockdep.h  491  # define spin_release(l,n,i) do { } while (0)
rwlock_acquire  macro  include/linux/lockdep.h  504  # define rwlock_acquire(l,s,t,i) do { } while (0)
rwlock_acquire_read  macro  include/linux/lockdep.h  505  # define rwlock_acquire_read(l,s,t,i) do { } while (0)
rwlock_release  macro  include/linux/lockdep.h  506  # define rwlock_release(l,n,i) do { } while (0)
mutex_acquire  macro  include/linux/lockdep.h  519  # define mutex_acquire(l,s,t,i) do { } while (0)
mutex_acquire_nest  macro  include/linux/lockdep.h  520  # define mutex_acquire_nest(l,s,t,n,i) do { } while (0)
mutex_release  macro  include/linux/lockdep.h  521  # define mutex_release(l,n,i) do { } while (0)
rwsem_acquire  macro  include/linux/lockdep.h  534  # define rwsem_acquire(l,s,t,i) do { } while (0)
rwsem_acquire_read  macro  include/linux/lockdep.h  535  # define rwsem_acquire_read(l,s,t,i) do { } while (0)
rwsem_release  macro  include/linux/lockdep.h  536  # define rwsem_release(l,n,i) do { } while (0)
lock_map_acquire  macro  include/linux/lockdep.h  549  # define lock_map_acquire(l) do { } while (0)
lock_map_acquire_read  macro  include/linux/lockdep.h  550  # define lock_map_acquire_read(l) do { } while (0)
lock_map_release  macro  include/linux/lockdep.h  551  # define lock_map_release(l) do { } while (0)
might_lock  macro  include/linux/lockdep.h  568  # define might_lock(lock) do { } while (0)
might_lock_read  macro  include/linux/lockdep.h  569  # define might_lock_read(lock) do { } while (0)
lockdep_rcu_suspicious  prototype  include/linux/lockdep.h  573  void lockdep_rcu_suspicious(const char *file,const int line,const char *s);
_LINUX_DEBUGOBJECTS_H  macro  include/linux/debugobjects.h  2  #define _LINUX_DEBUGOBJECTS_H
debug_obj_state  enum  include/linux/debugobjects.h  7  enum debug_obj_state { ODEBUG_STATE_NONE, ODEBUG_STATE_INIT, ODEBUG_STATE_INACTIVE, ODEBUG_STATE_ACTIVE, ODEBUG_STATE_DESTROYED, ODEBUG_STATE_NOTAVAILABLE, ODEBUG_STATE_MAX, };
debug_obj  struct  include/linux/debugobjects.h  27  struct debug_obj { struct hlist_node node; enum debug_obj_state state; unsigned int astate; void *object; struct debug_obj_descr *descr; };
debug_obj_descr  struct  include/linux/debugobjects.h  52  struct debug_obj_descr { const char *name; void *(*debug_hint) (void *addr); int (*fixup_init) (void *addr, enum debug_obj_state state); int (*fixup_activate) (void *addr, enum debug_obj_state state); int (*fixup_destroy) (void *addr, enum debug_obj_state state); int (*fixup_free) (void *addr, enum debug_obj_state state); int (*fixup_assert_init)(void *addr, enum debug_obj_state state); };
debug_object_init  function  include/linux/debugobjects.h  85  debug_object_init (void *addr,struct debug_obj_descr *descr) { }
debug_object_init_on_stack  function  include/linux/debugobjects.h  87  debug_object_init_on_stack(void *addr,struct debug_obj_descr *descr) { }
debug_object_activate  function  include/linux/debugobjects.h  89  debug_object_activate (void *addr,struct debug_obj_descr *descr) { }
debug_object_deactivate  function  include/linux/debugobjects.h  91  debug_object_deactivate(void *addr,struct debug_obj_descr *descr) { }
debug_object_destroy  function  include/linux/debugobjects.h  93  debug_object_destroy (void *addr,struct debug_obj_descr *descr) { }
debug_object_free  function  include/linux/debugobjects.h  95  debug_object_free (void *addr,struct debug_obj_descr *descr) { }
debug_object_assert_init  function  include/linux/debugobjects.h  97  debug_object_assert_init(void *addr,struct debug_obj_descr *descr) { }
debug_object_active_state  prototype  include/linux/debugobjects.h  78  debug_object_active_state(void *addr,struct debug_obj_descr *descr,unsigned int expect, unsigned int next);
debug_objects_early_init  function  include/linux/debugobjects.h  99  static inline void debug_objects_early_init(void) { }
debug_objects_mem_init  function  include/linux/debugobjects.h  100  static inline void debug_objects_mem_init(void) { }
debug_check_no_obj_freed  function  include/linux/debugobjects.h  107  debug_check_no_obj_freed(const void *address,unsigned long size) { }
__LINUX_RCUTREE_H  macro  include/linux/rcutree.h  31  #define __LINUX_RCUTREE_H
rcu_init  function  include/linux/rcutiny.h  30  static inline void rcu_init(void)
rcu_note_context_switch  function  include/linux/rcutiny.h  113  static inline void rcu_note_context_switch(int cpu)
rcu_needs_cpu  function  include/linux/rcutiny.h  105  static inline int rcu_needs_cpu(int cpu,unsigned long *delta_jiffies)
rcu_cpu_stall_reset  function  include/linux/rcutiny.h  155  static inline void rcu_cpu_stall_reset(void)
rcu_virt_note_context_switch  function  include/linux/rcutiny.h  123  static inline void rcu_virt_note_context_switch(int cpu)
synchronize_rcu_bh  function  include/linux/rcutiny.h  67  static inline void synchronize_rcu_bh(void)
synchronize_sched_expedited  function  include/linux/rcutiny.h  77  static inline void synchronize_sched_expedited(void)
synchronize_rcu_expedited  prototype  include/linux/rcutiny.h  58  void synchronize_rcu_expedited(void);
kfree_call_rcu  function  include/linux/rcutiny.h  82  static inline void kfree_call_rcu(struct rcu_head *head,void (*func)(struct rcu_head *rcu))
synchronize_rcu_bh_expedited  function  include/linux/rcutiny.h  72  static inline void synchronize_rcu_bh_expedited(void)
rcu_barrier  function  include/linux/rcutiny.h  60  static inline void rcu_barrier(void)
rcu_barrier_bh  function  include/linux/rcutiny.h  34  static inline void rcu_barrier_bh(void)
rcu_barrier_sched  function  include/linux/rcutiny.h  39  static inline void rcu_barrier_sched(void)
rcu_batches_completed  function  include/linux/rcutiny.h  130  static inline long rcu_batches_completed(void)
rcu_batches_completed_bh  function  include/linux/rcutiny.h  138  static inline long rcu_batches_completed_bh(void)
rcu_batches_completed_sched  prototype  include/linux/rcutree.h  83  extern long rcu_batches_completed_sched(void);
rcu_force_quiescent_state  function  include/linux/rcutiny.h  143  static inline void rcu_force_quiescent_state(void)
rcu_bh_force_quiescent_state  function  include/linux/rcutiny.h  147  static inline void rcu_bh_force_quiescent_state(void)
rcu_sched_force_quiescent_state  function  include/linux/rcutiny.h  151  static inline void rcu_sched_force_quiescent_state(void)
rcu_scheduler_starting  function  include/linux/rcutiny.h  163  static inline void rcu_scheduler_starting(void)
__LINUX_TINY_H  macro  include/linux/rcutiny.h  26  #define __LINUX_TINY_H
rcu_preempt_note_context_switch  prototype  include/linux/rcutiny.h  102  void rcu_preempt_note_context_switch(void);
rcu_preempt_needs_cpu  prototype  include/linux/rcutiny.h  103  int rcu_preempt_needs_cpu(void);
_LINUX_PLIST_H_  macro  include/linux/plist.h  76  #define _LINUX_PLIST_H_
plist_head  struct  include/linux/plist.h  81  struct plist_head { struct list_head node_list; };
plist_node  struct  include/linux/plist.h  85  struct plist_node { int prio; struct list_head prio_list; struct list_head node_list; };
PLIST_HEAD_INIT  macro  include/linux/plist.h  95  #define PLIST_HEAD_INIT(head) { .node_list = LIST_HEAD_INIT((head).node_list) }
PLIST_NODE_INIT  macro  include/linux/plist.h  105  #define PLIST_NODE_INIT(node,__prio) { .prio  = (__prio), .prio_list = LIST_HEAD_INIT((node).prio_list), .node_list = LIST_HEAD_INIT((node).node_list), }
plist_head_init  function  include/linux/plist.h  117  plist_head_init(struct plist_head *head)
plist_node_init  function  include/linux/plist.h  127  static inline void plist_node_init(struct plist_node *node,int prio)
plist_add  prototype  include/linux/plist.h  134  extern void plist_add(struct plist_node *node,struct plist_head *head);
plist_del  prototype  include/linux/plist.h  135  extern void plist_del(struct plist_node *node,struct plist_head *head);
plist_for_each  macro  include/linux/plist.h  142  #define plist_for_each(pos,head) list_for_each_entry(pos, &(head)->node_list, node_list)
plist_for_each_safe  macro  include/linux/plist.h  153  #define plist_for_each_safe(pos,n,head) list_for_each_entry_safe(pos, n, &(head)->node_list, node_list)
plist_for_each_entry  macro  include/linux/plist.h  162  #define plist_for_each_entry(pos,head,mem) list_for_each_entry(pos, &(head)->node_list, mem.node_list)
plist_for_each_entry_safe  macro  include/linux/plist.h  174  #define plist_for_each_entry_safe(pos,n,head,m) list_for_each_entry_safe(pos, n, &(head)->node_list, m.node_list)
plist_head_empty  function  include/linux/plist.h  181  static inline int plist_head_empty(const struct plist_head *head)
plist_node_empty  function  include/linux/plist.h  190  static inline int plist_node_empty(const struct plist_node *node)
plist_first_entry  macro  include/linux/plist.h  210  # define plist_first_entry(head,type,member) container_of(plist_first(head), type, member)
plist_last_entry  macro  include/linux/plist.h  227  # define plist_last_entry(head,type,member) container_of(plist_last(head), type, member)
plist_first  function  include/linux/plist.h  237  static inline struct plist_node *plist_first(const struct plist_head *head)
plist_last  function  include/linux/plist.h  249  static inline struct plist_node *plist_last(const struct plist_head *head)
_LINUX_KTIME_H  macro  include/linux/ktime.h  22  #define _LINUX_KTIME_H
ktime  union  include/linux/ktime.h  46  union ktime { s64 tv64; s32 sec, nsec; } tv; };
ktime_set  function  include/linux/ktime.h  144  static inline ktime_t ktime_set(const long secs,const unsigned long nsecs)
ktime_sub  function  include/linux/ktime.h  156  static inline ktime_t ktime_sub(const ktime_t lhs,const ktime_t rhs)
ktime_add  function  include/linux/ktime.h  174  static inline ktime_t ktime_add(const ktime_t add1,const ktime_t add2)
ktime_add_ns  prototype  include/linux/ktime.h  200  extern ktime_t ktime_add_ns(const ktime_t kt,u64 nsec);
ktime_sub_ns  prototype  include/linux/ktime.h  209  extern ktime_t ktime_sub_ns(const ktime_t kt,u64 nsec);
timespec_to_ktime  function  include/linux/ktime.h  217  static inline ktime_t timespec_to_ktime(const struct timespec ts)
timeval_to_ktime  function  include/linux/ktime.h  229  static inline ktime_t timeval_to_ktime(const struct timeval tv)
ktime_to_timespec  function  include/linux/ktime.h  241  static inline struct timespec ktime_to_timespec(const ktime_t kt)
ktime_to_timeval  function  include/linux/ktime.h  253  static inline struct timeval ktime_to_timeval(const ktime_t kt)
ktime_to_ns  function  include/linux/ktime.h  266  static inline s64 ktime_to_ns(const ktime_t kt)
ktime_equal  function  include/linux/ktime.h  280  static inline int ktime_equal(const ktime_t cmp1,const ktime_t cmp2)
ktime_to_us  function  include/linux/ktime.h  285  static inline s64 ktime_to_us(const ktime_t kt)
ktime_to_ms  function  include/linux/ktime.h  291  static inline s64 ktime_to_ms(const ktime_t kt)
ktime_us_delta  function  include/linux/ktime.h  297  static inline s64 ktime_us_delta(const ktime_t later,const ktime_t earlier)
ktime_add_us  function  include/linux/ktime.h  302  static inline ktime_t ktime_add_us(const ktime_t kt,const u64 usec)
ktime_sub_us  function  include/linux/ktime.h  307  static inline ktime_t ktime_sub_us(const ktime_t kt,const u64 usec)
ktime_add_safe  prototype  include/linux/ktime.h  312  extern ktime_t ktime_add_safe(const ktime_t lhs,const ktime_t rhs);
LOW_RES_NSEC  macro  include/linux/ktime.h  320  #define LOW_RES_NSEC TICK_NSEC
KTIME_LOW_RES  macro  include/linux/ktime.h  321  #define KTIME_LOW_RES (ktime_t){ .tv64 = LOW_RES_NSEC }
ktime_get_ts  prototype  include/linux/ktime.h  324  extern void ktime_get_ts(struct timespec *ts);
ktime_get_real_ts  macro  include/linux/ktime.h  327  #define ktime_get_real_ts(ts) getnstimeofday(ts)
ns_to_ktime  function  include/linux/ktime.h  329  static inline ktime_t ns_to_ktime(u64 ns)
_LINUX_TIMERQUEUE_H  macro  include/linux/timerqueue.h  2  #define _LINUX_TIMERQUEUE_H
timerqueue_node  struct  include/linux/timerqueue.h  8  struct timerqueue_node { struct rb_node node; ktime_t expires; };
timerqueue_head  struct  include/linux/timerqueue.h  13  struct timerqueue_head { struct rb_root head; struct timerqueue_node *next; };
timerqueue_add  prototype  include/linux/timerqueue.h  19  extern void timerqueue_add(struct timerqueue_head *head,struct timerqueue_node *node);
timerqueue_del  prototype  include/linux/timerqueue.h  21  extern void timerqueue_del(struct timerqueue_head *head,struct timerqueue_node *node);
timerqueue_iterate_next  prototype  include/linux/timerqueue.h  23  extern struct timerqueue_node *timerqueue_iterate_next(
timerqueue_getnext  function  include/linux/timerqueue.h  35  struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
timerqueue_init  function  include/linux/timerqueue.h  40  static inline void timerqueue_init(struct timerqueue_node *node)
timerqueue_init_head  function  include/linux/timerqueue.h  45  static inline void timerqueue_init_head(struct timerqueue_head *head)
_LINUX_KEY_H  macro  include/linux/key.h  16  #define _LINUX_KEY_H
KEY_DEBUGGING  macro  include/linux/key.h  38  #undef KEY_DEBUGGING
KEY_POS_VIEW  macro  include/linux/key.h  40  #define KEY_POS_VIEW 0x01000000
KEY_POS_READ  macro  include/linux/key.h  41  #define KEY_POS_READ 0x02000000
KEY_POS_WRITE  macro  include/linux/key.h  42  #define KEY_POS_WRITE 0x04000000
KEY_POS_SEARCH  macro  include/linux/key.h  43  #define KEY_POS_SEARCH 0x08000000
KEY_POS_LINK  macro  include/linux/key.h  44  #define KEY_POS_LINK 0x10000000
KEY_POS_SETATTR  macro  include/linux/key.h  45  #define KEY_POS_SETATTR 0x20000000
KEY_POS_ALL  macro  include/linux/key.h  46  #define KEY_POS_ALL 0x3f000000
KEY_USR_VIEW  macro  include/linux/key.h  48  #define KEY_USR_VIEW 0x00010000
KEY_USR_READ  macro  include/linux/key.h  49  #define KEY_USR_READ 0x00020000
KEY_USR_WRITE  macro  include/linux/key.h  50  #define KEY_USR_WRITE 0x00040000
KEY_USR_SEARCH  macro  include/linux/key.h  51  #define KEY_USR_SEARCH 0x00080000
KEY_USR_LINK  macro  include/linux/key.h  52  #define KEY_USR_LINK 0x00100000
KEY_USR_SETATTR  macro  include/linux/key.h  53  #define KEY_USR_SETATTR 0x00200000
KEY_USR_ALL  macro  include/linux/key.h  54  #define KEY_USR_ALL 0x003f0000
KEY_GRP_VIEW  macro  include/linux/key.h  56  #define KEY_GRP_VIEW 0x00000100
KEY_GRP_READ  macro  include/linux/key.h  57  #define KEY_GRP_READ 0x00000200
KEY_GRP_WRITE  macro  include/linux/key.h  58  #define KEY_GRP_WRITE 0x00000400
KEY_GRP_SEARCH  macro  include/linux/key.h  59  #define KEY_GRP_SEARCH 0x00000800
KEY_GRP_LINK  macro  include/linux/key.h  60  #define KEY_GRP_LINK 0x00001000
KEY_GRP_SETATTR  macro  include/linux/key.h  61  #define KEY_GRP_SETATTR 0x00002000
KEY_GRP_ALL  macro  include/linux/key.h  62  #define KEY_GRP_ALL 0x00003f00
KEY_OTH_VIEW  macro  include/linux/key.h  64  #define KEY_OTH_VIEW 0x00000001
KEY_OTH_READ  macro  include/linux/key.h  65  #define KEY_OTH_READ 0x00000002
KEY_OTH_WRITE  macro  include/linux/key.h  66  #define KEY_OTH_WRITE 0x00000004
KEY_OTH_SEARCH  macro  include/linux/key.h  67  #define KEY_OTH_SEARCH 0x00000008
KEY_OTH_LINK  macro  include/linux/key.h  68  #define KEY_OTH_LINK 0x00000010
KEY_OTH_SETATTR  macro  include/linux/key.h  69  #define KEY_OTH_SETATTR 0x00000020
KEY_OTH_ALL  macro  include/linux/key.h  70  #define KEY_OTH_ALL 0x0000003f
KEY_PERM_UNDEF  macro  include/linux/key.h  72  #define KEY_PERM_UNDEF 0xffffffff
make_key_ref  macro  include/linux/key.h  328  #define make_key_ref(k,p) NULL
key_ref_to_ptr  macro  include/linux/key.h  329  #define key_ref_to_ptr(k) NULL
is_key_possessed  macro  include/linux/key.h  330  #define is_key_possessed(k) 0
key  struct  include/linux/key.h  124  struct key { atomic_t usage; key_serial_t serial; union { struct list_head graveyard_link; struct rb_node serial_node; }; struct key_type *type; struct rw_semaphore sem; struct key_user *user; void *security; union { time_t expiry; time_t revoked_at; }; time_t last_used_at; uid_t uid; gid_t gid; key_perm_t perm; unsigned short quotalen; unsigned short datalen; unsigned magic; #define KEY_DEBUG_MAGIC 0x18273645u #define KEY_DEBUG_MAGIC_X 0xf8e9dacbu unsigned long flags; #define KEY_FLAG_INSTANTIATED 0 #define KEY_FLAG_DEAD 1 #define KEY_FLAG_REVOKED 2 #define KEY_FLAG_IN_QUOTA 3 #define KEY_FLAG_USER_CONSTRUCT 4 #define KEY_FLAG_NEGATIVE 5 #define KEY_FLAG_ROOT_CAN_CLEAR 6 #define KEY_FLAG_INVALIDATED 7 char *description; struct list_head link; unsigned long x[2]; void *p[2]; int reject_error; } type_data; unsigned long value; void __rcu *rcudata; void *data; struct keyring_list __rcu *subscriptions; } payload; };
key_alloc  prototype  include/linux/key.h  194  extern struct key *key_alloc(struct key_type *type,const char *desc,uid_t uid, gid_t gid,const struct cred *cred,key_perm_t perm,unsigned long flags);
KEY_ALLOC_IN_QUOTA  macro  include/linux/key.h  202  #define KEY_ALLOC_IN_QUOTA 0x0000
KEY_ALLOC_QUOTA_OVERRUN  macro  include/linux/key.h  203  #define KEY_ALLOC_QUOTA_OVERRUN 0x0001
KEY_ALLOC_NOT_IN_QUOTA  macro  include/linux/key.h  204  #define KEY_ALLOC_NOT_IN_QUOTA 0x0002
key_revoke  macro  include/linux/key.h  324  #define key_revoke(k) do { } while(0)
key_invalidate  macro  include/linux/key.h  325  #define key_invalidate(k) do { } while(0)
key_put  macro  include/linux/key.h  326  #define key_put(k) do { } while(0)
key_get  macro  include/linux/key.h  323  #define key_get(k) ({ NULL; })
key_ref_put  macro  include/linux/key.h  327  #define key_ref_put(k) do { } while(0)
request_key  prototype  include/linux/key.h  222  extern struct key *request_key(struct key_type *type,const char *description,const char *callout_info);
request_key_with_auxdata  prototype  include/linux/key.h  226  extern struct key *request_key_with_auxdata(struct key_type *type,const char *description,const void *callout_info,size_t callout_len,void *aux);
request_key_async  prototype  include/linux/key.h  232  extern struct key *request_key_async(struct key_type *type,const char *description,const void *callout_info,size_t callout_len);
request_key_async_with_auxdata  prototype  include/linux/key.h  237  extern struct key *request_key_async_with_auxdata(struct key_type *type,const char *description,const void *callout_info,size_t callout_len,void *aux);
wait_for_key_construction  prototype  include/linux/key.h  243  extern int wait_for_key_construction(struct key *key,bool intr);
key_validate  macro  include/linux/key.h  321  #define key_validate(k) 0
key_create_or_update  prototype  include/linux/key.h  247  extern key_ref_t key_create_or_update(key_ref_t keyring,const char *type,const char *description,const void *payload,size_t plen,key_perm_t perm,unsigned long flags);
key_update  prototype  include/linux/key.h  255  extern int key_update(key_ref_t key,const void *payload,size_t plen);
key_link  prototype  include/linux/key.h  259  extern int key_link(struct key *keyring,struct key *key);
key_unlink  prototype  include/linux/key.h  262  extern int key_unlink(struct key *keyring,struct key *key);
keyring_alloc  prototype  include/linux/key.h  265  extern struct key *keyring_alloc(const char *description,uid_t uid,gid_t gid,const struct cred *cred,unsigned long flags,struct key *dest);
keyring_clear  prototype  include/linux/key.h  270  extern int keyring_clear(struct key *keyring);
keyring_search  prototype  include/linux/key.h  272  extern key_ref_t keyring_search(key_ref_t keyring,struct key_type *type,const char *description);
keyring_add_key  prototype  include/linux/key.h  276  extern int keyring_add_key(struct key *keyring,struct key *key);
key_lookup  prototype  include/linux/key.h  279  extern struct key *key_lookup(key_serial_t id);
key_serial  macro  include/linux/key.h  322  #define key_serial(k) 0
key_set_timeout  prototype  include/linux/key.h  286  extern void key_set_timeout(struct key *,unsigned);
key_is_instantiated  function  include/linux/key.h  295  static inline bool key_is_instantiated(const struct key *key)
rcu_dereference_key  macro  include/linux/key.h  301  #define rcu_dereference_key(KEY) (rcu_dereference_protected((KEY)->payload.rcudata, rwsem_is_locked(&((struct key *)(KEY))->sem)))
rcu_assign_keypointer  macro  include/linux/key.h  305  #define rcu_assign_keypointer(KEY,PAYLOAD) (rcu_assign_pointer((KEY)->payload.rcudata, PAYLOAD))
install_thread_keyring_to_cred  prototype  include/linux/key.h  314  extern int install_thread_keyring_to_cred(struct cred *cred);
key_fsuid_changed  macro  include/linux/key.h  331  #define key_fsuid_changed(t) do { } while(0)
key_fsgid_changed  macro  include/linux/key.h  332  #define key_fsgid_changed(t) do { } while(0)
key_init  macro  include/linux/key.h  333  #define key_init() do { } while(0)
_LINUX_SELINUX_H  macro  include/linux/selinux.h  15  #define _LINUX_SELINUX_H
selinux_is_enabled  function  include/linux/selinux.h  29  static inline bool selinux_is_enabled(void)
ASM_X86_CMPXCHG_H  macro  arch/x86/include/asm/cmpxchg.h  2  #define ASM_X86_CMPXCHG_H
__X86_CASE_B  macro  arch/x86/include/asm/cmpxchg.h  27  #define __X86_CASE_B 1
__X86_CASE_W  macro  arch/x86/include/asm/cmpxchg.h  28  #define __X86_CASE_W 2
__X86_CASE_L  macro  arch/x86/include/asm/cmpxchg.h  29  #define __X86_CASE_L 4
__X86_CASE_Q  macro  arch/x86/include/asm/cmpxchg.h  33  #define __X86_CASE_Q -1
__xchg_op  macro  arch/x86/include/asm/cmpxchg.h  40  #define __xchg_op(ptr,arg,op,lock) ({ __typeof__ (*(ptr)) __ret = (arg); switch (sizeof(*(ptr))) { case __X86_CASE_B: asm volatile (lock #op "b %b0, %1\n" : "+q" (__ret), "+m" (*(ptr)) : : "memory", "cc"); break; case __X86_CASE_W: asm volatile (lock #op "w %w0, %1\n" : "+r" (__ret), "+m" (*(ptr)) : : "memory", "cc"); break; case __X86_CASE_L: asm volatile (lock #op "l %0, %1\n" : "+r" (__ret), "+m" (*(ptr)) : : "memory", "cc"); break; case __X86_CASE_Q: asm volatile (lock #op "q %q0, %1\n" : "+r" (__ret), "+m" (*(ptr)) : : "memory", "cc"); break; default: __ ## op ## _wrong_size(); } __ret; })
xchg  macro  arch/x86/include/asm/cmpxchg.h  76  #define xchg(ptr,v) __xchg_op((ptr),(v),xchg,"")
__raw_cmpxchg  macro  arch/x86/include/asm/cmpxchg.h  83  #define __raw_cmpxchg(ptr,old,new,size,lock) ({ __typeof__(*(ptr)) __ret; __typeof__(*(ptr)) __old = (old); __typeof__(*(ptr)) __new = (new); switch (size) { case __X86_CASE_B: { volatile u8 *__ptr = (volatile u8 *)(ptr); asm volatile(lock "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case __X86_CASE_W: { volatile u16 *__ptr = (volatile u16 *)(ptr); asm volatile(lock "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case __X86_CASE_L: { volatile u32 *__ptr = (volatile u32 *)(ptr); asm volatile(lock "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case __X86_CASE_Q: { volatile u64 *__ptr = (volatile u64 *)(ptr); asm volatile(lock "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; })
__cmpxchg  macro  arch/x86/include/asm/cmpxchg.h  131  #define __cmpxchg(ptr,old,new,size) __raw_cmpxchg((ptr), (old), (new), (size), LOCK_PREFIX)
__sync_cmpxchg  macro  arch/x86/include/asm/cmpxchg.h  134  #define __sync_cmpxchg(ptr,old,new,size) __raw_cmpxchg((ptr), (old), (new), (size), "lock; ")
__cmpxchg_local  macro  arch/x86/include/asm/cmpxchg.h  137  #define __cmpxchg_local(ptr,old,new,size) __raw_cmpxchg((ptr), (old), (new), (size), "")
cmpxchg  macro  arch/x86/include/asm/cmpxchg.h  147  #define cmpxchg(ptr,old,new) __cmpxchg(ptr, old, new, sizeof(*(ptr)))
sync_cmpxchg  macro  arch/x86/include/asm/cmpxchg.h  150  #define sync_cmpxchg(ptr,old,new) __sync_cmpxchg(ptr, old, new, sizeof(*(ptr)))
cmpxchg_local  macro  arch/x86/include/asm/cmpxchg.h  153  #define cmpxchg_local(ptr,old,new) __cmpxchg_local(ptr, old, new, sizeof(*(ptr)))
__xadd  macro  arch/x86/include/asm/cmpxchg.h  165  #define __xadd(ptr,inc,lock) __xchg_op((ptr),(inc),xadd,lock)
xadd  macro  arch/x86/include/asm/cmpxchg.h  166  #define xadd(ptr,inc) __xadd((ptr),(inc),LOCK_PREFIX)
xadd_sync  macro  arch/x86/include/asm/cmpxchg.h  167  #define xadd_sync(ptr,inc) __xadd((ptr),(inc),"lock; ")
xadd_local  macro  arch/x86/include/asm/cmpxchg.h  168  #define xadd_local(ptr,inc) __xadd((ptr),(inc),"")
__add  macro  arch/x86/include/asm/cmpxchg.h  170  #define __add(ptr,inc,lock) ({ __typeof__ (*(ptr)) __ret = (inc); switch (sizeof(*(ptr))) { case __X86_CASE_B: asm volatile (lock "addb %b1, %0\n" : "+m" (*(ptr)) : "qi" (inc) : "memory", "cc"); break; case __X86_CASE_W: asm volatile (lock "addw %w1, %0\n" : "+m" (*(ptr)) : "ri" (inc) : "memory", "cc"); break; case __X86_CASE_L: asm volatile (lock "addl %1, %0\n" : "+m" (*(ptr)) : "ri" (inc) : "memory", "cc"); break; case __X86_CASE_Q: asm volatile (lock "addq %1, %0\n" : "+m" (*(ptr)) : "ri" (inc) : "memory", "cc"); break; default: __add_wrong_size(); } __ret; })
add_smp  macro  arch/x86/include/asm/cmpxchg.h  207  #define add_smp(ptr,inc) __add((ptr),(inc),LOCK_PREFIX)
add_sync  macro  arch/x86/include/asm/cmpxchg.h  208  #define add_sync(ptr,inc) __add((ptr),(inc),"lock; ")
__cmpxchg_double  macro  arch/x86/include/asm/cmpxchg.h  210  #define __cmpxchg_double(pfx,p1,p2,o1,o2,n1,n2) ({ bool __ret; __typeof__(*(p1)) __old1 = (o1), __new1 = (n1); __typeof__(*(p2)) __old2 = (o2), __new2 = (n2); BUILD_BUG_ON(sizeof(*(p1)) != sizeof(long)); BUILD_BUG_ON(sizeof(*(p2)) != sizeof(long)); VM_BUG_ON((unsigned long)(p1) % (2 * sizeof(long))); VM_BUG_ON((unsigned long)((p1) + 1) != (unsigned long)(p2)); asm volatile(pfx "cmpxchg%c4b %2; sete %0" : "=a" (__ret), "+d" (__old2), "+m" (*(p1)), "+m" (*(p2)) : "i" (2 * sizeof(long)), "a" (__old1), "b" (__new1), "c" (__new2)); __ret; })
cmpxchg_double  macro  arch/x86/include/asm/cmpxchg.h  227  #define cmpxchg_double(p1,p2,o1,o2,n1,n2) __cmpxchg_double(LOCK_PREFIX, p1, p2, o1, o2, n1, n2)
cmpxchg_double_local  macro  arch/x86/include/asm/cmpxchg.h  230  #define cmpxchg_double_local(p1,p2,o1,o2,n1,n2) __cmpxchg_double(, p1, p2, o1, o2, n1, n2)
_LINUX_HIGHUID_H  macro  include/linux/highuid.h  2  #define _LINUX_HIGHUID_H
__bad_uid  prototype  include/linux/highuid.h  37  extern void __bad_uid(void);
__bad_gid  prototype  include/linux/highuid.h  38  extern void __bad_gid(void);
DEFAULT_OVERFLOWUID  macro  include/linux/highuid.h  40  #define DEFAULT_OVERFLOWUID 65534
DEFAULT_OVERFLOWGID  macro  include/linux/highuid.h  41  #define DEFAULT_OVERFLOWGID 65534
high2lowuid  macro  include/linux/highuid.h  46  #define high2lowuid(uid) ((uid) & ~0xFFFF ? (old_uid_t)overflowuid : (old_uid_t)(uid))
high2lowgid  macro  include/linux/highuid.h  47  #define high2lowgid(gid) ((gid) & ~0xFFFF ? (old_gid_t)overflowgid : (old_gid_t)(gid))
low2highuid  macro  include/linux/highuid.h  52  #define low2highuid(uid) ((uid) == (old_uid_t)-1 ? (uid_t)-1 : (uid_t)(uid))
low2highgid  macro  include/linux/highuid.h  53  #define low2highgid(gid) ((gid) == (old_gid_t)-1 ? (gid_t)-1 : (gid_t)(gid))
__convert_uid  macro  include/linux/highuid.h  63  #define __convert_uid(size,uid) (uid)
__convert_gid  macro  include/linux/highuid.h  64  #define __convert_gid(size,gid) (gid)
SET_UID  macro  include/linux/highuid.h  69  #define SET_UID(var,uid) do { (var) = __convert_uid(sizeof(var),(uid)); } while (0)
SET_GID  macro  include/linux/highuid.h  70  #define SET_GID(var,gid) do { (var) = __convert_gid(sizeof(var),(gid)); } while (0)
DEFAULT_FS_OVERFLOWUID  macro  include/linux/highuid.h  84  #define DEFAULT_FS_OVERFLOWUID 65534
DEFAULT_FS_OVERFLOWGID  macro  include/linux/highuid.h  85  #define DEFAULT_FS_OVERFLOWGID 65534
fs_high2lowuid  macro  include/linux/highuid.h  91  #define fs_high2lowuid(uid) ((uid) & ~0xFFFF ? (uid16_t)fs_overflowuid : (uid16_t)(uid))
fs_high2lowgid  macro  include/linux/highuid.h  92  #define fs_high2lowgid(gid) ((gid) & ~0xFFFF ? (gid16_t)fs_overflowgid : (gid16_t)(gid))
low_16_bits  macro  include/linux/highuid.h  94  #define low_16_bits(x) ((x) & 0xFFFF)
high_16_bits  macro  include/linux/highuid.h  95  #define high_16_bits(x) (((x) & 0xFFFF0000) >> 16)
_ASM_X86_VM86_H  macro  arch/x86/include/asm/vm86.h  2  #define _ASM_X86_VM86_H
BIOSSEG  macro  arch/x86/include/asm/vm86.h  17  #define BIOSSEG 0x0f000
CPU_086  macro  arch/x86/include/asm/vm86.h  19  #define CPU_086 0
CPU_186  macro  arch/x86/include/asm/vm86.h  20  #define CPU_186 1
CPU_286  macro  arch/x86/include/asm/vm86.h  21  #define CPU_286 2
CPU_386  macro  arch/x86/include/asm/vm86.h  22  #define CPU_386 3
CPU_486  macro  arch/x86/include/asm/vm86.h  23  #define CPU_486 4
CPU_586  macro  arch/x86/include/asm/vm86.h  24  #define CPU_586 5
VM86_TYPE  macro  arch/x86/include/asm/vm86.h  29  #define VM86_TYPE(retval) ((retval) & 0xff)
VM86_ARG  macro  arch/x86/include/asm/vm86.h  30  #define VM86_ARG(retval) ((retval) >> 8)
VM86_SIGNAL  macro  arch/x86/include/asm/vm86.h  32  #define VM86_SIGNAL 0
VM86_UNKNOWN  macro  arch/x86/include/asm/vm86.h  33  #define VM86_UNKNOWN 1
VM86_INTx  macro  arch/x86/include/asm/vm86.h  35  #define VM86_INTx 2
VM86_STI  macro  arch/x86/include/asm/vm86.h  36  #define VM86_STI 3
VM86_PICRETURN  macro  arch/x86/include/asm/vm86.h  42  #define VM86_PICRETURN 4
VM86_TRAP  macro  arch/x86/include/asm/vm86.h  43  #define VM86_TRAP 6
VM86_PLUS_INSTALL_CHECK  macro  arch/x86/include/asm/vm86.h  48  #define VM86_PLUS_INSTALL_CHECK 0
VM86_ENTER  macro  arch/x86/include/asm/vm86.h  49  #define VM86_ENTER 1
VM86_ENTER_NO_BYPASS  macro  arch/x86/include/asm/vm86.h  50  #define VM86_ENTER_NO_BYPASS 2
VM86_REQUEST_IRQ  macro  arch/x86/include/asm/vm86.h  51  #define VM86_REQUEST_IRQ 3
VM86_FREE_IRQ  macro  arch/x86/include/asm/vm86.h  52  #define VM86_FREE_IRQ 4
VM86_GET_IRQ_BITS  macro  arch/x86/include/asm/vm86.h  53  #define VM86_GET_IRQ_BITS 5
VM86_GET_AND_RESET_IRQ  macro  arch/x86/include/asm/vm86.h  54  #define VM86_GET_AND_RESET_IRQ 6
vm86_regs  struct  arch/x86/include/asm/vm86.h  62  struct vm86_regs { long ebx; long ecx; long edx; long esi; long edi; long ebp; long eax; long __null_ds; long __null_es; long __null_fs; long __null_gs; long orig_eax; long eip; unsigned short cs, __csh; long eflags; long esp; unsigned short ss, __ssh; unsigned short es, __esh; unsigned short ds, __dsh; unsigned short fs, __fsh; unsigned short gs, __gsh; };
revectored_struct  struct  arch/x86/include/asm/vm86.h  92  struct revectored_struct { unsigned long __map[8]; };
vm86_struct  struct  arch/x86/include/asm/vm86.h  96  struct vm86_struct { struct vm86_regs regs; unsigned long flags; unsigned long screen_bitmap; unsigned long cpu_type; struct revectored_struct int_revectored; struct revectored_struct int21_revectored; };
VM86_SCREEN_BITMAP  macro  arch/x86/include/asm/vm86.h  108  #define VM86_SCREEN_BITMAP 0x0001
vm86plus_info_struct  struct  arch/x86/include/asm/vm86.h  110  struct vm86plus_info_struct { unsigned long force_return_for_pic:1; unsigned long vm86dbg_active:1; unsigned long vm86dbg_TFpendig:1; unsigned long unused:28; unsigned long is_vm86pus:1; unsigned char vm86dbg_intxxtab[32]; };
vm86plus_struct  struct  arch/x86/include/asm/vm86.h  118  struct vm86plus_struct { struct vm86_regs regs; unsigned long flags; unsigned long screen_bitmap; unsigned long cpu_type; struct revectored_struct int_revectored; struct revectored_struct int21_revectored; struct vm86plus_info_struct vm86plus; };
kernel_vm86_regs  struct  arch/x86/include/asm/vm86.h  141  struct kernel_vm86_regs { struct pt_regs pt; unsigned short es, __esh; unsigned short ds, __dsh; unsigned short fs, __fsh; unsigned short gs, __gsh; };
kernel_vm86_struct  struct  arch/x86/include/asm/vm86.h  155  struct kernel_vm86_struct { struct kernel_vm86_regs regs; #define VM86_TSS_ESP0 flags unsigned long flags; unsigned long screen_bitmap; unsigned long cpu_type; struct revectored_struct int_revectored; struct revectored_struct int21_revectored; struct vm86plus_info_struct vm86plus; struct pt_regs *regs32; };
handle_vm86_fault  macro  arch/x86/include/asm/vm86.h  196  #define handle_vm86_fault(a,b)
handle_vm86_trap  function  arch/x86/include/asm/vm86.h  199  static inline int handle_vm86_trap(struct kernel_vm86_regs *a,long b,int c)
save_v86_state  prototype  arch/x86/include/asm/vm86.h  189  struct pt_regs *save_v86_state(struct kernel_vm86_regs *);
release_vm86_irqs  macro  arch/x86/include/asm/vm86.h  197  #define release_vm86_irqs(a)
_ASM_X86_MATH_EMU_H  macro  arch/x86/include/asm/math_emu.h  2  #define _ASM_X86_MATH_EMU_H
math_emu_info  struct  arch/x86/include/asm/math_emu.h  11  struct math_emu_info { long ___orig_eip; union { struct pt_regs *regs; struct kernel_vm86_regs *vm86; };
_ASM_X86_SIGCONTEXT_H  macro  arch/x86/include/asm/sigcontext.h  2  #define _ASM_X86_SIGCONTEXT_H
FP_XSTATE_MAGIC1  macro  arch/x86/include/asm/sigcontext.h  7  #define FP_XSTATE_MAGIC1 0x46505853U
FP_XSTATE_MAGIC2  macro  arch/x86/include/asm/sigcontext.h  8  #define FP_XSTATE_MAGIC2 0x46505845U
FP_XSTATE_MAGIC2_SIZE  macro  arch/x86/include/asm/sigcontext.h  9  #define FP_XSTATE_MAGIC2_SIZE sizeof(FP_XSTATE_MAGIC2)
_fpx_sw_bytes  struct  arch/x86/include/asm/sigcontext.h  23  struct _fpx_sw_bytes { __u32 magic1; __u32 extended_size; __u64 xstate_bv; __u32 xstate_size; __u32 padding[7]; };
_fpreg  struct  arch/x86/include/asm/sigcontext.h  56  struct _fpreg { unsigned short significand[4]; unsigned short exponent; };
_fpxreg  struct  arch/x86/include/asm/sigcontext.h  61  struct _fpxreg { unsigned short significand[4]; unsigned short exponent; unsigned short padding[3]; };
_xmmreg  struct  arch/x86/include/asm/sigcontext.h  67  struct _xmmreg { unsigned long element[4]; };
_fpstate  struct  arch/x86/include/asm/sigcontext.h  169  struct _fpstate { __u16 cwd; __u16 swd; __u16 twd; __u16 fop; __u64 rip; __u64 rdp; __u32 mxcsr; __u32 mxcsr_mask; __u32 st_space[32]; __u32 xmm_space[64]; __u32 reserved2[12]; union { __u32 reserved3[12]; struct _fpx_sw_bytes sw_reserved; };
X86_FXSR_MAGIC  macro  arch/x86/include/asm/sigcontext.h  99  #define X86_FXSR_MAGIC 0x0000
sigcontext  struct  arch/x86/include/asm/sigcontext.h  232  struct sigcontext { __u64 r8; __u64 r9; __u64 r10; __u64 r11; __u64 r12; __u64 r13; __u64 r14; __u64 r15; __u64 rdi; __u64 rsi; __u64 rbp; __u64 rbx; __u64 rdx; __u64 rax; __u64 rcx; __u64 rsp; __u64 rip; __u64 eflags; __u16 cs; __u16 gs; __u16 fs; __u16 __pad0; __u64 err; __u64 trapno; __u64 oldmask; __u64 cr2; struct _fpstate __user *fpstate; __u32 __fpstate_pad; __u64 reserved1[8]; };
_xsave_hdr  struct  arch/x86/include/asm/sigcontext.h  269  struct _xsave_hdr { __u64 xstate_bv; __u64 reserved1[2]; __u64 reserved2[5]; };
_ymmh_state  struct  arch/x86/include/asm/sigcontext.h  275  struct _ymmh_state { __u32 ymmh_space[64]; };
_xstate  struct  arch/x86/include/asm/sigcontext.h  286  struct _xstate { struct _fpstate fpstate; struct _xsave_hdr xstate_hdr; struct _ymmh_state ymmh; };
_ASM_X86_CPUFEATURE_H  macro  arch/x86/include/asm/cpufeature.h  5  #define _ASM_X86_CPUFEATURE_H
NCAPINTS  macro  arch/x86/include/asm/cpufeature.h  9  #define NCAPINTS 10
X86_FEATURE_FPU  macro  arch/x86/include/asm/cpufeature.h  18  #define X86_FEATURE_FPU (0*32+ 0)
X86_FEATURE_VME  macro  arch/x86/include/asm/cpufeature.h  19  #define X86_FEATURE_VME (0*32+ 1)
X86_FEATURE_DE  macro  arch/x86/include/asm/cpufeature.h  20  #define X86_FEATURE_DE (0*32+ 2)
X86_FEATURE_PSE  macro  arch/x86/include/asm/cpufeature.h  21  #define X86_FEATURE_PSE (0*32+ 3)
X86_FEATURE_TSC  macro  arch/x86/include/asm/cpufeature.h  22  #define X86_FEATURE_TSC (0*32+ 4)
X86_FEATURE_MSR  macro  arch/x86/include/asm/cpufeature.h  23  #define X86_FEATURE_MSR (0*32+ 5)
X86_FEATURE_PAE  macro  arch/x86/include/asm/cpufeature.h  24  #define X86_FEATURE_PAE (0*32+ 6)
X86_FEATURE_MCE  macro  arch/x86/include/asm/cpufeature.h  25  #define X86_FEATURE_MCE (0*32+ 7)
X86_FEATURE_CX8  macro  arch/x86/include/asm/cpufeature.h  26  #define X86_FEATURE_CX8 (0*32+ 8)
X86_FEATURE_APIC  macro  arch/x86/include/asm/cpufeature.h  27  #define X86_FEATURE_APIC (0*32+ 9)
X86_FEATURE_SEP  macro  arch/x86/include/asm/cpufeature.h  28  #define X86_FEATURE_SEP (0*32+11)
X86_FEATURE_MTRR  macro  arch/x86/include/asm/cpufeature.h  29  #define X86_FEATURE_MTRR (0*32+12)
X86_FEATURE_PGE  macro  arch/x86/include/asm/cpufeature.h  30  #define X86_FEATURE_PGE (0*32+13)
X86_FEATURE_MCA  macro  arch/x86/include/asm/cpufeature.h  31  #define X86_FEATURE_MCA (0*32+14)
X86_FEATURE_CMOV  macro  arch/x86/include/asm/cpufeature.h  32  #define X86_FEATURE_CMOV (0*32+15)
X86_FEATURE_PAT  macro  arch/x86/include/asm/cpufeature.h  34  #define X86_FEATURE_PAT (0*32+16)
X86_FEATURE_PSE36  macro  arch/x86/include/asm/cpufeature.h  35  #define X86_FEATURE_PSE36 (0*32+17)
X86_FEATURE_PN  macro  arch/x86/include/asm/cpufeature.h  36  #define X86_FEATURE_PN (0*32+18)
X86_FEATURE_CLFLSH  macro  arch/x86/include/asm/cpufeature.h  37  #define X86_FEATURE_CLFLSH (0*32+19)
X86_FEATURE_DS  macro  arch/x86/include/asm/cpufeature.h  38  #define X86_FEATURE_DS (0*32+21)
X86_FEATURE_ACPI  macro  arch/x86/include/asm/cpufeature.h  39  #define X86_FEATURE_ACPI (0*32+22)
X86_FEATURE_MMX  macro  arch/x86/include/asm/cpufeature.h  40  #define X86_FEATURE_MMX (0*32+23)
X86_FEATURE_FXSR  macro  arch/x86/include/asm/cpufeature.h  41  #define X86_FEATURE_FXSR (0*32+24)
X86_FEATURE_XMM  macro  arch/x86/include/asm/cpufeature.h  42  #define X86_FEATURE_XMM (0*32+25)
X86_FEATURE_XMM2  macro  arch/x86/include/asm/cpufeature.h  43  #define X86_FEATURE_XMM2 (0*32+26)
X86_FEATURE_SELFSNOOP  macro  arch/x86/include/asm/cpufeature.h  44  #define X86_FEATURE_SELFSNOOP (0*32+27)
X86_FEATURE_HT  macro  arch/x86/include/asm/cpufeature.h  45  #define X86_FEATURE_HT (0*32+28)
X86_FEATURE_ACC  macro  arch/x86/include/asm/cpufeature.h  46  #define X86_FEATURE_ACC (0*32+29)
X86_FEATURE_IA64  macro  arch/x86/include/asm/cpufeature.h  47  #define X86_FEATURE_IA64 (0*32+30)
X86_FEATURE_PBE  macro  arch/x86/include/asm/cpufeature.h  48  #define X86_FEATURE_PBE (0*32+31)
X86_FEATURE_SYSCALL  macro  arch/x86/include/asm/cpufeature.h  52  #define X86_FEATURE_SYSCALL (1*32+11)
X86_FEATURE_MP  macro  arch/x86/include/asm/cpufeature.h  53  #define X86_FEATURE_MP (1*32+19)
X86_FEATURE_NX  macro  arch/x86/include/asm/cpufeature.h  54  #define X86_FEATURE_NX (1*32+20)
X86_FEATURE_MMXEXT  macro  arch/x86/include/asm/cpufeature.h  55  #define X86_FEATURE_MMXEXT (1*32+22)
X86_FEATURE_FXSR_OPT  macro  arch/x86/include/asm/cpufeature.h  56  #define X86_FEATURE_FXSR_OPT (1*32+25)
X86_FEATURE_GBPAGES  macro  arch/x86/include/asm/cpufeature.h  57  #define X86_FEATURE_GBPAGES (1*32+26)
X86_FEATURE_RDTSCP  macro  arch/x86/include/asm/cpufeature.h  58  #define X86_FEATURE_RDTSCP (1*32+27)
X86_FEATURE_LM  macro  arch/x86/include/asm/cpufeature.h  59  #define X86_FEATURE_LM (1*32+29)
X86_FEATURE_3DNOWEXT  macro  arch/x86/include/asm/cpufeature.h  60  #define X86_FEATURE_3DNOWEXT (1*32+30)
X86_FEATURE_3DNOW  macro  arch/x86/include/asm/cpufeature.h  61  #define X86_FEATURE_3DNOW (1*32+31)
X86_FEATURE_RECOVERY  macro  arch/x86/include/asm/cpufeature.h  64  #define X86_FEATURE_RECOVERY (2*32+ 0)
X86_FEATURE_LONGRUN  macro  arch/x86/include/asm/cpufeature.h  65  #define X86_FEATURE_LONGRUN (2*32+ 1)
X86_FEATURE_LRTI  macro  arch/x86/include/asm/cpufeature.h  66  #define X86_FEATURE_LRTI (2*32+ 3)
X86_FEATURE_CXMMX  macro  arch/x86/include/asm/cpufeature.h  70  #define X86_FEATURE_CXMMX (3*32+ 0)
X86_FEATURE_K6_MTRR  macro  arch/x86/include/asm/cpufeature.h  71  #define X86_FEATURE_K6_MTRR (3*32+ 1)
X86_FEATURE_CYRIX_ARR  macro  arch/x86/include/asm/cpufeature.h  72  #define X86_FEATURE_CYRIX_ARR (3*32+ 2)
X86_FEATURE_CENTAUR_MCR  macro  arch/x86/include/asm/cpufeature.h  73  #define X86_FEATURE_CENTAUR_MCR (3*32+ 3)
X86_FEATURE_K8  macro  arch/x86/include/asm/cpufeature.h  75  #define X86_FEATURE_K8 (3*32+ 4)
X86_FEATURE_K7  macro  arch/x86/include/asm/cpufeature.h  76  #define X86_FEATURE_K7 (3*32+ 5)
X86_FEATURE_P3  macro  arch/x86/include/asm/cpufeature.h  77  #define X86_FEATURE_P3 (3*32+ 6)
X86_FEATURE_P4  macro  arch/x86/include/asm/cpufeature.h  78  #define X86_FEATURE_P4 (3*32+ 7)
X86_FEATURE_CONSTANT_TSC  macro  arch/x86/include/asm/cpufeature.h  79  #define X86_FEATURE_CONSTANT_TSC (3*32+ 8)
X86_FEATURE_UP  macro  arch/x86/include/asm/cpufeature.h  80  #define X86_FEATURE_UP (3*32+ 9)
X86_FEATURE_FXSAVE_LEAK  macro  arch/x86/include/asm/cpufeature.h  81  #define X86_FEATURE_FXSAVE_LEAK (3*32+10)
X86_FEATURE_ARCH_PERFMON  macro  arch/x86/include/asm/cpufeature.h  82  #define X86_FEATURE_ARCH_PERFMON (3*32+11)
X86_FEATURE_PEBS  macro  arch/x86/include/asm/cpufeature.h  83  #define X86_FEATURE_PEBS (3*32+12)
X86_FEATURE_BTS  macro  arch/x86/include/asm/cpufeature.h  84  #define X86_FEATURE_BTS (3*32+13)
X86_FEATURE_SYSCALL32  macro  arch/x86/include/asm/cpufeature.h  85  #define X86_FEATURE_SYSCALL32 (3*32+14)
X86_FEATURE_SYSENTER32  macro  arch/x86/include/asm/cpufeature.h  86  #define X86_FEATURE_SYSENTER32 (3*32+15)
X86_FEATURE_REP_GOOD  macro  arch/x86/include/asm/cpufeature.h  87  #define X86_FEATURE_REP_GOOD (3*32+16)
X86_FEATURE_MFENCE_RDTSC  macro  arch/x86/include/asm/cpufeature.h  88  #define X86_FEATURE_MFENCE_RDTSC (3*32+17)
X86_FEATURE_LFENCE_RDTSC  macro  arch/x86/include/asm/cpufeature.h  89  #define X86_FEATURE_LFENCE_RDTSC (3*32+18)
X86_FEATURE_11AP  macro  arch/x86/include/asm/cpufeature.h  90  #define X86_FEATURE_11AP (3*32+19)
X86_FEATURE_NOPL  macro  arch/x86/include/asm/cpufeature.h  91  #define X86_FEATURE_NOPL (3*32+20)
X86_FEATURE_XTOPOLOGY  macro  arch/x86/include/asm/cpufeature.h  93  #define X86_FEATURE_XTOPOLOGY (3*32+22)
X86_FEATURE_TSC_RELIABLE  macro  arch/x86/include/asm/cpufeature.h  94  #define X86_FEATURE_TSC_RELIABLE (3*32+23)
X86_FEATURE_NONSTOP_TSC  macro  arch/x86/include/asm/cpufeature.h  95  #define X86_FEATURE_NONSTOP_TSC (3*32+24)
X86_FEATURE_CLFLUSH_MONITOR  macro  arch/x86/include/asm/cpufeature.h  96  #define X86_FEATURE_CLFLUSH_MONITOR (3*32+25)
X86_FEATURE_EXTD_APICID  macro  arch/x86/include/asm/cpufeature.h  97  #define X86_FEATURE_EXTD_APICID (3*32+26)
X86_FEATURE_AMD_DCM  macro  arch/x86/include/asm/cpufeature.h  98  #define X86_FEATURE_AMD_DCM (3*32+27)
X86_FEATURE_APERFMPERF  macro  arch/x86/include/asm/cpufeature.h  99  #define X86_FEATURE_APERFMPERF (3*32+28)
X86_FEATURE_XMM3  macro  arch/x86/include/asm/cpufeature.h  102  #define X86_FEATURE_XMM3 (4*32+ 0)
X86_FEATURE_PCLMULQDQ  macro  arch/x86/include/asm/cpufeature.h  103  #define X86_FEATURE_PCLMULQDQ (4*32+ 1)
X86_FEATURE_DTES64  macro  arch/x86/include/asm/cpufeature.h  104  #define X86_FEATURE_DTES64 (4*32+ 2)
X86_FEATURE_MWAIT  macro  arch/x86/include/asm/cpufeature.h  105  #define X86_FEATURE_MWAIT (4*32+ 3)
X86_FEATURE_DSCPL  macro  arch/x86/include/asm/cpufeature.h  106  #define X86_FEATURE_DSCPL (4*32+ 4)
X86_FEATURE_VMX  macro  arch/x86/include/asm/cpufeature.h  107  #define X86_FEATURE_VMX (4*32+ 5)
X86_FEATURE_SMX  macro  arch/x86/include/asm/cpufeature.h  108  #define X86_FEATURE_SMX (4*32+ 6)
X86_FEATURE_EST  macro  arch/x86/include/asm/cpufeature.h  109  #define X86_FEATURE_EST (4*32+ 7)
X86_FEATURE_TM2  macro  arch/x86/include/asm/cpufeature.h  110  #define X86_FEATURE_TM2 (4*32+ 8)
X86_FEATURE_SSSE3  macro  arch/x86/include/asm/cpufeature.h  111  #define X86_FEATURE_SSSE3 (4*32+ 9)
X86_FEATURE_CID  macro  arch/x86/include/asm/cpufeature.h  112  #define X86_FEATURE_CID (4*32+10)
X86_FEATURE_FMA  macro  arch/x86/include/asm/cpufeature.h  113  #define X86_FEATURE_FMA (4*32+12)
X86_FEATURE_CX16  macro  arch/x86/include/asm/cpufeature.h  114  #define X86_FEATURE_CX16 (4*32+13)
X86_FEATURE_XTPR  macro  arch/x86/include/asm/cpufeature.h  115  #define X86_FEATURE_XTPR (4*32+14)
X86_FEATURE_PDCM  macro  arch/x86/include/asm/cpufeature.h  116  #define X86_FEATURE_PDCM (4*32+15)
X86_FEATURE_PCID  macro  arch/x86/include/asm/cpufeature.h  117  #define X86_FEATURE_PCID (4*32+17)
X86_FEATURE_DCA  macro  arch/x86/include/asm/cpufeature.h  118  #define X86_FEATURE_DCA (4*32+18)
X86_FEATURE_XMM4_1  macro  arch/x86/include/asm/cpufeature.h  119  #define X86_FEATURE_XMM4_1 (4*32+19)
X86_FEATURE_XMM4_2  macro  arch/x86/include/asm/cpufeature.h  120  #define X86_FEATURE_XMM4_2 (4*32+20)
X86_FEATURE_X2APIC  macro  arch/x86/include/asm/cpufeature.h  121  #define X86_FEATURE_X2APIC (4*32+21)
X86_FEATURE_MOVBE  macro  arch/x86/include/asm/cpufeature.h  122  #define X86_FEATURE_MOVBE (4*32+22)
X86_FEATURE_POPCNT  macro  arch/x86/include/asm/cpufeature.h  123  #define X86_FEATURE_POPCNT (4*32+23)
X86_FEATURE_TSC_DEADLINE_TIMER  macro  arch/x86/include/asm/cpufeature.h  124  #define X86_FEATURE_TSC_DEADLINE_TIMER (4*32+24)
X86_FEATURE_AES  macro  arch/x86/include/asm/cpufeature.h  125  #define X86_FEATURE_AES (4*32+25)
X86_FEATURE_XSAVE  macro  arch/x86/include/asm/cpufeature.h  126  #define X86_FEATURE_XSAVE (4*32+26)
X86_FEATURE_OSXSAVE  macro  arch/x86/include/asm/cpufeature.h  127  #define X86_FEATURE_OSXSAVE (4*32+27)
X86_FEATURE_AVX  macro  arch/x86/include/asm/cpufeature.h  128  #define X86_FEATURE_AVX (4*32+28)
X86_FEATURE_F16C  macro  arch/x86/include/asm/cpufeature.h  129  #define X86_FEATURE_F16C (4*32+29)
X86_FEATURE_RDRAND  macro  arch/x86/include/asm/cpufeature.h  130  #define X86_FEATURE_RDRAND (4*32+30)
X86_FEATURE_HYPERVISOR  macro  arch/x86/include/asm/cpufeature.h  131  #define X86_FEATURE_HYPERVISOR (4*32+31)
X86_FEATURE_XSTORE  macro  arch/x86/include/asm/cpufeature.h  134  #define X86_FEATURE_XSTORE (5*32+ 2)
X86_FEATURE_XSTORE_EN  macro  arch/x86/include/asm/cpufeature.h  135  #define X86_FEATURE_XSTORE_EN (5*32+ 3)
X86_FEATURE_XCRYPT  macro  arch/x86/include/asm/cpufeature.h  136  #define X86_FEATURE_XCRYPT (5*32+ 6)
X86_FEATURE_XCRYPT_EN  macro  arch/x86/include/asm/cpufeature.h  137  #define X86_FEATURE_XCRYPT_EN (5*32+ 7)
X86_FEATURE_ACE2  macro  arch/x86/include/asm/cpufeature.h  138  #define X86_FEATURE_ACE2 (5*32+ 8)
X86_FEATURE_ACE2_EN  macro  arch/x86/include/asm/cpufeature.h  139  #define X86_FEATURE_ACE2_EN (5*32+ 9)
X86_FEATURE_PHE  macro  arch/x86/include/asm/cpufeature.h  140  #define X86_FEATURE_PHE (5*32+10)
X86_FEATURE_PHE_EN  macro  arch/x86/include/asm/cpufeature.h  141  #define X86_FEATURE_PHE_EN (5*32+11)
X86_FEATURE_PMM  macro  arch/x86/include/asm/cpufeature.h  142  #define X86_FEATURE_PMM (5*32+12)
X86_FEATURE_PMM_EN  macro  arch/x86/include/asm/cpufeature.h  143  #define X86_FEATURE_PMM_EN (5*32+13)
X86_FEATURE_LAHF_LM  macro  arch/x86/include/asm/cpufeature.h  146  #define X86_FEATURE_LAHF_LM (6*32+ 0)
X86_FEATURE_CMP_LEGACY  macro  arch/x86/include/asm/cpufeature.h  147  #define X86_FEATURE_CMP_LEGACY (6*32+ 1)
X86_FEATURE_SVM  macro  arch/x86/include/asm/cpufeature.h  148  #define X86_FEATURE_SVM (6*32+ 2)
X86_FEATURE_EXTAPIC  macro  arch/x86/include/asm/cpufeature.h  149  #define X86_FEATURE_EXTAPIC (6*32+ 3)
X86_FEATURE_CR8_LEGACY  macro  arch/x86/include/asm/cpufeature.h  150  #define X86_FEATURE_CR8_LEGACY (6*32+ 4)
X86_FEATURE_ABM  macro  arch/x86/include/asm/cpufeature.h  151  #define X86_FEATURE_ABM (6*32+ 5)
X86_FEATURE_SSE4A  macro  arch/x86/include/asm/cpufeature.h  152  #define X86_FEATURE_SSE4A (6*32+ 6)
X86_FEATURE_MISALIGNSSE  macro  arch/x86/include/asm/cpufeature.h  153  #define X86_FEATURE_MISALIGNSSE (6*32+ 7)
X86_FEATURE_3DNOWPREFETCH  macro  arch/x86/include/asm/cpufeature.h  154  #define X86_FEATURE_3DNOWPREFETCH (6*32+ 8)
X86_FEATURE_OSVW  macro  arch/x86/include/asm/cpufeature.h  155  #define X86_FEATURE_OSVW (6*32+ 9)
X86_FEATURE_IBS  macro  arch/x86/include/asm/cpufeature.h  156  #define X86_FEATURE_IBS (6*32+10)
X86_FEATURE_XOP  macro  arch/x86/include/asm/cpufeature.h  157  #define X86_FEATURE_XOP (6*32+11)
X86_FEATURE_SKINIT  macro  arch/x86/include/asm/cpufeature.h  158  #define X86_FEATURE_SKINIT (6*32+12)
X86_FEATURE_WDT  macro  arch/x86/include/asm/cpufeature.h  159  #define X86_FEATURE_WDT (6*32+13)
X86_FEATURE_LWP  macro  arch/x86/include/asm/cpufeature.h  160  #define X86_FEATURE_LWP (6*32+15)
X86_FEATURE_FMA4  macro  arch/x86/include/asm/cpufeature.h  161  #define X86_FEATURE_FMA4 (6*32+16)
X86_FEATURE_TCE  macro  arch/x86/include/asm/cpufeature.h  162  #define X86_FEATURE_TCE (6*32+17)
X86_FEATURE_NODEID_MSR  macro  arch/x86/include/asm/cpufeature.h  163  #define X86_FEATURE_NODEID_MSR (6*32+19)
X86_FEATURE_TBM  macro  arch/x86/include/asm/cpufeature.h  164  #define X86_FEATURE_TBM (6*32+21)
X86_FEATURE_TOPOEXT  macro  arch/x86/include/asm/cpufeature.h  165  #define X86_FEATURE_TOPOEXT (6*32+22)
X86_FEATURE_PERFCTR_CORE  macro  arch/x86/include/asm/cpufeature.h  166  #define X86_FEATURE_PERFCTR_CORE (6*32+23)
X86_FEATURE_IDA  macro  arch/x86/include/asm/cpufeature.h  172  #define X86_FEATURE_IDA (7*32+ 0)
X86_FEATURE_ARAT  macro  arch/x86/include/asm/cpufeature.h  173  #define X86_FEATURE_ARAT (7*32+ 1)
X86_FEATURE_CPB  macro  arch/x86/include/asm/cpufeature.h  174  #define X86_FEATURE_CPB (7*32+ 2)
X86_FEATURE_EPB  macro  arch/x86/include/asm/cpufeature.h  175  #define X86_FEATURE_EPB (7*32+ 3)
X86_FEATURE_XSAVEOPT  macro  arch/x86/include/asm/cpufeature.h  176  #define X86_FEATURE_XSAVEOPT (7*32+ 4)
X86_FEATURE_PLN  macro  arch/x86/include/asm/cpufeature.h  177  #define X86_FEATURE_PLN (7*32+ 5)
X86_FEATURE_PTS  macro  arch/x86/include/asm/cpufeature.h  178  #define X86_FEATURE_PTS (7*32+ 6)
X86_FEATURE_DTHERM  macro  arch/x86/include/asm/cpufeature.h  179  #define X86_FEATURE_DTHERM (7*32+ 7)
X86_FEATURE_HW_PSTATE  macro  arch/x86/include/asm/cpufeature.h  180  #define X86_FEATURE_HW_PSTATE (7*32+ 8)
X86_FEATURE_TPR_SHADOW  macro  arch/x86/include/asm/cpufeature.h  183  #define X86_FEATURE_TPR_SHADOW (8*32+ 0)
X86_FEATURE_VNMI  macro  arch/x86/include/asm/cpufeature.h  184  #define X86_FEATURE_VNMI (8*32+ 1)
X86_FEATURE_FLEXPRIORITY  macro  arch/x86/include/asm/cpufeature.h  185  #define X86_FEATURE_FLEXPRIORITY (8*32+ 2)
X86_FEATURE_EPT  macro  arch/x86/include/asm/cpufeature.h  186  #define X86_FEATURE_EPT (8*32+ 3)
X86_FEATURE_VPID  macro  arch/x86/include/asm/cpufeature.h  187  #define X86_FEATURE_VPID (8*32+ 4)
X86_FEATURE_NPT  macro  arch/x86/include/asm/cpufeature.h  188  #define X86_FEATURE_NPT (8*32+ 5)
X86_FEATURE_LBRV  macro  arch/x86/include/asm/cpufeature.h  189  #define X86_FEATURE_LBRV (8*32+ 6)
X86_FEATURE_SVML  macro  arch/x86/include/asm/cpufeature.h  190  #define X86_FEATURE_SVML (8*32+ 7)
X86_FEATURE_NRIPS  macro  arch/x86/include/asm/cpufeature.h  191  #define X86_FEATURE_NRIPS (8*32+ 8)
X86_FEATURE_TSCRATEMSR  macro  arch/x86/include/asm/cpufeature.h  192  #define X86_FEATURE_TSCRATEMSR (8*32+ 9)
X86_FEATURE_VMCBCLEAN  macro  arch/x86/include/asm/cpufeature.h  193  #define X86_FEATURE_VMCBCLEAN (8*32+10)
X86_FEATURE_FLUSHBYASID  macro  arch/x86/include/asm/cpufeature.h  194  #define X86_FEATURE_FLUSHBYASID (8*32+11)
X86_FEATURE_DECODEASSISTS  macro  arch/x86/include/asm/cpufeature.h  195  #define X86_FEATURE_DECODEASSISTS (8*32+12)
X86_FEATURE_PAUSEFILTER  macro  arch/x86/include/asm/cpufeature.h  196  #define X86_FEATURE_PAUSEFILTER (8*32+13)
X86_FEATURE_PFTHRESHOLD  macro  arch/x86/include/asm/cpufeature.h  197  #define X86_FEATURE_PFTHRESHOLD (8*32+14)
X86_FEATURE_FSGSBASE  macro  arch/x86/include/asm/cpufeature.h  201  #define X86_FEATURE_FSGSBASE (9*32+ 0)
X86_FEATURE_BMI1  macro  arch/x86/include/asm/cpufeature.h  202  #define X86_FEATURE_BMI1 (9*32+ 3)
X86_FEATURE_HLE  macro  arch/x86/include/asm/cpufeature.h  203  #define X86_FEATURE_HLE (9*32+ 4)
X86_FEATURE_AVX2  macro  arch/x86/include/asm/cpufeature.h  204  #define X86_FEATURE_AVX2 (9*32+ 5)
X86_FEATURE_SMEP  macro  arch/x86/include/asm/cpufeature.h  205  #define X86_FEATURE_SMEP (9*32+ 7)
X86_FEATURE_BMI2  macro  arch/x86/include/asm/cpufeature.h  206  #define X86_FEATURE_BMI2 (9*32+ 8)
X86_FEATURE_ERMS  macro  arch/x86/include/asm/cpufeature.h  207  #define X86_FEATURE_ERMS (9*32+ 9)
X86_FEATURE_INVPCID  macro  arch/x86/include/asm/cpufeature.h  208  #define X86_FEATURE_INVPCID (9*32+10)
X86_FEATURE_RTM  macro  arch/x86/include/asm/cpufeature.h  209  #define X86_FEATURE_RTM (9*32+11)
test_cpu_cap  macro  arch/x86/include/asm/cpufeature.h  219  #define test_cpu_cap(c,bit) test_bit(bit, (unsigned long *)((c)->x86_capability))
REQUIRED_MASK_BIT_SET  macro  arch/x86/include/asm/cpufeature.h  222  #define REQUIRED_MASK_BIT_SET(bit) ( (((bit)>>5)==0 && (1UL<<((bit)&31) & REQUIRED_MASK0)) || (((bit)>>5)==1 && (1UL<<((bit)&31) & REQUIRED_MASK1)) || (((bit)>>5)==2 && (1UL<<((bit)&31) & REQUIRED_MASK2)) || (((bit)>>5)==3 && (1UL<<((bit)&31) & REQUIRED_MASK3)) || (((bit)>>5)==4 && (1UL<<((bit)&31) & REQUIRED_MASK4)) || (((bit)>>5)==5 && (1UL<<((bit)&31) & REQUIRED_MASK5)) || (((bit)>>5)==6 && (1UL<<((bit)&31) & REQUIRED_MASK6)) || (((bit)>>5)==7 && (1UL<<((bit)&31) & REQUIRED_MASK7)) || (((bit)>>5)==8 && (1UL<<((bit)&31) & REQUIRED_MASK8)) || (((bit)>>5)==9 && (1UL<<((bit)&31) & REQUIRED_MASK9)) )
cpu_has  macro  arch/x86/include/asm/cpufeature.h  234  #define cpu_has(c,bit) (__builtin_constant_p(bit) && REQUIRED_MASK_BIT_SET(bit) ? 1 : test_cpu_cap(c, bit))
this_cpu_has  macro  arch/x86/include/asm/cpufeature.h  238  #define this_cpu_has(bit) (__builtin_constant_p(bit) && REQUIRED_MASK_BIT_SET(bit) ? 1 : x86_this_cpu_test_bit(bit, (unsigned long *)&cpu_info.x86_capability))
boot_cpu_has  macro  arch/x86/include/asm/cpufeature.h  242  #define boot_cpu_has(bit) cpu_has(&boot_cpu_data,bit)
set_cpu_cap  macro  arch/x86/include/asm/cpufeature.h  244  #define set_cpu_cap(c,bit) set_bit(bit,(unsigned long *)((c)->x86_capability))
clear_cpu_cap  macro  arch/x86/include/asm/cpufeature.h  245  #define clear_cpu_cap(c,bit) clear_bit(bit,(unsigned long *)((c)->x86_capability))
setup_clear_cpu_cap  macro  arch/x86/include/asm/cpufeature.h  246  #define setup_clear_cpu_cap(bit) do { clear_cpu_cap(&boot_cpu_data, bit); set_bit(bit, (unsigned long *)cpu_caps_cleared); } while (0)
setup_force_cpu_cap  macro  arch/x86/include/asm/cpufeature.h  250  #define setup_force_cpu_cap(bit) do { set_cpu_cap(&boot_cpu_data, bit); set_bit(bit, (unsigned long *)cpu_caps_set); } while (0)
cpu_has_fpu  macro  arch/x86/include/asm/cpufeature.h  255  #define cpu_has_fpu boot_cpu_has(X86_FEATURE_FPU)
cpu_has_vme  macro  arch/x86/include/asm/cpufeature.h  316  #define cpu_has_vme 0
cpu_has_de  macro  arch/x86/include/asm/cpufeature.h  257  #define cpu_has_de boot_cpu_has(X86_FEATURE_DE)
cpu_has_pse  macro  arch/x86/include/asm/cpufeature.h  258  #define cpu_has_pse boot_cpu_has(X86_FEATURE_PSE)
cpu_has_tsc  macro  arch/x86/include/asm/cpufeature.h  259  #define cpu_has_tsc boot_cpu_has(X86_FEATURE_TSC)
cpu_has_pae  macro  arch/x86/include/asm/cpufeature.h  319  #define cpu_has_pae ___BUG___
cpu_has_pge  macro  arch/x86/include/asm/cpufeature.h  261  #define cpu_has_pge boot_cpu_has(X86_FEATURE_PGE)
cpu_has_apic  macro  arch/x86/include/asm/cpufeature.h  262  #define cpu_has_apic boot_cpu_has(X86_FEATURE_APIC)
cpu_has_sep  macro  arch/x86/include/asm/cpufeature.h  263  #define cpu_has_sep boot_cpu_has(X86_FEATURE_SEP)
cpu_has_mtrr  macro  arch/x86/include/asm/cpufeature.h  264  #define cpu_has_mtrr boot_cpu_has(X86_FEATURE_MTRR)
cpu_has_mmx  macro  arch/x86/include/asm/cpufeature.h  265  #define cpu_has_mmx boot_cpu_has(X86_FEATURE_MMX)
cpu_has_fxsr  macro  arch/x86/include/asm/cpufeature.h  266  #define cpu_has_fxsr boot_cpu_has(X86_FEATURE_FXSR)
cpu_has_xmm  macro  arch/x86/include/asm/cpufeature.h  267  #define cpu_has_xmm boot_cpu_has(X86_FEATURE_XMM)
cpu_has_xmm2  macro  arch/x86/include/asm/cpufeature.h  268  #define cpu_has_xmm2 boot_cpu_has(X86_FEATURE_XMM2)
cpu_has_xmm3  macro  arch/x86/include/asm/cpufeature.h  269  #define cpu_has_xmm3 boot_cpu_has(X86_FEATURE_XMM3)
cpu_has_ssse3  macro  arch/x86/include/asm/cpufeature.h  270  #define cpu_has_ssse3 boot_cpu_has(X86_FEATURE_SSSE3)
cpu_has_aes  macro  arch/x86/include/asm/cpufeature.h  271  #define cpu_has_aes boot_cpu_has(X86_FEATURE_AES)
cpu_has_avx  macro  arch/x86/include/asm/cpufeature.h  272  #define cpu_has_avx boot_cpu_has(X86_FEATURE_AVX)
cpu_has_ht  macro  arch/x86/include/asm/cpufeature.h  273  #define cpu_has_ht boot_cpu_has(X86_FEATURE_HT)
cpu_has_mp  macro  arch/x86/include/asm/cpufeature.h  322  #define cpu_has_mp 1
cpu_has_nx  macro  arch/x86/include/asm/cpufeature.h  275  #define cpu_has_nx boot_cpu_has(X86_FEATURE_NX)
cpu_has_k6_mtrr  macro  arch/x86/include/asm/cpufeature.h  325  #define cpu_has_k6_mtrr 0
cpu_has_cyrix_arr  macro  arch/x86/include/asm/cpufeature.h  328  #define cpu_has_cyrix_arr 0
cpu_has_centaur_mcr  macro  arch/x86/include/asm/cpufeature.h  331  #define cpu_has_centaur_mcr 0
cpu_has_xstore  macro  arch/x86/include/asm/cpufeature.h  279  #define cpu_has_xstore boot_cpu_has(X86_FEATURE_XSTORE)
cpu_has_xstore_enabled  macro  arch/x86/include/asm/cpufeature.h  280  #define cpu_has_xstore_enabled boot_cpu_has(X86_FEATURE_XSTORE_EN)
cpu_has_xcrypt  macro  arch/x86/include/asm/cpufeature.h  281  #define cpu_has_xcrypt boot_cpu_has(X86_FEATURE_XCRYPT)
cpu_has_xcrypt_enabled  macro  arch/x86/include/asm/cpufeature.h  282  #define cpu_has_xcrypt_enabled boot_cpu_has(X86_FEATURE_XCRYPT_EN)
cpu_has_ace2  macro  arch/x86/include/asm/cpufeature.h  283  #define cpu_has_ace2 boot_cpu_has(X86_FEATURE_ACE2)
cpu_has_ace2_enabled  macro  arch/x86/include/asm/cpufeature.h  284  #define cpu_has_ace2_enabled boot_cpu_has(X86_FEATURE_ACE2_EN)
cpu_has_phe  macro  arch/x86/include/asm/cpufeature.h  285  #define cpu_has_phe boot_cpu_has(X86_FEATURE_PHE)
cpu_has_phe_enabled  macro  arch/x86/include/asm/cpufeature.h  286  #define cpu_has_phe_enabled boot_cpu_has(X86_FEATURE_PHE_EN)
cpu_has_pmm  macro  arch/x86/include/asm/cpufeature.h  287  #define cpu_has_pmm boot_cpu_has(X86_FEATURE_PMM)
cpu_has_pmm_enabled  macro  arch/x86/include/asm/cpufeature.h  288  #define cpu_has_pmm_enabled boot_cpu_has(X86_FEATURE_PMM_EN)
cpu_has_ds  macro  arch/x86/include/asm/cpufeature.h  289  #define cpu_has_ds boot_cpu_has(X86_FEATURE_DS)
cpu_has_pebs  macro  arch/x86/include/asm/cpufeature.h  290  #define cpu_has_pebs boot_cpu_has(X86_FEATURE_PEBS)
cpu_has_clflush  macro  arch/x86/include/asm/cpufeature.h  291  #define cpu_has_clflush boot_cpu_has(X86_FEATURE_CLFLSH)
cpu_has_bts  macro  arch/x86/include/asm/cpufeature.h  292  #define cpu_has_bts boot_cpu_has(X86_FEATURE_BTS)
cpu_has_gbpages  macro  arch/x86/include/asm/cpufeature.h  293  #define cpu_has_gbpages boot_cpu_has(X86_FEATURE_GBPAGES)
cpu_has_arch_perfmon  macro  arch/x86/include/asm/cpufeature.h  294  #define cpu_has_arch_perfmon boot_cpu_has(X86_FEATURE_ARCH_PERFMON)
cpu_has_pat  macro  arch/x86/include/asm/cpufeature.h  295  #define cpu_has_pat boot_cpu_has(X86_FEATURE_PAT)
cpu_has_xmm4_1  macro  arch/x86/include/asm/cpufeature.h  296  #define cpu_has_xmm4_1 boot_cpu_has(X86_FEATURE_XMM4_1)
cpu_has_xmm4_2  macro  arch/x86/include/asm/cpufeature.h  297  #define cpu_has_xmm4_2 boot_cpu_has(X86_FEATURE_XMM4_2)
cpu_has_x2apic  macro  arch/x86/include/asm/cpufeature.h  298  #define cpu_has_x2apic boot_cpu_has(X86_FEATURE_X2APIC)
cpu_has_xsave  macro  arch/x86/include/asm/cpufeature.h  299  #define cpu_has_xsave boot_cpu_has(X86_FEATURE_XSAVE)
cpu_has_osxsave  macro  arch/x86/include/asm/cpufeature.h  300  #define cpu_has_osxsave boot_cpu_has(X86_FEATURE_OSXSAVE)
cpu_has_hypervisor  macro  arch/x86/include/asm/cpufeature.h  301  #define cpu_has_hypervisor boot_cpu_has(X86_FEATURE_HYPERVISOR)
cpu_has_pclmulqdq  macro  arch/x86/include/asm/cpufeature.h  302  #define cpu_has_pclmulqdq boot_cpu_has(X86_FEATURE_PCLMULQDQ)
cpu_has_perfctr_core  macro  arch/x86/include/asm/cpufeature.h  303  #define cpu_has_perfctr_core boot_cpu_has(X86_FEATURE_PERFCTR_CORE)
cpu_has_cx8  macro  arch/x86/include/asm/cpufeature.h  304  #define cpu_has_cx8 boot_cpu_has(X86_FEATURE_CX8)
cpu_has_cx16  macro  arch/x86/include/asm/cpufeature.h  305  #define cpu_has_cx16 boot_cpu_has(X86_FEATURE_CX16)
cpu_has_invlpg  macro  arch/x86/include/asm/cpufeature.h  310  # define cpu_has_invlpg (boot_cpu_data.x86 > 3)
__static_cpu_has  function  arch/x86/include/asm/cpufeature.h  342  static __always_inline __pure bool __static_cpu_has(u16 bit)
static_cpu_has  macro  arch/x86/include/asm/cpufeature.h  395  #define static_cpu_has(bit) boot_cpu_has(bit)
_ASM_X86_PGTABLE_DEFS_H  macro  arch/x86/include/asm/pgtable_types.h  2  #define _ASM_X86_PGTABLE_DEFS_H
FIRST_USER_ADDRESS  macro  arch/x86/include/asm/pgtable_types.h  7  #define FIRST_USER_ADDRESS 0
_PAGE_BIT_PRESENT  macro  arch/x86/include/asm/pgtable_types.h  9  #define _PAGE_BIT_PRESENT 0
_PAGE_BIT_RW  macro  arch/x86/include/asm/pgtable_types.h  10  #define _PAGE_BIT_RW 1
_PAGE_BIT_USER  macro  arch/x86/include/asm/pgtable_types.h  11  #define _PAGE_BIT_USER 2
_PAGE_BIT_PWT  macro  arch/x86/include/asm/pgtable_types.h  12  #define _PAGE_BIT_PWT 3
_PAGE_BIT_PCD  macro  arch/x86/include/asm/pgtable_types.h  13  #define _PAGE_BIT_PCD 4
_PAGE_BIT_ACCESSED  macro  arch/x86/include/asm/pgtable_types.h  14  #define _PAGE_BIT_ACCESSED 5
_PAGE_BIT_DIRTY  macro  arch/x86/include/asm/pgtable_types.h  15  #define _PAGE_BIT_DIRTY 6
_PAGE_BIT_PSE  macro  arch/x86/include/asm/pgtable_types.h  16  #define _PAGE_BIT_PSE 7
_PAGE_BIT_PAT  macro  arch/x86/include/asm/pgtable_types.h  17  #define _PAGE_BIT_PAT 7
_PAGE_BIT_GLOBAL  macro  arch/x86/include/asm/pgtable_types.h  18  #define _PAGE_BIT_GLOBAL 8
_PAGE_BIT_UNUSED1  macro  arch/x86/include/asm/pgtable_types.h  19  #define _PAGE_BIT_UNUSED1 9
_PAGE_BIT_IOMAP  macro  arch/x86/include/asm/pgtable_types.h  20  #define _PAGE_BIT_IOMAP 10
_PAGE_BIT_HIDDEN  macro  arch/x86/include/asm/pgtable_types.h  21  #define _PAGE_BIT_HIDDEN 11
_PAGE_BIT_PAT_LARGE  macro  arch/x86/include/asm/pgtable_types.h  22  #define _PAGE_BIT_PAT_LARGE 12
_PAGE_BIT_SPECIAL  macro  arch/x86/include/asm/pgtable_types.h  23  #define _PAGE_BIT_SPECIAL _PAGE_BIT_UNUSED1
_PAGE_BIT_CPA_TEST  macro  arch/x86/include/asm/pgtable_types.h  24  #define _PAGE_BIT_CPA_TEST _PAGE_BIT_UNUSED1
_PAGE_BIT_SPLITTING  macro  arch/x86/include/asm/pgtable_types.h  25  #define _PAGE_BIT_SPLITTING _PAGE_BIT_UNUSED1
_PAGE_BIT_NX  macro  arch/x86/include/asm/pgtable_types.h  26  #define _PAGE_BIT_NX 63
_PAGE_BIT_PROTNONE  macro  arch/x86/include/asm/pgtable_types.h  30  #define _PAGE_BIT_PROTNONE _PAGE_BIT_GLOBAL
_PAGE_BIT_FILE  macro  arch/x86/include/asm/pgtable_types.h  32  #define _PAGE_BIT_FILE _PAGE_BIT_DIRTY
_PAGE_PRESENT  macro  arch/x86/include/asm/pgtable_types.h  34  #define _PAGE_PRESENT (_AT(pteval_t,1) << _PAGE_BIT_PRESENT)
_PAGE_RW  macro  arch/x86/include/asm/pgtable_types.h  35  #define _PAGE_RW (_AT(pteval_t,1) << _PAGE_BIT_RW)
_PAGE_USER  macro  arch/x86/include/asm/pgtable_types.h  36  #define _PAGE_USER (_AT(pteval_t,1) << _PAGE_BIT_USER)
_PAGE_PWT  macro  arch/x86/include/asm/pgtable_types.h  37  #define _PAGE_PWT (_AT(pteval_t,1) << _PAGE_BIT_PWT)
_PAGE_PCD  macro  arch/x86/include/asm/pgtable_types.h  38  #define _PAGE_PCD (_AT(pteval_t,1) << _PAGE_BIT_PCD)
_PAGE_ACCESSED  macro  arch/x86/include/asm/pgtable_types.h  39  #define _PAGE_ACCESSED (_AT(pteval_t,1) << _PAGE_BIT_ACCESSED)
_PAGE_DIRTY  macro  arch/x86/include/asm/pgtable_types.h  40  #define _PAGE_DIRTY (_AT(pteval_t,1) << _PAGE_BIT_DIRTY)
_PAGE_PSE  macro  arch/x86/include/asm/pgtable_types.h  41  #define _PAGE_PSE (_AT(pteval_t,1) << _PAGE_BIT_PSE)
_PAGE_GLOBAL  macro  arch/x86/include/asm/pgtable_types.h  42  #define _PAGE_GLOBAL (_AT(pteval_t,1) << _PAGE_BIT_GLOBAL)
_PAGE_UNUSED1  macro  arch/x86/include/asm/pgtable_types.h  43  #define _PAGE_UNUSED1 (_AT(pteval_t,1) << _PAGE_BIT_UNUSED1)
_PAGE_IOMAP  macro  arch/x86/include/asm/pgtable_types.h  44  #define _PAGE_IOMAP (_AT(pteval_t,1) << _PAGE_BIT_IOMAP)
_PAGE_PAT  macro  arch/x86/include/asm/pgtable_types.h  45  #define _PAGE_PAT (_AT(pteval_t,1) << _PAGE_BIT_PAT)
_PAGE_PAT_LARGE  macro  arch/x86/include/asm/pgtable_types.h  46  #define _PAGE_PAT_LARGE (_AT(pteval_t,1) << _PAGE_BIT_PAT_LARGE)
_PAGE_SPECIAL  macro  arch/x86/include/asm/pgtable_types.h  47  #define _PAGE_SPECIAL (_AT(pteval_t,1) << _PAGE_BIT_SPECIAL)
_PAGE_CPA_TEST  macro  arch/x86/include/asm/pgtable_types.h  48  #define _PAGE_CPA_TEST (_AT(pteval_t,1) << _PAGE_BIT_CPA_TEST)
_PAGE_SPLITTING  macro  arch/x86/include/asm/pgtable_types.h  49  #define _PAGE_SPLITTING (_AT(pteval_t,1) << _PAGE_BIT_SPLITTING)
__HAVE_ARCH_PTE_SPECIAL  macro  arch/x86/include/asm/pgtable_types.h  50  #define __HAVE_ARCH_PTE_SPECIAL
_PAGE_HIDDEN  macro  arch/x86/include/asm/pgtable_types.h  55  #define _PAGE_HIDDEN (_AT(pteval_t,0))
_PAGE_NX  macro  arch/x86/include/asm/pgtable_types.h  61  #define _PAGE_NX (_AT(pteval_t,0))
_PAGE_FILE  macro  arch/x86/include/asm/pgtable_types.h  64  #define _PAGE_FILE (_AT(pteval_t,1) << _PAGE_BIT_FILE)
_PAGE_PROTNONE  macro  arch/x86/include/asm/pgtable_types.h  65  #define _PAGE_PROTNONE (_AT(pteval_t,1) << _PAGE_BIT_PROTNONE)
_PAGE_TABLE  macro  arch/x86/include/asm/pgtable_types.h  67  #define _PAGE_TABLE (_PAGE_PRESENT | _PAGE_RW | _PAGE_USER | _PAGE_ACCESSED | _PAGE_DIRTY)
_KERNPG_TABLE  macro  arch/x86/include/asm/pgtable_types.h  69  #define _KERNPG_TABLE (_PAGE_PRESENT | _PAGE_RW | _PAGE_ACCESSED | _PAGE_DIRTY)
_PAGE_CHG_MASK  macro  arch/x86/include/asm/pgtable_types.h  73  #define _PAGE_CHG_MASK (PTE_PFN_MASK | _PAGE_PCD | _PAGE_PWT | _PAGE_SPECIAL | _PAGE_ACCESSED | _PAGE_DIRTY)
_HPAGE_CHG_MASK  macro  arch/x86/include/asm/pgtable_types.h  75  #define _HPAGE_CHG_MASK (_PAGE_CHG_MASK | _PAGE_PSE)
_PAGE_CACHE_MASK  macro  arch/x86/include/asm/pgtable_types.h  77  #define _PAGE_CACHE_MASK (_PAGE_PCD | _PAGE_PWT)
_PAGE_CACHE_WB  macro  arch/x86/include/asm/pgtable_types.h  78  #define _PAGE_CACHE_WB (0)
_PAGE_CACHE_WC  macro  arch/x86/include/asm/pgtable_types.h  79  #define _PAGE_CACHE_WC (_PAGE_PWT)
_PAGE_CACHE_UC_MINUS  macro  arch/x86/include/asm/pgtable_types.h  80  #define _PAGE_CACHE_UC_MINUS (_PAGE_PCD)
_PAGE_CACHE_UC  macro  arch/x86/include/asm/pgtable_types.h  81  #define _PAGE_CACHE_UC (_PAGE_PCD | _PAGE_PWT)
PAGE_NONE  macro  arch/x86/include/asm/pgtable_types.h  83  #define PAGE_NONE __pgprot(_PAGE_PROTNONE | _PAGE_ACCESSED)
PAGE_SHARED  macro  arch/x86/include/asm/pgtable_types.h  84  #define PAGE_SHARED __pgprot(_PAGE_PRESENT | _PAGE_RW | _PAGE_USER | _PAGE_ACCESSED | _PAGE_NX)
PAGE_SHARED_EXEC  macro  arch/x86/include/asm/pgtable_types.h  87  #define PAGE_SHARED_EXEC __pgprot(_PAGE_PRESENT | _PAGE_RW | _PAGE_USER | _PAGE_ACCESSED)
PAGE_COPY_NOEXEC  macro  arch/x86/include/asm/pgtable_types.h  89  #define PAGE_COPY_NOEXEC __pgprot(_PAGE_PRESENT | _PAGE_USER | _PAGE_ACCESSED | _PAGE_NX)
PAGE_COPY_EXEC  macro  arch/x86/include/asm/pgtable_types.h  91  #define PAGE_COPY_EXEC __pgprot(_PAGE_PRESENT | _PAGE_USER | _PAGE_ACCESSED)
PAGE_COPY  macro  arch/x86/include/asm/pgtable_types.h  93  #define PAGE_COPY PAGE_COPY_NOEXEC
PAGE_READONLY  macro  arch/x86/include/asm/pgtable_types.h  94  #define PAGE_READONLY __pgprot(_PAGE_PRESENT | _PAGE_USER | _PAGE_ACCESSED | _PAGE_NX)
PAGE_READONLY_EXEC  macro  arch/x86/include/asm/pgtable_types.h  96  #define PAGE_READONLY_EXEC __pgprot(_PAGE_PRESENT | _PAGE_USER | _PAGE_ACCESSED)
__PAGE_KERNEL_EXEC  macro  arch/x86/include/asm/pgtable_types.h  99  #define __PAGE_KERNEL_EXEC (_PAGE_PRESENT | _PAGE_RW | _PAGE_DIRTY | _PAGE_ACCESSED | _PAGE_GLOBAL)
__PAGE_KERNEL  macro  arch/x86/include/asm/pgtable_types.h  101  #define __PAGE_KERNEL (__PAGE_KERNEL_EXEC | _PAGE_NX)
__PAGE_KERNEL_RO  macro  arch/x86/include/asm/pgtable_types.h  103  #define __PAGE_KERNEL_RO (__PAGE_KERNEL & ~_PAGE_RW)
__PAGE_KERNEL_RX  macro  arch/x86/include/asm/pgtable_types.h  104  #define __PAGE_KERNEL_RX (__PAGE_KERNEL_EXEC & ~_PAGE_RW)
__PAGE_KERNEL_EXEC_NOCACHE  macro  arch/x86/include/asm/pgtable_types.h  105  #define __PAGE_KERNEL_EXEC_NOCACHE (__PAGE_KERNEL_EXEC | _PAGE_PCD | _PAGE_PWT)
__PAGE_KERNEL_WC  macro  arch/x86/include/asm/pgtable_types.h  106  #define __PAGE_KERNEL_WC (__PAGE_KERNEL | _PAGE_CACHE_WC)
__PAGE_KERNEL_NOCACHE  macro  arch/x86/include/asm/pgtable_types.h  107  #define __PAGE_KERNEL_NOCACHE (__PAGE_KERNEL | _PAGE_PCD | _PAGE_PWT)
__PAGE_KERNEL_UC_MINUS  macro  arch/x86/include/asm/pgtable_types.h  108  #define __PAGE_KERNEL_UC_MINUS (__PAGE_KERNEL | _PAGE_PCD)
__PAGE_KERNEL_VSYSCALL  macro  arch/x86/include/asm/pgtable_types.h  109  #define __PAGE_KERNEL_VSYSCALL (__PAGE_KERNEL_RX | _PAGE_USER)
__PAGE_KERNEL_VVAR  macro  arch/x86/include/asm/pgtable_types.h  110  #define __PAGE_KERNEL_VVAR (__PAGE_KERNEL_RO | _PAGE_USER)
__PAGE_KERNEL_VVAR_NOCACHE  macro  arch/x86/include/asm/pgtable_types.h  111  #define __PAGE_KERNEL_VVAR_NOCACHE (__PAGE_KERNEL_VVAR | _PAGE_PCD | _PAGE_PWT)
__PAGE_KERNEL_LARGE  macro  arch/x86/include/asm/pgtable_types.h  112  #define __PAGE_KERNEL_LARGE (__PAGE_KERNEL | _PAGE_PSE)
__PAGE_KERNEL_LARGE_NOCACHE  macro  arch/x86/include/asm/pgtable_types.h  113  #define __PAGE_KERNEL_LARGE_NOCACHE (__PAGE_KERNEL | _PAGE_CACHE_UC | _PAGE_PSE)
__PAGE_KERNEL_LARGE_EXEC  macro  arch/x86/include/asm/pgtable_types.h  114  #define __PAGE_KERNEL_LARGE_EXEC (__PAGE_KERNEL_EXEC | _PAGE_PSE)
__PAGE_KERNEL_IO  macro  arch/x86/include/asm/pgtable_types.h  116  #define __PAGE_KERNEL_IO (__PAGE_KERNEL | _PAGE_IOMAP)
__PAGE_KERNEL_IO_NOCACHE  macro  arch/x86/include/asm/pgtable_types.h  117  #define __PAGE_KERNEL_IO_NOCACHE (__PAGE_KERNEL_NOCACHE | _PAGE_IOMAP)
__PAGE_KERNEL_IO_UC_MINUS  macro  arch/x86/include/asm/pgtable_types.h  118  #define __PAGE_KERNEL_IO_UC_MINUS (__PAGE_KERNEL_UC_MINUS | _PAGE_IOMAP)
__PAGE_KERNEL_IO_WC  macro  arch/x86/include/asm/pgtable_types.h  119  #define __PAGE_KERNEL_IO_WC (__PAGE_KERNEL_WC | _PAGE_IOMAP)
PAGE_KERNEL  macro  arch/x86/include/asm/pgtable_types.h  121  #define PAGE_KERNEL __pgprot(__PAGE_KERNEL)
PAGE_KERNEL_RO  macro  arch/x86/include/asm/pgtable_types.h  122  #define PAGE_KERNEL_RO __pgprot(__PAGE_KERNEL_RO)
PAGE_KERNEL_EXEC  macro  arch/x86/include/asm/pgtable_types.h  123  #define PAGE_KERNEL_EXEC __pgprot(__PAGE_KERNEL_EXEC)
PAGE_KERNEL_RX  macro  arch/x86/include/asm/pgtable_types.h  124  #define PAGE_KERNEL_RX __pgprot(__PAGE_KERNEL_RX)
PAGE_KERNEL_WC  macro  arch/x86/include/asm/pgtable_types.h  125  #define PAGE_KERNEL_WC __pgprot(__PAGE_KERNEL_WC)
PAGE_KERNEL_NOCACHE  macro  arch/x86/include/asm/pgtable_types.h  126  #define PAGE_KERNEL_NOCACHE __pgprot(__PAGE_KERNEL_NOCACHE)
PAGE_KERNEL_UC_MINUS  macro  arch/x86/include/asm/pgtable_types.h  127  #define PAGE_KERNEL_UC_MINUS __pgprot(__PAGE_KERNEL_UC_MINUS)
PAGE_KERNEL_EXEC_NOCACHE  macro  arch/x86/include/asm/pgtable_types.h  128  #define PAGE_KERNEL_EXEC_NOCACHE __pgprot(__PAGE_KERNEL_EXEC_NOCACHE)
PAGE_KERNEL_LARGE  macro  arch/x86/include/asm/pgtable_types.h  129  #define PAGE_KERNEL_LARGE __pgprot(__PAGE_KERNEL_LARGE)
PAGE_KERNEL_LARGE_NOCACHE  macro  arch/x86/include/asm/pgtable_types.h  130  #define PAGE_KERNEL_LARGE_NOCACHE __pgprot(__PAGE_KERNEL_LARGE_NOCACHE)
PAGE_KERNEL_LARGE_EXEC  macro  arch/x86/include/asm/pgtable_types.h  131  #define PAGE_KERNEL_LARGE_EXEC __pgprot(__PAGE_KERNEL_LARGE_EXEC)
PAGE_KERNEL_VSYSCALL  macro  arch/x86/include/asm/pgtable_types.h  132  #define PAGE_KERNEL_VSYSCALL __pgprot(__PAGE_KERNEL_VSYSCALL)
PAGE_KERNEL_VVAR  macro  arch/x86/include/asm/pgtable_types.h  133  #define PAGE_KERNEL_VVAR __pgprot(__PAGE_KERNEL_VVAR)
PAGE_KERNEL_VVAR_NOCACHE  macro  arch/x86/include/asm/pgtable_types.h  134  #define PAGE_KERNEL_VVAR_NOCACHE __pgprot(__PAGE_KERNEL_VVAR_NOCACHE)
PAGE_KERNEL_IO  macro  arch/x86/include/asm/pgtable_types.h  136  #define PAGE_KERNEL_IO __pgprot(__PAGE_KERNEL_IO)
PAGE_KERNEL_IO_NOCACHE  macro  arch/x86/include/asm/pgtable_types.h  137  #define PAGE_KERNEL_IO_NOCACHE __pgprot(__PAGE_KERNEL_IO_NOCACHE)
PAGE_KERNEL_IO_UC_MINUS  macro  arch/x86/include/asm/pgtable_types.h  138  #define PAGE_KERNEL_IO_UC_MINUS __pgprot(__PAGE_KERNEL_IO_UC_MINUS)
PAGE_KERNEL_IO_WC  macro  arch/x86/include/asm/pgtable_types.h  139  #define PAGE_KERNEL_IO_WC __pgprot(__PAGE_KERNEL_IO_WC)
__P000  macro  arch/x86/include/asm/pgtable_types.h  142  #define __P000 PAGE_NONE
__P001  macro  arch/x86/include/asm/pgtable_types.h  143  #define __P001 PAGE_READONLY
__P010  macro  arch/x86/include/asm/pgtable_types.h  144  #define __P010 PAGE_COPY
__P011  macro  arch/x86/include/asm/pgtable_types.h  145  #define __P011 PAGE_COPY
__P100  macro  arch/x86/include/asm/pgtable_types.h  146  #define __P100 PAGE_READONLY_EXEC
__P101  macro  arch/x86/include/asm/pgtable_types.h  147  #define __P101 PAGE_READONLY_EXEC
__P110  macro  arch/x86/include/asm/pgtable_types.h  148  #define __P110 PAGE_COPY_EXEC
__P111  macro  arch/x86/include/asm/pgtable_types.h  149  #define __P111 PAGE_COPY_EXEC
__S000  macro  arch/x86/include/asm/pgtable_types.h  151  #define __S000 PAGE_NONE
__S001  macro  arch/x86/include/asm/pgtable_types.h  152  #define __S001 PAGE_READONLY
__S010  macro  arch/x86/include/asm/pgtable_types.h  153  #define __S010 PAGE_SHARED
__S011  macro  arch/x86/include/asm/pgtable_types.h  154  #define __S011 PAGE_SHARED
__S100  macro  arch/x86/include/asm/pgtable_types.h  155  #define __S100 PAGE_READONLY_EXEC
__S101  macro  arch/x86/include/asm/pgtable_types.h  156  #define __S101 PAGE_READONLY_EXEC
__S110  macro  arch/x86/include/asm/pgtable_types.h  157  #define __S110 PAGE_SHARED_EXEC
__S111  macro  arch/x86/include/asm/pgtable_types.h  158  #define __S111 PAGE_SHARED_EXEC
__PAGE_KERNEL_IDENT_LARGE_EXEC  macro  arch/x86/include/asm/pgtable_types.h  164  #define __PAGE_KERNEL_IDENT_LARGE_EXEC __PAGE_KERNEL_LARGE_EXEC
PTE_IDENT_ATTR  macro  arch/x86/include/asm/pgtable_types.h  171  #define PTE_IDENT_ATTR 0x003
PDE_IDENT_ATTR  macro  arch/x86/include/asm/pgtable_types.h  172  #define PDE_IDENT_ATTR 0x067
PGD_IDENT_ATTR  macro  arch/x86/include/asm/pgtable_types.h  173  #define PGD_IDENT_ATTR 0x001
PTE_PFN_MASK  macro  arch/x86/include/asm/pgtable_types.h  187  #define PTE_PFN_MASK ((pteval_t)PHYSICAL_PAGE_MASK)
PTE_FLAGS_MASK  macro  arch/x86/include/asm/pgtable_types.h  190  #define PTE_FLAGS_MASK (~PTE_PFN_MASK)
pgprot  struct  arch/x86/include/asm/pgtable_types.h  192  typedef struct pgprot { pgprotval_t pgprot; } pgprot_t;
pgprot_t  struct  arch/x86/include/asm/pgtable_types.h  192  typedef struct pgprot { pgprotval_t pgprot; } pgprot_t;
pgd_t  struct  arch/x86/include/asm/pgtable_types.h  194  typedef struct { pgdval_t pgd; } pgd_t;
native_make_pgd  function  arch/x86/include/asm/pgtable_types.h  196  static inline pgd_t native_make_pgd(pgdval_t val)
native_pgd_val  function  arch/x86/include/asm/pgtable_types.h  201  static inline pgdval_t native_pgd_val(pgd_t pgd)
pgd_flags  function  arch/x86/include/asm/pgtable_types.h  206  static inline pgdval_t pgd_flags(pgd_t pgd)
pud_t  struct  arch/x86/include/asm/pgtable_types.h  212  typedef struct { pudval_t pud; } pud_t;
native_make_pud  function  arch/x86/include/asm/pgtable_types.h  214  static inline pud_t native_make_pud(pmdval_t val)
native_pud_val  function  arch/x86/include/asm/pgtable_types.h  226  static inline pudval_t native_pud_val(pud_t pud)
pmd_t  struct  arch/x86/include/asm/pgtable_types.h  233  typedef struct { pmdval_t pmd; } pmd_t;
native_make_pmd  function  arch/x86/include/asm/pgtable_types.h  235  static inline pmd_t native_make_pmd(pmdval_t val)
native_pmd_val  function  arch/x86/include/asm/pgtable_types.h  247  static inline pmdval_t native_pmd_val(pmd_t pmd)
pud_flags  function  arch/x86/include/asm/pgtable_types.h  253  static inline pudval_t pud_flags(pud_t pud)
pmd_flags  function  arch/x86/include/asm/pgtable_types.h  258  static inline pmdval_t pmd_flags(pmd_t pmd)
native_make_pte  function  arch/x86/include/asm/pgtable_types.h  263  static inline pte_t native_make_pte(pteval_t val)
native_pte_val  function  arch/x86/include/asm/pgtable_types.h  268  static inline pteval_t native_pte_val(pte_t pte)
pte_flags  function  arch/x86/include/asm/pgtable_types.h  273  static inline pteval_t pte_flags(pte_t pte)
pgprot_val  macro  arch/x86/include/asm/pgtable_types.h  278  #define pgprot_val(x) ((x).pgprot)
__pgprot  macro  arch/x86/include/asm/pgtable_types.h  279  #define __pgprot(x) ((pgprot_t) { (x) } )
set_nx  prototype  arch/x86/include/asm/pgtable_types.h  285  extern void set_nx(void);
pgprot_writecombine  prototype  arch/x86/include/asm/pgtable_types.h  289  extern pgprot_t pgprot_writecombine(pgprot_t prot);
__HAVE_PFNMAP_TRACKING  macro  arch/x86/include/asm/pgtable_types.h  292  #define __HAVE_PFNMAP_TRACKING
__HAVE_PHYS_MEM_ACCESS_PROT  macro  arch/x86/include/asm/pgtable_types.h  294  #define __HAVE_PHYS_MEM_ACCESS_PROT
phys_mem_access_prot  prototype  arch/x86/include/asm/pgtable_types.h  296  pgprot_t phys_mem_access_prot(struct file *file,unsigned long pfn,unsigned long size, pgprot_t vma_prot);
phys_mem_access_prot_allowed  prototype  arch/x86/include/asm/pgtable_types.h  298  int phys_mem_access_prot_allowed(struct file *file,unsigned long pfn,unsigned long size, pgprot_t *vma_prot);
set_pte_vaddr  prototype  arch/x86/include/asm/pgtable_types.h  302  void set_pte_vaddr(unsigned long vaddr,pte_t pte);
native_pagetable_reserve  prototype  arch/x86/include/asm/pgtable_types.h  304  extern void native_pagetable_reserve(u64 start,u64 end);
native_pagetable_setup_start  macro  arch/x86/include/asm/pgtable_types.h  309  #define native_pagetable_setup_start x86_init_pgd_noop
native_pagetable_setup_done  macro  arch/x86/include/asm/pgtable_types.h  310  #define native_pagetable_setup_done x86_init_pgd_noop
arch_report_meminfo  prototype  arch/x86/include/asm/pgtable_types.h  314  extern void arch_report_meminfo(struct seq_file *m);
update_page_count  function  arch/x86/include/asm/pgtable_types.h  327  static inline void update_page_count(int level,unsigned long pages) { }
lookup_address  prototype  arch/x86/include/asm/pgtable_types.h  336  extern pte_t *lookup_address(unsigned long address,unsigned int *level);
_ASM_X86_MSR_H  macro  arch/x86/include/asm/msr.h  2  #define _ASM_X86_MSR_H
X86_IOC_RDMSR_REGS  macro  arch/x86/include/asm/msr.h  11  #define X86_IOC_RDMSR_REGS _IOWR('c',0xA0,__u32[8])
X86_IOC_WRMSR_REGS  macro  arch/x86/include/asm/msr.h  12  #define X86_IOC_WRMSR_REGS _IOWR('c',0xA1,__u32[8])
msr  struct  arch/x86/include/asm/msr.h  20  struct msr { u32 l; u32 h; }; u64 q; };
msr_info  struct  arch/x86/include/asm/msr.h  30  struct msr_info { u32 msr_no; struct msr reg; struct msr *msrs; int err; };
msr_regs_info  struct  arch/x86/include/asm/msr.h  37  struct msr_regs_info { u32 *regs; int err; };
native_read_tscp  function  arch/x86/include/asm/msr.h  42  static inline unsigned long long native_read_tscp(unsigned int *aux)
DECLARE_ARGS  macro  arch/x86/include/asm/msr.h  62  #define DECLARE_ARGS(val,low,high) unsigned long long val
EAX_EDX_VAL  macro  arch/x86/include/asm/msr.h  63  #define EAX_EDX_VAL(val,low,high) (val)
EAX_EDX_ARGS  macro  arch/x86/include/asm/msr.h  64  #define EAX_EDX_ARGS(val,low,high) "A" (val)
EAX_EDX_RET  macro  arch/x86/include/asm/msr.h  65  #define EAX_EDX_RET(val,low,high) "=A" (val)
native_read_msr  function  arch/x86/include/asm/msr.h  68  static inline unsigned long long native_read_msr(unsigned int msr)
native_read_msr_safe  function  arch/x86/include/asm/msr.h  76  static inline unsigned long long native_read_msr_safe(unsigned int msr,int *err)
native_write_msr  function  arch/x86/include/asm/msr.h  92  static inline void native_write_msr(unsigned int msr,unsigned low, unsigned high)
native_write_msr_safe  function  arch/x86/include/asm/msr.h  99  notrace static inline int native_write_msr_safe(unsigned int msr,unsigned low, unsigned high)
native_read_tsc  prototype  arch/x86/include/asm/msr.h  116  extern unsigned long long native_read_tsc(void);
native_rdmsr_safe_regs  prototype  arch/x86/include/asm/msr.h  118  extern int native_rdmsr_safe_regs(u32 regs[8]);
native_wrmsr_safe_regs  prototype  arch/x86/include/asm/msr.h  119  extern int native_wrmsr_safe_regs(u32 regs[8]);
__native_read_tsc  function  arch/x86/include/asm/msr.h  121  static __always_inline unsigned long long __native_read_tsc(void)
native_read_pmc  function  arch/x86/include/asm/msr.h  130  static inline unsigned long long native_read_pmc(int counter)
rdmsr  macro  arch/x86/include/asm/paravirt.h  147  #define rdmsr(msr,val1,val2) do { int _err; u64 _l = paravirt_read_msr(msr, &_err); val1 = (u32)_l; val2 = _l >> 32; } while (0)
wrmsr  macro  arch/x86/include/asm/paravirt.h  155  #define wrmsr(msr,val1,val2) do { paravirt_write_msr(msr, val1, val2); } while (0)
rdmsrl  macro  arch/x86/include/asm/paravirt.h  160  #define rdmsrl(msr,val) do { int _err; val = paravirt_read_msr(msr, &_err); } while (0)
wrmsrl  macro  arch/x86/include/asm/paravirt.h  166  #define wrmsrl(msr,val) wrmsr(msr,(u32)((u64)(val)),((u64)(val))>>32)
wrmsr_safe  macro  arch/x86/include/asm/paravirt.h  167  #define wrmsr_safe(msr,a,b) paravirt_write_msr(msr,a,b)
rdmsr_safe  macro  arch/x86/include/asm/paravirt.h  170  #define rdmsr_safe(msr,a,b) ({ int _err; u64 _l = paravirt_read_msr(msr, &_err); (*a) = (u32)_l; (*b) = _l >> 32; _err; })
rdmsrl_safe  function  arch/x86/include/asm/paravirt.h  182  static inline int rdmsrl_safe(unsigned msr,unsigned long long *p)
rdmsrl_amd_safe  function  arch/x86/include/asm/paravirt.h  189  static inline int rdmsrl_amd_safe(unsigned msr,unsigned long long *p)
wrmsrl_amd_safe  function  arch/x86/include/asm/paravirt.h  204  static inline int wrmsrl_amd_safe(unsigned msr,unsigned long long val)
rdmsr_safe_regs  macro  arch/x86/include/asm/paravirt.h  179  #define rdmsr_safe_regs(regs) paravirt_rdmsr_regs(regs)
wrmsr_safe_regs  macro  arch/x86/include/asm/paravirt.h  180  #define wrmsr_safe_regs(regs) paravirt_wrmsr_regs(regs)
rdtscl  macro  arch/x86/include/asm/paravirt.h  221  #define rdtscl(low) do { u64 _l = paravirt_read_tsc(); low = (int)_l; } while (0)
rdtscll  macro  arch/x86/include/asm/paravirt.h  227  #define rdtscll(val) (val = paravirt_read_tsc())
rdpmc  macro  arch/x86/include/asm/paravirt.h  248  #define rdpmc(counter,low,high) do { u64 _l = paravirt_read_pmc(counter); low = (u32)_l; high = _l >> 32; } while (0)
rdtscp  macro  arch/x86/include/asm/paravirt.h  260  #define rdtscp(low,high,aux) do { int __aux; unsigned long __val = paravirt_rdtscp(&__aux); (low) = (u32)__val; (high) = (u32)(__val >> 32); (aux) = __aux; } while (0)
rdtscpll  macro  arch/x86/include/asm/paravirt.h  269  #define rdtscpll(val,aux) do { unsigned long __aux; val = paravirt_rdtscp(&__aux); (aux) = __aux; } while (0)
checking_wrmsrl  macro  arch/x86/include/asm/msr.h  252  #define checking_wrmsrl(msr,val) wrmsr_safe((msr),(u32)(val), (u32)((val) >> 32))
write_tsc  macro  arch/x86/include/asm/msr.h  255  #define write_tsc(val1,val2) wrmsr(MSR_IA32_TSC,(val1),(val2))
write_rdtscp_aux  macro  arch/x86/include/asm/msr.h  257  #define write_rdtscp_aux(val) wrmsr(MSR_TSC_AUX,(val),0)
msrs_alloc  prototype  arch/x86/include/asm/msr.h  259  struct msr *msrs_alloc(void);
msrs_free  prototype  arch/x86/include/asm/msr.h  260  void msrs_free(struct msr *msrs);
rdmsr_on_cpu  function  arch/x86/include/asm/msr.h  272  static inline int rdmsr_on_cpu(unsigned int cpu,u32 msr_no,u32 *l,u32 *h)
wrmsr_on_cpu  function  arch/x86/include/asm/msr.h  277  static inline int wrmsr_on_cpu(unsigned int cpu,u32 msr_no,u32 l,u32 h)
rdmsr_on_cpus  function  arch/x86/include/asm/msr.h  282  static inline void rdmsr_on_cpus(const struct cpumask *m,u32 msr_no,struct msr *msrs)
wrmsr_on_cpus  function  arch/x86/include/asm/msr.h  287  static inline void wrmsr_on_cpus(const struct cpumask *m,u32 msr_no,struct msr *msrs)
rdmsr_safe_on_cpu  function  arch/x86/include/asm/msr.h  292  static inline int rdmsr_safe_on_cpu(unsigned int cpu,u32 msr_no,u32 *l, u32 *h)
wrmsr_safe_on_cpu  function  arch/x86/include/asm/msr.h  297  static inline int wrmsr_safe_on_cpu(unsigned int cpu,u32 msr_no,u32 l,u32 h)
rdmsr_safe_regs_on_cpu  function  arch/x86/include/asm/msr.h  301  static inline int rdmsr_safe_regs_on_cpu(unsigned int cpu,u32 regs[8])
wrmsr_safe_regs_on_cpu  function  arch/x86/include/asm/msr.h  305  static inline int wrmsr_safe_regs_on_cpu(unsigned int cpu,u32 regs[8])
_ASM_X86_DESC_DEFS_H  macro  arch/x86/include/asm/desc_defs.h  3  #define _ASM_X86_DESC_DEFS_H
desc_struct  struct  arch/x86/include/asm/desc_defs.h  22  struct desc_struct { unsigned int a; unsigned int b; }; u16 limit0; u16 base0; unsigned base1: 8, type: 4, s: 1, dpl: 2, p: 1; unsigned limit: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8; }; unsigned limit: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8; }; unsigned limit: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8; }; unsigned limit: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8; }; unsigned limit: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8; }; unsigned limit: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8; }; } __attribute__((packed));
GDT_ENTRY_INIT  macro  arch/x86/include/asm/desc_defs.h  37  #define GDT_ENTRY_INIT(flags,base,limit) { { { .a = ((limit) & 0xffff) | (((base) & 0xffff) << 16), .b = (((base) & 0xff0000) >> 16) | (((flags) & 0xf0ff) << 8) | ((limit) & 0xf0000) | ((base) & 0xff000000), } } }
gate_struct64  struct  arch/x86/include/asm/desc_defs.h  51  struct gate_struct64 { u16 offset_low; u16 segment; unsigned ist : 3, zero0 : 5, type : 5, dpl : 2, p : 1; u16 offset_middle; u32 offset_high; u32 zero1; } __attribute__((packed));
PTR_LOW  macro  arch/x86/include/asm/desc_defs.h  60  #define PTR_LOW(x) ((unsigned long long)(x) & 0xFFFF)
PTR_MIDDLE  macro  arch/x86/include/asm/desc_defs.h  61  #define PTR_MIDDLE(x) (((unsigned long long)(x) >> 16) & 0xFFFF)
PTR_HIGH  macro  arch/x86/include/asm/desc_defs.h  62  #define PTR_HIGH(x) ((unsigned long long)(x) >> 32)
ldttss_desc64  struct  arch/x86/include/asm/desc_defs.h  71  struct ldttss_desc64 { u16 limit0; u16 base0; unsigned base1 : 8, type : 5, dpl : 2, p : 1; unsigned limit1 : 4, zero0 : 3, g : 1, base2 : 8; u32 base3; u32 zero1; } __attribute__((packed));
gate_offset  macro  arch/x86/include/asm/desc_defs.h  90  #define gate_offset(g) (((g).b & 0xffff0000) | ((g).a & 0x0000ffff))
gate_segment  macro  arch/x86/include/asm/desc_defs.h  91  #define gate_segment(g) ((g).a >> 16)
desc_ptr  struct  arch/x86/include/asm/desc_defs.h  94  struct desc_ptr { unsigned short size; unsigned long address; } __attribute__((packed)) ;
_ASM_X86_NOPS_H  macro  arch/x86/include/asm/nops.h  2  #define _ASM_X86_NOPS_H
NOP_DS_PREFIX  macro  arch/x86/include/asm/nops.h  10  #define NOP_DS_PREFIX 0x3e
GENERIC_NOP1  macro  arch/x86/include/asm/nops.h  22  #define GENERIC_NOP1 0x90
GENERIC_NOP2  macro  arch/x86/include/asm/nops.h  23  #define GENERIC_NOP2 0x89,0xf6
GENERIC_NOP3  macro  arch/x86/include/asm/nops.h  24  #define GENERIC_NOP3 0x8d,0x76,0x00
GENERIC_NOP4  macro  arch/x86/include/asm/nops.h  25  #define GENERIC_NOP4 0x8d,0x74,0x26,0x00
GENERIC_NOP5  macro  arch/x86/include/asm/nops.h  26  #define GENERIC_NOP5 GENERIC_NOP1,GENERIC_NOP4
GENERIC_NOP6  macro  arch/x86/include/asm/nops.h  27  #define GENERIC_NOP6 0x8d,0xb6,0x00,0x00,0x00,0x00
GENERIC_NOP7  macro  arch/x86/include/asm/nops.h  28  #define GENERIC_NOP7 0x8d,0xb4,0x26,0x00,0x00,0x00,0x00
GENERIC_NOP8  macro  arch/x86/include/asm/nops.h  29  #define GENERIC_NOP8 GENERIC_NOP1,GENERIC_NOP7
GENERIC_NOP5_ATOMIC  macro  arch/x86/include/asm/nops.h  30  #define GENERIC_NOP5_ATOMIC NOP_DS_PREFIX,GENERIC_NOP4
K8_NOP1  macro  arch/x86/include/asm/nops.h  38  #define K8_NOP1 GENERIC_NOP1
K8_NOP2  macro  arch/x86/include/asm/nops.h  39  #define K8_NOP2 0x66,K8_NOP1
K8_NOP3  macro  arch/x86/include/asm/nops.h  40  #define K8_NOP3 0x66,K8_NOP2
K8_NOP4  macro  arch/x86/include/asm/nops.h  41  #define K8_NOP4 0x66,K8_NOP3
K8_NOP5  macro  arch/x86/include/asm/nops.h  42  #define K8_NOP5 K8_NOP3,K8_NOP2
K8_NOP6  macro  arch/x86/include/asm/nops.h  43  #define K8_NOP6 K8_NOP3,K8_NOP3
K8_NOP7  macro  arch/x86/include/asm/nops.h  44  #define K8_NOP7 K8_NOP4,K8_NOP3
K8_NOP8  macro  arch/x86/include/asm/nops.h  45  #define K8_NOP8 K8_NOP4,K8_NOP4
K8_NOP5_ATOMIC  macro  arch/x86/include/asm/nops.h  46  #define K8_NOP5_ATOMIC 0x66,K8_NOP4
K7_NOP1  macro  arch/x86/include/asm/nops.h  57  #define K7_NOP1 GENERIC_NOP1
K7_NOP2  macro  arch/x86/include/asm/nops.h  58  #define K7_NOP2 0x8b,0xc0
K7_NOP3  macro  arch/x86/include/asm/nops.h  59  #define K7_NOP3 0x8d,0x04,0x20
K7_NOP4  macro  arch/x86/include/asm/nops.h  60  #define K7_NOP4 0x8d,0x44,0x20,0x00
K7_NOP5  macro  arch/x86/include/asm/nops.h  61  #define K7_NOP5 K7_NOP4,K7_NOP1
K7_NOP6  macro  arch/x86/include/asm/nops.h  62  #define K7_NOP6 0x8d,0x80,0,0,0,0
K7_NOP7  macro  arch/x86/include/asm/nops.h  63  #define K7_NOP7 0x8D,0x04,0x05,0,0,0,0
K7_NOP8  macro  arch/x86/include/asm/nops.h  64  #define K7_NOP8 K7_NOP7,K7_NOP1
K7_NOP5_ATOMIC  macro  arch/x86/include/asm/nops.h  65  #define K7_NOP5_ATOMIC NOP_DS_PREFIX,K7_NOP4
P6_NOP1  macro  arch/x86/include/asm/nops.h  80  #define P6_NOP1 GENERIC_NOP1
P6_NOP2  macro  arch/x86/include/asm/nops.h  81  #define P6_NOP2 0x66,0x90
P6_NOP3  macro  arch/x86/include/asm/nops.h  82  #define P6_NOP3 0x0f,0x1f,0x00
P6_NOP4  macro  arch/x86/include/asm/nops.h  83  #define P6_NOP4 0x0f,0x1f,0x40,0
P6_NOP5  macro  arch/x86/include/asm/nops.h  84  #define P6_NOP5 0x0f,0x1f,0x44,0x00,0
P6_NOP6  macro  arch/x86/include/asm/nops.h  85  #define P6_NOP6 0x66,0x0f,0x1f,0x44,0x00,0
P6_NOP7  macro  arch/x86/include/asm/nops.h  86  #define P6_NOP7 0x0f,0x1f,0x80,0,0,0,0
P6_NOP8  macro  arch/x86/include/asm/nops.h  87  #define P6_NOP8 0x0f,0x1f,0x84,0x00,0,0,0,0
P6_NOP5_ATOMIC  macro  arch/x86/include/asm/nops.h  88  #define P6_NOP5_ATOMIC P6_NOP5
_ASM_MK_NOP  macro  arch/x86/include/asm/nops.h  93  #define _ASM_MK_NOP(x) ".byte " __stringify(x) "\n"
ASM_NOP1  macro  arch/x86/include/asm/nops.h  127  #define ASM_NOP1 _ASM_MK_NOP(GENERIC_NOP1)
ASM_NOP2  macro  arch/x86/include/asm/nops.h  128  #define ASM_NOP2 _ASM_MK_NOP(GENERIC_NOP2)
ASM_NOP3  macro  arch/x86/include/asm/nops.h  129  #define ASM_NOP3 _ASM_MK_NOP(GENERIC_NOP3)
ASM_NOP4  macro  arch/x86/include/asm/nops.h  130  #define ASM_NOP4 _ASM_MK_NOP(GENERIC_NOP4)
ASM_NOP5  macro  arch/x86/include/asm/nops.h  131  #define ASM_NOP5 _ASM_MK_NOP(GENERIC_NOP5)
ASM_NOP6  macro  arch/x86/include/asm/nops.h  132  #define ASM_NOP6 _ASM_MK_NOP(GENERIC_NOP6)
ASM_NOP7  macro  arch/x86/include/asm/nops.h  133  #define ASM_NOP7 _ASM_MK_NOP(GENERIC_NOP7)
ASM_NOP8  macro  arch/x86/include/asm/nops.h  134  #define ASM_NOP8 _ASM_MK_NOP(GENERIC_NOP8)
ASM_NOP5_ATOMIC  macro  arch/x86/include/asm/nops.h  135  #define ASM_NOP5_ATOMIC _ASM_MK_NOP(GENERIC_NOP5_ATOMIC)
ASM_NOP_MAX  macro  arch/x86/include/asm/nops.h  138  #define ASM_NOP_MAX 8
NOP_ATOMIC5  macro  arch/x86/include/asm/nops.h  139  #define NOP_ATOMIC5 (ASM_NOP_MAX+1)
arch_init_ideal_nops  prototype  arch/x86/include/asm/nops.h  143  extern void arch_init_ideal_nops(void);
_ASM_X86_SPECIAL_INSNS_H  macro  arch/x86/include/asm/special_insns.h  2  #define _ASM_X86_SPECIAL_INSNS_H
native_clts  function  arch/x86/include/asm/special_insns.h  7  static inline void native_clts(void)
native_read_cr0  function  arch/x86/include/asm/special_insns.h  21  static inline unsigned long native_read_cr0(void)
native_write_cr0  function  arch/x86/include/asm/special_insns.h  28  static inline void native_write_cr0(unsigned long val)
native_read_cr2  function  arch/x86/include/asm/special_insns.h  33  static inline unsigned long native_read_cr2(void)
native_write_cr2  function  arch/x86/include/asm/special_insns.h  40  static inline void native_write_cr2(unsigned long val)
native_read_cr3  function  arch/x86/include/asm/special_insns.h  45  static inline unsigned long native_read_cr3(void)
native_write_cr3  function  arch/x86/include/asm/special_insns.h  52  static inline void native_write_cr3(unsigned long val)
native_read_cr4  function  arch/x86/include/asm/special_insns.h  57  static inline unsigned long native_read_cr4(void)
native_read_cr4_safe  function  arch/x86/include/asm/special_insns.h  64  static inline unsigned long native_read_cr4_safe(void)
native_write_cr4  function  arch/x86/include/asm/special_insns.h  80  static inline void native_write_cr4(unsigned long val)
native_read_cr8  function  arch/x86/include/asm/special_insns.h  86  static inline unsigned long native_read_cr8(void)
native_write_cr8  function  arch/x86/include/asm/special_insns.h  93  static inline void native_write_cr8(unsigned long val)
native_wbinvd  function  arch/x86/include/asm/special_insns.h  99  static inline void native_wbinvd(void)
native_load_gs_index  prototype  arch/x86/include/asm/special_insns.h  104  extern void native_load_gs_index(unsigned);
read_cr0  function  arch/x86/include/asm/paravirt.h  53  static inline unsigned long read_cr0(void)
write_cr0  function  arch/x86/include/asm/paravirt.h  58  static inline void write_cr0(unsigned long x)
read_cr2  function  arch/x86/include/asm/paravirt.h  63  static inline unsigned long read_cr2(void)
write_cr2  function  arch/x86/include/asm/paravirt.h  68  static inline void write_cr2(unsigned long x)
read_cr3  function  arch/x86/include/asm/paravirt.h  73  static inline unsigned long read_cr3(void)
write_cr3  function  arch/x86/include/asm/paravirt.h  78  static inline void write_cr3(unsigned long x)
read_cr4  function  arch/x86/include/asm/paravirt.h  83  static inline unsigned long read_cr4(void)
read_cr4_safe  function  arch/x86/include/asm/paravirt.h  87  static inline unsigned long read_cr4_safe(void)
write_cr4  function  arch/x86/include/asm/paravirt.h  92  static inline void write_cr4(unsigned long x)
wbinvd  function  arch/x86/include/asm/paravirt.h  119  static inline void wbinvd(void)
read_cr8  function  arch/x86/include/asm/paravirt.h  98  static inline unsigned long read_cr8(void)
write_cr8  function  arch/x86/include/asm/paravirt.h  103  static inline void write_cr8(unsigned long x)
load_gs_index  function  arch/x86/include/asm/paravirt.h  321  static inline void load_gs_index(unsigned int gs)
clts  function  arch/x86/include/asm/paravirt.h  48  static inline void clts(void)
stts  macro  arch/x86/include/asm/special_insns.h  187  #define stts() write_cr0(read_cr0() | X86_CR0_TS)
clflush  function  arch/x86/include/asm/special_insns.h  189  static inline void clflush(volatile void *__p)
nop  macro  arch/x86/include/asm/special_insns.h  194  #define nop() asm volatile ("nop")
_LINUX_PERSONALITY_H  macro  include/linux/personality.h  2  #define _LINUX_PERSONALITY_H
register_exec_domain  prototype  include/linux/personality.h  13  extern int register_exec_domain(struct exec_domain *);
unregister_exec_domain  prototype  include/linux/personality.h  14  extern int unregister_exec_domain(struct exec_domain *);
__set_personality  prototype  include/linux/personality.h  15  extern int __set_personality(unsigned int);
PER_CLEAR_ON_SETID  macro  include/linux/personality.h  44  #define PER_CLEAR_ON_SETID (READ_IMPLIES_EXEC | ADDR_NO_RANDOMIZE  | ADDR_COMPAT_LAYOUT | MMAP_PAGE_ZERO)
exec_domain  struct  include/linux/personality.h  92  struct exec_domain { const char *name; handler_t handler; unsigned char pers_low; unsigned char pers_high; unsigned long *signal_map; unsigned long *signal_invmap; struct map_segment *err_map; struct map_segment *socktype_map; struct map_segment *sockopt_map; struct map_segment *af_map; struct module *module; struct exec_domain *next; };
personality  macro  include/linux/personality.h  110  #define personality(pers) (pers & PER_MASK)
set_personality  macro  include/linux/personality.h  116  #define set_personality(pers) ((current->personality == (pers)) ? 0 : __set_personality(pers))
_LINUX_ERR_H  macro  include/linux/err.h  2  #define _LINUX_ERR_H
MAX_ERRNO  macro  include/linux/err.h  16  #define MAX_ERRNO 4095
IS_ERR_VALUE  macro  include/linux/err.h  20  #define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)
ERR_PTR  function  include/linux/err.h  22  static inline void * __must_check ERR_PTR(long error)
PTR_ERR  function  include/linux/err.h  27  static inline long __must_check PTR_ERR(const void *ptr)
IS_ERR  function  include/linux/err.h  32  static inline long __must_check IS_ERR(const void *ptr)
IS_ERR_OR_NULL  function  include/linux/err.h  37  static inline long __must_check IS_ERR_OR_NULL(const void *ptr)
ERR_CAST  function  include/linux/err.h  49  static inline void * __must_check ERR_CAST(const void *ptr)
PTR_RET  function  include/linux/err.h  55  static inline int __must_check PTR_RET(const void *ptr)
_ASM_X86_PARAVIRT_H  macro  arch/x86/include/asm/paravirt.h  2  #define _ASM_X86_PARAVIRT_H
paravirt_get_debugreg  function  arch/x86/include/asm/paravirt.h  38  static inline unsigned long paravirt_get_debugreg(int reg)
get_debugreg  macro  arch/x86/include/asm/paravirt.h  42  #define get_debugreg(var,reg) var = paravirt_get_debugreg(reg)
set_debugreg  function  arch/x86/include/asm/paravirt.h  43  static inline void set_debugreg(unsigned long val,int reg)
arch_safe_halt  function  arch/x86/include/asm/irqflags.h  89  static inline void arch_safe_halt(void)
halt  function  arch/x86/include/asm/irqflags.h  98  static inline void halt(void)
paravirt_read_msr  function  arch/x86/include/asm/paravirt.h  126  static inline u64 paravirt_read_msr(unsigned msr,int *err)
paravirt_rdmsr_regs  function  arch/x86/include/asm/paravirt.h  131  static inline int paravirt_rdmsr_regs(u32 *regs)
paravirt_write_msr  function  arch/x86/include/asm/paravirt.h  136  static inline int paravirt_write_msr(unsigned msr,unsigned low,unsigned high)
paravirt_wrmsr_regs  function  arch/x86/include/asm/paravirt.h  141  static inline int paravirt_wrmsr_regs(u32 *regs)
paravirt_read_tsc  function  arch/x86/include/asm/paravirt.h  216  static inline u64 paravirt_read_tsc(void)
paravirt_sched_clock  function  arch/x86/include/asm/paravirt.h  229  static inline unsigned long long paravirt_sched_clock(void)
paravirt_steal_clock  function  arch/x86/include/asm/paravirt.h  238  static inline u64 paravirt_steal_clock(int cpu)
paravirt_read_pmc  function  arch/x86/include/asm/paravirt.h  243  static inline unsigned long long paravirt_read_pmc(int counter)
paravirt_rdtscp  function  arch/x86/include/asm/paravirt.h  255  static inline unsigned long long paravirt_rdtscp(unsigned int *aux)
paravirt_alloc_ldt  function  arch/x86/include/asm/paravirt.h  276  static inline void paravirt_alloc_ldt(struct desc_struct *ldt,unsigned entries)
paravirt_free_ldt  function  arch/x86/include/asm/paravirt.h  281  static inline void paravirt_free_ldt(struct desc_struct *ldt,unsigned entries)
load_TR_desc  function  arch/x86/include/asm/paravirt.h  286  static inline void load_TR_desc(void)
load_gdt  function  arch/x86/include/asm/paravirt.h  290  static inline void load_gdt(const struct desc_ptr *dtr)
load_idt  function  arch/x86/include/asm/paravirt.h  294  static inline void load_idt(const struct desc_ptr *dtr)
set_ldt  function  arch/x86/include/asm/paravirt.h  298  static inline void set_ldt(const void *addr,unsigned entries)
store_gdt  function  arch/x86/include/asm/paravirt.h  302  static inline void store_gdt(struct desc_ptr *dtr)
store_idt  function  arch/x86/include/asm/paravirt.h  306  static inline void store_idt(struct desc_ptr *dtr)
paravirt_store_tr  function  arch/x86/include/asm/paravirt.h  310  static inline unsigned long paravirt_store_tr(void)
store_tr  macro  arch/x86/include/asm/paravirt.h  314  #define store_tr(tr) ((tr) = paravirt_store_tr())
load_TLS  function  arch/x86/include/asm/paravirt.h  315  static inline void load_TLS(struct thread_struct *t,unsigned cpu)
write_ldt_entry  function  arch/x86/include/asm/paravirt.h  327  static inline void write_ldt_entry(struct desc_struct *dt,int entry,const void *desc)
write_gdt_entry  function  arch/x86/include/asm/paravirt.h  333  static inline void write_gdt_entry(struct desc_struct *dt,int entry,void *desc, int type)
write_idt_entry  function  arch/x86/include/asm/paravirt.h  339  static inline void write_idt_entry(gate_desc *dt,int entry,const gate_desc *g)
paravirt_activate_mm  function  arch/x86/include/asm/paravirt.h  368  static inline void paravirt_activate_mm(struct mm_struct *prev,struct mm_struct *next)
arch_dup_mmap  function  arch/x86/include/asm/paravirt.h  374  static inline void arch_dup_mmap(struct mm_struct *oldmm,struct mm_struct *mm)
arch_exit_mmap  function  arch/x86/include/asm/paravirt.h  380  static inline void arch_exit_mmap(struct mm_struct *mm)
__flush_tlb  function  arch/x86/include/asm/paravirt.h  385  static inline void __flush_tlb(void)
__flush_tlb_global  function  arch/x86/include/asm/paravirt.h  389  static inline void __flush_tlb_global(void)
__flush_tlb_single  function  arch/x86/include/asm/paravirt.h  393  static inline void __flush_tlb_single(unsigned long addr)
flush_tlb_others  function  arch/x86/include/asm/paravirt.h  398  static inline void flush_tlb_others(const struct cpumask *cpumask,struct mm_struct *mm,unsigned long va)
paravirt_pgd_alloc  function  arch/x86/include/asm/paravirt.h  405  static inline int paravirt_pgd_alloc(struct mm_struct *mm)
paravirt_pgd_free  function  arch/x86/include/asm/paravirt.h  410  static inline void paravirt_pgd_free(struct mm_struct *mm,pgd_t *pgd)
paravirt_alloc_pte  function  arch/x86/include/asm/paravirt.h  415  static inline void paravirt_alloc_pte(struct mm_struct *mm,unsigned long pfn)
paravirt_release_pte  function  arch/x86/include/asm/paravirt.h  419  static inline void paravirt_release_pte(unsigned long pfn)
paravirt_alloc_pmd  function  arch/x86/include/asm/paravirt.h  424  static inline void paravirt_alloc_pmd(struct mm_struct *mm,unsigned long pfn)
paravirt_release_pmd  function  arch/x86/include/asm/paravirt.h  429  static inline void paravirt_release_pmd(unsigned long pfn)
paravirt_alloc_pud  function  arch/x86/include/asm/paravirt.h  434  static inline void paravirt_alloc_pud(struct mm_struct *mm,unsigned long pfn)
paravirt_release_pud  function  arch/x86/include/asm/paravirt.h  438  static inline void paravirt_release_pud(unsigned long pfn)
pte_update  function  arch/x86/include/asm/paravirt.h  443  static inline void pte_update(struct mm_struct *mm,unsigned long addr,pte_t *ptep)
pmd_update  function  arch/x86/include/asm/paravirt.h  448  static inline void pmd_update(struct mm_struct *mm,unsigned long addr,pmd_t *pmdp)
pte_update_defer  function  arch/x86/include/asm/paravirt.h  454  static inline void pte_update_defer(struct mm_struct *mm,unsigned long addr,pte_t *ptep)
pmd_update_defer  function  arch/x86/include/asm/paravirt.h  460  static inline void pmd_update_defer(struct mm_struct *mm,unsigned long addr,pmd_t *pmdp)
__pte  function  arch/x86/include/asm/paravirt.h  466  static inline pte_t __pte(pteval_t val)
pte_val  function  arch/x86/include/asm/paravirt.h  482  static inline pteval_t pte_val(pte_t pte)
__pgd  function  arch/x86/include/asm/paravirt.h  496  static inline pgd_t __pgd(pgdval_t val)
pgd_val  function  arch/x86/include/asm/paravirt.h  510  static inline pgdval_t pgd_val(pgd_t pgd)
__HAVE_ARCH_PTEP_MODIFY_PROT_TRANSACTION  macro  arch/x86/include/asm/paravirt.h  524  #define __HAVE_ARCH_PTEP_MODIFY_PROT_TRANSACTION
ptep_modify_prot_start  function  arch/x86/include/asm/paravirt.h  525  static inline pte_t ptep_modify_prot_start(struct mm_struct *mm,unsigned long addr,pte_t *ptep)
ptep_modify_prot_commit  function  arch/x86/include/asm/paravirt.h  536  static inline void ptep_modify_prot_commit(struct mm_struct *mm,unsigned long addr,pte_t *ptep, pte_t pte)
set_pte  function  arch/x86/include/asm/paravirt.h  547  static inline void set_pte(pte_t *ptep,pte_t pte)
set_pte_at  function  arch/x86/include/asm/paravirt.h  557  static inline void set_pte_at(struct mm_struct *mm,unsigned long addr,pte_t *ptep, pte_t pte)
set_pmd_at  function  arch/x86/include/asm/paravirt.h  568  static inline void set_pmd_at(struct mm_struct *mm,unsigned long addr,pmd_t *pmdp, pmd_t pmd)
set_pmd  function  arch/x86/include/asm/paravirt.h  580  static inline void set_pmd(pmd_t *pmdp,pmd_t pmd)
__pmd  function  arch/x86/include/asm/paravirt.h  591  static inline pmd_t __pmd(pmdval_t val)
pmd_val  function  arch/x86/include/asm/paravirt.h  605  static inline pmdval_t pmd_val(pmd_t pmd)
set_pud  function  arch/x86/include/asm/paravirt.h  619  static inline void set_pud(pud_t *pudp,pud_t pud)
__pud  function  arch/x86/include/asm/paravirt.h  631  static inline pud_t __pud(pudval_t val)
pud_val  function  arch/x86/include/asm/paravirt.h  645  static inline pudval_t pud_val(pud_t pud)
set_pgd  function  arch/x86/include/asm/paravirt.h  659  static inline void set_pgd(pgd_t *pgdp,pgd_t pgd)
pgd_clear  function  arch/x86/include/asm/paravirt.h  671  static inline void pgd_clear(pgd_t *pgdp)
pud_clear  function  arch/x86/include/asm/paravirt.h  676  static inline void pud_clear(pud_t *pudp)
set_pte_atomic  function  arch/x86/include/asm/paravirt.h  705  static inline void set_pte_atomic(pte_t *ptep,pte_t pte)
pte_clear  function  arch/x86/include/asm/paravirt.h  710  static inline void pte_clear(struct mm_struct *mm,unsigned long addr,pte_t *ptep)
pmd_clear  function  arch/x86/include/asm/paravirt.h  716  static inline void pmd_clear(pmd_t *pmdp)
__HAVE_ARCH_START_CONTEXT_SWITCH  macro  arch/x86/include/asm/paravirt.h  722  #define __HAVE_ARCH_START_CONTEXT_SWITCH
arch_start_context_switch  function  arch/x86/include/asm/paravirt.h  723  static inline void arch_start_context_switch(struct task_struct *prev)
arch_end_context_switch  function  arch/x86/include/asm/paravirt.h  728  static inline void arch_end_context_switch(struct task_struct *next)
__HAVE_ARCH_ENTER_LAZY_MMU_MODE  macro  arch/x86/include/asm/paravirt.h  733  #define __HAVE_ARCH_ENTER_LAZY_MMU_MODE
arch_enter_lazy_mmu_mode  function  arch/x86/include/asm/paravirt.h  734  static inline void arch_enter_lazy_mmu_mode(void)
arch_leave_lazy_mmu_mode  function  arch/x86/include/asm/paravirt.h  739  static inline void arch_leave_lazy_mmu_mode(void)
arch_flush_lazy_mmu_mode  prototype  arch/x86/include/asm/paravirt.h  744  void arch_flush_lazy_mmu_mode(void);
__set_fixmap  function  arch/x86/include/asm/paravirt.h  746  static inline void __set_fixmap(unsigned
PV_SAVE_REGS  macro  arch/x86/include/asm/paravirt.h  955  #define PV_SAVE_REGS(set) COND_PUSH(set, CLBR_EAX, eax); COND_PUSH(set, CLBR_EDI, edi); COND_PUSH(set, CLBR_ECX, ecx); COND_PUSH(set, CLBR_EDX, edx)
PV_RESTORE_REGS  macro  arch/x86/include/asm/paravirt.h  960  #define PV_RESTORE_REGS(set) COND_POP(set, CLBR_EDX, edx); COND_POP(set, CLBR_ECX, ecx); COND_POP(set, CLBR_EDI, edi); COND_POP(set, CLBR_EAX, eax)
PV_SAVE_ALL_CALLER_REGS  macro  arch/x86/include/asm/paravirt.h  801  #define PV_SAVE_ALL_CALLER_REGS "push %rcx;" "push %rdx;" "push %rsi;" "push %rdi;" "push %r8;" "push %r9;" "push %r10;" "push %r11;"
PV_RESTORE_ALL_CALLER_REGS  macro  arch/x86/include/asm/paravirt.h  810  #define PV_RESTORE_ALL_CALLER_REGS "pop %r11;" "pop %r10;" "pop %r9;" "pop %r8;" "pop %rdi;" "pop %rsi;" "pop %rdx;" "pop %rcx;"
PV_FLAGS_ARG  macro  arch/x86/include/asm/paravirt.h  826  #define PV_FLAGS_ARG "D"
PV_EXTRA_CLOBBERS  macro  arch/x86/include/asm/paravirt.h  824  #define PV_EXTRA_CLOBBERS EXTRA_CLOBBERS,"rcx" ,"rdx","rsi"
PV_VEXTRA_CLOBBERS  macro  arch/x86/include/asm/paravirt.h  825  #define PV_VEXTRA_CLOBBERS EXTRA_CLOBBERS,"rdi","rcx" ,"rdx","rsi"
PV_CALLEE_SAVE_REGS_THUNK  macro  arch/x86/include/asm/paravirt.h  841  #define PV_CALLEE_SAVE_REGS_THUNK(func) extern typeof(func) __raw_callee_save_##func; static void *__##func##__ __used = func; asm(".pushsection .text;" "__raw_callee_save_" #func ": " PV_SAVE_ALL_CALLER_REGS "call " #func ";" PV_RESTORE_ALL_CALLER_REGS "ret;" ".popsection")
PV_CALLEE_SAVE  macro  arch/x86/include/asm/paravirt.h  854  #define PV_CALLEE_SAVE(func) ((struct paravirt_callee_save) { __raw_callee_save_##func })
__PV_IS_CALLEE_SAVE  macro  arch/x86/include/asm/paravirt.h  858  #define __PV_IS_CALLEE_SAVE(func) ((struct paravirt_callee_save) { func })
arch_local_save_flags  function  arch/x86/include/asm/irqflags.h  65  static inline notrace unsigned long arch_local_save_flags(void)
arch_local_irq_restore  function  arch/x86/include/asm/irqflags.h  70  static inline notrace void arch_local_irq_restore(unsigned long flags)
arch_local_irq_disable  function  arch/x86/include/asm/irqflags.h  75  static inline notrace void arch_local_irq_disable(void)
arch_local_irq_enable  function  arch/x86/include/asm/irqflags.h  80  static inline notrace void arch_local_irq_enable(void)
arch_local_irq_save  function  arch/x86/include/asm/irqflags.h  106  static inline notrace unsigned long arch_local_irq_save(void)
default_banner  macro  arch/x86/include/asm/paravirt.h  1047  # define default_banner x86_init_noop
_PVSITE  macro  arch/x86/include/asm/paravirt.h  910  #define _PVSITE(ptype,clobbers,ops,word,algn) 771:; ops; 772:; .pushsection .parainstructions,"a"; .align	algn; word 771b; .byte ptype; .byte 772b-771b; .short clobbers; .popsection
COND_PUSH  macro  arch/x86/include/asm/paravirt.h  923  #define COND_PUSH(set,mask,reg) .if ((~(set)) & mask); push %reg; .endif
COND_POP  macro  arch/x86/include/asm/paravirt.h  925  #define COND_POP(set,mask,reg) .if ((~(set)) & mask); pop %reg; .endif
PARA_PATCH  macro  arch/x86/include/asm/paravirt.h  966  #define PARA_PATCH(struct,off) ((PARAVIRT_PATCH_##struct + (off)) / 4)
PARA_SITE  macro  arch/x86/include/asm/paravirt.h  967  #define PARA_SITE(ptype,clobbers,ops) _PVSITE(ptype,clobbers,ops,.long,4)
PARA_INDIRECT  macro  arch/x86/include/asm/paravirt.h  968  #define PARA_INDIRECT(addr) *%cs:addr
INTERRUPT_RETURN  macro  arch/x86/include/asm/irqflags.h  145  #define INTERRUPT_RETURN iret
DISABLE_INTERRUPTS  macro  arch/x86/include/asm/irqflags.h  115  #define DISABLE_INTERRUPTS(x) cli
ENABLE_INTERRUPTS  macro  arch/x86/include/asm/irqflags.h  114  #define ENABLE_INTERRUPTS(x) sti
USERGS_SYSRET32  macro  arch/x86/include/asm/irqflags.h  136  #define USERGS_SYSRET32 swapgs; sysretl
GET_CR0_INTO_EAX  macro  arch/x86/include/asm/irqflags.h  147  #define GET_CR0_INTO_EAX movl %cr0,%eax
ENABLE_INTERRUPTS_SYSEXIT  macro  arch/x86/include/asm/irqflags.h  146  #define ENABLE_INTERRUPTS_SYSEXIT sti; sysexit
SWAPGS_UNSAFE_STACK  macro  arch/x86/include/asm/irqflags.h  128  #define SWAPGS_UNSAFE_STACK swapgs
SWAPGS  macro  arch/x86/include/asm/irqflags.h  118  #define SWAPGS swapgs
GET_CR2_INTO_RAX  macro  arch/x86/include/asm/paravirt.h  1026  #define GET_CR2_INTO_RAX call PARA_INDIRECT(pv_mmu_ops+PV_MMU_read_cr2)
PARAVIRT_ADJUST_EXCEPTION_FRAME  macro  arch/x86/include/asm/irqflags.h  130  #define PARAVIRT_ADJUST_EXCEPTION_FRAME
USERGS_SYSRET64  macro  arch/x86/include/asm/irqflags.h  133  #define USERGS_SYSRET64 swapgs; sysretq;
ENABLE_INTERRUPTS_SYSEXIT32  macro  arch/x86/include/asm/irqflags.h  139  #define ENABLE_INTERRUPTS_SYSEXIT32 swapgs; sti; sysexit
__LINUX__AIO_ABI_H  macro  include/linux/aio_abi.h  28  #define __LINUX__AIO_ABI_H
IOCB_FLAG_RESFD  macro  include/linux/aio_abi.h  55  #define IOCB_FLAG_RESFD (1 << 0)
io_event  struct  include/linux/aio_abi.h  58  struct io_event { __u64 data; __u64 obj; __s64 res; __s64 res2; };
PADDED  macro  include/linux/aio_abi.h  68  #define PADDED(x,y) y,x
iocb  struct  include/linux/aio_abi.h  79  struct iocb { __u64 aio_data; __u32 PADDED(aio_key, aio_reserved1); __u16 aio_lio_opcode; __s16 aio_reqprio; __u32 aio_fildes; __u64 aio_buf; __u64 aio_nbytes; __s64 aio_offset; __u64 aio_reserved2; __u32 aio_flags; __u32 aio_resfd; };
IFBIG  macro  include/linux/aio_abi.h  107  #undef IFBIG
IFLITTLE  macro  include/linux/aio_abi.h  108  #undef IFLITTLE
__LINUX_UIO_H  macro  include/linux/uio.h  2  #define __LINUX_UIO_H
iovec  struct  include/linux/uio.h  16  struct iovec { void __user *iov_base; __kernel_size_t iov_len; };
UIO_FASTIOV  macro  include/linux/uio.h  26  #define UIO_FASTIOV 8
UIO_MAXIOV  macro  include/linux/uio.h  27  #define UIO_MAXIOV 1024
kvec  struct  include/linux/uio.h  31  struct kvec { void *iov_base; size_t iov_len; };
iov_length  function  include/linux/uio.h  43  static inline size_t iov_length(const struct iovec *iov,unsigned long nr_segs)
iov_shorten  prototype  include/linux/uio.h  53  unsigned long iov_shorten(struct iovec *iov,unsigned long nr_segs,size_t to);
_LINUX_RWSEM_SPINLOCK_H  macro  include/linux/rwsem-spinlock.h  9  #define _LINUX_RWSEM_SPINLOCK_H
RWSEM_UNLOCKED_VALUE  macro  arch/x86/include/asm/rwsem.h  54  #define RWSEM_UNLOCKED_VALUE 0x00000000L
__down_read  function  arch/x86/include/asm/rwsem.h  63  static inline void __down_read(struct rw_semaphore *sem)
__down_read_trylock  function  arch/x86/include/asm/rwsem.h  80  static inline int __down_read_trylock(struct rw_semaphore *sem)
__down_write  function  arch/x86/include/asm/rwsem.h  119  static inline void __down_write(struct rw_semaphore *sem)
__down_write_nested  function  arch/x86/include/asm/rwsem.h  102  static inline void __down_write_nested(struct rw_semaphore *sem,int subclass)
__down_write_trylock  function  arch/x86/include/asm/rwsem.h  127  static inline int __down_write_trylock(struct rw_semaphore *sem)
__up_read  function  arch/x86/include/asm/rwsem.h  139  static inline void __up_read(struct rw_semaphore *sem)
__up_write  function  arch/x86/include/asm/rwsem.h  157  static inline void __up_write(struct rw_semaphore *sem)
__downgrade_write  function  arch/x86/include/asm/rwsem.h  175  static inline void __downgrade_write(struct rw_semaphore *sem)
_ASM_X86_RWSEM_H  macro  arch/x86/include/asm/rwsem.h  33  #define _ASM_X86_RWSEM_H
RWSEM_ACTIVE_MASK  macro  arch/x86/include/asm/rwsem.h  51  # define RWSEM_ACTIVE_MASK 0x0000ffffL
RWSEM_ACTIVE_BIAS  macro  arch/x86/include/asm/rwsem.h  55  #define RWSEM_ACTIVE_BIAS 0x00000001L
RWSEM_WAITING_BIAS  macro  arch/x86/include/asm/rwsem.h  56  #define RWSEM_WAITING_BIAS (-RWSEM_ACTIVE_MASK-1)
RWSEM_ACTIVE_READ_BIAS  macro  arch/x86/include/asm/rwsem.h  57  #define RWSEM_ACTIVE_READ_BIAS RWSEM_ACTIVE_BIAS
RWSEM_ACTIVE_WRITE_BIAS  macro  arch/x86/include/asm/rwsem.h  58  #define RWSEM_ACTIVE_WRITE_BIAS (RWSEM_WAITING_BIAS + RWSEM_ACTIVE_BIAS)
rwsem_atomic_add  function  arch/x86/include/asm/rwsem.h  195  static inline void rwsem_atomic_add(long delta,struct rw_semaphore *sem)
rwsem_atomic_update  function  arch/x86/include/asm/rwsem.h  205  static inline long rwsem_atomic_update(long delta,struct rw_semaphore *sem)
_ASM_X86_STRING_32_H  macro  arch/x86/include/asm/string_32.h  2  #define _ASM_X86_STRING_32_H
__HAVE_ARCH_STRCPY  macro  arch/x86/include/asm/string_32.h  8  #define __HAVE_ARCH_STRCPY
__HAVE_ARCH_STRNCPY  macro  arch/x86/include/asm/string_32.h  11  #define __HAVE_ARCH_STRNCPY
__HAVE_ARCH_STRCAT  macro  arch/x86/include/asm/string_32.h  14  #define __HAVE_ARCH_STRCAT
__HAVE_ARCH_STRNCAT  macro  arch/x86/include/asm/string_32.h  17  #define __HAVE_ARCH_STRNCAT
__HAVE_ARCH_STRCMP  macro  arch/x86/include/asm/string_32.h  20  #define __HAVE_ARCH_STRCMP
__HAVE_ARCH_STRNCMP  macro  arch/x86/include/asm/string_32.h  23  #define __HAVE_ARCH_STRNCMP
__HAVE_ARCH_STRCHR  macro  arch/x86/include/asm/string_32.h  26  #define __HAVE_ARCH_STRCHR
__HAVE_ARCH_STRLEN  macro  arch/x86/include/asm/string_32.h  29  #define __HAVE_ARCH_STRLEN
__memcpy  prototype  arch/x86/include/asm/string_64.h  34  extern void *__memcpy(void *to,const void *from,size_t len);
__constant_memcpy  function  arch/x86/include/asm/string_32.h  51  static __always_inline void *__constant_memcpy(void *to,const void *from,size_t n)
__HAVE_ARCH_MEMCPY  macro  arch/x86/include/asm/string_64.h  29  #define __HAVE_ARCH_MEMCPY 1
__constant_memcpy3d  function  arch/x86/include/asm/string_32.h  154  static inline void *__constant_memcpy3d(void *to,const void *from,size_t len)
__memcpy3d  function  arch/x86/include/asm/string_32.h  161  static inline void *__memcpy3d(void *to,const void *from,size_t len)
__HAVE_ARCH_MEMMOVE  macro  arch/x86/include/asm/string_64.h  57  #define __HAVE_ARCH_MEMMOVE
__HAVE_ARCH_MEMCHR  macro  arch/x86/include/asm/string_32.h  204  #define __HAVE_ARCH_MEMCHR
__memset_generic  function  arch/x86/include/asm/string_32.h  207  static inline void *__memset_generic(void *s,char c,size_t count)
__constant_count_memset  macro  arch/x86/include/asm/string_32.h  219  #define __constant_count_memset(s,c,count) __memset_generic((s),(c),(count))
__constant_c_memset  function  arch/x86/include/asm/string_32.h  227  void *__constant_c_memset(void *s,unsigned long c,size_t count)
__HAVE_ARCH_STRNLEN  macro  arch/x86/include/asm/string_32.h  245  #define __HAVE_ARCH_STRNLEN
__HAVE_ARCH_STRSTR  macro  arch/x86/include/asm/string_32.h  249  #define __HAVE_ARCH_STRSTR
__constant_c_and_count_memset  function  arch/x86/include/asm/string_32.h  257  void *__constant_c_and_count_memset(void *s,unsigned long pattern,size_t count)
COMMON  macro  arch/x86/include/asm/string_32.h  310  #undef COMMON
__constant_c_x_memset  macro  arch/x86/include/asm/string_32.h  313  #define __constant_c_x_memset(s,c,count) (__builtin_constant_p(count) ? __constant_c_and_count_memset((s), (c), (count)) : __constant_c_memset((s), (c), (count)))
__memset  macro  arch/x86/include/asm/string_32.h  318  #define __memset(s,c,count) (__builtin_constant_p(count) ? __constant_count_memset((s), (c), (count)) : __memset_generic((s), (c), (count)))
__HAVE_ARCH_MEMSET  macro  arch/x86/include/asm/string_64.h  54  #define __HAVE_ARCH_MEMSET
__HAVE_ARCH_MEMSCAN  macro  arch/x86/include/asm/string_32.h  337  #define __HAVE_ARCH_MEMSCAN
_ASM_X86_STRING_64_H  macro  arch/x86/include/asm/string_64.h  2  #define _ASM_X86_STRING_64_H
__inline_memcpy  function  arch/x86/include/asm/string_64.h  9  static __always_inline void *__inline_memcpy(void *to,const void *from,size_t n)
_ASM_GENERIC_ERRNO_H  macro  include/asm-generic/errno.h  2  #define _ASM_GENERIC_ERRNO_H
EDEADLK  macro  include/asm-generic/errno.h  6  #define EDEADLK 35
ENAMETOOLONG  macro  include/asm-generic/errno.h  7  #define ENAMETOOLONG 36
ENOLCK  macro  include/asm-generic/errno.h  8  #define ENOLCK 37
ENOSYS  macro  include/asm-generic/errno.h  9  #define ENOSYS 38
ENOTEMPTY  macro  include/asm-generic/errno.h  10  #define ENOTEMPTY 39
ELOOP  macro  include/asm-generic/errno.h  11  #define ELOOP 40
EWOULDBLOCK  macro  include/asm-generic/errno.h  12  #define EWOULDBLOCK EAGAIN
ENOMSG  macro  include/asm-generic/errno.h  13  #define ENOMSG 42
EIDRM  macro  include/asm-generic/errno.h  14  #define EIDRM 43
ECHRNG  macro  include/asm-generic/errno.h  15  #define ECHRNG 44
EL2NSYNC  macro  include/asm-generic/errno.h  16  #define EL2NSYNC 45
EL3HLT  macro  include/asm-generic/errno.h  17  #define EL3HLT 46
EL3RST  macro  include/asm-generic/errno.h  18  #define EL3RST 47
ELNRNG  macro  include/asm-generic/errno.h  19  #define ELNRNG 48
EUNATCH  macro  include/asm-generic/errno.h  20  #define EUNATCH 49
ENOCSI  macro  include/asm-generic/errno.h  21  #define ENOCSI 50
EL2HLT  macro  include/asm-generic/errno.h  22  #define EL2HLT 51
EBADE  macro  include/asm-generic/errno.h  23  #define EBADE 52
EBADR  macro  include/asm-generic/errno.h  24  #define EBADR 53
EXFULL  macro  include/asm-generic/errno.h  25  #define EXFULL 54
ENOANO  macro  include/asm-generic/errno.h  26  #define ENOANO 55
EBADRQC  macro  include/asm-generic/errno.h  27  #define EBADRQC 56
EBADSLT  macro  include/asm-generic/errno.h  28  #define EBADSLT 57
EDEADLOCK  macro  include/asm-generic/errno.h  30  #define EDEADLOCK EDEADLK
EBFONT  macro  include/asm-generic/errno.h  32  #define EBFONT 59
ENOSTR  macro  include/asm-generic/errno.h  33  #define ENOSTR 60
ENODATA  macro  include/asm-generic/errno.h  34  #define ENODATA 61
ETIME  macro  include/asm-generic/errno.h  35  #define ETIME 62
ENOSR  macro  include/asm-generic/errno.h  36  #define ENOSR 63
ENONET  macro  include/asm-generic/errno.h  37  #define ENONET 64
ENOPKG  macro  include/asm-generic/errno.h  38  #define ENOPKG 65
EREMOTE  macro  include/asm-generic/errno.h  39  #define EREMOTE 66
ENOLINK  macro  include/asm-generic/errno.h  40  #define ENOLINK 67
EADV  macro  include/asm-generic/errno.h  41  #define EADV 68
ESRMNT  macro  include/asm-generic/errno.h  42  #define ESRMNT 69
ECOMM  macro  include/asm-generic/errno.h  43  #define ECOMM 70
EPROTO  macro  include/asm-generic/errno.h  44  #define EPROTO 71
EMULTIHOP  macro  include/asm-generic/errno.h  45  #define EMULTIHOP 72
EDOTDOT  macro  include/asm-generic/errno.h  46  #define EDOTDOT 73
EBADMSG  macro  include/asm-generic/errno.h  47  #define EBADMSG 74
EOVERFLOW  macro  include/asm-generic/errno.h  48  #define EOVERFLOW 75
ENOTUNIQ  macro  include/asm-generic/errno.h  49  #define ENOTUNIQ 76
EBADFD  macro  include/asm-generic/errno.h  50  #define EBADFD 77
EREMCHG  macro  include/asm-generic/errno.h  51  #define EREMCHG 78
ELIBACC  macro  include/asm-generic/errno.h  52  #define ELIBACC 79
ELIBBAD  macro  include/asm-generic/errno.h  53  #define ELIBBAD 80
ELIBSCN  macro  include/asm-generic/errno.h  54  #define ELIBSCN 81
ELIBMAX  macro  include/asm-generic/errno.h  55  #define ELIBMAX 82
ELIBEXEC  macro  include/asm-generic/errno.h  56  #define ELIBEXEC 83
EILSEQ  macro  include/asm-generic/errno.h  57  #define EILSEQ 84
ERESTART  macro  include/asm-generic/errno.h  58  #define ERESTART 85
ESTRPIPE  macro  include/asm-generic/errno.h  59  #define ESTRPIPE 86
EUSERS  macro  include/asm-generic/errno.h  60  #define EUSERS 87
ENOTSOCK  macro  include/asm-generic/errno.h  61  #define ENOTSOCK 88
EDESTADDRREQ  macro  include/asm-generic/errno.h  62  #define EDESTADDRREQ 89
EMSGSIZE  macro  include/asm-generic/errno.h  63  #define EMSGSIZE 90
EPROTOTYPE  macro  include/asm-generic/errno.h  64  #define EPROTOTYPE 91
ENOPROTOOPT  macro  include/asm-generic/errno.h  65  #define ENOPROTOOPT 92
EPROTONOSUPPORT  macro  include/asm-generic/errno.h  66  #define EPROTONOSUPPORT 93
ESOCKTNOSUPPORT  macro  include/asm-generic/errno.h  67  #define ESOCKTNOSUPPORT 94
EOPNOTSUPP  macro  include/asm-generic/errno.h  68  #define EOPNOTSUPP 95
EPFNOSUPPORT  macro  include/asm-generic/errno.h  69  #define EPFNOSUPPORT 96
EAFNOSUPPORT  macro  include/asm-generic/errno.h  70  #define EAFNOSUPPORT 97
EADDRINUSE  macro  include/asm-generic/errno.h  71  #define EADDRINUSE 98
EADDRNOTAVAIL  macro  include/asm-generic/errno.h  72  #define EADDRNOTAVAIL 99
ENETDOWN  macro  include/asm-generic/errno.h  73  #define ENETDOWN 100
ENETUNREACH  macro  include/asm-generic/errno.h  74  #define ENETUNREACH 101
ENETRESET  macro  include/asm-generic/errno.h  75  #define ENETRESET 102
ECONNABORTED  macro  include/asm-generic/errno.h  76  #define ECONNABORTED 103
ECONNRESET  macro  include/asm-generic/errno.h  77  #define ECONNRESET 104
ENOBUFS  macro  include/asm-generic/errno.h  78  #define ENOBUFS 105
EISCONN  macro  include/asm-generic/errno.h  79  #define EISCONN 106
ENOTCONN  macro  include/asm-generic/errno.h  80  #define ENOTCONN 107
ESHUTDOWN  macro  include/asm-generic/errno.h  81  #define ESHUTDOWN 108
ETOOMANYREFS  macro  include/asm-generic/errno.h  82  #define ETOOMANYREFS 109
ETIMEDOUT  macro  include/asm-generic/errno.h  83  #define ETIMEDOUT 110
ECONNREFUSED  macro  include/asm-generic/errno.h  84  #define ECONNREFUSED 111
EHOSTDOWN  macro  include/asm-generic/errno.h  85  #define EHOSTDOWN 112
EHOSTUNREACH  macro  include/asm-generic/errno.h  86  #define EHOSTUNREACH 113
EALREADY  macro  include/asm-generic/errno.h  87  #define EALREADY 114
EINPROGRESS  macro  include/asm-generic/errno.h  88  #define EINPROGRESS 115
ESTALE  macro  include/asm-generic/errno.h  89  #define ESTALE 116
EUCLEAN  macro  include/asm-generic/errno.h  90  #define EUCLEAN 117
ENOTNAM  macro  include/asm-generic/errno.h  91  #define ENOTNAM 118
ENAVAIL  macro  include/asm-generic/errno.h  92  #define ENAVAIL 119
EISNAM  macro  include/asm-generic/errno.h  93  #define EISNAM 120
EREMOTEIO  macro  include/asm-generic/errno.h  94  #define EREMOTEIO 121
EDQUOT  macro  include/asm-generic/errno.h  95  #define EDQUOT 122
ENOMEDIUM  macro  include/asm-generic/errno.h  97  #define ENOMEDIUM 123
EMEDIUMTYPE  macro  include/asm-generic/errno.h  98  #define EMEDIUMTYPE 124
ECANCELED  macro  include/asm-generic/errno.h  99  #define ECANCELED 125
ENOKEY  macro  include/asm-generic/errno.h  100  #define ENOKEY 126
EKEYEXPIRED  macro  include/asm-generic/errno.h  101  #define EKEYEXPIRED 127
EKEYREVOKED  macro  include/asm-generic/errno.h  102  #define EKEYREVOKED 128
EKEYREJECTED  macro  include/asm-generic/errno.h  103  #define EKEYREJECTED 129
EOWNERDEAD  macro  include/asm-generic/errno.h  106  #define EOWNERDEAD 130
ENOTRECOVERABLE  macro  include/asm-generic/errno.h  107  #define ENOTRECOVERABLE 131
ERFKILL  macro  include/asm-generic/errno.h  109  #define ERFKILL 132
EHWPOISON  macro  include/asm-generic/errno.h  111  #define EHWPOISON 133
LINUX_MM_DEBUG_H  macro  include/linux/mmdebug.h  2  #define LINUX_MM_DEBUG_H 1
VM_BUG_ON  macro  include/linux/mmdebug.h  7  #define VM_BUG_ON(cond) BUILD_BUG_ON_INVALID(cond)
VIRTUAL_BUG_ON  macro  include/linux/mmdebug.h  13  #define VIRTUAL_BUG_ON(cond) do { } while (0)
__KMEMLEAK_H  macro  include/linux/kmemleak.h  22  #define __KMEMLEAK_H
kmemleak_alloc_recursive  function  include/linux/kmemleak.h  68  static inline void kmemleak_alloc_recursive(const void *ptr,size_t size,int min_count, unsigned long flags,gfp_t gfp)
kmemleak_free_recursive  function  include/linux/kmemleak.h  82  static inline void kmemleak_free_recursive(const void *ptr,unsigned long flags)
kmemleak_erase  function  include/linux/kmemleak.h  97  static inline void kmemleak_erase(void **ptr)
kmemleak_init  function  include/linux/kmemleak.h  61  static inline void kmemleak_init(void)
kmemleak_alloc  function  include/linux/kmemleak.h  64  static inline void kmemleak_alloc(const void *ptr,size_t size,int min_count,gfp_t gfp)
kmemleak_alloc_percpu  function  include/linux/kmemleak.h  73  static inline void kmemleak_alloc_percpu(const void __percpu *ptr,size_t size)
kmemleak_free  function  include/linux/kmemleak.h  76  static inline void kmemleak_free(const void *ptr)
kmemleak_free_part  function  include/linux/kmemleak.h  79  static inline void kmemleak_free_part(const void *ptr,size_t size)
kmemleak_free_percpu  function  include/linux/kmemleak.h  85  static inline void kmemleak_free_percpu(const void __percpu *ptr)
kmemleak_not_leak  function  include/linux/kmemleak.h  88  static inline void kmemleak_not_leak(const void *ptr)
kmemleak_ignore  function  include/linux/kmemleak.h  91  static inline void kmemleak_ignore(const void *ptr)
kmemleak_scan_area  function  include/linux/kmemleak.h  94  static inline void kmemleak_scan_area(const void *ptr,size_t size,gfp_t gfp)
kmemleak_no_scan  function  include/linux/kmemleak.h  100  static inline void kmemleak_no_scan(const void *ptr)
_LINUX_FTRACE_IRQ_H  macro  include/linux/ftrace_irq.h  2  #define _LINUX_FTRACE_IRQ_H
ftrace_nmi_enter  function  include/linux/ftrace_irq.h  9  static inline void ftrace_nmi_enter(void) { }
ftrace_nmi_exit  function  include/linux/ftrace_irq.h  10  static inline void ftrace_nmi_exit(void) { }
_ASM_X86_HARDIRQ_H  macro  arch/x86/include/asm/hardirq.h  2  #define _ASM_X86_HARDIRQ_H
MAX_HARDIRQS_PER_CPU  macro  arch/x86/include/asm/hardirq.h  34  #define MAX_HARDIRQS_PER_CPU NR_VECTORS
__ARCH_IRQ_STAT  macro  arch/x86/include/asm/hardirq.h  36  #define __ARCH_IRQ_STAT
inc_irq_stat  macro  arch/x86/include/asm/hardirq.h  38  #define inc_irq_stat(member) this_cpu_inc(irq_stat.member)
local_softirq_pending  macro  arch/x86/include/asm/hardirq.h  40  #define local_softirq_pending() this_cpu_read(irq_stat.__softirq_pending)
__ARCH_SET_SOFTIRQ_PENDING  macro  arch/x86/include/asm/hardirq.h  42  #define __ARCH_SET_SOFTIRQ_PENDING
ack_bad_irq  prototype  arch/x86/include/asm/hardirq.h  48  extern void ack_bad_irq(unsigned int irq);
arch_irq_stat_cpu  macro  arch/x86/include/asm/hardirq.h  51  #define arch_irq_stat_cpu arch_irq_stat_cpu
arch_irq_stat  macro  arch/x86/include/asm/hardirq.h  54  #define arch_irq_stat arch_irq_stat
_X86_IRQFLAGS_H_  macro  arch/x86/include/asm/irqflags.h  2  #define _X86_IRQFLAGS_H_
native_save_fl  function  arch/x86/include/asm/irqflags.h  11  static inline unsigned long native_save_fl(void)
native_restore_fl  function  arch/x86/include/asm/irqflags.h  29  static inline void native_restore_fl(unsigned long flags)
native_irq_disable  function  arch/x86/include/asm/irqflags.h  37  static inline void native_irq_disable(void)
native_irq_enable  function  arch/x86/include/asm/irqflags.h  42  static inline void native_irq_enable(void)
native_safe_halt  function  arch/x86/include/asm/irqflags.h  47  static inline void native_safe_halt(void)
native_halt  function  arch/x86/include/asm/irqflags.h  52  static inline void native_halt(void)
arch_irqs_disabled_flags  function  arch/x86/include/asm/irqflags.h  155  static inline int arch_irqs_disabled_flags(unsigned long flags)
arch_irqs_disabled  function  arch/x86/include/asm/irqflags.h  160  static inline int arch_irqs_disabled(void)
ARCH_LOCKDEP_SYS_EXIT  macro  arch/x86/include/asm/irqflags.h  181  #define ARCH_LOCKDEP_SYS_EXIT pushl %eax; pushl %ecx; pushl %edx; call lockdep_sys_exit; popl %edx; popl %ecx; popl %eax;
ARCH_LOCKDEP_SYS_EXIT_IRQ  macro  arch/x86/include/asm/irqflags.h  190  #define ARCH_LOCKDEP_SYS_EXIT_IRQ
TRACE_IRQS_ON  macro  arch/x86/include/asm/irqflags.h  197  # define TRACE_IRQS_ON
TRACE_IRQS_OFF  macro  arch/x86/include/asm/irqflags.h  198  # define TRACE_IRQS_OFF
LOCKDEP_SYS_EXIT  macro  arch/x86/include/asm/irqflags.h  204  # define LOCKDEP_SYS_EXIT
LOCKDEP_SYS_EXIT_IRQ  macro  arch/x86/include/asm/irqflags.h  205  # define LOCKDEP_SYS_EXIT_IRQ
_ASM_X86_ATOMIC_H  macro  arch/x86/include/asm/atomic.h  2  #define _ASM_X86_ATOMIC_H
ATOMIC_INIT  macro  arch/x86/include/asm/atomic.h  15  #define ATOMIC_INIT(i) { (i) }
atomic_read  function  arch/x86/include/asm/atomic.h  23  static inline int atomic_read(const atomic_t *v)
atomic_set  function  arch/x86/include/asm/atomic.h  35  static inline void atomic_set(atomic_t *v,int i)
atomic_add  function  arch/x86/include/asm/atomic.h  47  static inline void atomic_add(int i,atomic_t *v)
atomic_sub  function  arch/x86/include/asm/atomic.h  61  static inline void atomic_sub(int i,atomic_t *v)
atomic_sub_and_test  function  arch/x86/include/asm/atomic.h  77  static inline int atomic_sub_and_test(int i,atomic_t *v)
atomic_inc  function  arch/x86/include/asm/atomic.h  93  static inline void atomic_inc(atomic_t *v)
atomic_dec  function  arch/x86/include/asm/atomic.h  105  static inline void atomic_dec(atomic_t *v)
atomic_dec_and_test  function  arch/x86/include/asm/atomic.h  119  static inline int atomic_dec_and_test(atomic_t *v)
atomic_inc_and_test  function  arch/x86/include/asm/atomic.h  137  static inline int atomic_inc_and_test(atomic_t *v)
atomic_add_negative  function  arch/x86/include/asm/atomic.h  156  static inline int atomic_add_negative(int i,atomic_t *v)
atomic_add_return  function  arch/x86/include/asm/atomic.h  173  static inline int atomic_add_return(int i,atomic_t *v)
atomic_sub_return  function  arch/x86/include/asm/atomic.h  201  static inline int atomic_sub_return(int i,atomic_t *v)
atomic_inc_return  macro  arch/x86/include/asm/atomic.h  206  #define atomic_inc_return(v) (atomic_add_return(1,v))
atomic_dec_return  macro  arch/x86/include/asm/atomic.h  207  #define atomic_dec_return(v) (atomic_sub_return(1,v))
atomic_cmpxchg  function  arch/x86/include/asm/atomic.h  209  static inline int atomic_cmpxchg(atomic_t *v,int old,int new)
atomic_xchg  function  arch/x86/include/asm/atomic.h  214  static inline int atomic_xchg(atomic_t *v,int new)
__atomic_add_unless  function  arch/x86/include/asm/atomic.h  228  static inline int __atomic_add_unless(atomic_t *v,int a,int u)
atomic_dec_if_positive  function  arch/x86/include/asm/atomic.h  251  static inline int atomic_dec_if_positive(atomic_t *v)
atomic_inc_short  function  arch/x86/include/asm/atomic.h  274  static inline short int atomic_inc_short(short int *v)
atomic_or_long  function  arch/x86/include/asm/atomic.h  289  static inline void atomic_or_long(unsigned long *v1,unsigned long v2)
atomic_clear_mask  macro  arch/x86/include/asm/atomic.h  296  #define atomic_clear_mask(mask,addr) asm volatile(LOCK_PREFIX "andl %0,%1" : : "r" (~(mask)), "m" (*(addr)) : "memory")
atomic_set_mask  macro  arch/x86/include/asm/atomic.h  300  #define atomic_set_mask(mask,addr) asm volatile(LOCK_PREFIX "orl %0,%1" : : "r" ((unsigned)(mask)), "m" (*(addr)) : "memory")
smp_mb__before_atomic_dec  macro  arch/x86/include/asm/atomic.h  306  #define smp_mb__before_atomic_dec() barrier()
smp_mb__after_atomic_dec  macro  arch/x86/include/asm/atomic.h  307  #define smp_mb__after_atomic_dec() barrier()
smp_mb__before_atomic_inc  macro  arch/x86/include/asm/atomic.h  308  #define smp_mb__before_atomic_inc() barrier()
smp_mb__after_atomic_inc  macro  arch/x86/include/asm/atomic.h  309  #define smp_mb__after_atomic_inc() barrier()
_ASM_GENERIC_ATOMIC_LONG_H  macro  include/asm-generic/atomic-long.h  2  #define _ASM_GENERIC_ATOMIC_LONG_H
ATOMIC_LONG_INIT  macro  include/asm-generic/atomic-long.h  143  #define ATOMIC_LONG_INIT(i) ATOMIC_INIT(i)
atomic_long_read  function  include/asm-generic/atomic-long.h  144  static inline long atomic_long_read(atomic_long_t *l)
atomic_long_set  function  include/asm-generic/atomic-long.h  151  static inline void atomic_long_set(atomic_long_t *l,long i)
atomic_long_inc  function  include/asm-generic/atomic-long.h  158  static inline void atomic_long_inc(atomic_long_t *l)
atomic_long_dec  function  include/asm-generic/atomic-long.h  165  static inline void atomic_long_dec(atomic_long_t *l)
atomic_long_add  function  include/asm-generic/atomic-long.h  172  static inline void atomic_long_add(long i,atomic_long_t *l)
atomic_long_sub  function  include/asm-generic/atomic-long.h  179  static inline void atomic_long_sub(long i,atomic_long_t *l)
atomic_long_sub_and_test  function  include/asm-generic/atomic-long.h  186  static inline int atomic_long_sub_and_test(long i,atomic_long_t *l)
atomic_long_dec_and_test  function  include/asm-generic/atomic-long.h  193  static inline int atomic_long_dec_and_test(atomic_long_t *l)
atomic_long_inc_and_test  function  include/asm-generic/atomic-long.h  200  static inline int atomic_long_inc_and_test(atomic_long_t *l)
atomic_long_add_negative  function  include/asm-generic/atomic-long.h  207  static inline int atomic_long_add_negative(long i,atomic_long_t *l)
atomic_long_add_return  function  include/asm-generic/atomic-long.h  214  static inline long atomic_long_add_return(long i,atomic_long_t *l)
atomic_long_sub_return  function  include/asm-generic/atomic-long.h  221  static inline long atomic_long_sub_return(long i,atomic_long_t *l)
atomic_long_inc_return  function  include/asm-generic/atomic-long.h  228  static inline long atomic_long_inc_return(atomic_long_t *l)
atomic_long_dec_return  function  include/asm-generic/atomic-long.h  235  static inline long atomic_long_dec_return(atomic_long_t *l)
atomic_long_add_unless  function  include/asm-generic/atomic-long.h  242  static inline long atomic_long_add_unless(atomic_long_t *l,long a,long u)
atomic_long_inc_not_zero  macro  include/asm-generic/atomic-long.h  249  #define atomic_long_inc_not_zero(l) atomic_inc_not_zero((atomic_t *)(l))
atomic_long_cmpxchg  macro  include/asm-generic/atomic-long.h  251  #define atomic_long_cmpxchg(l,old,new) (atomic_cmpxchg((atomic_t *)(l), (old), (new)))
atomic_long_xchg  macro  include/asm-generic/atomic-long.h  253  #define atomic_long_xchg(v,new) (atomic_xchg((atomic_t *)(v), (new)))
_ASM_GENERIC_ATOMIC64_H  macro  include/asm-generic/atomic64.h  13  #define _ASM_GENERIC_ATOMIC64_H
ATOMIC64_INIT  macro  include/asm-generic/atomic64.h  19  #define ATOMIC64_INIT(i) { (i) }
atomic64_read  prototype  include/asm-generic/atomic64.h  21  extern long long atomic64_read(const atomic64_t *v);
atomic64_set  prototype  include/asm-generic/atomic64.h  22  extern void atomic64_set(atomic64_t *v,long long i);
atomic64_add  prototype  include/asm-generic/atomic64.h  23  extern void atomic64_add(long long a,atomic64_t *v);
atomic64_add_return  prototype  include/asm-generic/atomic64.h  24  extern long long atomic64_add_return(long long a,atomic64_t *v);
atomic64_sub  prototype  include/asm-generic/atomic64.h  25  extern void atomic64_sub(long long a,atomic64_t *v);
atomic64_sub_return  prototype  include/asm-generic/atomic64.h  26  extern long long atomic64_sub_return(long long a,atomic64_t *v);
atomic64_dec_if_positive  prototype  include/asm-generic/atomic64.h  27  extern long long atomic64_dec_if_positive(atomic64_t *v);
atomic64_cmpxchg  prototype  include/asm-generic/atomic64.h  28  extern long long atomic64_cmpxchg(atomic64_t *v,long long o,long long n);
atomic64_xchg  prototype  include/asm-generic/atomic64.h  29  extern long long atomic64_xchg(atomic64_t *v,long long new);
atomic64_add_unless  prototype  include/asm-generic/atomic64.h  30  extern int atomic64_add_unless(atomic64_t *v,long long a,long long u);
atomic64_add_negative  macro  include/asm-generic/atomic64.h  32  #define atomic64_add_negative(a,v) (atomic64_add_return((a),(v)) < 0)
atomic64_inc  macro  include/asm-generic/atomic64.h  33  #define atomic64_inc(v) atomic64_add(1LL,(v))
atomic64_inc_return  macro  include/asm-generic/atomic64.h  34  #define atomic64_inc_return(v) atomic64_add_return(1LL,(v))
atomic64_inc_and_test  macro  include/asm-generic/atomic64.h  35  #define atomic64_inc_and_test(v) (atomic64_inc_return(v) == 0)
atomic64_sub_and_test  macro  include/asm-generic/atomic64.h  36  #define atomic64_sub_and_test(a,v) (atomic64_sub_return((a),(v)) == 0)
atomic64_dec  macro  include/asm-generic/atomic64.h  37  #define atomic64_dec(v) atomic64_sub(1LL,(v))
atomic64_dec_return  macro  include/asm-generic/atomic64.h  38  #define atomic64_dec_return(v) atomic64_sub_return(1LL,(v))
atomic64_dec_and_test  macro  include/asm-generic/atomic64.h  39  #define atomic64_dec_and_test(v) (atomic64_dec_return((v)) == 0)
atomic64_inc_not_zero  macro  include/asm-generic/atomic64.h  40  #define atomic64_inc_not_zero(v) atomic64_add_unless((v),1LL,0LL)
_LINUX_KLIST_H  macro  include/linux/klist.h  13  #define _LINUX_KLIST_H
klist  struct  include/linux/klist.h  20  struct klist { spinlock_t k_lock; struct list_head k_list; void (*get)(struct klist_node *); void (*put)(struct klist_node *); } __attribute__ ((aligned (sizeof(void *))));
KLIST_INIT  macro  include/linux/klist.h  27  #define KLIST_INIT(_name,_get,_put) { .k_lock	= __SPIN_LOCK_UNLOCKED(_name.k_lock), .k_list	= LIST_HEAD_INIT(_name.k_list), .get		= _get, .put		= _put, }
DEFINE_KLIST  macro  include/linux/klist.h  33  #define DEFINE_KLIST(_name,_get,_put) struct klist _name = KLIST_INIT(_name, _get, _put)
klist_init  prototype  include/linux/klist.h  36  extern void klist_init(struct klist *k,void (*get)(struct klist_node *),void (*put)(struct klist_node *));
klist_node  struct  include/linux/klist.h  39  struct klist_node { void *n_klist; struct list_head n_node; struct kref n_ref; };
klist_add_tail  prototype  include/linux/klist.h  45  extern void klist_add_tail(struct klist_node *n,struct klist *k);
klist_add_head  prototype  include/linux/klist.h  46  extern void klist_add_head(struct klist_node *n,struct klist *k);
klist_add_after  prototype  include/linux/klist.h  47  extern void klist_add_after(struct klist_node *n,struct klist_node *pos);
klist_add_before  prototype  include/linux/klist.h  48  extern void klist_add_before(struct klist_node *n,struct klist_node *pos);
klist_del  prototype  include/linux/klist.h  50  extern void klist_del(struct klist_node *n);
klist_remove  prototype  include/linux/klist.h  51  extern void klist_remove(struct klist_node *n);
klist_node_attached  prototype  include/linux/klist.h  53  extern int klist_node_attached(struct klist_node *n);
klist_iter  struct  include/linux/klist.h  56  struct klist_iter { struct klist *i_klist; struct klist_node *i_cur; };
klist_iter_init  prototype  include/linux/klist.h  62  extern void klist_iter_init(struct klist *k,struct klist_iter *i);
klist_iter_init_node  prototype  include/linux/klist.h  63  extern void klist_iter_init_node(struct klist *k,struct klist_iter *i,struct klist_node *n);
klist_iter_exit  prototype  include/linux/klist.h  65  extern void klist_iter_exit(struct klist_iter *i);
klist_next  prototype  include/linux/klist.h  66  extern struct klist_node *klist_next(struct klist_iter *i);
_LINUX_PM_H  macro  include/linux/pm.h  22  #define _LINUX_PM_H
power_group_name  macro  include/linux/pm.h  47  #define power_group_name NULL
pm_message  struct  include/linux/pm.h  50  typedef struct pm_message { int event; } pm_message_t;
pm_message_t  struct  include/linux/pm.h  50  typedef struct pm_message { int event; } pm_message_t;
dev_pm_ops  struct  include/linux/pm.h  264  struct dev_pm_ops { int (*prepare)(struct device *dev); void (*complete)(struct device *dev); int (*suspend)(struct device *dev); int (*resume)(struct device *dev); int (*freeze)(struct device *dev); int (*thaw)(struct device *dev); int (*poweroff)(struct device *dev); int (*restore)(struct device *dev); int (*suspend_late)(struct device *dev); int (*resume_early)(struct device *dev); int (*freeze_late)(struct device *dev); int (*thaw_early)(struct device *dev); int (*poweroff_late)(struct device *dev); int (*restore_early)(struct device *dev); int (*suspend_noirq)(struct device *dev); int (*resume_noirq)(struct device *dev); int (*freeze_noirq)(struct device *dev); int (*thaw_noirq)(struct device *dev); int (*poweroff_noirq)(struct device *dev); int (*restore_noirq)(struct device *dev); int (*runtime_suspend)(struct device *dev); int (*runtime_resume)(struct device *dev); int (*runtime_idle)(struct device *dev); };
SET_SYSTEM_SLEEP_PM_OPS  macro  include/linux/pm.h  299  #define SET_SYSTEM_SLEEP_PM_OPS(suspend_fn,resume_fn)
SET_RUNTIME_PM_OPS  macro  include/linux/pm.h  308  #define SET_RUNTIME_PM_OPS(suspend_fn,resume_fn,idle_fn)
SIMPLE_DEV_PM_OPS  macro  include/linux/pm.h  315  #define SIMPLE_DEV_PM_OPS(name,suspend_fn,resume_fn) const struct dev_pm_ops name = { SET_SYSTEM_SLEEP_PM_OPS(suspend_fn, resume_fn) }
UNIVERSAL_DEV_PM_OPS  macro  include/linux/pm.h  333  #define UNIVERSAL_DEV_PM_OPS(name,suspend_fn,resume_fn,idle_fn) const struct dev_pm_ops name = { SET_SYSTEM_SLEEP_PM_OPS(suspend_fn, resume_fn) SET_RUNTIME_PM_OPS(suspend_fn, resume_fn, idle_fn) }
PM_EVENT_INVALID  macro  include/linux/pm.h  391  #define PM_EVENT_INVALID (-1)
PM_EVENT_ON  macro  include/linux/pm.h  392  #define PM_EVENT_ON 0x0000
PM_EVENT_FREEZE  macro  include/linux/pm.h  393  #define PM_EVENT_FREEZE 0x0001
PM_EVENT_SUSPEND  macro  include/linux/pm.h  394  #define PM_EVENT_SUSPEND 0x0002
PM_EVENT_HIBERNATE  macro  include/linux/pm.h  395  #define PM_EVENT_HIBERNATE 0x0004
PM_EVENT_QUIESCE  macro  include/linux/pm.h  396  #define PM_EVENT_QUIESCE 0x0008
PM_EVENT_RESUME  macro  include/linux/pm.h  397  #define PM_EVENT_RESUME 0x0010
PM_EVENT_THAW  macro  include/linux/pm.h  398  #define PM_EVENT_THAW 0x0020
PM_EVENT_RESTORE  macro  include/linux/pm.h  399  #define PM_EVENT_RESTORE 0x0040
PM_EVENT_RECOVER  macro  include/linux/pm.h  400  #define PM_EVENT_RECOVER 0x0080
PM_EVENT_USER  macro  include/linux/pm.h  401  #define PM_EVENT_USER 0x0100
PM_EVENT_REMOTE  macro  include/linux/pm.h  402  #define PM_EVENT_REMOTE 0x0200
PM_EVENT_AUTO  macro  include/linux/pm.h  403  #define PM_EVENT_AUTO 0x0400
PM_EVENT_SLEEP  macro  include/linux/pm.h  405  #define PM_EVENT_SLEEP (PM_EVENT_SUSPEND | PM_EVENT_HIBERNATE)
PM_EVENT_USER_SUSPEND  macro  include/linux/pm.h  406  #define PM_EVENT_USER_SUSPEND (PM_EVENT_USER | PM_EVENT_SUSPEND)
PM_EVENT_USER_RESUME  macro  include/linux/pm.h  407  #define PM_EVENT_USER_RESUME (PM_EVENT_USER | PM_EVENT_RESUME)
PM_EVENT_REMOTE_RESUME  macro  include/linux/pm.h  408  #define PM_EVENT_REMOTE_RESUME (PM_EVENT_REMOTE | PM_EVENT_RESUME)
PM_EVENT_AUTO_SUSPEND  macro  include/linux/pm.h  409  #define PM_EVENT_AUTO_SUSPEND (PM_EVENT_AUTO | PM_EVENT_SUSPEND)
PM_EVENT_AUTO_RESUME  macro  include/linux/pm.h  410  #define PM_EVENT_AUTO_RESUME (PM_EVENT_AUTO | PM_EVENT_RESUME)
PMSG_INVALID  macro  include/linux/pm.h  412  #define PMSG_INVALID ((struct pm_message){ .event = PM_EVENT_INVALID,})
PMSG_ON  macro  include/linux/pm.h  413  #define PMSG_ON ((struct pm_message){ .event = PM_EVENT_ON,})
PMSG_FREEZE  macro  include/linux/pm.h  414  #define PMSG_FREEZE ((struct pm_message){ .event = PM_EVENT_FREEZE,})
PMSG_QUIESCE  macro  include/linux/pm.h  415  #define PMSG_QUIESCE ((struct pm_message){ .event = PM_EVENT_QUIESCE,})
PMSG_SUSPEND  macro  include/linux/pm.h  416  #define PMSG_SUSPEND ((struct pm_message){ .event = PM_EVENT_SUSPEND,})
PMSG_HIBERNATE  macro  include/linux/pm.h  417  #define PMSG_HIBERNATE ((struct pm_message){ .event = PM_EVENT_HIBERNATE,})
PMSG_RESUME  macro  include/linux/pm.h  418  #define PMSG_RESUME ((struct pm_message){ .event = PM_EVENT_RESUME,})
PMSG_THAW  macro  include/linux/pm.h  419  #define PMSG_THAW ((struct pm_message){ .event = PM_EVENT_THAW,})
PMSG_RESTORE  macro  include/linux/pm.h  420  #define PMSG_RESTORE ((struct pm_message){ .event = PM_EVENT_RESTORE,})
PMSG_RECOVER  macro  include/linux/pm.h  421  #define PMSG_RECOVER ((struct pm_message){ .event = PM_EVENT_RECOVER,})
PMSG_USER_SUSPEND  macro  include/linux/pm.h  422  #define PMSG_USER_SUSPEND ((struct pm_message) { .event = PM_EVENT_USER_SUSPEND, })
PMSG_USER_RESUME  macro  include/linux/pm.h  424  #define PMSG_USER_RESUME ((struct pm_message) { .event = PM_EVENT_USER_RESUME, })
PMSG_REMOTE_RESUME  macro  include/linux/pm.h  426  #define PMSG_REMOTE_RESUME ((struct pm_message) { .event = PM_EVENT_REMOTE_RESUME, })
PMSG_AUTO_SUSPEND  macro  include/linux/pm.h  428  #define PMSG_AUTO_SUSPEND ((struct pm_message) { .event = PM_EVENT_AUTO_SUSPEND, })
PMSG_AUTO_RESUME  macro  include/linux/pm.h  430  #define PMSG_AUTO_RESUME ((struct pm_message) { .event = PM_EVENT_AUTO_RESUME, })
PMSG_IS_AUTO  macro  include/linux/pm.h  433  #define PMSG_IS_AUTO(msg) (((msg).event & PM_EVENT_AUTO) != 0)
rpm_status  enum  include/linux/pm.h  458  enum rpm_status { RPM_ACTIVE = 0, RPM_RESUMING, RPM_SUSPENDED, RPM_SUSPENDING, };
rpm_request  enum  include/linux/pm.h  480  enum rpm_request { RPM_REQ_NONE = 0, RPM_REQ_IDLE, RPM_REQ_SUSPEND, RPM_REQ_AUTOSUSPEND, RPM_REQ_RESUME, };
pm_domain_data  struct  include/linux/pm.h  490  struct pm_domain_data { struct list_head list_node; struct device *dev; };
pm_subsys_data  struct  include/linux/pm.h  495  struct pm_subsys_data { spinlock_t lock; unsigned int refcount; struct list_head clock_list; struct pm_domain_data *domain_data; };
dev_pm_info  struct  include/linux/pm.h  506  struct dev_pm_info { pm_message_t power_state; unsigned int can_wakeup:1; unsigned int async_suspend:1; bool is_prepared:1; bool is_suspended:1; bool ignore_children:1; spinlock_t lock; struct list_head entry; struct completion completion; struct wakeup_source *wakeup; bool wakeup_path:1; unsigned int should_wakeup:1; struct timer_list suspend_timer; unsigned long timer_expires; struct work_struct work; wait_queue_head_t wait_queue; atomic_t usage_count; atomic_t child_count; unsigned int disable_depth:3; unsigned int idle_notification:1; unsigned int request_pending:1; unsigned int deferred_resume:1; unsigned int run_wake:1; unsigned int runtime_auto:1; unsigned int no_callbacks:1; unsigned int irq_safe:1; unsigned int use_autosuspend:1; unsigned int timer_autosuspends:1; enum rpm_request request; enum rpm_status runtime_status; int runtime_error; int autosuspend_delay; unsigned long last_busy; unsigned long active_jiffies; unsigned long suspended_jiffies; unsigned long accounting_timestamp; struct dev_pm_qos_request *pq_req; struct pm_subsys_data *subsys_data; struct pm_qos_constraints *constraints; };
update_pm_runtime_accounting  prototype  include/linux/pm.h  553  extern void update_pm_runtime_accounting(struct device *dev);
dev_pm_get_subsys_data  prototype  include/linux/pm.h  554  extern int dev_pm_get_subsys_data(struct device *dev);
dev_pm_put_subsys_data  prototype  include/linux/pm.h  555  extern int dev_pm_put_subsys_data(struct device *dev);
dev_pm_domain  struct  include/linux/pm.h  562  struct dev_pm_domain { struct dev_pm_ops ops; };
PM_EVENT_PRETHAW  macro  include/linux/pm.h  573  #define PM_EVENT_PRETHAW PM_EVENT_QUIESCE
device_pm_lock  macro  include/linux/pm.h  665  #define device_pm_lock() do {} while (0)
dpm_resume_start  prototype  include/linux/pm.h  622  extern void dpm_resume_start(pm_message_t state);
dpm_resume_end  prototype  include/linux/pm.h  623  extern void dpm_resume_end(pm_message_t state);
dpm_resume  prototype  include/linux/pm.h  624  extern void dpm_resume(pm_message_t state);
dpm_complete  prototype  include/linux/pm.h  625  extern void dpm_complete(pm_message_t state);
device_pm_unlock  macro  include/linux/pm.h  666  #define device_pm_unlock() do {} while (0)
dpm_suspend_end  prototype  include/linux/pm.h  628  extern int dpm_suspend_end(pm_message_t state);
dpm_suspend_start  function  include/linux/pm.h  668  static inline int dpm_suspend_start(pm_message_t state)
dpm_suspend  prototype  include/linux/pm.h  630  extern int dpm_suspend(pm_message_t state);
dpm_prepare  prototype  include/linux/pm.h  631  extern int dpm_prepare(pm_message_t state);
__suspend_report_result  prototype  include/linux/pm.h  633  extern void __suspend_report_result(const char *function,void *fn,int ret);
suspend_report_result  macro  include/linux/pm.h  673  #define suspend_report_result(fn,ret) do {} while (0)
device_pm_wait_for_dev  function  include/linux/pm.h  675  static inline int device_pm_wait_for_dev(struct device *a,struct device *b)
pm_generic_prepare  macro  include/linux/pm.h  680  #define pm_generic_prepare NULL
pm_generic_suspend_late  prototype  include/linux/pm.h  643  extern int pm_generic_suspend_late(struct device *dev);
pm_generic_suspend_noirq  prototype  include/linux/pm.h  644  extern int pm_generic_suspend_noirq(struct device *dev);
pm_generic_suspend  macro  include/linux/pm.h  681  #define pm_generic_suspend NULL
pm_generic_resume_early  prototype  include/linux/pm.h  646  extern int pm_generic_resume_early(struct device *dev);
pm_generic_resume_noirq  prototype  include/linux/pm.h  647  extern int pm_generic_resume_noirq(struct device *dev);
pm_generic_resume  macro  include/linux/pm.h  682  #define pm_generic_resume NULL
pm_generic_freeze_noirq  prototype  include/linux/pm.h  649  extern int pm_generic_freeze_noirq(struct device *dev);
pm_generic_freeze_late  prototype  include/linux/pm.h  650  extern int pm_generic_freeze_late(struct device *dev);
pm_generic_freeze  macro  include/linux/pm.h  683  #define pm_generic_freeze NULL
pm_generic_thaw_noirq  prototype  include/linux/pm.h  652  extern int pm_generic_thaw_noirq(struct device *dev);
pm_generic_thaw_early  prototype  include/linux/pm.h  653  extern int pm_generic_thaw_early(struct device *dev);
pm_generic_thaw  macro  include/linux/pm.h  684  #define pm_generic_thaw NULL
pm_generic_restore_noirq  prototype  include/linux/pm.h  655  extern int pm_generic_restore_noirq(struct device *dev);
pm_generic_restore_early  prototype  include/linux/pm.h  656  extern int pm_generic_restore_early(struct device *dev);
pm_generic_restore  macro  include/linux/pm.h  685  #define pm_generic_restore NULL
pm_generic_poweroff_noirq  prototype  include/linux/pm.h  658  extern int pm_generic_poweroff_noirq(struct device *dev);
pm_generic_poweroff_late  prototype  include/linux/pm.h  659  extern int pm_generic_poweroff_late(struct device *dev);
pm_generic_poweroff  macro  include/linux/pm.h  686  #define pm_generic_poweroff NULL
pm_generic_complete  macro  include/linux/pm.h  687  #define pm_generic_complete NULL
dpm_order  enum  include/linux/pm.h  691  enum dpm_order { DPM_ORDER_NONE, DPM_ORDER_DEV_AFTER_PARENT, DPM_ORDER_PARENT_BEFORE_DEV, DPM_ORDER_DEV_LAST, };
_LINUX_RATELIMIT_H  macro  include/linux/ratelimit.h  2  #define _LINUX_RATELIMIT_H
DEFAULT_RATELIMIT_INTERVAL  macro  include/linux/ratelimit.h  7  #define DEFAULT_RATELIMIT_INTERVAL (5 * HZ)
DEFAULT_RATELIMIT_BURST  macro  include/linux/ratelimit.h  8  #define DEFAULT_RATELIMIT_BURST 10
ratelimit_state  struct  include/linux/ratelimit.h  10  struct ratelimit_state { raw_spinlock_t lock; int interval; int burst; int printed; int missed; unsigned long begin; };
DEFINE_RATELIMIT_STATE  macro  include/linux/ratelimit.h  20  #define DEFINE_RATELIMIT_STATE(name,interval_init,burst_init) struct ratelimit_state name = { .lock		= __RAW_SPIN_LOCK_UNLOCKED(name.lock), .interval	= interval_init, .burst		= burst_init, }
ratelimit_state_init  function  include/linux/ratelimit.h  28  static inline void ratelimit_state_init(struct ratelimit_state *rs,int interval, int burst)
___ratelimit  prototype  include/linux/ratelimit.h  41  extern int ___ratelimit(struct ratelimit_state *rs,const char *func);
__ratelimit  macro  include/linux/ratelimit.h  42  #define __ratelimit(state) ___ratelimit(state,__func__)
WARN_ON_RATELIMIT  macro  include/linux/ratelimit.h  67  #define WARN_ON_RATELIMIT(condition,state) WARN_ON(condition)
__WARN_RATELIMIT  macro  include/linux/ratelimit.h  70  #define __WARN_RATELIMIT(condition,state,format...) ({ int rtn = WARN(condition, format); rtn; })
WARN_RATELIMIT  macro  include/linux/ratelimit.h  76  #define WARN_RATELIMIT(condition,format...) ({ int rtn = WARN(condition, format); rtn; })
_ASM_X86_DEVICE_H  macro  arch/x86/include/asm/device.h  2  #define _ASM_X86_DEVICE_H
dev_archdata  struct  arch/x86/include/asm/device.h  4  struct dev_archdata { void *acpi_handle; struct dma_map_ops *dma_ops; void *iommu; };
pdev_archdata  struct  arch/x86/include/asm/device.h  16  struct pdev_archdata { };
_LINUX_PM_WAKEUP_H  macro  include/linux/pm_wakeup.h  23  #define _LINUX_PM_WAKEUP_H
wakeup_source  struct  include/linux/pm_wakeup.h  46  struct wakeup_source { const char *name; struct list_head entry; spinlock_t lock; struct timer_list timer; unsigned long timer_expires; ktime_t total_time; ktime_t max_time; ktime_t last_time; ktime_t start_prevent_time; ktime_t prevent_sleep_time; unsigned long event_count; unsigned long active_count; unsigned long relax_count; unsigned long expire_count; unsigned long wakeup_count; bool active:1; bool autosleep_enabled:1; };
device_can_wakeup  function  include/linux/pm_wakeup.h  110  static inline bool device_can_wakeup(struct device *dev)
device_may_wakeup  function  include/linux/pm_wakeup.h  163  static inline bool device_may_wakeup(struct device *dev)
wakeup_source_prepare  function  include/linux/pm_wakeup.h  115  static inline void wakeup_source_prepare(struct wakeup_source *ws,const char *name) {}
wakeup_source_create  function  include/linux/pm_wakeup.h  118  static inline struct wakeup_source *wakeup_source_create(const char *name)
wakeup_source_drop  function  include/linux/pm_wakeup.h  123  static inline void wakeup_source_drop(struct wakeup_source *ws) {}
wakeup_source_destroy  function  include/linux/pm_wakeup.h  125  static inline void wakeup_source_destroy(struct wakeup_source *ws) {}
wakeup_source_add  function  include/linux/pm_wakeup.h  127  static inline void wakeup_source_add(struct wakeup_source *ws) {}
wakeup_source_remove  function  include/linux/pm_wakeup.h  129  static inline void wakeup_source_remove(struct wakeup_source *ws) {}
wakeup_source_register  function  include/linux/pm_wakeup.h  131  static inline struct wakeup_source *wakeup_source_register(const char *name)
wakeup_source_unregister  function  include/linux/pm_wakeup.h  136  static inline void wakeup_source_unregister(struct wakeup_source *ws) {}
device_wakeup_enable  function  include/linux/pm_wakeup.h  138  static inline int device_wakeup_enable(struct device *dev)
device_wakeup_disable  function  include/linux/pm_wakeup.h  144  static inline int device_wakeup_disable(struct device *dev)
device_set_wakeup_capable  function  include/linux/pm_wakeup.h  105  static inline void device_set_wakeup_capable(struct device *dev,bool capable)
device_init_wakeup  function  include/linux/pm_wakeup.h  156  static inline int device_init_wakeup(struct device *dev,bool val)
device_set_wakeup_enable  function  include/linux/pm_wakeup.h  150  static inline int device_set_wakeup_enable(struct device *dev,bool enable)
__pm_stay_awake  function  include/linux/pm_wakeup.h  168  static inline void __pm_stay_awake(struct wakeup_source *ws) {}
pm_stay_awake  function  include/linux/pm_wakeup.h  170  static inline void pm_stay_awake(struct device *dev) {}
__pm_relax  function  include/linux/pm_wakeup.h  172  static inline void __pm_relax(struct wakeup_source *ws) {}
pm_relax  function  include/linux/pm_wakeup.h  174  static inline void pm_relax(struct device *dev) {}
__pm_wakeup_event  function  include/linux/pm_wakeup.h  176  static inline void __pm_wakeup_event(struct wakeup_source *ws,unsigned int msec) {}
pm_wakeup_event  function  include/linux/pm_wakeup.h  178  static inline void pm_wakeup_event(struct device *dev,unsigned int msec) {}
wakeup_source_init  function  include/linux/pm_wakeup.h  182  static inline void wakeup_source_init(struct wakeup_source *ws,const char *name)
wakeup_source_trash  function  include/linux/pm_wakeup.h  189  static inline void wakeup_source_trash(struct wakeup_source *ws)
_ASM_X86_SCATTERLIST_H  macro  arch/x86/include/asm/scatterlist.h  2  #define _ASM_X86_SCATTERLIST_H
ARCH_HAS_SG_CHAIN  macro  arch/x86/include/asm/scatterlist.h  6  #define ARCH_HAS_SG_CHAIN
_LINUX_MM_H  macro  include/linux/mm.h  2  #define _LINUX_MM_H
sysctl_legacy_va_layout  macro  include/linux/mm.h  40  #define sysctl_legacy_va_layout 0
nth_page  macro  include/linux/mm.h  47  #define nth_page(page,n) pfn_to_page(page_to_pfn((page)) + (n))
PAGE_ALIGN  macro  include/linux/mm.h  50  #define PAGE_ALIGN(addr) ALIGN(addr,PAGE_SIZE)
kobjsize  prototype  include/linux/mm.h  67  extern unsigned int kobjsize(const void *objp);
VM_READ  macro  include/linux/mm.h  73  #define VM_READ 0x00000001
VM_WRITE  macro  include/linux/mm.h  74  #define VM_WRITE 0x00000002
VM_EXEC  macro  include/linux/mm.h  75  #define VM_EXEC 0x00000004
VM_SHARED  macro  include/linux/mm.h  76  #define VM_SHARED 0x00000008
VM_MAYREAD  macro  include/linux/mm.h  79  #define VM_MAYREAD 0x00000010
VM_MAYWRITE  macro  include/linux/mm.h  80  #define VM_MAYWRITE 0x00000020
VM_MAYEXEC  macro  include/linux/mm.h  81  #define VM_MAYEXEC 0x00000040
VM_MAYSHARE  macro  include/linux/mm.h  82  #define VM_MAYSHARE 0x00000080
VM_GROWSDOWN  macro  include/linux/mm.h  84  #define VM_GROWSDOWN 0x00000100
VM_GROWSUP  macro  include/linux/mm.h  88  #define VM_GROWSUP 0x00000000
VM_NOHUGEPAGE  macro  include/linux/mm.h  89  #define VM_NOHUGEPAGE 0x00000200
VM_PFNMAP  macro  include/linux/mm.h  91  #define VM_PFNMAP 0x00000400
VM_DENYWRITE  macro  include/linux/mm.h  92  #define VM_DENYWRITE 0x00000800
VM_EXECUTABLE  macro  include/linux/mm.h  94  #define VM_EXECUTABLE 0x00001000
VM_LOCKED  macro  include/linux/mm.h  95  #define VM_LOCKED 0x00002000
VM_IO  macro  include/linux/mm.h  96  #define VM_IO 0x00004000
VM_SEQ_READ  macro  include/linux/mm.h  99  #define VM_SEQ_READ 0x00008000
VM_RAND_READ  macro  include/linux/mm.h  100  #define VM_RAND_READ 0x00010000
VM_DONTCOPY  macro  include/linux/mm.h  102  #define VM_DONTCOPY 0x00020000
VM_DONTEXPAND  macro  include/linux/mm.h  103  #define VM_DONTEXPAND 0x00040000
VM_RESERVED  macro  include/linux/mm.h  104  #define VM_RESERVED 0x00080000
VM_ACCOUNT  macro  include/linux/mm.h  105  #define VM_ACCOUNT 0x00100000
VM_NORESERVE  macro  include/linux/mm.h  106  #define VM_NORESERVE 0x00200000
VM_HUGETLB  macro  include/linux/mm.h  107  #define VM_HUGETLB 0x00400000
VM_NONLINEAR  macro  include/linux/mm.h  108  #define VM_NONLINEAR 0x00800000
VM_MAPPED_COPY  macro  include/linux/mm.h  110  #define VM_MAPPED_COPY 0x01000000
VM_HUGEPAGE  macro  include/linux/mm.h  112  #define VM_HUGEPAGE 0x01000000
VM_INSERTPAGE  macro  include/linux/mm.h  114  #define VM_INSERTPAGE 0x02000000
VM_NODUMP  macro  include/linux/mm.h  115  #define VM_NODUMP 0x04000000
VM_CAN_NONLINEAR  macro  include/linux/mm.h  117  #define VM_CAN_NONLINEAR 0x08000000
VM_MIXEDMAP  macro  include/linux/mm.h  118  #define VM_MIXEDMAP 0x10000000
VM_SAO  macro  include/linux/mm.h  119  #define VM_SAO 0x20000000
VM_PFN_AT_MMAP  macro  include/linux/mm.h  120  #define VM_PFN_AT_MMAP 0x40000000
VM_MERGEABLE  macro  include/linux/mm.h  121  #define VM_MERGEABLE 0x80000000
VM_STACK_INCOMPLETE_SETUP  macro  include/linux/mm.h  124  #define VM_STACK_INCOMPLETE_SETUP (VM_RAND_READ | VM_SEQ_READ)
VM_STACK_DEFAULT_FLAGS  macro  include/linux/mm.h  127  #define VM_STACK_DEFAULT_FLAGS VM_DATA_DEFAULT_FLAGS
VM_STACK_FLAGS  macro  include/linux/mm.h  133  #define VM_STACK_FLAGS (VM_GROWSDOWN | VM_STACK_DEFAULT_FLAGS | VM_ACCOUNT)
VM_READHINTMASK  macro  include/linux/mm.h  136  #define VM_READHINTMASK (VM_SEQ_READ | VM_RAND_READ)
VM_ClearReadHint  macro  include/linux/mm.h  137  #define VM_ClearReadHint(v) (v)->vm_flags &= ~VM_READHINTMASK
VM_NormalReadHint  macro  include/linux/mm.h  138  #define VM_NormalReadHint(v) (!((v)->vm_flags & VM_READHINTMASK))
VM_SequentialReadHint  macro  include/linux/mm.h  139  #define VM_SequentialReadHint(v) ((v)->vm_flags & VM_SEQ_READ)
VM_RandomReadHint  macro  include/linux/mm.h  140  #define VM_RandomReadHint(v) ((v)->vm_flags & VM_RAND_READ)
VM_SPECIAL  macro  include/linux/mm.h  146  #define VM_SPECIAL (VM_IO | VM_DONTEXPAND | VM_RESERVED | VM_PFNMAP)
FAULT_FLAG_WRITE  macro  include/linux/mm.h  154  #define FAULT_FLAG_WRITE 0x01
FAULT_FLAG_NONLINEAR  macro  include/linux/mm.h  155  #define FAULT_FLAG_NONLINEAR 0x02
FAULT_FLAG_MKWRITE  macro  include/linux/mm.h  156  #define FAULT_FLAG_MKWRITE 0x04
FAULT_FLAG_ALLOW_RETRY  macro  include/linux/mm.h  157  #define FAULT_FLAG_ALLOW_RETRY 0x08
FAULT_FLAG_RETRY_NOWAIT  macro  include/linux/mm.h  158  #define FAULT_FLAG_RETRY_NOWAIT 0x10
FAULT_FLAG_KILLABLE  macro  include/linux/mm.h  159  #define FAULT_FLAG_KILLABLE 0x20
is_linear_pfn_mapping  function  include/linux/mm.h  169  static inline int is_linear_pfn_mapping(struct vm_area_struct *vma)
is_pfn_mapping  function  include/linux/mm.h  174  static inline int is_pfn_mapping(struct vm_area_struct *vma)
vm_fault  struct  include/linux/mm.h  188  struct vm_fault { unsigned int flags; pgoff_t pgoff; void __user *virtual_address; struct page *page; };
vm_operations_struct  struct  include/linux/mm.h  205  struct vm_operations_struct { void (*open)(struct vm_area_struct * area); void (*close)(struct vm_area_struct * area); int (*fault)(struct vm_area_struct *vma, struct vm_fault *vmf); int (*page_mkwrite)(struct vm_area_struct *vma, struct vm_fault *vmf); int (*access)(struct vm_area_struct *vma, unsigned long addr,void *buf, int len, int write); int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *new); struct mempolicy *(*get_policy)(struct vm_area_struct *vma,unsigned long addr); int (*migrate)(struct vm_area_struct *vma, const nodemask_t *from,const nodemask_t *to, unsigned long flags); };
page_private  macro  include/linux/mm.h  249  #define page_private(page) ((page)->private)
set_page_private  macro  include/linux/mm.h  250  #define set_page_private(page,v) ((page)->private = (v))
put_page_testzero  function  include/linux/mm.h  275  static inline int put_page_testzero(struct page *page)
get_page_unless_zero  function  include/linux/mm.h  285  static inline int get_page_unless_zero(struct page *page)
page_is_ram  prototype  include/linux/mm.h  290  extern int page_is_ram(unsigned long pfn);
vmalloc_to_page  prototype  include/linux/mm.h  293  struct page *vmalloc_to_page(const void *addr);
vmalloc_to_pfn  prototype  include/linux/mm.h  294  unsigned long vmalloc_to_pfn(const void *addr);
is_vmalloc_addr  function  include/linux/mm.h  302  static inline int is_vmalloc_addr(const void *x)
is_vmalloc_or_module_addr  function  include/linux/mm.h  315  static inline int is_vmalloc_or_module_addr(const void *x)
compound_lock  function  include/linux/mm.h  321  static inline void compound_lock(struct page *page)
compound_unlock  function  include/linux/mm.h  329  static inline void compound_unlock(struct page *page)
compound_lock_irqsave  function  include/linux/mm.h  337  static inline unsigned long compound_lock_irqsave(struct page *page)
compound_unlock_irqrestore  function  include/linux/mm.h  347  static inline void compound_unlock_irqrestore(struct page *page,unsigned long flags)
compound_head  function  include/linux/mm.h  356  static inline struct page *compound_head(struct page *page)
reset_page_mapcount  function  include/linux/mm.h  368  static inline void reset_page_mapcount(struct page *page)
page_mapcount  function  include/linux/mm.h  373  static inline int page_mapcount(struct page *page)
page_count  function  include/linux/mm.h  378  static inline int page_count(struct page *page)
get_huge_page_tail  function  include/linux/mm.h  383  static inline void get_huge_page_tail(struct page *page)
__get_page_tail  prototype  include/linux/mm.h  394  extern bool __get_page_tail(struct page *page);
get_page  function  include/linux/mm.h  396  static inline void get_page(struct page *page)
virt_to_head_page  function  include/linux/mm.h  409  static inline struct page *virt_to_head_page(const void *x)
init_page_count  function  include/linux/mm.h  419  static inline void init_page_count(struct page *page)
PAGE_BUDDY_MAPCOUNT_VALUE  macro  include/linux/mm.h  433  #define PAGE_BUDDY_MAPCOUNT_VALUE (-128)
PageBuddy  function  include/linux/mm.h  435  static inline int PageBuddy(struct page *page)
__SetPageBuddy  function  include/linux/mm.h  440  static inline void __SetPageBuddy(struct page *page)
__ClearPageBuddy  function  include/linux/mm.h  446  static inline void __ClearPageBuddy(struct page *page)
put_page  prototype  include/linux/mm.h  452  void put_page(struct page *page);
put_pages_list  prototype  include/linux/mm.h  453  void put_pages_list(struct list_head *pages);
split_page  prototype  include/linux/mm.h  455  void split_page(struct page *page,unsigned int order);
split_free_page  prototype  include/linux/mm.h  456  int split_free_page(struct page *page);
set_compound_page_dtor  function  include/linux/mm.h  465  static inline void set_compound_page_dtor(struct page *page,compound_page_dtor *dtor)
get_compound_page_dtor  function  include/linux/mm.h  471  static inline compound_page_dtor *get_compound_page_dtor(struct page *page)
compound_order  function  include/linux/mm.h  476  static inline int compound_order(struct page *page)
compound_trans_order  function  include/linux/mm.h  483  static inline int compound_trans_order(struct page *page)
set_compound_order  function  include/linux/mm.h  497  static inline void set_compound_order(struct page *page,unsigned long order)
maybe_mkwrite  function  include/linux/mm.h  509  static inline pte_t maybe_mkwrite(pte_t pte,struct vm_area_struct *vma)
SECTIONS_WIDTH  macro  include/linux/mm.h  600  #define SECTIONS_WIDTH 0
ZONES_WIDTH  macro  include/linux/mm.h  603  #define ZONES_WIDTH ZONES_SHIFT
NODES_WIDTH  macro  include/linux/mm.h  611  #define NODES_WIDTH 0
SECTIONS_PGOFF  macro  include/linux/mm.h  615  #define SECTIONS_PGOFF ((sizeof(unsigned long)*8) - SECTIONS_WIDTH)
NODES_PGOFF  macro  include/linux/mm.h  616  #define NODES_PGOFF (SECTIONS_PGOFF - NODES_WIDTH)
ZONES_PGOFF  macro  include/linux/mm.h  617  #define ZONES_PGOFF (NODES_PGOFF - ZONES_WIDTH)
NODE_NOT_IN_PAGE_FLAGS  macro  include/linux/mm.h  624  #define NODE_NOT_IN_PAGE_FLAGS
SECTIONS_PGSHIFT  macro  include/linux/mm.h  632  #define SECTIONS_PGSHIFT (SECTIONS_PGOFF * (SECTIONS_WIDTH != 0))
NODES_PGSHIFT  macro  include/linux/mm.h  633  #define NODES_PGSHIFT (NODES_PGOFF * (NODES_WIDTH != 0))
ZONES_PGSHIFT  macro  include/linux/mm.h  634  #define ZONES_PGSHIFT (ZONES_PGOFF * (ZONES_WIDTH != 0))
ZONEID_SHIFT  macro  include/linux/mm.h  642  #define ZONEID_SHIFT (NODES_SHIFT + ZONES_SHIFT)
ZONEID_PGOFF  macro  include/linux/mm.h  643  #define ZONEID_PGOFF ((NODES_PGOFF < ZONES_PGOFF)? NODES_PGOFF : ZONES_PGOFF)
ZONEID_PGSHIFT  macro  include/linux/mm.h  647  #define ZONEID_PGSHIFT (ZONEID_PGOFF * (ZONEID_SHIFT != 0))
ZONES_MASK  macro  include/linux/mm.h  653  #define ZONES_MASK ((1UL << ZONES_WIDTH) - 1)
NODES_MASK  macro  include/linux/mm.h  654  #define NODES_MASK ((1UL << NODES_WIDTH) - 1)
SECTIONS_MASK  macro  include/linux/mm.h  655  #define SECTIONS_MASK ((1UL << SECTIONS_WIDTH) - 1)
ZONEID_MASK  macro  include/linux/mm.h  656  #define ZONEID_MASK ((1UL << ZONEID_SHIFT) - 1)
page_zonenum  function  include/linux/mm.h  658  static inline enum zone_type page_zonenum(const struct page *page)
page_zone_id  function  include/linux/mm.h  671  static inline int page_zone_id(struct page *page)
zone_to_nid  function  include/linux/mm.h  676  static inline int zone_to_nid(struct zone *zone)
page_to_nid  function  include/linux/mm.h  688  static inline int page_to_nid(const struct page *page)
page_zone  function  include/linux/mm.h  694  static inline struct zone *page_zone(const struct page *page)
set_page_section  function  include/linux/mm.h  700  static inline void set_page_section(struct page *page,unsigned long section)
page_to_section  function  include/linux/mm.h  706  static inline unsigned long page_to_section(const struct page *page)
set_page_zone  function  include/linux/mm.h  712  static inline void set_page_zone(struct page *page,enum zone_type zone)
set_page_node  function  include/linux/mm.h  718  static inline void set_page_node(struct page *page,unsigned long node)
set_page_links  function  include/linux/mm.h  724  static inline void set_page_links(struct page *page,enum zone_type zone,unsigned long node, unsigned long pfn)
lowmem_page_address  function  include/linux/mm.h  739  static __always_inline void *lowmem_page_address(const struct page *page)
HASHED_PAGE_VIRTUAL  macro  include/linux/mm.h  745  #define HASHED_PAGE_VIRTUAL
page_address  macro  include/linux/mm.h  764  #define page_address(page) lowmem_page_address(page)
set_page_address  macro  include/linux/mm.h  765  #define set_page_address(page,address) do { } while(0)
page_address_init  macro  include/linux/mm.h  766  #define page_address_init() do { } while(0)
PAGE_MAPPING_ANON  macro  include/linux/mm.h  785  #define PAGE_MAPPING_ANON 1
PAGE_MAPPING_KSM  macro  include/linux/mm.h  786  #define PAGE_MAPPING_KSM 2
PAGE_MAPPING_FLAGS  macro  include/linux/mm.h  787  #define PAGE_MAPPING_FLAGS (PAGE_MAPPING_ANON | PAGE_MAPPING_KSM)
page_mapping  function  include/linux/mm.h  790  static inline struct address_space *page_mapping(struct page *page)
page_rmapping  function  include/linux/mm.h  803  static inline void *page_rmapping(struct page *page)
PageAnon  function  include/linux/mm.h  808  static inline int PageAnon(struct page *page)
page_index  function  include/linux/mm.h  817  static inline pgoff_t page_index(struct page *page)
page_mapped  function  include/linux/mm.h  827  static inline int page_mapped(struct page *page)
VM_FAULT_MINOR  macro  include/linux/mm.h  838  #define VM_FAULT_MINOR 0
VM_FAULT_OOM  macro  include/linux/mm.h  840  #define VM_FAULT_OOM 0x0001
VM_FAULT_SIGBUS  macro  include/linux/mm.h  841  #define VM_FAULT_SIGBUS 0x0002
VM_FAULT_MAJOR  macro  include/linux/mm.h  842  #define VM_FAULT_MAJOR 0x0004
VM_FAULT_WRITE  macro  include/linux/mm.h  843  #define VM_FAULT_WRITE 0x0008
VM_FAULT_HWPOISON  macro  include/linux/mm.h  844  #define VM_FAULT_HWPOISON 0x0010
VM_FAULT_HWPOISON_LARGE  macro  include/linux/mm.h  845  #define VM_FAULT_HWPOISON_LARGE 0x0020
VM_FAULT_NOPAGE  macro  include/linux/mm.h  847  #define VM_FAULT_NOPAGE 0x0100
VM_FAULT_LOCKED  macro  include/linux/mm.h  848  #define VM_FAULT_LOCKED 0x0200
VM_FAULT_RETRY  macro  include/linux/mm.h  849  #define VM_FAULT_RETRY 0x0400
VM_FAULT_HWPOISON_LARGE_MASK  macro  include/linux/mm.h  851  #define VM_FAULT_HWPOISON_LARGE_MASK 0xf000
VM_FAULT_ERROR  macro  include/linux/mm.h  853  #define VM_FAULT_ERROR (VM_FAULT_OOM | VM_FAULT_SIGBUS | VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE)
VM_FAULT_SET_HINDEX  macro  include/linux/mm.h  857  #define VM_FAULT_SET_HINDEX(x) ((x) << 12)
VM_FAULT_GET_HINDEX  macro  include/linux/mm.h  858  #define VM_FAULT_GET_HINDEX(x) (((x) >> 12) & 0xf)
pagefault_out_of_memory  prototype  include/linux/mm.h  863  extern void pagefault_out_of_memory(void);
offset_in_page  macro  include/linux/mm.h  865  #define offset_in_page(p) ((unsigned long)(p) & ~PAGE_MASK)
SHOW_MEM_FILTER_NODES  macro  include/linux/mm.h  871  #define SHOW_MEM_FILTER_NODES (0x0001u)
show_free_areas  prototype  include/linux/mm.h  873  extern void show_free_areas(unsigned int flags);
skip_free_areas_node  prototype  include/linux/mm.h  874  extern bool skip_free_areas_node(unsigned int flags,int nid);
shmem_zero_setup  prototype  include/linux/mm.h  876  int shmem_zero_setup(struct vm_area_struct *);
can_do_mlock  prototype  include/linux/mm.h  878  extern int can_do_mlock(void);
user_shm_lock  prototype  include/linux/mm.h  879  extern int user_shm_lock(size_t,struct user_struct *);
user_shm_unlock  prototype  include/linux/mm.h  880  extern void user_shm_unlock(size_t,struct user_struct *);
zap_details  struct  include/linux/mm.h  885  struct zap_details { struct vm_area_struct *nonlinear_vma; struct address_space *check_mapping; pgoff_t first_index; pgoff_t last_index; };
vm_normal_page  prototype  include/linux/mm.h  892  struct page *vm_normal_page(struct vm_area_struct *vma,unsigned long addr,pte_t pte);
zap_vma_ptes  prototype  include/linux/mm.h  895  int zap_vma_ptes(struct vm_area_struct *vma,unsigned long address,unsigned long size);
zap_page_range  prototype  include/linux/mm.h  897  void zap_page_range(struct vm_area_struct *vma,unsigned long address,unsigned long size, struct zap_details *);
unmap_vmas  prototype  include/linux/mm.h  899  void unmap_vmas(struct mmu_gather *tlb,struct vm_area_struct *start_vma,unsigned long start, unsigned long end);
mm_walk  struct  include/linux/mm.h  918  struct mm_walk { int (*pgd_entry)(pgd_t *, unsigned long, unsigned long, struct mm_walk *); int (*pud_entry)(pud_t *, unsigned long, unsigned long, struct mm_walk *); int (*pmd_entry)(pmd_t *, unsigned long, unsigned long, struct mm_walk *); int (*pte_entry)(pte_t *, unsigned long, unsigned long, struct mm_walk *); int (*pte_hole)(unsigned long, unsigned long, struct mm_walk *); int (*hugetlb_entry)(pte_t *, unsigned long,unsigned long, unsigned long, struct mm_walk *); struct mm_struct *mm; };
walk_page_range  prototype  include/linux/mm.h  930  int walk_page_range(unsigned long addr,unsigned long end,struct mm_walk *walk);
free_pgd_range  prototype  include/linux/mm.h  932  void free_pgd_range(struct mmu_gather *tlb,unsigned long addr,unsigned long end, unsigned long floor, unsigned long ceiling);
copy_page_range  prototype  include/linux/mm.h  934  int copy_page_range(struct mm_struct *dst,struct mm_struct *src,struct vm_area_struct *vma);
unmap_mapping_range  prototype  include/linux/mm.h  936  void unmap_mapping_range(struct address_space *mapping,loff_t const holebegin, loff_t const holelen, int even_cows);
follow_pfn  prototype  include/linux/mm.h  938  int follow_pfn(struct vm_area_struct *vma,unsigned long address,unsigned long *pfn);
follow_phys  prototype  include/linux/mm.h  940  int follow_phys(struct vm_area_struct *vma,unsigned long address,unsigned int flags, unsigned long *prot, resource_size_t *phys);
generic_access_phys  prototype  include/linux/mm.h  942  int generic_access_phys(struct vm_area_struct *vma,unsigned long addr,void *buf, int len, int write);
unmap_shared_mapping_range  function  include/linux/mm.h  945  static inline void unmap_shared_mapping_range(struct address_space *mapping,loff_t const holebegin, loff_t const holelen)
truncate_pagecache  prototype  include/linux/mm.h  951  extern void truncate_pagecache(struct inode *inode,loff_t old,loff_t new);
truncate_setsize  prototype  include/linux/mm.h  952  extern void truncate_setsize(struct inode *inode,loff_t newsize);
vmtruncate  prototype  include/linux/mm.h  953  extern int vmtruncate(struct inode *inode,loff_t offset);
truncate_pagecache_range  prototype  include/linux/mm.h  954  void truncate_pagecache_range(struct inode *inode,loff_t offset,loff_t end);
truncate_inode_page  prototype  include/linux/mm.h  955  int truncate_inode_page(struct address_space *mapping,struct page *page);
generic_error_remove_page  prototype  include/linux/mm.h  956  int generic_error_remove_page(struct address_space *mapping,struct page *page);
invalidate_inode_page  prototype  include/linux/mm.h  957  int invalidate_inode_page(struct page *page);
handle_mm_fault  function  include/linux/mm.h  965  static inline int handle_mm_fault(struct mm_struct *mm,struct vm_area_struct *vma, unsigned long address,unsigned int flags)
fixup_user_fault  function  include/linux/mm.h  973  static inline int fixup_user_fault(struct task_struct *tsk,struct mm_struct *mm, unsigned long address,unsigned int fault_flags)
make_pages_present  prototype  include/linux/mm.h  983  extern int make_pages_present(unsigned long addr,unsigned long end);
access_process_vm  prototype  include/linux/mm.h  984  extern int access_process_vm(struct task_struct *tsk,unsigned long addr,void *buf,int len,int write);
access_remote_vm  prototype  include/linux/mm.h  985  extern int access_remote_vm(struct mm_struct *mm,unsigned long addr,void *buf, int len, int write);
__get_user_pages  prototype  include/linux/mm.h  988  int __get_user_pages(struct task_struct *tsk,struct mm_struct *mm,unsigned long start, int len, unsigned int foll_flags,struct page **pages, struct vm_area_struct **vmas,int *nonblocking);
get_user_pages  prototype  include/linux/mm.h  992  int get_user_pages(struct task_struct *tsk,struct mm_struct *mm,unsigned long start, int nr_pages, int write, int force,struct page **pages, struct vm_area_struct **vmas);
get_user_pages_fast  prototype  include/linux/mm.h  995  int get_user_pages_fast(unsigned long start,int nr_pages,int write,struct page **pages);
get_dump_page  prototype  include/linux/mm.h  997  struct page *get_dump_page(unsigned long addr);
try_to_release_page  prototype  include/linux/mm.h  999  extern int try_to_release_page(struct page * page,gfp_t gfp_mask);
do_invalidatepage  prototype  include/linux/mm.h  1000  extern void do_invalidatepage(struct page *page,unsigned long offset);
__set_page_dirty_nobuffers  prototype  include/linux/mm.h  1002  int __set_page_dirty_nobuffers(struct page *page);
__set_page_dirty_no_writeback  prototype  include/linux/mm.h  1003  int __set_page_dirty_no_writeback(struct page *page);
redirty_page_for_writepage  prototype  include/linux/mm.h  1004  int redirty_page_for_writepage(struct writeback_control *wbc,struct page *page);
account_page_dirtied  prototype  include/linux/mm.h  1006  void account_page_dirtied(struct page *page,struct address_space *mapping);
account_page_writeback  prototype  include/linux/mm.h  1007  void account_page_writeback(struct page *page);
set_page_dirty  prototype  include/linux/mm.h  1008  int set_page_dirty(struct page *page);
set_page_dirty_lock  prototype  include/linux/mm.h  1009  int set_page_dirty_lock(struct page *page);
clear_page_dirty_for_io  prototype  include/linux/mm.h  1010  int clear_page_dirty_for_io(struct page *page);
vma_growsdown  function  include/linux/mm.h  1013  static inline int vma_growsdown(struct vm_area_struct *vma,unsigned long addr)
stack_guard_page_start  function  include/linux/mm.h  1018  static inline int stack_guard_page_start(struct vm_area_struct *vma,unsigned long addr)
vma_growsup  function  include/linux/mm.h  1027  static inline int vma_growsup(struct vm_area_struct *vma,unsigned long addr)
stack_guard_page_end  function  include/linux/mm.h  1032  static inline int stack_guard_page_end(struct vm_area_struct *vma,unsigned long addr)
vm_is_stack  prototype  include/linux/mm.h  1041  vm_is_stack(struct task_struct *task,struct vm_area_struct *vma,int in_group);
move_page_tables  prototype  include/linux/mm.h  1043  extern unsigned long move_page_tables(struct vm_area_struct *vma,unsigned long old_addr, struct vm_area_struct *new_vma,unsigned long new_addr, unsigned long len);
do_mremap  prototype  include/linux/mm.h  1046  extern unsigned long do_mremap(unsigned long addr,unsigned long old_len, unsigned long new_len,unsigned long flags, unsigned long new_addr);
mprotect_fixup  prototype  include/linux/mm.h  1049  extern int mprotect_fixup(struct vm_area_struct *vma,struct vm_area_struct **pprev, unsigned long start,unsigned long end, unsigned long newflags);
__get_user_pages_fast  prototype  include/linux/mm.h  1056  int __get_user_pages_fast(unsigned long start,int nr_pages,int write,struct page **pages);
get_mm_counter  function  include/linux/mm.h  1061  static inline unsigned long get_mm_counter(struct mm_struct *mm,int member)
add_mm_counter  function  include/linux/mm.h  1076  static inline void add_mm_counter(struct mm_struct *mm,int member,long value)
inc_mm_counter  function  include/linux/mm.h  1081  static inline void inc_mm_counter(struct mm_struct *mm,int member)
dec_mm_counter  function  include/linux/mm.h  1086  static inline void dec_mm_counter(struct mm_struct *mm,int member)
get_mm_rss  function  include/linux/mm.h  1091  static inline unsigned long get_mm_rss(struct mm_struct *mm)
get_mm_hiwater_rss  function  include/linux/mm.h  1097  static inline unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
get_mm_hiwater_vm  function  include/linux/mm.h  1102  static inline unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
update_hiwater_rss  function  include/linux/mm.h  1107  static inline void update_hiwater_rss(struct mm_struct *mm)
update_hiwater_vm  function  include/linux/mm.h  1115  static inline void update_hiwater_vm(struct mm_struct *mm)
setmax_mm_hiwater_rss  function  include/linux/mm.h  1121  static inline void setmax_mm_hiwater_rss(unsigned long *maxrss,struct mm_struct *mm)
sync_mm_rss  function  include/linux/mm.h  1133  static inline void sync_mm_rss(struct mm_struct *mm)
vma_wants_writenotify  prototype  include/linux/mm.h  1138  int vma_wants_writenotify(struct vm_area_struct *vma);
__get_locked_pte  prototype  include/linux/mm.h  1140  extern pte_t *__get_locked_pte(struct mm_struct *mm,unsigned long addr,spinlock_t **ptl);
get_locked_pte  function  include/linux/mm.h  1142  static inline pte_t *get_locked_pte(struct mm_struct *mm,unsigned long addr,spinlock_t **ptl)
__pud_alloc  prototype  include/linux/mm.h  1157  int __pud_alloc(struct mm_struct *mm,pgd_t *pgd,unsigned long address);
__pmd_alloc  prototype  include/linux/mm.h  1167  int __pmd_alloc(struct mm_struct *mm,pud_t *pud,unsigned long address);
__pte_alloc  prototype  include/linux/mm.h  1170  int __pte_alloc(struct mm_struct *mm,struct vm_area_struct *vma,pmd_t *pmd, unsigned long address);
__pte_alloc_kernel  prototype  include/linux/mm.h  1172  int __pte_alloc_kernel(pmd_t *pmd,unsigned long address);
pud_alloc  function  include/linux/mm.h  1179  static inline pud_t *pud_alloc(struct mm_struct *mm,pgd_t *pgd,unsigned long address)
pmd_alloc  function  include/linux/mm.h  1185  static inline pmd_t *pmd_alloc(struct mm_struct *mm,pud_t *pud,unsigned long address)
__pte_lockptr  macro  include/linux/mm.h  1199  #define __pte_lockptr(page) &((page)->ptl)
pte_lock_init  macro  include/linux/mm.h  1209  #define pte_lock_init(page) do {} while (0)
pte_lock_deinit  macro  include/linux/mm.h  1210  #define pte_lock_deinit(page) do {} while (0)
pte_lockptr  macro  include/linux/mm.h  1211  #define pte_lockptr(mm,pmd) ({(void)(pmd); &(mm)->page_table_lock;})
pgtable_page_ctor  function  include/linux/mm.h  1214  static inline void pgtable_page_ctor(struct page *page)
pgtable_page_dtor  function  include/linux/mm.h  1220  static inline void pgtable_page_dtor(struct page *page)
pte_offset_map_lock  macro  include/linux/mm.h  1226  #define pte_offset_map_lock(mm,pmd,address,ptlp) ({ spinlock_t *__ptl = pte_lockptr(mm, pmd); pte_t *__pte = pte_offset_map(pmd, address); *(ptlp) = __ptl; spin_lock(__ptl); __pte; })
pte_unmap_unlock  macro  include/linux/mm.h  1235  #define pte_unmap_unlock(pte,ptl) do { spin_unlock(ptl); pte_unmap(pte); } while (0)
pte_alloc_map  macro  include/linux/mm.h  1240  #define pte_alloc_map(mm,vma,pmd,address) ((unlikely(pmd_none(*(pmd))) && __pte_alloc(mm, vma, pmd, address))? NULL: pte_offset_map(pmd, address))
pte_alloc_map_lock  macro  include/linux/mm.h  1245  #define pte_alloc_map_lock(mm,pmd,address,ptlp) ((unlikely(pmd_none(*(pmd))) && __pte_alloc(mm, NULL, pmd, address))? NULL: pte_offset_map_lock(mm, pmd, address, ptlp))
pte_alloc_kernel  macro  include/linux/mm.h  1250  #define pte_alloc_kernel(pmd,address) ((unlikely(pmd_none(*(pmd))) && __pte_alloc_kernel(pmd, address))? NULL: pte_offset_kernel(pmd, address))
free_area_init  prototype  include/linux/mm.h  1254  extern void free_area_init(unsigned long * zones_size);
free_area_init_node  prototype  include/linux/mm.h  1255  extern void free_area_init_node(int nid,unsigned long * zones_size,unsigned long zone_start_pfn, unsigned long *zholes_size);
free_initmem  prototype  include/linux/mm.h  1257  extern void free_initmem(void);
free_area_init_nodes  prototype  include/linux/mm.h  1286  extern void free_area_init_nodes(unsigned long *max_zone_pfn);
node_map_pfn_alignment  prototype  include/linux/mm.h  1287  unsigned long node_map_pfn_alignment(void);
__absent_pages_in_range  prototype  include/linux/mm.h  1288  unsigned long __absent_pages_in_range(int nid,unsigned long start_pfn,unsigned long end_pfn);
absent_pages_in_range  prototype  include/linux/mm.h  1290  extern unsigned long absent_pages_in_range(unsigned long start_pfn,unsigned long end_pfn);
get_pfn_range_for_nid  prototype  include/linux/mm.h  1292  extern void get_pfn_range_for_nid(unsigned int nid,unsigned long *start_pfn, unsigned long *end_pfn);
find_min_pfn_with_active_regions  prototype  include/linux/mm.h  1294  extern unsigned long find_min_pfn_with_active_regions(void);
free_bootmem_with_active_regions  prototype  include/linux/mm.h  1295  extern void free_bootmem_with_active_regions(int nid,unsigned long max_low_pfn);
sparse_memory_present_with_active_regions  prototype  include/linux/mm.h  1297  extern void sparse_memory_present_with_active_regions(int nid);
__early_pfn_to_nid  prototype  include/linux/mm.h  1312  extern int __meminit __early_pfn_to_nid(unsigned long pfn);
set_dma_reserve  prototype  include/linux/mm.h  1316  extern void set_dma_reserve(unsigned long new_dma_reserve);
memmap_init_zone  prototype  include/linux/mm.h  1317  extern void memmap_init_zone(unsigned long,int,unsigned long,unsigned long, enum memmap_context);
setup_per_zone_wmarks  prototype  include/linux/mm.h  1319  extern void setup_per_zone_wmarks(void);
init_per_zone_wmark_min  prototype  include/linux/mm.h  1320  extern int __meminit init_per_zone_wmark_min(void);
mem_init  prototype  include/linux/mm.h  1321  extern void mem_init(void);
mmap_init  prototype  include/linux/mm.h  1322  extern void __init mmap_init(void);
show_mem  prototype  include/linux/mm.h  1323  extern void show_mem(unsigned int flags);
si_meminfo  prototype  include/linux/mm.h  1324  extern void si_meminfo(struct sysinfo * val);
si_meminfo_node  prototype  include/linux/mm.h  1325  extern void si_meminfo_node(struct sysinfo *val,int nid);
warn_alloc_failed  prototype  include/linux/mm.h  1329  void warn_alloc_failed(gfp_t gfp_mask,int order,const char *fmt,...);
setup_per_cpu_pageset  prototype  include/linux/mm.h  1331  extern void setup_per_cpu_pageset(void);
zone_pcp_update  prototype  include/linux/mm.h  1333  extern void zone_pcp_update(struct zone *zone);
nommu_shrink_inode_mappings  prototype  include/linux/mm.h  1337  extern int nommu_shrink_inode_mappings(struct inode *,size_t,size_t);
vma_prio_tree_add  prototype  include/linux/mm.h  1340  void vma_prio_tree_add(struct vm_area_struct *,struct vm_area_struct *old);
vma_prio_tree_insert  prototype  include/linux/mm.h  1341  void vma_prio_tree_insert(struct vm_area_struct *,struct prio_tree_root *);
vma_prio_tree_remove  prototype  include/linux/mm.h  1342  void vma_prio_tree_remove(struct vm_area_struct *,struct prio_tree_root *);
vma_prio_tree_next  prototype  include/linux/mm.h  1343  struct vm_area_struct *vma_prio_tree_next(struct vm_area_struct *vma,struct prio_tree_iter *iter);
vma_prio_tree_foreach  macro  include/linux/mm.h  1346  #define vma_prio_tree_foreach(vma,iter,root,begin,end) for (prio_tree_iter_init(iter, root, begin, end), vma = NULL; (vma = vma_prio_tree_next(vma, iter)); )
vma_nonlinear_insert  function  include/linux/mm.h  1350  static inline void vma_nonlinear_insert(struct vm_area_struct *vma,struct list_head *list)
__vm_enough_memory  prototype  include/linux/mm.h  1358  extern int __vm_enough_memory(struct mm_struct *mm,long pages,int cap_sys_admin);
vma_adjust  prototype  include/linux/mm.h  1359  extern int vma_adjust(struct vm_area_struct *vma,unsigned long start,unsigned long end, pgoff_t pgoff, struct vm_area_struct *insert);
vma_merge  prototype  include/linux/mm.h  1361  extern struct vm_area_struct *vma_merge(struct mm_struct *,struct vm_area_struct *prev, unsigned long addr, unsigned long end,unsigned long vm_flags, struct anon_vma *, struct file *, pgoff_t,struct mempolicy *);
find_mergeable_anon_vma  prototype  include/linux/mm.h  1365  extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
split_vma  prototype  include/linux/mm.h  1366  extern int split_vma(struct mm_struct *,struct vm_area_struct *, unsigned long addr, int new_below);
insert_vm_struct  prototype  include/linux/mm.h  1368  extern int insert_vm_struct(struct mm_struct *,struct vm_area_struct *);
__vma_link_rb  prototype  include/linux/mm.h  1369  extern void __vma_link_rb(struct mm_struct *,struct vm_area_struct *,struct rb_node **, struct rb_node *);
unlink_file_vma  prototype  include/linux/mm.h  1371  extern void unlink_file_vma(struct vm_area_struct *);
copy_vma  prototype  include/linux/mm.h  1372  extern struct vm_area_struct *copy_vma(struct vm_area_struct **,unsigned long addr, unsigned long len, pgoff_t pgoff);
exit_mmap  prototype  include/linux/mm.h  1374  extern void exit_mmap(struct mm_struct *);
mm_take_all_locks  prototype  include/linux/mm.h  1376  extern int mm_take_all_locks(struct mm_struct *mm);
mm_drop_all_locks  prototype  include/linux/mm.h  1377  extern void mm_drop_all_locks(struct mm_struct *mm);
added_exe_file_vma  prototype  include/linux/mm.h  1380  extern void added_exe_file_vma(struct mm_struct *mm);
removed_exe_file_vma  prototype  include/linux/mm.h  1381  extern void removed_exe_file_vma(struct mm_struct *mm);
set_mm_exe_file  prototype  include/linux/mm.h  1382  extern void set_mm_exe_file(struct mm_struct *mm,struct file *new_exe_file);
get_mm_exe_file  prototype  include/linux/mm.h  1383  extern struct file *get_mm_exe_file(struct mm_struct *mm);
may_expand_vm  prototype  include/linux/mm.h  1385  extern int may_expand_vm(struct mm_struct *mm,unsigned long npages);
install_special_mapping  prototype  include/linux/mm.h  1386  extern int install_special_mapping(struct mm_struct *mm,unsigned long addr, unsigned long len,unsigned long flags, struct page **pages);
get_unmapped_area  prototype  include/linux/mm.h  1390  extern unsigned long get_unmapped_area(struct file *,unsigned long,unsigned long,unsigned long,unsigned long);
mmap_region  prototype  include/linux/mm.h  1392  extern unsigned long mmap_region(struct file *file,unsigned long addr,unsigned long len, unsigned long flags,vm_flags_t vm_flags, unsigned long pgoff);
do_mmap_pgoff  prototype  include/linux/mm.h  1395  extern unsigned long do_mmap_pgoff(struct file *,unsigned long,unsigned long, unsigned long,unsigned long, unsigned long);
do_munmap  prototype  include/linux/mm.h  1398  extern int do_munmap(struct mm_struct *,unsigned long,size_t);
vm_brk  prototype  include/linux/mm.h  1401  extern unsigned long vm_brk(unsigned long,unsigned long);
vm_munmap  prototype  include/linux/mm.h  1402  extern int vm_munmap(unsigned long,size_t);
vm_mmap  prototype  include/linux/mm.h  1403  extern unsigned long vm_mmap(struct file *,unsigned long,unsigned long, unsigned long,unsigned long, unsigned long);
truncate_inode_pages  prototype  include/linux/mm.h  1408  extern void truncate_inode_pages(struct address_space *,loff_t);
truncate_inode_pages_range  prototype  include/linux/mm.h  1409  extern void truncate_inode_pages_range(struct address_space *,loff_t lstart, loff_t lend);
filemap_fault  prototype  include/linux/mm.h  1413  extern int filemap_fault(struct vm_area_struct *,struct vm_fault *);
write_one_page  prototype  include/linux/mm.h  1416  int write_one_page(struct page *page,int wait);
task_dirty_inc  prototype  include/linux/mm.h  1417  void task_dirty_inc(struct task_struct *tsk);
VM_MAX_READAHEAD  macro  include/linux/mm.h  1420  #define VM_MAX_READAHEAD 128
VM_MIN_READAHEAD  macro  include/linux/mm.h  1421  #define VM_MIN_READAHEAD 16
force_page_cache_readahead  prototype  include/linux/mm.h  1423  int force_page_cache_readahead(struct address_space *mapping,struct file *filp,pgoff_t offset, unsigned long nr_to_read);
page_cache_sync_readahead  prototype  include/linux/mm.h  1426  void page_cache_sync_readahead(struct address_space *mapping,struct file_ra_state *ra,struct file *filp,pgoff_t offset,unsigned long size);
page_cache_async_readahead  prototype  include/linux/mm.h  1432  void page_cache_async_readahead(struct address_space *mapping,struct file_ra_state *ra,struct file *filp,struct page *pg,pgoff_t offset,unsigned long size);
max_sane_readahead  prototype  include/linux/mm.h  1439  unsigned long max_sane_readahead(unsigned long nr);
ra_submit  prototype  include/linux/mm.h  1440  unsigned long ra_submit(struct file_ra_state *ra,struct address_space *mapping,struct file *filp);
expand_stack  prototype  include/linux/mm.h  1445  extern int expand_stack(struct vm_area_struct *vma,unsigned long address);
expand_downwards  prototype  include/linux/mm.h  1448  extern int expand_downwards(struct vm_area_struct *vma,unsigned long address);
expand_upwards  macro  include/linux/mm.h  1453  #define expand_upwards(vma,address) do { } while (0)
find_vma  prototype  include/linux/mm.h  1457  extern struct vm_area_struct * find_vma(struct mm_struct * mm,unsigned long addr);
find_vma_prev  prototype  include/linux/mm.h  1458  extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm,unsigned long addr,struct vm_area_struct **pprev);
find_vma_intersection  function  include/linux/mm.h  1463  static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * mm,unsigned long start_addr,unsigned long end_addr)
vma_pages  function  include/linux/mm.h  1472  static inline unsigned long vma_pages(struct vm_area_struct *vma)
find_exact_vma  function  include/linux/mm.h  1478  static inline struct vm_area_struct *find_exact_vma(struct mm_struct *mm,unsigned long vm_start, unsigned long vm_end)
vm_get_page_prot  function  include/linux/mm.h  1492  static inline pgprot_t vm_get_page_prot(unsigned long vm_flags)
find_extend_vma  prototype  include/linux/mm.h  1498  struct vm_area_struct *find_extend_vma(struct mm_struct *,unsigned long addr);
remap_pfn_range  prototype  include/linux/mm.h  1499  int remap_pfn_range(struct vm_area_struct *,unsigned long addr,unsigned long pfn, unsigned long size, pgprot_t);
vm_insert_page  prototype  include/linux/mm.h  1501  int vm_insert_page(struct vm_area_struct *,unsigned long addr,struct page *);
vm_insert_pfn  prototype  include/linux/mm.h  1502  int vm_insert_pfn(struct vm_area_struct *vma,unsigned long addr,unsigned long pfn);
vm_insert_mixed  prototype  include/linux/mm.h  1504  int vm_insert_mixed(struct vm_area_struct *vma,unsigned long addr,unsigned long pfn);
follow_page  prototype  include/linux/mm.h  1507  struct page *follow_page(struct vm_area_struct *,unsigned long address,unsigned int foll_flags);
FOLL_WRITE  macro  include/linux/mm.h  1509  #define FOLL_WRITE 0x01
FOLL_TOUCH  macro  include/linux/mm.h  1510  #define FOLL_TOUCH 0x02
FOLL_GET  macro  include/linux/mm.h  1511  #define FOLL_GET 0x04
FOLL_DUMP  macro  include/linux/mm.h  1512  #define FOLL_DUMP 0x08
FOLL_FORCE  macro  include/linux/mm.h  1513  #define FOLL_FORCE 0x10
FOLL_NOWAIT  macro  include/linux/mm.h  1514  #define FOLL_NOWAIT 0x20
FOLL_MLOCK  macro  include/linux/mm.h  1516  #define FOLL_MLOCK 0x40
FOLL_SPLIT  macro  include/linux/mm.h  1517  #define FOLL_SPLIT 0x80
FOLL_HWPOISON  macro  include/linux/mm.h  1518  #define FOLL_HWPOISON 0x100
apply_to_page_range  prototype  include/linux/mm.h  1522  extern int apply_to_page_range(struct mm_struct *mm,unsigned long address,unsigned long size, pte_fn_t fn, void *data);
vm_stat_account  function  include/linux/mm.h  1528  static inline void vm_stat_account(struct mm_struct *mm,unsigned long flags, struct file *file, long pages)
kernel_map_pages  function  include/linux/mm.h  1541  kernel_map_pages(struct page *page,int numpages,int enable) {}
kernel_page_present  function  include/linux/mm.h  1543  static inline bool kernel_page_present(struct page *page) { return true; }
get_gate_vma  prototype  include/linux/mm.h  1547  extern struct vm_area_struct *get_gate_vma(struct mm_struct *mm);
in_gate_area_no_mm  prototype  include/linux/mm.h  1552  int in_gate_area_no_mm(unsigned long addr);
in_gate_area  macro  include/linux/mm.h  1553  #define in_gate_area(mm,addr) ({(void)mm; in_gate_area_no_mm(addr);})
drop_caches_sysctl_handler  prototype  include/linux/mm.h  1556  int drop_caches_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
shrink_slab  prototype  include/linux/mm.h  1558  unsigned long shrink_slab(struct shrink_control *shrink,unsigned long nr_pages_scanned,unsigned long lru_pages);
randomize_va_space  macro  include/linux/mm.h  1563  #define randomize_va_space 0
arch_vma_name  prototype  include/linux/mm.h  1568  const char * arch_vma_name(struct vm_area_struct *vma);
print_vma_addr  prototype  include/linux/mm.h  1569  void print_vma_addr(char *prefix,unsigned long rip);
sparse_mem_maps_populate_node  prototype  include/linux/mm.h  1571  void sparse_mem_maps_populate_node(struct page **map_map,unsigned long pnum_begin,unsigned long pnum_end,unsigned long map_count,int nodeid);
sparse_mem_map_populate  prototype  include/linux/mm.h  1577  struct page *sparse_mem_map_populate(unsigned long pnum,int nid);
vmemmap_pgd_populate  prototype  include/linux/mm.h  1578  pgd_t *vmemmap_pgd_populate(unsigned long addr,int node);
vmemmap_pud_populate  prototype  include/linux/mm.h  1579  pud_t *vmemmap_pud_populate(pgd_t *pgd,unsigned long addr,int node);
vmemmap_pmd_populate  prototype  include/linux/mm.h  1580  pmd_t *vmemmap_pmd_populate(pud_t *pud,unsigned long addr,int node);
vmemmap_pte_populate  prototype  include/linux/mm.h  1581  pte_t *vmemmap_pte_populate(pmd_t *pmd,unsigned long addr,int node);
vmemmap_alloc_block  prototype  include/linux/mm.h  1582  void *vmemmap_alloc_block(unsigned long size,int node);
vmemmap_alloc_block_buf  prototype  include/linux/mm.h  1583  void *vmemmap_alloc_block_buf(unsigned long size,int node);
vmemmap_verify  prototype  include/linux/mm.h  1584  void vmemmap_verify(pte_t *,int,unsigned long,unsigned long);
vmemmap_populate_basepages  prototype  include/linux/mm.h  1585  int vmemmap_populate_basepages(struct page *start_page,unsigned long pages, int node);
vmemmap_populate  prototype  include/linux/mm.h  1587  int vmemmap_populate(struct page *start_page,unsigned long pages,int node);
vmemmap_populate_print_last  prototype  include/linux/mm.h  1588  void vmemmap_populate_print_last(void);
mf_flags  enum  include/linux/mm.h  1591  enum mf_flags { MF_COUNT_INCREASED = 1 << 0, MF_ACTION_REQUIRED = 1 << 1, MF_MUST_KILL = 1 << 2, };
memory_failure  prototype  include/linux/mm.h  1596  extern int memory_failure(unsigned long pfn,int trapno,int flags);
memory_failure_queue  prototype  include/linux/mm.h  1597  extern void memory_failure_queue(unsigned long pfn,int trapno,int flags);
unpoison_memory  prototype  include/linux/mm.h  1598  extern int unpoison_memory(unsigned long pfn);
shake_page  prototype  include/linux/mm.h  1601  extern void shake_page(struct page *p,int access);
soft_offline_page  prototype  include/linux/mm.h  1603  extern int soft_offline_page(struct page *page,int flags);
dump_page  prototype  include/linux/mm.h  1605  extern void dump_page(struct page *page);
clear_huge_page  prototype  include/linux/mm.h  1608  extern void clear_huge_page(struct page *page,unsigned long addr,unsigned int pages_per_huge_page);
copy_user_huge_page  prototype  include/linux/mm.h  1611  extern void copy_user_huge_page(struct page *dst,struct page *src,unsigned long addr, struct vm_area_struct *vma,unsigned int pages_per_huge_page);
debug_guardpage_minorder  function  include/linux/mm.h  1629  static inline unsigned int debug_guardpage_minorder(void) { return 0; }
page_is_guard  function  include/linux/mm.h  1630  static inline bool page_is_guard(struct page *page) { return false; }
_ASM_X86_PLATFORM_H  macro  arch/x86/include/asm/x86_init.h  2  #define _ASM_X86_PLATFORM_H
x86_init_mpparse  struct  arch/x86/include/asm/x86_init.h  23  struct x86_init_mpparse { void (*mpc_record)(unsigned int mode); void (*setup_ioapic_ids)(void); int (*mpc_apic_id)(struct mpc_cpu *m); void (*smp_read_mpc_oem)(struct mpc_table *mpc); void (*mpc_oem_pci_bus)(struct mpc_bus *m); void (*mpc_oem_bus_info)(struct mpc_bus *m, char *name); void (*find_smp_config)(void); void (*get_smp_config)(unsigned int early); };
x86_init_resources  struct  arch/x86/include/asm/x86_init.h  42  struct x86_init_resources { void (*probe_roms)(void); void (*reserve_resources)(void); char *(*memory_setup)(void); };
x86_init_irqs  struct  arch/x86/include/asm/x86_init.h  55  struct x86_init_irqs { void (*pre_vector_init)(void); void (*intr_init)(void); void (*trap_init)(void); };
x86_init_oem  struct  arch/x86/include/asm/x86_init.h  66  struct x86_init_oem { void (*arch_setup)(void); void (*banner)(void); };
x86_init_mapping  struct  arch/x86/include/asm/x86_init.h  78  struct x86_init_mapping { void (*pagetable_reserve)(u64 start, u64 end); };
x86_init_paging  struct  arch/x86/include/asm/x86_init.h  87  struct x86_init_paging { void (*pagetable_setup_start)(pgd_t *base); void (*pagetable_setup_done)(pgd_t *base); };
x86_init_timers  struct  arch/x86/include/asm/x86_init.h  100  struct x86_init_timers { void (*setup_percpu_clockev)(void); void (*tsc_pre_init)(void); void (*timer_init)(void); void (*wallclock_init)(void); };
x86_init_iommu  struct  arch/x86/include/asm/x86_init.h  111  struct x86_init_iommu { int (*iommu_init)(void); };
x86_init_pci  struct  arch/x86/include/asm/x86_init.h  122  struct x86_init_pci { int (*arch_init)(void); int (*init)(void); void (*init_irq)(void); void (*fixup_irqs)(void); };
x86_init_ops  struct  arch/x86/include/asm/x86_init.h  133  struct x86_init_ops { struct x86_init_resources resources; struct x86_init_mpparse mpparse; struct x86_init_irqs irqs; struct x86_init_oem oem; struct x86_init_mapping mapping; struct x86_init_paging paging; struct x86_init_timers timers; struct x86_init_iommu iommu; struct x86_init_pci pci; };
x86_cpuinit_ops  struct  arch/x86/include/asm/x86_init.h  150  struct x86_cpuinit_ops { void (*setup_percpu_clockev)(void); void (*early_percpu_clock_init)(void); void (*fixup_cpu_id)(struct cpuinfo_x86 *c, int node); };
x86_platform_ops  struct  arch/x86/include/asm/x86_init.h  168  struct x86_platform_ops { unsigned long (*calibrate_tsc)(void); void (*wallclock_init)(void); unsigned long (*get_wallclock)(void); int (*set_wallclock)(unsigned long nowtime); void (*iommu_shutdown)(void); bool (*is_untracked_pat_range)(u64 start, u64 end); void (*nmi_init)(void); unsigned char (*get_nmi_reason)(void); int (*i8042_detect)(void); void (*save_sched_clock_state)(void); void (*restore_sched_clock_state)(void); };
x86_msi_ops  struct  arch/x86/include/asm/x86_init.h  184  struct x86_msi_ops { int (*setup_msi_irqs)(struct pci_dev *dev, int nvec, int type); void (*teardown_msi_irq)(unsigned int irq); void (*teardown_msi_irqs)(struct pci_dev *dev); void (*restore_msi_irqs)(struct pci_dev *dev, int irq); };
x86_io_apic_ops  struct  arch/x86/include/asm/x86_init.h  191  struct x86_io_apic_ops { void (*init) (void); unsigned int (*read) (unsigned int apic, unsigned int reg); void (*write) (unsigned int apic, unsigned int reg, unsigned int value); void (*modify)(unsigned int apic, unsigned int reg, unsigned int value); };
x86_init_noop  prototype  arch/x86/include/asm/x86_init.h  203  extern void x86_init_noop(void);
x86_init_uint_noop  prototype  arch/x86/include/asm/x86_init.h  204  extern void x86_init_uint_noop(unsigned int unused);
_ASM_X86_PCI_64_H  macro  arch/x86/include/asm/pci_64.h  2  #define _ASM_X86_PCI_64_H
pci_iommu  function  arch/x86/include/asm/pci_64.h  7  static inline void *pci_iommu(struct pci_bus *bus)
set_pci_iommu  function  arch/x86/include/asm/pci_64.h  13  static inline void set_pci_iommu(struct pci_bus *bus,void *val)
_ASM_GENERIC_PCI_DMA_COMPAT_H  macro  include/asm-generic/pci-dma-compat.h  5  #define _ASM_GENERIC_PCI_DMA_COMPAT_H
pci_dma_supported  function  include/asm-generic/pci-dma-compat.h  10  pci_dma_supported(struct pci_dev *hwdev,u64 mask)
pci_alloc_consistent  function  include/asm-generic/pci-dma-compat.h  16  pci_alloc_consistent(struct pci_dev *hwdev,size_t size,dma_addr_t *dma_handle)
pci_free_consistent  function  include/asm-generic/pci-dma-compat.h  23  pci_free_consistent(struct pci_dev *hwdev,size_t size,void *vaddr, dma_addr_t dma_handle)
pci_map_single  function  include/asm-generic/pci-dma-compat.h  30  pci_map_single(struct pci_dev *hwdev,void *ptr,size_t size,int direction)
pci_unmap_single  function  include/asm-generic/pci-dma-compat.h  36  pci_unmap_single(struct pci_dev *hwdev,dma_addr_t dma_addr,size_t size, int direction)
pci_map_page  function  include/asm-generic/pci-dma-compat.h  43  pci_map_page(struct pci_dev *hwdev,struct page *page,unsigned long offset, size_t size, int direction)
pci_unmap_page  function  include/asm-generic/pci-dma-compat.h  50  pci_unmap_page(struct pci_dev *hwdev,dma_addr_t dma_address,size_t size, int direction)
pci_map_sg  function  include/asm-generic/pci-dma-compat.h  57  pci_map_sg(struct pci_dev *hwdev,struct scatterlist *sg,int nents, int direction)
pci_unmap_sg  function  include/asm-generic/pci-dma-compat.h  64  pci_unmap_sg(struct pci_dev *hwdev,struct scatterlist *sg,int nents, int direction)
pci_dma_sync_single_for_cpu  function  include/asm-generic/pci-dma-compat.h  71  pci_dma_sync_single_for_cpu(struct pci_dev *hwdev,dma_addr_t dma_handle,size_t size, int direction)
pci_dma_sync_single_for_device  function  include/asm-generic/pci-dma-compat.h  78  pci_dma_sync_single_for_device(struct pci_dev *hwdev,dma_addr_t dma_handle,size_t size, int direction)
pci_dma_sync_sg_for_cpu  function  include/asm-generic/pci-dma-compat.h  85  pci_dma_sync_sg_for_cpu(struct pci_dev *hwdev,struct scatterlist *sg,int nelems, int direction)
pci_dma_sync_sg_for_device  function  include/asm-generic/pci-dma-compat.h  92  pci_dma_sync_sg_for_device(struct pci_dev *hwdev,struct scatterlist *sg,int nelems, int direction)
pci_dma_mapping_error  function  include/asm-generic/pci-dma-compat.h  99  pci_dma_mapping_error(struct pci_dev *pdev,dma_addr_t dma_addr)
_ASM_GENERIC_PCI_H  macro  include/asm-generic/pci.h  7  #define _ASM_GENERIC_PCI_H
pcibios_select_root  function  include/asm-generic/pci.h  10  pcibios_select_root(struct pci_dev *pdev,struct resource *res)
pci_get_legacy_ide_irq  function  include/asm-generic/pci.h  23  static inline int pci_get_legacy_ide_irq(struct pci_dev *dev,int channel)
__ASM_GENERIC_DELAY_H  macro  include/asm-generic/delay.h  2  #define __ASM_GENERIC_DELAY_H
__bad_udelay  prototype  include/asm-generic/delay.h  5  extern void __bad_udelay(void);
__bad_ndelay  prototype  include/asm-generic/delay.h  6  extern void __bad_ndelay(void);
__udelay  prototype  include/asm-generic/delay.h  8  extern void __udelay(unsigned long usecs);
__ndelay  prototype  include/asm-generic/delay.h  9  extern void __ndelay(unsigned long nsecs);
__const_udelay  prototype  include/asm-generic/delay.h  10  extern void __const_udelay(unsigned long xloops);
__delay  prototype  include/asm-generic/delay.h  11  extern void __delay(unsigned long loops);
udelay  macro  include/asm-generic/delay.h  19  #define udelay(n) ({ if (__builtin_constant_p(n)) { if ((n) / 20000 >= 1) __bad_udelay(); else __const_udelay((n) * 0x10c7ul); } else { __udelay(n); } })
_LINUX_SOCKET_H  macro  include/linux/socket.h  2  #define _LINUX_SOCKET_H
_K_SS_MAXSIZE  macro  include/linux/socket.h  7  #define _K_SS_MAXSIZE 128
_K_SS_ALIGNSIZE  macro  include/linux/socket.h  8  #define _K_SS_ALIGNSIZE (__alignof__ (struct sockaddr *))
__kernel_sockaddr_storage  struct  include/linux/socket.h  13  struct __kernel_sockaddr_storage { __kernel_sa_family_t ss_family; char __data[_K_SS_MAXSIZE - sizeof(unsigned short)]; } __attribute__ ((aligned(_K_SS_ALIGNSIZE)));
__sockaddr_check_size  macro  include/linux/socket.h  32  #define __sockaddr_check_size(size) BUILD_BUG_ON(((size) > sizeof(struct __kernel_sockaddr_storage)))
socket_seq_show  prototype  include/linux/socket.h  37  extern void socket_seq_show(struct seq_file *seq);
sockaddr  struct  include/linux/socket.h  46  struct sockaddr { sa_family_t sa_family; char sa_data[14]; };
linger  struct  include/linux/socket.h  51  struct linger { int l_onoff; int l_linger; };
sockaddr_storage  macro  include/linux/socket.h  56  #define sockaddr_storage __kernel_sockaddr_storage
msghdr  struct  include/linux/socket.h  64  struct msghdr { void * msg_name; int msg_namelen; struct iovec * msg_iov; __kernel_size_t msg_iovlen; void * msg_control; __kernel_size_t msg_controllen; unsigned int msg_flags; };
mmsghdr  struct  include/linux/socket.h  75  struct mmsghdr { struct msghdr msg_hdr; unsigned int msg_len; };
cmsghdr  struct  include/linux/socket.h  86  struct cmsghdr { __kernel_size_t cmsg_len; int cmsg_level; int cmsg_type; };
__CMSG_NXTHDR  macro  include/linux/socket.h  97  #define __CMSG_NXTHDR(ctl,len,cmsg) __cmsg_nxthdr((ctl),(len),(cmsg))
CMSG_NXTHDR  macro  include/linux/socket.h  98  #define CMSG_NXTHDR(mhdr,cmsg) cmsg_nxthdr((mhdr),(cmsg))
CMSG_ALIGN  macro  include/linux/socket.h  100  #define CMSG_ALIGN(len) ( ((len)+sizeof(long)-1) & ~(sizeof(long)-1) )
CMSG_DATA  macro  include/linux/socket.h  102  #define CMSG_DATA(cmsg) ((void *)((char *)(cmsg) + CMSG_ALIGN(sizeof(struct cmsghdr))))
CMSG_SPACE  macro  include/linux/socket.h  103  #define CMSG_SPACE(len) (CMSG_ALIGN(sizeof(struct cmsghdr)) + CMSG_ALIGN(len))
CMSG_LEN  macro  include/linux/socket.h  104  #define CMSG_LEN(len) (CMSG_ALIGN(sizeof(struct cmsghdr)) + (len))
__CMSG_FIRSTHDR  macro  include/linux/socket.h  106  #define __CMSG_FIRSTHDR(ctl,len) ((len) >= sizeof(struct cmsghdr) ? (struct cmsghdr *)(ctl) : (struct cmsghdr *)NULL)
CMSG_FIRSTHDR  macro  include/linux/socket.h  109  #define CMSG_FIRSTHDR(msg) __CMSG_FIRSTHDR((msg)->msg_control,(msg)->msg_controllen)
CMSG_OK  macro  include/linux/socket.h  110  #define CMSG_OK(mhdr,cmsg) ((cmsg)->cmsg_len >= sizeof(struct cmsghdr) && (cmsg)->cmsg_len <= (unsigned long) ((mhdr)->msg_controllen - ((char *)(cmsg) - (char *)(mhdr)->msg_control)))
__cmsg_nxthdr  function  include/linux/socket.h  128  static inline struct cmsghdr * __cmsg_nxthdr(void *__ctl,__kernel_size_t __size,struct cmsghdr *__cmsg)
cmsg_nxthdr  function  include/linux/socket.h  140  static inline struct cmsghdr * cmsg_nxthdr (struct msghdr *__msg,struct cmsghdr *__cmsg)
SCM_RIGHTS  macro  include/linux/socket.h  147  #define SCM_RIGHTS 0x01
SCM_CREDENTIALS  macro  include/linux/socket.h  148  #define SCM_CREDENTIALS 0x02
SCM_SECURITY  macro  include/linux/socket.h  149  #define SCM_SECURITY 0x03
ucred  struct  include/linux/socket.h  151  struct ucred { __u32 pid; __u32 uid; __u32 gid; };
AF_UNSPEC  macro  include/linux/socket.h  158  #define AF_UNSPEC 0
AF_UNIX  macro  include/linux/socket.h  159  #define AF_UNIX 1
AF_LOCAL  macro  include/linux/socket.h  160  #define AF_LOCAL 1
AF_INET  macro  include/linux/socket.h  161  #define AF_INET 2
AF_AX25  macro  include/linux/socket.h  162  #define AF_AX25 3
AF_IPX  macro  include/linux/socket.h  163  #define AF_IPX 4
AF_APPLETALK  macro  include/linux/socket.h  164  #define AF_APPLETALK 5
AF_NETROM  macro  include/linux/socket.h  165  #define AF_NETROM 6
AF_BRIDGE  macro  include/linux/socket.h  166  #define AF_BRIDGE 7
AF_ATMPVC  macro  include/linux/socket.h  167  #define AF_ATMPVC 8
AF_X25  macro  include/linux/socket.h  168  #define AF_X25 9
AF_INET6  macro  include/linux/socket.h  169  #define AF_INET6 10
AF_ROSE  macro  include/linux/socket.h  170  #define AF_ROSE 11
AF_DECnet  macro  include/linux/socket.h  171  #define AF_DECnet 12
AF_NETBEUI  macro  include/linux/socket.h  172  #define AF_NETBEUI 13
AF_SECURITY  macro  include/linux/socket.h  173  #define AF_SECURITY 14
AF_KEY  macro  include/linux/socket.h  174  #define AF_KEY 15
AF_NETLINK  macro  include/linux/socket.h  175  #define AF_NETLINK 16
AF_ROUTE  macro  include/linux/socket.h  176  #define AF_ROUTE AF_NETLINK
AF_PACKET  macro  include/linux/socket.h  177  #define AF_PACKET 17
AF_ASH  macro  include/linux/socket.h  178  #define AF_ASH 18
AF_ECONET  macro  include/linux/socket.h  179  #define AF_ECONET 19
AF_ATMSVC  macro  include/linux/socket.h  180  #define AF_ATMSVC 20
AF_RDS  macro  include/linux/socket.h  181  #define AF_RDS 21
AF_SNA  macro  include/linux/socket.h  182  #define AF_SNA 22
AF_IRDA  macro  include/linux/socket.h  183  #define AF_IRDA 23
AF_PPPOX  macro  include/linux/socket.h  184  #define AF_PPPOX 24
AF_WANPIPE  macro  include/linux/socket.h  185  #define AF_WANPIPE 25
AF_LLC  macro  include/linux/socket.h  186  #define AF_LLC 26
AF_CAN  macro  include/linux/socket.h  187  #define AF_CAN 29
AF_TIPC  macro  include/linux/socket.h  188  #define AF_TIPC 30
AF_BLUETOOTH  macro  include/linux/socket.h  189  #define AF_BLUETOOTH 31
AF_IUCV  macro  include/linux/socket.h  190  #define AF_IUCV 32
AF_RXRPC  macro  include/linux/socket.h  191  #define AF_RXRPC 33
AF_ISDN  macro  include/linux/socket.h  192  #define AF_ISDN 34
AF_PHONET  macro  include/linux/socket.h  193  #define AF_PHONET 35
AF_IEEE802154  macro  include/linux/socket.h  194  #define AF_IEEE802154 36
AF_CAIF  macro  include/linux/socket.h  195  #define AF_CAIF 37
AF_ALG  macro  include/linux/socket.h  196  #define AF_ALG 38
AF_NFC  macro  include/linux/socket.h  197  #define AF_NFC 39
AF_MAX  macro  include/linux/socket.h  198  #define AF_MAX 40
PF_UNSPEC  macro  include/linux/socket.h  201  #define PF_UNSPEC AF_UNSPEC
PF_UNIX  macro  include/linux/socket.h  202  #define PF_UNIX AF_UNIX
PF_LOCAL  macro  include/linux/socket.h  203  #define PF_LOCAL AF_LOCAL
PF_INET  macro  include/linux/socket.h  204  #define PF_INET AF_INET
PF_AX25  macro  include/linux/socket.h  205  #define PF_AX25 AF_AX25
PF_IPX  macro  include/linux/socket.h  206  #define PF_IPX AF_IPX
PF_APPLETALK  macro  include/linux/socket.h  207  #define PF_APPLETALK AF_APPLETALK
PF_NETROM  macro  include/linux/socket.h  208  #define PF_NETROM AF_NETROM
PF_BRIDGE  macro  include/linux/socket.h  209  #define PF_BRIDGE AF_BRIDGE
PF_ATMPVC  macro  include/linux/socket.h  210  #define PF_ATMPVC AF_ATMPVC
PF_X25  macro  include/linux/socket.h  211  #define PF_X25 AF_X25
PF_INET6  macro  include/linux/socket.h  212  #define PF_INET6 AF_INET6
PF_ROSE  macro  include/linux/socket.h  213  #define PF_ROSE AF_ROSE
PF_DECnet  macro  include/linux/socket.h  214  #define PF_DECnet AF_DECnet
PF_NETBEUI  macro  include/linux/socket.h  215  #define PF_NETBEUI AF_NETBEUI
PF_SECURITY  macro  include/linux/socket.h  216  #define PF_SECURITY AF_SECURITY
PF_KEY  macro  include/linux/socket.h  217  #define PF_KEY AF_KEY
PF_NETLINK  macro  include/linux/socket.h  218  #define PF_NETLINK AF_NETLINK
PF_ROUTE  macro  include/linux/socket.h  219  #define PF_ROUTE AF_ROUTE
PF_PACKET  macro  include/linux/socket.h  220  #define PF_PACKET AF_PACKET
PF_ASH  macro  include/linux/socket.h  221  #define PF_ASH AF_ASH
PF_ECONET  macro  include/linux/socket.h  222  #define PF_ECONET AF_ECONET
PF_ATMSVC  macro  include/linux/socket.h  223  #define PF_ATMSVC AF_ATMSVC
PF_RDS  macro  include/linux/socket.h  224  #define PF_RDS AF_RDS
PF_SNA  macro  include/linux/socket.h  225  #define PF_SNA AF_SNA
PF_IRDA  macro  include/linux/socket.h  226  #define PF_IRDA AF_IRDA
PF_PPPOX  macro  include/linux/socket.h  227  #define PF_PPPOX AF_PPPOX
PF_WANPIPE  macro  include/linux/socket.h  228  #define PF_WANPIPE AF_WANPIPE
PF_LLC  macro  include/linux/socket.h  229  #define PF_LLC AF_LLC
PF_CAN  macro  include/linux/socket.h  230  #define PF_CAN AF_CAN
PF_TIPC  macro  include/linux/socket.h  231  #define PF_TIPC AF_TIPC
PF_BLUETOOTH  macro  include/linux/socket.h  232  #define PF_BLUETOOTH AF_BLUETOOTH
PF_IUCV  macro  include/linux/socket.h  233  #define PF_IUCV AF_IUCV
PF_RXRPC  macro  include/linux/socket.h  234  #define PF_RXRPC AF_RXRPC
PF_ISDN  macro  include/linux/socket.h  235  #define PF_ISDN AF_ISDN
PF_PHONET  macro  include/linux/socket.h  236  #define PF_PHONET AF_PHONET
PF_IEEE802154  macro  include/linux/socket.h  237  #define PF_IEEE802154 AF_IEEE802154
PF_CAIF  macro  include/linux/socket.h  238  #define PF_CAIF AF_CAIF
PF_ALG  macro  include/linux/socket.h  239  #define PF_ALG AF_ALG
PF_NFC  macro  include/linux/socket.h  240  #define PF_NFC AF_NFC
PF_MAX  macro  include/linux/socket.h  241  #define PF_MAX AF_MAX
SOMAXCONN  macro  include/linux/socket.h  244  #define SOMAXCONN 128
MSG_OOB  macro  include/linux/socket.h  250  #define MSG_OOB 1
MSG_PEEK  macro  include/linux/socket.h  251  #define MSG_PEEK 2
MSG_DONTROUTE  macro  include/linux/socket.h  252  #define MSG_DONTROUTE 4
MSG_TRYHARD  macro  include/linux/socket.h  253  #define MSG_TRYHARD 4
MSG_CTRUNC  macro  include/linux/socket.h  254  #define MSG_CTRUNC 8
MSG_PROBE  macro  include/linux/socket.h  255  #define MSG_PROBE 0x10
MSG_TRUNC  macro  include/linux/socket.h  256  #define MSG_TRUNC 0x20
MSG_DONTWAIT  macro  include/linux/socket.h  257  #define MSG_DONTWAIT 0x40
MSG_EOR  macro  include/linux/socket.h  258  #define MSG_EOR 0x80
MSG_WAITALL  macro  include/linux/socket.h  259  #define MSG_WAITALL 0x100
MSG_FIN  macro  include/linux/socket.h  260  #define MSG_FIN 0x200
MSG_SYN  macro  include/linux/socket.h  261  #define MSG_SYN 0x400
MSG_CONFIRM  macro  include/linux/socket.h  262  #define MSG_CONFIRM 0x800
MSG_RST  macro  include/linux/socket.h  263  #define MSG_RST 0x1000
MSG_ERRQUEUE  macro  include/linux/socket.h  264  #define MSG_ERRQUEUE 0x2000
MSG_NOSIGNAL  macro  include/linux/socket.h  265  #define MSG_NOSIGNAL 0x4000
MSG_MORE  macro  include/linux/socket.h  266  #define MSG_MORE 0x8000
MSG_WAITFORONE  macro  include/linux/socket.h  267  #define MSG_WAITFORONE 0x10000
MSG_SENDPAGE_NOTLAST  macro  include/linux/socket.h  268  #define MSG_SENDPAGE_NOTLAST 0x20000
MSG_EOF  macro  include/linux/socket.h  269  #define MSG_EOF MSG_FIN
MSG_CMSG_CLOEXEC  macro  include/linux/socket.h  271  #define MSG_CMSG_CLOEXEC 0x40000000
MSG_CMSG_COMPAT  macro  include/linux/socket.h  277  #define MSG_CMSG_COMPAT 0
SOL_IP  macro  include/linux/socket.h  282  #define SOL_IP 0
SOL_TCP  macro  include/linux/socket.h  284  #define SOL_TCP 6
SOL_UDP  macro  include/linux/socket.h  285  #define SOL_UDP 17
SOL_IPV6  macro  include/linux/socket.h  286  #define SOL_IPV6 41
SOL_ICMPV6  macro  include/linux/socket.h  287  #define SOL_ICMPV6 58
SOL_SCTP  macro  include/linux/socket.h  288  #define SOL_SCTP 132
SOL_UDPLITE  macro  include/linux/socket.h  289  #define SOL_UDPLITE 136
SOL_RAW  macro  include/linux/socket.h  290  #define SOL_RAW 255
SOL_IPX  macro  include/linux/socket.h  291  #define SOL_IPX 256
SOL_AX25  macro  include/linux/socket.h  292  #define SOL_AX25 257
SOL_ATALK  macro  include/linux/socket.h  293  #define SOL_ATALK 258
SOL_NETROM  macro  include/linux/socket.h  294  #define SOL_NETROM 259
SOL_ROSE  macro  include/linux/socket.h  295  #define SOL_ROSE 260
SOL_DECNET  macro  include/linux/socket.h  296  #define SOL_DECNET 261
SOL_X25  macro  include/linux/socket.h  297  #define SOL_X25 262
SOL_PACKET  macro  include/linux/socket.h  298  #define SOL_PACKET 263
SOL_ATM  macro  include/linux/socket.h  299  #define SOL_ATM 264
SOL_AAL  macro  include/linux/socket.h  300  #define SOL_AAL 265
SOL_IRDA  macro  include/linux/socket.h  301  #define SOL_IRDA 266
SOL_NETBEUI  macro  include/linux/socket.h  302  #define SOL_NETBEUI 267
SOL_LLC  macro  include/linux/socket.h  303  #define SOL_LLC 268
SOL_DCCP  macro  include/linux/socket.h  304  #define SOL_DCCP 269
SOL_NETLINK  macro  include/linux/socket.h  305  #define SOL_NETLINK 270
SOL_TIPC  macro  include/linux/socket.h  306  #define SOL_TIPC 271
SOL_RXRPC  macro  include/linux/socket.h  307  #define SOL_RXRPC 272
SOL_PPPOL2TP  macro  include/linux/socket.h  308  #define SOL_PPPOL2TP 273
SOL_BLUETOOTH  macro  include/linux/socket.h  309  #define SOL_BLUETOOTH 274
SOL_PNPIPE  macro  include/linux/socket.h  310  #define SOL_PNPIPE 275
SOL_RDS  macro  include/linux/socket.h  311  #define SOL_RDS 276
SOL_IUCV  macro  include/linux/socket.h  312  #define SOL_IUCV 277
SOL_CAIF  macro  include/linux/socket.h  313  #define SOL_CAIF 278
SOL_ALG  macro  include/linux/socket.h  314  #define SOL_ALG 279
IPX_TYPE  macro  include/linux/socket.h  317  #define IPX_TYPE 1
cred_to_ucred  prototype  include/linux/socket.h  319  extern void cred_to_ucred(struct pid *pid,const struct cred *cred,struct ucred *ucred);
memcpy_fromiovec  prototype  include/linux/socket.h  321  extern int memcpy_fromiovec(unsigned char *kdata,struct iovec *iov,int len);
memcpy_fromiovecend  prototype  include/linux/socket.h  322  extern int memcpy_fromiovecend(unsigned char *kdata,const struct iovec *iov,int offset, int len);
csum_partial_copy_fromiovecend  prototype  include/linux/socket.h  324  extern int csum_partial_copy_fromiovecend(unsigned char *kdata,struct iovec *iov,int offset,unsigned int len, __wsum *csump);
verify_iovec  prototype  include/linux/socket.h  329  extern int verify_iovec(struct msghdr *m,struct iovec *iov,struct sockaddr_storage *address,int mode);
memcpy_toiovec  prototype  include/linux/socket.h  330  extern int memcpy_toiovec(struct iovec *v,unsigned char *kdata,int len);
memcpy_toiovecend  prototype  include/linux/socket.h  331  extern int memcpy_toiovecend(const struct iovec *v,unsigned char *kdata,int offset, int len);
move_addr_to_kernel  prototype  include/linux/socket.h  333  extern int move_addr_to_kernel(void __user *uaddr,int ulen,struct sockaddr_storage *kaddr);
put_cmsg  prototype  include/linux/socket.h  334  extern int put_cmsg(struct msghdr*,int level,int type,int len,void *data);
__sys_recvmmsg  prototype  include/linux/socket.h  338  extern int __sys_recvmmsg(int fd,struct mmsghdr __user *mmsg,unsigned int vlen,unsigned int flags, struct timespec *timeout);
__sys_sendmmsg  prototype  include/linux/socket.h  340  extern int __sys_sendmmsg(int fd,struct mmsghdr __user *mmsg,unsigned int vlen, unsigned int flags);
_LINUX_FS_H  macro  include/linux/fs.h  2  #define _LINUX_FS_H
NR_OPEN  macro  include/linux/fs.h  25  #undef NR_OPEN
INR_OPEN_CUR  macro  include/linux/fs.h  26  #define INR_OPEN_CUR 1024
INR_OPEN_MAX  macro  include/linux/fs.h  27  #define INR_OPEN_MAX 4096
BLOCK_SIZE_BITS  macro  include/linux/fs.h  29  #define BLOCK_SIZE_BITS 10
BLOCK_SIZE  macro  include/linux/fs.h  30  #define BLOCK_SIZE (1<<BLOCK_SIZE_BITS)
SEEK_SET  macro  include/linux/fs.h  32  #define SEEK_SET 0
SEEK_CUR  macro  include/linux/fs.h  33  #define SEEK_CUR 1
SEEK_END  macro  include/linux/fs.h  34  #define SEEK_END 2
SEEK_DATA  macro  include/linux/fs.h  35  #define SEEK_DATA 3
SEEK_HOLE  macro  include/linux/fs.h  36  #define SEEK_HOLE 4
SEEK_MAX  macro  include/linux/fs.h  37  #define SEEK_MAX SEEK_HOLE
fstrim_range  struct  include/linux/fs.h  39  struct fstrim_range { __u64 start; __u64 len; __u64 minlen; };
files_stat_struct  struct  include/linux/fs.h  46  struct files_stat_struct { unsigned long nr_files; unsigned long nr_free_files; unsigned long max_files; };
inodes_stat_t  struct  include/linux/fs.h  52  struct inodes_stat_t { int nr_inodes; int nr_unused; int dummy[5]; };
NR_FILE  macro  include/linux/fs.h  59  #define NR_FILE 8192
MAY_EXEC  macro  include/linux/fs.h  61  #define MAY_EXEC 0x00000001
MAY_WRITE  macro  include/linux/fs.h  62  #define MAY_WRITE 0x00000002
MAY_READ  macro  include/linux/fs.h  63  #define MAY_READ 0x00000004
MAY_APPEND  macro  include/linux/fs.h  64  #define MAY_APPEND 0x00000008
MAY_ACCESS  macro  include/linux/fs.h  65  #define MAY_ACCESS 0x00000010
MAY_OPEN  macro  include/linux/fs.h  66  #define MAY_OPEN 0x00000020
MAY_CHDIR  macro  include/linux/fs.h  67  #define MAY_CHDIR 0x00000040
MAY_NOT_BLOCK  macro  include/linux/fs.h  69  #define MAY_NOT_BLOCK 0x00000080
FMODE_READ  macro  include/linux/fs.h  77  #define FMODE_READ ((__force fmode_t)0x1)
FMODE_WRITE  macro  include/linux/fs.h  79  #define FMODE_WRITE ((__force fmode_t)0x2)
FMODE_LSEEK  macro  include/linux/fs.h  81  #define FMODE_LSEEK ((__force fmode_t)0x4)
FMODE_PREAD  macro  include/linux/fs.h  83  #define FMODE_PREAD ((__force fmode_t)0x8)
FMODE_PWRITE  macro  include/linux/fs.h  85  #define FMODE_PWRITE ((__force fmode_t)0x10)
FMODE_EXEC  macro  include/linux/fs.h  87  #define FMODE_EXEC ((__force fmode_t)0x20)
FMODE_NDELAY  macro  include/linux/fs.h  89  #define FMODE_NDELAY ((__force fmode_t)0x40)
FMODE_EXCL  macro  include/linux/fs.h  91  #define FMODE_EXCL ((__force fmode_t)0x80)
FMODE_WRITE_IOCTL  macro  include/linux/fs.h  94  #define FMODE_WRITE_IOCTL ((__force fmode_t)0x100)
FMODE_32BITHASH  macro  include/linux/fs.h  96  #define FMODE_32BITHASH ((__force fmode_t)0x200)
FMODE_64BITHASH  macro  include/linux/fs.h  98  #define FMODE_64BITHASH ((__force fmode_t)0x400)
FMODE_NOCMTIME  macro  include/linux/fs.h  106  #define FMODE_NOCMTIME ((__force fmode_t)0x800)
FMODE_RANDOM  macro  include/linux/fs.h  109  #define FMODE_RANDOM ((__force fmode_t)0x1000)
FMODE_UNSIGNED_OFFSET  macro  include/linux/fs.h  112  #define FMODE_UNSIGNED_OFFSET ((__force fmode_t)0x2000)
FMODE_PATH  macro  include/linux/fs.h  115  #define FMODE_PATH ((__force fmode_t)0x4000)
FMODE_NONOTIFY  macro  include/linux/fs.h  118  #define FMODE_NONOTIFY ((__force fmode_t)0x1000000)
RW_MASK  macro  include/linux/fs.h  162  #define RW_MASK REQ_WRITE
RWA_MASK  macro  include/linux/fs.h  163  #define RWA_MASK REQ_RAHEAD
READ  macro  include/linux/fs.h  165  #define READ 0
WRITE  macro  include/linux/fs.h  166  #define WRITE RW_MASK
READA  macro  include/linux/fs.h  167  #define READA RWA_MASK
READ_SYNC  macro  include/linux/fs.h  169  #define READ_SYNC (READ | REQ_SYNC)
WRITE_SYNC  macro  include/linux/fs.h  170  #define WRITE_SYNC (WRITE | REQ_SYNC | REQ_NOIDLE)
WRITE_ODIRECT  macro  include/linux/fs.h  171  #define WRITE_ODIRECT (WRITE | REQ_SYNC)
WRITE_FLUSH  macro  include/linux/fs.h  172  #define WRITE_FLUSH (WRITE | REQ_SYNC | REQ_NOIDLE | REQ_FLUSH)
WRITE_FUA  macro  include/linux/fs.h  173  #define WRITE_FUA (WRITE | REQ_SYNC | REQ_NOIDLE | REQ_FUA)
WRITE_FLUSH_FUA  macro  include/linux/fs.h  174  #define WRITE_FLUSH_FUA (WRITE | REQ_SYNC | REQ_NOIDLE | REQ_FLUSH | REQ_FUA)
CHECK_IOVEC_ONLY  macro  include/linux/fs.h  183  #define CHECK_IOVEC_ONLY -1
SEL_IN  macro  include/linux/fs.h  185  #define SEL_IN 1
SEL_OUT  macro  include/linux/fs.h  186  #define SEL_OUT 2
SEL_EX  macro  include/linux/fs.h  187  #define SEL_EX 4
FS_REQUIRES_DEV  macro  include/linux/fs.h  190  #define FS_REQUIRES_DEV 1
FS_BINARY_MOUNTDATA  macro  include/linux/fs.h  191  #define FS_BINARY_MOUNTDATA 2
FS_HAS_SUBTYPE  macro  include/linux/fs.h  192  #define FS_HAS_SUBTYPE 4
FS_REVAL_DOT  macro  include/linux/fs.h  193  #define FS_REVAL_DOT 16384
FS_RENAME_DOES_D_MOVE  macro  include/linux/fs.h  194  #define FS_RENAME_DOES_D_MOVE 32768
MS_RDONLY  macro  include/linux/fs.h  201  #define MS_RDONLY 1
MS_NOSUID  macro  include/linux/fs.h  202  #define MS_NOSUID 2
MS_NODEV  macro  include/linux/fs.h  203  #define MS_NODEV 4
MS_NOEXEC  macro  include/linux/fs.h  204  #define MS_NOEXEC 8
MS_SYNCHRONOUS  macro  include/linux/fs.h  205  #define MS_SYNCHRONOUS 16
MS_REMOUNT  macro  include/linux/fs.h  206  #define MS_REMOUNT 32
MS_MANDLOCK  macro  include/linux/fs.h  207  #define MS_MANDLOCK 64
MS_DIRSYNC  macro  include/linux/fs.h  208  #define MS_DIRSYNC 128
MS_NOATIME  macro  include/linux/fs.h  209  #define MS_NOATIME 1024
MS_NODIRATIME  macro  include/linux/fs.h  210  #define MS_NODIRATIME 2048
MS_BIND  macro  include/linux/fs.h  211  #define MS_BIND 4096
MS_MOVE  macro  include/linux/fs.h  212  #define MS_MOVE 8192
MS_REC  macro  include/linux/fs.h  213  #define MS_REC 16384
MS_VERBOSE  macro  include/linux/fs.h  214  #define MS_VERBOSE 32768
MS_SILENT  macro  include/linux/fs.h  216  #define MS_SILENT 32768
MS_POSIXACL  macro  include/linux/fs.h  217  #define MS_POSIXACL (1<<16)
MS_UNBINDABLE  macro  include/linux/fs.h  218  #define MS_UNBINDABLE (1<<17)
MS_PRIVATE  macro  include/linux/fs.h  219  #define MS_PRIVATE (1<<18)
MS_SLAVE  macro  include/linux/fs.h  220  #define MS_SLAVE (1<<19)
MS_SHARED  macro  include/linux/fs.h  221  #define MS_SHARED (1<<20)
MS_RELATIME  macro  include/linux/fs.h  222  #define MS_RELATIME (1<<21)
MS_KERNMOUNT  macro  include/linux/fs.h  223  #define MS_KERNMOUNT (1<<22)
MS_I_VERSION  macro  include/linux/fs.h  224  #define MS_I_VERSION (1<<23)
MS_STRICTATIME  macro  include/linux/fs.h  225  #define MS_STRICTATIME (1<<24)
MS_NOSEC  macro  include/linux/fs.h  226  #define MS_NOSEC (1<<28)
MS_BORN  macro  include/linux/fs.h  227  #define MS_BORN (1<<29)
MS_ACTIVE  macro  include/linux/fs.h  228  #define MS_ACTIVE (1<<30)
MS_NOUSER  macro  include/linux/fs.h  229  #define MS_NOUSER (1<<31)
MS_RMT_MASK  macro  include/linux/fs.h  234  #define MS_RMT_MASK (MS_RDONLY|MS_SYNCHRONOUS|MS_MANDLOCK|MS_I_VERSION)
MS_MGC_VAL  macro  include/linux/fs.h  239  #define MS_MGC_VAL 0xC0ED0000
MS_MGC_MSK  macro  include/linux/fs.h  240  #define MS_MGC_MSK 0xffff0000
S_SYNC  macro  include/linux/fs.h  244  #define S_SYNC 1
S_NOATIME  macro  include/linux/fs.h  245  #define S_NOATIME 2
S_APPEND  macro  include/linux/fs.h  246  #define S_APPEND 4
S_IMMUTABLE  macro  include/linux/fs.h  247  #define S_IMMUTABLE 8
S_DEAD  macro  include/linux/fs.h  248  #define S_DEAD 16
S_NOQUOTA  macro  include/linux/fs.h  249  #define S_NOQUOTA 32
S_DIRSYNC  macro  include/linux/fs.h  250  #define S_DIRSYNC 64
S_NOCMTIME  macro  include/linux/fs.h  251  #define S_NOCMTIME 128
S_SWAPFILE  macro  include/linux/fs.h  252  #define S_SWAPFILE 256
S_PRIVATE  macro  include/linux/fs.h  253  #define S_PRIVATE 512
S_IMA  macro  include/linux/fs.h  254  #define S_IMA 1024
S_AUTOMOUNT  macro  include/linux/fs.h  255  #define S_AUTOMOUNT 2048
S_NOSEC  macro  include/linux/fs.h  256  #define S_NOSEC 4096
__IS_FLG  macro  include/linux/fs.h  271  #define __IS_FLG(inode,flg) ((inode)->i_sb->s_flags & (flg))
IS_RDONLY  macro  include/linux/fs.h  273  #define IS_RDONLY(inode) ((inode)->i_sb->s_flags & MS_RDONLY)
IS_SYNC  macro  include/linux/fs.h  274  #define IS_SYNC(inode) (__IS_FLG(inode,MS_SYNCHRONOUS) || ((inode)->i_flags & S_SYNC))
IS_DIRSYNC  macro  include/linux/fs.h  276  #define IS_DIRSYNC(inode) (__IS_FLG(inode,MS_SYNCHRONOUS|MS_DIRSYNC) || ((inode)->i_flags & (S_SYNC|S_DIRSYNC)))
IS_MANDLOCK  macro  include/linux/fs.h  278  #define IS_MANDLOCK(inode) __IS_FLG(inode,MS_MANDLOCK)
IS_NOATIME  macro  include/linux/fs.h  279  #define IS_NOATIME(inode) __IS_FLG(inode,MS_RDONLY|MS_NOATIME)
IS_I_VERSION  macro  include/linux/fs.h  280  #define IS_I_VERSION(inode) __IS_FLG(inode,MS_I_VERSION)
IS_NOQUOTA  macro  include/linux/fs.h  282  #define IS_NOQUOTA(inode) ((inode)->i_flags & S_NOQUOTA)
IS_APPEND  macro  include/linux/fs.h  283  #define IS_APPEND(inode) ((inode)->i_flags & S_APPEND)
IS_IMMUTABLE  macro  include/linux/fs.h  284  #define IS_IMMUTABLE(inode) ((inode)->i_flags & S_IMMUTABLE)
IS_POSIXACL  macro  include/linux/fs.h  285  #define IS_POSIXACL(inode) __IS_FLG(inode,MS_POSIXACL)
IS_DEADDIR  macro  include/linux/fs.h  287  #define IS_DEADDIR(inode) ((inode)->i_flags & S_DEAD)
IS_NOCMTIME  macro  include/linux/fs.h  288  #define IS_NOCMTIME(inode) ((inode)->i_flags & S_NOCMTIME)
IS_SWAPFILE  macro  include/linux/fs.h  289  #define IS_SWAPFILE(inode) ((inode)->i_flags & S_SWAPFILE)
IS_PRIVATE  macro  include/linux/fs.h  290  #define IS_PRIVATE(inode) ((inode)->i_flags & S_PRIVATE)
IS_IMA  macro  include/linux/fs.h  291  #define IS_IMA(inode) ((inode)->i_flags & S_IMA)
IS_AUTOMOUNT  macro  include/linux/fs.h  292  #define IS_AUTOMOUNT(inode) ((inode)->i_flags & S_AUTOMOUNT)
IS_NOSEC  macro  include/linux/fs.h  293  #define IS_NOSEC(inode) ((inode)->i_flags & S_NOSEC)
BLKROSET  macro  include/linux/fs.h  298  #define BLKROSET _IO(0x12,93)
BLKROGET  macro  include/linux/fs.h  299  #define BLKROGET _IO(0x12,94)
BLKRRPART  macro  include/linux/fs.h  300  #define BLKRRPART _IO(0x12,95)
BLKGETSIZE  macro  include/linux/fs.h  301  #define BLKGETSIZE _IO(0x12,96)
BLKFLSBUF  macro  include/linux/fs.h  302  #define BLKFLSBUF _IO(0x12,97)
BLKRASET  macro  include/linux/fs.h  303  #define BLKRASET _IO(0x12,98)
BLKRAGET  macro  include/linux/fs.h  304  #define BLKRAGET _IO(0x12,99)
BLKFRASET  macro  include/linux/fs.h  305  #define BLKFRASET _IO(0x12,100)
BLKFRAGET  macro  include/linux/fs.h  306  #define BLKFRAGET _IO(0x12,101)
BLKSECTSET  macro  include/linux/fs.h  307  #define BLKSECTSET _IO(0x12,102)
BLKSECTGET  macro  include/linux/fs.h  308  #define BLKSECTGET _IO(0x12,103)
BLKSSZGET  macro  include/linux/fs.h  309  #define BLKSSZGET _IO(0x12,104)
BLKBSZGET  macro  include/linux/fs.h  321  #define BLKBSZGET _IOR(0x12,112,size_t)
BLKBSZSET  macro  include/linux/fs.h  322  #define BLKBSZSET _IOW(0x12,113,size_t)
BLKGETSIZE64  macro  include/linux/fs.h  323  #define BLKGETSIZE64 _IOR(0x12,114,size_t)
BLKTRACESETUP  macro  include/linux/fs.h  324  #define BLKTRACESETUP _IOWR(0x12,115,struct blk_user_trace_setup)
BLKTRACESTART  macro  include/linux/fs.h  325  #define BLKTRACESTART _IO(0x12,116)
BLKTRACESTOP  macro  include/linux/fs.h  326  #define BLKTRACESTOP _IO(0x12,117)
BLKTRACETEARDOWN  macro  include/linux/fs.h  327  #define BLKTRACETEARDOWN _IO(0x12,118)
BLKDISCARD  macro  include/linux/fs.h  328  #define BLKDISCARD _IO(0x12,119)
BLKIOMIN  macro  include/linux/fs.h  329  #define BLKIOMIN _IO(0x12,120)
BLKIOOPT  macro  include/linux/fs.h  330  #define BLKIOOPT _IO(0x12,121)
BLKALIGNOFF  macro  include/linux/fs.h  331  #define BLKALIGNOFF _IO(0x12,122)
BLKPBSZGET  macro  include/linux/fs.h  332  #define BLKPBSZGET _IO(0x12,123)
BLKDISCARDZEROES  macro  include/linux/fs.h  333  #define BLKDISCARDZEROES _IO(0x12,124)
BLKSECDISCARD  macro  include/linux/fs.h  334  #define BLKSECDISCARD _IO(0x12,125)
BLKROTATIONAL  macro  include/linux/fs.h  335  #define BLKROTATIONAL _IO(0x12,126)
BMAP_IOCTL  macro  include/linux/fs.h  337  #define BMAP_IOCTL 1
FIBMAP  macro  include/linux/fs.h  338  #define FIBMAP _IO(0x00,1)
FIGETBSZ  macro  include/linux/fs.h  339  #define FIGETBSZ _IO(0x00,2)
FIFREEZE  macro  include/linux/fs.h  340  #define FIFREEZE _IOWR('X',119,int)
FITHAW  macro  include/linux/fs.h  341  #define FITHAW _IOWR('X',120,int)
FITRIM  macro  include/linux/fs.h  342  #define FITRIM _IOWR('X',121,struct fstrim_range)
FS_IOC_GETFLAGS  macro  include/linux/fs.h  344  #define FS_IOC_GETFLAGS _IOR('f',1,long)
FS_IOC_SETFLAGS  macro  include/linux/fs.h  345  #define FS_IOC_SETFLAGS _IOW('f',2,long)
FS_IOC_GETVERSION  macro  include/linux/fs.h  346  #define FS_IOC_GETVERSION _IOR('v',1,long)
FS_IOC_SETVERSION  macro  include/linux/fs.h  347  #define FS_IOC_SETVERSION _IOW('v',2,long)
FS_IOC_FIEMAP  macro  include/linux/fs.h  348  #define FS_IOC_FIEMAP _IOWR('f',11,struct fiemap)
FS_IOC32_GETFLAGS  macro  include/linux/fs.h  349  #define FS_IOC32_GETFLAGS _IOR('f',1,int)
FS_IOC32_SETFLAGS  macro  include/linux/fs.h  350  #define FS_IOC32_SETFLAGS _IOW('f',2,int)
FS_IOC32_GETVERSION  macro  include/linux/fs.h  351  #define FS_IOC32_GETVERSION _IOR('v',1,int)
FS_IOC32_SETVERSION  macro  include/linux/fs.h  352  #define FS_IOC32_SETVERSION _IOW('v',2,int)
FS_SECRM_FL  macro  include/linux/fs.h  357  #define FS_SECRM_FL 0x00000001
FS_UNRM_FL  macro  include/linux/fs.h  358  #define FS_UNRM_FL 0x00000002
FS_COMPR_FL  macro  include/linux/fs.h  359  #define FS_COMPR_FL 0x00000004
FS_SYNC_FL  macro  include/linux/fs.h  360  #define FS_SYNC_FL 0x00000008
FS_IMMUTABLE_FL  macro  include/linux/fs.h  361  #define FS_IMMUTABLE_FL 0x00000010
FS_APPEND_FL  macro  include/linux/fs.h  362  #define FS_APPEND_FL 0x00000020
FS_NODUMP_FL  macro  include/linux/fs.h  363  #define FS_NODUMP_FL 0x00000040
FS_NOATIME_FL  macro  include/linux/fs.h  364  #define FS_NOATIME_FL 0x00000080
FS_DIRTY_FL  macro  include/linux/fs.h  366  #define FS_DIRTY_FL 0x00000100
FS_COMPRBLK_FL  macro  include/linux/fs.h  367  #define FS_COMPRBLK_FL 0x00000200
FS_NOCOMP_FL  macro  include/linux/fs.h  368  #define FS_NOCOMP_FL 0x00000400
FS_ECOMPR_FL  macro  include/linux/fs.h  369  #define FS_ECOMPR_FL 0x00000800
FS_BTREE_FL  macro  include/linux/fs.h  371  #define FS_BTREE_FL 0x00001000
FS_INDEX_FL  macro  include/linux/fs.h  372  #define FS_INDEX_FL 0x00001000
FS_IMAGIC_FL  macro  include/linux/fs.h  373  #define FS_IMAGIC_FL 0x00002000
FS_JOURNAL_DATA_FL  macro  include/linux/fs.h  374  #define FS_JOURNAL_DATA_FL 0x00004000
FS_NOTAIL_FL  macro  include/linux/fs.h  375  #define FS_NOTAIL_FL 0x00008000
FS_DIRSYNC_FL  macro  include/linux/fs.h  376  #define FS_DIRSYNC_FL 0x00010000
FS_TOPDIR_FL  macro  include/linux/fs.h  377  #define FS_TOPDIR_FL 0x00020000
FS_EXTENT_FL  macro  include/linux/fs.h  378  #define FS_EXTENT_FL 0x00080000
FS_DIRECTIO_FL  macro  include/linux/fs.h  379  #define FS_DIRECTIO_FL 0x00100000
FS_NOCOW_FL  macro  include/linux/fs.h  380  #define FS_NOCOW_FL 0x00800000
FS_RESERVED_FL  macro  include/linux/fs.h  381  #define FS_RESERVED_FL 0x80000000
FS_FL_USER_VISIBLE  macro  include/linux/fs.h  383  #define FS_FL_USER_VISIBLE 0x0003DFFF
FS_FL_USER_MODIFIABLE  macro  include/linux/fs.h  384  #define FS_FL_USER_MODIFIABLE 0x000380FF
SYNC_FILE_RANGE_WAIT_BEFORE  macro  include/linux/fs.h  387  #define SYNC_FILE_RANGE_WAIT_BEFORE 1
SYNC_FILE_RANGE_WRITE  macro  include/linux/fs.h  388  #define SYNC_FILE_RANGE_WRITE 2
SYNC_FILE_RANGE_WAIT_AFTER  macro  include/linux/fs.h  389  #define SYNC_FILE_RANGE_WAIT_AFTER 4
inode_init  prototype  include/linux/fs.h  431  extern void __init inode_init(void);
inode_init_early  prototype  include/linux/fs.h  432  extern void __init inode_init_early(void);
files_init  prototype  include/linux/fs.h  433  extern void __init files_init(unsigned long);
get_max_files  prototype  include/linux/fs.h  436  extern unsigned long get_max_files(void);
ATTR_MODE  macro  include/linux/fs.h  452  #define ATTR_MODE (1 << 0)
ATTR_UID  macro  include/linux/fs.h  453  #define ATTR_UID (1 << 1)
ATTR_GID  macro  include/linux/fs.h  454  #define ATTR_GID (1 << 2)
ATTR_SIZE  macro  include/linux/fs.h  455  #define ATTR_SIZE (1 << 3)
ATTR_ATIME  macro  include/linux/fs.h  456  #define ATTR_ATIME (1 << 4)
ATTR_MTIME  macro  include/linux/fs.h  457  #define ATTR_MTIME (1 << 5)
ATTR_CTIME  macro  include/linux/fs.h  458  #define ATTR_CTIME (1 << 6)
ATTR_ATIME_SET  macro  include/linux/fs.h  459  #define ATTR_ATIME_SET (1 << 7)
ATTR_MTIME_SET  macro  include/linux/fs.h  460  #define ATTR_MTIME_SET (1 << 8)
ATTR_FORCE  macro  include/linux/fs.h  461  #define ATTR_FORCE (1 << 9)
ATTR_ATTR_FLAG  macro  include/linux/fs.h  462  #define ATTR_ATTR_FLAG (1 << 10)
ATTR_KILL_SUID  macro  include/linux/fs.h  463  #define ATTR_KILL_SUID (1 << 11)
ATTR_KILL_SGID  macro  include/linux/fs.h  464  #define ATTR_KILL_SGID (1 << 12)
ATTR_FILE  macro  include/linux/fs.h  465  #define ATTR_FILE (1 << 13)
ATTR_KILL_PRIV  macro  include/linux/fs.h  466  #define ATTR_KILL_PRIV (1 << 14)
ATTR_OPEN  macro  include/linux/fs.h  467  #define ATTR_OPEN (1 << 15)
ATTR_TIMES_SET  macro  include/linux/fs.h  468  #define ATTR_TIMES_SET (1 << 16)
iattr  struct  include/linux/fs.h  479  struct iattr { unsigned int ia_valid; umode_t ia_mode; kuid_t ia_uid; kgid_t ia_gid; loff_t ia_size; struct timespec ia_atime; struct timespec ia_mtime; struct timespec ia_ctime; struct file *ia_file; };
positive_aop_returns  enum  include/linux/fs.h  528  enum positive_aop_returns { AOP_WRITEPAGE_ACTIVATE = 0x80000, AOP_TRUNCATED_PAGE = 0x80001, };
AOP_FLAG_UNINTERRUPTIBLE  macro  include/linux/fs.h  533  #define AOP_FLAG_UNINTERRUPTIBLE 0x0001
AOP_FLAG_CONT_EXPAND  macro  include/linux/fs.h  534  #define AOP_FLAG_CONT_EXPAND 0x0002
AOP_FLAG_NOFS  macro  include/linux/fs.h  535  #define AOP_FLAG_NOFS 0x0004
iov_iter  struct  include/linux/fs.h  546  struct iov_iter { const struct iovec *iov; unsigned long nr_segs; size_t iov_offset; size_t count; };
iov_iter_copy_from_user_atomic  prototype  include/linux/fs.h  553  size_t iov_iter_copy_from_user_atomic(struct page *page,struct iov_iter *i, unsigned long offset, size_t bytes);
iov_iter_copy_from_user  prototype  include/linux/fs.h  555  size_t iov_iter_copy_from_user(struct page *page,struct iov_iter *i, unsigned long offset, size_t bytes);
iov_iter_advance  prototype  include/linux/fs.h  557  void iov_iter_advance(struct iov_iter *i,size_t bytes);
iov_iter_fault_in_readable  prototype  include/linux/fs.h  558  int iov_iter_fault_in_readable(struct iov_iter *i,size_t bytes);
iov_iter_single_seg_count  prototype  include/linux/fs.h  559  size_t iov_iter_single_seg_count(struct iov_iter *i);
iov_iter_init  function  include/linux/fs.h  561  static inline void iov_iter_init(struct iov_iter *i,const struct iovec *iov, unsigned long nr_segs,size_t count, size_t written)
iov_iter_count  function  include/linux/fs.h  573  static inline size_t iov_iter_count(struct iov_iter *i)
read_descriptor_t  struct  include/linux/fs.h  587  typedef struct { size_t written; size_t count; union { char __user *buf; void *data; } arg; int error; } read_descriptor_t;
address_space_operations  struct  include/linux/fs.h  600  struct address_space_operations { int (*writepage)(struct page *page, struct writeback_control *wbc); int (*readpage)(struct file *, struct page *); int (*writepages)(struct address_space *, struct writeback_control *); int (*set_page_dirty)(struct page *page); int (*readpages)(struct file *filp, struct address_space *mapping,struct list_head *pages, unsigned nr_pages); int (*write_begin)(struct file *, struct address_space *mapping,loff_t pos, unsigned len, unsigned flags,struct page **pagep, void **fsdata); int (*write_end)(struct file *, struct address_space *mapping,loff_t pos, unsigned len, unsigned copied,struct page *page, void *fsdata); sector_t (*bmap)(struct address_space *, sector_t); void (*invalidatepage) (struct page *, unsigned long); int (*releasepage) (struct page *, gfp_t); void (*freepage)(struct page *); ssize_t (*direct_IO)(int, struct kiocb *, const struct iovec *iov,loff_t offset, unsigned long nr_segs); int (*get_xip_mem)(struct address_space *, pgoff_t, int,void **, unsigned long *); int (*migratepage) (struct address_space *,struct page *, struct page *, enum migrate_mode); int (*launder_page) (struct page *); int (*is_partially_uptodate) (struct page *, read_descriptor_t *,unsigned long); int (*error_remove_page)(struct address_space *, struct page *); };
pagecache_write_begin  prototype  include/linux/fs.h  647  int pagecache_write_begin(struct file *,struct address_space *mapping,loff_t pos, unsigned len, unsigned flags,struct page **pagep, void **fsdata);
pagecache_write_end  prototype  include/linux/fs.h  651  int pagecache_write_end(struct file *,struct address_space *mapping,loff_t pos, unsigned len, unsigned copied,struct page *page, void *fsdata);
address_space  struct  include/linux/fs.h  656  struct address_space { struct inode *host; struct radix_tree_root page_tree; spinlock_t tree_lock; unsigned int i_mmap_writable; struct prio_tree_root i_mmap; struct list_head i_mmap_nonlinear; struct mutex i_mmap_mutex; unsigned long nrpages; pgoff_t writeback_index; const struct address_space_operations *a_ops; unsigned long flags; struct backing_dev_info *backing_dev_info; spinlock_t private_lock; struct list_head private_list; struct address_space *assoc_mapping; } __attribute__((aligned(sizeof(long))));
block_device  struct  include/linux/fs.h  681  struct block_device { dev_t bd_dev; int bd_openers; struct inode * bd_inode; struct super_block * bd_super; struct mutex bd_mutex; struct list_head bd_inodes; void * bd_claiming; void * bd_holder; int bd_holders; bool bd_write_holder; struct list_head bd_holder_disks; struct block_device * bd_contains; unsigned bd_block_size; struct hd_struct * bd_part; unsigned bd_part_count; int bd_invalidated; struct gendisk * bd_disk; struct request_queue * bd_queue; struct list_head bd_list; unsigned long bd_private; int bd_fsfreeze_count; struct mutex bd_fsfreeze_mutex; };
PAGECACHE_TAG_DIRTY  macro  include/linux/fs.h  722  #define PAGECACHE_TAG_DIRTY 0
PAGECACHE_TAG_WRITEBACK  macro  include/linux/fs.h  723  #define PAGECACHE_TAG_WRITEBACK 1
PAGECACHE_TAG_TOWRITE  macro  include/linux/fs.h  724  #define PAGECACHE_TAG_TOWRITE 2
mapping_tagged  prototype  include/linux/fs.h  726  int mapping_tagged(struct address_space *mapping,int tag);
mapping_mapped  function  include/linux/fs.h  731  static inline int mapping_mapped(struct address_space *mapping)
mapping_writably_mapped  function  include/linux/fs.h  743  static inline int mapping_writably_mapped(struct address_space *mapping)
__NEED_I_SIZE_ORDERED  macro  include/linux/fs.h  753  #define __NEED_I_SIZE_ORDERED
i_size_ordered_init  macro  include/linux/fs.h  756  #define i_size_ordered_init(inode) do { } while (0)
ACL_NOT_CACHED  macro  include/linux/fs.h  760  #define ACL_NOT_CACHED ((void *)(-1))
IOP_FASTPERM  macro  include/linux/fs.h  762  #define IOP_FASTPERM 0x0001
IOP_LOOKUP  macro  include/linux/fs.h  763  #define IOP_LOOKUP 0x0002
IOP_NOFOLLOW  macro  include/linux/fs.h  764  #define IOP_NOFOLLOW 0x0004
inode  struct  include/linux/fs.h  771  struct inode { umode_t i_mode; unsigned short i_opflags; kuid_t i_uid; kgid_t i_gid; unsigned int i_flags; struct posix_acl *i_acl; struct posix_acl *i_default_acl; const struct inode_operations *i_op; struct super_block *i_sb; struct address_space *i_mapping; void *i_security; unsigned long i_ino; const unsigned int i_nlink; unsigned int __i_nlink; }; dev_t i_rdev; loff_t i_size; struct timespec i_atime; struct timespec i_mtime; struct timespec i_ctime; spinlock_t i_lock; unsigned short i_bytes; unsigned int i_blkbits; blkcnt_t i_blocks; seqcount_t i_size_seqcount; unsigned long i_state; struct mutex i_mutex; unsigned long dirtied_when; struct hlist_node i_hash; struct list_head i_wb_list; struct list_head i_lru; struct list_head i_sb_list; union { struct list_head i_dentry; struct rcu_head i_rcu; }; u64 i_version; atomic_t i_count; atomic_t i_dio_count; atomic_t i_writecount; const struct file_operations *i_fop; struct file_lock *i_flock; struct address_space i_data; struct dquot *i_dquot[MAXQUOTAS]; struct list_head i_devices; union { struct pipe_inode_info *i_pipe; struct block_device *i_bdev; struct cdev *i_cdev; }; __u32 i_generation; __u32 i_fsnotify_mask; struct hlist_head i_fsnotify_marks; atomic_t i_readcount; void *i_private; };
inode_unhashed  function  include/linux/fs.h  862  static inline int inode_unhashed(struct inode *inode)
inode_i_mutex_lock_class  enum  include/linux/fs.h  878  enum inode_i_mutex_lock_class { I_MUTEX_NORMAL, I_MUTEX_PARENT, I_MUTEX_CHILD, I_MUTEX_XATTR, I_MUTEX_QUOTA };
i_size_read  function  include/linux/fs.h  897  static inline loff_t i_size_read(const struct inode *inode)
i_size_write  function  include/linux/fs.h  925  static inline void i_size_write(struct inode *inode,loff_t i_size)
i_uid_read  function  include/linux/fs.h  945  static inline uid_t i_uid_read(const struct inode *inode)
i_gid_read  function  include/linux/fs.h  950  static inline gid_t i_gid_read(const struct inode *inode)
i_uid_write  function  include/linux/fs.h  955  static inline void i_uid_write(struct inode *inode,uid_t uid)
i_gid_write  function  include/linux/fs.h  960  static inline void i_gid_write(struct inode *inode,gid_t gid)
iminor  function  include/linux/fs.h  965  static inline unsigned iminor(const struct inode *inode)
imajor  function  include/linux/fs.h  970  static inline unsigned imajor(const struct inode *inode)
I_BDEV  prototype  include/linux/fs.h  975  extern struct block_device *I_BDEV(struct inode *inode);
fown_struct  struct  include/linux/fs.h  977  struct fown_struct { rwlock_t lock; struct pid *pid; enum pid_type pid_type; kuid_t uid, euid; int signum; };
file_ra_state  struct  include/linux/fs.h  988  struct file_ra_state { pgoff_t start; unsigned int size; unsigned int async_size; unsigned int ra_pages; unsigned int mmap_miss; loff_t prev_pos; };
ra_has_index  function  include/linux/fs.h  1002  static inline int ra_has_index(struct file_ra_state *ra,pgoff_t index)
FILE_MNT_WRITE_TAKEN  macro  include/linux/fs.h  1008  #define FILE_MNT_WRITE_TAKEN 1
FILE_MNT_WRITE_RELEASED  macro  include/linux/fs.h  1009  #define FILE_MNT_WRITE_RELEASED 2
file  struct  include/linux/fs.h  1011  struct file { struct list_head fu_list; struct rcu_head fu_rcuhead; } f_u; struct path f_path; #define f_dentry f_path.dentry #define f_vfsmnt f_path.mnt const struct file_operations *f_op; spinlock_t f_lock; int f_sb_list_cpu; atomic_long_t f_count; unsigned int f_flags; fmode_t f_mode; loff_t f_pos; struct fown_struct f_owner; const struct cred *f_cred; struct file_ra_state f_ra; u64 f_version; void *f_security; void *private_data; struct list_head f_ep_links; struct list_head f_tfile_llink; struct address_space *f_mapping; unsigned long f_mnt_write_state; };
file_handle  struct  include/linux/fs.h  1059  struct file_handle { __u32 handle_bytes; int handle_type; unsigned char f_handle[0]; };
get_file  macro  include/linux/fs.h  1066  #define get_file(x) atomic_long_inc(&(x)->f_count)
fput_atomic  macro  include/linux/fs.h  1067  #define fput_atomic(x) atomic_long_add_unless(&(x)->f_count,-1,1)
file_count  macro  include/linux/fs.h  1068  #define file_count(x) atomic_long_read(&(x)->f_count)
file_take_write  function  include/linux/fs.h  1103  static inline void file_take_write(struct file *filp) {}
file_release_write  function  include/linux/fs.h  1104  static inline void file_release_write(struct file *filp) {}
file_reset_write  function  include/linux/fs.h  1105  static inline void file_reset_write(struct file *filp) {}
file_check_state  function  include/linux/fs.h  1106  static inline void file_check_state(struct file *filp) {}
file_check_writeable  function  include/linux/fs.h  1107  static inline int file_check_writeable(struct file *filp)
MAX_NON_LFS  macro  include/linux/fs.h  1113  #define MAX_NON_LFS ((1UL<<31) - 1)
MAX_LFS_FILESIZE  macro  include/linux/fs.h  1120  #define MAX_LFS_FILESIZE 0x7fffffffffffffffUL
FL_POSIX  macro  include/linux/fs.h  1123  #define FL_POSIX 1
FL_FLOCK  macro  include/linux/fs.h  1124  #define FL_FLOCK 2
FL_ACCESS  macro  include/linux/fs.h  1125  #define FL_ACCESS 8
FL_EXISTS  macro  include/linux/fs.h  1126  #define FL_EXISTS 16
FL_LEASE  macro  include/linux/fs.h  1127  #define FL_LEASE 32
FL_CLOSE  macro  include/linux/fs.h  1128  #define FL_CLOSE 64
FL_SLEEP  macro  include/linux/fs.h  1129  #define FL_SLEEP 128
FL_DOWNGRADE_PENDING  macro  include/linux/fs.h  1130  #define FL_DOWNGRADE_PENDING 256
FL_UNLOCK_PENDING  macro  include/linux/fs.h  1131  #define FL_UNLOCK_PENDING 512
FILE_LOCK_DEFERRED  macro  include/linux/fs.h  1137  #define FILE_LOCK_DEFERRED 1
file_lock_operations  struct  include/linux/fs.h  1148  struct file_lock_operations { void (*fl_copy_lock)(struct file_lock *, struct file_lock *); void (*fl_release_private)(struct file_lock *); };
lock_manager_operations  struct  include/linux/fs.h  1153  struct lock_manager_operations { int (*lm_compare_owner)(struct file_lock *, struct file_lock *); void (*lm_notify)(struct file_lock *); int (*lm_grant)(struct file_lock *, struct file_lock *, int); void (*lm_release_private)(struct file_lock *); void (*lm_break)(struct file_lock *); int (*lm_change)(struct file_lock **, int); };
lock_manager  struct  include/linux/fs.h  1162  struct lock_manager { struct list_head list; };
locks_start_grace  prototype  include/linux/fs.h  1166  void locks_start_grace(struct lock_manager *);
locks_end_grace  prototype  include/linux/fs.h  1167  void locks_end_grace(struct lock_manager *);
locks_in_grace  prototype  include/linux/fs.h  1168  int locks_in_grace(void);
file_lock  struct  include/linux/fs.h  1173  struct file_lock { struct file_lock *fl_next; struct list_head fl_link; struct list_head fl_block; fl_owner_t fl_owner; unsigned int fl_flags; unsigned char fl_type; unsigned int fl_pid; struct pid *fl_nspid; wait_queue_head_t fl_wait; struct file *fl_file; loff_t fl_start; loff_t fl_end; struct fasync_struct * fl_fasync; unsigned long fl_break_time; unsigned long fl_downgrade_time; const struct file_lock_operations *fl_ops; const struct lock_manager_operations *fl_lmops; union { struct nfs_lock_info nfs_fl; struct nfs4_lock_info nfs4_fl; struct { struct list_head link; int state; } afs; } fl_u; };
INT_LIMIT  macro  include/linux/fs.h  1206  #define INT_LIMIT(x) (~((x)1 << (sizeof(x)*8 - 1)))
OFFSET_MAX  macro  include/linux/fs.h  1207  #define OFFSET_MAX INT_LIMIT(loff_t)
OFFT_OFFSET_MAX  macro  include/linux/fs.h  1208  #define OFFT_OFFSET_MAX INT_LIMIT(off_t)
send_sigio  prototype  include/linux/fs.h  1213  extern void send_sigio(struct fown_struct *fown,int fd,int band);
fcntl_getlk  function  include/linux/fs.h  1257  static inline int fcntl_getlk(struct file *file,struct flock __user *user)
fcntl_setlk  function  include/linux/fs.h  1262  static inline int fcntl_setlk(unsigned int fd,struct file *file,unsigned int cmd, struct flock __user *user)
fcntl_getlk64  function  include/linux/fs.h  1269  static inline int fcntl_getlk64(struct file *file,struct flock64 __user *user)
fcntl_setlk64  function  include/linux/fs.h  1274  static inline int fcntl_setlk64(unsigned int fd,struct file *file,unsigned int cmd, struct flock64 __user *user)
fcntl_setlease  function  include/linux/fs.h  1280  static inline int fcntl_setlease(unsigned int fd,struct file *filp,long arg)
fcntl_getlease  function  include/linux/fs.h  1285  static inline int fcntl_getlease(struct file *filp)
locks_free_lock  prototype  include/linux/fs.h  1230  void locks_free_lock(struct file_lock *fl);
locks_init_lock  function  include/linux/fs.h  1290  static inline void locks_init_lock(struct file_lock *fl)
locks_alloc_lock  prototype  include/linux/fs.h  1232  extern struct file_lock * locks_alloc_lock(void);
locks_copy_lock  function  include/linux/fs.h  1300  static inline void locks_copy_lock(struct file_lock *new,struct file_lock *fl)
__locks_copy_lock  function  include/linux/fs.h  1295  static inline void __locks_copy_lock(struct file_lock *new,struct file_lock *fl)
locks_remove_posix  function  include/linux/fs.h  1305  static inline void locks_remove_posix(struct file *filp,fl_owner_t owner)
locks_remove_flock  function  include/linux/fs.h  1310  static inline void locks_remove_flock(struct file *filp)
locks_release_private  prototype  include/linux/fs.h  1237  extern void locks_release_private(struct file_lock *);
posix_test_lock  function  include/linux/fs.h  1315  static inline void posix_test_lock(struct file *filp,struct file_lock *fl)
posix_lock_file  function  include/linux/fs.h  1320  static inline int posix_lock_file(struct file *filp,struct file_lock *fl,struct file_lock *conflock)
posix_lock_file_wait  function  include/linux/fs.h  1326  static inline int posix_lock_file_wait(struct file *filp,struct file_lock *fl)
posix_unblock_lock  function  include/linux/fs.h  1331  static inline int posix_unblock_lock(struct file *filp,struct file_lock *waiter)
vfs_test_lock  function  include/linux/fs.h  1337  static inline int vfs_test_lock(struct file *filp,struct file_lock *fl)
vfs_lock_file  function  include/linux/fs.h  1342  static inline int vfs_lock_file(struct file *filp,unsigned int cmd,struct file_lock *fl, struct file_lock *conf)
vfs_cancel_lock  function  include/linux/fs.h  1348  static inline int vfs_cancel_lock(struct file *filp,struct file_lock *fl)
flock_lock_file_wait  function  include/linux/fs.h  1353  static inline int flock_lock_file_wait(struct file *filp,struct file_lock *request)
__break_lease  function  include/linux/fs.h  1359  static inline int __break_lease(struct inode *inode,unsigned int mode)
lease_get_mtime  function  include/linux/fs.h  1364  static inline void lease_get_mtime(struct inode *inode,struct timespec *time)
generic_setlease  function  include/linux/fs.h  1369  static inline int generic_setlease(struct file *filp,long arg,struct file_lock **flp)
vfs_setlease  function  include/linux/fs.h  1375  static inline int vfs_setlease(struct file *filp,long arg,struct file_lock **lease)
lease_modify  function  include/linux/fs.h  1381  static inline int lease_modify(struct file_lock **before,int arg)
lock_may_read  function  include/linux/fs.h  1386  static inline int lock_may_read(struct inode *inode,loff_t start,unsigned long len)
lock_may_write  function  include/linux/fs.h  1392  static inline int lock_may_write(struct inode *inode,loff_t start,unsigned long len)
locks_delete_block  function  include/linux/fs.h  1398  static inline void locks_delete_block(struct file_lock *waiter)
lock_flocks  function  include/linux/fs.h  1402  static inline void lock_flocks(void)
unlock_flocks  function  include/linux/fs.h  1406  static inline void unlock_flocks(void)
fasync_struct  struct  include/linux/fs.h  1413  struct fasync_struct { spinlock_t fa_lock; int magic; int fa_fd; struct fasync_struct *fa_next; struct file *fa_file; struct rcu_head fa_rcu; };
FASYNC_MAGIC  macro  include/linux/fs.h  1422  #define FASYNC_MAGIC 0x4601
fasync_helper  prototype  include/linux/fs.h  1425  extern int fasync_helper(int,struct file *,int,struct fasync_struct **);
fasync_insert_entry  prototype  include/linux/fs.h  1426  extern struct fasync_struct *fasync_insert_entry(int,struct file *,struct fasync_struct **,struct fasync_struct *);
fasync_remove_entry  prototype  include/linux/fs.h  1427  extern int fasync_remove_entry(struct file *,struct fasync_struct **);
fasync_alloc  prototype  include/linux/fs.h  1428  extern struct fasync_struct *fasync_alloc(void);
fasync_free  prototype  include/linux/fs.h  1429  extern void fasync_free(struct fasync_struct *);
kill_fasync  prototype  include/linux/fs.h  1432  extern void kill_fasync(struct fasync_struct **,int,int);
__f_setown  prototype  include/linux/fs.h  1434  extern int __f_setown(struct file *filp,struct pid *,enum pid_type,int force);
f_setown  prototype  include/linux/fs.h  1435  extern int f_setown(struct file *filp,unsigned long arg,int force);
f_delown  prototype  include/linux/fs.h  1436  extern void f_delown(struct file *filp);
f_getown  prototype  include/linux/fs.h  1437  extern pid_t f_getown(struct file *filp);
send_sigurg  prototype  include/linux/fs.h  1438  extern int send_sigurg(struct fown_struct *fown);
MNT_FORCE  macro  include/linux/fs.h  1444  #define MNT_FORCE 0x00000001
MNT_DETACH  macro  include/linux/fs.h  1445  #define MNT_DETACH 0x00000002
MNT_EXPIRE  macro  include/linux/fs.h  1446  #define MNT_EXPIRE 0x00000004
UMOUNT_NOFOLLOW  macro  include/linux/fs.h  1447  #define UMOUNT_NOFOLLOW 0x00000008
UMOUNT_UNUSED  macro  include/linux/fs.h  1448  #define UMOUNT_UNUSED 0x80000000
super_block  struct  include/linux/fs.h  1453  struct super_block { struct list_head s_list; dev_t s_dev; unsigned char s_dirt; unsigned char s_blocksize_bits; unsigned long s_blocksize; loff_t s_maxbytes; struct file_system_type *s_type; const struct super_operations *s_op; const struct dquot_operations *dq_op; const struct quotactl_ops *s_qcop; const struct export_operations *s_export_op; unsigned long s_flags; unsigned long s_magic; struct dentry *s_root; struct rw_semaphore s_umount; struct mutex s_lock; int s_count; atomic_t s_active; void *s_security; const struct xattr_handler **s_xattr; struct list_head s_inodes; struct hlist_bl_head s_anon; struct list_head __percpu *s_files; struct list_head s_files; struct list_head s_mounts; struct list_head s_dentry_lru; int s_nr_dentry_unused; spinlock_t s_inode_lru_lock ____cacheline_aligned_in_smp; struct list_head s_inode_lru; int s_nr_inodes_unused; struct block_device *s_bdev; struct backing_dev_info *s_bdi; struct mtd_info *s_mtd; struct hlist_node s_instances; struct quota_info s_dquot; int s_frozen; wait_queue_head_t s_wait_unfrozen; char s_id[32]; u8 s_uuid[16]; void *s_fs_info; unsigned int s_max_links; fmode_t s_mode; u32 s_time_gran; struct mutex s_vfs_rename_mutex; char *s_subtype; char __rcu *s_options; const struct dentry_operations *s_d_op; int cleancache_poolid; struct shrinker s_shrink; atomic_long_t s_remove_count; int s_readonly_remount; };
prune_icache_sb  prototype  include/linux/fs.h  1548  extern void prune_icache_sb(struct super_block *sb,int nr_to_scan);
prune_dcache_sb  prototype  include/linux/fs.h  1549  extern void prune_dcache_sb(struct super_block *sb,int nr_to_scan);
current_fs_time  prototype  include/linux/fs.h  1551  extern struct timespec current_fs_time(struct super_block *sb);
vfs_check_frozen  macro  include/linux/fs.h  1562  #define vfs_check_frozen(sb,level) wait_event((sb)->s_wait_unfrozen, ((sb)->s_frozen < (level)))
inode_owner_or_capable  prototype  include/linux/fs.h  1565  extern bool inode_owner_or_capable(const struct inode *inode);
lock_super  prototype  include/linux/fs.h  1568  extern void lock_super(struct super_block *);
unlock_super  prototype  include/linux/fs.h  1569  extern void unlock_super(struct super_block *);
vfs_create  prototype  include/linux/fs.h  1574  extern int vfs_create(struct inode *,struct dentry *,umode_t,struct nameidata *);
vfs_mkdir  prototype  include/linux/fs.h  1575  extern int vfs_mkdir(struct inode *,struct dentry *,umode_t);
vfs_mknod  prototype  include/linux/fs.h  1576  extern int vfs_mknod(struct inode *,struct dentry *,umode_t,dev_t);
vfs_symlink  prototype  include/linux/fs.h  1577  extern int vfs_symlink(struct inode *,struct dentry *,const char *);
vfs_link  prototype  include/linux/fs.h  1578  extern int vfs_link(struct dentry *,struct inode *,struct dentry *);
vfs_rmdir  prototype  include/linux/fs.h  1579  extern int vfs_rmdir(struct inode *,struct dentry *);
vfs_unlink  prototype  include/linux/fs.h  1580  extern int vfs_unlink(struct inode *,struct dentry *);
vfs_rename  prototype  include/linux/fs.h  1581  extern int vfs_rename(struct inode *,struct dentry *,struct inode *,struct dentry *);
dentry_unhash  prototype  include/linux/fs.h  1586  extern void dentry_unhash(struct dentry *dentry);
inode_init_owner  prototype  include/linux/fs.h  1591  extern void inode_init_owner(struct inode *inode,const struct inode *dir,umode_t mode);
fiemap_extent_info  struct  include/linux/fs.h  1596  struct fiemap_extent_info { unsigned int fi_flags; unsigned int fi_extents_mapped; unsigned int fi_extents_max; struct fiemap_extent __user *fi_extents_start; };
fiemap_fill_next_extent  prototype  include/linux/fs.h  1603  int fiemap_fill_next_extent(struct fiemap_extent_info *info,u64 logical,u64 phys, u64 len, u32 flags);
fiemap_check_flags  prototype  include/linux/fs.h  1605  int fiemap_check_flags(struct fiemap_extent_info *fieinfo,u32 fs_flags);
DT_UNKNOWN  macro  include/linux/fs.h  1613  #define DT_UNKNOWN 0
DT_FIFO  macro  include/linux/fs.h  1614  #define DT_FIFO 1
DT_CHR  macro  include/linux/fs.h  1615  #define DT_CHR 2
DT_DIR  macro  include/linux/fs.h  1616  #define DT_DIR 4
DT_BLK  macro  include/linux/fs.h  1617  #define DT_BLK 6
DT_REG  macro  include/linux/fs.h  1618  #define DT_REG 8
DT_LNK  macro  include/linux/fs.h  1619  #define DT_LNK 10
DT_SOCK  macro  include/linux/fs.h  1620  #define DT_SOCK 12
DT_WHT  macro  include/linux/fs.h  1621  #define DT_WHT 14
HAVE_COMPAT_IOCTL  macro  include/linux/fs.h  1635  #define HAVE_COMPAT_IOCTL 1
HAVE_UNLOCKED_IOCTL  macro  include/linux/fs.h  1636  #define HAVE_UNLOCKED_IOCTL 1
file_operations  struct  include/linux/fs.h  1638  struct file_operations { struct module *owner; loff_t (*llseek) (struct file *, loff_t, int); ssize_t (*read) (struct file *, char __user *, size_t, loff_t *); ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *); ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t); ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t); int (*readdir) (struct file *, void *, filldir_t); unsigned int (*poll) (struct file *, struct poll_table_struct *); long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long); long (*compat_ioctl) (struct file *, unsigned int, unsigned long); int (*mmap) (struct file *, struct vm_area_struct *); int (*open) (struct inode *, struct file *); int (*flush) (struct file *, fl_owner_t id); int (*release) (struct inode *, struct file *); int (*fsync) (struct file *, loff_t, loff_t, int datasync); int (*aio_fsync) (struct kiocb *, int datasync); int (*fasync) (int, struct file *, int); int (*lock) (struct file *, int, struct file_lock *); ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int); unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long); int (*check_flags)(int); int (*flock) (struct file *, int, struct file_lock *); ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int); ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int); int (*setlease)(struct file *, long, struct file_lock **); long (*fallocate)(struct file *file, int mode, loff_t offset,loff_t len); };
inode_operations  struct  include/linux/fs.h  1668  struct inode_operations { struct dentry * (*lookup) (struct inode *,struct dentry *, struct nameidata *); void * (*follow_link) (struct dentry *, struct nameidata *); int (*permission) (struct inode *, int); struct posix_acl * (*get_acl)(struct inode *, int); int (*readlink) (struct dentry *, char __user *,int); void (*put_link) (struct dentry *, struct nameidata *, void *); int (*create) (struct inode *,struct dentry *,umode_t,struct nameidata *); int (*link) (struct dentry *,struct inode *,struct dentry *); int (*unlink) (struct inode *,struct dentry *); int (*symlink) (struct inode *,struct dentry *,const char *); int (*mkdir) (struct inode *,struct dentry *,umode_t); int (*rmdir) (struct inode *,struct dentry *); int (*mknod) (struct inode *,struct dentry *,umode_t,dev_t); int (*rename) (struct inode *, struct dentry *,struct inode *, struct dentry *); void (*truncate) (struct inode *); int (*setattr) (struct dentry *, struct iattr *); int (*getattr) (struct vfsmount *mnt, struct dentry *, struct kstat *); int (*setxattr) (struct dentry *, const char *,const void *,size_t,int); ssize_t (*getxattr) (struct dentry *, const char *, void *, size_t); ssize_t (*listxattr) (struct dentry *, char *, size_t); int (*removexattr) (struct dentry *, const char *); int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,u64 len); int (*update_time)(struct inode *, struct timespec *, int); } ____cacheline_aligned;
rw_copy_check_uvector  prototype  include/linux/fs.h  1700  ssize_t rw_copy_check_uvector(int type,const struct iovec __user * uvector,unsigned long nr_segs, unsigned long fast_segs,struct iovec *fast_pointer,struct iovec **ret_pointer);
vfs_read  prototype  include/linux/fs.h  1705  extern ssize_t vfs_read(struct file *,char __user *,size_t,loff_t *);
vfs_write  prototype  include/linux/fs.h  1706  extern ssize_t vfs_write(struct file *,const char __user *,size_t,loff_t *);
vfs_readv  prototype  include/linux/fs.h  1707  extern ssize_t vfs_readv(struct file *,const struct iovec __user *,unsigned long, loff_t *);
vfs_writev  prototype  include/linux/fs.h  1709  extern ssize_t vfs_writev(struct file *,const struct iovec __user *,unsigned long, loff_t *);
super_operations  struct  include/linux/fs.h  1712  struct super_operations { struct inode *(*alloc_inode)(struct super_block *sb); void (*destroy_inode)(struct inode *); void (*dirty_inode) (struct inode *, int flags); int (*write_inode) (struct inode *, struct writeback_control *wbc); int (*drop_inode) (struct inode *); void (*evict_inode) (struct inode *); void (*put_super) (struct super_block *); void (*write_super) (struct super_block *); int (*sync_fs)(struct super_block *sb, int wait); int (*freeze_fs) (struct super_block *); int (*unfreeze_fs) (struct super_block *); int (*statfs) (struct dentry *, struct kstatfs *); int (*remount_fs) (struct super_block *, int *, char *); void (*umount_begin) (struct super_block *); int (*show_options)(struct seq_file *, struct dentry *); int (*show_devname)(struct seq_file *, struct dentry *); int (*show_path)(struct seq_file *, struct dentry *); int (*show_stats)(struct seq_file *, struct dentry *); ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t); ssize_t (*quota_write)(struct super_block *, int, const char *, size_t, loff_t); int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t); int (*nr_cached_objects)(struct super_block *); void (*free_cached_objects)(struct super_block *, int); };
I_DIRTY_SYNC  macro  include/linux/fs.h  1795  #define I_DIRTY_SYNC (1 << 0)
I_DIRTY_DATASYNC  macro  include/linux/fs.h  1796  #define I_DIRTY_DATASYNC (1 << 1)
I_DIRTY_PAGES  macro  include/linux/fs.h  1797  #define I_DIRTY_PAGES (1 << 2)
__I_NEW  macro  include/linux/fs.h  1798  #define __I_NEW 3
I_NEW  macro  include/linux/fs.h  1799  #define I_NEW (1 << __I_NEW)
I_WILL_FREE  macro  include/linux/fs.h  1800  #define I_WILL_FREE (1 << 4)
I_FREEING  macro  include/linux/fs.h  1801  #define I_FREEING (1 << 5)
I_CLEAR  macro  include/linux/fs.h  1802  #define I_CLEAR (1 << 6)
__I_SYNC  macro  include/linux/fs.h  1803  #define __I_SYNC 7
I_SYNC  macro  include/linux/fs.h  1804  #define I_SYNC (1 << __I_SYNC)
I_REFERENCED  macro  include/linux/fs.h  1805  #define I_REFERENCED (1 << 8)
__I_DIO_WAKEUP  macro  include/linux/fs.h  1806  #define __I_DIO_WAKEUP 9
I_DIO_WAKEUP  macro  include/linux/fs.h  1807  #define I_DIO_WAKEUP (1 << I_DIO_WAKEUP)
I_DIRTY  macro  include/linux/fs.h  1809  #define I_DIRTY (I_DIRTY_SYNC | I_DIRTY_DATASYNC | I_DIRTY_PAGES)
__mark_inode_dirty  prototype  include/linux/fs.h  1811  extern void __mark_inode_dirty(struct inode *,int);
mark_inode_dirty  function  include/linux/fs.h  1812  static inline void mark_inode_dirty(struct inode *inode)
mark_inode_dirty_sync  function  include/linux/fs.h  1817  static inline void mark_inode_dirty_sync(struct inode *inode)
inc_nlink  prototype  include/linux/fs.h  1822  extern void inc_nlink(struct inode *inode);
drop_nlink  prototype  include/linux/fs.h  1823  extern void drop_nlink(struct inode *inode);
clear_nlink  prototype  include/linux/fs.h  1824  extern void clear_nlink(struct inode *inode);
set_nlink  prototype  include/linux/fs.h  1825  extern void set_nlink(struct inode *inode,unsigned int nlink);
inode_inc_link_count  function  include/linux/fs.h  1827  static inline void inode_inc_link_count(struct inode *inode)
inode_dec_link_count  function  include/linux/fs.h  1833  static inline void inode_dec_link_count(struct inode *inode)
inode_inc_iversion  function  include/linux/fs.h  1847  static inline void inode_inc_iversion(struct inode *inode)
file_time_flags  enum  include/linux/fs.h  1854  enum file_time_flags { S_ATIME = 1, S_MTIME = 2, S_CTIME = 4, S_VERSION = 8, };
touch_atime  prototype  include/linux/fs.h  1861  extern void touch_atime(struct path *);
file_accessed  function  include/linux/fs.h  1862  static inline void file_accessed(struct file *file)
sync_inode  prototype  include/linux/fs.h  1868  int sync_inode(struct inode *inode,struct writeback_control *wbc);
sync_inode_metadata  prototype  include/linux/fs.h  1869  int sync_inode_metadata(struct inode *inode,int wait);
file_system_type  struct  include/linux/fs.h  1871  struct file_system_type { const char *name; int fs_flags; struct dentry *(*mount) (struct file_system_type *, int,const char *, void *); void (*kill_sb) (struct super_block *); struct module *owner; struct file_system_type * next; struct hlist_head fs_supers; struct lock_class_key s_lock_key; struct lock_class_key s_umount_key; struct lock_class_key s_vfs_rename_key; struct lock_class_key i_lock_key; struct lock_class_key i_mutex_key; struct lock_class_key i_mutex_dir_key; };
mount_ns  prototype  include/linux/fs.h  1890  extern struct dentry *mount_ns(struct file_system_type *fs_type,int flags,void *data, int (*fill_super)(struct super_block *, void *, int));
mount_bdev  prototype  include/linux/fs.h  1892  extern struct dentry *mount_bdev(struct file_system_type *fs_type,int flags, const char *dev_name, void *data,int (*fill_super)(struct super_block *, void *, int));
mount_single  prototype  include/linux/fs.h  1895  extern struct dentry *mount_single(struct file_system_type *fs_type,int flags, void *data,int (*fill_super)(struct super_block *, void *, int));
mount_nodev  prototype  include/linux/fs.h  1898  extern struct dentry *mount_nodev(struct file_system_type *fs_type,int flags, void *data,int (*fill_super)(struct super_block *, void *, int));
mount_subtree  prototype  include/linux/fs.h  1901  extern struct dentry *mount_subtree(struct vfsmount *mnt,const char *path);
generic_shutdown_super  prototype  include/linux/fs.h  1902  void generic_shutdown_super(struct super_block *sb);
kill_block_super  prototype  include/linux/fs.h  1903  void kill_block_super(struct super_block *sb);
kill_anon_super  prototype  include/linux/fs.h  1904  void kill_anon_super(struct super_block *sb);
kill_litter_super  prototype  include/linux/fs.h  1905  void kill_litter_super(struct super_block *sb);
deactivate_super  prototype  include/linux/fs.h  1906  void deactivate_super(struct super_block *sb);
deactivate_locked_super  prototype  include/linux/fs.h  1907  void deactivate_locked_super(struct super_block *sb);
set_anon_super  prototype  include/linux/fs.h  1908  int set_anon_super(struct super_block *s,void *data);
get_anon_bdev  prototype  include/linux/fs.h  1909  int get_anon_bdev(dev_t *);
free_anon_bdev  prototype  include/linux/fs.h  1910  void free_anon_bdev(dev_t);
sget  prototype  include/linux/fs.h  1911  struct super_block *sget(struct file_system_type *type,int (*test)(struct super_block *,void *),int (*set)(struct super_block *,void *),void *data);
mount_pseudo  prototype  include/linux/fs.h  1915  extern struct dentry *mount_pseudo(struct file_system_type *,char *,const struct super_operations *ops,const struct dentry_operations *dops,unsigned long);
fops_get  macro  include/linux/fs.h  1921  #define fops_get(fops) (((fops) && try_module_get((fops)->owner) ? (fops) : NULL))
fops_put  macro  include/linux/fs.h  1923  #define fops_put(fops) do { if (fops) module_put((fops)->owner); } while(0)
register_filesystem  prototype  include/linux/fs.h  1926  extern int register_filesystem(struct file_system_type *);
unregister_filesystem  prototype  include/linux/fs.h  1927  extern int unregister_filesystem(struct file_system_type *);
kern_mount_data  prototype  include/linux/fs.h  1928  extern struct vfsmount *kern_mount_data(struct file_system_type *,void *data);
kern_mount  macro  include/linux/fs.h  1929  #define kern_mount(type) kern_mount_data(type,NULL)
kern_unmount  prototype  include/linux/fs.h  1930  extern void kern_unmount(struct vfsmount *mnt);
may_umount_tree  prototype  include/linux/fs.h  1931  extern int may_umount_tree(struct vfsmount *);
may_umount  prototype  include/linux/fs.h  1932  extern int may_umount(struct vfsmount *);
do_mount  prototype  include/linux/fs.h  1933  extern long do_mount(char *,char *,char *,unsigned long,void *);
collect_mounts  prototype  include/linux/fs.h  1934  extern struct vfsmount *collect_mounts(struct path *);
drop_collected_mounts  prototype  include/linux/fs.h  1935  extern void drop_collected_mounts(struct vfsmount *);
iterate_mounts  prototype  include/linux/fs.h  1936  extern int iterate_mounts(int (*)(struct vfsmount *,void *),void *,struct vfsmount *);
vfs_statfs  prototype  include/linux/fs.h  1938  extern int vfs_statfs(struct path *,struct kstatfs *);
user_statfs  prototype  include/linux/fs.h  1939  extern int user_statfs(const char __user *,struct kstatfs *);
fd_statfs  prototype  include/linux/fs.h  1940  extern int fd_statfs(int,struct kstatfs *);
vfs_ustat  prototype  include/linux/fs.h  1941  extern int vfs_ustat(dev_t,struct kstatfs *);
freeze_super  prototype  include/linux/fs.h  1942  extern int freeze_super(struct super_block *super);
thaw_super  prototype  include/linux/fs.h  1943  extern int thaw_super(struct super_block *super);
our_mnt  prototype  include/linux/fs.h  1944  extern bool our_mnt(struct vfsmount *mnt);
current_umask  prototype  include/linux/fs.h  1946  extern int current_umask(void);
MAX_RW_COUNT  macro  include/linux/fs.h  1951  #define MAX_RW_COUNT (INT_MAX & PAGE_CACHE_MASK)
rw_verify_area  prototype  include/linux/fs.h  1952  extern int rw_verify_area(int,struct file *,loff_t *,size_t);
FLOCK_VERIFY_READ  macro  include/linux/fs.h  1954  #define FLOCK_VERIFY_READ 1
FLOCK_VERIFY_WRITE  macro  include/linux/fs.h  1955  #define FLOCK_VERIFY_WRITE 2
locks_mandatory_locked  function  include/linux/fs.h  2009  static inline int locks_mandatory_locked(struct inode *inode)
locks_mandatory_area  function  include/linux/fs.h  2014  static inline int locks_mandatory_area(int rw,struct inode *inode,struct file *filp, loff_t offset,size_t count)
__mandatory_lock  function  include/linux/fs.h  2021  static inline int __mandatory_lock(struct inode *inode)
mandatory_lock  function  include/linux/fs.h  2026  static inline int mandatory_lock(struct inode *inode)
locks_verify_locked  function  include/linux/fs.h  2031  static inline int locks_verify_locked(struct inode *inode)
locks_verify_truncate  function  include/linux/fs.h  2036  static inline int locks_verify_truncate(struct inode *inode,struct file *filp,size_t size)
break_lease  function  include/linux/fs.h  2042  static inline int break_lease(struct inode *inode,unsigned int mode)
do_truncate  prototype  include/linux/fs.h  2051  extern int do_truncate(struct dentry *,loff_t start,unsigned int time_attrs,struct file *filp);
do_fallocate  prototype  include/linux/fs.h  2053  extern int do_fallocate(struct file *file,int mode,loff_t offset,loff_t len);
do_sys_open  prototype  include/linux/fs.h  2055  extern long do_sys_open(int dfd,const char __user *filename,int flags,umode_t mode);
filp_open  prototype  include/linux/fs.h  2057  extern struct file *filp_open(const char *,int,umode_t);
file_open_root  prototype  include/linux/fs.h  2058  extern struct file *file_open_root(struct dentry *,struct vfsmount *,const char *, int);
dentry_open  prototype  include/linux/fs.h  2060  extern struct file * dentry_open(struct dentry *,struct vfsmount *,int,const struct cred *);
filp_close  prototype  include/linux/fs.h  2062  extern int filp_close(struct file *,fl_owner_t id);
getname  prototype  include/linux/fs.h  2063  extern char * getname(const char __user *);
ioctl_preallocate  prototype  include/linux/fs.h  2067  extern int ioctl_preallocate(struct file *filp,void __user *argp);
vfs_caches_init_early  prototype  include/linux/fs.h  2070  extern void __init vfs_caches_init_early(void);
vfs_caches_init  prototype  include/linux/fs.h  2071  extern void __init vfs_caches_init(unsigned long);
__getname_gfp  macro  include/linux/fs.h  2075  #define __getname_gfp(gfp) kmem_cache_alloc(names_cachep,(gfp))
__getname  macro  include/linux/fs.h  2076  #define __getname() __getname_gfp(GFP_KERNEL)
__putname  macro  include/linux/fs.h  2077  #define __putname(name) kmem_cache_free(names_cachep,(void *)(name))
putname  prototype  include/linux/fs.h  2081  extern void putname(const char *name);
register_blkdev  prototype  include/linux/fs.h  2085  extern int register_blkdev(unsigned int,const char *);
unregister_blkdev  prototype  include/linux/fs.h  2086  extern void unregister_blkdev(unsigned int,const char *);
bdget  prototype  include/linux/fs.h  2087  extern struct block_device *bdget(dev_t);
bdgrab  prototype  include/linux/fs.h  2088  extern struct block_device *bdgrab(struct block_device *bdev);
bd_set_size  prototype  include/linux/fs.h  2089  extern void bd_set_size(struct block_device *,loff_t size);
blkdev_max_block  prototype  include/linux/fs.h  2090  extern sector_t blkdev_max_block(struct block_device *bdev);
bd_forget  function  include/linux/fs.h  2101  static inline void bd_forget(struct inode *inode) {}
bdput  prototype  include/linux/fs.h  2092  extern void bdput(struct block_device *);
invalidate_bdev  function  include/linux/fs.h  2104  static inline void invalidate_bdev(struct block_device *bdev) {}
sync_blockdev  function  include/linux/fs.h  2102  static inline int sync_blockdev(struct block_device *bdev) { return 0; }
kill_bdev  function  include/linux/fs.h  2103  static inline void kill_bdev(struct block_device *bdev) {}
freeze_bdev  function  include/linux/fs.h  2106  static inline struct super_block *freeze_bdev(struct block_device *sb)
emergency_thaw_all  prototype  include/linux/fs.h  2097  extern void emergency_thaw_all(void);
thaw_bdev  function  include/linux/fs.h  2111  static inline int thaw_bdev(struct block_device *bdev,struct super_block *sb)
fsync_bdev  prototype  include/linux/fs.h  2099  extern int fsync_bdev(struct block_device *);
sync_filesystem  prototype  include/linux/fs.h  2116  extern int sync_filesystem(struct super_block *);
ioctl_by_bdev  prototype  include/linux/fs.h  2122  extern int ioctl_by_bdev(struct block_device *,unsigned,unsigned long);
blkdev_ioctl  prototype  include/linux/fs.h  2123  extern int blkdev_ioctl(struct block_device *,fmode_t,unsigned,unsigned long);
compat_blkdev_ioctl  prototype  include/linux/fs.h  2124  extern long compat_blkdev_ioctl(struct file *,unsigned,unsigned long);
blkdev_get  prototype  include/linux/fs.h  2125  extern int blkdev_get(struct block_device *bdev,fmode_t mode,void *holder);
blkdev_get_by_path  prototype  include/linux/fs.h  2126  extern struct block_device *blkdev_get_by_path(const char *path,fmode_t mode,void *holder);
blkdev_get_by_dev  prototype  include/linux/fs.h  2128  extern struct block_device *blkdev_get_by_dev(dev_t dev,fmode_t mode,void *holder);
blkdev_put  prototype  include/linux/fs.h  2130  extern int blkdev_put(struct block_device *bdev,fmode_t mode);
bd_link_disk_holder  function  include/linux/fs.h  2136  static inline int bd_link_disk_holder(struct block_device *bdev,struct gendisk *disk)
bd_unlink_disk_holder  function  include/linux/fs.h  2141  static inline void bd_unlink_disk_holder(struct block_device *bdev,struct gendisk *disk)
CHRDEV_MAJOR_HASH_SIZE  macro  include/linux/fs.h  2149  #define CHRDEV_MAJOR_HASH_SIZE 255
alloc_chrdev_region  prototype  include/linux/fs.h  2150  extern int alloc_chrdev_region(dev_t *,unsigned,unsigned,const char *);
register_chrdev_region  prototype  include/linux/fs.h  2151  extern int register_chrdev_region(dev_t,unsigned,const char *);
__register_chrdev  prototype  include/linux/fs.h  2152  extern int __register_chrdev(unsigned int major,unsigned int baseminor,unsigned int count, const char *name,const struct file_operations *fops);
__unregister_chrdev  prototype  include/linux/fs.h  2155  extern void __unregister_chrdev(unsigned int major,unsigned int baseminor,unsigned int count, const char *name);
unregister_chrdev_region  prototype  include/linux/fs.h  2157  extern void unregister_chrdev_region(dev_t,unsigned);
chrdev_show  prototype  include/linux/fs.h  2158  extern void chrdev_show(struct seq_file *,off_t);
register_chrdev  function  include/linux/fs.h  2160  static inline int register_chrdev(unsigned int major,const char *name,const struct file_operations *fops)
unregister_chrdev  function  include/linux/fs.h  2166  static inline void unregister_chrdev(unsigned int major,const char *name)
BDEVNAME_SIZE  macro  include/linux/fs.h  2172  #define BDEVNAME_SIZE 32
BDEVT_SIZE  macro  include/linux/fs.h  2173  #define BDEVT_SIZE 10
BLKDEV_MAJOR_HASH_SIZE  macro  include/linux/fs.h  2183  #define BLKDEV_MAJOR_HASH_SIZE 0
__bdevname  prototype  include/linux/fs.h  2177  extern const char *__bdevname(dev_t,char *buffer);
bdevname  prototype  include/linux/fs.h  2178  extern const char *bdevname(struct block_device *bdev,char *buffer);
lookup_bdev  prototype  include/linux/fs.h  2179  extern struct block_device *lookup_bdev(const char *);
blkdev_show  prototype  include/linux/fs.h  2180  extern void blkdev_show(struct seq_file *,off_t);
init_special_inode  prototype  include/linux/fs.h  2186  extern void init_special_inode(struct inode *,umode_t,dev_t);
make_bad_inode  prototype  include/linux/fs.h  2189  extern void make_bad_inode(struct inode *);
is_bad_inode  prototype  include/linux/fs.h  2190  extern int is_bad_inode(struct inode *);
bio_rw  macro  include/linux/fs.h  2200  #define bio_rw(bio) ((bio)->bi_rw & (RW_MASK | RWA_MASK))
bio_data_dir  macro  include/linux/fs.h  2205  #define bio_data_dir(bio) ((bio)->bi_rw & 1)
check_disk_size_change  prototype  include/linux/fs.h  2207  extern void check_disk_size_change(struct gendisk *disk,struct block_device *bdev);
revalidate_disk  prototype  include/linux/fs.h  2209  extern int revalidate_disk(struct gendisk *);
check_disk_change  prototype  include/linux/fs.h  2210  extern int check_disk_change(struct block_device *);
__invalidate_device  prototype  include/linux/fs.h  2211  extern int __invalidate_device(struct block_device *,bool);
invalidate_partition  prototype  include/linux/fs.h  2212  extern int invalidate_partition(struct gendisk *,int);
invalidate_mapping_pages  prototype  include/linux/fs.h  2214  unsigned long invalidate_mapping_pages(struct address_space *mapping,pgoff_t start, pgoff_t end);
invalidate_remote_inode  function  include/linux/fs.h  2217  static inline void invalidate_remote_inode(struct inode *inode)
invalidate_inode_pages2  prototype  include/linux/fs.h  2223  extern int invalidate_inode_pages2(struct address_space *mapping);
invalidate_inode_pages2_range  prototype  include/linux/fs.h  2224  extern int invalidate_inode_pages2_range(struct address_space *mapping,pgoff_t start, pgoff_t end);
write_inode_now  prototype  include/linux/fs.h  2226  extern int write_inode_now(struct inode *,int);
filemap_fdatawrite  prototype  include/linux/fs.h  2227  extern int filemap_fdatawrite(struct address_space *);
filemap_flush  prototype  include/linux/fs.h  2228  extern int filemap_flush(struct address_space *);
filemap_fdatawait  prototype  include/linux/fs.h  2229  extern int filemap_fdatawait(struct address_space *);
filemap_fdatawait_range  prototype  include/linux/fs.h  2230  extern int filemap_fdatawait_range(struct address_space *,loff_t lstart,loff_t lend);
filemap_write_and_wait  prototype  include/linux/fs.h  2232  extern int filemap_write_and_wait(struct address_space *mapping);
filemap_write_and_wait_range  prototype  include/linux/fs.h  2233  extern int filemap_write_and_wait_range(struct address_space *mapping,loff_t lstart, loff_t lend);
__filemap_fdatawrite_range  prototype  include/linux/fs.h  2235  extern int __filemap_fdatawrite_range(struct address_space *mapping,loff_t start, loff_t end, int sync_mode);
filemap_fdatawrite_range  prototype  include/linux/fs.h  2237  extern int filemap_fdatawrite_range(struct address_space *mapping,loff_t start, loff_t end);
vfs_fsync_range  prototype  include/linux/fs.h  2240  extern int vfs_fsync_range(struct file *file,loff_t start,loff_t end,int datasync);
vfs_fsync  prototype  include/linux/fs.h  2242  extern int vfs_fsync(struct file *file,int datasync);
generic_write_sync  prototype  include/linux/fs.h  2243  extern int generic_write_sync(struct file *file,loff_t pos,loff_t count);
sync_supers  prototype  include/linux/fs.h  2244  extern void sync_supers(void);
emergency_sync  prototype  include/linux/fs.h  2245  extern void emergency_sync(void);
emergency_remount  prototype  include/linux/fs.h  2246  extern void emergency_remount(void);
bmap  prototype  include/linux/fs.h  2248  extern sector_t bmap(struct inode *,sector_t);
notify_change  prototype  include/linux/fs.h  2250  extern int notify_change(struct dentry *,struct iattr *);
inode_permission  prototype  include/linux/fs.h  2251  extern int inode_permission(struct inode *,int);
generic_permission  prototype  include/linux/fs.h  2252  extern int generic_permission(struct inode *,int);
execute_ok  function  include/linux/fs.h  2254  static inline bool execute_ok(struct inode *inode)
get_write_access  function  include/linux/fs.h  2275  static inline int get_write_access(struct inode *inode)
deny_write_access  function  include/linux/fs.h  2279  static inline int deny_write_access(struct file *file)
put_write_access  function  include/linux/fs.h  2284  static inline void put_write_access(struct inode * inode)
allow_write_access  function  include/linux/fs.h  2288  static inline void allow_write_access(struct file *file)
i_readcount_dec  function  include/linux/fs.h  2304  static inline void i_readcount_dec(struct inode *inode)
i_readcount_inc  function  include/linux/fs.h  2308  static inline void i_readcount_inc(struct inode *inode)
do_pipe_flags  prototype  include/linux/fs.h  2313  extern int do_pipe_flags(int *,int);
create_read_pipe  prototype  include/linux/fs.h  2314  extern struct file *create_read_pipe(struct file *f,int flags);
create_write_pipe  prototype  include/linux/fs.h  2315  extern struct file *create_write_pipe(int flags);
free_write_pipe  prototype  include/linux/fs.h  2316  extern void free_write_pipe(struct file *);
kernel_read  prototype  include/linux/fs.h  2318  extern int kernel_read(struct file *,loff_t,char *,unsigned long);
open_exec  prototype  include/linux/fs.h  2319  extern struct file * open_exec(const char *);
is_subdir  prototype  include/linux/fs.h  2322  extern int is_subdir(struct dentry *,struct dentry *);
path_is_under  prototype  include/linux/fs.h  2323  extern int path_is_under(struct path *,struct path *);
find_inode_number  prototype  include/linux/fs.h  2324  extern ino_t find_inode_number(struct dentry *,struct qstr *);
default_llseek  prototype  include/linux/fs.h  2329  extern loff_t default_llseek(struct file *file,loff_t offset,int origin);
vfs_llseek  prototype  include/linux/fs.h  2331  extern loff_t vfs_llseek(struct file *file,loff_t offset,int origin);
inode_init_always  prototype  include/linux/fs.h  2333  extern int inode_init_always(struct super_block *,struct inode *);
inode_init_once  prototype  include/linux/fs.h  2334  extern void inode_init_once(struct inode *);
address_space_init_once  prototype  include/linux/fs.h  2335  extern void address_space_init_once(struct address_space *mapping);
ihold  prototype  include/linux/fs.h  2336  extern void ihold(struct inode * inode);
iput  prototype  include/linux/fs.h  2337  extern void iput(struct inode *);
igrab  prototype  include/linux/fs.h  2338  extern struct inode * igrab(struct inode *);
iunique  prototype  include/linux/fs.h  2339  extern ino_t iunique(struct super_block *,ino_t);
inode_needs_sync  prototype  include/linux/fs.h  2340  extern int inode_needs_sync(struct inode *inode);
generic_delete_inode  prototype  include/linux/fs.h  2341  extern int generic_delete_inode(struct inode *inode);
generic_drop_inode  function  include/linux/fs.h  2342  static inline int generic_drop_inode(struct inode *inode)
ilookup5_nowait  prototype  include/linux/fs.h  2347  extern struct inode *ilookup5_nowait(struct super_block *sb,unsigned long hashval, int (*test)(struct inode *, void *),void *data);
ilookup5  prototype  include/linux/fs.h  2350  extern struct inode *ilookup5(struct super_block *sb,unsigned long hashval,int (*test)(struct inode *, void *), void *data);
ilookup  prototype  include/linux/fs.h  2352  extern struct inode *ilookup(struct super_block *sb,unsigned long ino);
iget5_locked  prototype  include/linux/fs.h  2354  extern struct inode * iget5_locked(struct super_block *,unsigned long,int (*test)(struct inode *,void *),int (*set)(struct inode *,void *),void *);
iget_locked  prototype  include/linux/fs.h  2355  extern struct inode * iget_locked(struct super_block *,unsigned long);
insert_inode_locked4  prototype  include/linux/fs.h  2356  extern int insert_inode_locked4(struct inode *,unsigned long,int (*test)(struct inode *,void *),void *);
insert_inode_locked  prototype  include/linux/fs.h  2357  extern int insert_inode_locked(struct inode *);
lockdep_annotate_inode_mutex_key  function  include/linux/fs.h  2361  static inline void lockdep_annotate_inode_mutex_key(struct inode *inode) { };
unlock_new_inode  prototype  include/linux/fs.h  2363  extern void unlock_new_inode(struct inode *);
get_next_ino  prototype  include/linux/fs.h  2364  extern unsigned int get_next_ino(void);
__iget  prototype  include/linux/fs.h  2366  extern void __iget(struct inode * inode);
iget_failed  prototype  include/linux/fs.h  2367  extern void iget_failed(struct inode *);
clear_inode  prototype  include/linux/fs.h  2368  extern void clear_inode(struct inode *);
__destroy_inode  prototype  include/linux/fs.h  2369  extern void __destroy_inode(struct inode *);
new_inode_pseudo  prototype  include/linux/fs.h  2370  extern struct inode *new_inode_pseudo(struct super_block *sb);
new_inode  prototype  include/linux/fs.h  2371  extern struct inode *new_inode(struct super_block *sb);
free_inode_nonrcu  prototype  include/linux/fs.h  2372  extern void free_inode_nonrcu(struct inode *inode);
should_remove_suid  prototype  include/linux/fs.h  2373  extern int should_remove_suid(struct dentry *);
file_remove_suid  prototype  include/linux/fs.h  2374  extern int file_remove_suid(struct file *);
__insert_inode_hash  prototype  include/linux/fs.h  2376  extern void __insert_inode_hash(struct inode *,unsigned long hashval);
insert_inode_hash  function  include/linux/fs.h  2377  static inline void insert_inode_hash(struct inode *inode)
__remove_inode_hash  prototype  include/linux/fs.h  2382  extern void __remove_inode_hash(struct inode *);
remove_inode_hash  function  include/linux/fs.h  2383  static inline void remove_inode_hash(struct inode *inode)
inode_sb_list_add  prototype  include/linux/fs.h  2389  extern void inode_sb_list_add(struct inode *inode);
submit_bio  prototype  include/linux/fs.h  2392  extern void submit_bio(int,struct bio *);
bdev_read_only  prototype  include/linux/fs.h  2393  extern int bdev_read_only(struct block_device *);
set_blocksize  prototype  include/linux/fs.h  2395  extern int set_blocksize(struct block_device *,int);
sb_set_blocksize  prototype  include/linux/fs.h  2396  extern int sb_set_blocksize(struct super_block *,int);
sb_min_blocksize  prototype  include/linux/fs.h  2397  extern int sb_min_blocksize(struct super_block *,int);
generic_file_mmap  prototype  include/linux/fs.h  2399  extern int generic_file_mmap(struct file *,struct vm_area_struct *);
generic_file_readonly_mmap  prototype  include/linux/fs.h  2400  extern int generic_file_readonly_mmap(struct file *,struct vm_area_struct *);
file_read_actor  prototype  include/linux/fs.h  2401  extern int file_read_actor(read_descriptor_t * desc,struct page *page,unsigned long offset,unsigned long size);
generic_write_checks  prototype  include/linux/fs.h  2402  int generic_write_checks(struct file *file,loff_t *pos,size_t *count,int isblk);
generic_file_aio_read  prototype  include/linux/fs.h  2403  extern ssize_t generic_file_aio_read(struct kiocb *,const struct iovec *,unsigned long,loff_t);
__generic_file_aio_write  prototype  include/linux/fs.h  2404  extern ssize_t __generic_file_aio_write(struct kiocb *,const struct iovec *,unsigned long,loff_t *);
generic_file_aio_write  prototype  include/linux/fs.h  2406  extern ssize_t generic_file_aio_write(struct kiocb *,const struct iovec *,unsigned long,loff_t);
generic_file_direct_write  prototype  include/linux/fs.h  2407  extern ssize_t generic_file_direct_write(struct kiocb *,const struct iovec *,unsigned long *, loff_t, loff_t *, size_t, size_t);
generic_file_buffered_write  prototype  include/linux/fs.h  2409  extern ssize_t generic_file_buffered_write(struct kiocb *,const struct iovec *,unsigned long, loff_t, loff_t *, size_t, ssize_t);
do_sync_read  prototype  include/linux/fs.h  2411  extern ssize_t do_sync_read(struct file *filp,char __user *buf,size_t len,loff_t *ppos);
do_sync_write  prototype  include/linux/fs.h  2412  extern ssize_t do_sync_write(struct file *filp,const char __user *buf,size_t len,loff_t *ppos);
generic_segment_checks  prototype  include/linux/fs.h  2413  extern int generic_segment_checks(const struct iovec *iov,unsigned long *nr_segs, size_t *count, int access_flags);
blkdev_aio_write  prototype  include/linux/fs.h  2417  extern ssize_t blkdev_aio_write(struct kiocb *iocb,const struct iovec *iov,unsigned long nr_segs, loff_t pos);
blkdev_fsync  prototype  include/linux/fs.h  2419  extern int blkdev_fsync(struct file *filp,loff_t start,loff_t end,int datasync);
block_sync_page  prototype  include/linux/fs.h  2421  extern void block_sync_page(struct page *page);
generic_file_splice_read  prototype  include/linux/fs.h  2424  extern ssize_t generic_file_splice_read(struct file *,loff_t *,struct pipe_inode_info *, size_t, unsigned int);
default_file_splice_read  prototype  include/linux/fs.h  2426  extern ssize_t default_file_splice_read(struct file *,loff_t *,struct pipe_inode_info *, size_t, unsigned int);
generic_file_splice_write  prototype  include/linux/fs.h  2428  extern ssize_t generic_file_splice_write(struct pipe_inode_info *,struct file *, loff_t *, size_t, unsigned int);
generic_splice_sendpage  prototype  include/linux/fs.h  2430  extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,struct file *out, loff_t *, size_t len, unsigned int flags);
do_splice_direct  prototype  include/linux/fs.h  2432  extern long do_splice_direct(struct file *in,loff_t *ppos,struct file *out,size_t len, unsigned int flags);
file_ra_state_init  prototype  include/linux/fs.h  2436  file_ra_state_init(struct file_ra_state *ra,struct address_space *mapping);
noop_llseek  prototype  include/linux/fs.h  2437  extern loff_t noop_llseek(struct file *file,loff_t offset,int origin);
no_llseek  prototype  include/linux/fs.h  2438  extern loff_t no_llseek(struct file *file,loff_t offset,int origin);
generic_file_llseek  prototype  include/linux/fs.h  2439  extern loff_t generic_file_llseek(struct file *file,loff_t offset,int origin);
generic_file_llseek_size  prototype  include/linux/fs.h  2440  extern loff_t generic_file_llseek_size(struct file *file,loff_t offset,int origin, loff_t maxsize);
generic_file_open  prototype  include/linux/fs.h  2442  extern int generic_file_open(struct inode * inode,struct file * filp);
nonseekable_open  prototype  include/linux/fs.h  2443  extern int nonseekable_open(struct inode * inode,struct file * filp);
xip_file_read  prototype  include/linux/fs.h  2446  extern ssize_t xip_file_read(struct file *filp,char __user *buf,size_t len,loff_t *ppos);
xip_file_mmap  prototype  include/linux/fs.h  2448  extern int xip_file_mmap(struct file * file,struct vm_area_struct * vma);
xip_file_write  prototype  include/linux/fs.h  2449  extern ssize_t xip_file_write(struct file *filp,const char __user *buf,size_t len, loff_t *ppos);
xip_truncate_page  function  include/linux/fs.h  2453  static inline int xip_truncate_page(struct address_space *mapping,loff_t from)
dio_end_io  prototype  include/linux/fs.h  2471  void dio_end_io(struct bio *bio,int error);
__blockdev_direct_IO  prototype  include/linux/fs.h  2473  ssize_t __blockdev_direct_IO(int rw,struct kiocb *iocb,struct inode *inode,struct block_device *bdev, const struct iovec *iov, loff_t offset,unsigned long nr_segs, get_block_t get_block, dio_iodone_t end_io,dio_submit_t submit_io,	int flags);
blockdev_direct_IO  function  include/linux/fs.h  2478  static inline ssize_t blockdev_direct_IO(int rw,struct kiocb *iocb,struct inode *inode, const struct iovec *iov, loff_t offset,unsigned long nr_segs, get_block_t get_block)
inode_dio_wait  prototype  include/linux/fs.h  2488  void inode_dio_wait(struct inode *inode);
inode_dio_done  prototype  include/linux/fs.h  2489  void inode_dio_done(struct inode *inode);
special_file  macro  include/linux/fs.h  2493  #define special_file(m) (S_ISCHR(m)||S_ISBLK(m)||S_ISFIFO(m)||S_ISSOCK(m))
vfs_readlink  prototype  include/linux/fs.h  2495  extern int vfs_readlink(struct dentry *,char __user *,int,const char *);
vfs_follow_link  prototype  include/linux/fs.h  2496  extern int vfs_follow_link(struct nameidata *,const char *);
page_readlink  prototype  include/linux/fs.h  2497  extern int page_readlink(struct dentry *,char __user *,int);
page_follow_link_light  prototype  include/linux/fs.h  2498  extern void *page_follow_link_light(struct dentry *,struct nameidata *);
page_put_link  prototype  include/linux/fs.h  2499  extern void page_put_link(struct dentry *,struct nameidata *,void *);
__page_symlink  prototype  include/linux/fs.h  2500  extern int __page_symlink(struct inode *inode,const char *symname,int len,int nofs);
page_symlink  prototype  include/linux/fs.h  2502  extern int page_symlink(struct inode *inode,const char *symname,int len);
generic_readlink  prototype  include/linux/fs.h  2504  extern int generic_readlink(struct dentry *,char __user *,int);
generic_fillattr  prototype  include/linux/fs.h  2505  extern void generic_fillattr(struct inode *,struct kstat *);
vfs_getattr  prototype  include/linux/fs.h  2506  extern int vfs_getattr(struct vfsmount *,struct dentry *,struct kstat *);
__inode_add_bytes  prototype  include/linux/fs.h  2507  void __inode_add_bytes(struct inode *inode,loff_t bytes);
inode_add_bytes  prototype  include/linux/fs.h  2508  void inode_add_bytes(struct inode *inode,loff_t bytes);
inode_sub_bytes  prototype  include/linux/fs.h  2509  void inode_sub_bytes(struct inode *inode,loff_t bytes);
inode_get_bytes  prototype  include/linux/fs.h  2510  loff_t inode_get_bytes(struct inode *inode);
inode_set_bytes  prototype  include/linux/fs.h  2511  void inode_set_bytes(struct inode *inode,loff_t bytes);
vfs_readdir  prototype  include/linux/fs.h  2513  extern int vfs_readdir(struct file *,filldir_t,void *);
vfs_stat  prototype  include/linux/fs.h  2515  extern int vfs_stat(const char __user *,struct kstat *);
vfs_lstat  prototype  include/linux/fs.h  2516  extern int vfs_lstat(const char __user *,struct kstat *);
vfs_fstat  prototype  include/linux/fs.h  2517  extern int vfs_fstat(unsigned int,struct kstat *);
vfs_fstatat  prototype  include/linux/fs.h  2518  extern int vfs_fstatat(int ,const char __user *,struct kstat *,int);
do_vfs_ioctl  prototype  include/linux/fs.h  2520  extern int do_vfs_ioctl(struct file *filp,unsigned int fd,unsigned int cmd,unsigned long arg);
__generic_block_fiemap  prototype  include/linux/fs.h  2522  extern int __generic_block_fiemap(struct inode *inode,struct fiemap_extent_info *fieinfo,loff_t start, loff_t len,get_block_t *get_block);
generic_block_fiemap  prototype  include/linux/fs.h  2526  extern int generic_block_fiemap(struct inode *inode,struct fiemap_extent_info *fieinfo, u64 start,u64 len, get_block_t *get_block);
get_filesystem  prototype  include/linux/fs.h  2530  extern void get_filesystem(struct file_system_type *fs);
put_filesystem  prototype  include/linux/fs.h  2531  extern void put_filesystem(struct file_system_type *fs);
get_fs_type  prototype  include/linux/fs.h  2532  extern struct file_system_type *get_fs_type(const char *name);
get_super  prototype  include/linux/fs.h  2533  extern struct super_block *get_super(struct block_device *);
get_super_thawed  prototype  include/linux/fs.h  2534  extern struct super_block *get_super_thawed(struct block_device *);
get_active_super  prototype  include/linux/fs.h  2535  extern struct super_block *get_active_super(struct block_device *bdev);
drop_super  prototype  include/linux/fs.h  2536  extern void drop_super(struct super_block *sb);
iterate_supers  prototype  include/linux/fs.h  2537  extern void iterate_supers(void (*)(struct super_block *,void *),void *);
iterate_supers_type  prototype  include/linux/fs.h  2538  extern void iterate_supers_type(struct file_system_type *,void (*)(struct super_block *, void *), void *);
dcache_dir_open  prototype  include/linux/fs.h  2541  extern int dcache_dir_open(struct inode *,struct file *);
dcache_dir_close  prototype  include/linux/fs.h  2542  extern int dcache_dir_close(struct inode *,struct file *);
dcache_dir_lseek  prototype  include/linux/fs.h  2543  extern loff_t dcache_dir_lseek(struct file *,loff_t,int);
dcache_readdir  prototype  include/linux/fs.h  2544  extern int dcache_readdir(struct file *,void *,filldir_t);
simple_setattr  prototype  include/linux/fs.h  2545  extern int simple_setattr(struct dentry *,struct iattr *);
simple_getattr  prototype  include/linux/fs.h  2546  extern int simple_getattr(struct vfsmount *,struct dentry *,struct kstat *);
simple_statfs  prototype  include/linux/fs.h  2547  extern int simple_statfs(struct dentry *,struct kstatfs *);
simple_open  prototype  include/linux/fs.h  2548  extern int simple_open(struct inode *inode,struct file *file);
simple_link  prototype  include/linux/fs.h  2549  extern int simple_link(struct dentry *,struct inode *,struct dentry *);
simple_unlink  prototype  include/linux/fs.h  2550  extern int simple_unlink(struct inode *,struct dentry *);
simple_rmdir  prototype  include/linux/fs.h  2551  extern int simple_rmdir(struct inode *,struct dentry *);
simple_rename  prototype  include/linux/fs.h  2552  extern int simple_rename(struct inode *,struct dentry *,struct inode *,struct dentry *);
noop_fsync  prototype  include/linux/fs.h  2553  extern int noop_fsync(struct file *,loff_t,loff_t,int);
simple_empty  prototype  include/linux/fs.h  2554  extern int simple_empty(struct dentry *);
simple_readpage  prototype  include/linux/fs.h  2555  extern int simple_readpage(struct file *file,struct page *page);
simple_write_begin  prototype  include/linux/fs.h  2556  extern int simple_write_begin(struct file *file,struct address_space *mapping,loff_t pos, unsigned len, unsigned flags,struct page **pagep, void **fsdata);
simple_write_end  prototype  include/linux/fs.h  2559  extern int simple_write_end(struct file *file,struct address_space *mapping,loff_t pos, unsigned len, unsigned copied,struct page *page, void *fsdata);
simple_lookup  prototype  include/linux/fs.h  2563  extern struct dentry *simple_lookup(struct inode *,struct dentry *,struct nameidata *);
generic_read_dir  prototype  include/linux/fs.h  2564  extern ssize_t generic_read_dir(struct file *,char __user *,size_t,loff_t *);
tree_descr  struct  include/linux/fs.h  2567  struct tree_descr { char *name; const struct file_operations *ops; int mode; };
d_alloc_name  prototype  include/linux/fs.h  2568  struct dentry *d_alloc_name(struct dentry *,const char *);
simple_fill_super  prototype  include/linux/fs.h  2569  extern int simple_fill_super(struct super_block *,unsigned long,struct tree_descr *);
simple_pin_fs  prototype  include/linux/fs.h  2570  extern int simple_pin_fs(struct file_system_type *,struct vfsmount **mount,int *count);
simple_release_fs  prototype  include/linux/fs.h  2571  extern void simple_release_fs(struct vfsmount **mount,int *count);
simple_read_from_buffer  prototype  include/linux/fs.h  2573  extern ssize_t simple_read_from_buffer(void __user *to,size_t count,loff_t *ppos, const void *from, size_t available);
simple_write_to_buffer  prototype  include/linux/fs.h  2575  extern ssize_t simple_write_to_buffer(void *to,size_t available,loff_t *ppos,const void __user *from, size_t count);
generic_file_fsync  prototype  include/linux/fs.h  2578  extern int generic_file_fsync(struct file *,loff_t,loff_t,int);
generic_check_addressable  prototype  include/linux/fs.h  2580  extern int generic_check_addressable(unsigned,u64);
buffer_migrate_page  macro  include/linux/fs.h  2587  #define buffer_migrate_page NULL
inode_change_ok  prototype  include/linux/fs.h  2590  extern int inode_change_ok(const struct inode *,struct iattr *);
inode_newsize_ok  prototype  include/linux/fs.h  2591  extern int inode_newsize_ok(const struct inode *,loff_t offset);
setattr_copy  prototype  include/linux/fs.h  2592  extern void setattr_copy(struct inode *inode,const struct iattr *attr);
file_update_time  prototype  include/linux/fs.h  2594  extern int file_update_time(struct file *file);
generic_show_options  prototype  include/linux/fs.h  2596  extern int generic_show_options(struct seq_file *m,struct dentry *root);
save_mount_options  prototype  include/linux/fs.h  2597  extern void save_mount_options(struct super_block *sb,char *options);
replace_mount_options  prototype  include/linux/fs.h  2598  extern void replace_mount_options(struct super_block *sb,char *options);
parent_ino  function  include/linux/fs.h  2600  static inline ino_t parent_ino(struct dentry *dentry)
simple_transaction_argresp  struct  include/linux/fs.h  2620  struct simple_transaction_argresp { ssize_t size; char data[0]; };
SIMPLE_TRANSACTION_LIMIT  macro  include/linux/fs.h  2625  #define SIMPLE_TRANSACTION_LIMIT (PAGE_SIZE - sizeof(struct simple_transaction_argresp))
simple_transaction_get  prototype  include/linux/fs.h  2627  char *simple_transaction_get(struct file *file,const char __user *buf,size_t size);
simple_transaction_read  prototype  include/linux/fs.h  2629  ssize_t simple_transaction_read(struct file *file,char __user *buf,size_t size, loff_t *pos);
simple_transaction_release  prototype  include/linux/fs.h  2631  int simple_transaction_release(struct inode *inode,struct file *file);
simple_transaction_set  prototype  include/linux/fs.h  2633  void simple_transaction_set(struct file *file,size_t n);
DEFINE_SIMPLE_ATTRIBUTE  macro  include/linux/fs.h  2651  #define DEFINE_SIMPLE_ATTRIBUTE(__fops,__get,__set,__fmt) static int __fops ## _open(struct inode *inode, struct file *file) { __simple_attr_check_format(__fmt, 0ull); return simple_attr_open(inode, file, __get, __set, __fmt); } static const struct file_operations __fops = { .owner	 = THIS_MODULE, .open	 = __fops ## _open, .release = simple_attr_release, .read	 = simple_attr_read, .write	 = simple_attr_write, .llseek	 = generic_file_llseek, };
__simple_attr_check_format  function  include/linux/fs.h  2667  void __simple_attr_check_format(const char *fmt,...)
simple_attr_open  prototype  include/linux/fs.h  2672  int simple_attr_open(struct inode *inode,struct file *file,int (*get)(void *, u64 *), int (*set)(void *, u64),const char *fmt);
simple_attr_release  prototype  include/linux/fs.h  2675  int simple_attr_release(struct inode *inode,struct file *file);
simple_attr_read  prototype  include/linux/fs.h  2676  ssize_t simple_attr_read(struct file *file,char __user *buf,size_t len, loff_t *ppos);
simple_attr_write  prototype  include/linux/fs.h  2678  ssize_t simple_attr_write(struct file *file,const char __user *buf,size_t len, loff_t *ppos);
proc_nr_files  prototype  include/linux/fs.h  2682  int proc_nr_files(struct ctl_table *table,int write,void __user *buffer, size_t *lenp, loff_t *ppos);
proc_nr_dentry  prototype  include/linux/fs.h  2684  int proc_nr_dentry(struct ctl_table *table,int write,void __user *buffer, size_t *lenp, loff_t *ppos);
proc_nr_inodes  prototype  include/linux/fs.h  2686  int proc_nr_inodes(struct ctl_table *table,int write,void __user *buffer, size_t *lenp, loff_t *ppos);
get_filesystem_list  prototype  include/linux/fs.h  2688  int __init get_filesystem_list(char *buf);
__FMODE_EXEC  macro  include/linux/fs.h  2690  #define __FMODE_EXEC ((__force int) FMODE_EXEC)
__FMODE_NONOTIFY  macro  include/linux/fs.h  2691  #define __FMODE_NONOTIFY ((__force int) FMODE_NONOTIFY)
ACC_MODE  macro  include/linux/fs.h  2693  #define ACC_MODE(x) ("\004\002\006\006"[(x)&O_ACCMODE])
OPEN_FMODE  macro  include/linux/fs.h  2694  #define OPEN_FMODE(flag) ((__force fmode_t)(((flag + 1) & O_ACCMODE) | (flag & __FMODE_NONOTIFY)))
is_sxid  function  include/linux/fs.h  2697  static inline int is_sxid(umode_t mode)
inode_has_no_xattr  function  include/linux/fs.h  2702  static inline void inode_has_no_xattr(struct inode *inode)
_ASM_X86_COMPAT_H  macro  arch/x86/include/asm/compat.h  2  #define _ASM_X86_COMPAT_H
COMPAT_USER_HZ  macro  arch/x86/include/asm/compat.h  13  #define COMPAT_USER_HZ 100
COMPAT_UTS_MACHINE  macro  arch/x86/include/asm/compat.h  14  #define COMPAT_UTS_MACHINE "i686\0\0"
compat_timespec  struct  arch/x86/include/asm/compat.h  45  struct compat_timespec { compat_time_t tv_sec; s32 tv_nsec; };
compat_timeval  struct  arch/x86/include/asm/compat.h  50  struct compat_timeval { compat_time_t tv_sec; s32 tv_usec; };
compat_stat  struct  arch/x86/include/asm/compat.h  55  struct compat_stat { compat_dev_t st_dev; u16 __pad1; compat_ino_t st_ino; compat_mode_t st_mode; compat_nlink_t st_nlink; __compat_uid_t st_uid; __compat_gid_t st_gid; compat_dev_t st_rdev; u16 __pad2; u32 st_size; u32 st_blksize; u32 st_blocks; u32 st_atime; u32 st_atime_nsec; u32 st_mtime; u32 st_mtime_nsec; u32 st_ctime; u32 st_ctime_nsec; u32 __unused4; u32 __unused5; };
compat_flock  struct  arch/x86/include/asm/compat.h  78  struct compat_flock { short l_type; short l_whence; compat_off_t l_start; compat_off_t l_len; compat_pid_t l_pid; };
F_GETLK64  macro  arch/x86/include/asm/compat.h  86  #define F_GETLK64 12
F_SETLK64  macro  arch/x86/include/asm/compat.h  87  #define F_SETLK64 13
F_SETLKW64  macro  arch/x86/include/asm/compat.h  88  #define F_SETLKW64 14
compat_flock64  struct  arch/x86/include/asm/compat.h  94  struct compat_flock64 { short l_type; short l_whence; compat_loff_t l_start; compat_loff_t l_len; compat_pid_t l_pid; } __attribute__((packed));
compat_statfs  struct  arch/x86/include/asm/compat.h  102  struct compat_statfs { int f_type; int f_bsize; int f_blocks; int f_bfree; int f_bavail; int f_files; int f_ffree; compat_fsid_t f_fsid; int f_namelen; int f_frsize; int f_flags; int f_spare[4]; };
COMPAT_RLIM_OLD_INFINITY  macro  arch/x86/include/asm/compat.h  117  #define COMPAT_RLIM_OLD_INFINITY 0x7fffffff
COMPAT_RLIM_INFINITY  macro  arch/x86/include/asm/compat.h  118  #define COMPAT_RLIM_INFINITY 0xffffffff
_COMPAT_NSIG  macro  arch/x86/include/asm/compat.h  122  #define _COMPAT_NSIG 64
_COMPAT_NSIG_BPW  macro  arch/x86/include/asm/compat.h  123  #define _COMPAT_NSIG_BPW 32
COMPAT_OFF_T_MAX  macro  arch/x86/include/asm/compat.h  127  #define COMPAT_OFF_T_MAX 0x7fffffff
COMPAT_LOFF_T_MAX  macro  arch/x86/include/asm/compat.h  128  #define COMPAT_LOFF_T_MAX 0x7fffffffffffffffL
compat_ipc64_perm  struct  arch/x86/include/asm/compat.h  130  struct compat_ipc64_perm { compat_key_t key; __compat_uid32_t uid; __compat_gid32_t gid; __compat_uid32_t cuid; __compat_gid32_t cgid; unsigned short mode; unsigned short __pad1; unsigned short seq; unsigned short __pad2; compat_ulong_t unused1; compat_ulong_t unused2; };
compat_semid64_ds  struct  arch/x86/include/asm/compat.h  144  struct compat_semid64_ds { struct compat_ipc64_perm sem_perm; compat_time_t sem_otime; compat_ulong_t __unused1; compat_time_t sem_ctime; compat_ulong_t __unused2; compat_ulong_t sem_nsems; compat_ulong_t __unused3; compat_ulong_t __unused4; };
compat_msqid64_ds  struct  arch/x86/include/asm/compat.h  155  struct compat_msqid64_ds { struct compat_ipc64_perm msg_perm; compat_time_t msg_stime; compat_ulong_t __unused1; compat_time_t msg_rtime; compat_ulong_t __unused2; compat_time_t msg_ctime; compat_ulong_t __unused3; compat_ulong_t msg_cbytes; compat_ulong_t msg_qnum; compat_ulong_t msg_qbytes; compat_pid_t msg_lspid; compat_pid_t msg_lrpid; compat_ulong_t __unused4; compat_ulong_t __unused5; };
compat_shmid64_ds  struct  arch/x86/include/asm/compat.h  172  struct compat_shmid64_ds { struct compat_ipc64_perm shm_perm; compat_size_t shm_segsz; compat_time_t shm_atime; compat_ulong_t __unused1; compat_time_t shm_dtime; compat_ulong_t __unused2; compat_time_t shm_ctime; compat_ulong_t __unused3; compat_pid_t shm_cpid; compat_pid_t shm_lpid; compat_ulong_t shm_nattch; compat_ulong_t __unused4; compat_ulong_t __unused5; };
PR_REG_SIZE  macro  arch/x86/include/asm/compat.h  194  #define PR_REG_SIZE(S) (test_thread_flag(TIF_IA32) ? 68 : 216)
PRSTATUS_SIZE  macro  arch/x86/include/asm/compat.h  195  #define PRSTATUS_SIZE(S) (test_thread_flag(TIF_IA32) ? 144 : 296)
SET_PR_FPVALID  macro  arch/x86/include/asm/compat.h  196  #define SET_PR_FPVALID(S,V) do { *(int *) (((void *) &((S)->pr_reg)) + PR_REG_SIZE(0)) = (V); } while (0)
compat_ptr  function  arch/x86/include/asm/compat.h  214  static inline void __user *compat_ptr(compat_uptr_t uptr)
ptr_to_compat  function  arch/x86/include/asm/compat.h  219  static inline compat_uptr_t ptr_to_compat(void __user *uptr)
arch_compat_alloc_user_space  function  arch/x86/include/asm/compat.h  224  static inline void __user *arch_compat_alloc_user_space(long len)
is_x32_task  function  arch/x86/include/asm/compat.h  238  static inline bool is_x32_task(void)
__HDLC_IOCTL_H__  macro  include/linux/hdlc/ioctl.h  2  #define __HDLC_IOCTL_H__
GENERIC_HDLC_VERSION  macro  include/linux/hdlc/ioctl.h  5  #define GENERIC_HDLC_VERSION 4
CLOCK_DEFAULT  macro  include/linux/hdlc/ioctl.h  7  #define CLOCK_DEFAULT 0
CLOCK_EXT  macro  include/linux/hdlc/ioctl.h  8  #define CLOCK_EXT 1
CLOCK_INT  macro  include/linux/hdlc/ioctl.h  9  #define CLOCK_INT 2
CLOCK_TXINT  macro  include/linux/hdlc/ioctl.h  10  #define CLOCK_TXINT 3
CLOCK_TXFROMRX  macro  include/linux/hdlc/ioctl.h  11  #define CLOCK_TXFROMRX 4
ENCODING_DEFAULT  macro  include/linux/hdlc/ioctl.h  14  #define ENCODING_DEFAULT 0
ENCODING_NRZ  macro  include/linux/hdlc/ioctl.h  15  #define ENCODING_NRZ 1
ENCODING_NRZI  macro  include/linux/hdlc/ioctl.h  16  #define ENCODING_NRZI 2
ENCODING_FM_MARK  macro  include/linux/hdlc/ioctl.h  17  #define ENCODING_FM_MARK 3
ENCODING_FM_SPACE  macro  include/linux/hdlc/ioctl.h  18  #define ENCODING_FM_SPACE 4
ENCODING_MANCHESTER  macro  include/linux/hdlc/ioctl.h  19  #define ENCODING_MANCHESTER 5
PARITY_DEFAULT  macro  include/linux/hdlc/ioctl.h  22  #define PARITY_DEFAULT 0
PARITY_NONE  macro  include/linux/hdlc/ioctl.h  23  #define PARITY_NONE 1
PARITY_CRC16_PR0  macro  include/linux/hdlc/ioctl.h  24  #define PARITY_CRC16_PR0 2
PARITY_CRC16_PR1  macro  include/linux/hdlc/ioctl.h  25  #define PARITY_CRC16_PR1 3
PARITY_CRC16_PR0_CCITT  macro  include/linux/hdlc/ioctl.h  26  #define PARITY_CRC16_PR0_CCITT 4
PARITY_CRC16_PR1_CCITT  macro  include/linux/hdlc/ioctl.h  27  #define PARITY_CRC16_PR1_CCITT 5
PARITY_CRC32_PR0_CCITT  macro  include/linux/hdlc/ioctl.h  28  #define PARITY_CRC32_PR0_CCITT 6
PARITY_CRC32_PR1_CCITT  macro  include/linux/hdlc/ioctl.h  29  #define PARITY_CRC32_PR1_CCITT 7
LMI_DEFAULT  macro  include/linux/hdlc/ioctl.h  31  #define LMI_DEFAULT 0
LMI_NONE  macro  include/linux/hdlc/ioctl.h  32  #define LMI_NONE 1
LMI_ANSI  macro  include/linux/hdlc/ioctl.h  33  #define LMI_ANSI 2
LMI_CCITT  macro  include/linux/hdlc/ioctl.h  34  #define LMI_CCITT 3
LMI_CISCO  macro  include/linux/hdlc/ioctl.h  35  #define LMI_CISCO 4
sync_serial_settings  struct  include/linux/hdlc/ioctl.h  37  typedef struct { unsigned int clock_rate; unsigned int clock_type; unsigned short loopback; } sync_serial_settings;
te1_settings  struct  include/linux/hdlc/ioctl.h  43  typedef struct { unsigned int clock_rate; unsigned int clock_type; unsigned short loopback; unsigned int slot_map; } te1_settings;
raw_hdlc_proto  struct  include/linux/hdlc/ioctl.h  50  typedef struct { unsigned short encoding; unsigned short parity; } raw_hdlc_proto;
fr_proto  struct  include/linux/hdlc/ioctl.h  55  typedef struct { unsigned int t391; unsigned int t392; unsigned int n391; unsigned int n392; unsigned int n393; unsigned short lmi; unsigned short dce; } fr_proto;
fr_proto_pvc  struct  include/linux/hdlc/ioctl.h  65  typedef struct { unsigned int dlci; } fr_proto_pvc;
fr_proto_pvc_info  struct  include/linux/hdlc/ioctl.h  69  typedef struct { unsigned int dlci; char master[IFNAMSIZ]; }fr_proto_pvc_info;
cisco_proto  struct  include/linux/hdlc/ioctl.h  74  typedef struct { unsigned int interval; unsigned int timeout; } cisco_proto;
__LINUX_NETLINK_H  macro  include/linux/netlink.h  2  #define __LINUX_NETLINK_H
NETLINK_ROUTE  macro  include/linux/netlink.h  7  #define NETLINK_ROUTE 0
NETLINK_UNUSED  macro  include/linux/netlink.h  8  #define NETLINK_UNUSED 1
NETLINK_USERSOCK  macro  include/linux/netlink.h  9  #define NETLINK_USERSOCK 2
NETLINK_FIREWALL  macro  include/linux/netlink.h  10  #define NETLINK_FIREWALL 3
NETLINK_SOCK_DIAG  macro  include/linux/netlink.h  11  #define NETLINK_SOCK_DIAG 4
NETLINK_NFLOG  macro  include/linux/netlink.h  12  #define NETLINK_NFLOG 5
NETLINK_XFRM  macro  include/linux/netlink.h  13  #define NETLINK_XFRM 6
NETLINK_SELINUX  macro  include/linux/netlink.h  14  #define NETLINK_SELINUX 7
NETLINK_ISCSI  macro  include/linux/netlink.h  15  #define NETLINK_ISCSI 8
NETLINK_AUDIT  macro  include/linux/netlink.h  16  #define NETLINK_AUDIT 9
NETLINK_FIB_LOOKUP  macro  include/linux/netlink.h  17  #define NETLINK_FIB_LOOKUP 10
NETLINK_CONNECTOR  macro  include/linux/netlink.h  18  #define NETLINK_CONNECTOR 11
NETLINK_NETFILTER  macro  include/linux/netlink.h  19  #define NETLINK_NETFILTER 12
NETLINK_IP6_FW  macro  include/linux/netlink.h  20  #define NETLINK_IP6_FW 13
NETLINK_DNRTMSG  macro  include/linux/netlink.h  21  #define NETLINK_DNRTMSG 14
NETLINK_KOBJECT_UEVENT  macro  include/linux/netlink.h  22  #define NETLINK_KOBJECT_UEVENT 15
NETLINK_GENERIC  macro  include/linux/netlink.h  23  #define NETLINK_GENERIC 16
NETLINK_SCSITRANSPORT  macro  include/linux/netlink.h  25  #define NETLINK_SCSITRANSPORT 18
NETLINK_ECRYPTFS  macro  include/linux/netlink.h  26  #define NETLINK_ECRYPTFS 19
NETLINK_RDMA  macro  include/linux/netlink.h  27  #define NETLINK_RDMA 20
NETLINK_CRYPTO  macro  include/linux/netlink.h  28  #define NETLINK_CRYPTO 21
NETLINK_INET_DIAG  macro  include/linux/netlink.h  30  #define NETLINK_INET_DIAG NETLINK_SOCK_DIAG
MAX_LINKS  macro  include/linux/netlink.h  32  #define MAX_LINKS 32
sockaddr_nl  struct  include/linux/netlink.h  34  struct sockaddr_nl { __kernel_sa_family_t nl_family; unsigned short nl_pad; __u32 nl_pid; __u32 nl_groups; };
nlmsghdr  struct  include/linux/netlink.h  41  struct nlmsghdr { __u32 nlmsg_len; __u16 nlmsg_type; __u16 nlmsg_flags; __u32 nlmsg_seq; __u32 nlmsg_pid; };
NLM_F_REQUEST  macro  include/linux/netlink.h  51  #define NLM_F_REQUEST 1
NLM_F_MULTI  macro  include/linux/netlink.h  52  #define NLM_F_MULTI 2
NLM_F_ACK  macro  include/linux/netlink.h  53  #define NLM_F_ACK 4
NLM_F_ECHO  macro  include/linux/netlink.h  54  #define NLM_F_ECHO 8
NLM_F_DUMP_INTR  macro  include/linux/netlink.h  55  #define NLM_F_DUMP_INTR 16
NLM_F_ROOT  macro  include/linux/netlink.h  58  #define NLM_F_ROOT 0x100
NLM_F_MATCH  macro  include/linux/netlink.h  59  #define NLM_F_MATCH 0x200
NLM_F_ATOMIC  macro  include/linux/netlink.h  60  #define NLM_F_ATOMIC 0x400
NLM_F_DUMP  macro  include/linux/netlink.h  61  #define NLM_F_DUMP (NLM_F_ROOT|NLM_F_MATCH)
NLM_F_REPLACE  macro  include/linux/netlink.h  64  #define NLM_F_REPLACE 0x100
NLM_F_EXCL  macro  include/linux/netlink.h  65  #define NLM_F_EXCL 0x200
NLM_F_CREATE  macro  include/linux/netlink.h  66  #define NLM_F_CREATE 0x400
NLM_F_APPEND  macro  include/linux/netlink.h  67  #define NLM_F_APPEND 0x800
NLMSG_ALIGNTO  macro  include/linux/netlink.h  78  #define NLMSG_ALIGNTO 4U
NLMSG_ALIGN  macro  include/linux/netlink.h  79  #define NLMSG_ALIGN(len) ( ((len)+NLMSG_ALIGNTO-1) & ~(NLMSG_ALIGNTO-1) )
NLMSG_HDRLEN  macro  include/linux/netlink.h  80  #define NLMSG_HDRLEN ((int) NLMSG_ALIGN(sizeof(struct nlmsghdr)))
NLMSG_LENGTH  macro  include/linux/netlink.h  81  #define NLMSG_LENGTH(len) ((len)+NLMSG_ALIGN(NLMSG_HDRLEN))
NLMSG_SPACE  macro  include/linux/netlink.h  82  #define NLMSG_SPACE(len) NLMSG_ALIGN(NLMSG_LENGTH(len))
NLMSG_DATA  macro  include/linux/netlink.h  83  #define NLMSG_DATA(nlh) ((void*)(((char*)nlh) + NLMSG_LENGTH(0)))
NLMSG_NEXT  macro  include/linux/netlink.h  84  #define NLMSG_NEXT(nlh,len) ((len) -= NLMSG_ALIGN((nlh)->nlmsg_len), (struct nlmsghdr*)(((char*)(nlh)) + NLMSG_ALIGN((nlh)->nlmsg_len)))
NLMSG_OK  macro  include/linux/netlink.h  86  #define NLMSG_OK(nlh,len) ((len) >= (int)sizeof(struct nlmsghdr) && (nlh)->nlmsg_len >= sizeof(struct nlmsghdr) && (nlh)->nlmsg_len <= (len))
NLMSG_PAYLOAD  macro  include/linux/netlink.h  89  #define NLMSG_PAYLOAD(nlh,len) ((nlh)->nlmsg_len - NLMSG_SPACE((len)))
NLMSG_NOOP  macro  include/linux/netlink.h  91  #define NLMSG_NOOP 0x1
NLMSG_ERROR  macro  include/linux/netlink.h  92  #define NLMSG_ERROR 0x2
NLMSG_DONE  macro  include/linux/netlink.h  93  #define NLMSG_DONE 0x3
NLMSG_OVERRUN  macro  include/linux/netlink.h  94  #define NLMSG_OVERRUN 0x4
NLMSG_MIN_TYPE  macro  include/linux/netlink.h  96  #define NLMSG_MIN_TYPE 0x10
nlmsgerr  struct  include/linux/netlink.h  98  struct nlmsgerr { int error; struct nlmsghdr msg; };
NETLINK_ADD_MEMBERSHIP  macro  include/linux/netlink.h  103  #define NETLINK_ADD_MEMBERSHIP 1
NETLINK_DROP_MEMBERSHIP  macro  include/linux/netlink.h  104  #define NETLINK_DROP_MEMBERSHIP 2
NETLINK_PKTINFO  macro  include/linux/netlink.h  105  #define NETLINK_PKTINFO 3
NETLINK_BROADCAST_ERROR  macro  include/linux/netlink.h  106  #define NETLINK_BROADCAST_ERROR 4
NETLINK_NO_ENOBUFS  macro  include/linux/netlink.h  107  #define NETLINK_NO_ENOBUFS 5
nl_pktinfo  struct  include/linux/netlink.h  109  struct nl_pktinfo { __u32 group; };
NET_MAJOR  macro  include/linux/netlink.h  113  #define NET_MAJOR 36
nlattr  struct  include/linux/netlink.h  129  struct nlattr { __u16 nla_len; __u16 nla_type; };
NLA_F_NESTED  macro  include/linux/netlink.h  144  #define NLA_F_NESTED (1 << 15)
NLA_F_NET_BYTEORDER  macro  include/linux/netlink.h  145  #define NLA_F_NET_BYTEORDER (1 << 14)
NLA_TYPE_MASK  macro  include/linux/netlink.h  146  #define NLA_TYPE_MASK ~(NLA_F_NESTED | NLA_F_NET_BYTEORDER)
NLA_ALIGNTO  macro  include/linux/netlink.h  148  #define NLA_ALIGNTO 4
NLA_ALIGN  macro  include/linux/netlink.h  149  #define NLA_ALIGN(len) (((len) + NLA_ALIGNTO - 1) & ~(NLA_ALIGNTO - 1))
NLA_HDRLEN  macro  include/linux/netlink.h  150  #define NLA_HDRLEN ((int) NLA_ALIGN(sizeof(struct nlattr)))
nlmsg_hdr  function  include/linux/netlink.h  159  static inline struct nlmsghdr *nlmsg_hdr(const struct sk_buff *skb)
netlink_skb_parms  struct  include/linux/netlink.h  164  struct netlink_skb_parms { struct ucred creds; __u32 pid; __u32 dst_group; };
NETLINK_CB  macro  include/linux/netlink.h  170  #define NETLINK_CB(skb) (*(struct netlink_skb_parms*)&((skb)->cb))
NETLINK_CREDS  macro  include/linux/netlink.h  171  #define NETLINK_CREDS(skb) (&NETLINK_CB((skb)).creds)
netlink_table_grab  prototype  include/linux/netlink.h  174  extern void netlink_table_grab(void);
netlink_table_ungrab  prototype  include/linux/netlink.h  175  extern void netlink_table_ungrab(void);
netlink_kernel_create  prototype  include/linux/netlink.h  177  extern struct sock *netlink_kernel_create(struct net *net,int unit,unsigned int groups,void (*input)(struct sk_buff *skb),struct mutex *cb_mutex,struct module *module);
netlink_kernel_release  prototype  include/linux/netlink.h  182  extern void netlink_kernel_release(struct sock *sk);
__netlink_change_ngroups  prototype  include/linux/netlink.h  183  extern int __netlink_change_ngroups(struct sock *sk,unsigned int groups);
netlink_change_ngroups  prototype  include/linux/netlink.h  184  extern int netlink_change_ngroups(struct sock *sk,unsigned int groups);
__netlink_clear_multicast_users  prototype  include/linux/netlink.h  185  extern void __netlink_clear_multicast_users(struct sock *sk,unsigned int group);
netlink_clear_multicast_users  prototype  include/linux/netlink.h  186  extern void netlink_clear_multicast_users(struct sock *sk,unsigned int group);
netlink_ack  prototype  include/linux/netlink.h  187  extern void netlink_ack(struct sk_buff *in_skb,struct nlmsghdr *nlh,int err);
netlink_has_listeners  prototype  include/linux/netlink.h  188  extern int netlink_has_listeners(struct sock *sk,unsigned int group);
netlink_unicast  prototype  include/linux/netlink.h  189  extern int netlink_unicast(struct sock *ssk,struct sk_buff *skb,__u32 pid,int nonblock);
netlink_broadcast  prototype  include/linux/netlink.h  190  extern int netlink_broadcast(struct sock *ssk,struct sk_buff *skb,__u32 pid,__u32 group, gfp_t allocation);
netlink_broadcast_filtered  prototype  include/linux/netlink.h  192  extern int netlink_broadcast_filtered(struct sock *ssk,struct sk_buff *skb,__u32 pid, __u32 group, gfp_t allocation,int (*filter)(struct sock *dsk, struct sk_buff *skb, void *data),void *filter_data);
netlink_set_err  prototype  include/linux/netlink.h  196  extern int netlink_set_err(struct sock *ssk,__u32 pid,__u32 group,int code);
netlink_register_notifier  prototype  include/linux/netlink.h  197  extern int netlink_register_notifier(struct notifier_block *nb);
netlink_unregister_notifier  prototype  include/linux/netlink.h  198  extern int netlink_unregister_notifier(struct notifier_block *nb);
netlink_getsockbyfilp  prototype  include/linux/netlink.h  201  struct sock *netlink_getsockbyfilp(struct file *filp);
netlink_attachskb  prototype  include/linux/netlink.h  202  int netlink_attachskb(struct sock *sk,struct sk_buff *skb,long *timeo, struct sock *ssk);
netlink_detachskb  prototype  include/linux/netlink.h  204  void netlink_detachskb(struct sock *sk,struct sk_buff *skb);
netlink_sendskb  prototype  include/linux/netlink.h  205  int netlink_sendskb(struct sock *sk,struct sk_buff *skb);
NLMSG_GOODSIZE  macro  include/linux/netlink.h  216  #define NLMSG_GOODSIZE SKB_WITH_OVERHEAD(8192UL)
NLMSG_DEFAULT_SIZE  macro  include/linux/netlink.h  219  #define NLMSG_DEFAULT_SIZE (NLMSG_GOODSIZE - NLMSG_HDRLEN)
netlink_callback  struct  include/linux/netlink.h  222  struct netlink_callback { struct sk_buff *skb; const struct nlmsghdr *nlh; int (*dump)(struct sk_buff * skb,struct netlink_callback *cb); int (*done)(struct netlink_callback *cb); void *data; u16 family; u16 min_dump_alloc; unsigned int prev_seq, seq; long args[6]; };
netlink_notify  struct  include/linux/netlink.h  235  struct netlink_notify { struct net *net; int pid; int protocol; };
__nlmsg_put  prototype  include/linux/netlink.h  242  __nlmsg_put(struct sk_buff *skb,u32 pid,u32 seq,int type,int len,int flags);
NLMSG_NEW  macro  include/linux/netlink.h  244  #define NLMSG_NEW(skb,pid,seq,type,len,flags) ({	if (unlikely(skb_tailroom(skb) < (int)NLMSG_SPACE(len))) goto nlmsg_failure; __nlmsg_put(skb, pid, seq, type, len, flags); })
NLMSG_PUT  macro  include/linux/netlink.h  249  #define NLMSG_PUT(skb,pid,seq,type,len) NLMSG_NEW(skb, pid, seq, type, len, 0)
netlink_dump_control  struct  include/linux/netlink.h  252  struct netlink_dump_control { int (*dump)(struct sk_buff *skb, struct netlink_callback *); int (*done)(struct netlink_callback*); void *data; u16 min_dump_alloc; };
netlink_dump_start  prototype  include/linux/netlink.h  259  extern int netlink_dump_start(struct sock *ssk,struct sk_buff *skb,const struct nlmsghdr *nlh,struct netlink_dump_control *control);
NL_NONROOT_RECV  macro  include/linux/netlink.h  264  #define NL_NONROOT_RECV 0x1
NL_NONROOT_SEND  macro  include/linux/netlink.h  265  #define NL_NONROOT_SEND 0x2
netlink_set_nonroot  prototype  include/linux/netlink.h  266  extern void netlink_set_nonroot(int protocol,unsigned flag);
_LINUX_MISCDEVICE_H  macro  include/linux/miscdevice.h  2  #define _LINUX_MISCDEVICE_H
PSMOUSE_MINOR  macro  include/linux/miscdevice.h  13  #define PSMOUSE_MINOR 1
MS_BUSMOUSE_MINOR  macro  include/linux/miscdevice.h  14  #define MS_BUSMOUSE_MINOR 2
ATIXL_BUSMOUSE_MINOR  macro  include/linux/miscdevice.h  15  #define ATIXL_BUSMOUSE_MINOR 3
ATARIMOUSE_MINOR  macro  include/linux/miscdevice.h  17  #define ATARIMOUSE_MINOR 5
SUN_MOUSE_MINOR  macro  include/linux/miscdevice.h  18  #define SUN_MOUSE_MINOR 6
APOLLO_MOUSE_MINOR  macro  include/linux/miscdevice.h  19  #define APOLLO_MOUSE_MINOR 7
PC110PAD_MINOR  macro  include/linux/miscdevice.h  20  #define PC110PAD_MINOR 9
WATCHDOG_MINOR  macro  include/linux/miscdevice.h  22  #define WATCHDOG_MINOR 130
TEMP_MINOR  macro  include/linux/miscdevice.h  23  #define TEMP_MINOR 131
RTC_MINOR  macro  include/linux/miscdevice.h  24  #define RTC_MINOR 135
EFI_RTC_MINOR  macro  include/linux/miscdevice.h  25  #define EFI_RTC_MINOR 136
SUN_OPENPROM_MINOR  macro  include/linux/miscdevice.h  26  #define SUN_OPENPROM_MINOR 139
DMAPI_MINOR  macro  include/linux/miscdevice.h  27  #define DMAPI_MINOR 140
NVRAM_MINOR  macro  include/linux/miscdevice.h  28  #define NVRAM_MINOR 144
SGI_MMTIMER  macro  include/linux/miscdevice.h  29  #define SGI_MMTIMER 153
STORE_QUEUE_MINOR  macro  include/linux/miscdevice.h  30  #define STORE_QUEUE_MINOR 155
I2O_MINOR  macro  include/linux/miscdevice.h  31  #define I2O_MINOR 166
MICROCODE_MINOR  macro  include/linux/miscdevice.h  32  #define MICROCODE_MINOR 184
TUN_MINOR  macro  include/linux/miscdevice.h  33  #define TUN_MINOR 200
MWAVE_MINOR  macro  include/linux/miscdevice.h  34  #define MWAVE_MINOR 219
MPT_MINOR  macro  include/linux/miscdevice.h  35  #define MPT_MINOR 220
MPT2SAS_MINOR  macro  include/linux/miscdevice.h  36  #define MPT2SAS_MINOR 221
UINPUT_MINOR  macro  include/linux/miscdevice.h  37  #define UINPUT_MINOR 223
HPET_MINOR  macro  include/linux/miscdevice.h  38  #define HPET_MINOR 228
FUSE_MINOR  macro  include/linux/miscdevice.h  39  #define FUSE_MINOR 229
KVM_MINOR  macro  include/linux/miscdevice.h  40  #define KVM_MINOR 232
BTRFS_MINOR  macro  include/linux/miscdevice.h  41  #define BTRFS_MINOR 234
AUTOFS_MINOR  macro  include/linux/miscdevice.h  42  #define AUTOFS_MINOR 235
MAPPER_CTRL_MINOR  macro  include/linux/miscdevice.h  43  #define MAPPER_CTRL_MINOR 236
LOOP_CTRL_MINOR  macro  include/linux/miscdevice.h  44  #define LOOP_CTRL_MINOR 237
VHOST_NET_MINOR  macro  include/linux/miscdevice.h  45  #define VHOST_NET_MINOR 238
MISC_DYNAMIC_MINOR  macro  include/linux/miscdevice.h  46  #define MISC_DYNAMIC_MINOR 255
miscdevice  struct  include/linux/miscdevice.h  50  struct miscdevice { int minor; const char *name; const struct file_operations *fops; struct list_head list; struct device *parent; struct device *this_device; const char *nodename; umode_t mode; };
misc_register  prototype  include/linux/miscdevice.h  61  extern int misc_register(struct miscdevice * misc);
misc_deregister  prototype  include/linux/miscdevice.h  62  extern int misc_deregister(struct miscdevice *misc);
MODULE_ALIAS_MISCDEV  macro  include/linux/miscdevice.h  64  #define MODULE_ALIAS_MISCDEV(minor) MODULE_ALIAS("char-major-" __stringify(MISC_MAJOR) "-" __stringify(minor))
_ASM_X86_BUG_H  macro  arch/x86/include/asm/bug.h  2  #define _ASM_X86_BUG_H
HAVE_ARCH_BUG  macro  arch/x86/include/asm/bug.h  5  #define HAVE_ARCH_BUG
__BUG_C0  macro  arch/x86/include/asm/bug.h  12  # define __BUG_C0 "2:\t.long 1b - 2b,%c0 - 2b\n"
BUG  macro  include/asm-generic/bug.h  111  #define BUG() do {} while(0)
show_regs_common  prototype  arch/x86/include/asm/bug.h  41  extern void show_regs_common(void);
_ASM_GENERIC_BUG_H  macro  include/asm-generic/bug.h  2  #define _ASM_GENERIC_BUG_H
BUGFLAG_WARNING  macro  include/asm-generic/bug.h  7  #define BUGFLAG_WARNING (1 << 0)
BUGFLAG_TAINT  macro  include/asm-generic/bug.h  8  #define BUGFLAG_TAINT(taint) (BUGFLAG_WARNING | ((taint) << 8))
BUG_GET_TAINT  macro  include/asm-generic/bug.h  9  #define BUG_GET_TAINT(bug) ((bug)->flags >> 8)
bug_entry  struct  include/asm-generic/bug.h  18  struct bug_entry { unsigned long bug_addr; const char *file; signed int file_disp; unsigned short line; unsigned short flags; };
BUG_ON  macro  include/asm-generic/bug.h  115  #define BUG_ON(condition) do { if (condition) ; } while(0)
warn_slowpath_fmt  prototype  include/asm-generic/bug.h  66  void warn_slowpath_fmt(const char *file,const int line,const char *fmt, ...);
warn_slowpath_fmt_taint  prototype  include/asm-generic/bug.h  69  void warn_slowpath_fmt_taint(const char *file,const int line,unsigned taint,const char *fmt, ...);
warn_slowpath_null  prototype  include/asm-generic/bug.h  71  extern void warn_slowpath_null(const char *file,const int line);
WANT_WARN_ON_SLOWPATH  macro  include/asm-generic/bug.h  72  #define WANT_WARN_ON_SLOWPATH
__WARN  macro  include/asm-generic/bug.h  78  #define __WARN() __WARN_TAINT(TAINT_WARN)
__WARN_printf  macro  include/asm-generic/bug.h  79  #define __WARN_printf(arg...) do { printk(arg); __WARN(); } while (0)
__WARN_printf_taint  macro  include/asm-generic/bug.h  80  #define __WARN_printf_taint(taint,arg...) do { printk(arg); __WARN_TAINT(taint); } while (0)
WARN_ON  macro  include/asm-generic/bug.h  119  #define WARN_ON(condition) ({ int __ret_warn_on = !!(condition); unlikely(__ret_warn_on); })
WARN  macro  include/asm-generic/bug.h  126  #define WARN(condition,format...) ({ int __ret_warn_on = !!(condition); unlikely(__ret_warn_on); })
WARN_TAINT  macro  include/asm-generic/bug.h  132  #define WARN_TAINT(condition,taint,format...) WARN_ON(condition)
WARN_ON_ONCE  macro  include/asm-generic/bug.h  136  #define WARN_ON_ONCE(condition) ({ static bool __section(.data.unlikely) __warned; int __ret_warn_once = !!(condition); if (unlikely(__ret_warn_once)) if (WARN_ON(!__warned)) __warned = true; unlikely(__ret_warn_once); })
WARN_ONCE  macro  include/asm-generic/bug.h  146  #define WARN_ONCE(condition,format...) ({ static bool __section(.data.unlikely) __warned; int __ret_warn_once = !!(condition); if (unlikely(__ret_warn_once)) if (WARN(!__warned, format)) __warned = true; unlikely(__ret_warn_once); })
WARN_TAINT_ONCE  macro  include/asm-generic/bug.h  156  #define WARN_TAINT_ONCE(condition,taint,format...) ({ static bool __section(.data.unlikely) __warned; int __ret_warn_once = !!(condition); if (unlikely(__ret_warn_once)) if (WARN_TAINT(!__warned, taint, format)) __warned = true; unlikely(__ret_warn_once); })
WARN_ON_SMP  macro  include/asm-generic/bug.h  202  # define WARN_ON_SMP(x) ({0;})
_LINUX_SCATTERLIST_H  macro  include/linux/scatterlist.h  2  #define _LINUX_SCATTERLIST_H
sg_table  struct  include/linux/scatterlist.h  12  struct sg_table { struct scatterlist *sgl; unsigned int nents; unsigned int orig_nents; };
SG_MAGIC  macro  include/linux/scatterlist.h  35  #define SG_MAGIC 0x87654321
sg_is_chain  macro  include/linux/scatterlist.h  42  #define sg_is_chain(sg) ((sg)->page_link & 0x01)
sg_is_last  macro  include/linux/scatterlist.h  43  #define sg_is_last(sg) ((sg)->page_link & 0x02)
sg_chain_ptr  macro  include/linux/scatterlist.h  44  #define sg_chain_ptr(sg) ((struct scatterlist *) ((sg)->page_link & ~0x03))
sg_assign_page  function  include/linux/scatterlist.h  57  static inline void sg_assign_page(struct scatterlist *sg,struct page *page)
sg_set_page  function  include/linux/scatterlist.h  87  static inline void sg_set_page(struct scatterlist *sg,struct page *page,unsigned int len, unsigned int offset)
sg_page  function  include/linux/scatterlist.h  95  static inline struct page *sg_page(struct scatterlist *sg)
sg_set_buf  function  include/linux/scatterlist.h  111  static inline void sg_set_buf(struct scatterlist *sg,const void *buf,unsigned int buflen)
for_each_sg  macro  include/linux/scatterlist.h  120  #define for_each_sg(sglist,sg,nr,__i) for (__i = 0, sg = (sglist); __i < (nr); __i++, sg = sg_next(sg))
sg_chain  function  include/linux/scatterlist.h  133  static inline void sg_chain(struct scatterlist *prv,unsigned int prv_nents,struct scatterlist *sgl)
sg_mark_end  function  include/linux/scatterlist.h  162  static inline void sg_mark_end(struct scatterlist *sg)
sg_phys  function  include/linux/scatterlist.h  184  static inline dma_addr_t sg_phys(struct scatterlist *sg)
sg_virt  function  include/linux/scatterlist.h  199  static inline void *sg_virt(struct scatterlist *sg)
sg_next  prototype  include/linux/scatterlist.h  204  struct scatterlist *sg_next(struct scatterlist *);
sg_last  prototype  include/linux/scatterlist.h  205  struct scatterlist *sg_last(struct scatterlist *s,unsigned int);
sg_init_table  prototype  include/linux/scatterlist.h  206  void sg_init_table(struct scatterlist *,unsigned int);
sg_init_one  prototype  include/linux/scatterlist.h  207  void sg_init_one(struct scatterlist *,const void *,unsigned int);
__sg_free_table  prototype  include/linux/scatterlist.h  212  void __sg_free_table(struct sg_table *,unsigned int,sg_free_fn *);
sg_free_table  prototype  include/linux/scatterlist.h  213  void sg_free_table(struct sg_table *);
__sg_alloc_table  prototype  include/linux/scatterlist.h  214  int __sg_alloc_table(struct sg_table *,unsigned int,unsigned int,gfp_t,sg_alloc_fn *);
sg_alloc_table  prototype  include/linux/scatterlist.h  216  int sg_alloc_table(struct sg_table *,unsigned int,gfp_t);
sg_copy_from_buffer  prototype  include/linux/scatterlist.h  218  size_t sg_copy_from_buffer(struct scatterlist *sgl,unsigned int nents,void *buf, size_t buflen);
sg_copy_to_buffer  prototype  include/linux/scatterlist.h  220  size_t sg_copy_to_buffer(struct scatterlist *sgl,unsigned int nents,void *buf, size_t buflen);
SG_MAX_SINGLE_ALLOC  macro  include/linux/scatterlist.h  227  #define SG_MAX_SINGLE_ALLOC (PAGE_SIZE / sizeof(struct scatterlist))
SG_MITER_ATOMIC  macro  include/linux/scatterlist.h  246  #define SG_MITER_ATOMIC (1 << 0)
SG_MITER_TO_SG  macro  include/linux/scatterlist.h  247  #define SG_MITER_TO_SG (1 << 1)
SG_MITER_FROM_SG  macro  include/linux/scatterlist.h  248  #define SG_MITER_FROM_SG (1 << 2)
sg_mapping_iter  struct  include/linux/scatterlist.h  250  struct sg_mapping_iter { struct page *page; void *addr; size_t length; size_t consumed; struct scatterlist *__sg; unsigned int __nents; unsigned int __offset; unsigned int __flags; };
sg_miter_start  prototype  include/linux/scatterlist.h  264  void sg_miter_start(struct sg_mapping_iter *miter,struct scatterlist *sgl,unsigned int nents, unsigned int flags);
sg_miter_next  prototype  include/linux/scatterlist.h  266  bool sg_miter_next(struct sg_mapping_iter *miter);
sg_miter_stop  prototype  include/linux/scatterlist.h  267  void sg_miter_stop(struct sg_mapping_iter *miter);
__NETNS_CORE_H__  macro  include/net/netns/core.h  2  #define __NETNS_CORE_H__
netns_core  struct  include/net/netns/core.h  7  struct netns_core { struct ctl_table_header *sysctl_hdr; int sysctl_somaxconn; struct prot_inuse __percpu *inuse; };
__NETNS_MIB_H__  macro  include/net/netns/mib.h  2  #define __NETNS_MIB_H__
netns_mib  struct  include/net/netns/mib.h  6  struct netns_mib { DEFINE_SNMP_STAT(struct tcp_mib, tcp_statistics); DEFINE_SNMP_STAT(struct ipstats_mib, ip_statistics); DEFINE_SNMP_STAT(struct linux_mib, net_statistics); DEFINE_SNMP_STAT(struct udp_mib, udp_statistics); DEFINE_SNMP_STAT(struct udp_mib, udplite_statistics); DEFINE_SNMP_STAT(struct icmp_mib, icmp_statistics); DEFINE_SNMP_STAT_ATOMIC(struct icmpmsg_mib, icmpmsg_statistics); struct proc_dir_entry *proc_net_devsnmp6; DEFINE_SNMP_STAT(struct udp_mib, udp_stats_in6); DEFINE_SNMP_STAT(struct udp_mib, udplite_stats_in6); DEFINE_SNMP_STAT(struct ipstats_mib, ipv6_statistics); DEFINE_SNMP_STAT(struct icmpv6_mib, icmpv6_statistics); DEFINE_SNMP_STAT_ATOMIC(struct icmpv6msg_mib, icmpv6msg_statistics); DEFINE_SNMP_STAT(struct linux_xfrm_mib, xfrm_statistics); };
__NETNS_UNIX_H__  macro  include/net/netns/unix.h  5  #define __NETNS_UNIX_H__
netns_unix  struct  include/net/netns/unix.h  8  struct netns_unix { int sysctl_max_dgram_qlen; struct ctl_table_header *ctl; };
__NETNS_PACKET_H__  macro  include/net/netns/packet.h  5  #define __NETNS_PACKET_H__
netns_packet  struct  include/net/netns/packet.h  10  struct netns_packet { spinlock_t sklist_lock; struct hlist_head sklist; };
__NETNS_IPV4_H__  macro  include/net/netns/ipv4.h  6  #define __NETNS_IPV4_H__
netns_ipv4  struct  include/net/netns/ipv4.h  16  struct netns_ipv4 { struct ctl_table_header *forw_hdr; struct ctl_table_header *frags_hdr; struct ctl_table_header *ipv4_hdr; struct ctl_table_header *route_hdr; struct ipv4_devconf *devconf_all; struct ipv4_devconf *devconf_dflt; struct fib_rules_ops *rules_ops; struct hlist_head *fib_table_hash; struct sock *fibnl; struct sock **icmp_sk; struct sock *tcp_sock; struct netns_frags frags; struct xt_table *iptable_filter; struct xt_table *iptable_mangle; struct xt_table *iptable_raw; struct xt_table *arptable_filter; struct xt_table *iptable_security; struct xt_table *nat_table; struct hlist_head *nat_bysource; unsigned int nat_htable_size; int sysctl_icmp_echo_ignore_all; int sysctl_icmp_echo_ignore_broadcasts; int sysctl_icmp_ignore_bogus_error_responses; int sysctl_icmp_ratelimit; int sysctl_icmp_ratemask; int sysctl_icmp_errors_use_inbound_ifaddr; int sysctl_rt_cache_rebuild_count; int current_rt_cache_rebuild_count; unsigned int sysctl_ping_group_range[2]; long sysctl_tcp_mem[3]; atomic_t rt_genid; atomic_t dev_addr_genid; struct mr_table *mrt; struct list_head mr_tables; struct fib_rules_ops *mr_rules_ops; };
__NETNS_IPV6_H__  macro  include/net/netns/ipv6.h  8  #define __NETNS_IPV6_H__
netns_sysctl_ipv6  struct  include/net/netns/ipv6.h  13  struct netns_sysctl_ipv6 { struct ctl_table_header *hdr; struct ctl_table_header *route_hdr; struct ctl_table_header *icmp_hdr; struct ctl_table_header *frags_hdr; int bindv6only; int flush_delay; int ip6_rt_max_size; int ip6_rt_gc_min_interval; int ip6_rt_gc_timeout; int ip6_rt_gc_interval; int ip6_rt_gc_elasticity; int ip6_rt_mtu_expires; int ip6_rt_min_advmss; int icmpv6_time; };
netns_ipv6  struct  include/net/netns/ipv6.h  32  struct netns_ipv6 { struct netns_sysctl_ipv6 sysctl; struct ipv6_devconf *devconf_all; struct ipv6_devconf *devconf_dflt; struct netns_frags frags; struct xt_table *ip6table_filter; struct xt_table *ip6table_mangle; struct xt_table *ip6table_raw; struct xt_table *ip6table_security; struct rt6_info *ip6_null_entry; struct rt6_statistics *rt6_stats; struct timer_list ip6_fib_timer; struct hlist_head *fib_table_hash; struct fib6_table *fib6_main_tbl; struct dst_ops ip6_dst_ops; unsigned int ip6_rt_gc_expire; unsigned long ip6_rt_last_gc; struct rt6_info *ip6_prohibit_entry; struct rt6_info *ip6_blk_hole_entry; struct fib6_table *fib6_local_tbl; struct fib_rules_ops *fib6_rules_ops; struct sock **icmp_sk; struct sock *ndisc_sk; struct sock *tcp_sk; struct sock *igmp_sk; struct mr6_table *mrt6; struct list_head mr6_tables; struct fib_rules_ops *mr6_rules_ops; };
__NETNS_DCCP_H__  macro  include/net/netns/dccp.h  2  #define __NETNS_DCCP_H__
netns_dccp  struct  include/net/netns/dccp.h  6  struct netns_dccp { struct sock *v4_ctl_sk; struct sock *v6_ctl_sk; };
__NETNS_X_TABLES_H  macro  include/net/netns/x_tables.h  2  #define __NETNS_X_TABLES_H
netns_xt  struct  include/net/netns/x_tables.h  9  struct netns_xt { struct list_head tables[NFPROTO_NUMPROTO]; struct ebt_table *broute_table; struct ebt_table *frame_filter; struct ebt_table *frame_nat; };
__NETNS_CONNTRACK_H  macro  include/net/netns/conntrack.h  2  #define __NETNS_CONNTRACK_H
netns_ct  struct  include/net/netns/conntrack.h  11  struct netns_ct { atomic_t count; unsigned int expect_count; unsigned int htable_size; struct kmem_cache *nf_conntrack_cachep; struct hlist_nulls_head *hash; struct hlist_head *expect_hash; struct hlist_nulls_head unconfirmed; struct hlist_nulls_head dying; struct ip_conntrack_stat __percpu *stat; struct nf_ct_event_notifier __rcu *nf_conntrack_event_cb; struct nf_exp_event_notifier __rcu *nf_expect_event_cb; int sysctl_events; unsigned int sysctl_events_retry_timeout; int sysctl_acct; int sysctl_tstamp; int sysctl_checksum; unsigned int sysctl_log_invalid; int sysctl_auto_assign_helper; bool auto_assign_helper_warned; struct ctl_table_header *sysctl_header; struct ctl_table_header *acct_sysctl_header; struct ctl_table_header *tstamp_sysctl_header; struct ctl_table_header *event_sysctl_header; struct ctl_table_header *helper_sysctl_header; char *slabname; };
__NETNS_XFRM_H  macro  include/net/netns/xfrm.h  2  #define __NETNS_XFRM_H
xfrm_policy_hash  struct  include/net/netns/xfrm.h  12  struct xfrm_policy_hash { struct hlist_head *table; unsigned int hmask; };
netns_xfrm  struct  include/net/netns/xfrm.h  17  struct netns_xfrm { struct list_head state_all; struct hlist_head *state_bydst; struct hlist_head *state_bysrc; struct hlist_head *state_byspi; unsigned int state_hmask; unsigned int state_num; struct work_struct state_hash_work; struct hlist_head state_gc_list; struct work_struct state_gc_work; wait_queue_head_t km_waitq; struct list_head policy_all; struct hlist_head *policy_byidx; unsigned int policy_idx_hmask; struct hlist_head policy_inexact[XFRM_POLICY_MAX * 2]; struct xfrm_policy_hash policy_bydst[XFRM_POLICY_MAX * 2]; unsigned int policy_count[XFRM_POLICY_MAX * 2]; struct work_struct policy_hash_work; struct sock *nlsk; struct sock *nlsk_stash; u32 sysctl_aevent_etime; u32 sysctl_aevent_rseqth; int sysctl_larval_drop; u32 sysctl_acq_expires; struct ctl_table_header *sysctl_hdr; struct dst_ops xfrm4_dst_ops; struct dst_ops xfrm6_dst_ops; };
__SEQ_FILE_NET_H__  macro  include/linux/seq_file_net.h  2  #define __SEQ_FILE_NET_H__
seq_net_private  struct  include/linux/seq_file_net.h  9  struct seq_net_private { struct net *net; };
seq_open_net  prototype  include/linux/seq_file_net.h  15  int seq_open_net(struct inode *,struct file *,const struct seq_operations *, int);
single_open_net  prototype  include/linux/seq_file_net.h  17  int single_open_net(struct inode *,struct file *file,int (*show)(struct seq_file *, void *));
seq_release_net  prototype  include/linux/seq_file_net.h  19  int seq_release_net(struct inode *,struct file *);
single_release_net  prototype  include/linux/seq_file_net.h  20  int single_release_net(struct inode *,struct file *);
seq_file_net  function  include/linux/seq_file_net.h  21  static inline struct net *seq_file_net(struct seq_file *seq)
__LINUX_DCBNL_H__  macro  include/linux/dcbnl.h  21  #define __LINUX_DCBNL_H__
IEEE_8021QAZ_MAX_TCS  macro  include/linux/dcbnl.h  26  #define IEEE_8021QAZ_MAX_TCS 8
IEEE_8021QAZ_TSA_STRICT  macro  include/linux/dcbnl.h  28  #define IEEE_8021QAZ_TSA_STRICT 0
IEEE_8021QAZ_TSA_CB_SHAPER  macro  include/linux/dcbnl.h  29  #define IEEE_8021QAZ_TSA_CB_SHAPER 1
IEEE_8021QAZ_TSA_ETS  macro  include/linux/dcbnl.h  30  #define IEEE_8021QAZ_TSA_ETS 2
IEEE_8021QAZ_TSA_VENDOR  macro  include/linux/dcbnl.h  31  #define IEEE_8021QAZ_TSA_VENDOR 255
ieee_ets  struct  include/linux/dcbnl.h  57  struct ieee_ets { __u8 willing; __u8 ets_cap; __u8 cbs; __u8 tc_tx_bw[IEEE_8021QAZ_MAX_TCS]; __u8 tc_rx_bw[IEEE_8021QAZ_MAX_TCS]; __u8 tc_tsa[IEEE_8021QAZ_MAX_TCS]; __u8 prio_tc[IEEE_8021QAZ_MAX_TCS]; __u8 tc_reco_bw[IEEE_8021QAZ_MAX_TCS]; __u8 tc_reco_tsa[IEEE_8021QAZ_MAX_TCS]; __u8 reco_prio_tc[IEEE_8021QAZ_MAX_TCS]; };
ieee_maxrate  struct  include/linux/dcbnl.h  77  struct ieee_maxrate { __u64 tc_maxrate[IEEE_8021QAZ_MAX_TCS]; };
ieee_pfc  struct  include/linux/dcbnl.h  92  struct ieee_pfc { __u8 pfc_cap; __u8 pfc_en; __u8 mbc; __u16 delay; __u64 requests[IEEE_8021QAZ_MAX_TCS]; __u64 indications[IEEE_8021QAZ_MAX_TCS]; };
CEE_DCBX_MAX_PGS  macro  include/linux/dcbnl.h  102  #define CEE_DCBX_MAX_PGS 8
CEE_DCBX_MAX_PRIO  macro  include/linux/dcbnl.h  103  #define CEE_DCBX_MAX_PRIO 8
cee_pg  struct  include/linux/dcbnl.h  115  struct cee_pg { __u8 willing; __u8 error; __u8 pg_en; __u8 tcs_supported; __u8 pg_bw[CEE_DCBX_MAX_PGS]; __u8 prio_pg[CEE_DCBX_MAX_PGS]; };
cee_pfc  struct  include/linux/dcbnl.h  132  struct cee_pfc { __u8 willing; __u8 error; __u8 pfc_en; __u8 tcs_supported; };
IEEE_8021QAZ_APP_SEL_ETHERTYPE  macro  include/linux/dcbnl.h  140  #define IEEE_8021QAZ_APP_SEL_ETHERTYPE 1
IEEE_8021QAZ_APP_SEL_STREAM  macro  include/linux/dcbnl.h  141  #define IEEE_8021QAZ_APP_SEL_STREAM 2
IEEE_8021QAZ_APP_SEL_DGRAM  macro  include/linux/dcbnl.h  142  #define IEEE_8021QAZ_APP_SEL_DGRAM 3
IEEE_8021QAZ_APP_SEL_ANY  macro  include/linux/dcbnl.h  143  #define IEEE_8021QAZ_APP_SEL_ANY 4
dcb_app  struct  include/linux/dcbnl.h  162  struct dcb_app { __u8 selector; __u8 priority; __u16 protocol; };
dcb_peer_app_info  struct  include/linux/dcbnl.h  177  struct dcb_peer_app_info { __u8 willing; __u8 error; };
dcbmsg  struct  include/linux/dcbnl.h  182  struct dcbmsg { __u8 dcb_family; __u8 cmd; __u16 dcb_pad; };
dcbnl_commands  enum  include/linux/dcbnl.h  219  enum dcbnl_commands { DCB_CMD_UNDEFINED, DCB_CMD_GSTATE, DCB_CMD_SSTATE, DCB_CMD_PGTX_GCFG, DCB_CMD_PGTX_SCFG, DCB_CMD_PGRX_GCFG, DCB_CMD_PGRX_SCFG, DCB_CMD_PFC_GCFG, DCB_CMD_PFC_SCFG, DCB_CMD_SET_ALL, DCB_CMD_GPERM_HWADDR, DCB_CMD_GCAP, DCB_CMD_GNUMTCS, DCB_CMD_SNUMTCS, DCB_CMD_PFC_GSTATE, DCB_CMD_PFC_SSTATE, DCB_CMD_BCN_GCFG, DCB_CMD_BCN_SCFG, DCB_CMD_GAPP, DCB_CMD_SAPP, DCB_CMD_IEEE_SET, DCB_CMD_IEEE_GET, DCB_CMD_GDCBX, DCB_CMD_SDCBX, DCB_CMD_GFEATCFG, DCB_CMD_SFEATCFG, DCB_CMD_CEE_GET, DCB_CMD_IEEE_DEL, __DCB_CMD_ENUM_MAX, DCB_CMD_MAX = __DCB_CMD_ENUM_MAX - 1, };
dcbnl_attrs  enum  include/linux/dcbnl.h  287  enum dcbnl_attrs { DCB_ATTR_UNDEFINED, DCB_ATTR_IFNAME, DCB_ATTR_STATE, DCB_ATTR_PFC_STATE, DCB_ATTR_PFC_CFG, DCB_ATTR_NUM_TC, DCB_ATTR_PG_CFG, DCB_ATTR_SET_ALL, DCB_ATTR_PERM_HWADDR, DCB_ATTR_CAP, DCB_ATTR_NUMTCS, DCB_ATTR_BCN, DCB_ATTR_APP, DCB_ATTR_IEEE, DCB_ATTR_DCBX, DCB_ATTR_FEATCFG, DCB_ATTR_CEE, __DCB_ATTR_ENUM_MAX, DCB_ATTR_MAX = __DCB_ATTR_ENUM_MAX - 1, };
ieee_attrs  enum  include/linux/dcbnl.h  327  enum ieee_attrs { DCB_ATTR_IEEE_UNSPEC, DCB_ATTR_IEEE_ETS, DCB_ATTR_IEEE_PFC, DCB_ATTR_IEEE_APP_TABLE, DCB_ATTR_IEEE_PEER_ETS, DCB_ATTR_IEEE_PEER_PFC, DCB_ATTR_IEEE_PEER_APP, DCB_ATTR_IEEE_MAXRATE, __DCB_ATTR_IEEE_MAX };
DCB_ATTR_IEEE_MAX  macro  include/linux/dcbnl.h  338  #define DCB_ATTR_IEEE_MAX (__DCB_ATTR_IEEE_MAX - 1)
ieee_attrs_app  enum  include/linux/dcbnl.h  340  enum ieee_attrs_app { DCB_ATTR_IEEE_APP_UNSPEC, DCB_ATTR_IEEE_APP, __DCB_ATTR_IEEE_APP_MAX };
DCB_ATTR_IEEE_APP_MAX  macro  include/linux/dcbnl.h  345  #define DCB_ATTR_IEEE_APP_MAX (__DCB_ATTR_IEEE_APP_MAX - 1)
cee_attrs  enum  include/linux/dcbnl.h  362  enum cee_attrs { DCB_ATTR_CEE_UNSPEC, DCB_ATTR_CEE_PEER_PG, DCB_ATTR_CEE_PEER_PFC, DCB_ATTR_CEE_PEER_APP_TABLE, DCB_ATTR_CEE_TX_PG, DCB_ATTR_CEE_RX_PG, DCB_ATTR_CEE_PFC, DCB_ATTR_CEE_APP_TABLE, DCB_ATTR_CEE_FEAT, __DCB_ATTR_CEE_MAX };
DCB_ATTR_CEE_MAX  macro  include/linux/dcbnl.h  374  #define DCB_ATTR_CEE_MAX (__DCB_ATTR_CEE_MAX - 1)
peer_app_attr  enum  include/linux/dcbnl.h  376  enum peer_app_attr { DCB_ATTR_CEE_PEER_APP_UNSPEC, DCB_ATTR_CEE_PEER_APP_INFO, DCB_ATTR_CEE_PEER_APP, __DCB_ATTR_CEE_PEER_APP_MAX };
DCB_ATTR_CEE_PEER_APP_MAX  macro  include/linux/dcbnl.h  382  #define DCB_ATTR_CEE_PEER_APP_MAX (__DCB_ATTR_CEE_PEER_APP_MAX - 1)
cee_attrs_app  enum  include/linux/dcbnl.h  384  enum cee_attrs_app { DCB_ATTR_CEE_APP_UNSPEC, DCB_ATTR_CEE_APP, __DCB_ATTR_CEE_APP_MAX };
DCB_ATTR_CEE_APP_MAX  macro  include/linux/dcbnl.h  389  #define DCB_ATTR_CEE_APP_MAX (__DCB_ATTR_CEE_APP_MAX - 1)
dcbnl_pfc_up_attrs  enum  include/linux/dcbnl.h  407  enum dcbnl_pfc_up_attrs { DCB_PFC_UP_ATTR_UNDEFINED, DCB_PFC_UP_ATTR_0, DCB_PFC_UP_ATTR_1, DCB_PFC_UP_ATTR_2, DCB_PFC_UP_ATTR_3, DCB_PFC_UP_ATTR_4, DCB_PFC_UP_ATTR_5, DCB_PFC_UP_ATTR_6, DCB_PFC_UP_ATTR_7, DCB_PFC_UP_ATTR_ALL, __DCB_PFC_UP_ATTR_ENUM_MAX, DCB_PFC_UP_ATTR_MAX = __DCB_PFC_UP_ATTR_ENUM_MAX - 1, };
dcbnl_pg_attrs  enum  include/linux/dcbnl.h  450  enum dcbnl_pg_attrs { DCB_PG_ATTR_UNDEFINED, DCB_PG_ATTR_TC_0, DCB_PG_ATTR_TC_1, DCB_PG_ATTR_TC_2, DCB_PG_ATTR_TC_3, DCB_PG_ATTR_TC_4, DCB_PG_ATTR_TC_5, DCB_PG_ATTR_TC_6, DCB_PG_ATTR_TC_7, DCB_PG_ATTR_TC_MAX, DCB_PG_ATTR_TC_ALL, DCB_PG_ATTR_BW_ID_0, DCB_PG_ATTR_BW_ID_1, DCB_PG_ATTR_BW_ID_2, DCB_PG_ATTR_BW_ID_3, DCB_PG_ATTR_BW_ID_4, DCB_PG_ATTR_BW_ID_5, DCB_PG_ATTR_BW_ID_6, DCB_PG_ATTR_BW_ID_7, DCB_PG_ATTR_BW_ID_MAX, DCB_PG_ATTR_BW_ID_ALL, __DCB_PG_ATTR_ENUM_MAX, DCB_PG_ATTR_MAX = __DCB_PG_ATTR_ENUM_MAX - 1, };
dcbnl_tc_attrs  enum  include/linux/dcbnl.h  499  enum dcbnl_tc_attrs { DCB_TC_ATTR_PARAM_UNDEFINED, DCB_TC_ATTR_PARAM_PGID, DCB_TC_ATTR_PARAM_UP_MAPPING, DCB_TC_ATTR_PARAM_STRICT_PRIO, DCB_TC_ATTR_PARAM_BW_PCT, DCB_TC_ATTR_PARAM_ALL, __DCB_TC_ATTR_PARAM_ENUM_MAX, DCB_TC_ATTR_PARAM_MAX = __DCB_TC_ATTR_PARAM_ENUM_MAX - 1, };
dcbnl_cap_attrs  enum  include/linux/dcbnl.h  533  enum dcbnl_cap_attrs { DCB_CAP_ATTR_UNDEFINED, DCB_CAP_ATTR_ALL, DCB_CAP_ATTR_PG, DCB_CAP_ATTR_PFC, DCB_CAP_ATTR_UP2TC, DCB_CAP_ATTR_PG_TCS, DCB_CAP_ATTR_PFC_TCS, DCB_CAP_ATTR_GSP, DCB_CAP_ATTR_BCN, DCB_CAP_ATTR_DCBX, __DCB_CAP_ATTR_ENUM_MAX, DCB_CAP_ATTR_MAX = __DCB_CAP_ATTR_ENUM_MAX - 1, };
DCB_CAP_DCBX_HOST  macro  include/linux/dcbnl.h  575  #define DCB_CAP_DCBX_HOST 0x01
DCB_CAP_DCBX_LLD_MANAGED  macro  include/linux/dcbnl.h  576  #define DCB_CAP_DCBX_LLD_MANAGED 0x02
DCB_CAP_DCBX_VER_CEE  macro  include/linux/dcbnl.h  577  #define DCB_CAP_DCBX_VER_CEE 0x04
DCB_CAP_DCBX_VER_IEEE  macro  include/linux/dcbnl.h  578  #define DCB_CAP_DCBX_VER_IEEE 0x08
DCB_CAP_DCBX_STATIC  macro  include/linux/dcbnl.h  579  #define DCB_CAP_DCBX_STATIC 0x10
dcbnl_numtcs_attrs  enum  include/linux/dcbnl.h  591  enum dcbnl_numtcs_attrs { DCB_NUMTCS_ATTR_UNDEFINED, DCB_NUMTCS_ATTR_ALL, DCB_NUMTCS_ATTR_PG, DCB_NUMTCS_ATTR_PFC, __DCB_NUMTCS_ATTR_ENUM_MAX, DCB_NUMTCS_ATTR_MAX = __DCB_NUMTCS_ATTR_ENUM_MAX - 1, };
dcbnl_bcn_attrs  enum  include/linux/dcbnl.h  601  enum dcbnl_bcn_attrs{ DCB_BCN_ATTR_UNDEFINED = 0, DCB_BCN_ATTR_RP_0, DCB_BCN_ATTR_RP_1, DCB_BCN_ATTR_RP_2, DCB_BCN_ATTR_RP_3, DCB_BCN_ATTR_RP_4, DCB_BCN_ATTR_RP_5, DCB_BCN_ATTR_RP_6, DCB_BCN_ATTR_RP_7, DCB_BCN_ATTR_RP_ALL, DCB_BCN_ATTR_BCNA_0, DCB_BCN_ATTR_BCNA_1, DCB_BCN_ATTR_ALPHA, DCB_BCN_ATTR_BETA, DCB_BCN_ATTR_GD, DCB_BCN_ATTR_GI, DCB_BCN_ATTR_TMAX, DCB_BCN_ATTR_TD, DCB_BCN_ATTR_RMIN, DCB_BCN_ATTR_W, DCB_BCN_ATTR_RD, DCB_BCN_ATTR_RU, DCB_BCN_ATTR_WRTT, DCB_BCN_ATTR_RI, DCB_BCN_ATTR_C, DCB_BCN_ATTR_ALL, __DCB_BCN_ATTR_ENUM_MAX, DCB_BCN_ATTR_MAX = __DCB_BCN_ATTR_ENUM_MAX - 1, };
dcb_general_attr_values  enum  include/linux/dcbnl.h  641  enum dcb_general_attr_values { DCB_ATTR_VALUE_UNDEFINED = 0xff };
DCB_APP_IDTYPE_ETHTYPE  macro  include/linux/dcbnl.h  645  #define DCB_APP_IDTYPE_ETHTYPE 0x00
DCB_APP_IDTYPE_PORTNUM  macro  include/linux/dcbnl.h  646  #define DCB_APP_IDTYPE_PORTNUM 0x01
dcbnl_app_attrs  enum  include/linux/dcbnl.h  647  enum dcbnl_app_attrs { DCB_APP_ATTR_UNDEFINED, DCB_APP_ATTR_IDTYPE, DCB_APP_ATTR_ID, DCB_APP_ATTR_PRIORITY, __DCB_APP_ATTR_ENUM_MAX, DCB_APP_ATTR_MAX = __DCB_APP_ATTR_ENUM_MAX - 1, };
DCB_FEATCFG_ERROR  macro  include/linux/dcbnl.h  669  #define DCB_FEATCFG_ERROR 0x01
DCB_FEATCFG_ENABLE  macro  include/linux/dcbnl.h  670  #define DCB_FEATCFG_ENABLE 0x02
DCB_FEATCFG_WILLING  macro  include/linux/dcbnl.h  671  #define DCB_FEATCFG_WILLING 0x04
DCB_FEATCFG_ADVERTISE  macro  include/linux/dcbnl.h  672  #define DCB_FEATCFG_ADVERTISE 0x08
dcbnl_featcfg_attrs  enum  include/linux/dcbnl.h  673  enum dcbnl_featcfg_attrs { DCB_FEATCFG_ATTR_UNDEFINED, DCB_FEATCFG_ATTR_ALL, DCB_FEATCFG_ATTR_PG, DCB_FEATCFG_ATTR_PFC, DCB_FEATCFG_ATTR_APP, __DCB_FEATCFG_ATTR_ENUM_MAX, DCB_FEATCFG_ATTR_MAX = __DCB_FEATCFG_ATTR_ENUM_MAX - 1, };
_LINUX_CGROUP_H  macro  include/linux/cgroup.h  2  #define _LINUX_CGROUP_H
cgroup_init_early  function  include/linux/cgroup.h  638  static inline int cgroup_init_early(void) { return 0; }
cgroup_init  function  include/linux/cgroup.h  639  static inline int cgroup_init(void) { return 0; }
cgroup_lock  function  include/linux/cgroup.h  645  static inline void cgroup_lock(void) {}
cgroup_lock_is_held  prototype  include/linux/cgroup.h  32  extern int cgroup_lock_is_held(void);
cgroup_lock_live_group  prototype  include/linux/cgroup.h  33  extern bool cgroup_lock_live_group(struct cgroup *cgrp);
cgroup_unlock  function  include/linux/cgroup.h  646  static inline void cgroup_unlock(void) {}
cgroup_fork  function  include/linux/cgroup.h  640  static inline void cgroup_fork(struct task_struct *p) {}
cgroup_fork_callbacks  function  include/linux/cgroup.h  641  static inline void cgroup_fork_callbacks(struct task_struct *p) {}
cgroup_post_fork  function  include/linux/cgroup.h  642  static inline void cgroup_post_fork(struct task_struct *p) {}
cgroup_exit  function  include/linux/cgroup.h  643  static inline void cgroup_exit(struct task_struct *p,int callbacks) {}
cgroupstats_build  function  include/linux/cgroup.h  647  static inline int cgroupstats_build(struct cgroupstats *stats,struct dentry *dentry)
cgroup_load_subsys  prototype  include/linux/cgroup.h  41  extern int cgroup_load_subsys(struct cgroup_subsys *ss);
cgroup_unload_subsys  prototype  include/linux/cgroup.h  42  extern void cgroup_unload_subsys(struct cgroup_subsys *ss);
SUBSYS  macro  include/linux/cgroup.h  538  #undef SUBSYS
cgroup_subsys_id  enum  include/linux/cgroup.h  48  enum cgroup_subsys_id { CGROUP_BUILTIN_SUBSYS_COUNT };
CGROUP_SUBSYS_COUNT  macro  include/linux/cgroup.h  58  #define CGROUP_SUBSYS_COUNT (BITS_PER_BYTE*sizeof(unsigned long))
cgroup_subsys_state  function  include/linux/cgroup.h  540  static inline struct cgroup_subsys_state *cgroup_subsys_state(
__css_get  function  include/linux/cgroup.h  93  static inline void __css_get(struct cgroup_subsys_state *css,int count)
css_get  function  include/linux/cgroup.h  105  static inline void css_get(struct cgroup_subsys_state *css)
css_is_removed  function  include/linux/cgroup.h  112  static inline bool css_is_removed(struct cgroup_subsys_state *css)
__css_tryget  prototype  include/linux/cgroup.h  123  extern bool __css_tryget(struct cgroup_subsys_state *css);
css_tryget  function  include/linux/cgroup.h  124  static inline bool css_tryget(struct cgroup_subsys_state *css)
__css_put  prototype  include/linux/cgroup.h  136  extern void __css_put(struct cgroup_subsys_state *css);
css_put  function  include/linux/cgroup.h  137  static inline void css_put(struct cgroup_subsys_state *css)
cgroup  struct  include/linux/cgroup.h  164  struct cgroup { unsigned long flags; atomic_t count; struct list_head sibling; struct list_head children; struct list_head files; struct cgroup *parent; struct dentry __rcu *dentry; struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT]; struct cgroupfs_root *root; struct cgroup *top_cgroup; struct list_head css_sets; struct list_head allcg_node; struct list_head cft_q_node; struct list_head release_list; struct list_head pidlists; struct mutex pidlist_mutex; struct rcu_head rcu_head; struct list_head event_list; spinlock_t event_list_lock; };
css_set  struct  include/linux/cgroup.h  229  struct css_set { atomic_t refcount; struct hlist_node hlist; struct list_head tasks; struct list_head cg_links; struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT]; struct rcu_head rcu_head; };
cgroup_map_cb  struct  include/linux/cgroup.h  270  struct cgroup_map_cb { int (*fill)(struct cgroup_map_cb *cb, const char *key, u64 value); void *state; };
CFTYPE_ONLY_ON_ROOT  macro  include/linux/cgroup.h  284  #define CFTYPE_ONLY_ON_ROOT (1U << 0)
CFTYPE_NOT_ON_ROOT  macro  include/linux/cgroup.h  285  #define CFTYPE_NOT_ON_ROOT (1U << 1)
MAX_CFTYPE_NAME  macro  include/linux/cgroup.h  287  #define MAX_CFTYPE_NAME 64
cftype  struct  include/linux/cgroup.h  289  struct cftype { char name[MAX_CFTYPE_NAME]; umode_t mode; size_t max_write_len; unsigned int flags; int (*open)(struct inode *inode, struct file *file); ssize_t (*read)(struct cgroup *cgrp, struct cftype *cft,struct file *file,char __user *buf, size_t nbytes, loff_t *ppos); u64 (*read_u64)(struct cgroup *cgrp, struct cftype *cft); s64 (*read_s64)(struct cgroup *cgrp, struct cftype *cft); int (*read_map)(struct cgroup *cont, struct cftype *cft,struct cgroup_map_cb *cb); int (*read_seq_string)(struct cgroup *cont, struct cftype *cft,struct seq_file *m); ssize_t (*write)(struct cgroup *cgrp, struct cftype *cft,struct file *file,const char __user *buf, size_t nbytes, loff_t *ppos); int (*write_u64)(struct cgroup *cgrp, struct cftype *cft, u64 val); int (*write_s64)(struct cgroup *cgrp, struct cftype *cft, s64 val); int (*write_string)(struct cgroup *cgrp, struct cftype *cft,const char *buffer); int (*trigger)(struct cgroup *cgrp, unsigned int event); int (*release)(struct inode *inode, struct file *file); int (*register_event)(struct cgroup *cgrp, struct cftype *cft,struct eventfd_ctx *eventfd, const char *args); void (*unregister_event)(struct cgroup *cgrp, struct cftype *cft,struct eventfd_ctx *eventfd); };
cftype_set  struct  include/linux/cgroup.h  395  struct cftype_set { struct list_head node; const struct cftype *cfts; };
cgroup_scanner  struct  include/linux/cgroup.h  400  struct cgroup_scanner { struct cgroup *cg; int (*test_task)(struct task_struct *p, struct cgroup_scanner *scan); void (*process_task)(struct task_struct *p,struct cgroup_scanner *scan); struct ptr_heap *heap; void *data; };
cgroup_add_cftypes  prototype  include/linux/cgroup.h  409  int cgroup_add_cftypes(struct cgroup_subsys *ss,const struct cftype *cfts);
cgroup_rm_cftypes  prototype  include/linux/cgroup.h  410  int cgroup_rm_cftypes(struct cgroup_subsys *ss,const struct cftype *cfts);
cgroup_is_removed  prototype  include/linux/cgroup.h  412  int cgroup_is_removed(const struct cgroup *cgrp);
cgroup_path  prototype  include/linux/cgroup.h  414  int cgroup_path(const struct cgroup *cgrp,char *buf,int buflen);
cgroup_task_count  prototype  include/linux/cgroup.h  416  int cgroup_task_count(const struct cgroup *cgrp);
cgroup_is_descendant  prototype  include/linux/cgroup.h  419  int cgroup_is_descendant(const struct cgroup *cgrp,struct task_struct *task);
cgroup_exclude_rmdir  prototype  include/linux/cgroup.h  435  void cgroup_exclude_rmdir(struct cgroup_subsys_state *css);
cgroup_release_and_wakeup_rmdir  prototype  include/linux/cgroup.h  436  void cgroup_release_and_wakeup_rmdir(struct cgroup_subsys_state *css);
cgroup_taskset_first  prototype  include/linux/cgroup.h  443  struct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset);
cgroup_taskset_next  prototype  include/linux/cgroup.h  444  struct task_struct *cgroup_taskset_next(struct cgroup_taskset *tset);
cgroup_taskset_cur_cgroup  prototype  include/linux/cgroup.h  445  struct cgroup *cgroup_taskset_cur_cgroup(struct cgroup_taskset *tset);
cgroup_taskset_size  prototype  include/linux/cgroup.h  446  int cgroup_taskset_size(struct cgroup_taskset *tset);
cgroup_taskset_for_each  macro  include/linux/cgroup.h  454  #define cgroup_taskset_for_each(task,skip_cgrp,tset) for ((task) = cgroup_taskset_first((tset)); (task); (task) = cgroup_taskset_next((tset))) if (!(skip_cgrp) || cgroup_taskset_cur_cgroup((tset)) != (skip_cgrp))
cgroup_subsys  struct  include/linux/cgroup.h  465  struct cgroup_subsys { struct cgroup_subsys_state *(*create)(struct cgroup *cgrp); int (*pre_destroy)(struct cgroup *cgrp); void (*destroy)(struct cgroup *cgrp); int (*can_attach)(struct cgroup *cgrp, struct cgroup_taskset *tset); void (*cancel_attach)(struct cgroup *cgrp, struct cgroup_taskset *tset); void (*attach)(struct cgroup *cgrp, struct cgroup_taskset *tset); void (*fork)(struct task_struct *task); void (*exit)(struct cgroup *cgrp, struct cgroup *old_cgrp,struct task_struct *task); void (*post_clone)(struct cgroup *cgrp); void (*bind)(struct cgroup *root); int subsys_id; int active; int disabled; int early_init; bool use_id; bool __DEPRECATED_clear_css_refs; #define MAX_CGROUP_TYPE_NAMELEN 32 const char *name; struct mutex hierarchy_mutex; struct lock_class_key subsys_key; struct cgroupfs_root *root; struct list_head sibling; struct idr idr; spinlock_t id_lock; struct list_head cftsets; struct cftype *base_cftypes; struct cftype_set base_cftset; struct module *module; };
task_subsys_state_check  macro  include/linux/cgroup.h  551  #define task_subsys_state_check(task,subsys_id,__c) rcu_dereference_check(task->cgroups->subsys[subsys_id], lockdep_is_held(&task->alloc_lock) || cgroup_lock_is_held() || (__c))
task_subsys_state  function  include/linux/cgroup.h  557  task_subsys_state(struct task_struct *task,int subsys_id)
task_cgroup  function  include/linux/cgroup.h  562  static inline struct cgroup* task_cgroup(struct task_struct *task,int subsys_id)
cgroup_iter  struct  include/linux/cgroup.h  569  struct cgroup_iter { struct list_head *cg_link; struct list_head *task; };
cgroup_iter_start  prototype  include/linux/cgroup.h  589  void cgroup_iter_start(struct cgroup *cgrp,struct cgroup_iter *it);
cgroup_iter_next  prototype  include/linux/cgroup.h  590  struct task_struct *cgroup_iter_next(struct cgroup *cgrp,struct cgroup_iter *it);
cgroup_iter_end  prototype  include/linux/cgroup.h  592  void cgroup_iter_end(struct cgroup *cgrp,struct cgroup_iter *it);
cgroup_scan_tasks  prototype  include/linux/cgroup.h  593  int cgroup_scan_tasks(struct cgroup_scanner *scan);
cgroup_attach_task  prototype  include/linux/cgroup.h  594  int cgroup_attach_task(struct cgroup *,struct task_struct *);
cgroup_attach_task_all  function  include/linux/cgroup.h  654  static inline int cgroup_attach_task_all(struct task_struct *from,struct task_struct *t)
free_css_id  prototype  include/linux/cgroup.h  614  void free_css_id(struct cgroup_subsys *ss,struct cgroup_subsys_state *css);
css_lookup  prototype  include/linux/cgroup.h  618  struct cgroup_subsys_state *css_lookup(struct cgroup_subsys *ss,int id);
css_get_next  prototype  include/linux/cgroup.h  624  struct cgroup_subsys_state *css_get_next(struct cgroup_subsys *ss,int id,struct cgroup_subsys_state *root, int *foundid);
css_is_ancestor  prototype  include/linux/cgroup.h  628  bool css_is_ancestor(struct cgroup_subsys_state *cg,const struct cgroup_subsys_state *root);
css_id  prototype  include/linux/cgroup.h  632  unsigned short css_id(struct cgroup_subsys_state *css);
css_depth  prototype  include/linux/cgroup.h  633  unsigned short css_depth(struct cgroup_subsys_state *css);
cgroup_css_from_dir  prototype  include/linux/cgroup.h  634  struct cgroup_subsys_state *cgroup_css_from_dir(struct file *f,int id);
_LINUX_JUMP_LABEL_H  macro  include/linux/jump_label.h  2  #define _LINUX_JUMP_LABEL_H
static_key  struct  include/linux/jump_label.h  143  struct static_key { atomic_t enabled; };
static_key_deferred  struct  include/linux/jump_label.h  151  struct static_key_deferred { struct static_key key; };
HAVE_JUMP_LABEL  macro  include/linux/jump_label.h  72  # define HAVE_JUMP_LABEL
jump_label_type  enum  include/linux/jump_label.h  75  enum jump_label_type { JUMP_LABEL_DISABLE = 0, JUMP_LABEL_ENABLE, };
JUMP_LABEL_TRUE_BRANCH  macro  include/linux/jump_label.h  84  #define JUMP_LABEL_TRUE_BRANCH 1UL
jump_label_get_entries  function  include/linux/jump_label.h  87  inline struct jump_entry *jump_label_get_entries(struct static_key *key)
jump_label_get_branch_default  function  include/linux/jump_label.h  93  static inline bool jump_label_get_branch_default(struct static_key *key)
static_key_false  function  include/linux/jump_label.h  155  static __always_inline bool static_key_false(struct static_key *key)
static_key_true  function  include/linux/jump_label.h  162  static __always_inline bool static_key_true(struct static_key *key)
static_branch  function  include/linux/jump_label.h  170  static __always_inline bool static_branch(struct static_key *key)
jump_label_init  function  include/linux/jump_label.h  147  static __always_inline void jump_label_init(void)
jump_label_lock  function  include/linux/jump_label.h  197  static inline void jump_label_lock(void) {}
jump_label_unlock  function  include/linux/jump_label.h  198  static inline void jump_label_unlock(void) {}
arch_jump_label_transform  prototype  include/linux/jump_label.h  122  extern void arch_jump_label_transform(struct jump_entry *entry,enum jump_label_type type);
arch_jump_label_transform_static  prototype  include/linux/jump_label.h  124  extern void arch_jump_label_transform_static(struct jump_entry *entry,enum jump_label_type type);
jump_label_text_reserved  function  include/linux/jump_label.h  192  static inline int jump_label_text_reserved(void *start,void *end)
static_key_slow_inc  function  include/linux/jump_label.h  177  static inline void static_key_slow_inc(struct static_key *key)
static_key_slow_dec  function  include/linux/jump_label.h  182  static inline void static_key_slow_dec(struct static_key *key)
static_key_slow_dec_deferred  function  include/linux/jump_label.h  187  static inline void static_key_slow_dec_deferred(struct static_key_deferred *key)
jump_label_apply_nops  function  include/linux/jump_label.h  200  static inline int jump_label_apply_nops(struct module *mod)
jump_label_rate_limit  function  include/linux/jump_label.h  206  jump_label_rate_limit(struct static_key_deferred *key,unsigned long rl)
STATIC_KEY_INIT_TRUE  macro  include/linux/jump_label.h  211  #define STATIC_KEY_INIT_TRUE ((struct static_key) { .enabled = ATOMIC_INIT(1) })
STATIC_KEY_INIT_FALSE  macro  include/linux/jump_label.h  213  #define STATIC_KEY_INIT_FALSE ((struct static_key) { .enabled = ATOMIC_INIT(0) })
STATIC_KEY_INIT  macro  include/linux/jump_label.h  218  #define STATIC_KEY_INIT STATIC_KEY_INIT_FALSE
jump_label_enabled  macro  include/linux/jump_label.h  219  #define jump_label_enabled static_key_enabled
static_key_enabled  function  include/linux/jump_label.h  221  static inline bool static_key_enabled(struct static_key *key)
_LINUX_SRCU_H  macro  include/linux/srcu.h  28  #define _LINUX_SRCU_H
srcu_struct_array  struct  include/linux/srcu.h  34  struct srcu_struct_array { unsigned long c[2]; unsigned long seq[2]; };
rcu_batch  struct  include/linux/srcu.h  39  struct rcu_batch { struct rcu_head *head, **tail; };
srcu_struct  struct  include/linux/srcu.h  43  struct srcu_struct { unsigned completed; struct srcu_struct_array __percpu *per_cpu_ref; spinlock_t queue_lock; bool running; struct rcu_batch batch_queue; struct rcu_batch batch_check0; struct rcu_batch batch_check1; struct rcu_batch batch_done; struct delayed_work work; struct lockdep_map dep_map; };
__init_srcu_struct  prototype  include/linux/srcu.h  63  int __init_srcu_struct(struct srcu_struct *sp,const char *name,struct lock_class_key *key);
init_srcu_struct  prototype  include/linux/srcu.h  75  int init_srcu_struct(struct srcu_struct *sp);
call_srcu  prototype  include/linux/srcu.h  96  void call_srcu(struct srcu_struct *sp,struct rcu_head *head,void (*func)(struct rcu_head *head));
cleanup_srcu_struct  prototype  include/linux/srcu.h  99  void cleanup_srcu_struct(struct srcu_struct *sp);
synchronize_srcu  prototype  include/linux/srcu.h  102  void synchronize_srcu(struct srcu_struct *sp);
synchronize_srcu_expedited  prototype  include/linux/srcu.h  103  void synchronize_srcu_expedited(struct srcu_struct *sp);
srcu_batches_completed  prototype  include/linux/srcu.h  104  long srcu_batches_completed(struct srcu_struct *sp);
srcu_barrier  prototype  include/linux/srcu.h  105  void srcu_barrier(struct srcu_struct *sp);
srcu_read_lock_held  function  include/linux/srcu.h  149  static inline int srcu_read_lock_held(struct srcu_struct *sp)
srcu_dereference_check  macro  include/linux/srcu.h  168  #define srcu_dereference_check(p,sp,c) __rcu_dereference_check((p), srcu_read_lock_held(sp) || (c), __rcu)
srcu_dereference  macro  include/linux/srcu.h  181  #define srcu_dereference(p,sp) srcu_dereference_check((p),(sp),0)
srcu_read_lock_raw  function  include/linux/srcu.h  241  static inline int srcu_read_lock_raw(struct srcu_struct *sp)
srcu_read_unlock_raw  function  include/linux/srcu.h  260  static inline void srcu_read_unlock_raw(struct srcu_struct *sp,int idx)
_LINUX_IOCTL_H  macro  include/linux/ioctl.h  2  #define _LINUX_IOCTL_H
ASM_X86_ARCHRANDOM_H  macro  arch/x86/include/asm/archrandom.h  24  #define ASM_X86_ARCHRANDOM_H
RDRAND_RETRY_LOOPS  macro  arch/x86/include/asm/archrandom.h  31  #define RDRAND_RETRY_LOOPS 10
RDRAND_INT  macro  arch/x86/include/asm/archrandom.h  33  #define RDRAND_INT ".byte 0x0f,0xc7,0xf0"
RDRAND_LONG  macro  arch/x86/include/asm/archrandom.h  37  # define RDRAND_LONG RDRAND_INT
GET_RANDOM  macro  arch/x86/include/asm/archrandom.h  42  #define GET_RANDOM(name,type,rdrand,nop) static inline int name(type *v) { int ok; alternative_io("movl $0, %0\n\t" nop, "\n1: " rdrand "\n\t" "jc 2f\n\t" "decl %0\n\t" "jnz 1b\n\t" "2:", X86_FEATURE_RDRAND, ASM_OUTPUT2("=r" (ok), "=a" (*v)), "0" (RDRAND_RETRY_LOOPS)); return ok; }
x86_init_rdrand  prototype  arch/x86/include/asm/archrandom.h  73  extern void x86_init_rdrand(struct cpuinfo_x86 *c);
_LINUX_UNALIGNED_ACCESS_OK_H  macro  include/linux/unaligned/access_ok.h  2  #define _LINUX_UNALIGNED_ACCESS_OK_H
get_unaligned_le16  function  include/linux/unaligned/access_ok.h  7  static inline u16 get_unaligned_le16(const void *p)
get_unaligned_le32  function  include/linux/unaligned/access_ok.h  12  static inline u32 get_unaligned_le32(const void *p)
get_unaligned_le64  function  include/linux/unaligned/access_ok.h  17  static inline u64 get_unaligned_le64(const void *p)
get_unaligned_be16  function  include/linux/unaligned/access_ok.h  22  static inline u16 get_unaligned_be16(const void *p)
get_unaligned_be32  function  include/linux/unaligned/access_ok.h  27  static inline u32 get_unaligned_be32(const void *p)
get_unaligned_be64  function  include/linux/unaligned/access_ok.h  32  static inline u64 get_unaligned_be64(const void *p)
put_unaligned_le16  function  include/linux/unaligned/access_ok.h  37  static inline void put_unaligned_le16(u16 val,void *p)
put_unaligned_le32  function  include/linux/unaligned/access_ok.h  42  static inline void put_unaligned_le32(u32 val,void *p)
put_unaligned_le64  function  include/linux/unaligned/access_ok.h  47  static inline void put_unaligned_le64(u64 val,void *p)
put_unaligned_be16  function  include/linux/unaligned/access_ok.h  52  static inline void put_unaligned_be16(u16 val,void *p)
put_unaligned_be32  function  include/linux/unaligned/access_ok.h  57  static inline void put_unaligned_be32(u32 val,void *p)
put_unaligned_be64  function  include/linux/unaligned/access_ok.h  62  static inline void put_unaligned_be64(u64 val,void *p)
_LINUX_UNALIGNED_GENERIC_H  macro  include/linux/unaligned/generic.h  2  #define _LINUX_UNALIGNED_GENERIC_H
__bad_unaligned_access_size  prototype  include/linux/unaligned/generic.h  8  extern void __bad_unaligned_access_size(void);
__get_unaligned_le  macro  include/linux/unaligned/generic.h  10  #define __get_unaligned_le(ptr) ((__force typeof(*(ptr)))({ __builtin_choose_expr(sizeof(*(ptr)) == 1, *(ptr), __builtin_choose_expr(sizeof(*(ptr)) == 2, get_unaligned_le16((ptr)), __builtin_choose_expr(sizeof(*(ptr)) == 4, get_unaligned_le32((ptr)), __builtin_choose_expr(sizeof(*(ptr)) == 8, get_unaligned_le64((ptr)), __bad_unaligned_access_size())))); }))
__get_unaligned_be  macro  include/linux/unaligned/generic.h  18  #define __get_unaligned_be(ptr) ((__force typeof(*(ptr)))({ __builtin_choose_expr(sizeof(*(ptr)) == 1, *(ptr), __builtin_choose_expr(sizeof(*(ptr)) == 2, get_unaligned_be16((ptr)), __builtin_choose_expr(sizeof(*(ptr)) == 4, get_unaligned_be32((ptr)), __builtin_choose_expr(sizeof(*(ptr)) == 8, get_unaligned_be64((ptr)), __bad_unaligned_access_size())))); }))
__put_unaligned_le  macro  include/linux/unaligned/generic.h  26  #define __put_unaligned_le(val,ptr) ({ void *__gu_p = (ptr); switch (sizeof(*(ptr))) { case 1: *(u8 *)__gu_p = (__force u8)(val); break; case 2: put_unaligned_le16((__force u16)(val), __gu_p); break; case 4: put_unaligned_le32((__force u32)(val), __gu_p); break; case 8: put_unaligned_le64((__force u64)(val), __gu_p); break; default: __bad_unaligned_access_size(); break; } (void)0; })
__put_unaligned_be  macro  include/linux/unaligned/generic.h  47  #define __put_unaligned_be(val,ptr) ({ void *__gu_p = (ptr); switch (sizeof(*(ptr))) { case 1: *(u8 *)__gu_p = (__force u8)(val); break; case 2: put_unaligned_be16((__force u16)(val), __gu_p); break; case 4: put_unaligned_be32((__force u32)(val), __gu_p); break; case 8: put_unaligned_be64((__force u64)(val), __gu_p); break; default: __bad_unaligned_access_size(); break; } (void)0; })
_ASM_GENERIC_TYPES_H  macro  include/asm-generic/types.h  2  #define _ASM_GENERIC_TYPES_H
_LINUX_FCNTL_H  macro  include/linux/fcntl.h  2  #define _LINUX_FCNTL_H
F_SETLEASE  macro  include/linux/fcntl.h  6  #define F_SETLEASE (F_LINUX_SPECIFIC_BASE + 0)
F_GETLEASE  macro  include/linux/fcntl.h  7  #define F_GETLEASE (F_LINUX_SPECIFIC_BASE + 1)
F_CANCELLK  macro  include/linux/fcntl.h  13  #define F_CANCELLK (F_LINUX_SPECIFIC_BASE + 5)
F_DUPFD_CLOEXEC  macro  include/linux/fcntl.h  16  #define F_DUPFD_CLOEXEC (F_LINUX_SPECIFIC_BASE + 6)
F_NOTIFY  macro  include/linux/fcntl.h  22  #define F_NOTIFY (F_LINUX_SPECIFIC_BASE+2)
F_SETPIPE_SZ  macro  include/linux/fcntl.h  27  #define F_SETPIPE_SZ (F_LINUX_SPECIFIC_BASE + 7)
F_GETPIPE_SZ  macro  include/linux/fcntl.h  28  #define F_GETPIPE_SZ (F_LINUX_SPECIFIC_BASE + 8)
DN_ACCESS  macro  include/linux/fcntl.h  33  #define DN_ACCESS 0x00000001
DN_MODIFY  macro  include/linux/fcntl.h  34  #define DN_MODIFY 0x00000002
DN_CREATE  macro  include/linux/fcntl.h  35  #define DN_CREATE 0x00000004
DN_DELETE  macro  include/linux/fcntl.h  36  #define DN_DELETE 0x00000008
DN_RENAME  macro  include/linux/fcntl.h  37  #define DN_RENAME 0x00000010
DN_ATTRIB  macro  include/linux/fcntl.h  38  #define DN_ATTRIB 0x00000020
DN_MULTISHOT  macro  include/linux/fcntl.h  39  #define DN_MULTISHOT 0x80000000
AT_FDCWD  macro  include/linux/fcntl.h  41  #define AT_FDCWD -100
AT_SYMLINK_NOFOLLOW  macro  include/linux/fcntl.h  44  #define AT_SYMLINK_NOFOLLOW 0x100
AT_REMOVEDIR  macro  include/linux/fcntl.h  45  #define AT_REMOVEDIR 0x200
AT_SYMLINK_FOLLOW  macro  include/linux/fcntl.h  47  #define AT_SYMLINK_FOLLOW 0x400
AT_NO_AUTOMOUNT  macro  include/linux/fcntl.h  48  #define AT_NO_AUTOMOUNT 0x800
AT_EMPTY_PATH  macro  include/linux/fcntl.h  49  #define AT_EMPTY_PATH 0x1000
force_o_largefile  macro  include/linux/fcntl.h  54  #define force_o_largefile() (BITS_PER_LONG != 32)
IS_GETLK32  macro  include/linux/fcntl.h  65  #define IS_GETLK32(cmd) (0)
IS_SETLK32  macro  include/linux/fcntl.h  66  #define IS_SETLK32(cmd) (0)
IS_SETLKW32  macro  include/linux/fcntl.h  67  #define IS_SETLKW32(cmd) (0)
IS_GETLK64  macro  include/linux/fcntl.h  68  #define IS_GETLK64(cmd) ((cmd) == F_GETLK)
IS_SETLK64  macro  include/linux/fcntl.h  69  #define IS_SETLK64(cmd) ((cmd) == F_SETLK)
IS_SETLKW64  macro  include/linux/fcntl.h  70  #define IS_SETLKW64(cmd) ((cmd) == F_SETLKW)
IS_GETLK  macro  include/linux/fcntl.h  73  #define IS_GETLK(cmd) (IS_GETLK32(cmd) || IS_GETLK64(cmd))
IS_SETLK  macro  include/linux/fcntl.h  74  #define IS_SETLK(cmd) (IS_SETLK32(cmd) || IS_SETLK64(cmd))
IS_SETLKW  macro  include/linux/fcntl.h  75  #define IS_SETLKW(cmd) (IS_SETLKW32(cmd) || IS_SETLKW64(cmd))
_DMA_ATTR_H  macro  include/linux/dma-attrs.h  2  #define _DMA_ATTR_H
dma_attr  enum  include/linux/dma-attrs.h  13  enum dma_attr { DMA_ATTR_WRITE_BARRIER, DMA_ATTR_WEAK_ORDERING, DMA_ATTR_WRITE_COMBINE, DMA_ATTR_NON_CONSISTENT, DMA_ATTR_MAX, };
__DMA_ATTRS_LONGS  macro  include/linux/dma-attrs.h  21  #define __DMA_ATTRS_LONGS BITS_TO_LONGS(DMA_ATTR_MAX)
dma_attrs  struct  include/linux/dma-attrs.h  27  struct dma_attrs { unsigned long flags[__DMA_ATTRS_LONGS]; };
DEFINE_DMA_ATTRS  macro  include/linux/dma-attrs.h  31  #define DEFINE_DMA_ATTRS(x) struct dma_attrs x = { .flags = { [0 ... __DMA_ATTRS_LONGS-1] = 0 }, }
init_dma_attrs  function  include/linux/dma-attrs.h  36  static inline void init_dma_attrs(struct dma_attrs *attrs)
dma_set_attr  function  include/linux/dma-attrs.h  68  static inline void dma_set_attr(enum dma_attr attr,struct dma_attrs *attrs)
dma_get_attr  function  include/linux/dma-attrs.h  72  static inline int dma_get_attr(enum dma_attr attr,struct dma_attrs *attrs)
_LINUX_DMA_DIRECTION_H  macro  include/linux/dma-direction.h  2  #define _LINUX_DMA_DIRECTION_H
dma_data_direction  enum  include/linux/dma-direction.h  7  enum dma_data_direction { DMA_BIDIRECTIONAL = 0, DMA_TO_DEVICE = 1, DMA_FROM_DEVICE = 2, DMA_NONE = 3, };
_ASM_X86_DMA_MAPPING_H  macro  arch/x86/include/asm/dma-mapping.h  2  #define _ASM_X86_DMA_MAPPING_H
ISA_DMA_BIT_MASK  macro  arch/x86/include/asm/dma-mapping.h  21  # define ISA_DMA_BIT_MASK DMA_BIT_MASK(32)
DMA_ERROR_CODE  macro  arch/x86/include/asm/dma-mapping.h  24  #define DMA_ERROR_CODE 0
get_dma_ops  function  arch/x86/include/asm/dma-mapping.h  32  static inline struct dma_map_ops *get_dma_ops(struct device *dev)
dma_mapping_error  prototype  include/asm-generic/dma-mapping-broken.h  64  dma_mapping_error(struct device *dev,dma_addr_t dma_addr);
dma_alloc_noncoherent  macro  include/asm-generic/dma-mapping-broken.h  19  #define dma_alloc_noncoherent(d,s,h,f) dma_alloc_coherent(d,s,h,f)
dma_free_noncoherent  macro  include/asm-generic/dma-mapping-broken.h  20  #define dma_free_noncoherent(d,s,v,h) dma_free_coherent(d,s,v,h)
dma_supported  prototype  include/asm-generic/dma-mapping-broken.h  67  dma_supported(struct device *dev,u64 mask);
dma_set_mask  prototype  include/asm-generic/dma-mapping-broken.h  70  dma_set_mask(struct device *dev,u64 mask);
dma_generic_alloc_coherent  prototype  arch/x86/include/asm/dma-mapping.h  62  extern void *dma_generic_alloc_coherent(struct device *dev,size_t size,dma_addr_t *dma_addr, gfp_t flag,struct dma_attrs *attrs);
dma_generic_free_coherent  prototype  arch/x86/include/asm/dma-mapping.h  66  extern void dma_generic_free_coherent(struct device *dev,size_t size,void *vaddr, dma_addr_t dma_addr,struct dma_attrs *attrs);
dma_capable  function  arch/x86/include/asm/dma-mapping.h  76  static inline bool dma_capable(struct device *dev,dma_addr_t addr,size_t size)
phys_to_dma  function  arch/x86/include/asm/dma-mapping.h  84  static inline dma_addr_t phys_to_dma(struct device *dev,phys_addr_t paddr)
dma_to_phys  function  arch/x86/include/asm/dma-mapping.h  89  static inline phys_addr_t dma_to_phys(struct device *dev,dma_addr_t daddr)
dma_cache_sync  prototype  include/asm-generic/dma-mapping-broken.h  76  dma_cache_sync(struct device *dev,void *vaddr,size_t size,enum dma_data_direction direction);
dma_alloc_coherent_mask  function  arch/x86/include/asm/dma-mapping.h  102  static inline unsigned long dma_alloc_coherent_mask(struct device *dev,gfp_t gfp)
dma_alloc_coherent_gfp_flags  function  arch/x86/include/asm/dma-mapping.h  114  static inline gfp_t dma_alloc_coherent_gfp_flags(struct device *dev,gfp_t gfp)
dma_alloc_coherent  prototype  include/asm-generic/dma-mapping-broken.h  12  dma_alloc_coherent(struct device *dev,size_t size,dma_addr_t *dma_handle,gfp_t flag);
dma_alloc_attrs  function  arch/x86/include/asm/dma-mapping.h  130  dma_alloc_attrs(struct device *dev,size_t size,dma_addr_t *dma_handle,gfp_t gfp, struct dma_attrs *attrs)
dma_free_coherent  prototype  include/asm-generic/dma-mapping-broken.h  16  dma_free_coherent(struct device *dev,size_t size,void *cpu_addr,dma_addr_t dma_handle);
dma_free_attrs  function  arch/x86/include/asm/dma-mapping.h  159  static inline void dma_free_attrs(struct device *dev,size_t size,void *vaddr, dma_addr_t bus,struct dma_attrs *attrs)
_ASM_GENERIC_DMA_MAPPING_H  macro  include/asm-generic/dma-mapping-broken.h  2  #define _ASM_GENERIC_DMA_MAPPING_H
dma_map_single  prototype  include/asm-generic/dma-mapping-broken.h  23  dma_map_single(struct device *dev,void *ptr,size_t size,enum dma_data_direction direction);
dma_unmap_single  prototype  include/asm-generic/dma-mapping-broken.h  27  dma_unmap_single(struct device *dev,dma_addr_t dma_addr,size_t size,enum dma_data_direction direction);
dma_map_sg  prototype  include/asm-generic/dma-mapping-broken.h  31  dma_map_sg(struct device *dev,struct scatterlist *sg,int nents,enum dma_data_direction direction);
dma_unmap_sg  prototype  include/asm-generic/dma-mapping-broken.h  35  dma_unmap_sg(struct device *dev,struct scatterlist *sg,int nhwentries,enum dma_data_direction direction);
dma_map_page  prototype  include/asm-generic/dma-mapping-broken.h  39  dma_map_page(struct device *dev,struct page *page,unsigned long offset,size_t size, enum dma_data_direction direction);
dma_unmap_page  prototype  include/asm-generic/dma-mapping-broken.h  43  dma_unmap_page(struct device *dev,dma_addr_t dma_address,size_t size,enum dma_data_direction direction);
dma_sync_single_for_cpu  prototype  include/asm-generic/dma-mapping-broken.h  47  dma_sync_single_for_cpu(struct device *dev,dma_addr_t dma_handle,size_t size,enum dma_data_direction direction);
dma_sync_single_range_for_cpu  prototype  include/asm-generic/dma-mapping-broken.h  51  dma_sync_single_range_for_cpu(struct device *dev,dma_addr_t dma_handle,unsigned long offset, size_t size,enum dma_data_direction direction);
dma_sync_sg_for_cpu  prototype  include/asm-generic/dma-mapping-broken.h  56  dma_sync_sg_for_cpu(struct device *dev,struct scatterlist *sg,int nelems,enum dma_data_direction direction);
dma_sync_single_for_device  macro  include/asm-generic/dma-mapping-broken.h  59  #define dma_sync_single_for_device dma_sync_single_for_cpu
dma_sync_single_range_for_device  macro  include/asm-generic/dma-mapping-broken.h  60  #define dma_sync_single_range_for_device dma_sync_single_range_for_cpu
dma_sync_sg_for_device  macro  include/asm-generic/dma-mapping-broken.h  61  #define dma_sync_sg_for_device dma_sync_sg_for_cpu
_ASM_X86_ALTERNATIVE_H  macro  arch/x86/include/asm/alternative.h  2  #define _ASM_X86_ALTERNATIVE_H
LOCK_PREFIX_HERE  macro  arch/x86/include/asm/alternative.h  41  #define LOCK_PREFIX_HERE ""
LOCK_PREFIX  macro  arch/x86/include/asm/alternative.h  42  #define LOCK_PREFIX ""
alt_instr  struct  arch/x86/include/asm/alternative.h  45  struct alt_instr { s32 instr_offset; s32 repl_offset; u16 cpuid; u8 instrlen; u8 replacementlen; };
alternative_instructions  prototype  arch/x86/include/asm/alternative.h  53  extern void alternative_instructions(void);
apply_alternatives  prototype  arch/x86/include/asm/alternative.h  54  extern void apply_alternatives(struct alt_instr *start,struct alt_instr *end);
alternatives_smp_module_add  function  arch/x86/include/asm/alternative.h  67  static inline void alternatives_smp_module_add(struct module *mod,char *name,void *locks, void *locks_end,void *text, void *text_end) {}
alternatives_smp_module_del  function  arch/x86/include/asm/alternative.h  70  static inline void alternatives_smp_module_del(struct module *mod) {}
alternatives_smp_switch  function  arch/x86/include/asm/alternative.h  71  static inline void alternatives_smp_switch(int smp) {}
alternatives_text_reserved  function  arch/x86/include/asm/alternative.h  72  static inline int alternatives_text_reserved(void *start,void *end)
ALTERNATIVE  macro  arch/x86/include/asm/alternative.h  79  #define ALTERNATIVE(oldinstr,newinstr,feature) "661:\n\t" oldinstr "\n662:\n" ".section .altinstructions,\"a\"\n" "	 .long 661b - .\n"			/* label           */ "	 .long 663f - .\n"			/* new instruction */ "	 .word " __stringify(feature) "\n"	/* feature bit     */ "	 .byte 662b-661b\n"			/* sourcelen       */ "	 .byte 664f-663f\n"			/* replacementlen  */ ".previous\n" ".section .discard,\"aw\",@progbits\n" "	 .byte 0xff + (664f-663f) - (662b-661b)\n" /* rlen <= slen */ ".previous\n" ".section .altinstr_replacement, \"ax\"\n" "663:\n\t" newinstr "\n664:\n"		/* replacement     */ ".previous"
alternative  macro  arch/x86/include/asm/alternative.h  114  #define alternative(oldinstr,newinstr,feature) asm volatile (ALTERNATIVE(oldinstr, newinstr, feature) : : : "memory")
alternative_input  macro  arch/x86/include/asm/alternative.h  128  #define alternative_input(oldinstr,newinstr,feature,input...) asm volatile (ALTERNATIVE(oldinstr, newinstr, feature) : : "i" (0), ## input)
alternative_io  macro  arch/x86/include/asm/alternative.h  133  #define alternative_io(oldinstr,newinstr,feature,output,input...) asm volatile (ALTERNATIVE(oldinstr, newinstr, feature) : output : "i" (0), ## input)
alternative_call  macro  arch/x86/include/asm/alternative.h  138  #define alternative_call(oldfunc,newfunc,feature,output,input...) asm volatile (ALTERNATIVE("call %P[old]", "call %P[new]", feature) : output : [old] "i" (oldfunc), [new] "i" (newfunc), ## input)
ASM_OUTPUT2  macro  arch/x86/include/asm/alternative.h  146  #define ASM_OUTPUT2(a...) a
ASM_NO_INPUT_CLOBBER  macro  arch/x86/include/asm/alternative.h  152  #define ASM_NO_INPUT_CLOBBER(clbr...) "i" (0) : clbr
apply_paravirt  function  arch/x86/include/asm/alternative.h  159  static inline void apply_paravirt(struct paravirt_patch_site *start,struct paravirt_patch_site *end)
__parainstructions  macro  arch/x86/include/asm/alternative.h  162  #define __parainstructions NULL
__parainstructions_end  macro  arch/x86/include/asm/alternative.h  163  #define __parainstructions_end NULL
text_poke_early  prototype  arch/x86/include/asm/alternative.h  166  extern void *text_poke_early(void *addr,const void *opcode,size_t len);
text_poke_param  struct  arch/x86/include/asm/alternative.h  185  struct text_poke_param { void *addr; const void *opcode; size_t len; };
text_poke  prototype  arch/x86/include/asm/alternative.h  191  extern void *text_poke(void *addr,const void *opcode,size_t len);
text_poke_smp  prototype  arch/x86/include/asm/alternative.h  192  extern void *text_poke_smp(void *addr,const void *opcode,size_t len);
text_poke_smp_batch  prototype  arch/x86/include/asm/alternative.h  193  extern void text_poke_smp_batch(struct text_poke_param *params,int n);
_ASM_X86_SPINLOCK_TYPES_H  macro  arch/x86/include/asm/spinlock_types.h  2  #define _ASM_X86_SPINLOCK_TYPES_H
TICKET_SHIFT  macro  arch/x86/include/asm/spinlock_types.h  18  #define TICKET_SHIFT (sizeof(__ticket_t) * 8)
arch_spinlock  struct  arch/x86/include/asm/spinlock_types.h  20  typedef struct arch_spinlock { __ticketpair_t head_tail; struct __raw_tickets { __ticket_t head, tail; } tickets; }; } arch_spinlock_t;
arch_spinlock_t  struct  include/linux/spinlock_types_up.h  17  typedef struct { volatile unsigned int slock; } arch_spinlock_t;
__ARCH_SPIN_LOCK_UNLOCKED  macro  include/linux/spinlock_types_up.h  27  #define __ARCH_SPIN_LOCK_UNLOCKED { }
__LINUX_SPINLOCK_TYPES_UP_H  macro  include/linux/spinlock_types_up.h  2  #define __LINUX_SPINLOCK_TYPES_UP_H
__ARCH_RW_LOCK_UNLOCKED  macro  include/linux/spinlock_types_up.h  35  #define __ARCH_RW_LOCK_UNLOCKED { }
__LINUX_RWLOCK_TYPES_H  macro  include/linux/rwlock_types.h  2  #define __LINUX_RWLOCK_TYPES_H
rwlock_t  struct  include/linux/rwlock_types.h  11  typedef struct { arch_rwlock_t raw_lock; unsigned int break_lock; unsigned int magic, owner_cpu; void *owner; struct lockdep_map dep_map; } rwlock_t;
RWLOCK_MAGIC  macro  include/linux/rwlock_types.h  25  #define RWLOCK_MAGIC 0xdeaf1eed
RW_DEP_MAP_INIT  macro  include/linux/rwlock_types.h  30  # define RW_DEP_MAP_INIT(lockname)
__RW_LOCK_UNLOCKED  macro  include/linux/rwlock_types.h  41  #define __RW_LOCK_UNLOCKED(lockname) (rwlock_t)	{	.raw_lock = __ARCH_RW_LOCK_UNLOCKED, RW_DEP_MAP_INIT(lockname) }
DEFINE_RWLOCK  macro  include/linux/rwlock_types.h  46  #define DEFINE_RWLOCK(x) rwlock_t x = __RW_LOCK_UNLOCKED(x)
__LINUX_RWLOCK_API_SMP_H  macro  include/linux/rwlock_api_smp.h  2  #define __LINUX_RWLOCK_API_SMP_H
__raw_read_trylock  function  include/linux/rwlock_api_smp.h  117  static inline int __raw_read_trylock(rwlock_t *lock)
__raw_write_trylock  function  include/linux/rwlock_api_smp.h  128  static inline int __raw_write_trylock(rwlock_t *lock)
__raw_read_lock  function  include/linux/rwlock_api_smp.h  146  static inline void __raw_read_lock(rwlock_t *lock)
__raw_read_lock_irqsave  function  include/linux/rwlock_api_smp.h  153  static inline unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
__raw_read_lock_irq  function  include/linux/rwlock_api_smp.h  165  static inline void __raw_read_lock_irq(rwlock_t *lock)
__raw_read_lock_bh  function  include/linux/rwlock_api_smp.h  173  static inline void __raw_read_lock_bh(rwlock_t *lock)
__raw_write_lock_irqsave  function  include/linux/rwlock_api_smp.h  181  static inline unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
__raw_write_lock_irq  function  include/linux/rwlock_api_smp.h  193  static inline void __raw_write_lock_irq(rwlock_t *lock)
__raw_write_lock_bh  function  include/linux/rwlock_api_smp.h  201  static inline void __raw_write_lock_bh(rwlock_t *lock)
__raw_write_lock  function  include/linux/rwlock_api_smp.h  209  static inline void __raw_write_lock(rwlock_t *lock)
__raw_write_unlock  function  include/linux/rwlock_api_smp.h  218  static inline void __raw_write_unlock(rwlock_t *lock)
__raw_read_unlock  function  include/linux/rwlock_api_smp.h  225  static inline void __raw_read_unlock(rwlock_t *lock)
__raw_read_unlock_irqrestore  function  include/linux/rwlock_api_smp.h  233  __raw_read_unlock_irqrestore(rwlock_t *lock,unsigned long flags)
__raw_read_unlock_irq  function  include/linux/rwlock_api_smp.h  241  static inline void __raw_read_unlock_irq(rwlock_t *lock)
__raw_read_unlock_bh  function  include/linux/rwlock_api_smp.h  249  static inline void __raw_read_unlock_bh(rwlock_t *lock)
__raw_write_unlock_irqrestore  function  include/linux/rwlock_api_smp.h  257  static inline void __raw_write_unlock_irqrestore(rwlock_t *lock,unsigned long flags)
__raw_write_unlock_irq  function  include/linux/rwlock_api_smp.h  266  static inline void __raw_write_unlock_irq(rwlock_t *lock)
__raw_write_unlock_bh  function  include/linux/rwlock_api_smp.h  274  static inline void __raw_write_unlock_bh(rwlock_t *lock)
_ASM_GENERIC_BITOPS_FLS64_H_  macro  include/asm-generic/bitops/fls64.h  2  #define _ASM_GENERIC_BITOPS_FLS64_H_
_ASM_GENERIC_BITOPS_FIND_H_  macro  include/asm-generic/bitops/find.h  2  #define _ASM_GENERIC_BITOPS_FIND_H_
find_next_bit  prototype  include/asm-generic/bitops/find.h  11  extern unsigned long find_next_bit(const unsigned long *addr,unsigned long
find_next_zero_bit  prototype  include/asm-generic/bitops/find.h  22  extern unsigned long find_next_zero_bit(const unsigned long *addr,unsigned
find_first_bit  macro  include/asm-generic/bitops/find.h  49  #define find_first_bit(addr,size) find_next_bit((addr),(size),0)
find_first_zero_bit  macro  include/asm-generic/bitops/find.h  50  #define find_first_zero_bit(addr,size) find_next_zero_bit((addr),(size),0)
_ASM_GENERIC_BITOPS_SCHED_H_  macro  include/asm-generic/bitops/sched.h  2  #define _ASM_GENERIC_BITOPS_SCHED_H_
sched_find_first_bit  function  include/asm-generic/bitops/sched.h  12  static inline int sched_find_first_bit(const unsigned long *b)
_ASM_X86_HWEIGHT_H  macro  arch/x86/include/asm/arch_hweight.h  2  #define _ASM_X86_HWEIGHT_H
POPCNT32  macro  arch/x86/include/asm/arch_hweight.h  13  #define POPCNT32 ".byte 0xf3,0x0f,0xb8,0xc0"
POPCNT64  macro  arch/x86/include/asm/arch_hweight.h  8  #define POPCNT64 ".byte 0xf3,0x48,0x0f,0xb8,0xc7"
REG_IN  macro  arch/x86/include/asm/arch_hweight.h  14  #define REG_IN "a"
REG_OUT  macro  arch/x86/include/asm/arch_hweight.h  15  #define REG_OUT "a"
__arch_hweight32  function  arch/x86/include/asm/arch_hweight.h  24  static inline unsigned int __arch_hweight32(unsigned int w)
__arch_hweight16  function  arch/x86/include/asm/arch_hweight.h  35  static inline unsigned int __arch_hweight16(unsigned int w)
__arch_hweight8  function  arch/x86/include/asm/arch_hweight.h  40  static inline unsigned int __arch_hweight8(unsigned int w)
__arch_hweight64  function  arch/x86/include/asm/arch_hweight.h  45  static inline unsigned long __arch_hweight64(__u64 w)
_ASM_GENERIC_BITOPS_CONST_HWEIGHT_H_  macro  include/asm-generic/bitops/const_hweight.h  2  #define _ASM_GENERIC_BITOPS_CONST_HWEIGHT_H_
__const_hweight8  macro  include/asm-generic/bitops/const_hweight.h  7  #define __const_hweight8(w) (	(!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7)))	)
__const_hweight16  macro  include/asm-generic/bitops/const_hweight.h  17  #define __const_hweight16(w) (__const_hweight8(w) + __const_hweight8((w) >> 8 ))
__const_hweight32  macro  include/asm-generic/bitops/const_hweight.h  18  #define __const_hweight32(w) (__const_hweight16(w) + __const_hweight16((w) >> 16))
__const_hweight64  macro  include/asm-generic/bitops/const_hweight.h  19  #define __const_hweight64(w) (__const_hweight32(w) + __const_hweight32((w) >> 32))
hweight8  macro  include/asm-generic/bitops/const_hweight.h  24  #define hweight8(w) (__builtin_constant_p(w) ? __const_hweight8(w) : __arch_hweight8(w))
hweight16  macro  include/asm-generic/bitops/const_hweight.h  25  #define hweight16(w) (__builtin_constant_p(w) ? __const_hweight16(w) : __arch_hweight16(w))
hweight32  macro  include/asm-generic/bitops/const_hweight.h  26  #define hweight32(w) (__builtin_constant_p(w) ? __const_hweight32(w) : __arch_hweight32(w))
hweight64  macro  include/asm-generic/bitops/const_hweight.h  27  #define hweight64(w) (__builtin_constant_p(w) ? __const_hweight64(w) : __arch_hweight64(w))
HWEIGHT8  macro  include/asm-generic/bitops/const_hweight.h  32  #define HWEIGHT8(w) (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_hweight8(w))
HWEIGHT16  macro  include/asm-generic/bitops/const_hweight.h  33  #define HWEIGHT16(w) (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_hweight16(w))
HWEIGHT32  macro  include/asm-generic/bitops/const_hweight.h  34  #define HWEIGHT32(w) (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_hweight32(w))
HWEIGHT64  macro  include/asm-generic/bitops/const_hweight.h  35  #define HWEIGHT64(w) (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_hweight64(w))
HWEIGHT  macro  include/asm-generic/bitops/const_hweight.h  40  #define HWEIGHT(w) HWEIGHT64((u64)w)
_ASM_GENERIC_BITOPS_LE_H_  macro  include/asm-generic/bitops/le.h  2  #define _ASM_GENERIC_BITOPS_LE_H_
BITOP_LE_SWIZZLE  macro  include/asm-generic/bitops/le.h  31  #define BITOP_LE_SWIZZLE ((BITS_PER_LONG-1) & ~0x7)
find_next_zero_bit_le  prototype  include/asm-generic/bitops/le.h  34  extern unsigned long find_next_zero_bit_le(const void *addr,unsigned long size, unsigned long offset);
find_next_bit_le  prototype  include/asm-generic/bitops/le.h  39  extern unsigned long find_next_bit_le(const void *addr,unsigned long size, unsigned long offset);
find_first_zero_bit_le  macro  include/asm-generic/bitops/le.h  44  #define find_first_zero_bit_le(addr,size) find_next_zero_bit_le((addr), (size), 0)
test_bit_le  function  include/asm-generic/bitops/le.h  52  static inline int test_bit_le(int nr,const void *addr)
__set_bit_le  function  include/asm-generic/bitops/le.h  57  static inline void __set_bit_le(int nr,void *addr)
__clear_bit_le  function  include/asm-generic/bitops/le.h  62  static inline void __clear_bit_le(int nr,void *addr)
test_and_set_bit_le  function  include/asm-generic/bitops/le.h  67  static inline int test_and_set_bit_le(int nr,void *addr)
test_and_clear_bit_le  function  include/asm-generic/bitops/le.h  72  static inline int test_and_clear_bit_le(int nr,void *addr)
__test_and_set_bit_le  function  include/asm-generic/bitops/le.h  77  static inline int __test_and_set_bit_le(int nr,void *addr)
__test_and_clear_bit_le  function  include/asm-generic/bitops/le.h  82  static inline int __test_and_clear_bit_le(int nr,void *addr)
_ASM_GENERIC_BITOPS_EXT2_ATOMIC_SETBIT_H_  macro  include/asm-generic/bitops/ext2-atomic-setbit.h  2  #define _ASM_GENERIC_BITOPS_EXT2_ATOMIC_SETBIT_H_
ext2_set_bit_atomic  macro  include/asm-generic/bitops/ext2-atomic-setbit.h  8  #define ext2_set_bit_atomic(l,nr,addr) test_and_set_bit_le(nr,addr)
ext2_clear_bit_atomic  macro  include/asm-generic/bitops/ext2-atomic-setbit.h  9  #define ext2_clear_bit_atomic(l,nr,addr) test_and_clear_bit_le(nr,addr)
__GENERIC_IO_H  macro  include/asm-generic/iomap.h  2  #define __GENERIC_IO_H
ioread8  prototype  include/asm-generic/iomap.h  28  extern unsigned int ioread8(void __iomem *);
ioread16  prototype  include/asm-generic/iomap.h  29  extern unsigned int ioread16(void __iomem *);
ioread16be  prototype  include/asm-generic/iomap.h  30  extern unsigned int ioread16be(void __iomem *);
ioread32  prototype  include/asm-generic/iomap.h  31  extern unsigned int ioread32(void __iomem *);
ioread32be  prototype  include/asm-generic/iomap.h  32  extern unsigned int ioread32be(void __iomem *);
iowrite8  prototype  include/asm-generic/iomap.h  34  extern void iowrite8(u8,void __iomem *);
iowrite16  prototype  include/asm-generic/iomap.h  35  extern void iowrite16(u16,void __iomem *);
iowrite16be  prototype  include/asm-generic/iomap.h  36  extern void iowrite16be(u16,void __iomem *);
iowrite32  prototype  include/asm-generic/iomap.h  37  extern void iowrite32(u32,void __iomem *);
iowrite32be  prototype  include/asm-generic/iomap.h  38  extern void iowrite32be(u32,void __iomem *);
ioread8_rep  prototype  include/asm-generic/iomap.h  51  extern void ioread8_rep(void __iomem *port,void *buf,unsigned long count);
ioread16_rep  prototype  include/asm-generic/iomap.h  52  extern void ioread16_rep(void __iomem *port,void *buf,unsigned long count);
ioread32_rep  prototype  include/asm-generic/iomap.h  53  extern void ioread32_rep(void __iomem *port,void *buf,unsigned long count);
iowrite8_rep  prototype  include/asm-generic/iomap.h  55  extern void iowrite8_rep(void __iomem *port,const void *buf,unsigned long count);
iowrite16_rep  prototype  include/asm-generic/iomap.h  56  extern void iowrite16_rep(void __iomem *port,const void *buf,unsigned long count);
iowrite32_rep  prototype  include/asm-generic/iomap.h  57  extern void iowrite32_rep(void __iomem *port,const void *buf,unsigned long count);
ioport_map  prototype  include/asm-generic/iomap.h  61  extern void __iomem *ioport_map(unsigned long port,unsigned int nr);
ioport_unmap  prototype  include/asm-generic/iomap.h  62  extern void ioport_unmap(void __iomem *);
pci_iounmap  function  include/asm-generic/iomap.h  75  static inline void pci_iounmap(struct pci_dev *dev,void __iomem *addr)
_LINUX_VMALLOC_H  macro  include/linux/vmalloc.h  2  #define _LINUX_VMALLOC_H
VM_IOREMAP  macro  include/linux/vmalloc.h  11  #define VM_IOREMAP 0x00000001
VM_ALLOC  macro  include/linux/vmalloc.h  12  #define VM_ALLOC 0x00000002
VM_MAP  macro  include/linux/vmalloc.h  13  #define VM_MAP 0x00000004
VM_USERMAP  macro  include/linux/vmalloc.h  14  #define VM_USERMAP 0x00000008
VM_VPAGES  macro  include/linux/vmalloc.h  15  #define VM_VPAGES 0x00000010
VM_UNLIST  macro  include/linux/vmalloc.h  16  #define VM_UNLIST 0x00000020
IOREMAP_MAX_ORDER  macro  include/linux/vmalloc.h  24  #define IOREMAP_MAX_ORDER (7 + PAGE_SHIFT)
vm_struct  struct  include/linux/vmalloc.h  27  struct vm_struct { struct vm_struct *next; void *addr; unsigned long size; unsigned long flags; struct page **pages; unsigned int nr_pages; phys_addr_t phys_addr; void *caller; };
vm_unmap_ram  prototype  include/linux/vmalloc.h  41  extern void vm_unmap_ram(const void *mem,unsigned int count);
vm_map_ram  prototype  include/linux/vmalloc.h  42  extern void *vm_map_ram(struct page **pages,unsigned int count,int node, pgprot_t prot);
vm_unmap_aliases  prototype  include/linux/vmalloc.h  44  extern void vm_unmap_aliases(void);
vmalloc_init  function  include/linux/vmalloc.h  49  static inline void vmalloc_init(void)
vmalloc  prototype  include/linux/vmalloc.h  54  extern void *vmalloc(unsigned long size);
vzalloc  prototype  include/linux/vmalloc.h  55  extern void *vzalloc(unsigned long size);
vmalloc_user  prototype  include/linux/vmalloc.h  56  extern void *vmalloc_user(unsigned long size);
vmalloc_node  prototype  include/linux/vmalloc.h  57  extern void *vmalloc_node(unsigned long size,int node);
vzalloc_node  prototype  include/linux/vmalloc.h  58  extern void *vzalloc_node(unsigned long size,int node);
vmalloc_exec  prototype  include/linux/vmalloc.h  59  extern void *vmalloc_exec(unsigned long size);
vmalloc_32  prototype  include/linux/vmalloc.h  60  extern void *vmalloc_32(unsigned long size);
vmalloc_32_user  prototype  include/linux/vmalloc.h  61  extern void *vmalloc_32_user(unsigned long size);
__vmalloc  prototype  include/linux/vmalloc.h  62  extern void *__vmalloc(unsigned long size,gfp_t gfp_mask,pgprot_t prot);
__vmalloc_node_range  prototype  include/linux/vmalloc.h  63  extern void *__vmalloc_node_range(unsigned long size,unsigned long align,unsigned long start, unsigned long end, gfp_t gfp_mask,pgprot_t prot, int node, void *caller);
vfree  prototype  include/linux/vmalloc.h  66  extern void vfree(const void *addr);
vmap  prototype  include/linux/vmalloc.h  68  extern void *vmap(struct page **pages,unsigned int count,unsigned long flags, pgprot_t prot);
vunmap  prototype  include/linux/vmalloc.h  70  extern void vunmap(const void *addr);
remap_vmalloc_range  prototype  include/linux/vmalloc.h  72  extern int remap_vmalloc_range(struct vm_area_struct *vma,void *addr,unsigned long pgoff);
vmalloc_sync_all  prototype  include/linux/vmalloc.h  74  void vmalloc_sync_all(void);
get_vm_area_size  function  include/linux/vmalloc.h  80  static inline size_t get_vm_area_size(const struct vm_struct *area)
get_vm_area  prototype  include/linux/vmalloc.h  86  extern struct vm_struct *get_vm_area(unsigned long size,unsigned long flags);
get_vm_area_caller  prototype  include/linux/vmalloc.h  87  extern struct vm_struct *get_vm_area_caller(unsigned long size,unsigned long flags, void *caller);
__get_vm_area  prototype  include/linux/vmalloc.h  89  extern struct vm_struct *__get_vm_area(unsigned long size,unsigned long flags,unsigned long start, unsigned long end);
__get_vm_area_caller  prototype  include/linux/vmalloc.h  91  extern struct vm_struct *__get_vm_area_caller(unsigned long size,unsigned long flags,unsigned long start, unsigned long end,void *caller);
remove_vm_area  prototype  include/linux/vmalloc.h  95  extern struct vm_struct *remove_vm_area(const void *addr);
map_vm_area  prototype  include/linux/vmalloc.h  97  extern int map_vm_area(struct vm_struct *area,pgprot_t prot,struct page ***pages);
map_kernel_range_noflush  function  include/linux/vmalloc.h  106  map_kernel_range_noflush(unsigned long start,unsigned long size,pgprot_t prot, struct page **pages)
unmap_kernel_range_noflush  function  include/linux/vmalloc.h  112  unmap_kernel_range_noflush(unsigned long addr,unsigned long size)
unmap_kernel_range  function  include/linux/vmalloc.h  116  unmap_kernel_range(unsigned long addr,unsigned long size)
alloc_vm_area  prototype  include/linux/vmalloc.h  122  extern struct vm_struct *alloc_vm_area(size_t size,pte_t **ptes);
free_vm_area  prototype  include/linux/vmalloc.h  123  extern void free_vm_area(struct vm_struct *area);
vread  prototype  include/linux/vmalloc.h  126  extern long vread(char *buf,char *addr,unsigned long count);
vwrite  prototype  include/linux/vmalloc.h  127  extern long vwrite(char *buf,char *addr,unsigned long count);
vm_area_add_early  prototype  include/linux/vmalloc.h  134  extern __init void vm_area_add_early(struct vm_struct *vm);
vm_area_register_early  prototype  include/linux/vmalloc.h  135  extern __init void vm_area_register_early(struct vm_struct *vm,size_t align);
pcpu_get_vm_areas  function  include/linux/vmalloc.h  146  pcpu_get_vm_areas(const unsigned long *offsets,const size_t *sizes, int nr_vms,size_t align)
pcpu_free_vm_areas  function  include/linux/vmalloc.h  154  pcpu_free_vm_areas(struct vm_struct **vms,int nr_vms)
_XEN_XEN_H  macro  include/xen/xen.h  2  #define _XEN_XEN_H
xen_domain_type  macro  include/xen/xen.h  13  #define xen_domain_type XEN_NATIVE
xen_domain  macro  include/xen/xen.h  16  #define xen_domain() (xen_domain_type != XEN_NATIVE)
xen_pv_domain  macro  include/xen/xen.h  17  #define xen_pv_domain() (xen_domain() && xen_domain_type == XEN_PV_DOMAIN)
xen_hvm_domain  macro  include/xen/xen.h  19  #define xen_hvm_domain() (xen_domain() && xen_domain_type == XEN_HVM_DOMAIN)
xen_initial_domain  macro  include/xen/xen.h  29  #define xen_initial_domain() (0)
_ASM_X86_ASM_H  macro  arch/x86/include/asm/asm.h  2  #define _ASM_X86_ASM_H
__ASM_FORM  macro  arch/x86/include/asm/asm.h  8  # define __ASM_FORM(x) " " #x " "
__ASM_FORM_COMMA  macro  arch/x86/include/asm/asm.h  9  # define __ASM_FORM_COMMA(x) " " #x ","
__ASM_SEL  macro  arch/x86/include/asm/asm.h  15  # define __ASM_SEL(a,b) __ASM_FORM(b)
__ASM_SIZE  macro  arch/x86/include/asm/asm.h  18  #define __ASM_SIZE(inst,...) __ASM_SEL(inst##l##__VA_ARGS__, inst##q##__VA_ARGS__)
__ASM_REG  macro  arch/x86/include/asm/asm.h  20  #define __ASM_REG(reg) __ASM_SEL(e##reg,r##reg)
_ASM_PTR  macro  arch/x86/include/asm/asm.h  22  #define _ASM_PTR __ASM_SEL(.long,.quad)
_ASM_ALIGN  macro  arch/x86/include/asm/asm.h  23  #define _ASM_ALIGN __ASM_SEL(.balign 4,.balign 8)
_ASM_MOV  macro  arch/x86/include/asm/asm.h  25  #define _ASM_MOV __ASM_SIZE(mov)
_ASM_INC  macro  arch/x86/include/asm/asm.h  26  #define _ASM_INC __ASM_SIZE(inc)
_ASM_DEC  macro  arch/x86/include/asm/asm.h  27  #define _ASM_DEC __ASM_SIZE(dec)
_ASM_ADD  macro  arch/x86/include/asm/asm.h  28  #define _ASM_ADD __ASM_SIZE(add)
_ASM_SUB  macro  arch/x86/include/asm/asm.h  29  #define _ASM_SUB __ASM_SIZE(sub)
_ASM_XADD  macro  arch/x86/include/asm/asm.h  30  #define _ASM_XADD __ASM_SIZE(xadd)
_ASM_AX  macro  arch/x86/include/asm/asm.h  32  #define _ASM_AX __ASM_REG(ax)
_ASM_BX  macro  arch/x86/include/asm/asm.h  33  #define _ASM_BX __ASM_REG(bx)
_ASM_CX  macro  arch/x86/include/asm/asm.h  34  #define _ASM_CX __ASM_REG(cx)
_ASM_DX  macro  arch/x86/include/asm/asm.h  35  #define _ASM_DX __ASM_REG(dx)
_ASM_SP  macro  arch/x86/include/asm/asm.h  36  #define _ASM_SP __ASM_REG(sp)
_ASM_BP  macro  arch/x86/include/asm/asm.h  37  #define _ASM_BP __ASM_REG(bp)
_ASM_SI  macro  arch/x86/include/asm/asm.h  38  #define _ASM_SI __ASM_REG(si)
_ASM_DI  macro  arch/x86/include/asm/asm.h  39  #define _ASM_DI __ASM_REG(di)
_ASM_EXTABLE  macro  arch/x86/include/asm/asm.h  57  # define _ASM_EXTABLE(from,to) " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" #from ") - .\n" " .long (" #to ") - .\n" " .popsection\n"
_ASM_EXTABLE_EX  macro  arch/x86/include/asm/asm.h  64  # define _ASM_EXTABLE_EX(from,to) " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" #from ") - .\n" " .long (" #to ") - . + 0x7ffffff0\n" " .popsection\n"
_ASM_X86_UACCESS_32_H  macro  arch/x86/include/asm/uaccess_32.h  2  #define _ASM_X86_UACCESS_32_H
__copy_to_user_ll  prototype  arch/x86/include/asm/uaccess_32.h  13  unsigned long __must_check __copy_to_user_ll
__copy_from_user_ll  prototype  arch/x86/include/asm/uaccess_32.h  15  unsigned long __must_check __copy_from_user_ll
__copy_from_user_ll_nozero  prototype  arch/x86/include/asm/uaccess_32.h  17  unsigned long __must_check __copy_from_user_ll_nozero
__copy_from_user_ll_nocache  prototype  arch/x86/include/asm/uaccess_32.h  19  unsigned long __must_check __copy_from_user_ll_nocache
__copy_from_user_ll_nocache_nozero  prototype  arch/x86/include/asm/uaccess_32.h  21  unsigned long __must_check __copy_from_user_ll_nocache_nozero
__copy_to_user_inatomic  function  arch/x86/include/asm/uaccess_64.h  221  __copy_to_user_inatomic(void __user *dst,const void *src,unsigned size)
__copy_to_user  function  arch/x86/include/asm/uaccess_64.h  115  int __copy_to_user(void __user *dst,const void *src,unsigned size)
__copy_from_user_inatomic  function  arch/x86/include/asm/uaccess_64.h  215  __copy_from_user_inatomic(void *dst,const void __user *src,unsigned size)
__copy_from_user  function  arch/x86/include/asm/uaccess_64.h  71  int __copy_from_user(void *dst,const void __user *src,unsigned size)
copy_to_user  function  arch/x86/include/asm/uaccess_64.h  63  int copy_to_user(void __user *dst,const void *src,unsigned size)
_copy_from_user  prototype  arch/x86/include/asm/uaccess_64.h  42  _copy_from_user(void *to,const void __user *from,unsigned len);
copy_from_user  function  arch/x86/include/asm/uaccess_64.h  46  static inline unsigned long __must_check copy_from_user(void *to,const void __user *from,unsigned long n)
clear_user  prototype  arch/x86/include/asm/uaccess_64.h  211  __must_check unsigned long clear_user(void __user *mem,unsigned long len);
__clear_user  prototype  arch/x86/include/asm/uaccess_64.h  212  __must_check unsigned long __clear_user(void __user *mem,unsigned long len);
_ASM_X86_UACCESS_64_H  macro  arch/x86/include/asm/uaccess_64.h  2  #define _ASM_X86_UACCESS_64_H
copy_user_generic_string  prototype  arch/x86/include/asm/uaccess_64.h  20  copy_user_generic_string(void *to,const void *from,unsigned len);
copy_user_generic_unrolled  prototype  arch/x86/include/asm/uaccess_64.h  22  copy_user_generic_unrolled(void *to,const void *from,unsigned len);
copy_user_generic  function  arch/x86/include/asm/uaccess_64.h  25  copy_user_generic(void *to,const void *from,unsigned len)
_copy_to_user  prototype  arch/x86/include/asm/uaccess_64.h  40  _copy_to_user(void __user *to,const void *from,unsigned len);
copy_in_user  prototype  arch/x86/include/asm/uaccess_64.h  44  copy_in_user(void __user *to,const void __user *from,unsigned len);
__copy_in_user  function  arch/x86/include/asm/uaccess_64.h  159  int __copy_in_user(void __user *dst,const void __user *src,unsigned size)
__copy_user_nocache  prototype  arch/x86/include/asm/uaccess_64.h  226  extern long __copy_user_nocache(void *dst,const void __user *src,unsigned size, int zerorest);
copy_user_handle_tail  prototype  arch/x86/include/asm/uaccess_64.h  244  copy_user_handle_tail(char *to,char *from,unsigned len,unsigned zerorest);
