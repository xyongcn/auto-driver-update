_LINUX_KERNEL_H  macro  include/linux/kernel.h  2  #define _LINUX_KERNEL_H
USHRT_MAX  macro  include/linux/kernel.h  18  #define USHRT_MAX ((u16)(~0U))
SHRT_MAX  macro  include/linux/kernel.h  19  #define SHRT_MAX ((s16)(USHRT_MAX>>1))
SHRT_MIN  macro  include/linux/kernel.h  20  #define SHRT_MIN ((s16)(-SHRT_MAX - 1))
INT_MAX  macro  include/linux/kernel.h  21  #define INT_MAX ((int)(~0U>>1))
INT_MIN  macro  include/linux/kernel.h  22  #define INT_MIN (-INT_MAX - 1)
UINT_MAX  macro  include/linux/kernel.h  23  #define UINT_MAX (~0U)
LONG_MAX  macro  include/linux/kernel.h  24  #define LONG_MAX ((long)(~0UL>>1))
LONG_MIN  macro  include/linux/kernel.h  25  #define LONG_MIN (-LONG_MAX - 1)
ULONG_MAX  macro  include/linux/kernel.h  26  #define ULONG_MAX (~0UL)
LLONG_MAX  macro  include/linux/kernel.h  27  #define LLONG_MAX ((long long)(~0ULL>>1))
LLONG_MIN  macro  include/linux/kernel.h  28  #define LLONG_MIN (-LLONG_MAX - 1)
ULLONG_MAX  macro  include/linux/kernel.h  29  #define ULLONG_MAX (~0ULL)
SIZE_MAX  macro  include/linux/kernel.h  30  #define SIZE_MAX (~(size_t)0)
STACK_MAGIC  macro  include/linux/kernel.h  32  #define STACK_MAGIC 0xdeadbeef
REPEAT_BYTE  macro  include/linux/kernel.h  34  #define REPEAT_BYTE(x) ((~0ul / 0xff) * (x))
ALIGN  macro  include/linux/linkage.h  57  #define ALIGN __ALIGN
__ALIGN_MASK  macro  include/linux/kernel.h  37  #define __ALIGN_MASK(x,mask) __ALIGN_KERNEL_MASK((x),(mask))
PTR_ALIGN  macro  include/linux/kernel.h  38  #define PTR_ALIGN(p,a) ((typeof(p))ALIGN((unsigned long)(p),(a)))
IS_ALIGNED  macro  include/linux/kernel.h  39  #define IS_ALIGNED(x,a) (((x) & ((typeof(x))(a) - 1)) == 0)
ARRAY_SIZE  macro  include/linux/kernel.h  41  #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]) + __must_be_array(arr))
__round_mask  macro  include/linux/kernel.h  49  #define __round_mask(x,y) ((__typeof__(x))((y)-1))
round_up  macro  include/linux/kernel.h  50  #define round_up(x,y) ((((x)-1) | __round_mask(x,y))+1)
round_down  macro  include/linux/kernel.h  51  #define round_down(x,y) ((x) & ~__round_mask(x,y))
FIELD_SIZEOF  macro  include/linux/kernel.h  53  #define FIELD_SIZEOF(t,f) (sizeof(((t*)0)->f))
DIV_ROUND_UP  macro  include/linux/kernel.h  54  #define DIV_ROUND_UP(n,d) (((n) + (d) - 1) / (d))
DIV_ROUND_UP_ULL  macro  include/linux/kernel.h  55  #define DIV_ROUND_UP_ULL(ll,d) ({ unsigned long long _tmp = (ll)+(d)-1; do_div(_tmp, d); _tmp; })
DIV_ROUND_UP_SECTOR_T  macro  include/linux/kernel.h  61  # define DIV_ROUND_UP_SECTOR_T(ll,d) DIV_ROUND_UP(ll,d)
roundup  macro  include/linux/kernel.h  65  #define roundup(x,y) ( { const typeof(y) __y = y; (((x) + (__y - 1)) / __y) * __y; } )
rounddown  macro  include/linux/kernel.h  71  #define rounddown(x,y) ( { typeof(x) __x = (x); __x - (__x % (y)); } )
DIV_ROUND_CLOSEST  macro  include/linux/kernel.h  83  #define DIV_ROUND_CLOSEST(x,divisor)( { typeof(x) __x = x; typeof(divisor) __d = divisor; (((typeof(x))-1) > 0 || ((typeof(divisor))-1) > 0 || (__x) > 0) ? (((__x) + ((__d) / 2)) / (__d)) : (((__x) - ((__d) / 2)) / (__d)); } )
mult_frac  macro  include/linux/kernel.h  98  #define mult_frac(x,numer,denom)( { typeof(x) quot = (x) / (denom); typeof(x) rem  = (x) % (denom); (quot * (numer)) + ((rem * (numer)) / (denom)); } )
_RET_IP_  macro  include/linux/kernel.h  107  #define _RET_IP_ (unsigned long)__builtin_return_address(0)
_THIS_IP_  macro  include/linux/kernel.h  108  #define _THIS_IP_ ({ __label__ __here; __here: (unsigned long)&&__here; })
sector_div  macro  include/linux/kernel.h  114  # define sector_div(n,b)( { int _res; _res = (n) % (b); (n) /= (b); _res; } )
upper_32_bits  macro  include/linux/kernel.h  132  #define upper_32_bits(n) ((u32)(((n) >> 16) >> 16))
lower_32_bits  macro  include/linux/kernel.h  138  #define lower_32_bits(n) ((u32)(n))
_cond_resched  prototype  include/linux/sched.h  2647  extern int _cond_resched(void);
might_resched  macro  include/linux/kernel.h  148  # define might_resched() do { } while (0)
__might_sleep  function  include/linux/kernel.h  166  static inline void __might_sleep(const char *file,int line,int preempt_offset) { }
might_sleep  macro  include/linux/kernel.h  168  # define might_sleep() do { might_resched(); } while (0)
might_sleep_if  macro  include/linux/kernel.h  171  #define might_sleep_if(cond) do { if (cond) might_sleep(); } while (0)
abs  macro  include/linux/kernel.h  179  #define abs(x) ({ long ret; if (sizeof(x) == sizeof(long)) { long __x = (x); ret = (__x < 0) ? -__x : __x; } else { int __x = (x); ret = (__x < 0) ? -__x : __x; } ret; })
abs64  macro  include/linux/kernel.h  191  #define abs64(x) ({ s64 __x = (x); (__x < 0) ? -__x : __x; })
might_fault  function  include/linux/kernel.h  199  static inline void might_fault(void)
oops_enter  prototype  include/linux/kernel.h  210  extern void oops_enter(void);
oops_exit  prototype  include/linux/kernel.h  211  extern void oops_exit(void);
print_oops_end_marker  prototype  include/linux/kernel.h  212  void print_oops_end_marker(void);
oops_may_print  prototype  include/linux/kernel.h  213  extern int oops_may_print(void);
_kstrtoul  prototype  include/linux/kernel.h  220  int __must_check _kstrtoul(const char *s,unsigned int base,unsigned long *res);
_kstrtol  prototype  include/linux/kernel.h  221  int __must_check _kstrtol(const char *s,unsigned int base,long *res);
kstrtoull  prototype  include/linux/kernel.h  223  int __must_check kstrtoull(const char *s,unsigned int base,unsigned long long *res);
kstrtoll  prototype  include/linux/kernel.h  224  int __must_check kstrtoll(const char *s,unsigned int base,long long *res);
kstrtoul  function  include/linux/kernel.h  242  static inline int __must_check kstrtoul(const char *s,unsigned int base,unsigned long *res)
kstrtol  function  include/linux/kernel.h  271  static inline int __must_check kstrtol(const char *s,unsigned int base,long *res)
kstrtouint  prototype  include/linux/kernel.h  284  int __must_check kstrtouint(const char *s,unsigned int base,unsigned int *res);
kstrtoint  prototype  include/linux/kernel.h  285  int __must_check kstrtoint(const char *s,unsigned int base,int *res);
kstrtou64  function  include/linux/kernel.h  287  static inline int __must_check kstrtou64(const char *s,unsigned int base,u64 *res)
kstrtos64  function  include/linux/kernel.h  292  static inline int __must_check kstrtos64(const char *s,unsigned int base,s64 *res)
kstrtou32  function  include/linux/kernel.h  297  static inline int __must_check kstrtou32(const char *s,unsigned int base,u32 *res)
kstrtos32  function  include/linux/kernel.h  302  static inline int __must_check kstrtos32(const char *s,unsigned int base,s32 *res)
kstrtou16  prototype  include/linux/kernel.h  307  int __must_check kstrtou16(const char *s,unsigned int base,u16 *res);
kstrtos16  prototype  include/linux/kernel.h  308  int __must_check kstrtos16(const char *s,unsigned int base,s16 *res);
kstrtou8  prototype  include/linux/kernel.h  309  int __must_check kstrtou8(const char *s,unsigned int base,u8 *res);
kstrtos8  prototype  include/linux/kernel.h  310  int __must_check kstrtos8(const char *s,unsigned int base,s8 *res);
kstrtoull_from_user  prototype  include/linux/kernel.h  312  int __must_check kstrtoull_from_user(const char __user *s,size_t count,unsigned int base,unsigned long long *res);
kstrtoll_from_user  prototype  include/linux/kernel.h  313  int __must_check kstrtoll_from_user(const char __user *s,size_t count,unsigned int base,long long *res);
kstrtoul_from_user  prototype  include/linux/kernel.h  314  int __must_check kstrtoul_from_user(const char __user *s,size_t count,unsigned int base,unsigned long *res);
kstrtol_from_user  prototype  include/linux/kernel.h  315  int __must_check kstrtol_from_user(const char __user *s,size_t count,unsigned int base,long *res);
kstrtouint_from_user  prototype  include/linux/kernel.h  316  int __must_check kstrtouint_from_user(const char __user *s,size_t count,unsigned int base,unsigned int *res);
kstrtoint_from_user  prototype  include/linux/kernel.h  317  int __must_check kstrtoint_from_user(const char __user *s,size_t count,unsigned int base,int *res);
kstrtou16_from_user  prototype  include/linux/kernel.h  318  int __must_check kstrtou16_from_user(const char __user *s,size_t count,unsigned int base,u16 *res);
kstrtos16_from_user  prototype  include/linux/kernel.h  319  int __must_check kstrtos16_from_user(const char __user *s,size_t count,unsigned int base,s16 *res);
kstrtou8_from_user  prototype  include/linux/kernel.h  320  int __must_check kstrtou8_from_user(const char __user *s,size_t count,unsigned int base,u8 *res);
kstrtos8_from_user  prototype  include/linux/kernel.h  321  int __must_check kstrtos8_from_user(const char __user *s,size_t count,unsigned int base,s8 *res);
kstrtou64_from_user  function  include/linux/kernel.h  323  static inline int __must_check kstrtou64_from_user(const char __user *s,size_t count,unsigned int base,u64 *res)
kstrtos64_from_user  function  include/linux/kernel.h  328  static inline int __must_check kstrtos64_from_user(const char __user *s,size_t count,unsigned int base,s64 *res)
kstrtou32_from_user  function  include/linux/kernel.h  333  static inline int __must_check kstrtou32_from_user(const char __user *s,size_t count,unsigned int base,u32 *res)
kstrtos32_from_user  function  include/linux/kernel.h  338  static inline int __must_check kstrtos32_from_user(const char __user *s,size_t count,unsigned int base,s32 *res)
simple_strtoul  prototype  include/linux/kernel.h  345  extern unsigned long simple_strtoul(const char *,char **,unsigned int);
simple_strtol  prototype  include/linux/kernel.h  346  extern long simple_strtol(const char *,char **,unsigned int);
simple_strtoull  prototype  include/linux/kernel.h  347  extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
simple_strtoll  prototype  include/linux/kernel.h  348  extern long long simple_strtoll(const char *,char **,unsigned int);
strict_strtoul  macro  include/linux/kernel.h  349  #define strict_strtoul kstrtoul
strict_strtol  macro  include/linux/kernel.h  350  #define strict_strtol kstrtol
strict_strtoull  macro  include/linux/kernel.h  351  #define strict_strtoull kstrtoull
strict_strtoll  macro  include/linux/kernel.h  352  #define strict_strtoll kstrtoll
num_to_str  prototype  include/linux/kernel.h  354  extern int num_to_str(char *buf,int size,unsigned long long num);
sprintf  prototype  include/linux/kernel.h  358  extern __printf(2,3) int sprintf(char *buf,const char * fmt,...);
vsprintf  prototype  include/linux/kernel.h  359  extern __printf(2,0) int vsprintf(char *buf,const char *,va_list);
snprintf  prototype  include/linux/kernel.h  361  int snprintf(char *buf,size_t size,const char *fmt,...);
vsnprintf  prototype  include/linux/kernel.h  363  int vsnprintf(char *buf,size_t size,const char *fmt,va_list args);
scnprintf  prototype  include/linux/kernel.h  365  int scnprintf(char *buf,size_t size,const char *fmt,...);
vscnprintf  prototype  include/linux/kernel.h  367  int vscnprintf(char *buf,size_t size,const char *fmt,va_list args);
kasprintf  prototype  include/linux/kernel.h  369  char *kasprintf(gfp_t gfp,const char *fmt,...);
kvasprintf  prototype  include/linux/kernel.h  370  extern char *kvasprintf(gfp_t gfp,const char *fmt,va_list args);
sscanf  prototype  include/linux/kernel.h  373  int sscanf(const char *,const char *,...);
vsscanf  prototype  include/linux/kernel.h  375  int vsscanf(const char *,const char *,va_list);
get_option  prototype  include/linux/kernel.h  377  extern int get_option(char **str,int *pint);
get_options  prototype  include/linux/kernel.h  378  extern char *get_options(const char *str,int nints,int *ints);
memparse  prototype  include/linux/kernel.h  379  extern unsigned long long memparse(const char *ptr,char **retptr);
core_kernel_text  prototype  include/linux/kernel.h  381  extern int core_kernel_text(unsigned long addr);
core_kernel_data  prototype  include/linux/kernel.h  382  extern int core_kernel_data(unsigned long addr);
__kernel_text_address  prototype  include/linux/kernel.h  383  extern int __kernel_text_address(unsigned long addr);
kernel_text_address  prototype  include/linux/kernel.h  384  extern int kernel_text_address(unsigned long addr);
func_ptr_is_kernel_text  prototype  include/linux/kernel.h  385  extern int func_ptr_is_kernel_text(void *ptr);
session_of_pgrp  prototype  include/linux/kernel.h  388  extern struct pid *session_of_pgrp(struct pid *pgrp);
int_sqrt  prototype  include/linux/kernel.h  390  unsigned long int_sqrt(unsigned long);
bust_spinlocks  prototype  include/linux/kernel.h  392  extern void bust_spinlocks(int yes);
wake_up_klogd  prototype  include/linux/kernel.h  393  extern void wake_up_klogd(void);
print_tainted  prototype  include/linux/kernel.h  400  extern const char *print_tainted(void);
add_taint  prototype  include/linux/kernel.h  401  extern void add_taint(unsigned flag);
test_taint  prototype  include/linux/kernel.h  402  extern int test_taint(unsigned flag);
get_taint  prototype  include/linux/kernel.h  403  extern unsigned long get_taint(void);
system_states  enum  include/linux/kernel.h  409  extern enum system_states { SYSTEM_BOOTING, SYSTEM_RUNNING, SYSTEM_HALT, SYSTEM_POWER_OFF, SYSTEM_RESTART, } system_state;
system_state  enum  include/linux/kernel.h  409  extern enum system_states { SYSTEM_BOOTING, SYSTEM_RUNNING, SYSTEM_HALT, SYSTEM_POWER_OFF, SYSTEM_RESTART, } system_state;
TAINT_PROPRIETARY_MODULE  macro  include/linux/kernel.h  417  #define TAINT_PROPRIETARY_MODULE 0
TAINT_FORCED_MODULE  macro  include/linux/kernel.h  418  #define TAINT_FORCED_MODULE 1
TAINT_UNSAFE_SMP  macro  include/linux/kernel.h  419  #define TAINT_UNSAFE_SMP 2
TAINT_FORCED_RMMOD  macro  include/linux/kernel.h  420  #define TAINT_FORCED_RMMOD 3
TAINT_MACHINE_CHECK  macro  include/linux/kernel.h  421  #define TAINT_MACHINE_CHECK 4
TAINT_BAD_PAGE  macro  include/linux/kernel.h  422  #define TAINT_BAD_PAGE 5
TAINT_USER  macro  include/linux/kernel.h  423  #define TAINT_USER 6
TAINT_DIE  macro  include/linux/kernel.h  424  #define TAINT_DIE 7
TAINT_OVERRIDDEN_ACPI_TABLE  macro  include/linux/kernel.h  425  #define TAINT_OVERRIDDEN_ACPI_TABLE 8
TAINT_WARN  macro  include/linux/kernel.h  426  #define TAINT_WARN 9
TAINT_CRAP  macro  include/linux/kernel.h  427  #define TAINT_CRAP 10
TAINT_FIRMWARE_WORKAROUND  macro  include/linux/kernel.h  428  #define TAINT_FIRMWARE_WORKAROUND 11
TAINT_OOT_MODULE  macro  include/linux/kernel.h  429  #define TAINT_OOT_MODULE 12
hex_asc_lo  macro  include/linux/kernel.h  432  #define hex_asc_lo(x) hex_asc[((x) & 0x0f)]
hex_asc_hi  macro  include/linux/kernel.h  433  #define hex_asc_hi(x) hex_asc[((x) & 0xf0) >> 4]
hex_byte_pack  function  include/linux/kernel.h  435  static inline char *hex_byte_pack(char *buf,u8 byte)
pack_hex_byte  function  include/linux/kernel.h  442  static inline char * __deprecated pack_hex_byte(char *buf,u8 byte)
hex_to_bin  prototype  include/linux/kernel.h  447  extern int hex_to_bin(char ch);
hex2bin  prototype  include/linux/kernel.h  448  extern int __must_check hex2bin(u8 *dst,const char *src,size_t count);
tracing_off_permanent  function  include/linux/kernel.h  473  static inline void tracing_off_permanent(void) { }
ftrace_dump_mode  enum  include/linux/kernel.h  476  enum ftrace_dump_mode { DUMP_NONE, DUMP_ALL, DUMP_ORIG, };
tracing_on  function  include/linux/kernel.h  570  static inline void tracing_on(void) { }
tracing_off  function  include/linux/kernel.h  571  static inline void tracing_off(void) { }
tracing_is_on  function  include/linux/kernel.h  572  static inline int tracing_is_on(void) { return 0; }
tracing_start  function  include/linux/kernel.h  565  static inline void tracing_start(void) { }
tracing_stop  function  include/linux/kernel.h  566  static inline void tracing_stop(void) { }
ftrace_off_permanent  function  include/linux/kernel.h  567  static inline void ftrace_off_permanent(void) { }
____trace_printk_check_format  function  include/linux/kernel.h  492  void ____trace_printk_check_format(const char *fmt,...)
__trace_printk_check_format  macro  include/linux/kernel.h  495  #define __trace_printk_check_format(fmt,args...) do { if (0) ____trace_printk_check_format(fmt, ##args); } while (0)
trace_printk  function  include/linux/kernel.h  575  int trace_printk(const char *fmt,...)
__trace_bprintk  prototype  include/linux/kernel.h  533  int __trace_bprintk(unsigned long ip,const char *fmt,...);
__trace_printk  prototype  include/linux/kernel.h  536  int __trace_printk(unsigned long ip,const char *fmt,...);
trace_dump_stack  function  include/linux/kernel.h  568  static inline void trace_dump_stack(void) { }
ftrace_vprintk  function  include/linux/kernel.h  580  ftrace_vprintk(const char *fmt,va_list ap)
__ftrace_vbprintk  prototype  include/linux/kernel.h  558  __ftrace_vbprintk(unsigned long ip,const char *fmt,va_list ap);
__ftrace_vprintk  prototype  include/linux/kernel.h  561  __ftrace_vprintk(unsigned long ip,const char *fmt,va_list ap);
ftrace_dump  function  include/linux/kernel.h  584  static inline void ftrace_dump(enum ftrace_dump_mode oops_dump_mode) { }
min  macro  include/linux/kernel.h  592  #define min(x,y) ({ typeof(x) _min1 = (x); typeof(y) _min2 = (y); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; })
max  macro  include/linux/kernel.h  598  #define max(x,y) ({ typeof(x) _max1 = (x); typeof(y) _max2 = (y); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; })
min3  macro  include/linux/kernel.h  604  #define min3(x,y,z) ({ typeof(x) _min1 = (x); typeof(y) _min2 = (y); typeof(z) _min3 = (z); (void) (&_min1 == &_min2); (void) (&_min1 == &_min3); _min1 < _min2 ? (_min1 < _min3 ? _min1 : _min3) : (_min2 < _min3 ? _min2 : _min3); })
max3  macro  include/linux/kernel.h  613  #define max3(x,y,z) ({ typeof(x) _max1 = (x); typeof(y) _max2 = (y); typeof(z) _max3 = (z); (void) (&_max1 == &_max2); (void) (&_max1 == &_max3); _max1 > _max2 ? (_max1 > _max3 ? _max1 : _max3) : (_max2 > _max3 ? _max2 : _max3); })
min_not_zero  macro  include/linux/kernel.h  627  #define min_not_zero(x,y) ({ typeof(x) __x = (x); typeof(y) __y = (y); __x == 0 ? __y : ((__y == 0) ? __x : min(__x, __y)); })
clamp  macro  include/linux/kernel.h  641  #define clamp(val,min,max) ({ typeof(val) __val = (val); typeof(min) __min = (min); typeof(max) __max = (max); (void) (&__val == &__min); (void) (&__val == &__max); __val = __val < __min ? __min: __val; __val > __max ? __max: __val; })
min_t  macro  include/linux/kernel.h  656  #define min_t(type,x,y) ({ type __min1 = (x); type __min2 = (y); __min1 < __min2 ? __min1: __min2; })
max_t  macro  include/linux/kernel.h  661  #define max_t(type,x,y) ({ type __max1 = (x); type __max2 = (y); __max1 > __max2 ? __max1: __max2; })
clamp_t  macro  include/linux/kernel.h  676  #define clamp_t(type,val,min,max) ({ type __val = (val); type __min = (min); type __max = (max); __val = __val < __min ? __min: __val; __val > __max ? __max: __val; })
clamp_val  macro  include/linux/kernel.h  694  #define clamp_val(val,min,max) ({ typeof(val) __val = (val); typeof(val) __min = (min); typeof(val) __max = (max); __val = __val < __min ? __min: __val; __val > __max ? __max: __val; })
swap  macro  include/linux/kernel.h  705  #define swap(a,b) do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)
container_of  macro  include/linux/kernel.h  715  #define container_of(ptr,type,member) ({ const typeof( ((type *)0)->member ) *__mptr = (ptr); (type *)( (char *)__mptr - offsetof(type,member) );})
__FUNCTION__  macro  include/linux/kernel.h  720  #define __FUNCTION__ (__func__)
SYMBOL_PREFIX  macro  include/linux/kernel.h  726  #define SYMBOL_PREFIX ""
REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD  macro  include/linux/kernel.h  731  # define REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD
do_sysinfo  prototype  include/linux/kernel.h  734  extern int do_sysinfo(struct sysinfo *info);
_LINUX_MODULE_H  macro  include/linux/module.h  2  #define _LINUX_MODULE_H
MODULE_SIG_STRING  macro  include/linux/module.h  25  #define MODULE_SIG_STRING "~Module signature appended~\n"
MODULE_SUPPORTED_DEVICE  macro  include/linux/module.h  28  #define MODULE_SUPPORTED_DEVICE(name)
MODULE_NAME_LEN  macro  include/linux/module.h  30  #define MODULE_NAME_LEN MAX_PARAM_PREFIX_LEN
modversion_info  struct  include/linux/module.h  32  struct modversion_info { unsigned long crc; char name[MODULE_NAME_LEN]; };
module_kobject  struct  include/linux/module.h  40  struct module_kobject { struct kobject kobj; struct module *mod; struct kobject *drivers_dir; struct module_param_attrs *mp; };
module_attribute  struct  include/linux/module.h  47  struct module_attribute { struct attribute attr; ssize_t (*show)(struct module_attribute *, struct module_kobject *,char *); ssize_t (*store)(struct module_attribute *, struct module_kobject *,const char *, size_t count); void (*setup)(struct module *, const char *); int (*test)(struct module *); void (*free)(struct module *); };
module_version_attribute  struct  include/linux/module.h  58  struct module_version_attribute { struct module_attribute mattr; const char *module_name; const char *version; } __attribute__ ((__aligned__(sizeof(void *))));
__modver_version_show  prototype  include/linux/module.h  64  extern ssize_t __modver_version_show(struct module_attribute *,struct module_kobject *, char *);
init_module  prototype  include/linux/module.h  70  extern int init_module(void);
cleanup_module  prototype  include/linux/module.h  71  extern void cleanup_module(void);
search_extable  prototype  include/linux/module.h  77  search_extable(const struct exception_table_entry *first,const struct exception_table_entry *last,unsigned long value);
sort_extable  prototype  include/linux/module.h  80  void sort_extable(struct exception_table_entry *start,struct exception_table_entry *finish);
sort_main_extable  prototype  include/linux/module.h  82  void sort_main_extable(void);
trim_init_extable  prototype  include/linux/module.h  83  void trim_init_extable(struct module *m);
MODULE_GENERIC_TABLE  macro  include/linux/module.h  91  #define MODULE_GENERIC_TABLE(gtype,name)
MODULE_INFO  macro  include/linux/module.h  95  #define MODULE_INFO(tag,info) __MODULE_INFO(tag,tag,info)
MODULE_ALIAS  macro  include/linux/module.h  98  #define MODULE_ALIAS(_alias) MODULE_INFO(alias,_alias)
MODULE_LICENSE  macro  include/linux/module.h  128  #define MODULE_LICENSE(_license) MODULE_INFO(license,_license)
MODULE_AUTHOR  macro  include/linux/module.h  134  #define MODULE_AUTHOR(_author) MODULE_INFO(author,_author)
MODULE_DESCRIPTION  macro  include/linux/module.h  137  #define MODULE_DESCRIPTION(_description) MODULE_INFO(description,_description)
MODULE_DEVICE_TABLE  macro  include/linux/module.h  139  #define MODULE_DEVICE_TABLE(type,name) MODULE_GENERIC_TABLE(type##_device,name)
MODULE_VERSION  macro  include/linux/module.h  160  #define MODULE_VERSION(_version) static struct module_version_attribute ___modver_attr = { .mattr	= { .attr	= { .name	= "version", .mode	= S_IRUGO, }, .show	= __modver_version_show, }, .module_name	= KBUILD_MODNAME, .version	= _version, }; static const struct module_version_attribute __used __attribute__ ((__section__ ("__modver"))) * __moduleparam_const __modver_attr = &___modver_attr
MODULE_FIRMWARE  macro  include/linux/module.h  180  #define MODULE_FIRMWARE(_firmware) MODULE_INFO(firmware,_firmware)
search_exception_tables  prototype  include/linux/module.h  183  const struct exception_table_entry *search_exception_tables(unsigned long add);
__symbol_get  prototype  include/linux/module.h  191  void *__symbol_get(const char *symbol);
__symbol_get_gpl  prototype  include/linux/module.h  192  void *__symbol_get_gpl(const char *symbol);
symbol_get  macro  include/linux/module.h  547  #define symbol_get(x) ({ extern typeof(x) x __attribute__((weak)); &(x); })
module_use  struct  include/linux/module.h  196  struct module_use { struct list_head source_list; struct list_head target_list; struct module *source, *target; };
module_state  enum  include/linux/module.h  202  enum module_state { MODULE_STATE_LIVE, MODULE_STATE_COMING, MODULE_STATE_GOING, MODULE_STATE_UNFORMED, };
module_ref  struct  include/linux/module.h  218  struct module_ref { unsigned long incs; unsigned long decs; } __attribute((aligned(2 * sizeof(unsigned long))));
module  struct  include/linux/module.h  223  struct module { enum module_state state; struct list_head list; char name[MODULE_NAME_LEN]; struct module_kobject mkobj; struct module_attribute *modinfo_attrs; const char *version; const char *srcversion; struct kobject *holders_dir; const struct kernel_symbol *syms; const unsigned long *crcs; unsigned int num_syms; struct kernel_param *kp; unsigned int num_kp; unsigned int num_gpl_syms; const struct kernel_symbol *gpl_syms; const unsigned long *gpl_crcs; const struct kernel_symbol *unused_syms; const unsigned long *unused_crcs; unsigned int num_unused_syms; unsigned int num_unused_gpl_syms; const struct kernel_symbol *unused_gpl_syms; const unsigned long *unused_gpl_crcs; bool sig_ok; const struct kernel_symbol *gpl_future_syms; const unsigned long *gpl_future_crcs; unsigned int num_gpl_future_syms; unsigned int num_exentries; struct exception_table_entry *extable; int (*init)(void); void *module_init; void *module_core; unsigned int init_size, core_size; unsigned int init_text_size, core_text_size; unsigned int init_ro_size, core_ro_size; struct mod_arch_specific arch; unsigned int taints; unsigned num_bugs; struct list_head bug_list; struct bug_entry *bug_table; Elf_Sym *symtab, *core_symtab; unsigned int num_symtab, core_num_syms; char *strtab, *core_strtab; struct module_sect_attrs *sect_attrs; struct module_notes_attrs *notes_attrs; char *args; void __percpu *percpu; unsigned int percpu_size; unsigned int num_tracepoints; struct tracepoint * const *tracepoints_ptrs; struct jump_entry *jump_entries; unsigned int num_jump_entries; unsigned int num_trace_bprintk_fmt; const char **trace_bprintk_fmt_start; struct ftrace_event_call **trace_events; unsigned int num_trace_events; unsigned int num_ftrace_callsites; unsigned long *ftrace_callsites; struct list_head source_list; struct list_head target_list; struct task_struct *waiter; void (*exit)(void); struct module_ref __percpu *refptr; ctor_fn_t *ctors; unsigned int num_ctors; };
MODULE_ARCH_INIT  macro  include/linux/module.h  380  #define MODULE_ARCH_INIT {}
module_is_live  function  include/linux/module.h  388  static inline int module_is_live(struct module *mod)
__module_text_address  function  include/linux/module.h  526  static inline struct module *__module_text_address(unsigned long addr)
__module_address  function  include/linux/module.h  521  static inline struct module *__module_address(unsigned long addr)
is_module_address  function  include/linux/module.h  531  static inline bool is_module_address(unsigned long addr)
is_module_percpu_address  function  include/linux/module.h  536  static inline bool is_module_percpu_address(unsigned long addr)
is_module_text_address  function  include/linux/module.h  541  static inline bool is_module_text_address(unsigned long addr)
within_module_core  function  include/linux/module.h  399  static inline int within_module_core(unsigned long addr,struct module *mod)
within_module_init  function  include/linux/module.h  405  static inline int within_module_init(unsigned long addr,struct module *mod)
find_module  prototype  include/linux/module.h  412  struct module *find_module(const char *name);
symsearch  struct  include/linux/module.h  414  struct symsearch { const struct kernel_symbol *start, *stop; const unsigned long *crcs; enum { NOT_GPL_ONLY, WILL_BE_GPL_ONLY, } licence; bool unused; };
find_symbol  prototype  include/linux/module.h  426  const struct kernel_symbol *find_symbol(const char *name,struct module **owner,const unsigned long **crc,bool gplok,bool warn);
each_symbol_section  prototype  include/linux/module.h  433  bool each_symbol_section(bool (*fn)(const struct symsearch *arr,struct module *owner,void *data), void *data);
module_get_kallsym  function  include/linux/module.h  586  static inline int module_get_kallsym(unsigned int symnum,unsigned long *value,char *type, char *name,char *module_name, int *exported)
module_kallsyms_lookup_name  function  include/linux/module.h  593  static inline unsigned long module_kallsyms_lookup_name(const char *name)
module_kallsyms_on_each_symbol  function  include/linux/module.h  598  static inline int module_kallsyms_on_each_symbol(int (*fn)(void *,const char *,struct module *,unsigned long),void *data)
__module_put_and_exit  prototype  include/linux/module.h  449  extern void __module_put_and_exit(struct module *mod,long code)
module_put_and_exit  macro  include/linux/module.h  617  #define module_put_and_exit(code) do_exit(code)
module_refcount  prototype  include/linux/module.h  454  unsigned long module_refcount(struct module *mod);
__symbol_put  prototype  include/linux/module.h  455  void __symbol_put(const char *symbol);
symbol_put  macro  include/linux/module.h  548  #define symbol_put(x) do { } while(0)
symbol_put_addr  macro  include/linux/module.h  549  #define symbol_put_addr(x) do { } while(0)
__module_get  function  include/linux/module.h  551  static inline void __module_get(struct module *module)
try_module_get  function  include/linux/module.h  555  static inline int try_module_get(struct module *module)
module_put  function  include/linux/module.h  560  static inline void module_put(struct module *module)
ref_module  prototype  include/linux/module.h  484  int ref_module(struct module *a,struct module *b);
module_name  macro  include/linux/module.h  564  #define module_name(mod) "kernel"
module_address_lookup  function  include/linux/module.h  567  static inline const char *module_address_lookup(unsigned long addr,unsigned long *symbolsize,unsigned long *offset,char **modname,char *namebuf)
lookup_module_symbol_name  function  include/linux/module.h  576  static inline int lookup_module_symbol_name(unsigned long addr,char *symname)
lookup_module_symbol_attrs  function  include/linux/module.h  581  static inline int lookup_module_symbol_attrs(unsigned long addr,unsigned long *size,unsigned long *offset,char *modname,char *name)
search_module_extables  function  include/linux/module.h  516  search_module_extables(unsigned long addr)
register_module_notifier  function  include/linux/module.h  606  static inline int register_module_notifier(struct notifier_block * nb)
unregister_module_notifier  function  include/linux/module.h  612  static inline int unregister_module_notifier(struct notifier_block * nb)
print_modules  function  include/linux/module.h  619  static inline void print_modules(void)
symbol_request  macro  include/linux/module.h  630  #define symbol_request(x) try_then_request_module(symbol_get(x),"symbol:" #x)
__MODULE_STRING  macro  include/linux/module.h  634  #define __MODULE_STRING(x) __stringify(x)
set_all_modules_text_rw  function  include/linux/module.h  640  static inline void set_all_modules_text_rw(void) { }
set_all_modules_text_ro  function  include/linux/module.h  641  static inline void set_all_modules_text_ro(void) { }
module_bug_finalize  function  include/linux/module.h  651  static inline void module_bug_finalize(const Elf_Ehdr *hdr,const Elf_Shdr *sechdrs,struct module *mod)
module_bug_cleanup  function  include/linux/module.h  656  static inline void module_bug_cleanup(struct module *mod) {}
_LINUX_INTERRUPT_H  macro  include/linux/interrupt.h  3  #define _LINUX_INTERRUPT_H
IRQF_TRIGGER_NONE  macro  include/linux/interrupt.h  30  #define IRQF_TRIGGER_NONE 0x00000000
IRQF_TRIGGER_RISING  macro  include/linux/interrupt.h  31  #define IRQF_TRIGGER_RISING 0x00000001
IRQF_TRIGGER_FALLING  macro  include/linux/interrupt.h  32  #define IRQF_TRIGGER_FALLING 0x00000002
IRQF_TRIGGER_HIGH  macro  include/linux/interrupt.h  33  #define IRQF_TRIGGER_HIGH 0x00000004
IRQF_TRIGGER_LOW  macro  include/linux/interrupt.h  34  #define IRQF_TRIGGER_LOW 0x00000008
IRQF_TRIGGER_MASK  macro  include/linux/interrupt.h  35  #define IRQF_TRIGGER_MASK (IRQF_TRIGGER_HIGH | IRQF_TRIGGER_LOW | IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING)
IRQF_TRIGGER_PROBE  macro  include/linux/interrupt.h  37  #define IRQF_TRIGGER_PROBE 0x00000010
IRQF_DISABLED  macro  include/linux/interrupt.h  62  #define IRQF_DISABLED 0x00000020
IRQF_SHARED  macro  include/linux/interrupt.h  63  #define IRQF_SHARED 0x00000080
IRQF_PROBE_SHARED  macro  include/linux/interrupt.h  64  #define IRQF_PROBE_SHARED 0x00000100
__IRQF_TIMER  macro  include/linux/interrupt.h  65  #define __IRQF_TIMER 0x00000200
IRQF_PERCPU  macro  include/linux/interrupt.h  66  #define IRQF_PERCPU 0x00000400
IRQF_NOBALANCING  macro  include/linux/interrupt.h  67  #define IRQF_NOBALANCING 0x00000800
IRQF_IRQPOLL  macro  include/linux/interrupt.h  68  #define IRQF_IRQPOLL 0x00001000
IRQF_ONESHOT  macro  include/linux/interrupt.h  69  #define IRQF_ONESHOT 0x00002000
IRQF_NO_SUSPEND  macro  include/linux/interrupt.h  70  #define IRQF_NO_SUSPEND 0x00004000
IRQF_FORCE_RESUME  macro  include/linux/interrupt.h  71  #define IRQF_FORCE_RESUME 0x00008000
IRQF_NO_THREAD  macro  include/linux/interrupt.h  72  #define IRQF_NO_THREAD 0x00010000
IRQF_EARLY_RESUME  macro  include/linux/interrupt.h  73  #define IRQF_EARLY_RESUME 0x00020000
IRQF_TIMER  macro  include/linux/interrupt.h  75  #define IRQF_TIMER (__IRQF_TIMER | IRQF_NO_SUSPEND | IRQF_NO_THREAD)
irqaction  struct  include/linux/interrupt.h  106  struct irqaction { irq_handler_t handler; void *dev_id; void __percpu *percpu_dev_id; struct irqaction *next; irq_handler_t thread_fn; struct task_struct *thread; unsigned int irq; unsigned int flags; unsigned long thread_flags; unsigned long thread_mask; const char *name; struct proc_dir_entry *dir; } ____cacheline_internodealigned_in_smp;
no_action  prototype  include/linux/interrupt.h  121  extern irqreturn_t no_action(int cpl,void *dev_id);
request_threaded_irq  function  include/linux/interrupt.h  156  request_threaded_irq(unsigned int irq,irq_handler_t handler,irq_handler_t thread_fn,unsigned long flags, const char *name, void *dev)
request_irq  prototype  include/linux/interrupt.h  146  request_irq(unsigned int irq,irq_handler_t handler,unsigned long flags,const char *name, void *dev);
request_any_context_irq  function  include/linux/interrupt.h  164  request_any_context_irq(unsigned int irq,irq_handler_t handler,unsigned long flags, const char *name, void *dev_id)
request_percpu_irq  function  include/linux/interrupt.h  171  request_percpu_irq(unsigned int irq,irq_handler_t handler,const char *devname, void __percpu *percpu_dev_id)
free_irq  prototype  include/linux/interrupt.h  178  extern void free_irq(unsigned int,void *);
free_percpu_irq  prototype  include/linux/interrupt.h  179  extern void free_percpu_irq(unsigned int,void __percpu *);
devm_request_threaded_irq  prototype  include/linux/interrupt.h  184  devm_request_threaded_irq(struct device *dev,unsigned int irq,irq_handler_t handler, irq_handler_t thread_fn,unsigned long irqflags, const char *devname,void *dev_id);
devm_request_irq  function  include/linux/interrupt.h  190  devm_request_irq(struct device *dev,unsigned int irq,irq_handler_t handler,unsigned long irqflags, const char *devname, void *dev_id)
devm_free_irq  prototype  include/linux/interrupt.h  197  extern void devm_free_irq(struct device *dev,unsigned int irq,void *dev_id);
local_irq_enable_in_hardirq  macro  include/linux/interrupt.h  214  # define local_irq_enable_in_hardirq() local_irq_enable()
disable_irq_nosync  prototype  include/linux/interrupt.h  217  extern void disable_irq_nosync(unsigned int irq);
disable_irq  prototype  include/linux/interrupt.h  218  extern void disable_irq(unsigned int irq);
disable_percpu_irq  prototype  include/linux/interrupt.h  219  extern void disable_percpu_irq(unsigned int irq);
enable_irq  prototype  include/linux/interrupt.h  220  extern void enable_irq(unsigned int irq);
enable_percpu_irq  prototype  include/linux/interrupt.h  221  extern void enable_percpu_irq(unsigned int irq,unsigned int type);
suspend_device_irqs  function  include/linux/interrupt.h  233  static inline void suspend_device_irqs(void) { };
resume_device_irqs  function  include/linux/interrupt.h  234  static inline void resume_device_irqs(void) { };
check_wakeup_irqs  function  include/linux/interrupt.h  235  static inline int check_wakeup_irqs(void) { return 0; }
irq_set_affinity  function  include/linux/interrupt.h  273  static inline int irq_set_affinity(unsigned int irq,const struct cpumask *m)
irq_can_set_affinity  function  include/linux/interrupt.h  278  static inline int irq_can_set_affinity(unsigned int irq)
irq_select_affinity  function  include/linux/interrupt.h  283  static inline int irq_select_affinity(unsigned int irq) { return 0; }
irq_set_affinity_hint  function  include/linux/interrupt.h  285  static inline int irq_set_affinity_hint(unsigned int irq,const struct cpumask *m)
irq_affinity_notify  struct  include/linux/interrupt.h  260  struct irq_affinity_notify { unsigned int irq; struct kref kref; struct work_struct work; void (*notify)(struct irq_affinity_notify *, const cpumask_t *mask); void (*release)(struct kref *ref); };
irq_set_affinity_notifier  prototype  include/linux/interrupt.h  269  irq_set_affinity_notifier(unsigned int irq,struct irq_affinity_notify *notify);
disable_irq_nosync_lockdep  macro  include/linux/interrupt.h  364  # define disable_irq_nosync_lockdep(irq) disable_irq_nosync(irq)
disable_irq_nosync_lockdep_irqsave  macro  include/linux/interrupt.h  365  # define disable_irq_nosync_lockdep_irqsave(irq,flags) disable_irq_nosync(irq)
disable_irq_lockdep  macro  include/linux/interrupt.h  367  # define disable_irq_lockdep(irq) disable_irq(irq)
enable_irq_lockdep  macro  include/linux/interrupt.h  368  # define enable_irq_lockdep(irq) enable_irq(irq)
enable_irq_lockdep_irqrestore  macro  include/linux/interrupt.h  369  # define enable_irq_lockdep_irqrestore(irq,flags) enable_irq(irq)
irq_set_irq_wake  prototype  include/linux/interrupt.h  345  extern int irq_set_irq_wake(unsigned int irq,unsigned int on);
enable_irq_wake  function  include/linux/interrupt.h  373  static inline int enable_irq_wake(unsigned int irq)
disable_irq_wake  function  include/linux/interrupt.h  378  static inline int disable_irq_wake(unsigned int irq)
force_irqthreads  macro  include/linux/interrupt.h  388  #define force_irqthreads (0)
set_softirq_pending  macro  arch/x86/include/asm/hardirq.h  48  #define set_softirq_pending(x) this_cpu_write(irq_stat.__softirq_pending, (x))
or_softirq_pending  macro  arch/x86/include/asm/hardirq.h  50  #define or_softirq_pending(x) this_cpu_or(irq_stat.__softirq_pending,(x))
hard_irq_disable  macro  include/linux/interrupt.h  403  #define hard_irq_disable() do { } while(0)
SOFTIRQ_STOP_IDLE_MASK  macro  include/linux/interrupt.h  428  #define SOFTIRQ_STOP_IDLE_MASK (~(1 << RCU_SOFTIRQ))
softirq_action  struct  include/linux/interrupt.h  439  struct softirq_action { void (*action)(struct softirq_action *); };
do_softirq  prototype  include/linux/interrupt.h  444  asmlinkage void do_softirq(void);
__do_softirq  prototype  include/linux/interrupt.h  445  asmlinkage void __do_softirq(void);
open_softirq  prototype  include/linux/interrupt.h  446  extern void open_softirq(int nr,void (*action)(struct softirq_action *));
softirq_init  prototype  include/linux/interrupt.h  447  extern void softirq_init(void);
__raise_softirq_irqoff  prototype  include/linux/interrupt.h  448  extern void __raise_softirq_irqoff(unsigned int nr);
raise_softirq_irqoff  prototype  include/linux/interrupt.h  450  extern void raise_softirq_irqoff(unsigned int nr);
raise_softirq  prototype  include/linux/interrupt.h  451  extern void raise_softirq(unsigned int nr);
this_cpu_ksoftirqd  function  include/linux/interrupt.h  464  static inline struct task_struct *this_cpu_ksoftirqd(void)
send_remote_softirq  prototype  include/linux/interrupt.h  472  extern void send_remote_softirq(struct call_single_data *cp,int cpu,int softirq);
__send_remote_softirq  prototype  include/linux/interrupt.h  477  extern void __send_remote_softirq(struct call_single_data *cp,int cpu,int this_cpu, int softirq);
tasklet_struct  struct  include/linux/interrupt.h  500  struct tasklet_struct { struct tasklet_struct *next; unsigned long state; atomic_t count; void (*func)(unsigned long); unsigned long data; };
DECLARE_TASKLET  macro  include/linux/interrupt.h  509  #define DECLARE_TASKLET(name,func,data) struct tasklet_struct name = { NULL, 0, ATOMIC_INIT(0), func, data }
DECLARE_TASKLET_DISABLED  macro  include/linux/interrupt.h  512  #define DECLARE_TASKLET_DISABLED(name,func,data) struct tasklet_struct name = { NULL, 0, ATOMIC_INIT(1), func, data }
tasklet_trylock  macro  include/linux/interrupt.h  539  #define tasklet_trylock(t) 1
tasklet_unlock  macro  include/linux/interrupt.h  541  #define tasklet_unlock(t) do { } while (0)
tasklet_unlock_wait  macro  include/linux/interrupt.h  540  #define tasklet_unlock_wait(t) do { } while (0)
__tasklet_schedule  prototype  include/linux/interrupt.h  544  extern void __tasklet_schedule(struct tasklet_struct *t);
tasklet_schedule  function  include/linux/interrupt.h  546  static inline void tasklet_schedule(struct tasklet_struct *t)
__tasklet_hi_schedule  prototype  include/linux/interrupt.h  552  extern void __tasklet_hi_schedule(struct tasklet_struct *t);
tasklet_hi_schedule  function  include/linux/interrupt.h  554  static inline void tasklet_hi_schedule(struct tasklet_struct *t)
__tasklet_hi_schedule_first  prototype  include/linux/interrupt.h  560  extern void __tasklet_hi_schedule_first(struct tasklet_struct *t);
tasklet_hi_schedule_first  function  include/linux/interrupt.h  568  static inline void tasklet_hi_schedule_first(struct tasklet_struct *t)
tasklet_disable_nosync  function  include/linux/interrupt.h  575  static inline void tasklet_disable_nosync(struct tasklet_struct *t)
tasklet_disable  function  include/linux/interrupt.h  581  static inline void tasklet_disable(struct tasklet_struct *t)
tasklet_enable  function  include/linux/interrupt.h  588  static inline void tasklet_enable(struct tasklet_struct *t)
tasklet_hi_enable  function  include/linux/interrupt.h  594  static inline void tasklet_hi_enable(struct tasklet_struct *t)
tasklet_kill  prototype  include/linux/interrupt.h  600  extern void tasklet_kill(struct tasklet_struct *t);
tasklet_kill_immediate  prototype  include/linux/interrupt.h  601  extern void tasklet_kill_immediate(struct tasklet_struct *t,unsigned int cpu);
tasklet_init  prototype  include/linux/interrupt.h  602  extern void tasklet_init(struct tasklet_struct *t,void (*func)(unsigned long), unsigned long data);
tasklet_hrtimer  struct  include/linux/interrupt.h  605  struct tasklet_hrtimer { struct hrtimer timer; struct tasklet_struct tasklet; enum hrtimer_restart (*function)(struct hrtimer *); };
tasklet_hrtimer_init  prototype  include/linux/interrupt.h  612  tasklet_hrtimer_init(struct tasklet_hrtimer *ttimer,enum hrtimer_restart (*function)(struct hrtimer *),clockid_t which_clock, enum hrtimer_mode mode);
tasklet_hrtimer_start  function  include/linux/interrupt.h  617  int tasklet_hrtimer_start(struct tasklet_hrtimer *ttimer,ktime_t time,const enum hrtimer_mode mode)
tasklet_hrtimer_cancel  function  include/linux/interrupt.h  624  void tasklet_hrtimer_cancel(struct tasklet_hrtimer *ttimer)
probe_irq_on  prototype  include/linux/interrupt.h  672  extern unsigned long probe_irq_on(void);
probe_irq_off  prototype  include/linux/interrupt.h  673  extern int probe_irq_off(unsigned long);
probe_irq_mask  prototype  include/linux/interrupt.h  674  extern unsigned int probe_irq_mask(unsigned long);
init_irq_proc  function  include/linux/interrupt.h  681  static inline void init_irq_proc(void)
show_interrupts  prototype  include/linux/interrupt.h  687  int show_interrupts(struct seq_file *p,void *v);
arch_show_interrupts  prototype  include/linux/interrupt.h  688  int arch_show_interrupts(struct seq_file *p,int prec);
early_irq_init  prototype  include/linux/interrupt.h  690  extern int early_irq_init(void);
arch_probe_nr_irqs  prototype  include/linux/interrupt.h  691  extern int arch_probe_nr_irqs(void);
arch_early_irq_init  prototype  include/linux/interrupt.h  692  extern int arch_early_irq_init(void);
_LINUX_SLAB_H  macro  include/linux/slab.h  10  #define _LINUX_SLAB_H
SLAB_DEBUG_FREE  macro  include/linux/slab.h  21  #define SLAB_DEBUG_FREE 0x00000100UL
SLAB_RED_ZONE  macro  include/linux/slab.h  22  #define SLAB_RED_ZONE 0x00000400UL
SLAB_POISON  macro  include/linux/slab.h  23  #define SLAB_POISON 0x00000800UL
SLAB_HWCACHE_ALIGN  macro  include/linux/slab.h  24  #define SLAB_HWCACHE_ALIGN 0x00002000UL
SLAB_CACHE_DMA  macro  include/linux/slab.h  25  #define SLAB_CACHE_DMA 0x00004000UL
SLAB_STORE_USER  macro  include/linux/slab.h  26  #define SLAB_STORE_USER 0x00010000UL
SLAB_PANIC  macro  include/linux/slab.h  27  #define SLAB_PANIC 0x00040000UL
SLAB_DESTROY_BY_RCU  macro  include/linux/slab.h  56  #define SLAB_DESTROY_BY_RCU 0x00080000UL
SLAB_MEM_SPREAD  macro  include/linux/slab.h  57  #define SLAB_MEM_SPREAD 0x00100000UL
SLAB_TRACE  macro  include/linux/slab.h  58  #define SLAB_TRACE 0x00200000UL
SLAB_DEBUG_OBJECTS  macro  include/linux/slab.h  64  # define SLAB_DEBUG_OBJECTS 0x00000000UL
SLAB_NOLEAKTRACE  macro  include/linux/slab.h  67  #define SLAB_NOLEAKTRACE 0x00800000UL
SLAB_NOTRACK  macro  include/linux/slab.h  73  # define SLAB_NOTRACK 0x00000000UL
SLAB_FAILSLAB  macro  include/linux/slab.h  78  # define SLAB_FAILSLAB 0x00000000UL
SLAB_RECLAIM_ACCOUNT  macro  include/linux/slab.h  82  #define SLAB_RECLAIM_ACCOUNT 0x00020000UL
SLAB_TEMPORARY  macro  include/linux/slab.h  83  #define SLAB_TEMPORARY SLAB_RECLAIM_ACCOUNT
ZERO_SIZE_PTR  macro  include/linux/slab.h  92  #define ZERO_SIZE_PTR ((void *)16)
ZERO_OR_NULL_PTR  macro  include/linux/slab.h  94  #define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= (unsigned long)ZERO_SIZE_PTR)
kmem_cache  struct  include/linux/slab_def.h  24  struct kmem_cache { unsigned int batchcount; unsigned int limit; unsigned int shared; unsigned int size; u32 reciprocal_buffer_size; unsigned int flags; unsigned int num; unsigned int gfporder; gfp_t allocflags; size_t colour; unsigned int colour_off; struct kmem_cache *slabp_cache; unsigned int slab_size; void (*ctor)(void *obj); const char *name; struct list_head list; int refcount; int object_size; int align; unsigned long num_active; unsigned long num_allocations; unsigned long high_mark; unsigned long grown; unsigned long reaped; unsigned long errors; unsigned long max_freeable; unsigned long node_allocs; unsigned long node_frees; unsigned long node_overflow; atomic_t allochit; atomic_t allocmiss; atomic_t freehit; atomic_t freemiss; int obj_offset; struct memcg_cache_params *memcg_params; struct kmem_list3 **nodelists; struct array_cache *array[NR_CPUS + MAX_NUMNODES]; };
kmem_cache_init  prototype  include/linux/slab.h  125  void __init kmem_cache_init(void);
slab_is_available  prototype  include/linux/slab.h  126  int slab_is_available(void);
kmem_cache_create  prototype  include/linux/slab.h  128  struct kmem_cache *kmem_cache_create(const char *,size_t,size_t,unsigned long,void (*)(void *));
kmem_cache_create_memcg  prototype  include/linux/slab.h  132  kmem_cache_create_memcg(struct mem_cgroup *,const char *,size_t,size_t,unsigned long, void (*)(void *), struct kmem_cache *);
kmem_cache_destroy  prototype  include/linux/slab.h  134  void kmem_cache_destroy(struct kmem_cache *);
kmem_cache_shrink  prototype  include/linux/slab.h  135  int kmem_cache_shrink(struct kmem_cache *);
kmem_cache_free  prototype  include/linux/slab.h  136  void kmem_cache_free(struct kmem_cache *,void *);
KMEM_CACHE  macro  include/linux/slab.h  146  #define KMEM_CACHE(__struct,__flags) kmem_cache_create(#__struct, sizeof(struct __struct), __alignof__(struct __struct), (__flags), NULL)
KMALLOC_SHIFT_HIGH  macro  include/linux/slab.h  159  #define KMALLOC_SHIFT_HIGH ((MAX_ORDER + PAGE_SHIFT - 1) <= 25 ? (MAX_ORDER + PAGE_SHIFT - 1) : 25)
KMALLOC_MAX_SIZE  macro  include/linux/slab.h  162  #define KMALLOC_MAX_SIZE (1UL << KMALLOC_SHIFT_HIGH)
KMALLOC_MAX_ORDER  macro  include/linux/slab.h  163  #define KMALLOC_MAX_ORDER (KMALLOC_SHIFT_HIGH - PAGE_SHIFT)
ARCH_KMALLOC_MINALIGN  macro  include/linux/slab.h  173  #define ARCH_KMALLOC_MINALIGN __alignof__(unsigned long long)
ARCH_SLAB_MINALIGN  macro  include/linux/slab.h  182  #define ARCH_SLAB_MINALIGN __alignof__(unsigned long long)
memcg_cache_params  struct  include/linux/slab.h  206  struct memcg_cache_params { bool is_root_cache; union { struct kmem_cache *memcg_caches[0]; struct { struct mem_cgroup *memcg; struct list_head list; struct kmem_cache *root_cache; bool dead; atomic_t nr_pages; struct work_struct destroy; };
memcg_update_all_caches  prototype  include/linux/slab.h  221  int memcg_update_all_caches(int num_memcgs);
cache_show  prototype  include/linux/slab.h  224  int cache_show(struct kmem_cache *s,struct seq_file *m);
print_slabinfo_header  prototype  include/linux/slab.h  225  void print_slabinfo_header(struct seq_file *m);
__krealloc  prototype  include/linux/slab.h  230  void * __must_check __krealloc(const void *,size_t,gfp_t);
krealloc  prototype  include/linux/slab.h  231  void * __must_check krealloc(const void *,size_t,gfp_t);
kfree  prototype  include/linux/slab.h  232  void kfree(const void *);
kzfree  prototype  include/linux/slab.h  233  void kzfree(const void *);
ksize  prototype  include/linux/slab.h  234  size_t ksize(const void *);
kmalloc_array  function  include/linux/slab.h  314  static inline void *kmalloc_array(size_t n,size_t size,gfp_t flags)
kcalloc  function  include/linux/slab.h  327  static inline void *kcalloc(size_t n,size_t size,gfp_t flags)
kmalloc_node  function  include/linux/slab_def.h  184  static __always_inline void *kmalloc_node(size_t size,gfp_t flags,int node)
__kmalloc_node  prototype  include/linux/slab_def.h  165  extern void *__kmalloc_node(size_t size,gfp_t flags,int node);
kmem_cache_alloc  prototype  include/linux/slab_def.h  117  void *kmem_cache_alloc(struct kmem_cache *,gfp_t);
kmem_cache_alloc_node  prototype  include/linux/slab_def.h  166  extern void *kmem_cache_alloc_node(struct kmem_cache *,gfp_t flags,int node);
__kmalloc_track_caller  prototype  include/linux/slab.h  373  extern void *__kmalloc_track_caller(size_t,gfp_t,unsigned long);
kmalloc_track_caller  macro  include/linux/slab.h  377  #define kmalloc_track_caller(size,flags) __kmalloc(size, flags)
__kmalloc_node_track_caller  prototype  include/linux/slab.h  393  extern void *__kmalloc_node_track_caller(size_t,gfp_t,int,unsigned long);
kmalloc_node_track_caller  macro  include/linux/slab.h  404  #define kmalloc_node_track_caller(size,flags,node) kmalloc_track_caller(size, flags)
kmem_cache_zalloc  function  include/linux/slab.h  412  static inline void *kmem_cache_zalloc(struct kmem_cache *k,gfp_t flags)
kzalloc  function  include/linux/slab.h  422  static inline void *kzalloc(size_t size,gfp_t flags)
kzalloc_node  function  include/linux/slab.h  433  static inline void *kzalloc_node(size_t size,gfp_t flags,int node)
kmem_cache_size  function  include/linux/slab.h  441  static inline unsigned int kmem_cache_size(struct kmem_cache *s)
kmem_cache_init_late  prototype  include/linux/slab.h  446  void __init kmem_cache_init_late(void);
_LINUX_WORKQUEUE_H  macro  include/linux/workqueue.h  6  #define _LINUX_WORKQUEUE_H
delayed_work_timer_fn  prototype  include/linux/workqueue.h  19  void delayed_work_timer_fn(unsigned long __data);
work_data_bits  macro  include/linux/workqueue.h  25  #define work_data_bits(work) ((unsigned long *)(&(work)->data))
work_struct  struct  include/linux/workqueue.h  89  struct work_struct { atomic_long_t data; struct list_head entry; work_func_t func; struct lockdep_map lockdep_map; };
WORK_DATA_INIT  macro  include/linux/workqueue.h  98  #define WORK_DATA_INIT() ATOMIC_LONG_INIT(WORK_STRUCT_NO_CPU)
WORK_DATA_STATIC_INIT  macro  include/linux/workqueue.h  99  #define WORK_DATA_STATIC_INIT() ATOMIC_LONG_INIT(WORK_STRUCT_NO_CPU | WORK_STRUCT_STATIC)
delayed_work  struct  include/linux/workqueue.h  102  struct delayed_work { struct work_struct work; struct timer_list timer; int cpu; };
to_delayed_work  function  include/linux/workqueue.h  108  static inline struct delayed_work *to_delayed_work(struct work_struct *work)
execute_work  struct  include/linux/workqueue.h  113  struct execute_work { struct work_struct work; };
__WORK_INIT_LOCKDEP_MAP  macro  include/linux/workqueue.h  126  #define __WORK_INIT_LOCKDEP_MAP(n,k)
__WORK_INITIALIZER  macro  include/linux/workqueue.h  129  #define __WORK_INITIALIZER(n,f) { .data = WORK_DATA_STATIC_INIT(), .entry	= { &(n).entry, &(n).entry }, .func = (f), __WORK_INIT_LOCKDEP_MAP(#n, &(n)) }
__DELAYED_WORK_INITIALIZER  macro  include/linux/workqueue.h  136  #define __DELAYED_WORK_INITIALIZER(n,f,tflags) { .work = __WORK_INITIALIZER((n).work, (f)), .timer = __TIMER_INITIALIZER(delayed_work_timer_fn, 0, (unsigned long)&(n), (tflags) | TIMER_IRQSAFE), }
DECLARE_WORK  macro  include/linux/workqueue.h  143  #define DECLARE_WORK(n,f) struct work_struct n = __WORK_INITIALIZER(n, f)
DECLARE_DELAYED_WORK  macro  include/linux/workqueue.h  146  #define DECLARE_DELAYED_WORK(n,f) struct delayed_work n = __DELAYED_WORK_INITIALIZER(n, f, 0)
DECLARE_DEFERRABLE_WORK  macro  include/linux/workqueue.h  149  #define DECLARE_DEFERRABLE_WORK(n,f) struct delayed_work n = __DELAYED_WORK_INITIALIZER(n, f, TIMER_DEFERRABLE)
PREPARE_WORK  macro  include/linux/workqueue.h  155  #define PREPARE_WORK(_work,_func) do { (_work)->func = (_func); } while (0)
PREPARE_DELAYED_WORK  macro  include/linux/workqueue.h  160  #define PREPARE_DELAYED_WORK(_work,_func) PREPARE_WORK(&(_work)->work, (_func))
__init_work  function  include/linux/workqueue.h  171  static inline void __init_work(struct work_struct *work,int onstack) { }
destroy_work_on_stack  function  include/linux/workqueue.h  172  static inline void destroy_work_on_stack(struct work_struct *work) { }
work_static  function  include/linux/workqueue.h  173  static inline unsigned int work_static(struct work_struct *work) { return 0; }
__INIT_WORK  macro  include/linux/workqueue.h  195  #define __INIT_WORK(_work,_func,_onstack) do { __init_work((_work), _onstack); (_work)->data = (atomic_long_t) WORK_DATA_INIT(); INIT_LIST_HEAD(&(_work)->entry); PREPARE_WORK((_work), (_func)); } while (0)
INIT_WORK  macro  include/linux/workqueue.h  204  #define INIT_WORK(_work,_func) do { __INIT_WORK((_work), (_func), 0); } while (0)
INIT_WORK_ONSTACK  macro  include/linux/workqueue.h  209  #define INIT_WORK_ONSTACK(_work,_func) do { __INIT_WORK((_work), (_func), 1); } while (0)
__INIT_DELAYED_WORK  macro  include/linux/workqueue.h  214  #define __INIT_DELAYED_WORK(_work,_func,_tflags) do { INIT_WORK(&(_work)->work, (_func)); __setup_timer(&(_work)->timer, delayed_work_timer_fn, (unsigned long)(_work), (_tflags) | TIMER_IRQSAFE); } while (0)
__INIT_DELAYED_WORK_ONSTACK  macro  include/linux/workqueue.h  222  #define __INIT_DELAYED_WORK_ONSTACK(_work,_func,_tflags) do { INIT_WORK_ONSTACK(&(_work)->work, (_func)); __setup_timer_on_stack(&(_work)->timer, delayed_work_timer_fn, (unsigned long)(_work), (_tflags) | TIMER_IRQSAFE); } while (0)
INIT_DELAYED_WORK  macro  include/linux/workqueue.h  231  #define INIT_DELAYED_WORK(_work,_func) __INIT_DELAYED_WORK(_work, _func, 0)
INIT_DELAYED_WORK_ONSTACK  macro  include/linux/workqueue.h  234  #define INIT_DELAYED_WORK_ONSTACK(_work,_func) __INIT_DELAYED_WORK_ONSTACK(_work, _func, 0)
INIT_DEFERRABLE_WORK  macro  include/linux/workqueue.h  237  #define INIT_DEFERRABLE_WORK(_work,_func) __INIT_DELAYED_WORK(_work, _func, TIMER_DEFERRABLE)
INIT_DEFERRABLE_WORK_ONSTACK  macro  include/linux/workqueue.h  240  #define INIT_DEFERRABLE_WORK_ONSTACK(_work,_func) __INIT_DELAYED_WORK_ONSTACK(_work, _func, TIMER_DEFERRABLE)
work_pending  macro  include/linux/workqueue.h  247  #define work_pending(work) test_bit(WORK_STRUCT_PENDING_BIT, work_data_bits(work))
delayed_work_pending  macro  include/linux/workqueue.h  255  #define delayed_work_pending(w) work_pending(&(w)->work)
work_clear_pending  macro  include/linux/workqueue.h  262  #define work_clear_pending(work) clear_bit(WORK_STRUCT_PENDING_BIT, work_data_bits(work))
WQ_UNBOUND_MAX_ACTIVE  macro  include/linux/workqueue.h  286  #define WQ_UNBOUND_MAX_ACTIVE max_t(int, WQ_MAX_ACTIVE, num_possible_cpus() * WQ_MAX_UNBOUND_PER_CPU)
__system_nrt_wq  function  include/linux/workqueue.h  313  static inline struct workqueue_struct * __deprecated __system_nrt_wq(void)
__system_nrt_freezable_wq  function  include/linux/workqueue.h  318  static inline struct workqueue_struct * __deprecated __system_nrt_freezable_wq(void)
system_nrt_wq  macro  include/linux/workqueue.h  324  #define system_nrt_wq __system_nrt_wq()
system_nrt_freezable_wq  macro  include/linux/workqueue.h  325  #define system_nrt_freezable_wq __system_nrt_freezable_wq()
alloc_workqueue  macro  include/linux/workqueue.h  362  #define alloc_workqueue(fmt,flags,max_active,args...) __alloc_workqueue_key((fmt), (flags), (max_active), NULL, NULL, ##args)
alloc_ordered_workqueue  macro  include/linux/workqueue.h  380  #define alloc_ordered_workqueue(fmt,flags,args...) alloc_workqueue(fmt, WQ_UNBOUND | (flags), 1, ##args)
create_workqueue  macro  include/linux/workqueue.h  383  #define create_workqueue(name) alloc_workqueue((name), WQ_MEM_RECLAIM, 1)
create_freezable_workqueue  macro  include/linux/workqueue.h  385  #define create_freezable_workqueue(name) alloc_workqueue((name), WQ_FREEZABLE | WQ_UNBOUND | WQ_MEM_RECLAIM, 1)
create_singlethread_workqueue  macro  include/linux/workqueue.h  387  #define create_singlethread_workqueue(name) alloc_workqueue((name), WQ_UNBOUND | WQ_MEM_RECLAIM, 1)
destroy_workqueue  prototype  include/linux/workqueue.h  390  extern void destroy_workqueue(struct workqueue_struct *wq);
queue_work_on  prototype  include/linux/workqueue.h  392  extern bool queue_work_on(int cpu,struct workqueue_struct *wq,struct work_struct *work);
queue_work  prototype  include/linux/workqueue.h  394  extern bool queue_work(struct workqueue_struct *wq,struct work_struct *work);
queue_delayed_work_on  prototype  include/linux/workqueue.h  395  extern bool queue_delayed_work_on(int cpu,struct workqueue_struct *wq,struct delayed_work *work, unsigned long delay);
queue_delayed_work  prototype  include/linux/workqueue.h  397  extern bool queue_delayed_work(struct workqueue_struct *wq,struct delayed_work *work, unsigned long delay);
mod_delayed_work_on  prototype  include/linux/workqueue.h  399  extern bool mod_delayed_work_on(int cpu,struct workqueue_struct *wq,struct delayed_work *dwork, unsigned long delay);
mod_delayed_work  prototype  include/linux/workqueue.h  401  extern bool mod_delayed_work(struct workqueue_struct *wq,struct delayed_work *dwork, unsigned long delay);
flush_workqueue  prototype  include/linux/workqueue.h  404  extern void flush_workqueue(struct workqueue_struct *wq);
drain_workqueue  prototype  include/linux/workqueue.h  405  extern void drain_workqueue(struct workqueue_struct *wq);
flush_scheduled_work  prototype  include/linux/workqueue.h  406  extern void flush_scheduled_work(void);
schedule_work_on  prototype  include/linux/workqueue.h  408  extern bool schedule_work_on(int cpu,struct work_struct *work);
schedule_work  prototype  include/linux/workqueue.h  409  extern bool schedule_work(struct work_struct *work);
schedule_delayed_work_on  prototype  include/linux/workqueue.h  410  extern bool schedule_delayed_work_on(int cpu,struct delayed_work *work,unsigned long delay);
schedule_delayed_work  prototype  include/linux/workqueue.h  412  extern bool schedule_delayed_work(struct delayed_work *work,unsigned long delay);
schedule_on_each_cpu  prototype  include/linux/workqueue.h  414  extern int schedule_on_each_cpu(work_func_t func);
keventd_up  prototype  include/linux/workqueue.h  415  extern int keventd_up(void);
execute_in_process_context  prototype  include/linux/workqueue.h  417  int execute_in_process_context(work_func_t fn,struct execute_work *);
flush_work  prototype  include/linux/workqueue.h  419  extern bool flush_work(struct work_struct *work);
cancel_work_sync  prototype  include/linux/workqueue.h  420  extern bool cancel_work_sync(struct work_struct *work);
flush_delayed_work  prototype  include/linux/workqueue.h  422  extern bool flush_delayed_work(struct delayed_work *dwork);
cancel_delayed_work  prototype  include/linux/workqueue.h  423  extern bool cancel_delayed_work(struct delayed_work *dwork);
cancel_delayed_work_sync  prototype  include/linux/workqueue.h  424  extern bool cancel_delayed_work_sync(struct delayed_work *dwork);
workqueue_set_max_active  prototype  include/linux/workqueue.h  426  extern void workqueue_set_max_active(struct workqueue_struct *wq,int max_active);
workqueue_congested  prototype  include/linux/workqueue.h  428  extern bool workqueue_congested(unsigned int cpu,struct workqueue_struct *wq);
work_cpu  prototype  include/linux/workqueue.h  429  extern unsigned int work_cpu(struct work_struct *work);
work_busy  prototype  include/linux/workqueue.h  430  extern unsigned int work_busy(struct work_struct *work);
__cancel_delayed_work  function  include/linux/workqueue.h  437  static inline bool __deprecated __cancel_delayed_work(struct delayed_work *work)
flush_work_sync  function  include/linux/workqueue.h  448  static inline bool __deprecated flush_work_sync(struct work_struct *work)
flush_delayed_work_sync  function  include/linux/workqueue.h  454  static inline bool __deprecated flush_delayed_work_sync(struct delayed_work *dwork)
work_on_cpu  prototype  include/linux/workqueue.h  465  long work_on_cpu(unsigned int cpu,long (*fn)(void *),void *arg);
freeze_workqueues_begin  prototype  include/linux/workqueue.h  469  extern void freeze_workqueues_begin(void);
freeze_workqueues_busy  prototype  include/linux/workqueue.h  470  extern bool freeze_workqueues_busy(void);
thaw_workqueues  prototype  include/linux/workqueue.h  471  extern void thaw_workqueues(void);
LINUX_PCI_H  macro  include/linux/pci.h  17  #define LINUX_PCI_H
pci_slot  struct  include/linux/pci.h  39  struct pci_slot { struct pci_bus *bus; struct list_head list; struct hotplug_slot *hotplug; unsigned char number; struct kobject kobj; };
pci_slot_name  function  include/linux/pci.h  47  static inline const char *pci_slot_name(const struct pci_slot *slot)
pci_mmap_state  enum  include/linux/pci.h  53  enum pci_mmap_state { pci_mmap_io, pci_mmap_mem };
PCI_DMA_BIDIRECTIONAL  macro  include/linux/pci.h  59  #define PCI_DMA_BIDIRECTIONAL 0
PCI_DMA_TODEVICE  macro  include/linux/pci.h  60  #define PCI_DMA_TODEVICE 1
PCI_DMA_FROMDEVICE  macro  include/linux/pci.h  61  #define PCI_DMA_FROMDEVICE 2
PCI_DMA_NONE  macro  include/linux/pci.h  62  #define PCI_DMA_NONE 3
PCI_D0  macro  include/linux/pci.h  97  #define PCI_D0 ((pci_power_t __force) 0)
PCI_D1  macro  include/linux/pci.h  98  #define PCI_D1 ((pci_power_t __force) 1)
PCI_D2  macro  include/linux/pci.h  99  #define PCI_D2 ((pci_power_t __force) 2)
PCI_D3hot  macro  include/linux/pci.h  100  #define PCI_D3hot ((pci_power_t __force) 3)
PCI_D3cold  macro  include/linux/pci.h  101  #define PCI_D3cold ((pci_power_t __force) 4)
PCI_UNKNOWN  macro  include/linux/pci.h  102  #define PCI_UNKNOWN ((pci_power_t __force) 5)
PCI_POWER_ERROR  macro  include/linux/pci.h  103  #define PCI_POWER_ERROR ((pci_power_t __force) -1)
pci_power_name  function  include/linux/pci.h  108  static inline const char *pci_power_name(pci_power_t state)
PCI_PM_D2_DELAY  macro  include/linux/pci.h  113  #define PCI_PM_D2_DELAY 200
PCI_PM_D3_WAIT  macro  include/linux/pci.h  114  #define PCI_PM_D3_WAIT 10
PCI_PM_D3COLD_WAIT  macro  include/linux/pci.h  115  #define PCI_PM_D3COLD_WAIT 100
PCI_PM_BUS_WAIT  macro  include/linux/pci.h  116  #define PCI_PM_BUS_WAIT 50
pci_channel_state  enum  include/linux/pci.h  124  enum pci_channel_state { pci_channel_io_normal = (__force pci_channel_state_t) 1, pci_channel_io_frozen = (__force pci_channel_state_t) 2, pci_channel_io_perm_failure = (__force pci_channel_state_t) 3, };
pcie_reset_state  enum  include/linux/pci.h  137  enum pcie_reset_state { pcie_deassert_reset = (__force pcie_reset_state_t) 1, pcie_warm_reset = (__force pcie_reset_state_t) 2, pcie_hot_reset = (__force pcie_reset_state_t) 3 };
pci_dev_flags  enum  include/linux/pci.h  149  enum pci_dev_flags { PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG = (__force pci_dev_flags_t) 1, PCI_DEV_FLAGS_NO_D3 = (__force pci_dev_flags_t) 2, PCI_DEV_FLAGS_ASSIGNED = (__force pci_dev_flags_t) 4, };
pci_irq_reroute_variant  enum  include/linux/pci.h  160  enum pci_irq_reroute_variant { INTEL_IRQ_REROUTE_VARIANT = 1, MAX_IRQ_REROUTE_VARIANTS = 3 };
pci_bus_flags  enum  include/linux/pci.h  166  enum pci_bus_flags { PCI_BUS_FLAGS_NO_MSI = (__force pci_bus_flags_t) 1, PCI_BUS_FLAGS_NO_MMRBC = (__force pci_bus_flags_t) 2, };
pci_bus_speed  enum  include/linux/pci.h  172  enum pci_bus_speed { PCI_SPEED_33MHz = 0x00, PCI_SPEED_66MHz = 0x01, PCI_SPEED_66MHz_PCIX = 0x02, PCI_SPEED_100MHz_PCIX = 0x03, PCI_SPEED_133MHz_PCIX = 0x04, PCI_SPEED_66MHz_PCIX_ECC = 0x05, PCI_SPEED_100MHz_PCIX_ECC = 0x06, PCI_SPEED_133MHz_PCIX_ECC = 0x07, PCI_SPEED_66MHz_PCIX_266 = 0x09, PCI_SPEED_100MHz_PCIX_266 = 0x0a, PCI_SPEED_133MHz_PCIX_266 = 0x0b, AGP_UNKNOWN = 0x0c, AGP_1X = 0x0d, AGP_2X = 0x0e, AGP_4X = 0x0f, AGP_8X = 0x10, PCI_SPEED_66MHz_PCIX_533 = 0x11, PCI_SPEED_100MHz_PCIX_533 = 0x12, PCI_SPEED_133MHz_PCIX_533 = 0x13, PCIE_SPEED_2_5GT = 0x14, PCIE_SPEED_5_0GT = 0x15, PCIE_SPEED_8_0GT = 0x16, PCI_SPEED_UNKNOWN = 0xff, };
pci_cap_saved_data  struct  include/linux/pci.h  198  struct pci_cap_saved_data { char cap_nr; unsigned int size; u32 data[0]; };
pci_cap_saved_state  struct  include/linux/pci.h  204  struct pci_cap_saved_state { struct hlist_node next; struct pci_cap_saved_data cap; };
pci_dev  struct  include/linux/pci.h  217  struct pci_dev { struct list_head bus_list; struct pci_bus *bus; struct pci_bus *subordinate; void *sysdata; struct proc_dir_entry *procent; struct pci_slot *slot; unsigned int devfn; unsigned short vendor; unsigned short device; unsigned short subsystem_vendor; unsigned short subsystem_device; u8 revision; u8 hdr_type; u8 pcie_cap; u8 pcie_mpss:3; u8 rom_base_reg; u8 pin; u16 pcie_flags_reg; struct pci_driver *driver; u64 dma_mask; struct device_dma_parameters dma_parms; pci_power_t current_state; int pm_cap; unsigned int pme_support:5; unsigned int pme_interrupt:1; unsigned int pme_poll:1; unsigned int d1_support:1; unsigned int d2_support:1; unsigned int no_d1d2:1; unsigned int no_d3cold:1; unsigned int d3cold_allowed:1; unsigned int mmio_always_on:1; unsigned int wakeup_prepared:1; unsigned int runtime_d3cold:1; unsigned int d3_delay; unsigned int d3cold_delay; struct pcie_link_state *link_state; pci_channel_state_t error_state; struct device dev; int cfg_size; unsigned int irq; struct resource resource[DEVICE_COUNT_RESOURCE]; unsigned int transparent:1; unsigned int multifunction:1; unsigned int is_added:1; unsigned int is_busmaster:1; unsigned int no_msi:1; unsigned int block_cfg_access:1; unsigned int broken_parity_status:1; unsigned int irq_reroute_variant:2; unsigned int msi_enabled:1; unsigned int msix_enabled:1; unsigned int ari_enabled:1; unsigned int is_managed:1; unsigned int is_pcie:1; unsigned int needs_freset:1; unsigned int state_saved:1; unsigned int is_physfn:1; unsigned int is_virtfn:1; unsigned int reset_fn:1; unsigned int is_hotplug_bridge:1; unsigned int __aer_firmware_first_valid:1; unsigned int __aer_firmware_first:1; unsigned int broken_intx_masking:1; unsigned int io_window_1k:1; pci_dev_flags_t dev_flags; atomic_t enable_cnt; u32 saved_config_space[16]; struct hlist_head saved_cap_space; struct bin_attribute *rom_attr; int rom_attr_enabled; struct bin_attribute *res_attr[DEVICE_COUNT_RESOURCE]; struct bin_attribute *res_attr_wc[DEVICE_COUNT_RESOURCE]; struct list_head msi_list; struct kset *msi_kset; struct pci_vpd *vpd; struct pci_sriov *sriov; struct pci_dev *physfn; }; struct pci_ats *ats; phys_addr_t rom; size_t romlen; };
pci_physfn  function  include/linux/pci.h  340  static inline struct pci_dev *pci_physfn(struct pci_dev *dev)
alloc_pci_dev  prototype  include/linux/pci.h  350  extern struct pci_dev *alloc_pci_dev(void);
to_pci_dev  macro  include/linux/pci.h  352  #define to_pci_dev(n) container_of(n,struct pci_dev,dev)
for_each_pci_dev  macro  include/linux/pci.h  353  #define for_each_pci_dev(d) while ((d = pci_get_device(PCI_ANY_ID,PCI_ANY_ID,d)) != NULL)
pci_channel_offline  function  include/linux/pci.h  355  static inline int pci_channel_offline(struct pci_dev *pdev)
pci_host_bridge_window  struct  include/linux/pci.h  362  struct pci_host_bridge_window { struct list_head list; struct resource *res; resource_size_t offset; };
pci_host_bridge  struct  include/linux/pci.h  368  struct pci_host_bridge { struct device dev; struct pci_bus *bus; struct list_head windows; void (*release_fn)(struct pci_host_bridge *); void *release_data; };
to_pci_host_bridge  macro  include/linux/pci.h  376  #define to_pci_host_bridge(n) container_of(n,struct pci_host_bridge,dev)
pci_set_host_bridge_release  prototype  include/linux/pci.h  377  void pci_set_host_bridge_release(struct pci_host_bridge *bridge,void (*release_fn)(struct pci_host_bridge *),void *release_data);
PCI_SUBTRACTIVE_DECODE  macro  include/linux/pci.h  394  #define PCI_SUBTRACTIVE_DECODE 0x1
pci_bus_resource  struct  include/linux/pci.h  396  struct pci_bus_resource { struct list_head list; struct resource *res; unsigned int flags; };
PCI_REGION_FLAG_MASK  macro  include/linux/pci.h  402  #define PCI_REGION_FLAG_MASK 0x0fU
pci_bus  struct  include/linux/pci.h  404  struct pci_bus { struct list_head node; struct pci_bus *parent; struct list_head children; struct list_head devices; struct pci_dev *self; struct list_head slots; struct resource *resource[PCI_BRIDGE_RESOURCE_NUM]; struct list_head resources; struct resource busn_res; struct pci_ops *ops; void *sysdata; struct proc_dir_entry *procdir; unsigned char number; unsigned char primary; unsigned char max_bus_speed; unsigned char cur_bus_speed; char name[48]; unsigned short bridge_ctl; pci_bus_flags_t bus_flags; struct device *bridge; struct device dev; struct bin_attribute *legacy_io; struct bin_attribute *legacy_mem; unsigned int is_added:1; };
pci_bus_b  macro  include/linux/pci.h  435  #define pci_bus_b(n) list_entry(n,struct pci_bus,node)
to_pci_bus  macro  include/linux/pci.h  436  #define to_pci_bus(n) container_of(n,struct pci_bus,dev)
pci_is_root_bus  function  include/linux/pci.h  442  static inline bool pci_is_root_bus(struct pci_bus *pbus)
pci_dev_msi_enabled  function  include/linux/pci.h  453  static inline bool pci_dev_msi_enabled(struct pci_dev *pci_dev) { return false; }
PCIBIOS_SUCCESSFUL  macro  include/linux/pci.h  459  #define PCIBIOS_SUCCESSFUL 0x00
PCIBIOS_FUNC_NOT_SUPPORTED  macro  include/linux/pci.h  460  #define PCIBIOS_FUNC_NOT_SUPPORTED 0x81
PCIBIOS_BAD_VENDOR_ID  macro  include/linux/pci.h  461  #define PCIBIOS_BAD_VENDOR_ID 0x83
PCIBIOS_DEVICE_NOT_FOUND  macro  include/linux/pci.h  462  #define PCIBIOS_DEVICE_NOT_FOUND 0x86
PCIBIOS_BAD_REGISTER_NUMBER  macro  include/linux/pci.h  463  #define PCIBIOS_BAD_REGISTER_NUMBER 0x87
PCIBIOS_SET_FAILED  macro  include/linux/pci.h  464  #define PCIBIOS_SET_FAILED 0x88
PCIBIOS_BUFFER_TOO_SMALL  macro  include/linux/pci.h  465  #define PCIBIOS_BUFFER_TOO_SMALL 0x89
pcibios_err_to_errno  function  include/linux/pci.h  470  static inline int pcibios_err_to_errno(int err)
pci_ops  struct  include/linux/pci.h  495  struct pci_ops { int (*read)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 *val); int (*write)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 val); };
raw_pci_read  prototype  include/linux/pci.h  504  extern int raw_pci_read(unsigned int domain,unsigned int bus,unsigned int devfn, int reg, int len, u32 *val);
raw_pci_write  prototype  include/linux/pci.h  506  extern int raw_pci_write(unsigned int domain,unsigned int bus,unsigned int devfn, int reg, int len, u32 val);
pci_bus_region  struct  include/linux/pci.h  509  struct pci_bus_region { resource_size_t start; resource_size_t end; };
pci_dynids  struct  include/linux/pci.h  514  struct pci_dynids { spinlock_t lock; struct list_head list; };
pci_ers_result  enum  include/linux/pci.h  528  enum pci_ers_result { PCI_ERS_RESULT_NONE = (__force pci_ers_result_t) 1, PCI_ERS_RESULT_CAN_RECOVER = (__force pci_ers_result_t) 2, PCI_ERS_RESULT_NEED_RESET = (__force pci_ers_result_t) 3, PCI_ERS_RESULT_DISCONNECT = (__force pci_ers_result_t) 4, PCI_ERS_RESULT_RECOVERED = (__force pci_ers_result_t) 5, PCI_ERS_RESULT_NO_AER_DRIVER = (__force pci_ers_result_t) 6, };
pci_error_handlers  struct  include/linux/pci.h  549  struct pci_error_handlers { pci_ers_result_t (*error_detected)(struct pci_dev *dev,enum pci_channel_state error); pci_ers_result_t (*mmio_enabled)(struct pci_dev *dev); pci_ers_result_t (*link_reset)(struct pci_dev *dev); pci_ers_result_t (*slot_reset)(struct pci_dev *dev); void (*resume)(struct pci_dev *dev); };
pci_driver  struct  include/linux/pci.h  570  struct pci_driver { struct list_head node; const char *name; const struct pci_device_id *id_table; int (*probe) (struct pci_dev *dev, const struct pci_device_id *id); void (*remove) (struct pci_dev *dev); int (*suspend) (struct pci_dev *dev, pm_message_t state); int (*suspend_late) (struct pci_dev *dev, pm_message_t state); int (*resume_early) (struct pci_dev *dev); int (*resume) (struct pci_dev *dev); void (*shutdown) (struct pci_dev *dev); int (*sriov_configure) (struct pci_dev *dev, int num_vfs); const struct pci_error_handlers *err_handler; struct device_driver driver; struct pci_dynids dynids; };
to_pci_driver  macro  include/linux/pci.h  587  #define to_pci_driver(drv) container_of(drv,struct pci_driver,driver)
DEFINE_PCI_DEVICE_TABLE  macro  include/linux/pci.h  596  #define DEFINE_PCI_DEVICE_TABLE(_table) const struct pci_device_id _table[]
PCI_DEVICE  macro  include/linux/pci.h  608  #define PCI_DEVICE(vend,dev) .vendor = (vend), .device = (dev), .subvendor = PCI_ANY_ID, .subdevice = PCI_ANY_ID
PCI_DEVICE_SUB  macro  include/linux/pci.h  622  #define PCI_DEVICE_SUB(vend,dev,subvend,subdev) .vendor = (vend), .device = (dev), .subvendor = (subvend), .subdevice = (subdev)
PCI_DEVICE_CLASS  macro  include/linux/pci.h  635  #define PCI_DEVICE_CLASS(dev_class,dev_class_mask) .class = (dev_class), .class_mask = (dev_class_mask), .vendor = PCI_ANY_ID, .device = PCI_ANY_ID, .subvendor = PCI_ANY_ID, .subdevice = PCI_ANY_ID
PCI_VDEVICE  macro  include/linux/pci.h  651  #define PCI_VDEVICE(vendor,device) PCI_VENDOR_ID_##vendor, (device), PCI_ANY_ID, PCI_ANY_ID, 0, 0
pcie_bus_configure_settings  prototype  include/linux/pci.h  658  extern void pcie_bus_configure_settings(struct pci_bus *bus,u8 smpss);
pcie_bus_config_types  enum  include/linux/pci.h  660  enum pcie_bus_config_types { PCIE_BUS_TUNE_OFF, PCIE_BUS_SAFE, PCIE_BUS_PERFORMANCE, PCIE_BUS_PEER2PEER, };
no_pci_devices  macro  include/linux/pci.h  1260  #define no_pci_devices() (1)
pcibios_fixup_bus  prototype  include/linux/pci.h  677  void pcibios_fixup_bus(struct pci_bus *);
pcibios_enable_device  prototype  include/linux/pci.h  678  int __must_check pcibios_enable_device(struct pci_dev *,int mask);
pcibios_setup  prototype  include/linux/pci.h  680  char *pcibios_setup(char *str);
pcibios_align_resource  prototype  include/linux/pci.h  683  resource_size_t pcibios_align_resource(void *,const struct resource *,resource_size_t,resource_size_t);
pcibios_update_irq  prototype  include/linux/pci.h  686  void pcibios_update_irq(struct pci_dev *,int irq);
pci_fixup_cardbus  prototype  include/linux/pci.h  689  void pci_fixup_cardbus(struct pci_bus *);
pcibios_resource_to_bus  prototype  include/linux/pci.h  693  void pcibios_resource_to_bus(struct pci_dev *dev,struct pci_bus_region *region,struct resource *res);
pcibios_bus_to_resource  prototype  include/linux/pci.h  695  void pcibios_bus_to_resource(struct pci_dev *dev,struct resource *res,struct pci_bus_region *region);
pcibios_scan_specific_bus  prototype  include/linux/pci.h  697  void pcibios_scan_specific_bus(int busn);
pci_find_bus  prototype  include/linux/pci.h  698  extern struct pci_bus *pci_find_bus(int domain,int busnr);
pci_bus_add_devices  prototype  include/linux/pci.h  699  void pci_bus_add_devices(const struct pci_bus *bus);
pci_scan_bus_parented  prototype  include/linux/pci.h  700  struct pci_bus *pci_scan_bus_parented(struct device *parent,int bus,struct pci_ops *ops, void *sysdata);
pci_scan_bus  prototype  include/linux/pci.h  702  struct pci_bus *pci_scan_bus(int bus,struct pci_ops *ops,void *sysdata);
pci_create_root_bus  prototype  include/linux/pci.h  703  struct pci_bus *pci_create_root_bus(struct device *parent,int bus,struct pci_ops *ops, void *sysdata,struct list_head *resources);
pci_bus_insert_busn_res  prototype  include/linux/pci.h  706  int pci_bus_insert_busn_res(struct pci_bus *b,int bus,int busmax);
pci_bus_update_busn_res_end  prototype  include/linux/pci.h  707  int pci_bus_update_busn_res_end(struct pci_bus *b,int busmax);
pci_bus_release_busn_res  prototype  include/linux/pci.h  708  void pci_bus_release_busn_res(struct pci_bus *b);
pci_scan_root_bus  prototype  include/linux/pci.h  709  struct pci_bus *pci_scan_root_bus(struct device *parent,int bus,struct pci_ops *ops, void *sysdata,struct list_head *resources);
pci_add_new_bus  prototype  include/linux/pci.h  712  struct pci_bus *pci_add_new_bus(struct pci_bus *parent,struct pci_dev *dev,int busnr);
pcie_update_link_speed  prototype  include/linux/pci.h  714  void pcie_update_link_speed(struct pci_bus *bus,u16 link_status);
pci_create_slot  prototype  include/linux/pci.h  715  struct pci_slot *pci_create_slot(struct pci_bus *parent,int slot_nr,const char *name,struct hotplug_slot *hotplug);
pci_destroy_slot  prototype  include/linux/pci.h  718  void pci_destroy_slot(struct pci_slot *slot);
pci_renumber_slot  prototype  include/linux/pci.h  719  void pci_renumber_slot(struct pci_slot *slot,int slot_nr);
pci_scan_slot  prototype  include/linux/pci.h  720  int pci_scan_slot(struct pci_bus *bus,int devfn);
pci_scan_single_device  prototype  include/linux/pci.h  721  struct pci_dev *pci_scan_single_device(struct pci_bus *bus,int devfn);
pci_device_add  prototype  include/linux/pci.h  722  void pci_device_add(struct pci_dev *dev,struct pci_bus *bus);
pci_scan_child_bus  prototype  include/linux/pci.h  723  unsigned int pci_scan_child_bus(struct pci_bus *bus);
pci_bus_add_device  prototype  include/linux/pci.h  724  int __must_check pci_bus_add_device(struct pci_dev *dev);
pci_read_bridge_bases  prototype  include/linux/pci.h  725  void pci_read_bridge_bases(struct pci_bus *child);
pci_find_parent_resource  prototype  include/linux/pci.h  726  struct resource *pci_find_parent_resource(const struct pci_dev *dev,struct resource *res);
pci_swizzle_interrupt_pin  prototype  include/linux/pci.h  728  u8 pci_swizzle_interrupt_pin(const struct pci_dev *dev,u8 pin);
pci_get_interrupt_pin  prototype  include/linux/pci.h  729  int pci_get_interrupt_pin(struct pci_dev *dev,struct pci_dev **bridge);
pci_common_swizzle  prototype  include/linux/pci.h  730  u8 pci_common_swizzle(struct pci_dev *dev,u8 *pinp);
pci_dev_get  function  include/linux/pci.h  1412  static inline struct pci_dev *pci_dev_get(struct pci_dev *dev)
pci_dev_put  macro  include/linux/pci.h  1261  #define pci_dev_put(dev) do { } while (0)
pci_remove_bus  prototype  include/linux/pci.h  733  extern void pci_remove_bus(struct pci_bus *b);
pci_stop_and_remove_bus_device  prototype  include/linux/pci.h  734  extern void pci_stop_and_remove_bus_device(struct pci_dev *dev);
pci_stop_root_bus  prototype  include/linux/pci.h  735  void pci_stop_root_bus(struct pci_bus *bus);
pci_remove_root_bus  prototype  include/linux/pci.h  736  void pci_remove_root_bus(struct pci_bus *bus);
pci_setup_cardbus  prototype  include/linux/pci.h  737  void pci_setup_cardbus(struct pci_bus *bus);
pci_sort_breadthfirst  prototype  include/linux/pci.h  738  extern void pci_sort_breadthfirst(void);
dev_is_pci  macro  include/linux/pci.h  1415  #define dev_is_pci(d) (false)
dev_is_pf  macro  include/linux/pci.h  1416  #define dev_is_pf(d) (false)
dev_num_vf  macro  include/linux/pci.h  1417  #define dev_num_vf(d) (0)
pci_lost_interrupt_reason  enum  include/linux/pci.h  745  enum pci_lost_interrupt_reason { PCI_LOST_IRQ_NO_INFORMATION = 0, PCI_LOST_IRQ_DISABLE_MSI, PCI_LOST_IRQ_DISABLE_MSIX, PCI_LOST_IRQ_DISABLE_ACPI, };
pci_lost_interrupt  prototype  include/linux/pci.h  751  enum pci_lost_interrupt_reason pci_lost_interrupt(struct pci_dev *dev);
pci_find_capability  function  include/linux/pci.h  1315  static inline int pci_find_capability(struct pci_dev *dev,int cap)
pci_find_next_capability  function  include/linux/pci.h  1320  static inline int pci_find_next_capability(struct pci_dev *dev,u8 post,int cap)
pci_find_ext_capability  function  include/linux/pci.h  1326  static inline int pci_find_ext_capability(struct pci_dev *dev,int cap)
pci_find_next_ext_capability  prototype  include/linux/pci.h  755  int pci_find_next_ext_capability(struct pci_dev *dev,int pos,int cap);
pci_find_ht_capability  prototype  include/linux/pci.h  756  int pci_find_ht_capability(struct pci_dev *dev,int ht_cap);
pci_find_next_ht_capability  prototype  include/linux/pci.h  757  int pci_find_next_ht_capability(struct pci_dev *dev,int pos,int ht_cap);
pci_find_next_bus  function  include/linux/pci.h  1398  static inline struct pci_bus *pci_find_next_bus(const struct pci_bus *from)
pci_get_device  function  include/linux/pci.h  1237  static inline struct pci_dev *pci_get_device(unsigned int vendor,unsigned int device,struct pci_dev *from)
pci_get_subsys  function  include/linux/pci.h  1244  static inline struct pci_dev *pci_get_subsys(unsigned int vendor,unsigned int device,unsigned int ss_vendor,unsigned int ss_device,struct pci_dev *from)
pci_get_slot  function  include/linux/pci.h  1401  static inline struct pci_dev *pci_get_slot(struct pci_bus *bus,unsigned int devfn)
pci_get_domain_bus_and_slot  prototype  include/linux/pci.h  766  struct pci_dev *pci_get_domain_bus_and_slot(int domain,unsigned int bus,unsigned int devfn);
pci_get_bus_and_slot  function  include/linux/pci.h  1405  static inline struct pci_dev *pci_get_bus_and_slot(unsigned int bus,unsigned int devfn)
pci_get_class  function  include/linux/pci.h  1253  static inline struct pci_dev *pci_get_class(unsigned int class,struct pci_dev *from)
pci_dev_present  macro  include/linux/pci.h  1259  #define pci_dev_present(ids) (0)
pci_bus_read_config_byte  prototype  include/linux/pci.h  776  int pci_bus_read_config_byte(struct pci_bus *bus,unsigned int devfn,int where, u8 *val);
pci_bus_read_config_word  prototype  include/linux/pci.h  778  int pci_bus_read_config_word(struct pci_bus *bus,unsigned int devfn,int where, u16 *val);
pci_bus_read_config_dword  prototype  include/linux/pci.h  780  int pci_bus_read_config_dword(struct pci_bus *bus,unsigned int devfn,int where, u32 *val);
pci_bus_write_config_byte  prototype  include/linux/pci.h  782  int pci_bus_write_config_byte(struct pci_bus *bus,unsigned int devfn,int where, u8 val);
pci_bus_write_config_word  prototype  include/linux/pci.h  784  int pci_bus_write_config_word(struct pci_bus *bus,unsigned int devfn,int where, u16 val);
pci_bus_write_config_dword  prototype  include/linux/pci.h  786  int pci_bus_write_config_dword(struct pci_bus *bus,unsigned int devfn,int where, u32 val);
pci_bus_set_ops  prototype  include/linux/pci.h  788  struct pci_ops *pci_bus_set_ops(struct pci_bus *bus,struct pci_ops *ops);
pci_read_config_byte  function  include/linux/pci.h  790  static inline int pci_read_config_byte(const struct pci_dev *dev,int where,u8 *val)
pci_read_config_word  function  include/linux/pci.h  794  static inline int pci_read_config_word(const struct pci_dev *dev,int where,u16 *val)
pci_read_config_dword  function  include/linux/pci.h  798  static inline int pci_read_config_dword(const struct pci_dev *dev,int where,u32 *val)
pci_write_config_byte  function  include/linux/pci.h  803  static inline int pci_write_config_byte(const struct pci_dev *dev,int where,u8 val)
pci_write_config_word  function  include/linux/pci.h  807  static inline int pci_write_config_word(const struct pci_dev *dev,int where,u16 val)
pci_write_config_dword  function  include/linux/pci.h  811  static inline int pci_write_config_dword(const struct pci_dev *dev,int where,u32 val)
pcie_capability_read_word  prototype  include/linux/pci.h  817  int pcie_capability_read_word(struct pci_dev *dev,int pos,u16 *val);
pcie_capability_read_dword  prototype  include/linux/pci.h  818  int pcie_capability_read_dword(struct pci_dev *dev,int pos,u32 *val);
pcie_capability_write_word  prototype  include/linux/pci.h  819  int pcie_capability_write_word(struct pci_dev *dev,int pos,u16 val);
pcie_capability_write_dword  prototype  include/linux/pci.h  820  int pcie_capability_write_dword(struct pci_dev *dev,int pos,u32 val);
pcie_capability_clear_and_set_word  prototype  include/linux/pci.h  821  int pcie_capability_clear_and_set_word(struct pci_dev *dev,int pos,u16 clear, u16 set);
pcie_capability_clear_and_set_dword  prototype  include/linux/pci.h  823  int pcie_capability_clear_and_set_dword(struct pci_dev *dev,int pos,u32 clear, u32 set);
pcie_capability_set_word  function  include/linux/pci.h  826  static inline int pcie_capability_set_word(struct pci_dev *dev,int pos,u16 set)
pcie_capability_set_dword  function  include/linux/pci.h  832  static inline int pcie_capability_set_dword(struct pci_dev *dev,int pos,u32 set)
pcie_capability_clear_word  function  include/linux/pci.h  838  static inline int pcie_capability_clear_word(struct pci_dev *dev,int pos,u16 clear)
pcie_capability_clear_dword  function  include/linux/pci.h  844  static inline int pcie_capability_clear_dword(struct pci_dev *dev,int pos,u32 clear)
pci_user_read_config_byte  prototype  include/linux/pci.h  851  int pci_user_read_config_byte(struct pci_dev *dev,int where,u8 *val);
pci_user_read_config_word  prototype  include/linux/pci.h  852  int pci_user_read_config_word(struct pci_dev *dev,int where,u16 *val);
pci_user_read_config_dword  prototype  include/linux/pci.h  853  int pci_user_read_config_dword(struct pci_dev *dev,int where,u32 *val);
pci_user_write_config_byte  prototype  include/linux/pci.h  854  int pci_user_write_config_byte(struct pci_dev *dev,int where,u8 val);
pci_user_write_config_word  prototype  include/linux/pci.h  855  int pci_user_write_config_word(struct pci_dev *dev,int where,u16 val);
pci_user_write_config_dword  prototype  include/linux/pci.h  856  int pci_user_write_config_dword(struct pci_dev *dev,int where,u32 val);
pci_enable_device  function  include/linux/pci.h  1266  static inline int pci_enable_device(struct pci_dev *dev)
pci_enable_device_io  prototype  include/linux/pci.h  859  int __must_check pci_enable_device_io(struct pci_dev *dev);
pci_enable_device_mem  prototype  include/linux/pci.h  860  int __must_check pci_enable_device_mem(struct pci_dev *dev);
pci_reenable_device  prototype  include/linux/pci.h  861  int __must_check pci_reenable_device(struct pci_dev *);
pcim_enable_device  prototype  include/linux/pci.h  862  int __must_check pcim_enable_device(struct pci_dev *pdev);
pcim_pin_device  prototype  include/linux/pci.h  863  void pcim_pin_device(struct pci_dev *pdev);
pci_is_enabled  function  include/linux/pci.h  865  static inline int pci_is_enabled(struct pci_dev *pdev)
pci_is_managed  function  include/linux/pci.h  870  static inline int pci_is_managed(struct pci_dev *pdev)
pci_disable_device  function  include/linux/pci.h  1271  static inline void pci_disable_device(struct pci_dev *dev)
pci_set_master  function  include/linux/pci.h  1263  static inline void pci_set_master(struct pci_dev *dev)
pci_clear_master  prototype  include/linux/pci.h  879  void pci_clear_master(struct pci_dev *dev);
pci_set_pcie_reset_state  prototype  include/linux/pci.h  881  int pci_set_pcie_reset_state(struct pci_dev *dev,enum pcie_reset_state state);
pci_set_cacheline_size  prototype  include/linux/pci.h  882  int pci_set_cacheline_size(struct pci_dev *dev);
HAVE_PCI_SET_MWI  macro  include/linux/pci.h  883  #define HAVE_PCI_SET_MWI
pci_set_mwi  prototype  include/linux/pci.h  884  int __must_check pci_set_mwi(struct pci_dev *dev);
pci_try_set_mwi  prototype  include/linux/pci.h  885  int pci_try_set_mwi(struct pci_dev *dev);
pci_clear_mwi  prototype  include/linux/pci.h  886  void pci_clear_mwi(struct pci_dev *dev);
pci_intx  prototype  include/linux/pci.h  887  void pci_intx(struct pci_dev *dev,int enable);
pci_intx_mask_supported  prototype  include/linux/pci.h  888  bool pci_intx_mask_supported(struct pci_dev *dev);
pci_check_and_mask_intx  prototype  include/linux/pci.h  889  bool pci_check_and_mask_intx(struct pci_dev *dev);
pci_check_and_unmask_intx  prototype  include/linux/pci.h  890  bool pci_check_and_unmask_intx(struct pci_dev *dev);
pci_msi_off  prototype  include/linux/pci.h  891  void pci_msi_off(struct pci_dev *dev);
pci_set_dma_max_seg_size  function  include/linux/pci.h  1284  static inline int pci_set_dma_max_seg_size(struct pci_dev *dev,unsigned int size)
pci_set_dma_seg_boundary  function  include/linux/pci.h  1290  static inline int pci_set_dma_seg_boundary(struct pci_dev *dev,unsigned long mask)
pcix_get_max_mmrbc  prototype  include/linux/pci.h  894  int pcix_get_max_mmrbc(struct pci_dev *dev);
pcix_get_mmrbc  prototype  include/linux/pci.h  895  int pcix_get_mmrbc(struct pci_dev *dev);
pcix_set_mmrbc  prototype  include/linux/pci.h  896  int pcix_set_mmrbc(struct pci_dev *dev,int mmrbc);
pcie_get_readrq  prototype  include/linux/pci.h  897  int pcie_get_readrq(struct pci_dev *dev);
pcie_set_readrq  prototype  include/linux/pci.h  898  int pcie_set_readrq(struct pci_dev *dev,int rq);
pcie_get_mps  prototype  include/linux/pci.h  899  int pcie_get_mps(struct pci_dev *dev);
pcie_set_mps  prototype  include/linux/pci.h  900  int pcie_set_mps(struct pci_dev *dev,int mps);
__pci_reset_function  prototype  include/linux/pci.h  901  int __pci_reset_function(struct pci_dev *dev);
__pci_reset_function_locked  prototype  include/linux/pci.h  902  int __pci_reset_function_locked(struct pci_dev *dev);
pci_reset_function  prototype  include/linux/pci.h  903  int pci_reset_function(struct pci_dev *dev);
pci_update_resource  prototype  include/linux/pci.h  904  void pci_update_resource(struct pci_dev *dev,int resno);
pci_assign_resource  function  include/linux/pci.h  1296  static inline int pci_assign_resource(struct pci_dev *dev,int i)
pci_reassign_resource  prototype  include/linux/pci.h  906  int __must_check pci_reassign_resource(struct pci_dev *dev,int i,resource_size_t add_size,resource_size_t align);
pci_select_bars  prototype  include/linux/pci.h  907  int pci_select_bars(struct pci_dev *dev,unsigned long flags);
pci_enable_rom  prototype  include/linux/pci.h  910  int pci_enable_rom(struct pci_dev *pdev);
pci_disable_rom  prototype  include/linux/pci.h  911  void pci_disable_rom(struct pci_dev *pdev);
pci_map_rom  prototype  include/linux/pci.h  912  void __iomem __must_check *pci_map_rom(struct pci_dev *pdev,size_t *size);
pci_unmap_rom  prototype  include/linux/pci.h  913  void pci_unmap_rom(struct pci_dev *pdev,void __iomem *rom);
pci_get_rom_size  prototype  include/linux/pci.h  914  size_t pci_get_rom_size(struct pci_dev *pdev,void __iomem *rom,size_t size);
pci_save_state  function  include/linux/pci.h  1332  static inline int pci_save_state(struct pci_dev *dev)
pci_restore_state  function  include/linux/pci.h  1337  static inline void pci_restore_state(struct pci_dev *dev)
pci_store_saved_state  prototype  include/linux/pci.h  919  struct pci_saved_state *pci_store_saved_state(struct pci_dev *dev);
pci_load_saved_state  prototype  include/linux/pci.h  920  int pci_load_saved_state(struct pci_dev *dev,struct pci_saved_state *state);
pci_load_and_free_saved_state  prototype  include/linux/pci.h  921  int pci_load_and_free_saved_state(struct pci_dev *dev,struct pci_saved_state **state);
__pci_complete_power_transition  prototype  include/linux/pci.h  923  int __pci_complete_power_transition(struct pci_dev *dev,pci_power_t state);
pci_set_power_state  function  include/linux/pci.h  1340  static inline int pci_set_power_state(struct pci_dev *dev,pci_power_t state)
pci_choose_state  function  include/linux/pci.h  1350  static inline pci_power_t pci_choose_state(struct pci_dev *dev,pm_message_t state)
pci_pme_capable  prototype  include/linux/pci.h  926  bool pci_pme_capable(struct pci_dev *dev,pci_power_t state);
pci_pme_active  prototype  include/linux/pci.h  927  void pci_pme_active(struct pci_dev *dev,bool enable);
__pci_enable_wake  prototype  include/linux/pci.h  928  int __pci_enable_wake(struct pci_dev *dev,pci_power_t state,bool runtime, bool enable);
pci_wake_from_d3  function  include/linux/pci.h  1345  static inline int pci_wake_from_d3(struct pci_dev *dev,bool enable)
pci_target_state  prototype  include/linux/pci.h  931  pci_power_t pci_target_state(struct pci_dev *dev);
pci_prepare_to_sleep  prototype  include/linux/pci.h  932  int pci_prepare_to_sleep(struct pci_dev *dev);
pci_back_from_sleep  prototype  include/linux/pci.h  933  int pci_back_from_sleep(struct pci_dev *dev);
pci_dev_run_wake  prototype  include/linux/pci.h  934  bool pci_dev_run_wake(struct pci_dev *dev);
pci_check_pme_status  prototype  include/linux/pci.h  935  bool pci_check_pme_status(struct pci_dev *dev);
pci_pme_wakeup_bus  prototype  include/linux/pci.h  936  void pci_pme_wakeup_bus(struct pci_bus *bus);
pci_enable_wake  function  include/linux/pci.h  1356  static inline int pci_enable_wake(struct pci_dev *dev,pci_power_t state,int enable)
PCI_EXP_IDO_REQUEST  macro  include/linux/pci.h  944  #define PCI_EXP_IDO_REQUEST (1<<0)
PCI_EXP_IDO_COMPLETION  macro  include/linux/pci.h  945  #define PCI_EXP_IDO_COMPLETION (1<<1)
pci_enable_ido  function  include/linux/pci.h  1362  static inline void pci_enable_ido(struct pci_dev *dev,unsigned long type)
pci_disable_ido  function  include/linux/pci.h  1366  static inline void pci_disable_ido(struct pci_dev *dev,unsigned long type)
pci_obff_signal_type  enum  include/linux/pci.h  949  enum pci_obff_signal_type { PCI_EXP_OBFF_SIGNAL_L0 = 0, PCI_EXP_OBFF_SIGNAL_ALWAYS = 1, };
pci_enable_obff  function  include/linux/pci.h  1370  static inline int pci_enable_obff(struct pci_dev *dev,unsigned long type)
pci_disable_obff  function  include/linux/pci.h  1375  static inline void pci_disable_obff(struct pci_dev *dev)
pci_enable_ltr  prototype  include/linux/pci.h  956  int pci_enable_ltr(struct pci_dev *dev);
pci_disable_ltr  prototype  include/linux/pci.h  957  void pci_disable_ltr(struct pci_dev *dev);
pci_set_ltr  prototype  include/linux/pci.h  958  int pci_set_ltr(struct pci_dev *dev,int snoop_lat_ns,int nosnoop_lat_ns);
set_pcie_port_type  prototype  include/linux/pci.h  961  void set_pcie_port_type(struct pci_dev *pdev);
set_pcie_hotplug_bridge  prototype  include/linux/pci.h  962  void set_pcie_hotplug_bridge(struct pci_dev *pdev);
pci_bus_find_capability  prototype  include/linux/pci.h  965  int pci_bus_find_capability(struct pci_bus *bus,unsigned int devfn,int cap);
pci_rescan_bus_bridge_resize  prototype  include/linux/pci.h  966  unsigned int pci_rescan_bus_bridge_resize(struct pci_dev *bridge);
pci_rescan_bus  prototype  include/linux/pci.h  967  unsigned int pci_rescan_bus(struct pci_bus *bus);
pci_read_vpd  prototype  include/linux/pci.h  970  ssize_t pci_read_vpd(struct pci_dev *dev,loff_t pos,size_t count,void *buf);
pci_write_vpd  prototype  include/linux/pci.h  971  ssize_t pci_write_vpd(struct pci_dev *dev,loff_t pos,size_t count,const void *buf);
pci_vpd_truncate  prototype  include/linux/pci.h  972  int pci_vpd_truncate(struct pci_dev *dev,size_t size);
pcibios_retrieve_fw_addr  prototype  include/linux/pci.h  975  resource_size_t pcibios_retrieve_fw_addr(struct pci_dev *dev,int idx);
pci_bus_assign_resources  prototype  include/linux/pci.h  976  void pci_bus_assign_resources(const struct pci_bus *bus);
pci_bus_size_bridges  prototype  include/linux/pci.h  977  void pci_bus_size_bridges(struct pci_bus *bus);
pci_claim_resource  prototype  include/linux/pci.h  978  int pci_claim_resource(struct pci_dev *,int);
pci_assign_unassigned_resources  prototype  include/linux/pci.h  979  void pci_assign_unassigned_resources(void);
pci_assign_unassigned_bridge_resources  prototype  include/linux/pci.h  980  void pci_assign_unassigned_bridge_resources(struct pci_dev *bridge);
pci_assign_unassigned_bus_resources  prototype  include/linux/pci.h  981  void pci_assign_unassigned_bus_resources(struct pci_bus *bus);
pdev_enable_device  prototype  include/linux/pci.h  982  void pdev_enable_device(struct pci_dev *);
pci_enable_resources  prototype  include/linux/pci.h  983  int pci_enable_resources(struct pci_dev *,int mask);
pci_fixup_irqs  prototype  include/linux/pci.h  984  void pci_fixup_irqs(u8 (*)(struct pci_dev *,u8 *),int (*)(const struct pci_dev *, u8, u8));
HAVE_PCI_REQ_REGIONS  macro  include/linux/pci.h  986  #define HAVE_PCI_REQ_REGIONS 2
pci_request_regions  function  include/linux/pci.h  1379  static inline int pci_request_regions(struct pci_dev *dev,const char *res_name)
pci_request_regions_exclusive  prototype  include/linux/pci.h  988  int __must_check pci_request_regions_exclusive(struct pci_dev *,const char *);
pci_release_regions  function  include/linux/pci.h  1384  static inline void pci_release_regions(struct pci_dev *dev)
pci_request_region  prototype  include/linux/pci.h  990  int __must_check pci_request_region(struct pci_dev *,int,const char *);
pci_request_region_exclusive  prototype  include/linux/pci.h  991  int __must_check pci_request_region_exclusive(struct pci_dev *,int,const char *);
pci_release_region  prototype  include/linux/pci.h  992  void pci_release_region(struct pci_dev *,int);
pci_request_selected_regions  prototype  include/linux/pci.h  993  int pci_request_selected_regions(struct pci_dev *,int,const char *);
pci_request_selected_regions_exclusive  prototype  include/linux/pci.h  994  int pci_request_selected_regions_exclusive(struct pci_dev *,int,const char *);
pci_release_selected_regions  prototype  include/linux/pci.h  995  void pci_release_selected_regions(struct pci_dev *,int);
pci_add_resource  prototype  include/linux/pci.h  998  void pci_add_resource(struct list_head *resources,struct resource *res);
pci_add_resource_offset  prototype  include/linux/pci.h  999  void pci_add_resource_offset(struct list_head *resources,struct resource *res,resource_size_t offset);
pci_free_resource_list  prototype  include/linux/pci.h  1001  void pci_free_resource_list(struct list_head *resources);
pci_bus_add_resource  prototype  include/linux/pci.h  1002  void pci_bus_add_resource(struct pci_bus *bus,struct resource *res,unsigned int flags);
pci_bus_resource_n  prototype  include/linux/pci.h  1003  struct resource *pci_bus_resource_n(const struct pci_bus *bus,int n);
pci_bus_remove_resources  prototype  include/linux/pci.h  1004  void pci_bus_remove_resources(struct pci_bus *bus);
pci_bus_for_each_resource  macro  include/linux/pci.h  1006  #define pci_bus_for_each_resource(bus,res,i) for (i = 0; (res = pci_bus_resource_n(bus, i)) || i < PCI_BRIDGE_RESOURCE_NUM; i++)
pci_bus_alloc_resource  prototype  include/linux/pci.h  1011  int __must_check pci_bus_alloc_resource(struct pci_bus *bus,struct resource *res, resource_size_t size,resource_size_t align, resource_size_t min,unsigned int type_mask,resource_size_t (*alignf)(void *,const struct resource *,resource_size_t,resource_size_t),void *alignf_data);
pci_enable_bridges  prototype  include/linux/pci.h  1020  void pci_enable_bridges(struct pci_bus *bus);
__pci_register_driver  function  include/linux/pci.h  1301  static inline int __pci_register_driver(struct pci_driver *drv,struct module *owner)
pci_register_driver  function  include/linux/pci.h  1307  static inline int pci_register_driver(struct pci_driver *drv)
pci_unregister_driver  function  include/linux/pci.h  1312  static inline void pci_unregister_driver(struct pci_driver *drv)
module_pci_driver  macro  include/linux/pci.h  1042  #define module_pci_driver(__pci_driver) module_driver(__pci_driver, pci_register_driver, pci_unregister_driver)
pci_dev_driver  prototype  include/linux/pci.h  1046  struct pci_driver *pci_dev_driver(const struct pci_dev *dev);
pci_add_dynid  prototype  include/linux/pci.h  1047  int pci_add_dynid(struct pci_driver *drv,unsigned int vendor, unsigned int device,unsigned int subvendor, unsigned int subdevice,unsigned int class, unsigned int class_mask,unsigned long driver_data);
pci_match_id  prototype  include/linux/pci.h  1052  const struct pci_device_id *pci_match_id(const struct pci_device_id *ids,struct pci_dev *dev);
pci_scan_bridge  prototype  include/linux/pci.h  1054  int pci_scan_bridge(struct pci_bus *bus,struct pci_dev *dev,int max,int pass);
pci_walk_bus  prototype  include/linux/pci.h  1057  void pci_walk_bus(struct pci_bus *top,int (*cb)(struct pci_dev *,void *),void *userdata);
pci_cfg_space_size_ext  prototype  include/linux/pci.h  1059  int pci_cfg_space_size_ext(struct pci_dev *dev);
pci_cfg_space_size  prototype  include/linux/pci.h  1060  int pci_cfg_space_size(struct pci_dev *dev);
pci_bus_max_busnr  prototype  include/linux/pci.h  1061  unsigned char pci_bus_max_busnr(struct pci_bus *bus);
pci_setup_bridge  prototype  include/linux/pci.h  1062  void pci_setup_bridge(struct pci_bus *bus);
pcibios_window_alignment  prototype  include/linux/pci.h  1063  resource_size_t pcibios_window_alignment(struct pci_bus *bus,unsigned long type);
PCI_VGA_STATE_CHANGE_BRIDGE  macro  include/linux/pci.h  1066  #define PCI_VGA_STATE_CHANGE_BRIDGE (1 << 0)
PCI_VGA_STATE_CHANGE_DECODES  macro  include/linux/pci.h  1067  #define PCI_VGA_STATE_CHANGE_DECODES (1 << 1)
pci_set_vga_state  prototype  include/linux/pci.h  1069  int pci_set_vga_state(struct pci_dev *pdev,bool decode,unsigned int command_bits, u32 flags);
pci_pool  macro  include/linux/pci.h  1076  #define pci_pool dma_pool
pci_pool_create  macro  include/linux/pci.h  1077  #define pci_pool_create(name,pdev,size,align,allocation) dma_pool_create(name, &pdev->dev, size, align, allocation)
pci_pool_destroy  macro  include/linux/pci.h  1079  #define pci_pool_destroy(pool) dma_pool_destroy(pool)
pci_pool_alloc  macro  include/linux/pci.h  1080  #define pci_pool_alloc(pool,flags,handle) dma_pool_alloc(pool,flags,handle)
pci_pool_free  macro  include/linux/pci.h  1081  #define pci_pool_free(pool,vaddr,addr) dma_pool_free(pool,vaddr,addr)
pci_dma_burst_strategy  enum  include/linux/pci.h  1083  enum pci_dma_burst_strategy { PCI_DMA_BURST_INFINITY, PCI_DMA_BURST_BOUNDARY, PCI_DMA_BURST_MULTIPLE, };
msix_entry  struct  include/linux/pci.h  1092  struct msix_entry { u32 vector; u16 entry; };
pci_enable_msi_block  prototype  include/linux/pci.h  1134  extern int pci_enable_msi_block(struct pci_dev *dev,unsigned int nvec);
pci_msi_shutdown  prototype  include/linux/pci.h  1135  extern void pci_msi_shutdown(struct pci_dev *dev);
pci_disable_msi  prototype  include/linux/pci.h  1136  extern void pci_disable_msi(struct pci_dev *dev);
pci_msix_table_size  prototype  include/linux/pci.h  1137  extern int pci_msix_table_size(struct pci_dev *dev);
pci_enable_msix  prototype  include/linux/pci.h  1138  extern int pci_enable_msix(struct pci_dev *dev,struct msix_entry *entries, int nvec);
pci_msix_shutdown  prototype  include/linux/pci.h  1140  extern void pci_msix_shutdown(struct pci_dev *dev);
pci_disable_msix  prototype  include/linux/pci.h  1141  extern void pci_disable_msix(struct pci_dev *dev);
msi_remove_pci_irq_vectors  prototype  include/linux/pci.h  1142  extern void msi_remove_pci_irq_vectors(struct pci_dev *dev);
pci_restore_msi_state  prototype  include/linux/pci.h  1143  extern void pci_restore_msi_state(struct pci_dev *dev);
pci_msi_enabled  prototype  include/linux/pci.h  1144  extern int pci_msi_enabled(void);
pcie_ports_disabled  macro  include/linux/pci.h  1151  #define pcie_ports_disabled true
pcie_ports_auto  macro  include/linux/pci.h  1152  #define pcie_ports_auto false
pcie_aspm_enabled  prototype  include/linux/pci.h  1159  extern int pcie_aspm_enabled(void);
pcie_aspm_support_enabled  prototype  include/linux/pci.h  1160  extern bool pcie_aspm_support_enabled(void);
pci_no_aer  function  include/linux/pci.h  1167  static inline void pci_no_aer(void) { }
pci_aer_available  function  include/linux/pci.h  1168  static inline bool pci_aer_available(void) { return false; }
pcie_set_ecrc_checking  prototype  include/linux/pci.h  1178  extern void pcie_set_ecrc_checking(struct pci_dev *dev);
pcie_ecrc_get_policy  prototype  include/linux/pci.h  1179  extern void pcie_ecrc_get_policy(char *str);
pci_enable_msi  macro  include/linux/pci.h  1182  #define pci_enable_msi(pdev) pci_enable_msi_block(pdev,1)
ht_create_irq  prototype  include/linux/pci.h  1186  int ht_create_irq(struct pci_dev *dev,int idx);
ht_destroy_irq  prototype  include/linux/pci.h  1187  void ht_destroy_irq(unsigned int irq);
pci_cfg_access_lock  prototype  include/linux/pci.h  1190  extern void pci_cfg_access_lock(struct pci_dev *dev);
pci_cfg_access_trylock  prototype  include/linux/pci.h  1191  extern bool pci_cfg_access_trylock(struct pci_dev *dev);
pci_cfg_access_unlock  prototype  include/linux/pci.h  1192  extern void pci_cfg_access_unlock(struct pci_dev *dev);
pci_domain_nr  function  arch/x86/include/asm/pci.h  34  static inline int pci_domain_nr(struct pci_bus *bus)
pci_proc_domain  function  arch/x86/include/asm/pci.h  40  static inline int pci_proc_domain(struct pci_bus *bus)
pci_register_set_vga_state  prototype  include/linux/pci.h  1217  extern void pci_register_set_vga_state(arch_set_vga_state_t func);
_PCI_NOP  macro  include/linux/pci.h  1226  #define _PCI_NOP(o,s,t) static inline int pci_##o##_config_##s(struct pci_dev *dev, int where, t val) { return PCIBIOS_FUNC_NOT_SUPPORTED; }
_PCI_NOP_ALL  macro  include/linux/pci.h  1231  #define _PCI_NOP_ALL(o,x) _PCI_NOP(o,byte,u8 x) _PCI_NOP(o, word, u16 x) _PCI_NOP(o, dword, u32 x)
pci_set_dma_mask  function  include/asm-generic/pci-dma-compat.h  105  static inline int pci_set_dma_mask(struct pci_dev *dev,u64 mask)
pci_set_consistent_dma_mask  function  include/asm-generic/pci-dma-compat.h  110  static inline int pci_set_consistent_dma_mask(struct pci_dev *dev,u64 mask)
pci_dma_burst_advice  function  arch/x86/include/asm/pci.h  86  static inline void pci_dma_burst_advice(struct pci_dev *pdev,enum pci_dma_burst_strategy *strat,unsigned long *strategy_parameter)
pci_block_cfg_access  function  include/linux/pci.h  1389  static inline void pci_block_cfg_access(struct pci_dev *dev)
pci_block_cfg_access_in_atomic  function  include/linux/pci.h  1392  static inline int pci_block_cfg_access_in_atomic(struct pci_dev *dev)
pci_unblock_cfg_access  function  include/linux/pci.h  1395  static inline void pci_unblock_cfg_access(struct pci_dev *dev)
PCIBIOS_MAX_MEM_32  macro  arch/x86/include/asm/pci.h  152  #define PCIBIOS_MAX_MEM_32 0xffffffff
pci_resource_start  macro  include/linux/pci.h  1430  #define pci_resource_start(dev,bar) ((dev)->resource[(bar)].start)
pci_resource_end  macro  include/linux/pci.h  1431  #define pci_resource_end(dev,bar) ((dev)->resource[(bar)].end)
pci_resource_flags  macro  include/linux/pci.h  1432  #define pci_resource_flags(dev,bar) ((dev)->resource[(bar)].flags)
pci_resource_len  macro  include/linux/pci.h  1433  #define pci_resource_len(dev,bar) ((pci_resource_start((dev), (bar)) == 0 && pci_resource_end((dev), (bar)) == pci_resource_start((dev), (bar))) ? 0 : (pci_resource_end((dev), (bar)) - pci_resource_start((dev), (bar)) + 1))
pci_get_drvdata  function  include/linux/pci.h  1445  static inline void *pci_get_drvdata(struct pci_dev *pdev)
pci_set_drvdata  function  include/linux/pci.h  1450  static inline void pci_set_drvdata(struct pci_dev *pdev,void *data)
pci_name  function  include/linux/pci.h  1458  static inline const char *pci_name(const struct pci_dev *pdev)
pci_resource_to_user  function  include/linux/pci.h  1468  static inline void pci_resource_to_user(const struct pci_dev *dev,int bar,const struct resource *rsrc, resource_size_t *start,resource_size_t *end)
pci_fixup  struct  include/linux/pci.h  1485  struct pci_fixup { u16 vendor; u16 device; unsigned int class_shift; void (*hook)(struct pci_dev *dev); };
pci_fixup_pass  enum  include/linux/pci.h  1493  enum pci_fixup_pass { pci_fixup_early, pci_fixup_header, pci_fixup_final, pci_fixup_enable, pci_fixup_resume, pci_fixup_suspend, pci_fixup_resume_early, };
DECLARE_PCI_FIXUP_SECTION  macro  include/linux/pci.h  1504  #define DECLARE_PCI_FIXUP_SECTION(section,name,vendor,device,class, class_shift, hook) static const struct pci_fixup __pci_fixup_##name __used __attribute__((__section__(#section), aligned((sizeof(void *))))) = { vendor, device, class, class_shift, hook };
DECLARE_PCI_FIXUP_CLASS_EARLY  macro  include/linux/pci.h  1510  #define DECLARE_PCI_FIXUP_CLASS_EARLY(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_early, vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_HEADER  macro  include/linux/pci.h  1514  #define DECLARE_PCI_FIXUP_CLASS_HEADER(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_header, vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_FINAL  macro  include/linux/pci.h  1518  #define DECLARE_PCI_FIXUP_CLASS_FINAL(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_final, vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_ENABLE  macro  include/linux/pci.h  1522  #define DECLARE_PCI_FIXUP_CLASS_ENABLE(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_enable, vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_RESUME  macro  include/linux/pci.h  1526  #define DECLARE_PCI_FIXUP_CLASS_RESUME(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume, resume##vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_RESUME_EARLY  macro  include/linux/pci.h  1531  #define DECLARE_PCI_FIXUP_CLASS_RESUME_EARLY(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume_early, resume_early##vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_CLASS_SUSPEND  macro  include/linux/pci.h  1536  #define DECLARE_PCI_FIXUP_CLASS_SUSPEND(vendor,device,class, class_shift, hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_suspend, suspend##vendor##device##hook, vendor, device, class, class_shift, hook)
DECLARE_PCI_FIXUP_EARLY  macro  include/linux/pci.h  1542  #define DECLARE_PCI_FIXUP_EARLY(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_early, vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_HEADER  macro  include/linux/pci.h  1545  #define DECLARE_PCI_FIXUP_HEADER(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_header, vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_FINAL  macro  include/linux/pci.h  1548  #define DECLARE_PCI_FIXUP_FINAL(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_final, vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_ENABLE  macro  include/linux/pci.h  1551  #define DECLARE_PCI_FIXUP_ENABLE(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_enable, vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_RESUME  macro  include/linux/pci.h  1554  #define DECLARE_PCI_FIXUP_RESUME(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume, resume##vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_RESUME_EARLY  macro  include/linux/pci.h  1558  #define DECLARE_PCI_FIXUP_RESUME_EARLY(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_resume_early, resume_early##vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
DECLARE_PCI_FIXUP_SUSPEND  macro  include/linux/pci.h  1562  #define DECLARE_PCI_FIXUP_SUSPEND(vendor,device,hook) DECLARE_PCI_FIXUP_SECTION(.pci_fixup_suspend, suspend##vendor##device##hook, vendor, device, PCI_ANY_ID, 0, hook)
pci_fixup_device  function  include/linux/pci.h  1572  static inline void pci_fixup_device(enum pci_fixup_pass pass,struct pci_dev *dev) {}
pci_get_dma_source  function  include/linux/pci.h  1574  static inline struct pci_dev *pci_get_dma_source(struct pci_dev *dev)
pci_dev_specific_acs_enabled  function  include/linux/pci.h  1578  static inline int pci_dev_specific_acs_enabled(struct pci_dev *dev,u16 acs_flags)
pcim_iomap  prototype  include/linux/pci.h  1585  void __iomem *pcim_iomap(struct pci_dev *pdev,int bar,unsigned long maxlen);
pcim_iounmap  prototype  include/linux/pci.h  1586  void pcim_iounmap(struct pci_dev *pdev,void __iomem *addr);
pcim_iomap_table  prototype  include/linux/pci.h  1587  void __iomem * const *pcim_iomap_table(struct pci_dev *pdev);
pcim_iomap_regions  prototype  include/linux/pci.h  1588  int pcim_iomap_regions(struct pci_dev *pdev,int mask,const char *name);
pcim_iomap_regions_request_all  prototype  include/linux/pci.h  1589  int pcim_iomap_regions_request_all(struct pci_dev *pdev,int mask,const char *name);
pcim_iounmap_regions  prototype  include/linux/pci.h  1591  void pcim_iounmap_regions(struct pci_dev *pdev,int mask);
PCIPCI_FAIL  macro  include/linux/pci.h  1594  #define PCIPCI_FAIL 1
PCIPCI_TRITON  macro  include/linux/pci.h  1595  #define PCIPCI_TRITON 2
PCIPCI_NATOMA  macro  include/linux/pci.h  1596  #define PCIPCI_NATOMA 4
PCIPCI_VIAETBF  macro  include/linux/pci.h  1597  #define PCIPCI_VIAETBF 8
PCIPCI_VSFX  macro  include/linux/pci.h  1598  #define PCIPCI_VSFX 16
PCIPCI_ALIMAGIK  macro  include/linux/pci.h  1599  #define PCIPCI_ALIMAGIK 32
PCIAGP_FAIL  macro  include/linux/pci.h  1600  #define PCIAGP_FAIL 64
pcibios_add_platform_entries  prototype  include/linux/pci.h  1611  int pcibios_add_platform_entries(struct pci_dev *dev);
pcibios_disable_device  prototype  include/linux/pci.h  1612  void pcibios_disable_device(struct pci_dev *dev);
pcibios_set_master  prototype  arch/x86/include/asm/pci.h  72  void pcibios_set_master(struct pci_dev *dev);
pcibios_set_pcie_reset_state  prototype  include/linux/pci.h  1614  int pcibios_set_pcie_reset_state(struct pci_dev *dev,enum pcie_reset_state state);
pcibios_add_device  prototype  include/linux/pci.h  1616  int pcibios_add_device(struct pci_dev *dev);
pci_mmcfg_early_init  function  include/linux/pci.h  1622  static inline void pci_mmcfg_early_init(void) { }
pci_mmcfg_late_init  function  include/linux/pci.h  1623  static inline void pci_mmcfg_late_init(void) { }
pci_ext_cfg_avail  prototype  include/linux/pci.h  1626  int pci_ext_cfg_avail(void);
pci_ioremap_bar  prototype  include/linux/pci.h  1628  void __iomem *pci_ioremap_bar(struct pci_dev *pdev,int bar);
pci_enable_sriov  function  include/linux/pci.h  1638  static inline int pci_enable_sriov(struct pci_dev *dev,int nr_virtfn)
pci_disable_sriov  function  include/linux/pci.h  1642  static inline void pci_disable_sriov(struct pci_dev *dev)
pci_sriov_migration  function  include/linux/pci.h  1645  static inline irqreturn_t pci_sriov_migration(struct pci_dev *dev)
pci_num_vf  function  include/linux/pci.h  1649  static inline int pci_num_vf(struct pci_dev *dev)
pci_sriov_set_totalvfs  function  include/linux/pci.h  1653  static inline int pci_sriov_set_totalvfs(struct pci_dev *dev,u16 numvfs)
pci_sriov_get_totalvfs  function  include/linux/pci.h  1657  static inline int pci_sriov_get_totalvfs(struct pci_dev *dev)
pci_hp_create_module_link  prototype  include/linux/pci.h  1664  extern void pci_hp_create_module_link(struct pci_slot *pci_slot);
pci_hp_remove_module_link  prototype  include/linux/pci.h  1665  extern void pci_hp_remove_module_link(struct pci_slot *pci_slot);
pci_pcie_cap  function  include/linux/pci.h  1679  static inline int pci_pcie_cap(struct pci_dev *dev)
pci_is_pcie  function  include/linux/pci.h  1690  static inline bool pci_is_pcie(struct pci_dev *dev)
pci_pcie_type  function  include/linux/pci.h  1699  static inline int pci_pcie_type(const struct pci_dev *dev)
pci_request_acs  prototype  include/linux/pci.h  1704  void pci_request_acs(void);
pci_acs_enabled  prototype  include/linux/pci.h  1705  bool pci_acs_enabled(struct pci_dev *pdev,u16 acs_flags);
pci_acs_path_enabled  prototype  include/linux/pci.h  1706  bool pci_acs_path_enabled(struct pci_dev *start,struct pci_dev *end, u16 acs_flags);
PCI_VPD_LRDT  macro  include/linux/pci.h  1709  #define PCI_VPD_LRDT 0x80
PCI_VPD_LRDT_ID  macro  include/linux/pci.h  1710  #define PCI_VPD_LRDT_ID(x) (x | PCI_VPD_LRDT)
PCI_VPD_LTIN_ID_STRING  macro  include/linux/pci.h  1713  #define PCI_VPD_LTIN_ID_STRING 0x02
PCI_VPD_LTIN_RO_DATA  macro  include/linux/pci.h  1714  #define PCI_VPD_LTIN_RO_DATA 0x10
PCI_VPD_LTIN_RW_DATA  macro  include/linux/pci.h  1715  #define PCI_VPD_LTIN_RW_DATA 0x11
PCI_VPD_LRDT_ID_STRING  macro  include/linux/pci.h  1717  #define PCI_VPD_LRDT_ID_STRING PCI_VPD_LRDT_ID(PCI_VPD_LTIN_ID_STRING)
PCI_VPD_LRDT_RO_DATA  macro  include/linux/pci.h  1718  #define PCI_VPD_LRDT_RO_DATA PCI_VPD_LRDT_ID(PCI_VPD_LTIN_RO_DATA)
PCI_VPD_LRDT_RW_DATA  macro  include/linux/pci.h  1719  #define PCI_VPD_LRDT_RW_DATA PCI_VPD_LRDT_ID(PCI_VPD_LTIN_RW_DATA)
PCI_VPD_STIN_END  macro  include/linux/pci.h  1722  #define PCI_VPD_STIN_END 0x78
PCI_VPD_SRDT_END  macro  include/linux/pci.h  1724  #define PCI_VPD_SRDT_END PCI_VPD_STIN_END
PCI_VPD_SRDT_TIN_MASK  macro  include/linux/pci.h  1726  #define PCI_VPD_SRDT_TIN_MASK 0x78
PCI_VPD_SRDT_LEN_MASK  macro  include/linux/pci.h  1727  #define PCI_VPD_SRDT_LEN_MASK 0x07
PCI_VPD_LRDT_TAG_SIZE  macro  include/linux/pci.h  1729  #define PCI_VPD_LRDT_TAG_SIZE 3
PCI_VPD_SRDT_TAG_SIZE  macro  include/linux/pci.h  1730  #define PCI_VPD_SRDT_TAG_SIZE 1
PCI_VPD_INFO_FLD_HDR_SIZE  macro  include/linux/pci.h  1732  #define PCI_VPD_INFO_FLD_HDR_SIZE 3
PCI_VPD_RO_KEYWORD_PARTNO  macro  include/linux/pci.h  1734  #define PCI_VPD_RO_KEYWORD_PARTNO "PN"
PCI_VPD_RO_KEYWORD_MFR_ID  macro  include/linux/pci.h  1735  #define PCI_VPD_RO_KEYWORD_MFR_ID "MN"
PCI_VPD_RO_KEYWORD_VENDOR0  macro  include/linux/pci.h  1736  #define PCI_VPD_RO_KEYWORD_VENDOR0 "V0"
PCI_VPD_RO_KEYWORD_CHKSUM  macro  include/linux/pci.h  1737  #define PCI_VPD_RO_KEYWORD_CHKSUM "RV"
pci_vpd_lrdt_size  function  include/linux/pci.h  1745  static inline u16 pci_vpd_lrdt_size(const u8 *lrdt)
pci_vpd_srdt_size  function  include/linux/pci.h  1756  static inline u8 pci_vpd_srdt_size(const u8 *srdt)
pci_vpd_info_field_size  function  include/linux/pci.h  1767  static inline u8 pci_vpd_info_field_size(const u8 *info_field)
pci_vpd_find_tag  prototype  include/linux/pci.h  1782  int pci_vpd_find_tag(const u8 *buf,unsigned int off,unsigned int len,u8 rdt);
pci_vpd_find_info_keyword  prototype  include/linux/pci.h  1794  int pci_vpd_find_info_keyword(const u8 *buf,unsigned int off,unsigned int len, const char *kw);
pci_set_of_node  function  include/linux/pci.h  1820  static inline void pci_set_of_node(struct pci_dev *dev) { }
pci_release_of_node  function  include/linux/pci.h  1821  static inline void pci_release_of_node(struct pci_dev *dev) { }
pci_set_bus_of_node  function  include/linux/pci.h  1822  static inline void pci_set_bus_of_node(struct pci_bus *bus) { }
pci_release_bus_of_node  function  include/linux/pci.h  1823  static inline void pci_release_bus_of_node(struct pci_bus *bus) { }
pcibios_get_phb_of_node  prototype  include/linux/pci.h  1806  extern struct device_node * __weak pcibios_get_phb_of_node(struct pci_bus *bus);
pci_device_to_OF_node  function  include/linux/pci.h  1809  pci_device_to_OF_node(const struct pci_dev *pdev)
pci_bus_to_OF_node  function  include/linux/pci.h  1814  static inline struct device_node *pci_bus_to_OF_node(struct pci_bus *bus)
pci_dev_to_eeh_dev  function  include/linux/pci.h  1827  static inline struct eeh_dev *pci_dev_to_eeh_dev(struct pci_dev *pdev)
pci_find_upstream_pcie_bridge  prototype  include/linux/pci.h  1842  struct pci_dev *pci_find_upstream_pcie_bridge(struct pci_dev *pdev);
_SCSI_SCSI_H  macro  include/scsi/scsi.h  9  #define _SCSI_SCSI_H
SCSI_MAX_SG_SEGMENTS  macro  include/scsi/scsi.h  23  #define SCSI_MAX_SG_SEGMENTS 128
SCSI_MAX_SG_CHAIN_SEGMENTS  macro  include/scsi/scsi.h  32  #define SCSI_MAX_SG_CHAIN_SEGMENTS SCSI_MAX_SG_SEGMENTS
SCSI_MAX_PROT_SG_SEGMENTS  macro  include/scsi/scsi.h  39  #define SCSI_MAX_PROT_SG_SEGMENTS 0xFFFF
SCAN_WILD_CARD  macro  include/scsi/scsi.h  45  #define SCAN_WILD_CARD ~0
TEST_UNIT_READY  macro  include/scsi/scsi.h  51  #define TEST_UNIT_READY 0x00
REZERO_UNIT  macro  include/scsi/scsi.h  52  #define REZERO_UNIT 0x01
REQUEST_SENSE  macro  include/scsi/scsi.h  53  #define REQUEST_SENSE 0x03
FORMAT_UNIT  macro  include/scsi/scsi.h  54  #define FORMAT_UNIT 0x04
READ_BLOCK_LIMITS  macro  include/scsi/scsi.h  55  #define READ_BLOCK_LIMITS 0x05
REASSIGN_BLOCKS  macro  include/scsi/scsi.h  56  #define REASSIGN_BLOCKS 0x07
INITIALIZE_ELEMENT_STATUS  macro  include/scsi/scsi.h  57  #define INITIALIZE_ELEMENT_STATUS 0x07
READ_6  macro  include/scsi/scsi.h  58  #define READ_6 0x08
WRITE_6  macro  include/scsi/scsi.h  59  #define WRITE_6 0x0a
SEEK_6  macro  include/scsi/scsi.h  60  #define SEEK_6 0x0b
READ_REVERSE  macro  include/scsi/scsi.h  61  #define READ_REVERSE 0x0f
WRITE_FILEMARKS  macro  include/scsi/scsi.h  62  #define WRITE_FILEMARKS 0x10
SPACE  macro  include/scsi/scsi.h  63  #define SPACE 0x11
INQUIRY  macro  include/scsi/scsi.h  64  #define INQUIRY 0x12
RECOVER_BUFFERED_DATA  macro  include/scsi/scsi.h  65  #define RECOVER_BUFFERED_DATA 0x14
MODE_SELECT  macro  include/scsi/scsi.h  66  #define MODE_SELECT 0x15
RESERVE  macro  include/scsi/scsi.h  67  #define RESERVE 0x16
RELEASE  macro  include/scsi/scsi.h  68  #define RELEASE 0x17
COPY  macro  include/scsi/scsi.h  69  #define COPY 0x18
ERASE  macro  include/scsi/scsi.h  70  #define ERASE 0x19
MODE_SENSE  macro  include/scsi/scsi.h  71  #define MODE_SENSE 0x1a
START_STOP  macro  include/scsi/scsi.h  72  #define START_STOP 0x1b
RECEIVE_DIAGNOSTIC  macro  include/scsi/scsi.h  73  #define RECEIVE_DIAGNOSTIC 0x1c
SEND_DIAGNOSTIC  macro  include/scsi/scsi.h  74  #define SEND_DIAGNOSTIC 0x1d
ALLOW_MEDIUM_REMOVAL  macro  include/scsi/scsi.h  75  #define ALLOW_MEDIUM_REMOVAL 0x1e
READ_FORMAT_CAPACITIES  macro  include/scsi/scsi.h  77  #define READ_FORMAT_CAPACITIES 0x23
SET_WINDOW  macro  include/scsi/scsi.h  78  #define SET_WINDOW 0x24
READ_CAPACITY  macro  include/scsi/scsi.h  79  #define READ_CAPACITY 0x25
READ_10  macro  include/scsi/scsi.h  80  #define READ_10 0x28
WRITE_10  macro  include/scsi/scsi.h  81  #define WRITE_10 0x2a
SEEK_10  macro  include/scsi/scsi.h  82  #define SEEK_10 0x2b
POSITION_TO_ELEMENT  macro  include/scsi/scsi.h  83  #define POSITION_TO_ELEMENT 0x2b
WRITE_VERIFY  macro  include/scsi/scsi.h  84  #define WRITE_VERIFY 0x2e
VERIFY  macro  include/scsi/scsi.h  85  #define VERIFY 0x2f
SEARCH_HIGH  macro  include/scsi/scsi.h  86  #define SEARCH_HIGH 0x30
SEARCH_EQUAL  macro  include/scsi/scsi.h  87  #define SEARCH_EQUAL 0x31
SEARCH_LOW  macro  include/scsi/scsi.h  88  #define SEARCH_LOW 0x32
SET_LIMITS  macro  include/scsi/scsi.h  89  #define SET_LIMITS 0x33
PRE_FETCH  macro  include/scsi/scsi.h  90  #define PRE_FETCH 0x34
READ_POSITION  macro  include/scsi/scsi.h  91  #define READ_POSITION 0x34
SYNCHRONIZE_CACHE  macro  include/scsi/scsi.h  92  #define SYNCHRONIZE_CACHE 0x35
LOCK_UNLOCK_CACHE  macro  include/scsi/scsi.h  93  #define LOCK_UNLOCK_CACHE 0x36
READ_DEFECT_DATA  macro  include/scsi/scsi.h  94  #define READ_DEFECT_DATA 0x37
MEDIUM_SCAN  macro  include/scsi/scsi.h  95  #define MEDIUM_SCAN 0x38
COMPARE  macro  include/scsi/scsi.h  96  #define COMPARE 0x39
COPY_VERIFY  macro  include/scsi/scsi.h  97  #define COPY_VERIFY 0x3a
WRITE_BUFFER  macro  include/scsi/scsi.h  98  #define WRITE_BUFFER 0x3b
READ_BUFFER  macro  include/scsi/scsi.h  99  #define READ_BUFFER 0x3c
UPDATE_BLOCK  macro  include/scsi/scsi.h  100  #define UPDATE_BLOCK 0x3d
READ_LONG  macro  include/scsi/scsi.h  101  #define READ_LONG 0x3e
WRITE_LONG  macro  include/scsi/scsi.h  102  #define WRITE_LONG 0x3f
CHANGE_DEFINITION  macro  include/scsi/scsi.h  103  #define CHANGE_DEFINITION 0x40
WRITE_SAME  macro  include/scsi/scsi.h  104  #define WRITE_SAME 0x41
UNMAP  macro  include/scsi/scsi.h  105  #define UNMAP 0x42
READ_TOC  macro  include/scsi/scsi.h  106  #define READ_TOC 0x43
READ_HEADER  macro  include/scsi/scsi.h  107  #define READ_HEADER 0x44
GET_EVENT_STATUS_NOTIFICATION  macro  include/scsi/scsi.h  108  #define GET_EVENT_STATUS_NOTIFICATION 0x4a
LOG_SELECT  macro  include/scsi/scsi.h  109  #define LOG_SELECT 0x4c
LOG_SENSE  macro  include/scsi/scsi.h  110  #define LOG_SENSE 0x4d
XDWRITEREAD_10  macro  include/scsi/scsi.h  111  #define XDWRITEREAD_10 0x53
MODE_SELECT_10  macro  include/scsi/scsi.h  112  #define MODE_SELECT_10 0x55
RESERVE_10  macro  include/scsi/scsi.h  113  #define RESERVE_10 0x56
RELEASE_10  macro  include/scsi/scsi.h  114  #define RELEASE_10 0x57
MODE_SENSE_10  macro  include/scsi/scsi.h  115  #define MODE_SENSE_10 0x5a
PERSISTENT_RESERVE_IN  macro  include/scsi/scsi.h  116  #define PERSISTENT_RESERVE_IN 0x5e
PERSISTENT_RESERVE_OUT  macro  include/scsi/scsi.h  117  #define PERSISTENT_RESERVE_OUT 0x5f
VARIABLE_LENGTH_CMD  macro  include/scsi/scsi.h  118  #define VARIABLE_LENGTH_CMD 0x7f
REPORT_LUNS  macro  include/scsi/scsi.h  119  #define REPORT_LUNS 0xa0
SECURITY_PROTOCOL_IN  macro  include/scsi/scsi.h  120  #define SECURITY_PROTOCOL_IN 0xa2
MAINTENANCE_IN  macro  include/scsi/scsi.h  121  #define MAINTENANCE_IN 0xa3
MAINTENANCE_OUT  macro  include/scsi/scsi.h  122  #define MAINTENANCE_OUT 0xa4
MOVE_MEDIUM  macro  include/scsi/scsi.h  123  #define MOVE_MEDIUM 0xa5
EXCHANGE_MEDIUM  macro  include/scsi/scsi.h  124  #define EXCHANGE_MEDIUM 0xa6
READ_12  macro  include/scsi/scsi.h  125  #define READ_12 0xa8
WRITE_12  macro  include/scsi/scsi.h  126  #define WRITE_12 0xaa
READ_MEDIA_SERIAL_NUMBER  macro  include/scsi/scsi.h  127  #define READ_MEDIA_SERIAL_NUMBER 0xab
WRITE_VERIFY_12  macro  include/scsi/scsi.h  128  #define WRITE_VERIFY_12 0xae
VERIFY_12  macro  include/scsi/scsi.h  129  #define VERIFY_12 0xaf
SEARCH_HIGH_12  macro  include/scsi/scsi.h  130  #define SEARCH_HIGH_12 0xb0
SEARCH_EQUAL_12  macro  include/scsi/scsi.h  131  #define SEARCH_EQUAL_12 0xb1
SEARCH_LOW_12  macro  include/scsi/scsi.h  132  #define SEARCH_LOW_12 0xb2
SECURITY_PROTOCOL_OUT  macro  include/scsi/scsi.h  133  #define SECURITY_PROTOCOL_OUT 0xb5
READ_ELEMENT_STATUS  macro  include/scsi/scsi.h  134  #define READ_ELEMENT_STATUS 0xb8
SEND_VOLUME_TAG  macro  include/scsi/scsi.h  135  #define SEND_VOLUME_TAG 0xb6
WRITE_LONG_2  macro  include/scsi/scsi.h  136  #define WRITE_LONG_2 0xea
EXTENDED_COPY  macro  include/scsi/scsi.h  137  #define EXTENDED_COPY 0x83
RECEIVE_COPY_RESULTS  macro  include/scsi/scsi.h  138  #define RECEIVE_COPY_RESULTS 0x84
ACCESS_CONTROL_IN  macro  include/scsi/scsi.h  139  #define ACCESS_CONTROL_IN 0x86
ACCESS_CONTROL_OUT  macro  include/scsi/scsi.h  140  #define ACCESS_CONTROL_OUT 0x87
READ_16  macro  include/scsi/scsi.h  141  #define READ_16 0x88
WRITE_16  macro  include/scsi/scsi.h  142  #define WRITE_16 0x8a
READ_ATTRIBUTE  macro  include/scsi/scsi.h  143  #define READ_ATTRIBUTE 0x8c
WRITE_ATTRIBUTE  macro  include/scsi/scsi.h  144  #define WRITE_ATTRIBUTE 0x8d
VERIFY_16  macro  include/scsi/scsi.h  145  #define VERIFY_16 0x8f
SYNCHRONIZE_CACHE_16  macro  include/scsi/scsi.h  146  #define SYNCHRONIZE_CACHE_16 0x91
WRITE_SAME_16  macro  include/scsi/scsi.h  147  #define WRITE_SAME_16 0x93
SERVICE_ACTION_IN  macro  include/scsi/scsi.h  148  #define SERVICE_ACTION_IN 0x9e
SAI_READ_CAPACITY_16  macro  include/scsi/scsi.h  150  #define SAI_READ_CAPACITY_16 0x10
SAI_GET_LBA_STATUS  macro  include/scsi/scsi.h  151  #define SAI_GET_LBA_STATUS 0x12
VLC_SA_RECEIVE_CREDENTIAL  macro  include/scsi/scsi.h  154  #define VLC_SA_RECEIVE_CREDENTIAL 0x1800
MI_REPORT_IDENTIFYING_INFORMATION  macro  include/scsi/scsi.h  156  #define MI_REPORT_IDENTIFYING_INFORMATION 0x05
MI_REPORT_TARGET_PGS  macro  include/scsi/scsi.h  157  #define MI_REPORT_TARGET_PGS 0x0a
MI_REPORT_ALIASES  macro  include/scsi/scsi.h  158  #define MI_REPORT_ALIASES 0x0b
MI_REPORT_SUPPORTED_OPERATION_CODES  macro  include/scsi/scsi.h  159  #define MI_REPORT_SUPPORTED_OPERATION_CODES 0x0c
MI_REPORT_SUPPORTED_TASK_MANAGEMENT_FUNCTIONS  macro  include/scsi/scsi.h  160  #define MI_REPORT_SUPPORTED_TASK_MANAGEMENT_FUNCTIONS 0x0d
MI_REPORT_PRIORITY  macro  include/scsi/scsi.h  161  #define MI_REPORT_PRIORITY 0x0e
MI_REPORT_TIMESTAMP  macro  include/scsi/scsi.h  162  #define MI_REPORT_TIMESTAMP 0x0f
MI_MANAGEMENT_PROTOCOL_IN  macro  include/scsi/scsi.h  163  #define MI_MANAGEMENT_PROTOCOL_IN 0x10
MI_EXT_HDR_PARAM_FMT  macro  include/scsi/scsi.h  165  #define MI_EXT_HDR_PARAM_FMT 0x20
MO_SET_IDENTIFYING_INFORMATION  macro  include/scsi/scsi.h  167  #define MO_SET_IDENTIFYING_INFORMATION 0x06
MO_SET_TARGET_PGS  macro  include/scsi/scsi.h  168  #define MO_SET_TARGET_PGS 0x0a
MO_CHANGE_ALIASES  macro  include/scsi/scsi.h  169  #define MO_CHANGE_ALIASES 0x0b
MO_SET_PRIORITY  macro  include/scsi/scsi.h  170  #define MO_SET_PRIORITY 0x0e
MO_SET_TIMESTAMP  macro  include/scsi/scsi.h  171  #define MO_SET_TIMESTAMP 0x0f
MO_MANAGEMENT_PROTOCOL_OUT  macro  include/scsi/scsi.h  172  #define MO_MANAGEMENT_PROTOCOL_OUT 0x10
XDREAD_32  macro  include/scsi/scsi.h  174  #define XDREAD_32 0x03
XDWRITE_32  macro  include/scsi/scsi.h  175  #define XDWRITE_32 0x04
XPWRITE_32  macro  include/scsi/scsi.h  176  #define XPWRITE_32 0x06
XDWRITEREAD_32  macro  include/scsi/scsi.h  177  #define XDWRITEREAD_32 0x07
READ_32  macro  include/scsi/scsi.h  178  #define READ_32 0x09
VERIFY_32  macro  include/scsi/scsi.h  179  #define VERIFY_32 0x0a
WRITE_32  macro  include/scsi/scsi.h  180  #define WRITE_32 0x0b
WRITE_SAME_32  macro  include/scsi/scsi.h  181  #define WRITE_SAME_32 0x0d
ATA_16  macro  include/scsi/scsi.h  184  #define ATA_16 0x85
ATA_12  macro  include/scsi/scsi.h  185  #define ATA_12 0xa1
SCSI_MAX_VARLEN_CDB_SIZE  macro  include/scsi/scsi.h  191  #define SCSI_MAX_VARLEN_CDB_SIZE 260
scsi_varlen_cdb_hdr  struct  include/scsi/scsi.h  194  struct scsi_varlen_cdb_hdr { __u8 opcode; __u8 control; __u8 misc[5]; __u8 additional_cdb_length; __be16 service_action; };
scsi_varlen_cdb_length  function  include/scsi/scsi.h  204  scsi_varlen_cdb_length(const void *hdr)
COMMAND_SIZE  macro  include/scsi/scsi.h  210  #define COMMAND_SIZE(opcode) scsi_command_size_tbl[((opcode) >> 5) & 7]
scsi_command_size  function  include/scsi/scsi.h  213  scsi_command_size(const unsigned char *cmnd)
scsi_register_acpi_bus_type  prototype  include/scsi/scsi.h  223  scsi_register_acpi_bus_type(struct acpi_bus_type *bus);
scsi_unregister_acpi_bus_type  prototype  include/scsi/scsi.h  226  scsi_unregister_acpi_bus_type(struct acpi_bus_type *bus);
SAM_STAT_GOOD  macro  include/scsi/scsi.h  233  #define SAM_STAT_GOOD 0x00
SAM_STAT_CHECK_CONDITION  macro  include/scsi/scsi.h  234  #define SAM_STAT_CHECK_CONDITION 0x02
SAM_STAT_CONDITION_MET  macro  include/scsi/scsi.h  235  #define SAM_STAT_CONDITION_MET 0x04
SAM_STAT_BUSY  macro  include/scsi/scsi.h  236  #define SAM_STAT_BUSY 0x08
SAM_STAT_INTERMEDIATE  macro  include/scsi/scsi.h  237  #define SAM_STAT_INTERMEDIATE 0x10
SAM_STAT_INTERMEDIATE_CONDITION_MET  macro  include/scsi/scsi.h  238  #define SAM_STAT_INTERMEDIATE_CONDITION_MET 0x14
SAM_STAT_RESERVATION_CONFLICT  macro  include/scsi/scsi.h  239  #define SAM_STAT_RESERVATION_CONFLICT 0x18
SAM_STAT_COMMAND_TERMINATED  macro  include/scsi/scsi.h  240  #define SAM_STAT_COMMAND_TERMINATED 0x22
SAM_STAT_TASK_SET_FULL  macro  include/scsi/scsi.h  241  #define SAM_STAT_TASK_SET_FULL 0x28
SAM_STAT_ACA_ACTIVE  macro  include/scsi/scsi.h  242  #define SAM_STAT_ACA_ACTIVE 0x30
SAM_STAT_TASK_ABORTED  macro  include/scsi/scsi.h  243  #define SAM_STAT_TASK_ABORTED 0x40
scsi_status_is_good  function  include/scsi/scsi.h  253  static inline int scsi_status_is_good(int status)
GOOD  macro  include/scsi/scsi.h  275  #define GOOD 0x00
CHECK_CONDITION  macro  include/scsi/scsi.h  276  #define CHECK_CONDITION 0x01
CONDITION_GOOD  macro  include/scsi/scsi.h  277  #define CONDITION_GOOD 0x02
BUSY  macro  include/scsi/scsi.h  278  #define BUSY 0x04
INTERMEDIATE_GOOD  macro  include/scsi/scsi.h  279  #define INTERMEDIATE_GOOD 0x08
INTERMEDIATE_C_GOOD  macro  include/scsi/scsi.h  280  #define INTERMEDIATE_C_GOOD 0x0a
RESERVATION_CONFLICT  macro  include/scsi/scsi.h  281  #define RESERVATION_CONFLICT 0x0c
COMMAND_TERMINATED  macro  include/scsi/scsi.h  282  #define COMMAND_TERMINATED 0x11
QUEUE_FULL  macro  include/scsi/scsi.h  283  #define QUEUE_FULL 0x14
ACA_ACTIVE  macro  include/scsi/scsi.h  284  #define ACA_ACTIVE 0x18
TASK_ABORTED  macro  include/scsi/scsi.h  285  #define TASK_ABORTED 0x20
STATUS_MASK  macro  include/scsi/scsi.h  287  #define STATUS_MASK 0xfe
NO_SENSE  macro  include/scsi/scsi.h  293  #define NO_SENSE 0x00
RECOVERED_ERROR  macro  include/scsi/scsi.h  294  #define RECOVERED_ERROR 0x01
NOT_READY  macro  include/scsi/scsi.h  295  #define NOT_READY 0x02
MEDIUM_ERROR  macro  include/scsi/scsi.h  296  #define MEDIUM_ERROR 0x03
HARDWARE_ERROR  macro  include/scsi/scsi.h  297  #define HARDWARE_ERROR 0x04
ILLEGAL_REQUEST  macro  include/scsi/scsi.h  298  #define ILLEGAL_REQUEST 0x05
UNIT_ATTENTION  macro  include/scsi/scsi.h  299  #define UNIT_ATTENTION 0x06
DATA_PROTECT  macro  include/scsi/scsi.h  300  #define DATA_PROTECT 0x07
BLANK_CHECK  macro  include/scsi/scsi.h  301  #define BLANK_CHECK 0x08
COPY_ABORTED  macro  include/scsi/scsi.h  302  #define COPY_ABORTED 0x0a
ABORTED_COMMAND  macro  include/scsi/scsi.h  303  #define ABORTED_COMMAND 0x0b
VOLUME_OVERFLOW  macro  include/scsi/scsi.h  304  #define VOLUME_OVERFLOW 0x0d
MISCOMPARE  macro  include/scsi/scsi.h  305  #define MISCOMPARE 0x0e
TYPE_DISK  macro  include/scsi/scsi.h  313  #define TYPE_DISK 0x00
TYPE_TAPE  macro  include/scsi/scsi.h  314  #define TYPE_TAPE 0x01
TYPE_PRINTER  macro  include/scsi/scsi.h  315  #define TYPE_PRINTER 0x02
TYPE_PROCESSOR  macro  include/scsi/scsi.h  316  #define TYPE_PROCESSOR 0x03
TYPE_WORM  macro  include/scsi/scsi.h  317  #define TYPE_WORM 0x04
TYPE_ROM  macro  include/scsi/scsi.h  318  #define TYPE_ROM 0x05
TYPE_SCANNER  macro  include/scsi/scsi.h  319  #define TYPE_SCANNER 0x06
TYPE_MOD  macro  include/scsi/scsi.h  320  #define TYPE_MOD 0x07
TYPE_MEDIUM_CHANGER  macro  include/scsi/scsi.h  322  #define TYPE_MEDIUM_CHANGER 0x08
TYPE_COMM  macro  include/scsi/scsi.h  323  #define TYPE_COMM 0x09
TYPE_RAID  macro  include/scsi/scsi.h  324  #define TYPE_RAID 0x0c
TYPE_ENCLOSURE  macro  include/scsi/scsi.h  325  #define TYPE_ENCLOSURE 0x0d
TYPE_RBC  macro  include/scsi/scsi.h  326  #define TYPE_RBC 0x0e
TYPE_OSD  macro  include/scsi/scsi.h  327  #define TYPE_OSD 0x11
TYPE_NO_LUN  macro  include/scsi/scsi.h  328  #define TYPE_NO_LUN 0x7f
scsi_protocol  enum  include/scsi/scsi.h  331  enum scsi_protocol { SCSI_PROTOCOL_FCP = 0, SCSI_PROTOCOL_SPI = 1, SCSI_PROTOCOL_SSA = 2, SCSI_PROTOCOL_SBP = 3, SCSI_PROTOCOL_SRP = 4, SCSI_PROTOCOL_ISCSI = 5, SCSI_PROTOCOL_SAS = 6, SCSI_PROTOCOL_ADT = 7, SCSI_PROTOCOL_ATA = 8, SCSI_PROTOCOL_UNSPEC = 0xf, };
scsi_device_type  prototype  include/scsi/scsi.h  345  extern const char * scsi_device_type(unsigned type);
ccs_modesel_head  struct  include/scsi/scsi.h  351  struct ccs_modesel_head { __u8 _r1; __u8 medium; __u8 _r2; __u8 block_desc_length; __u8 density; __u8 number_blocks_hi; __u8 number_blocks_med; __u8 number_blocks_lo; __u8 _r3; __u8 block_length_hi; __u8 block_length_med; __u8 block_length_lo; };
scsi_lun  struct  include/scsi/scsi.h  369  struct scsi_lun { __u8 scsi_lun[8]; };
SCSI_W_LUN_BASE  macro  include/scsi/scsi.h  376  #define SCSI_W_LUN_BASE 0xc100
SCSI_W_LUN_REPORT_LUNS  macro  include/scsi/scsi.h  377  #define SCSI_W_LUN_REPORT_LUNS (SCSI_W_LUN_BASE + 1)
SCSI_W_LUN_ACCESS_CONTROL  macro  include/scsi/scsi.h  378  #define SCSI_W_LUN_ACCESS_CONTROL (SCSI_W_LUN_BASE + 2)
SCSI_W_LUN_TARGET_LOG_PAGE  macro  include/scsi/scsi.h  379  #define SCSI_W_LUN_TARGET_LOG_PAGE (SCSI_W_LUN_BASE + 3)
scsi_is_wlun  function  include/scsi/scsi.h  381  static inline int scsi_is_wlun(unsigned int lun)
COMMAND_COMPLETE  macro  include/scsi/scsi.h  391  #define COMMAND_COMPLETE 0x00
EXTENDED_MESSAGE  macro  include/scsi/scsi.h  392  #define EXTENDED_MESSAGE 0x01
EXTENDED_MODIFY_DATA_POINTER  macro  include/scsi/scsi.h  393  #define EXTENDED_MODIFY_DATA_POINTER 0x00
EXTENDED_SDTR  macro  include/scsi/scsi.h  394  #define EXTENDED_SDTR 0x01
EXTENDED_EXTENDED_IDENTIFY  macro  include/scsi/scsi.h  395  #define EXTENDED_EXTENDED_IDENTIFY 0x02
EXTENDED_WDTR  macro  include/scsi/scsi.h  396  #define EXTENDED_WDTR 0x03
EXTENDED_PPR  macro  include/scsi/scsi.h  397  #define EXTENDED_PPR 0x04
EXTENDED_MODIFY_BIDI_DATA_PTR  macro  include/scsi/scsi.h  398  #define EXTENDED_MODIFY_BIDI_DATA_PTR 0x05
SAVE_POINTERS  macro  include/scsi/scsi.h  399  #define SAVE_POINTERS 0x02
RESTORE_POINTERS  macro  include/scsi/scsi.h  400  #define RESTORE_POINTERS 0x03
DISCONNECT  macro  include/scsi/scsi.h  401  #define DISCONNECT 0x04
INITIATOR_ERROR  macro  include/scsi/scsi.h  402  #define INITIATOR_ERROR 0x05
ABORT_TASK_SET  macro  include/scsi/scsi.h  403  #define ABORT_TASK_SET 0x06
MESSAGE_REJECT  macro  include/scsi/scsi.h  404  #define MESSAGE_REJECT 0x07
NOP  macro  include/scsi/scsi.h  405  #define NOP 0x08
MSG_PARITY_ERROR  macro  include/scsi/scsi.h  406  #define MSG_PARITY_ERROR 0x09
LINKED_CMD_COMPLETE  macro  include/scsi/scsi.h  407  #define LINKED_CMD_COMPLETE 0x0a
LINKED_FLG_CMD_COMPLETE  macro  include/scsi/scsi.h  408  #define LINKED_FLG_CMD_COMPLETE 0x0b
TARGET_RESET  macro  include/scsi/scsi.h  409  #define TARGET_RESET 0x0c
ABORT_TASK  macro  include/scsi/scsi.h  410  #define ABORT_TASK 0x0d
CLEAR_TASK_SET  macro  include/scsi/scsi.h  411  #define CLEAR_TASK_SET 0x0e
INITIATE_RECOVERY  macro  include/scsi/scsi.h  412  #define INITIATE_RECOVERY 0x0f
RELEASE_RECOVERY  macro  include/scsi/scsi.h  413  #define RELEASE_RECOVERY 0x10
CLEAR_ACA  macro  include/scsi/scsi.h  414  #define CLEAR_ACA 0x16
LOGICAL_UNIT_RESET  macro  include/scsi/scsi.h  415  #define LOGICAL_UNIT_RESET 0x17
SIMPLE_QUEUE_TAG  macro  include/scsi/scsi.h  416  #define SIMPLE_QUEUE_TAG 0x20
HEAD_OF_QUEUE_TAG  macro  include/scsi/scsi.h  417  #define HEAD_OF_QUEUE_TAG 0x21
ORDERED_QUEUE_TAG  macro  include/scsi/scsi.h  418  #define ORDERED_QUEUE_TAG 0x22
IGNORE_WIDE_RESIDUE  macro  include/scsi/scsi.h  419  #define IGNORE_WIDE_RESIDUE 0x23
ACA  macro  include/scsi/scsi.h  420  #define ACA 0x24
QAS_REQUEST  macro  include/scsi/scsi.h  421  #define QAS_REQUEST 0x55
BUS_DEVICE_RESET  macro  include/scsi/scsi.h  424  #define BUS_DEVICE_RESET TARGET_RESET
ABORT  macro  include/scsi/scsi.h  425  #define ABORT ABORT_TASK_SET
DID_OK  macro  include/scsi/scsi.h  431  #define DID_OK 0x00
DID_NO_CONNECT  macro  include/scsi/scsi.h  432  #define DID_NO_CONNECT 0x01
DID_BUS_BUSY  macro  include/scsi/scsi.h  433  #define DID_BUS_BUSY 0x02
DID_TIME_OUT  macro  include/scsi/scsi.h  434  #define DID_TIME_OUT 0x03
DID_BAD_TARGET  macro  include/scsi/scsi.h  435  #define DID_BAD_TARGET 0x04
DID_ABORT  macro  include/scsi/scsi.h  436  #define DID_ABORT 0x05
DID_PARITY  macro  include/scsi/scsi.h  437  #define DID_PARITY 0x06
DID_ERROR  macro  include/scsi/scsi.h  438  #define DID_ERROR 0x07
DID_RESET  macro  include/scsi/scsi.h  439  #define DID_RESET 0x08
DID_BAD_INTR  macro  include/scsi/scsi.h  440  #define DID_BAD_INTR 0x09
DID_PASSTHROUGH  macro  include/scsi/scsi.h  441  #define DID_PASSTHROUGH 0x0a
DID_SOFT_ERROR  macro  include/scsi/scsi.h  442  #define DID_SOFT_ERROR 0x0b
DID_IMM_RETRY  macro  include/scsi/scsi.h  443  #define DID_IMM_RETRY 0x0c
DID_REQUEUE  macro  include/scsi/scsi.h  444  #define DID_REQUEUE 0x0d
DID_TRANSPORT_DISRUPTED  macro  include/scsi/scsi.h  446  #define DID_TRANSPORT_DISRUPTED 0x0e
DID_TRANSPORT_FAILFAST  macro  include/scsi/scsi.h  450  #define DID_TRANSPORT_FAILFAST 0x0f
DID_TARGET_FAILURE  macro  include/scsi/scsi.h  451  #define DID_TARGET_FAILURE 0x10
DID_NEXUS_FAILURE  macro  include/scsi/scsi.h  453  #define DID_NEXUS_FAILURE 0x11
DRIVER_OK  macro  include/scsi/scsi.h  455  #define DRIVER_OK 0x00
DRIVER_BUSY  macro  include/scsi/scsi.h  461  #define DRIVER_BUSY 0x01
DRIVER_SOFT  macro  include/scsi/scsi.h  462  #define DRIVER_SOFT 0x02
DRIVER_MEDIA  macro  include/scsi/scsi.h  463  #define DRIVER_MEDIA 0x03
DRIVER_ERROR  macro  include/scsi/scsi.h  464  #define DRIVER_ERROR 0x04
DRIVER_INVALID  macro  include/scsi/scsi.h  466  #define DRIVER_INVALID 0x05
DRIVER_TIMEOUT  macro  include/scsi/scsi.h  467  #define DRIVER_TIMEOUT 0x06
DRIVER_HARD  macro  include/scsi/scsi.h  468  #define DRIVER_HARD 0x07
DRIVER_SENSE  macro  include/scsi/scsi.h  469  #define DRIVER_SENSE 0x08
NEEDS_RETRY  macro  include/scsi/scsi.h  475  #define NEEDS_RETRY 0x2001
SUCCESS  macro  include/scsi/scsi.h  476  #define SUCCESS 0x2002
FAILED  macro  include/scsi/scsi.h  477  #define FAILED 0x2003
QUEUED  macro  include/scsi/scsi.h  478  #define QUEUED 0x2004
SOFT_ERROR  macro  include/scsi/scsi.h  479  #define SOFT_ERROR 0x2005
ADD_TO_MLQUEUE  macro  include/scsi/scsi.h  480  #define ADD_TO_MLQUEUE 0x2006
TIMEOUT_ERROR  macro  include/scsi/scsi.h  481  #define TIMEOUT_ERROR 0x2007
SCSI_RETURN_NOT_HANDLED  macro  include/scsi/scsi.h  482  #define SCSI_RETURN_NOT_HANDLED 0x2008
FAST_IO_FAIL  macro  include/scsi/scsi.h  483  #define FAST_IO_FAIL 0x2009
TARGET_ERROR  macro  include/scsi/scsi.h  484  #define TARGET_ERROR 0x200A
SCSI_MLQUEUE_HOST_BUSY  macro  include/scsi/scsi.h  489  #define SCSI_MLQUEUE_HOST_BUSY 0x1055
SCSI_MLQUEUE_DEVICE_BUSY  macro  include/scsi/scsi.h  490  #define SCSI_MLQUEUE_DEVICE_BUSY 0x1056
SCSI_MLQUEUE_EH_RETRY  macro  include/scsi/scsi.h  491  #define SCSI_MLQUEUE_EH_RETRY 0x1057
SCSI_MLQUEUE_TARGET_BUSY  macro  include/scsi/scsi.h  492  #define SCSI_MLQUEUE_TARGET_BUSY 0x1058
status_byte  macro  include/scsi/scsi.h  504  #define status_byte(result) (((result) >> 1) & 0x7f)
msg_byte  macro  include/scsi/scsi.h  505  #define msg_byte(result) (((result) >> 8) & 0xff)
host_byte  macro  include/scsi/scsi.h  506  #define host_byte(result) (((result) >> 16) & 0xff)
driver_byte  macro  include/scsi/scsi.h  507  #define driver_byte(result) (((result) >> 24) & 0xff)
sense_class  macro  include/scsi/scsi.h  509  #define sense_class(sense) (((sense) >> 4) & 0x7)
sense_error  macro  include/scsi/scsi.h  510  #define sense_error(sense) ((sense) & 0xf)
sense_valid  macro  include/scsi/scsi.h  511  #define sense_valid(sense) ((sense) & 0x80)
FORMAT_UNIT_TIMEOUT  macro  include/scsi/scsi.h  516  #define FORMAT_UNIT_TIMEOUT (2 * 60 * 60 * HZ)
START_STOP_TIMEOUT  macro  include/scsi/scsi.h  517  #define START_STOP_TIMEOUT (60 * HZ)
MOVE_MEDIUM_TIMEOUT  macro  include/scsi/scsi.h  518  #define MOVE_MEDIUM_TIMEOUT (5 * 60 * HZ)
READ_ELEMENT_STATUS_TIMEOUT  macro  include/scsi/scsi.h  519  #define READ_ELEMENT_STATUS_TIMEOUT (5 * 60 * HZ)
READ_DEFECT_DATA_TIMEOUT  macro  include/scsi/scsi.h  520  #define READ_DEFECT_DATA_TIMEOUT (60 * HZ )
IDENTIFY_BASE  macro  include/scsi/scsi.h  523  #define IDENTIFY_BASE 0x80
IDENTIFY  macro  include/scsi/scsi.h  524  #define IDENTIFY(can_disconnect,lun) (IDENTIFY_BASE | ((can_disconnect) ?  0x40 : 0) | ((lun) & 0x07))
SCSI_UNKNOWN  macro  include/scsi/scsi.h  535  #define SCSI_UNKNOWN 0
SCSI_1  macro  include/scsi/scsi.h  536  #define SCSI_1 1
SCSI_1_CCS  macro  include/scsi/scsi.h  537  #define SCSI_1_CCS 2
SCSI_2  macro  include/scsi/scsi.h  538  #define SCSI_2 3
SCSI_3  macro  include/scsi/scsi.h  539  #define SCSI_3 4
SCSI_SPC_2  macro  include/scsi/scsi.h  540  #define SCSI_SPC_2 5
SCSI_SPC_3  macro  include/scsi/scsi.h  541  #define SCSI_SPC_3 6
SCSI_INQ_PQ_CON  macro  include/scsi/scsi.h  546  #define SCSI_INQ_PQ_CON 0x00
SCSI_INQ_PQ_NOT_CON  macro  include/scsi/scsi.h  547  #define SCSI_INQ_PQ_NOT_CON 0x01
SCSI_INQ_PQ_NOT_CAP  macro  include/scsi/scsi.h  548  #define SCSI_INQ_PQ_NOT_CAP 0x03
SCSI_IOCTL_GET_IDLUN  macro  include/scsi/scsi.h  558  #define SCSI_IOCTL_GET_IDLUN 0x5382
SCSI_IOCTL_PROBE_HOST  macro  include/scsi/scsi.h  563  #define SCSI_IOCTL_PROBE_HOST 0x5385
SCSI_IOCTL_GET_BUS_NUMBER  macro  include/scsi/scsi.h  566  #define SCSI_IOCTL_GET_BUS_NUMBER 0x5386
SCSI_IOCTL_GET_PCI  macro  include/scsi/scsi.h  569  #define SCSI_IOCTL_GET_PCI 0x5387
scsi_to_u32  function  include/scsi/scsi.h  572  static inline __u32 scsi_to_u32(__u8 *ptr)
_SCSI_SCSI_HOST_H  macro  include/scsi/scsi_host.h  2  #define _SCSI_SCSI_HOST_H
SG_NONE  macro  include/scsi/scsi_host.h  36  #define SG_NONE 0
SG_ALL  macro  include/scsi/scsi_host.h  37  #define SG_ALL SCSI_MAX_SG_SEGMENTS
MODE_UNKNOWN  macro  include/scsi/scsi_host.h  39  #define MODE_UNKNOWN 0x00
MODE_INITIATOR  macro  include/scsi/scsi_host.h  40  #define MODE_INITIATOR 0x01
MODE_TARGET  macro  include/scsi/scsi_host.h  41  #define MODE_TARGET 0x02
DISABLE_CLUSTERING  macro  include/scsi/scsi_host.h  43  #define DISABLE_CLUSTERING 0
ENABLE_CLUSTERING  macro  include/scsi/scsi_host.h  44  #define ENABLE_CLUSTERING 1
scsi_host_template  struct  include/scsi/scsi_host.h  52  struct scsi_host_template { struct module *module; const char *name; int (* detect)(struct scsi_host_template *); int (* release)(struct Scsi_Host *); const char *(* info)(struct Scsi_Host *); int (* ioctl)(struct scsi_device *dev, int cmd, void __user *arg); int (* compat_ioctl)(struct scsi_device *dev, int cmd, void __user *arg); int (* queuecommand)(struct Scsi_Host *, struct scsi_cmnd *); int (* transfer_response)(struct scsi_cmnd *,void (*done)(struct scsi_cmnd *)); int (* eh_abort_handler)(struct scsi_cmnd *); int (* eh_device_reset_handler)(struct scsi_cmnd *); int (* eh_target_reset_handler)(struct scsi_cmnd *); int (* eh_bus_reset_handler)(struct scsi_cmnd *); int (* eh_host_reset_handler)(struct scsi_cmnd *); int (* slave_alloc)(struct scsi_device *); int (* slave_configure)(struct scsi_device *); void (* slave_destroy)(struct scsi_device *); int (* target_alloc)(struct scsi_target *); void (* target_destroy)(struct scsi_target *); int (* scan_finished)(struct Scsi_Host *, unsigned long); void (* scan_start)(struct Scsi_Host *); int (* change_queue_depth)(struct scsi_device *, int, int); int (* change_queue_type)(struct scsi_device *, int); int (* bios_param)(struct scsi_device *, struct block_device *,sector_t, int []); void (*unlock_native_capacity)(struct scsi_device *); int (*proc_info)(struct Scsi_Host *, char *, char **, off_t, int, int); enum blk_eh_timer_return (*eh_timed_out)(struct scsi_cmnd *); int (*host_reset)(struct Scsi_Host *shost, int reset_type); #define SCSI_ADAPTER_RESET 1 #define SCSI_FIRMWARE_RESET 2 const char *proc_name; struct proc_dir_entry *proc_dir; int can_queue; int this_id; unsigned short sg_tablesize; unsigned short sg_prot_tablesize; unsigned short max_sectors; unsigned long dma_boundary; #define SCSI_DEFAULT_MAX_SECTORS 1024 short cmd_per_lun; unsigned char present; unsigned supported_mode:2; unsigned unchecked_isa_dma:1; unsigned use_clustering:1; unsigned emulated:1; unsigned skip_settle_delay:1; unsigned ordered_tag:1; unsigned int max_host_blocked; #define SCSI_DEFAULT_HOST_BLOCKED 7 struct device_attribute **shost_attrs; struct device_attribute **sdev_attrs; struct list_head legacy_hosts; u64 vendor_id; };
DEF_SCSI_QCMD  macro  include/scsi/scsi_host.h  525  #define DEF_SCSI_QCMD(func_name) int func_name(struct Scsi_Host *shost, struct scsi_cmnd *cmd) { unsigned long irq_flags; int rc; spin_lock_irqsave(shost->host_lock, irq_flags); scsi_cmd_get_serial(shost, cmd); rc = func_name##_lck (cmd, cmd->scsi_done); spin_unlock_irqrestore(shost->host_lock, irq_flags); return rc; }
scsi_host_state  enum  include/scsi/scsi_host.h  543  enum scsi_host_state { SHOST_CREATED = 1, SHOST_RUNNING, SHOST_CANCEL, SHOST_DEL, SHOST_RECOVERY, SHOST_CANCEL_RECOVERY, SHOST_DEL_RECOVERY, };
Scsi_Host  struct  include/scsi/scsi_host.h  553  struct Scsi_Host { struct list_head __devices; struct list_head __targets; struct scsi_host_cmd_pool *cmd_pool; spinlock_t free_list_lock; struct list_head free_list; struct list_head starved_list; spinlock_t default_lock; spinlock_t *host_lock; struct mutex scan_mutex; struct list_head eh_cmd_q; struct task_struct * ehandler; struct completion * eh_action; wait_queue_head_t host_wait; struct scsi_host_template *hostt; struct scsi_transport_template *transportt; struct blk_queue_tag *bqt; unsigned int host_busy; unsigned int host_failed; unsigned int host_eh_scheduled; unsigned int host_no; int resetting; unsigned long last_reset; unsigned int max_id; unsigned int max_lun; unsigned int max_channel; unsigned int unique_id; unsigned short max_cmd_len; int this_id; int can_queue; short cmd_per_lun; short unsigned int sg_tablesize; short unsigned int sg_prot_tablesize; short unsigned int max_sectors; unsigned long dma_boundary; unsigned long cmd_serial_number; unsigned active_mode:2; unsigned unchecked_isa_dma:1; unsigned use_clustering:1; unsigned use_blk_tcq:1; unsigned host_self_blocked:1; unsigned reverse_ordering:1; unsigned ordered_tag:1; unsigned tmf_in_progress:1; unsigned async_scan:1; unsigned eh_noresume:1; char work_q_name[20]; struct workqueue_struct *work_q; unsigned int host_blocked; unsigned int max_host_blocked; unsigned int prot_capabilities; unsigned char prot_guard_type; struct request_queue *uspace_req_q; unsigned long base; unsigned long io_port; unsigned char n_io_port; unsigned char dma_channel; unsigned int irq; enum scsi_host_state shost_state; struct device shost_gendev, shost_dev; struct list_head sht_legacy_list; void *shost_data; struct device *dma_dev; unsigned long hostdata[0] };
class_to_shost  macro  include/scsi/scsi_host.h  744  #define class_to_shost(d) container_of(d, struct Scsi_Host, shost_dev)
shost_printk  macro  include/scsi/scsi_host.h  747  #define shost_printk(prefix,shost,fmt,a...) dev_printk(prefix, &(shost)->shost_gendev, fmt, ##a)
shost_priv  function  include/scsi/scsi_host.h  750  static inline void *shost_priv(struct Scsi_Host *shost)
scsi_is_host_device  prototype  include/scsi/scsi_host.h  755  int scsi_is_host_device(const struct device *);
dev_to_shost  function  include/scsi/scsi_host.h  757  static inline struct Scsi_Host *dev_to_shost(struct device *dev)
scsi_host_in_recovery  function  include/scsi/scsi_host.h  767  static inline int scsi_host_in_recovery(struct Scsi_Host *shost)
scsi_queue_work  prototype  include/scsi/scsi_host.h  775  extern int scsi_queue_work(struct Scsi_Host *,struct work_struct *);
scsi_flush_work  prototype  include/scsi/scsi_host.h  776  extern void scsi_flush_work(struct Scsi_Host *);
scsi_host_alloc  prototype  include/scsi/scsi_host.h  778  extern struct Scsi_Host *scsi_host_alloc(struct scsi_host_template *,int);
scsi_add_host_with_dma  prototype  include/scsi/scsi_host.h  779  extern int __must_check scsi_add_host_with_dma(struct Scsi_Host *,struct device *,struct device *);
scsi_scan_host  prototype  include/scsi/scsi_host.h  782  extern void scsi_scan_host(struct Scsi_Host *);
scsi_rescan_device  prototype  include/scsi/scsi_host.h  783  extern void scsi_rescan_device(struct device *);
scsi_remove_host  prototype  include/scsi/scsi_host.h  784  extern void scsi_remove_host(struct Scsi_Host *);
scsi_host_get  prototype  include/scsi/scsi_host.h  785  extern struct Scsi_Host *scsi_host_get(struct Scsi_Host *);
scsi_host_put  prototype  include/scsi/scsi_host.h  786  extern void scsi_host_put(struct Scsi_Host *t);
scsi_host_lookup  prototype  include/scsi/scsi_host.h  787  extern struct Scsi_Host *scsi_host_lookup(unsigned short);
scsi_host_state_name  prototype  include/scsi/scsi_host.h  788  extern const char *scsi_host_state_name(enum scsi_host_state);
scsi_cmd_get_serial  prototype  include/scsi/scsi_host.h  789  extern void scsi_cmd_get_serial(struct Scsi_Host *,struct scsi_cmnd *);
scsi_calculate_bounce_limit  prototype  include/scsi/scsi_host.h  791  extern u64 scsi_calculate_bounce_limit(struct Scsi_Host *);
scsi_add_host  function  include/scsi/scsi_host.h  793  static inline int __must_check scsi_add_host(struct Scsi_Host *host,struct device *dev)
scsi_get_device  function  include/scsi/scsi_host.h  799  static inline struct device *scsi_get_device(struct Scsi_Host *shost)
scsi_host_scan_allowed  function  include/scsi/scsi_host.h  808  static inline int scsi_host_scan_allowed(struct Scsi_Host *shost)
scsi_unblock_requests  prototype  include/scsi/scsi_host.h  814  extern void scsi_unblock_requests(struct Scsi_Host *);
scsi_block_requests  prototype  include/scsi/scsi_host.h  815  extern void scsi_block_requests(struct Scsi_Host *);
__scsi_alloc_queue  prototype  include/scsi/scsi_host.h  819  extern struct request_queue *__scsi_alloc_queue(struct Scsi_Host *shost,void (*) (struct request_queue *));
scsi_free_host_dev  prototype  include/scsi/scsi_host.h  828  extern void scsi_free_host_dev(struct scsi_device *);
scsi_get_host_dev  prototype  include/scsi/scsi_host.h  829  extern struct scsi_device *scsi_get_host_dev(struct Scsi_Host *);
scsi_host_prot_capabilities  enum  include/scsi/scsi_host.h  838  enum scsi_host_prot_capabilities { SHOST_DIF_TYPE1_PROTECTION = 1 << 0, SHOST_DIF_TYPE2_PROTECTION = 1 << 1, SHOST_DIF_TYPE3_PROTECTION = 1 << 2, SHOST_DIX_TYPE0_PROTECTION = 1 << 3, SHOST_DIX_TYPE1_PROTECTION = 1 << 4, SHOST_DIX_TYPE2_PROTECTION = 1 << 5, SHOST_DIX_TYPE3_PROTECTION = 1 << 6, };
scsi_host_set_prot  function  include/scsi/scsi_host.h  854  static inline void scsi_host_set_prot(struct Scsi_Host *shost,unsigned int mask)
scsi_host_get_prot  function  include/scsi/scsi_host.h  859  static inline unsigned int scsi_host_get_prot(struct Scsi_Host *shost)
scsi_host_prot_dma  function  include/scsi/scsi_host.h  864  static inline int scsi_host_prot_dma(struct Scsi_Host *shost)
scsi_host_dif_capable  function  include/scsi/scsi_host.h  869  static inline unsigned int scsi_host_dif_capable(struct Scsi_Host *shost,unsigned int target_type)
scsi_host_dix_capable  function  include/scsi/scsi_host.h  882  static inline unsigned int scsi_host_dix_capable(struct Scsi_Host *shost,unsigned int target_type)
scsi_host_guard_type  enum  include/scsi/scsi_host.h  907  enum scsi_host_guard_type { SHOST_DIX_GUARD_CRC = 1 << 0, SHOST_DIX_GUARD_IP = 1 << 1, };
scsi_host_set_guard  function  include/scsi/scsi_host.h  912  static inline void scsi_host_set_guard(struct Scsi_Host *shost,unsigned char type)
scsi_host_get_guard  function  include/scsi/scsi_host.h  917  static inline unsigned char scsi_host_get_guard(struct Scsi_Host *shost)
scsi_register  prototype  include/scsi/scsi_host.h  923  extern struct Scsi_Host *scsi_register(struct scsi_host_template *,int);
scsi_unregister  prototype  include/scsi/scsi_host.h  924  extern void scsi_unregister(struct Scsi_Host *);
scsi_host_set_state  prototype  include/scsi/scsi_host.h  925  extern int scsi_host_set_state(struct Scsi_Host *,enum scsi_host_state);
_SCSI_SCSI_CMND_H  macro  include/scsi/scsi_cmnd.h  2  #define _SCSI_SCSI_CMND_H
MAX_COMMAND_SIZE  macro  include/scsi/scsi_cmnd.h  27  #define MAX_COMMAND_SIZE 16
scsi_data_buffer  struct  include/scsi/scsi_cmnd.h  32  struct scsi_data_buffer { struct sg_table table; unsigned length; int resid; };
scsi_pointer  struct  include/scsi/scsi_cmnd.h  39  struct scsi_pointer { char *ptr; int this_residual; struct scatterlist *buffer; int buffers_residual; dma_addr_t dma_handle; volatile int Status; volatile int Message; volatile int have_data_in; volatile int sent_command; volatile int phase; };
scsi_cmnd  struct  include/scsi/scsi_cmnd.h  54  struct scsi_cmnd { struct scsi_device *device; struct list_head list; struct list_head eh_entry; int eh_eflags; unsigned long serial_number; unsigned long jiffies_at_alloc; int retries; int allowed; unsigned char prot_op; unsigned char prot_type; unsigned short cmd_len; enum dma_data_direction sc_data_direction; unsigned char *cmnd; struct scsi_data_buffer sdb; struct scsi_data_buffer *prot_sdb; unsigned underflow; unsigned transfersize; struct request *request; #define SCSI_SENSE_BUFFERSIZE 96 unsigned char *sense_buffer; void (*scsi_done) (struct scsi_cmnd *); struct scsi_pointer SCp; unsigned char *host_scribble; int result; unsigned char tag; };
scsi_cmd_to_driver  function  include/scsi/scsi_cmnd.h  136  static inline struct scsi_driver *scsi_cmd_to_driver(struct scsi_cmnd *cmd)
scsi_get_command  prototype  include/scsi/scsi_cmnd.h  141  extern struct scsi_cmnd *scsi_get_command(struct scsi_device *,gfp_t);
__scsi_get_command  prototype  include/scsi/scsi_cmnd.h  142  extern struct scsi_cmnd *__scsi_get_command(struct Scsi_Host *,gfp_t);
scsi_put_command  prototype  include/scsi/scsi_cmnd.h  143  extern void scsi_put_command(struct scsi_cmnd *);
__scsi_put_command  prototype  include/scsi/scsi_cmnd.h  144  extern void __scsi_put_command(struct Scsi_Host *,struct scsi_cmnd *,struct device *);
scsi_finish_command  prototype  include/scsi/scsi_cmnd.h  146  extern void scsi_finish_command(struct scsi_cmnd *cmd);
scsi_kmap_atomic_sg  prototype  include/scsi/scsi_cmnd.h  148  extern void *scsi_kmap_atomic_sg(struct scatterlist *sg,int sg_count,size_t *offset, size_t *len);
scsi_kunmap_atomic_sg  prototype  include/scsi/scsi_cmnd.h  150  extern void scsi_kunmap_atomic_sg(void *virt);
scsi_init_io  prototype  include/scsi/scsi_cmnd.h  152  extern int scsi_init_io(struct scsi_cmnd *cmd,gfp_t gfp_mask);
scsi_release_buffers  prototype  include/scsi/scsi_cmnd.h  153  extern void scsi_release_buffers(struct scsi_cmnd *cmd);
scsi_dma_map  prototype  include/scsi/scsi_cmnd.h  155  extern int scsi_dma_map(struct scsi_cmnd *cmd);
scsi_dma_unmap  prototype  include/scsi/scsi_cmnd.h  156  extern void scsi_dma_unmap(struct scsi_cmnd *cmd);
scsi_allocate_command  prototype  include/scsi/scsi_cmnd.h  158  struct scsi_cmnd *scsi_allocate_command(gfp_t gfp_mask);
scsi_free_command  prototype  include/scsi/scsi_cmnd.h  159  void scsi_free_command(gfp_t gfp_mask,struct scsi_cmnd *cmd);
scsi_sg_count  function  include/scsi/scsi_cmnd.h  161  static inline unsigned scsi_sg_count(struct scsi_cmnd *cmd)
scsi_sglist  function  include/scsi/scsi_cmnd.h  166  static inline struct scatterlist *scsi_sglist(struct scsi_cmnd *cmd)
scsi_bufflen  function  include/scsi/scsi_cmnd.h  171  static inline unsigned scsi_bufflen(struct scsi_cmnd *cmd)
scsi_set_resid  function  include/scsi/scsi_cmnd.h  176  static inline void scsi_set_resid(struct scsi_cmnd *cmd,int resid)
scsi_get_resid  function  include/scsi/scsi_cmnd.h  181  static inline int scsi_get_resid(struct scsi_cmnd *cmd)
scsi_for_each_sg  macro  include/scsi/scsi_cmnd.h  186  #define scsi_for_each_sg(cmd,sg,nseg,__i) for_each_sg(scsi_sglist(cmd), sg, nseg, __i)
scsi_bidi_cmnd  function  include/scsi/scsi_cmnd.h  189  static inline int scsi_bidi_cmnd(struct scsi_cmnd *cmd)
scsi_in  function  include/scsi/scsi_cmnd.h  195  static inline struct scsi_data_buffer *scsi_in(struct scsi_cmnd *cmd)
scsi_out  function  include/scsi/scsi_cmnd.h  201  static inline struct scsi_data_buffer *scsi_out(struct scsi_cmnd *cmd)
scsi_sg_copy_from_buffer  function  include/scsi/scsi_cmnd.h  206  static inline int scsi_sg_copy_from_buffer(struct scsi_cmnd *cmd,void *buf, int buflen)
scsi_sg_copy_to_buffer  function  include/scsi/scsi_cmnd.h  213  static inline int scsi_sg_copy_to_buffer(struct scsi_cmnd *cmd,void *buf, int buflen)
scsi_prot_operations  enum  include/scsi/scsi_cmnd.h  224  enum scsi_prot_operations { SCSI_PROT_NORMAL = 0, SCSI_PROT_READ_INSERT, SCSI_PROT_WRITE_STRIP, SCSI_PROT_READ_STRIP, SCSI_PROT_WRITE_INSERT, SCSI_PROT_READ_PASS, SCSI_PROT_WRITE_PASS, };
scsi_set_prot_op  function  include/scsi/scsi_cmnd.h  241  static inline void scsi_set_prot_op(struct scsi_cmnd *scmd,unsigned char op)
scsi_get_prot_op  function  include/scsi/scsi_cmnd.h  246  static inline unsigned char scsi_get_prot_op(struct scsi_cmnd *scmd)
scsi_prot_target_type  enum  include/scsi/scsi_cmnd.h  257  enum scsi_prot_target_type { SCSI_PROT_DIF_TYPE0 = 0, SCSI_PROT_DIF_TYPE1, SCSI_PROT_DIF_TYPE2, SCSI_PROT_DIF_TYPE3, };
scsi_set_prot_type  function  include/scsi/scsi_cmnd.h  264  static inline void scsi_set_prot_type(struct scsi_cmnd *scmd,unsigned char type)
scsi_get_prot_type  function  include/scsi/scsi_cmnd.h  269  static inline unsigned char scsi_get_prot_type(struct scsi_cmnd *scmd)
scsi_get_lba  function  include/scsi/scsi_cmnd.h  274  static inline sector_t scsi_get_lba(struct scsi_cmnd *scmd)
scsi_prot_sg_count  function  include/scsi/scsi_cmnd.h  279  static inline unsigned scsi_prot_sg_count(struct scsi_cmnd *cmd)
scsi_prot_sglist  function  include/scsi/scsi_cmnd.h  284  static inline struct scatterlist *scsi_prot_sglist(struct scsi_cmnd *cmd)
scsi_prot  function  include/scsi/scsi_cmnd.h  289  static inline struct scsi_data_buffer *scsi_prot(struct scsi_cmnd *cmd)
scsi_for_each_prot_sg  macro  include/scsi/scsi_cmnd.h  294  #define scsi_for_each_prot_sg(cmd,sg,nseg,__i) for_each_sg(scsi_prot_sglist(cmd), sg, nseg, __i)
set_msg_byte  function  include/scsi/scsi_cmnd.h  297  static inline void set_msg_byte(struct scsi_cmnd *cmd,char status)
set_host_byte  function  include/scsi/scsi_cmnd.h  302  static inline void set_host_byte(struct scsi_cmnd *cmd,char status)
set_driver_byte  function  include/scsi/scsi_cmnd.h  307  static inline void set_driver_byte(struct scsi_cmnd *cmd,char status)
_SCSI_SCSI_DEVICE_H  macro  include/scsi/scsi_device.h  2  #define _SCSI_SCSI_DEVICE_H
scsi_mode_data  struct  include/scsi/scsi_device.h  17  struct scsi_mode_data { __u32 length; __u16 block_descriptor_length; __u8 medium_type; __u8 device_specific; __u8 header_length; __u8 longlba:1; };
scsi_device_state  enum  include/scsi/scsi_device.h  31  enum scsi_device_state { SDEV_CREATED = 1, SDEV_RUNNING, SDEV_CANCEL, SDEV_DEL, SDEV_QUIESCE, SDEV_OFFLINE, SDEV_TRANSPORT_OFFLINE, SDEV_BLOCK, SDEV_CREATED_BLOCK, };
scsi_device_event  enum  include/scsi/scsi_device.h  53  enum scsi_device_event { SDEV_EVT_MEDIA_CHANGE = 1, SDEV_EVT_LAST = SDEV_EVT_MEDIA_CHANGE, SDEV_EVT_MAXBITS = SDEV_EVT_LAST + 1 };
scsi_event  struct  include/scsi/scsi_device.h  60  struct scsi_event { enum scsi_device_event evt_type; struct list_head node; };
scsi_device  struct  include/scsi/scsi_device.h  69  struct scsi_device { struct Scsi_Host *host; struct request_queue *request_queue; struct list_head siblings; struct list_head same_target_siblings; unsigned int device_busy; spinlock_t list_lock; struct list_head cmd_list; struct list_head starved_entry; struct scsi_cmnd *current_cmnd; unsigned short queue_depth; unsigned short max_queue_depth; unsigned short last_queue_full_depth; unsigned short last_queue_full_count; unsigned long last_queue_full_time; unsigned long queue_ramp_up_period; #define SCSI_DEFAULT_RAMP_UP_PERIOD (120 * HZ) unsigned long last_queue_ramp_up; unsigned int id, lun, channel; unsigned int manufacturer; unsigned sector_size; void *hostdata; char type; char scsi_level; char inq_periph_qual; unsigned char inquiry_len; unsigned char * inquiry; const char * vendor; const char * model; const char * rev; unsigned char current_tag; struct scsi_target *sdev_target; unsigned int sdev_bflags; unsigned writeable:1; unsigned removable:1; unsigned changed:1; unsigned busy:1; unsigned lockable:1; unsigned locked:1; unsigned borken:1; unsigned disconnect:1; unsigned soft_reset:1; unsigned sdtr:1; unsigned wdtr:1; unsigned ppr:1; unsigned tagged_supported:1; unsigned simple_tags:1; unsigned ordered_tags:1; unsigned was_reset:1; unsigned expecting_cc_ua:1; unsigned use_10_for_rw:1; unsigned use_10_for_ms:1; unsigned no_report_opcodes:1; unsigned no_write_same:1; unsigned use_16_for_rw:1; unsigned skip_ms_page_8:1; unsigned skip_ms_page_3f:1; unsigned skip_vpd_pages:1; unsigned use_192_bytes_for_3f:1; unsigned no_start_on_add:1; unsigned allow_restart:1; unsigned manage_start_stop:1; unsigned start_stop_pwr_cond:1; unsigned no_uld_attach:1; unsigned select_no_atn:1; unsigned fix_capacity:1; unsigned guess_capacity:1; unsigned retry_hwerror:1; unsigned last_sector_bug:1; unsigned no_read_disc_info:1; unsigned no_read_capacity_16:1; unsigned try_rc_10_first:1; unsigned is_visible:1; unsigned can_power_off:1; unsigned wce_default_on:1; unsigned no_dif:1; DECLARE_BITMAP(supported_events, SDEV_EVT_MAXBITS); struct list_head event_list; struct work_struct event_work; unsigned int device_blocked; unsigned int max_device_blocked; #define SCSI_DEFAULT_DEVICE_BLOCKED 3 atomic_t iorequest_cnt; atomic_t iodone_cnt; atomic_t ioerr_cnt; struct device sdev_gendev,sdev_dev; struct execute_work ew; struct work_struct requeue_work; struct scsi_dh_data *scsi_dh_data; enum scsi_device_state sdev_state; unsigned long sdev_data[0]; } __attribute__((aligned(sizeof(unsigned long))));
scsi_dh_devlist  struct  include/scsi/scsi_device.h  188  struct scsi_dh_devlist { char *vendor; char *model; };
scsi_device_handler  struct  include/scsi/scsi_device.h  194  struct scsi_device_handler { struct list_head list; struct module *module; const char *name; const struct scsi_dh_devlist *devlist; int (*check_sense)(struct scsi_device *, struct scsi_sense_hdr *); int (*attach)(struct scsi_device *); void (*detach)(struct scsi_device *); int (*activate)(struct scsi_device *, activate_complete, void *); int (*prep_fn)(struct scsi_device *, struct request *); int (*set_params)(struct scsi_device *, const char *); bool (*match)(struct scsi_device *); };
scsi_dh_data  struct  include/scsi/scsi_device.h  211  struct scsi_dh_data { struct scsi_device_handler *scsi_dh; struct scsi_device *sdev; struct kref kref; char buf[0]; };
to_scsi_device  macro  include/scsi/scsi_device.h  218  #define to_scsi_device(d) container_of(d, struct scsi_device, sdev_gendev)
class_to_sdev  macro  include/scsi/scsi_device.h  220  #define class_to_sdev(d) container_of(d, struct scsi_device, sdev_dev)
transport_class_to_sdev  macro  include/scsi/scsi_device.h  222  #define transport_class_to_sdev(class_dev) to_scsi_device(class_dev->parent)
sdev_printk  macro  include/scsi/scsi_device.h  225  #define sdev_printk(prefix,sdev,fmt,a...) dev_printk(prefix, &(sdev)->sdev_gendev, fmt, ##a)
scmd_printk  macro  include/scsi/scsi_device.h  228  #define scmd_printk(prefix,scmd,fmt,a...) (scmd)->request->rq_disk ? sdev_printk(prefix, (scmd)->device, "[%s] " fmt, (scmd)->request->rq_disk->disk_name, ##a) : sdev_printk(prefix, (scmd)->device, fmt, ##a)
scsi_target_state  enum  include/scsi/scsi_device.h  234  enum scsi_target_state { STARGET_CREATED = 1, STARGET_RUNNING, STARGET_DEL, };
scsi_target  function  include/scsi/scsi_device.h  282  static inline struct scsi_target *scsi_target(struct scsi_device *sdev)
to_scsi_target  macro  include/scsi/scsi_device.h  281  #define to_scsi_target(d) container_of(d,struct scsi_target,dev)
transport_class_to_starget  macro  include/scsi/scsi_device.h  286  #define transport_class_to_starget(class_dev) to_scsi_target(class_dev->parent)
starget_printk  macro  include/scsi/scsi_device.h  289  #define starget_printk(prefix,starget,fmt,a...) dev_printk(prefix, &(starget)->dev, fmt, ##a)
__scsi_add_device  prototype  include/scsi/scsi_device.h  292  extern struct scsi_device *__scsi_add_device(struct Scsi_Host *,uint, uint, uint, void *hostdata);
scsi_add_device  prototype  include/scsi/scsi_device.h  294  extern int scsi_add_device(struct Scsi_Host *host,uint channel,uint target, uint lun);
scsi_register_device_handler  prototype  include/scsi/scsi_device.h  296  extern int scsi_register_device_handler(struct scsi_device_handler *scsi_dh);
scsi_remove_device  prototype  include/scsi/scsi_device.h  297  extern void scsi_remove_device(struct scsi_device *);
scsi_unregister_device_handler  prototype  include/scsi/scsi_device.h  298  extern int scsi_unregister_device_handler(struct scsi_device_handler *scsi_dh);
scsi_device_get  prototype  include/scsi/scsi_device.h  300  extern int scsi_device_get(struct scsi_device *);
scsi_device_put  prototype  include/scsi/scsi_device.h  301  extern void scsi_device_put(struct scsi_device *);
scsi_device_lookup  prototype  include/scsi/scsi_device.h  302  extern struct scsi_device *scsi_device_lookup(struct Scsi_Host *,uint, uint, uint);
__scsi_device_lookup  prototype  include/scsi/scsi_device.h  304  extern struct scsi_device *__scsi_device_lookup(struct Scsi_Host *,uint, uint, uint);
scsi_device_lookup_by_target  prototype  include/scsi/scsi_device.h  306  extern struct scsi_device *scsi_device_lookup_by_target(struct scsi_target *,uint);
__scsi_device_lookup_by_target  prototype  include/scsi/scsi_device.h  308  extern struct scsi_device *__scsi_device_lookup_by_target(struct scsi_target *,uint);
starget_for_each_device  prototype  include/scsi/scsi_device.h  310  extern void starget_for_each_device(struct scsi_target *,void *,void (*fn)(struct scsi_device *, void *));
__starget_for_each_device  prototype  include/scsi/scsi_device.h  312  extern void __starget_for_each_device(struct scsi_target *,void *,void (*fn)(struct scsi_device *,void *));
__scsi_iterate_devices  prototype  include/scsi/scsi_device.h  317  extern struct scsi_device *__scsi_iterate_devices(struct Scsi_Host *,struct scsi_device *);
shost_for_each_device  macro  include/scsi/scsi_device.h  329  #define shost_for_each_device(sdev,shost) for ((sdev) = __scsi_iterate_devices((shost), NULL); (sdev); (sdev) = __scsi_iterate_devices((shost), (sdev)))
__shost_for_each_device  macro  include/scsi/scsi_device.h  347  #define __shost_for_each_device(sdev,shost) list_for_each_entry((sdev), &((shost)->__devices), siblings)
scsi_adjust_queue_depth  prototype  include/scsi/scsi_device.h  350  extern void scsi_adjust_queue_depth(struct scsi_device *,int,int);
scsi_track_queue_full  prototype  include/scsi/scsi_device.h  351  extern int scsi_track_queue_full(struct scsi_device *,int);
scsi_set_medium_removal  prototype  include/scsi/scsi_device.h  353  extern int scsi_set_medium_removal(struct scsi_device *,char);
scsi_mode_sense  prototype  include/scsi/scsi_device.h  355  extern int scsi_mode_sense(struct scsi_device *sdev,int dbd,int modepage,unsigned char *buffer, int len, int timeout,int retries, struct scsi_mode_data *data,struct scsi_sense_hdr *);
scsi_mode_select  prototype  include/scsi/scsi_device.h  359  extern int scsi_mode_select(struct scsi_device *sdev,int pf,int sp,int modepage, unsigned char *buffer, int len,int timeout, int retries,struct scsi_mode_data *data,struct scsi_sense_hdr *);
scsi_test_unit_ready  prototype  include/scsi/scsi_device.h  364  extern int scsi_test_unit_ready(struct scsi_device *sdev,int timeout,int retries, struct scsi_sense_hdr *sshdr);
scsi_get_vpd_page  prototype  include/scsi/scsi_device.h  366  extern int scsi_get_vpd_page(struct scsi_device *,u8 page,unsigned char *buf,int buf_len);
scsi_report_opcode  prototype  include/scsi/scsi_device.h  368  extern int scsi_report_opcode(struct scsi_device *sdev,unsigned char *buffer,unsigned int len, unsigned char opcode);
scsi_device_set_state  prototype  include/scsi/scsi_device.h  370  extern int scsi_device_set_state(struct scsi_device *sdev,enum scsi_device_state state);
sdev_evt_alloc  prototype  include/scsi/scsi_device.h  372  extern struct scsi_event *sdev_evt_alloc(enum scsi_device_event evt_type,gfp_t gfpflags);
sdev_evt_send  prototype  include/scsi/scsi_device.h  374  extern void sdev_evt_send(struct scsi_device *sdev,struct scsi_event *evt);
sdev_evt_send_simple  prototype  include/scsi/scsi_device.h  375  extern void sdev_evt_send_simple(struct scsi_device *sdev,enum scsi_device_event evt_type, gfp_t gfpflags);
scsi_device_quiesce  prototype  include/scsi/scsi_device.h  377  extern int scsi_device_quiesce(struct scsi_device *sdev);
scsi_device_resume  prototype  include/scsi/scsi_device.h  378  extern void scsi_device_resume(struct scsi_device *sdev);
scsi_target_quiesce  prototype  include/scsi/scsi_device.h  379  extern void scsi_target_quiesce(struct scsi_target *);
scsi_target_resume  prototype  include/scsi/scsi_device.h  380  extern void scsi_target_resume(struct scsi_target *);
scsi_scan_target  prototype  include/scsi/scsi_device.h  381  extern void scsi_scan_target(struct device *parent,unsigned int channel,unsigned int id, unsigned int lun, int rescan);
scsi_target_reap  prototype  include/scsi/scsi_device.h  383  extern void scsi_target_reap(struct scsi_target *);
scsi_target_block  prototype  include/scsi/scsi_device.h  384  extern void scsi_target_block(struct device *);
scsi_target_unblock  prototype  include/scsi/scsi_device.h  385  extern void scsi_target_unblock(struct device *,enum scsi_device_state);
scsi_remove_target  prototype  include/scsi/scsi_device.h  386  extern void scsi_remove_target(struct device *);
int_to_scsilun  prototype  include/scsi/scsi_device.h  387  extern void int_to_scsilun(unsigned int,struct scsi_lun *);
scsilun_to_int  prototype  include/scsi/scsi_device.h  388  extern int scsilun_to_int(struct scsi_lun *);
scsi_device_state_name  prototype  include/scsi/scsi_device.h  389  extern const char *scsi_device_state_name(enum scsi_device_state);
scsi_is_sdev_device  prototype  include/scsi/scsi_device.h  390  extern int scsi_is_sdev_device(const struct device *);
scsi_is_target_device  prototype  include/scsi/scsi_device.h  391  extern int scsi_is_target_device(const struct device *);
scsi_execute  prototype  include/scsi/scsi_device.h  392  extern int scsi_execute(struct scsi_device *sdev,const unsigned char *cmd,int data_direction, void *buffer, unsigned bufflen,unsigned char *sense, int timeout, int retries,int flag, int *resid);
scsi_execute_req  prototype  include/scsi/scsi_device.h  396  extern int scsi_execute_req(struct scsi_device *sdev,const unsigned char *cmd,int data_direction, void *buffer, unsigned bufflen,struct scsi_sense_hdr *, int timeout, int retries,int *resid);
scsi_autopm_get_device  function  include/scsi/scsi_device.h  405  static inline int scsi_autopm_get_device(struct scsi_device *d) { return 0; }
scsi_autopm_put_device  function  include/scsi/scsi_device.h  406  static inline void scsi_autopm_put_device(struct scsi_device *d) {}
scsi_device_reprobe  function  include/scsi/scsi_device.h  409  static inline int __must_check scsi_device_reprobe(struct scsi_device *sdev)
sdev_channel  function  include/scsi/scsi_device.h  414  static inline unsigned int sdev_channel(struct scsi_device *sdev)
sdev_id  function  include/scsi/scsi_device.h  419  static inline unsigned int sdev_id(struct scsi_device *sdev)
scmd_id  macro  include/scsi/scsi_device.h  424  #define scmd_id(scmd) sdev_id((scmd)->device)
scmd_channel  macro  include/scsi/scsi_device.h  425  #define scmd_channel(scmd) sdev_channel((scmd)->device)
scsi_device_online  function  include/scsi/scsi_device.h  430  static inline int scsi_device_online(struct scsi_device *sdev)
scsi_device_blocked  function  include/scsi/scsi_device.h  436  static inline int scsi_device_blocked(struct scsi_device *sdev)
scsi_device_created  function  include/scsi/scsi_device.h  441  static inline int scsi_device_created(struct scsi_device *sdev)
scsi_device_sync  function  include/scsi/scsi_device.h  448  static inline int scsi_device_sync(struct scsi_device *sdev)
scsi_device_wide  function  include/scsi/scsi_device.h  452  static inline int scsi_device_wide(struct scsi_device *sdev)
scsi_device_dt  function  include/scsi/scsi_device.h  456  static inline int scsi_device_dt(struct scsi_device *sdev)
scsi_device_dt_only  function  include/scsi/scsi_device.h  460  static inline int scsi_device_dt_only(struct scsi_device *sdev)
scsi_device_ius  function  include/scsi/scsi_device.h  466  static inline int scsi_device_ius(struct scsi_device *sdev)
scsi_device_qas  function  include/scsi/scsi_device.h  472  static inline int scsi_device_qas(struct scsi_device *sdev)
scsi_device_enclosure  function  include/scsi/scsi_device.h  478  static inline int scsi_device_enclosure(struct scsi_device *sdev)
scsi_device_protection  function  include/scsi/scsi_device.h  483  static inline int scsi_device_protection(struct scsi_device *sdev)
scsi_device_tpgs  function  include/scsi/scsi_device.h  491  static inline int scsi_device_tpgs(struct scsi_device *sdev)
MODULE_ALIAS_SCSI_DEVICE  macro  include/scsi/scsi_device.h  496  #define MODULE_ALIAS_SCSI_DEVICE(type) MODULE_ALIAS("scsi:t-" __stringify(type) "*")
SCSI_DEVICE_MODALIAS_FMT  macro  include/scsi/scsi_device.h  498  #define SCSI_DEVICE_MODALIAS_FMT "scsi:t-0x%02x"
_LINUX_LINKAGE_H  macro  include/linux/linkage.h  2  #define _LINUX_LINKAGE_H
CPP_ASMLINKAGE  macro  include/linux/linkage.h  10  #define CPP_ASMLINKAGE
asmlinkage  macro  arch/x86/include/asm/linkage.h  10  #define asmlinkage CPP_ASMLINKAGE __attribute__((regparm(0)))
__page_aligned_data  macro  include/linux/linkage.h  17  #define __page_aligned_data __section(.data..page_aligned) __aligned(PAGE_SIZE)
__page_aligned_bss  macro  include/linux/linkage.h  18  #define __page_aligned_bss __section(.bss..page_aligned) __aligned(PAGE_SIZE)
__PAGE_ALIGNED_DATA  macro  include/linux/linkage.h  26  #define __PAGE_ALIGNED_DATA .section ".data..page_aligned","aw"
__PAGE_ALIGNED_BSS  macro  include/linux/linkage.h  27  #define __PAGE_ALIGNED_BSS .section ".bss..page_aligned","aw"
asmlinkage_protect  macro  arch/x86/include/asm/linkage.h  23  #define asmlinkage_protect(n,ret,args...) __asmlinkage_protect##n(ret, ##args)
__ALIGN  macro  arch/x86/include/asm/linkage.h  54  #define __ALIGN .p2align 4,0x90
__ALIGN_STR  macro  arch/x86/include/asm/linkage.h  55  #define __ALIGN_STR __stringify(__ALIGN)
ALIGN_STR  macro  include/linux/linkage.h  58  #define ALIGN_STR __ALIGN_STR
ENTRY  macro  include/linux/linkage.h  61  #define ENTRY(name) .globl name; ALIGN; name:
WEAK  macro  include/linux/linkage.h  69  #define WEAK(name) .weak name; name:
END  macro  include/linux/linkage.h  75  #define END(name) .size name, .-name
ENDPROC  macro  include/linux/linkage.h  84  #define ENDPROC(name) .type name, @function; END(name)
_LINUX_STDDEF_H  macro  include/linux/stddef.h  2  #define _LINUX_STDDEF_H
NULL  macro  include/linux/stddef.h  8  #define NULL ((void *)0)
offsetof  macro  include/linux/stddef.h  19  #define offsetof(TYPE,MEMBER) ((size_t) &((TYPE *)0)->MEMBER)
_LINUX_TYPES_H  macro  include/linux/types.h  2  #define _LINUX_TYPES_H
__EXPORTED_HEADERS__  macro  include/linux/types.h  4  #define __EXPORTED_HEADERS__
DECLARE_BITMAP  prototype  arch/x86/include/asm/irq.h  39  extern DECLARE_BITMAP(used_vectors,NR_VECTORS);
_SIZE_T  macro  include/linux/types.h  53  #define _SIZE_T
_SSIZE_T  macro  include/linux/types.h  58  #define _SSIZE_T
_PTRDIFF_T  macro  include/linux/types.h  63  #define _PTRDIFF_T
_TIME_T  macro  include/linux/types.h  68  #define _TIME_T
_CLOCK_T  macro  include/linux/types.h  73  #define _CLOCK_T
_CADDR_T  macro  include/linux/types.h  78  #define _CADDR_T
__BIT_TYPES_DEFINED__  macro  include/linux/types.h  95  #define __BIT_TYPES_DEFINED__
aligned_u64  macro  include/linux/types.h  117  #define aligned_u64 __u64 __attribute__((aligned(8)))
aligned_be64  macro  include/linux/types.h  118  #define aligned_be64 __be64 __attribute__((aligned(8)))
aligned_le64  macro  include/linux/types.h  119  #define aligned_le64 __le64 __attribute__((aligned(8)))
pgoff_t  macro  include/linux/types.h  142  #define pgoff_t unsigned long
atomic_t  struct  include/linux/types.h  175  typedef struct { int counter; } atomic_t;
atomic64_t  struct  include/asm-generic/atomic64.h  15  typedef struct { long long counter; } atomic64_t;
list_head  struct  include/linux/types.h  185  struct list_head { struct list_head *next, *prev; };
hlist_head  struct  include/linux/types.h  189  struct hlist_head { struct hlist_node *first; };
hlist_node  struct  include/linux/types.h  193  struct hlist_node { struct hlist_node *next, **pprev; };
ustat  struct  include/linux/types.h  197  struct ustat { __kernel_daddr_t f_tfree; __kernel_ino_t f_tinode; char f_fname[6]; char f_fpack[6]; };
callback_head  struct  include/linux/types.h  209  struct callback_head { struct callback_head *next; void (*func)(struct callback_head *head); };
rcu_head  macro  include/linux/types.h  213  #define rcu_head callback_head
__LINUX_COMPILER_H  macro  include/linux/compiler.h  2  #define __LINUX_COMPILER_H
__user  macro  include/linux/compiler.h  28  # define __user
__kernel  macro  include/linux/compiler.h  29  # define __kernel
__safe  macro  include/linux/compiler.h  30  # define __safe
__force  macro  include/linux/compiler.h  31  # define __force
__nocast  macro  include/linux/compiler.h  32  # define __nocast
__iomem  macro  include/linux/compiler.h  33  # define __iomem
__must_hold  macro  include/linux/compiler.h  37  # define __must_hold(x)
__acquires  function  include/linux/spinlock.h  144  do_raw_spin_lock_flags(raw_spinlock_t *lock,unsigned long *flags) __acquires(lock)
__releases  function  include/linux/spinlock.h  155  static inline void do_raw_spin_unlock(raw_spinlock_t *lock) __releases(lock)
__acquire  macro  include/linux/compiler.h  40  # define __acquire(x) (void)0
__release  macro  include/linux/compiler.h  41  # define __release(x) (void)0
__cond_lock  macro  include/linux/compiler.h  42  # define __cond_lock(x,c) (c)
__percpu  macro  include/linux/compiler.h  43  # define __percpu
__rcu  macro  include/linux/compiler.h  44  # define __rcu
__chk_user_ptr  macro  include/linux/compiler.h  34  # define __chk_user_ptr(x) (void)0
__chk_io_ptr  macro  include/linux/compiler.h  35  # define __chk_io_ptr(x) (void)0
__builtin_warning  macro  include/linux/compiler.h  36  # define __builtin_warning(x,y...) (1)
___PASTE  macro  include/linux/compiler.h  48  #define ___PASTE(a,b) a##b
__PASTE  macro  include/linux/compiler.h  49  #define __PASTE(a,b) ___PASTE(a,b)
notrace  macro  arch/x86/include/asm/linkage.h  7  #define notrace __attribute__((no_instrument_function))
ftrace_branch_data  struct  include/linux/compiler.h  72  struct ftrace_branch_data { const char *func; const char *file; unsigned line; union { unsigned long correct; unsigned long incorrect; }; unsigned long miss; unsigned long hit; }; unsigned long miss_hit[2]; };
ftrace_likely_update  prototype  include/linux/compiler.h  95  void ftrace_likely_update(struct ftrace_branch_data *f,int val,int expect);
likely_notrace  macro  include/linux/compiler.h  97  #define likely_notrace(x) __builtin_expect(!!(x),1)
unlikely_notrace  macro  include/linux/compiler.h  98  #define unlikely_notrace(x) __builtin_expect(!!(x),0)
__branch_check__  macro  include/linux/compiler.h  100  #define __branch_check__(x,expect) ({ int ______r; static struct ftrace_branch_data __attribute__((__aligned__(4))) __attribute__((section("_ftrace_annotated_branch"))) ______f = { .func = __func__, .file = __FILE__, .line = __LINE__, }; ______r = likely_notrace(x); ftrace_likely_update(&______f, ______r, expect); ______r; })
likely  macro  include/linux/compiler.h  152  # define likely(x) __builtin_expect(!!(x),1)
unlikely  macro  include/linux/compiler.h  153  # define unlikely(x) __builtin_expect(!!(x),0)
if  macro  include/linux/compiler.h  132  #define if(cond,...) __trace_if( (cond ,## __VA_ARGS__) )
__trace_if  macro  include/linux/compiler.h  133  #define __trace_if(cond) if (__builtin_constant_p((cond)) ? !!(cond) : ({ int ______r; static struct ftrace_branch_data __attribute__((__aligned__(4))) __attribute__((section("_ftrace_branch"))) ______f = { .func = __func__, .file = __FILE__, .line = __LINE__, }; ______r = !!(cond); ______f.miss_hit[______r]++; ______r; }))
barrier  macro  include/linux/compiler-intel.h  19  #define barrier() __memory_barrier()
unreachable  macro  include/linux/compiler.h  163  # define unreachable() do { } while (1)
RELOC_HIDE  macro  include/linux/compiler-intel.h  21  #define RELOC_HIDE(ptr,off) ({ unsigned long __ptr; __ptr = (unsigned long) (ptr); (typeof(ptr)) (__ptr + (off)); })
__UNIQUE_ID  macro  include/linux/compiler.h  175  # define __UNIQUE_ID(prefix) __PASTE(__PASTE(__UNIQUE_ID_,prefix),__LINE__)
__deprecated  macro  include/linux/compiler-gcc.h  60  #define __deprecated __attribute__((deprecated))
__deprecated_for_modules  macro  include/linux/compiler.h  211  #define __deprecated_for_modules
__must_check  macro  include/linux/compiler.h  205  #define __must_check
__used  macro  include/linux/compiler.h  233  # define __used
__maybe_unused  macro  include/linux/compiler-gcc.h  94  #define __maybe_unused __attribute__((unused))
__always_unused  macro  include/linux/compiler-gcc.h  95  #define __always_unused __attribute__((unused))
noinline  macro  include/linux/compiler-gcc.h  92  #define noinline __attribute__((noinline))
noinline_for_stack  macro  include/linux/compiler.h  252  #define noinline_for_stack noinline
__always_inline  macro  include/linux/compiler-gcc.h  112  #define __always_inline inline __attribute__((always_inline))
__attribute_const__  macro  include/linux/compiler-gcc.h  93  #define __attribute_const__ __attribute__((__const__))
__cold  macro  include/linux/compiler.h  284  #define __cold
__section  macro  include/linux/compiler.h  289  # define __section(S) __attribute__ ((__section__(#S)))
__visible  macro  include/linux/compiler.h  293  #define __visible
__same_type  macro  include/linux/compiler.h  298  # define __same_type(a,b) __builtin_types_compatible_p(typeof(a),typeof(b))
__compiletime_object_size  macro  include/linux/compiler.h  303  # define __compiletime_object_size(obj) -1
__compiletime_warning  macro  include/linux/compiler.h  306  # define __compiletime_warning(message)
__compiletime_error  macro  include/linux/compiler.h  309  # define __compiletime_error(message)
__linktime_error  macro  include/linux/compiler.h  312  # define __linktime_error(message)
ACCESS_ONCE  macro  include/linux/compiler.h  326  #define ACCESS_ONCE(x) (*(volatile typeof(x) *)&(x))
_LINUX_BITOPS_H  macro  include/linux/bitops.h  2  #define _LINUX_BITOPS_H
BIT  macro  include/linux/bitops.h  6  #define BIT(nr) (1UL << (nr))
BIT_MASK  macro  include/linux/bitops.h  7  #define BIT_MASK(nr) (1UL << ((nr) % BITS_PER_LONG))
BIT_WORD  macro  include/linux/bitops.h  8  #define BIT_WORD(nr) ((nr) / BITS_PER_LONG)
BITS_PER_BYTE  macro  include/linux/bitops.h  9  #define BITS_PER_BYTE 8
BITS_TO_LONGS  macro  include/linux/bitops.h  10  #define BITS_TO_LONGS(nr) DIV_ROUND_UP(nr,BITS_PER_BYTE * sizeof(long))
__sw_hweight8  prototype  include/linux/bitops.h  13  extern unsigned int __sw_hweight8(unsigned int w);
__sw_hweight16  prototype  include/linux/bitops.h  14  extern unsigned int __sw_hweight16(unsigned int w);
__sw_hweight32  prototype  include/linux/bitops.h  15  extern unsigned int __sw_hweight32(unsigned int w);
__sw_hweight64  prototype  include/linux/bitops.h  16  extern unsigned long __sw_hweight64(__u64 w);
for_each_set_bit  macro  include/linux/bitops.h  24  #define for_each_set_bit(bit,addr,size) for ((bit) = find_first_bit((addr), (size)); (bit) < (size); (bit) = find_next_bit((addr), (size), (bit) + 1))
for_each_set_bit_from  macro  include/linux/bitops.h  30  #define for_each_set_bit_from(bit,addr,size) for ((bit) = find_next_bit((addr), (size), (bit)); (bit) < (size); (bit) = find_next_bit((addr), (size), (bit) + 1))
for_each_clear_bit  macro  include/linux/bitops.h  35  #define for_each_clear_bit(bit,addr,size) for ((bit) = find_first_zero_bit((addr), (size)); (bit) < (size); (bit) = find_next_zero_bit((addr), (size), (bit) + 1))
for_each_clear_bit_from  macro  include/linux/bitops.h  41  #define for_each_clear_bit_from(bit,addr,size) for ((bit) = find_next_zero_bit((addr), (size), (bit)); (bit) < (size); (bit) = find_next_zero_bit((addr), (size), (bit) + 1))
get_bitmask_order  function  include/linux/bitops.h  46  static __inline__ int get_bitmask_order(unsigned int count)
get_count_order  function  include/linux/bitops.h  54  static __inline__ int get_count_order(unsigned int count)
hweight_long  function  include/linux/bitops.h  64  static inline unsigned long hweight_long(unsigned long w)
rol64  function  include/linux/bitops.h  74  static inline __u64 rol64(__u64 word,unsigned int shift)
ror64  function  include/linux/bitops.h  84  static inline __u64 ror64(__u64 word,unsigned int shift)
rol32  function  include/linux/bitops.h  94  static inline __u32 rol32(__u32 word,unsigned int shift)
ror32  function  include/linux/bitops.h  104  static inline __u32 ror32(__u32 word,unsigned int shift)
rol16  function  include/linux/bitops.h  114  static inline __u16 rol16(__u16 word,unsigned int shift)
ror16  function  include/linux/bitops.h  124  static inline __u16 ror16(__u16 word,unsigned int shift)
rol8  function  include/linux/bitops.h  134  static inline __u8 rol8(__u8 word,unsigned int shift)
ror8  function  include/linux/bitops.h  144  static inline __u8 ror8(__u8 word,unsigned int shift)
sign_extend32  function  include/linux/bitops.h  154  static inline __s32 sign_extend32(__u32 value,int index)
fls_long  function  include/linux/bitops.h  160  static inline unsigned fls_long(unsigned long l)
__ffs64  function  include/linux/bitops.h  175  static inline unsigned long __ffs64(u64 word)
find_last_bit  prototype  include/linux/bitops.h  196  extern unsigned long find_last_bit(const unsigned long *addr,unsigned long size);
_LINUX_LOG2_H  macro  include/linux/log2.h  13  #define _LINUX_LOG2_H
____ilog2_NaN  prototype  include/linux/log2.h  22  int ____ilog2_NaN(void);
__ilog2_u32  function  include/linux/log2.h  32  int __ilog2_u32(u32 n)
__ilog2_u64  function  include/linux/log2.h  40  int __ilog2_u64(u64 n)
is_power_of_2  function  include/linux/log2.h  52  bool is_power_of_2(unsigned long n)
__roundup_pow_of_two  function  include/linux/log2.h  61  unsigned long __roundup_pow_of_two(unsigned long n)
__rounddown_pow_of_two  function  include/linux/log2.h  70  unsigned long __rounddown_pow_of_two(unsigned long n)
ilog2  macro  include/linux/log2.h  85  #define ilog2(n) ( __builtin_constant_p(n) ? ( (n) < 1 ? ____ilog2_NaN() : (n) & (1ULL << 63) ? 63 : (n) & (1ULL << 62) ? 62 : (n) & (1ULL << 61) ? 61 : (n) & (1ULL << 60) ? 60 : (n) & (1ULL << 59) ? 59 : (n) & (1ULL << 58) ? 58 : (n) & (1ULL << 57) ? 57 : (n) & (1ULL << 56) ? 56 : (n) & (1ULL << 55) ? 55 : (n) & (1ULL << 54) ? 54 : (n) & (1ULL << 53) ? 53 : (n) & (1ULL << 52) ? 52 : (n) & (1ULL << 51) ? 51 : (n) & (1ULL << 50) ? 50 : (n) & (1ULL << 49) ? 49 : (n) & (1ULL << 48) ? 48 : (n) & (1ULL << 47) ? 47 : (n) & (1ULL << 46) ? 46 : (n) & (1ULL << 45) ? 45 : (n) & (1ULL << 44) ? 44 : (n) & (1ULL << 43) ? 43 : (n) & (1ULL << 42) ? 42 : (n) & (1ULL << 41) ? 41 : (n) & (1ULL << 40) ? 40 : (n) & (1ULL << 39) ? 39 : (n) & (1ULL << 38) ? 38 : (n) & (1ULL << 37) ? 37 : (n) & (1ULL << 36) ? 36 : (n) & (1ULL << 35) ? 35 : (n) & (1ULL << 34) ? 34 : (n) & (1ULL << 33) ? 33 : (n) & (1ULL << 32) ? 32 : (n) & (1ULL << 31) ? 31 : (n) & (1ULL << 30) ? 30 : (n) & (1ULL << 29) ? 29 : (n) & (1ULL << 28) ? 28 : (n) & (1ULL << 27) ? 27 : (n) & (1ULL << 26) ? 26 : (n) & (1ULL << 25) ? 25 : (n) & (1ULL << 24) ? 24 : (n) & (1ULL << 23) ? 23 : (n) & (1ULL << 22) ? 22 : (n) & (1ULL << 21) ? 21 : (n) & (1ULL << 20) ? 20 : (n) & (1ULL << 19) ? 19 : (n) & (1ULL << 18) ? 18 : (n) & (1ULL << 17) ? 17 : (n) & (1ULL << 16) ? 16 : (n) & (1ULL << 15) ? 15 : (n) & (1ULL << 14) ? 14 : (n) & (1ULL << 13) ? 13 : (n) & (1ULL << 12) ? 12 : (n) & (1ULL << 11) ? 11 : (n) & (1ULL << 10) ? 10 : (n) & (1ULL <<  9) ?  9 : (n) & (1ULL <<  8) ?  8 : (n) & (1ULL <<  7) ?  7 : (n) & (1ULL <<  6) ?  6 : (n) & (1ULL <<  5) ?  5 : (n) & (1ULL <<  4) ?  4 : (n) & (1ULL <<  3) ?  3 : (n) & (1ULL <<  2) ?  2 : (n) & (1ULL <<  1) ?  1 : (n) & (1ULL <<  0) ?  0 : ____ilog2_NaN() ) : (sizeof(n) <= 4) ? __ilog2_u32(n) : __ilog2_u64(n) )
roundup_pow_of_two  macro  include/linux/log2.h  168  #define roundup_pow_of_two(n) ( __builtin_constant_p(n) ? ( (n == 1) ? 1 : (1UL << (ilog2((n) - 1) + 1)) ) : __roundup_pow_of_two(n) )
rounddown_pow_of_two  macro  include/linux/log2.h  185  #define rounddown_pow_of_two(n) ( __builtin_constant_p(n) ? ( (1UL << ilog2(n))) : __rounddown_pow_of_two(n) )
order_base_2  macro  include/linux/log2.h  206  #define order_base_2(n) ilog2(roundup_pow_of_two(n))
TYPECHECK_H_INCLUDED  macro  include/linux/typecheck.h  2  #define TYPECHECK_H_INCLUDED
typecheck  macro  include/linux/typecheck.h  8  #define typecheck(type,x) ({	type __dummy; typeof(x) __dummy2; (void)(&__dummy == &__dummy2); 1; })
typecheck_fn  macro  include/linux/typecheck.h  19  #define typecheck_fn(type,function) ({	typeof(type) __tmp = function; (void)__tmp; })
__KERNEL_PRINTK__  macro  include/linux/printk.h  2  #define __KERNEL_PRINTK__
printk_get_level  function  include/linux/printk.h  10  static inline int printk_get_level(const char *buffer)
printk_skip_level  function  include/linux/printk.h  22  static inline const char *printk_skip_level(const char *buffer)
console_loglevel  macro  include/linux/printk.h  36  #define console_loglevel (console_printk[0])
default_message_loglevel  macro  include/linux/printk.h  37  #define default_message_loglevel (console_printk[1])
minimum_console_loglevel  macro  include/linux/printk.h  38  #define minimum_console_loglevel (console_printk[2])
default_console_loglevel  macro  include/linux/printk.h  39  #define default_console_loglevel (console_printk[3])
console_silent  function  include/linux/printk.h  41  static inline void console_silent(void)
console_verbose  function  include/linux/printk.h  46  static inline void console_verbose(void)
va_format  struct  include/linux/printk.h  52  struct va_format { const char *fmt; va_list *va; };
FW_BUG  macro  include/linux/printk.h  77  #define FW_BUG "[Firmware Bug]: "
FW_WARN  macro  include/linux/printk.h  78  #define FW_WARN "[Firmware Warn]: "
FW_INFO  macro  include/linux/printk.h  79  #define FW_INFO "[Firmware Info]: "
HW_ERR  macro  include/linux/printk.h  86  #define HW_ERR "[Hardware Error]: "
no_printk  function  include/linux/printk.h  93  int no_printk(const char *fmt,...)
early_printk  prototype  include/linux/printk.h  99  void early_printk(const char *fmt,...);
printk_needs_cpu  prototype  include/linux/printk.h  101  extern int printk_needs_cpu(int cpu);
printk_tick  prototype  include/linux/printk.h  102  extern void printk_tick(void);
vprintk_emit  prototype  include/linux/printk.h  106  int vprintk_emit(int facility,int level,const char *dict, size_t dictlen,const char *fmt, va_list args);
vprintk  function  include/linux/printk.h  144  int vprintk(const char *s,va_list args)
printk_emit  prototype  include/linux/printk.h  114  asmlinkage int printk_emit(int facility,int level,const char *dict, size_t dictlen,const char *fmt, ...);
printk  function  include/linux/printk.h  149  int printk(const char *s,...)
printk_sched  function  include/linux/printk.h  154  int printk_sched(const char *s,...)
__printk_ratelimit  prototype  include/linux/printk.h  131  extern int __printk_ratelimit(const char *func);
printk_ratelimit  function  include/linux/printk.h  158  static inline int printk_ratelimit(void)
printk_timed_ratelimit  function  include/linux/printk.h  162  static inline bool printk_timed_ratelimit(unsigned long *caller_jiffies,unsigned int interval_msec)
log_buf_kexec_setup  function  include/linux/printk.h  168  static inline void log_buf_kexec_setup(void)
setup_log_buf  function  include/linux/printk.h  172  static inline void setup_log_buf(int early)
pr_fmt  macro  include/linux/printk.h  180  #define pr_fmt(fmt) fmt
pr_emerg  macro  include/linux/printk.h  183  #define pr_emerg(fmt,...) printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)
pr_alert  macro  include/linux/printk.h  185  #define pr_alert(fmt,...) printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)
pr_crit  macro  include/linux/printk.h  187  #define pr_crit(fmt,...) printk(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)
pr_err  macro  include/linux/printk.h  189  #define pr_err(fmt,...) printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)
pr_warning  macro  include/linux/printk.h  191  #define pr_warning(fmt,...) printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)
pr_warn  macro  include/linux/printk.h  193  #define pr_warn pr_warning
pr_notice  macro  include/linux/printk.h  194  #define pr_notice(fmt,...) printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)
pr_info  macro  include/linux/printk.h  196  #define pr_info(fmt,...) printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)
pr_cont  macro  include/linux/printk.h  198  #define pr_cont(fmt,...) printk(KERN_CONT fmt, ##__VA_ARGS__)
pr_devel  macro  include/linux/printk.h  206  #define pr_devel(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
pr_debug  macro  include/linux/printk.h  219  #define pr_debug(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
printk_once  macro  include/linux/printk.h  238  #define printk_once(fmt,...) no_printk(fmt, ##__VA_ARGS__)
pr_emerg_once  macro  include/linux/printk.h  242  #define pr_emerg_once(fmt,...) printk_once(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)
pr_alert_once  macro  include/linux/printk.h  244  #define pr_alert_once(fmt,...) printk_once(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)
pr_crit_once  macro  include/linux/printk.h  246  #define pr_crit_once(fmt,...) printk_once(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)
pr_err_once  macro  include/linux/printk.h  248  #define pr_err_once(fmt,...) printk_once(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)
pr_warn_once  macro  include/linux/printk.h  250  #define pr_warn_once(fmt,...) printk_once(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)
pr_notice_once  macro  include/linux/printk.h  252  #define pr_notice_once(fmt,...) printk_once(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)
pr_info_once  macro  include/linux/printk.h  254  #define pr_info_once(fmt,...) printk_once(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)
pr_cont_once  macro  include/linux/printk.h  256  #define pr_cont_once(fmt,...) printk_once(KERN_CONT pr_fmt(fmt), ##__VA_ARGS__)
pr_debug_once  macro  include/linux/printk.h  263  #define pr_debug_once(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
printk_ratelimited  macro  include/linux/printk.h  282  #define printk_ratelimited(fmt,...) no_printk(fmt, ##__VA_ARGS__)
pr_emerg_ratelimited  macro  include/linux/printk.h  286  #define pr_emerg_ratelimited(fmt,...) printk_ratelimited(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)
pr_alert_ratelimited  macro  include/linux/printk.h  288  #define pr_alert_ratelimited(fmt,...) printk_ratelimited(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)
pr_crit_ratelimited  macro  include/linux/printk.h  290  #define pr_crit_ratelimited(fmt,...) printk_ratelimited(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)
pr_err_ratelimited  macro  include/linux/printk.h  292  #define pr_err_ratelimited(fmt,...) printk_ratelimited(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)
pr_warn_ratelimited  macro  include/linux/printk.h  294  #define pr_warn_ratelimited(fmt,...) printk_ratelimited(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)
pr_notice_ratelimited  macro  include/linux/printk.h  296  #define pr_notice_ratelimited(fmt,...) printk_ratelimited(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)
pr_info_ratelimited  macro  include/linux/printk.h  298  #define pr_info_ratelimited(fmt,...) printk_ratelimited(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)
pr_debug_ratelimited  macro  include/linux/printk.h  306  #define pr_debug_ratelimited(fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
hex_dump_to_buffer  prototype  include/linux/printk.h  317  extern void hex_dump_to_buffer(const void *buf,size_t len,int rowsize, int groupsize,char *linebuf, size_t linebuflen, bool ascii);
print_hex_dump  function  include/linux/printk.h  327  static inline void print_hex_dump(const char *level,const char *prefix_str,int prefix_type, int rowsize, int groupsize,const void *buf, size_t len, bool ascii)
print_hex_dump_bytes  function  include/linux/printk.h  332  static inline void print_hex_dump_bytes(const char *prefix_str,int prefix_type,const void *buf, size_t len)
_DYNAMIC_DEBUG_H  macro  include/linux/dynamic_debug.h  2  #define _DYNAMIC_DEBUG_H
_ddebug  struct  include/linux/dynamic_debug.h  9  struct _ddebug { const char *modname; const char *function; const char *filename; const char *format; unsigned int lineno:18; #define _DPRINTK_FLAGS_NONE 0 #define _DPRINTK_FLAGS_PRINT (1<<0) #define _DPRINTK_FLAGS_INCL_MODNAME (1<<1) #define _DPRINTK_FLAGS_INCL_FUNCNAME (1<<2) #define _DPRINTK_FLAGS_INCL_LINENO (1<<3) #define _DPRINTK_FLAGS_INCL_TID (1<<4) #define _DPRINTK_FLAGS_DEFAULT _DPRINTK_FLAGS_PRINT #define _DPRINTK_FLAGS_DEFAULT 0 unsigned int flags:8; } __attribute__((aligned(8)));
ddebug_add_module  prototype  include/linux/dynamic_debug.h  39  int ddebug_add_module(struct _ddebug *tab,unsigned int n,const char *modname);
ddebug_remove_module  function  include/linux/dynamic_debug.h  103  static inline int ddebug_remove_module(const char *mod)
__dynamic_pr_debug  prototype  include/linux/dynamic_debug.h  45  int __dynamic_pr_debug(struct _ddebug *descriptor,const char *fmt,...);
ddebug_dyndbg_module_param_cb  function  include/linux/dynamic_debug.h  108  static inline int ddebug_dyndbg_module_param_cb(char *param,char *val,const char *modname)
__dynamic_dev_dbg  prototype  include/linux/dynamic_debug.h  53  int __dynamic_dev_dbg(struct _ddebug *descriptor,const struct device *dev,const char *fmt, ...);
__dynamic_netdev_dbg  prototype  include/linux/dynamic_debug.h  59  int __dynamic_netdev_dbg(struct _ddebug *descriptor,const struct net_device *dev,const char *fmt, ...);
DEFINE_DYNAMIC_DEBUG_METADATA  macro  include/linux/dynamic_debug.h  63  #define DEFINE_DYNAMIC_DEBUG_METADATA(name,fmt) static struct _ddebug  __aligned(8) __attribute__((section("__verbose"))) name = { .modname = KBUILD_MODNAME, .function = __func__, .filename = __FILE__, .format = (fmt), .lineno = __LINE__, .flags =  _DPRINTK_FLAGS_DEFAULT, }
dynamic_pr_debug  macro  include/linux/dynamic_debug.h  120  #define dynamic_pr_debug(fmt,...) do { if (0) printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__); } while (0)
dynamic_dev_dbg  macro  include/linux/dynamic_debug.h  122  #define dynamic_dev_dbg(dev,fmt,...) do { if (0) dev_printk(KERN_DEBUG, dev, fmt, ##__VA_ARGS__); } while (0)
dynamic_netdev_dbg  macro  include/linux/dynamic_debug.h  90  #define dynamic_netdev_dbg(dev,fmt,...) do { DEFINE_DYNAMIC_DEBUG_METADATA(descriptor, fmt); if (unlikely(descriptor.flags & _DPRINTK_FLAGS_PRINT)) __dynamic_netdev_dbg(&descriptor, dev, fmt, ##__VA_ARGS__); } while (0)
_ASM_X86_BYTEORDER_H  macro  arch/x86/include/uapi/asm/byteorder.h  2  #define _ASM_X86_BYTEORDER_H
_UAPI_LINUX_KERNEL_H  macro  include/uapi/linux/kernel.h  2  #define _UAPI_LINUX_KERNEL_H
__ALIGN_KERNEL  macro  include/uapi/linux/kernel.h  9  #define __ALIGN_KERNEL(x,a) __ALIGN_KERNEL_MASK(x,(typeof(x))(a) - 1)
__ALIGN_KERNEL_MASK  macro  include/uapi/linux/kernel.h  10  #define __ALIGN_KERNEL_MASK(x,mask) (((x) + (mask)) & ~(mask))
_ASM_X86_DIV64_H  macro  arch/x86/include/asm/div64.h  2  #define _ASM_X86_DIV64_H
do_div  macro  include/asm-generic/div64.h  40  # define do_div(n,base) ({ uint32_t __base = (base); uint32_t __rem; (void)(((typeof((n)) *)0) == ((uint64_t *)0)); if (likely(((n) >> 32) == 0)) { __rem = (uint32_t)(n) % __base; (n) = (uint32_t)(n) / __base; } else __rem = __div64_32(&(n), __base); __rem; })
div_u64_rem  macro  arch/x86/include/asm/div64.h  60  #define div_u64_rem div_u64_rem
_LINUX_LIST_H  macro  include/linux/list.h  2  #define _LINUX_LIST_H
LIST_HEAD_INIT  macro  include/linux/list.h  19  #define LIST_HEAD_INIT(name) { &(name),&(name) }
LIST_HEAD  macro  include/linux/list.h  21  #define LIST_HEAD(name) struct list_head name = LIST_HEAD_INIT(name)
INIT_LIST_HEAD  function  include/linux/list.h  24  static inline void INIT_LIST_HEAD(struct list_head *list)
__list_add  prototype  include/linux/list.h  47  extern void __list_add(struct list_head *new,struct list_head *prev,struct list_head *next);
list_add  function  include/linux/list.h  60  static inline void list_add(struct list_head *new,struct list_head *head)
list_add_tail  function  include/linux/list.h  74  static inline void list_add_tail(struct list_head *new,struct list_head *head)
__list_del  function  include/linux/list.h  86  static inline void __list_del(struct list_head * prev,struct list_head * next)
__list_del_entry  prototype  include/linux/list.h  111  extern void __list_del_entry(struct list_head *entry);
list_del  prototype  include/linux/list.h  112  extern void list_del(struct list_head *entry);
list_replace  function  include/linux/list.h  122  static inline void list_replace(struct list_head *old,struct list_head *new)
list_replace_init  function  include/linux/list.h  131  static inline void list_replace_init(struct list_head *old,struct list_head *new)
list_del_init  function  include/linux/list.h  142  static inline void list_del_init(struct list_head *entry)
list_move  function  include/linux/list.h  153  static inline void list_move(struct list_head *list,struct list_head *head)
list_move_tail  function  include/linux/list.h  164  static inline void list_move_tail(struct list_head *list,struct list_head *head)
list_is_last  function  include/linux/list.h  176  static inline int list_is_last(const struct list_head *list,const struct list_head *head)
list_empty  function  include/linux/list.h  186  static inline int list_empty(const struct list_head *head)
list_empty_careful  function  include/linux/list.h  204  static inline int list_empty_careful(const struct list_head *head)
list_rotate_left  function  include/linux/list.h  214  static inline void list_rotate_left(struct list_head *head)
list_is_singular  function  include/linux/list.h  228  static inline int list_is_singular(const struct list_head *head)
__list_cut_position  function  include/linux/list.h  233  static inline void __list_cut_position(struct list_head *list,struct list_head *head, struct list_head *entry)
list_cut_position  function  include/linux/list.h  259  static inline void list_cut_position(struct list_head *list,struct list_head *head, struct list_head *entry)
__list_splice  function  include/linux/list.h  273  static inline void __list_splice(const struct list_head *list,struct list_head *prev,struct list_head *next)
list_splice  function  include/linux/list.h  292  static inline void list_splice(const struct list_head *list,struct list_head *head)
list_splice_tail  function  include/linux/list.h  304  static inline void list_splice_tail(struct list_head *list,struct list_head *head)
list_splice_init  function  include/linux/list.h  318  static inline void list_splice_init(struct list_head *list,struct list_head *head)
list_splice_tail_init  function  include/linux/list.h  335  static inline void list_splice_tail_init(struct list_head *list,struct list_head *head)
list_entry  macro  include/linux/list.h  350  #define list_entry(ptr,type,member) container_of(ptr, type, member)
list_first_entry  macro  include/linux/list.h  361  #define list_first_entry(ptr,type,member) list_entry((ptr)->next, type, member)
list_for_each  macro  include/linux/list.h  369  #define list_for_each(pos,head) for (pos = (head)->next; pos != (head); pos = pos->next)
__list_for_each  macro  include/linux/list.h  380  #define __list_for_each(pos,head) for (pos = (head)->next; pos != (head); pos = pos->next)
list_for_each_prev  macro  include/linux/list.h  388  #define list_for_each_prev(pos,head) for (pos = (head)->prev; pos != (head); pos = pos->prev)
list_for_each_safe  macro  include/linux/list.h  397  #define list_for_each_safe(pos,n,head) for (pos = (head)->next, n = pos->next; pos != (head); pos = n, n = pos->next)
list_for_each_prev_safe  macro  include/linux/list.h  407  #define list_for_each_prev_safe(pos,n,head) for (pos = (head)->prev, n = pos->prev; pos != (head); pos = n, n = pos->prev)
list_for_each_entry  macro  include/linux/list.h  418  #define list_for_each_entry(pos,head,member) for (pos = list_entry((head)->next, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.next, typeof(*pos), member))
list_for_each_entry_reverse  macro  include/linux/list.h  429  #define list_for_each_entry_reverse(pos,head,member) for (pos = list_entry((head)->prev, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.prev, typeof(*pos), member))
list_prepare_entry  macro  include/linux/list.h  442  #define list_prepare_entry(pos,head,member) ((pos) ? : list_entry(head, typeof(*pos), member))
list_for_each_entry_continue  macro  include/linux/list.h  454  #define list_for_each_entry_continue(pos,head,member) for (pos = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.next, typeof(*pos), member))
list_for_each_entry_continue_reverse  macro  include/linux/list.h  468  #define list_for_each_entry_continue_reverse(pos,head,member) for (pos = list_entry(pos->member.prev, typeof(*pos), member); &pos->member != (head); pos = list_entry(pos->member.prev, typeof(*pos), member))
list_for_each_entry_from  macro  include/linux/list.h  481  #define list_for_each_entry_from(pos,head,member) for (; &pos->member != (head); pos = list_entry(pos->member.next, typeof(*pos), member))
list_for_each_entry_safe  macro  include/linux/list.h  492  #define list_for_each_entry_safe(pos,n,head,member) for (pos = list_entry((head)->next, typeof(*pos), member), n = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.next, typeof(*n), member))
list_for_each_entry_safe_continue  macro  include/linux/list.h  508  #define list_for_each_entry_safe_continue(pos,n,head,member) for (pos = list_entry(pos->member.next, typeof(*pos), member), n = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.next, typeof(*n), member))
list_for_each_entry_safe_from  macro  include/linux/list.h  524  #define list_for_each_entry_safe_from(pos,n,head,member) for (n = list_entry(pos->member.next, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.next, typeof(*n), member))
list_for_each_entry_safe_reverse  macro  include/linux/list.h  539  #define list_for_each_entry_safe_reverse(pos,n,head,member) for (pos = list_entry((head)->prev, typeof(*pos), member), n = list_entry(pos->member.prev, typeof(*pos), member); &pos->member != (head); pos = n, n = list_entry(n->member.prev, typeof(*n), member))
list_safe_reset_next  macro  include/linux/list.h  557  #define list_safe_reset_next(pos,n,member) n = list_entry(pos->member.next, typeof(*pos), member)
HLIST_HEAD_INIT  macro  include/linux/list.h  567  #define HLIST_HEAD_INIT { .first = NULL }
HLIST_HEAD  macro  include/linux/list.h  568  #define HLIST_HEAD(name) struct hlist_head name = { .first = NULL }
INIT_HLIST_HEAD  macro  include/linux/list.h  569  #define INIT_HLIST_HEAD(ptr) ((ptr)->first = NULL)
INIT_HLIST_NODE  function  include/linux/list.h  570  static inline void INIT_HLIST_NODE(struct hlist_node *h)
hlist_unhashed  function  include/linux/list.h  576  static inline int hlist_unhashed(const struct hlist_node *h)
hlist_empty  function  include/linux/list.h  581  static inline int hlist_empty(const struct hlist_head *h)
__hlist_del  function  include/linux/list.h  586  static inline void __hlist_del(struct hlist_node *n)
hlist_del  function  include/linux/list.h  595  static inline void hlist_del(struct hlist_node *n)
hlist_del_init  function  include/linux/list.h  602  static inline void hlist_del_init(struct hlist_node *n)
hlist_add_head  function  include/linux/list.h  610  static inline void hlist_add_head(struct hlist_node *n,struct hlist_head *h)
hlist_add_before  function  include/linux/list.h  621  static inline void hlist_add_before(struct hlist_node *n,struct hlist_node *next)
hlist_add_after  function  include/linux/list.h  630  static inline void hlist_add_after(struct hlist_node *n,struct hlist_node *next)
hlist_add_fake  function  include/linux/list.h  642  static inline void hlist_add_fake(struct hlist_node *n)
hlist_move_list  function  include/linux/list.h  651  static inline void hlist_move_list(struct hlist_head *old,struct hlist_head *new)
hlist_entry  macro  include/linux/list.h  660  #define hlist_entry(ptr,type,member) container_of(ptr,type,member)
hlist_for_each  macro  include/linux/list.h  662  #define hlist_for_each(pos,head) for (pos = (head)->first; pos ; pos = pos->next)
hlist_for_each_safe  macro  include/linux/list.h  665  #define hlist_for_each_safe(pos,n,head) for (pos = (head)->first; pos && ({ n = pos->next; 1; }); pos = n)
hlist_for_each_entry  macro  include/linux/list.h  676  #define hlist_for_each_entry(tpos,pos,head,member) for (pos = (head)->first; pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = pos->next)
hlist_for_each_entry_continue  macro  include/linux/list.h  688  #define hlist_for_each_entry_continue(tpos,pos,member) for (pos = (pos)->next; pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = pos->next)
hlist_for_each_entry_from  macro  include/linux/list.h  700  #define hlist_for_each_entry_from(tpos,pos,member) for (; pos && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = pos->next)
hlist_for_each_entry_safe  macro  include/linux/list.h  713  #define hlist_for_each_entry_safe(tpos,pos,n,head,member) for (pos = (head)->first; pos && ({ n = pos->next; 1; }) && ({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); pos = n)
_LINUX_STAT_H  macro  include/linux/stat.h  2  #define _LINUX_STAT_H
S_IRWXUGO  macro  include/linux/stat.h  8  #define S_IRWXUGO (S_IRWXU|S_IRWXG|S_IRWXO)
S_IALLUGO  macro  include/linux/stat.h  9  #define S_IALLUGO (S_ISUID|S_ISGID|S_ISVTX|S_IRWXUGO)
S_IRUGO  macro  include/linux/stat.h  10  #define S_IRUGO (S_IRUSR|S_IRGRP|S_IROTH)
S_IWUGO  macro  include/linux/stat.h  11  #define S_IWUGO (S_IWUSR|S_IWGRP|S_IWOTH)
S_IXUGO  macro  include/linux/stat.h  12  #define S_IXUGO (S_IXUSR|S_IXGRP|S_IXOTH)
UTIME_NOW  macro  include/linux/stat.h  14  #define UTIME_NOW ((1l << 30) - 1l)
UTIME_OMIT  macro  include/linux/stat.h  15  #define UTIME_OMIT ((1l << 30) - 2l)
kstat  struct  include/linux/stat.h  21  struct kstat { u64 ino; dev_t dev; umode_t mode; unsigned int nlink; kuid_t uid; kgid_t gid; dev_t rdev; loff_t size; struct timespec atime; struct timespec mtime; struct timespec ctime; unsigned long blksize; unsigned long long blocks; };
__LINUX_CACHE_H  macro  include/linux/cache.h  2  #define __LINUX_CACHE_H
L1_CACHE_ALIGN  macro  include/linux/cache.h  8  #define L1_CACHE_ALIGN(x) ALIGN(x,L1_CACHE_BYTES)
SMP_CACHE_BYTES  macro  include/linux/cache.h  12  #define SMP_CACHE_BYTES L1_CACHE_BYTES
__read_mostly  macro  arch/x86/include/asm/cache.h  10  #define __read_mostly __attribute__((__section__(".data..read_mostly")))
____cacheline_aligned  macro  include/linux/cache.h  20  #define ____cacheline_aligned __attribute__((__aligned__(SMP_CACHE_BYTES)))
____cacheline_aligned_in_smp  macro  include/linux/cache.h  27  #define ____cacheline_aligned_in_smp
__cacheline_aligned  macro  include/linux/cache.h  32  #define __cacheline_aligned __attribute__((__aligned__(SMP_CACHE_BYTES), __section__(".data..cacheline_aligned")))
__cacheline_aligned_in_smp  macro  arch/x86/include/asm/cache.h  17  #define __cacheline_aligned_in_smp __attribute__((__aligned__(INTERNODE_CACHE_BYTES))) __page_aligned_data
INTERNODE_CACHE_SHIFT  macro  arch/x86/include/asm/cache.h  12  #define INTERNODE_CACHE_SHIFT CONFIG_X86_INTERNODE_CACHE_SHIFT
____cacheline_internodealigned_in_smp  macro  include/linux/cache.h  59  #define ____cacheline_internodealigned_in_smp
cache_line_size  macro  include/linux/cache.h  64  #define cache_line_size() L1_CACHE_BYTES
__LINUX_KMOD_H__  macro  include/linux/kmod.h  2  #define __LINUX_KMOD_H__
KMOD_PATH_LEN  macro  include/linux/kmod.h  29  #define KMOD_PATH_LEN 256
__request_module  prototype  include/linux/kmod.h  36  int __request_module(bool wait,const char *name,...);
request_module  function  include/linux/kmod.h  42  static inline int request_module(const char *name,...) { return -ENOSYS; }
request_module_nowait  function  include/linux/kmod.h  43  static inline int request_module_nowait(const char *name,...) { return -ENOSYS; }
try_then_request_module  macro  include/linux/kmod.h  44  #define try_then_request_module(x,mod...) (x)
UMH_NO_WAIT  macro  include/linux/kmod.h  51  #define UMH_NO_WAIT 0
UMH_WAIT_EXEC  macro  include/linux/kmod.h  52  #define UMH_WAIT_EXEC 1
UMH_WAIT_PROC  macro  include/linux/kmod.h  53  #define UMH_WAIT_PROC 2
UMH_KILLABLE  macro  include/linux/kmod.h  54  #define UMH_KILLABLE 4
subprocess_info  struct  include/linux/kmod.h  56  struct subprocess_info { struct work_struct work; struct completion *complete; char *path; char **argv; char **envp; int wait; int retval; int (*init)(struct subprocess_info *info, struct cred *new); void (*cleanup)(struct subprocess_info *info); void *data; };
call_usermodehelper_fns  prototype  include/linux/kmod.h  70  call_usermodehelper_fns(char *path,char **argv,char **envp,int wait,int (*init)(struct subprocess_info *info, struct cred *new),void (*cleanup)(struct subprocess_info *), void *data);
call_usermodehelper  function  include/linux/kmod.h  75  call_usermodehelper(char *path,char **argv,char **envp,int wait)
umh_disable_depth  enum  include/linux/kmod.h  83  enum umh_disable_depth { UMH_ENABLED = 0, UMH_FREEZING, UMH_DISABLED, };
usermodehelper_init  prototype  include/linux/kmod.h  89  extern void usermodehelper_init(void);
__usermodehelper_disable  prototype  include/linux/kmod.h  91  extern int __usermodehelper_disable(enum umh_disable_depth depth);
__usermodehelper_set_disable_depth  prototype  include/linux/kmod.h  92  extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);
usermodehelper_disable  function  include/linux/kmod.h  94  static inline int usermodehelper_disable(void)
usermodehelper_enable  function  include/linux/kmod.h  99  static inline void usermodehelper_enable(void)
usermodehelper_read_trylock  prototype  include/linux/kmod.h  104  extern int usermodehelper_read_trylock(void);
usermodehelper_read_lock_wait  prototype  include/linux/kmod.h  105  extern long usermodehelper_read_lock_wait(long timeout);
usermodehelper_read_unlock  prototype  include/linux/kmod.h  106  extern void usermodehelper_read_unlock(void);
_LINUX_ELF_H  macro  include/linux/elf.h  2  #define _LINUX_ELF_H
elf_read_implies_exec  macro  arch/x86/include/asm/elf.h  267  #define elf_read_implies_exec(ex,executable_stack) (executable_stack != EXSTACK_DISABLE_X)
elfhdr  macro  include/linux/elf.h  27  #define elfhdr elf64_hdr
elf_phdr  macro  include/linux/elf.h  28  #define elf_phdr elf64_phdr
elf_shdr  macro  include/linux/elf.h  29  #define elf_shdr elf64_shdr
elf_note  macro  include/linux/elf.h  30  #define elf_note elf64_note
elf_addr_t  macro  include/linux/elf.h  31  #define elf_addr_t Elf64_Off
Elf_Half  macro  include/linux/elf.h  32  #define Elf_Half Elf64_Half
elf_coredump_extra_notes_size  prototype  include/linux/elf.h  44  extern int elf_coredump_extra_notes_size(void);
elf_coredump_extra_notes_write  prototype  include/linux/elf.h  45  extern int elf_coredump_extra_notes_write(struct file *file,loff_t *foffset);
__LINUX_STRINGIFY_H  macro  include/linux/stringify.h  2  #define __LINUX_STRINGIFY_H
__stringify_1  macro  include/linux/stringify.h  9  #define __stringify_1(x...) #x
__stringify  macro  include/linux/stringify.h  10  #define __stringify(x...) __stringify_1(x)
_KOBJECT_H_  macro  include/linux/kobject.h  17  #define _KOBJECT_H_
UEVENT_HELPER_PATH_LEN  macro  include/linux/kobject.h  30  #define UEVENT_HELPER_PATH_LEN 256
UEVENT_NUM_ENVP  macro  include/linux/kobject.h  31  #define UEVENT_NUM_ENVP 32
UEVENT_BUFFER_SIZE  macro  include/linux/kobject.h  32  #define UEVENT_BUFFER_SIZE 2048
kobject_action  enum  include/linux/kobject.h  50  enum kobject_action { KOBJ_ADD, KOBJ_REMOVE, KOBJ_CHANGE, KOBJ_MOVE, KOBJ_ONLINE, KOBJ_OFFLINE, KOBJ_MAX };
kobject  struct  include/linux/kobject.h  60  struct kobject { const char *name; struct list_head entry; struct kobject *parent; struct kset *kset; struct kobj_type *ktype; struct sysfs_dirent *sd; struct kref kref; unsigned int state_initialized:1; unsigned int state_in_sysfs:1; unsigned int state_add_uevent_sent:1; unsigned int state_remove_uevent_sent:1; unsigned int uevent_suppress:1; };
kobject_set_name  prototype  include/linux/kobject.h  76  int kobject_set_name(struct kobject *kobj,const char *name,...);
kobject_set_name_vargs  prototype  include/linux/kobject.h  77  extern int kobject_set_name_vargs(struct kobject *kobj,const char *fmt,va_list vargs);
kobject_name  function  include/linux/kobject.h  80  static inline const char *kobject_name(const struct kobject *kobj)
kobject_init  prototype  include/linux/kobject.h  85  extern void kobject_init(struct kobject *kobj,struct kobj_type *ktype);
kobject_add  prototype  include/linux/kobject.h  87  int kobject_add(struct kobject *kobj,struct kobject *parent,const char *fmt, ...);
kobject_init_and_add  prototype  include/linux/kobject.h  90  int kobject_init_and_add(struct kobject *kobj,struct kobj_type *ktype, struct kobject *parent,const char *fmt, ...);
kobject_del  prototype  include/linux/kobject.h  94  extern void kobject_del(struct kobject *kobj);
kobject_create  prototype  include/linux/kobject.h  96  extern struct kobject * __must_check kobject_create(void);
kobject_create_and_add  prototype  include/linux/kobject.h  97  extern struct kobject * __must_check kobject_create_and_add(const char *name,struct kobject *parent);
kobject_rename  prototype  include/linux/kobject.h  100  extern int __must_check kobject_rename(struct kobject *,const char *new_name);
kobject_move  prototype  include/linux/kobject.h  101  extern int __must_check kobject_move(struct kobject *,struct kobject *);
kobject_get  prototype  include/linux/kobject.h  103  extern struct kobject *kobject_get(struct kobject *kobj);
kobject_put  prototype  include/linux/kobject.h  104  extern void kobject_put(struct kobject *kobj);
kobject_get_path  prototype  include/linux/kobject.h  106  extern char *kobject_get_path(struct kobject *kobj,gfp_t flag);
kobj_type  struct  include/linux/kobject.h  108  struct kobj_type { void (*release)(struct kobject *kobj); const struct sysfs_ops *sysfs_ops; struct attribute **default_attrs; const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj); };
kobj_uevent_env  struct  include/linux/kobject.h  116  struct kobj_uevent_env { char *envp[UEVENT_NUM_ENVP]; int envp_idx; char buf[UEVENT_BUFFER_SIZE]; int buflen; };
kset_uevent_ops  struct  include/linux/kobject.h  123  struct kset_uevent_ops { int (* const filter)(struct kset *kset, struct kobject *kobj); const char *(* const name)(struct kset *kset, struct kobject *kobj); int (* const uevent)(struct kset *kset, struct kobject *kobj,struct kobj_uevent_env *env); };
kobj_attribute  struct  include/linux/kobject.h  130  struct kobj_attribute { struct attribute attr; ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,char *buf); ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count); };
kset  struct  include/linux/kobject.h  159  struct kset { struct list_head list; spinlock_t list_lock; struct kobject kobj; const struct kset_uevent_ops *uevent_ops; };
kset_init  prototype  include/linux/kobject.h  166  extern void kset_init(struct kset *kset);
kset_register  prototype  include/linux/kobject.h  167  extern int __must_check kset_register(struct kset *kset);
kset_unregister  prototype  include/linux/kobject.h  168  extern void kset_unregister(struct kset *kset);
kset_create_and_add  prototype  include/linux/kobject.h  169  extern struct kset * __must_check kset_create_and_add(const char *name,const struct kset_uevent_ops *u,struct kobject *parent_kobj);
to_kset  function  include/linux/kobject.h  173  static inline struct kset *to_kset(struct kobject *kobj)
kset_get  function  include/linux/kobject.h  178  static inline struct kset *kset_get(struct kset *k)
kset_put  function  include/linux/kobject.h  183  static inline void kset_put(struct kset *k)
get_ktype  function  include/linux/kobject.h  188  static inline struct kobj_type *get_ktype(struct kobject *kobj)
kset_find_obj  prototype  include/linux/kobject.h  193  extern struct kobject *kset_find_obj(struct kset *,const char *);
kobject_uevent  prototype  include/linux/kobject.h  206  int kobject_uevent(struct kobject *kobj,enum kobject_action action);
kobject_uevent_env  prototype  include/linux/kobject.h  207  int kobject_uevent_env(struct kobject *kobj,enum kobject_action action,char *envp[]);
add_uevent_var  prototype  include/linux/kobject.h  211  int add_uevent_var(struct kobj_uevent_env *env,const char *format,...);
kobject_action_type  prototype  include/linux/kobject.h  213  int kobject_action_type(const char *buf,size_t count,enum kobject_action *type);
_LINUX_MODULE_PARAMS_H  macro  include/linux/moduleparam.h  2  #define _LINUX_MODULE_PARAMS_H
MODULE_PARAM_PREFIX  macro  include/linux/moduleparam.h  13  #define MODULE_PARAM_PREFIX KBUILD_MODNAME "."
MAX_PARAM_PREFIX_LEN  macro  include/linux/moduleparam.h  17  #define MAX_PARAM_PREFIX_LEN (64 - sizeof(unsigned long))
__MODULE_INFO  macro  include/linux/moduleparam.h  26  #define __MODULE_INFO(tag,name,info) struct __UNIQUE_ID(name) {}
__MODULE_PARM_TYPE  macro  include/linux/moduleparam.h  29  #define __MODULE_PARM_TYPE(name,_type) __MODULE_INFO(parmtype, name##type, #name ":" _type)
MODULE_PARM_DESC  macro  include/linux/moduleparam.h  34  #define MODULE_PARM_DESC(_parm,desc) __MODULE_INFO(parm, _parm, #_parm ":" desc)
kernel_param_ops  struct  include/linux/moduleparam.h  39  struct kernel_param_ops { int (*set)(const char *val, const struct kernel_param *kp); int (*get)(char *buffer, const struct kernel_param *kp); void (*free)(void *arg); };
kernel_param  struct  include/linux/moduleparam.h  48  struct kernel_param { const char *name; const struct kernel_param_ops *ops; u16 perm; s16 level; union { void *arg; const struct kparam_string *str; const struct kparam_array *arr; };
kparam_string  struct  include/linux/moduleparam.h  61  struct kparam_string { unsigned int maxlen; char *string; };
kparam_array  struct  include/linux/moduleparam.h  67  struct kparam_array { unsigned int max; unsigned int elemsize; unsigned int *num; const struct kernel_param_ops *ops; void *elem; };
module_param  macro  include/linux/moduleparam.h  101  #define module_param(name,type,perm) module_param_named(name, name, type, perm)
module_param_named  macro  include/linux/moduleparam.h  115  #define module_param_named(name,value,type,perm) param_check_##type(name, &(value)); module_param_cb(name, &param_ops_##type, &value, perm); __MODULE_PARM_TYPE(name, #type)
module_param_cb  macro  include/linux/moduleparam.h  128  #define module_param_cb(name,ops,arg,perm) __module_param_call(MODULE_PARAM_PREFIX, name, ops, arg, perm, -1)
__level_param_cb  macro  include/linux/moduleparam.h  140  #define __level_param_cb(name,ops,arg,perm,level) __module_param_call(MODULE_PARAM_PREFIX, name, ops, arg, perm, level)
core_param_cb  macro  include/linux/moduleparam.h  143  #define core_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 1)
postcore_param_cb  macro  include/linux/moduleparam.h  146  #define postcore_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 2)
arch_param_cb  macro  include/linux/moduleparam.h  149  #define arch_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 3)
subsys_param_cb  macro  include/linux/moduleparam.h  152  #define subsys_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 4)
fs_param_cb  macro  include/linux/moduleparam.h  155  #define fs_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 5)
device_param_cb  macro  include/linux/moduleparam.h  158  #define device_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 6)
late_param_cb  macro  include/linux/moduleparam.h  161  #define late_param_cb(name,ops,arg,perm) __level_param_cb(name, ops, arg, perm, 7)
__moduleparam_const  macro  include/linux/moduleparam.h  171  #define __moduleparam_const const
__module_param_call  macro  include/linux/moduleparam.h  176  #define __module_param_call(prefix,name,ops,arg,perm,level) /* Default value instead of permissions? */ static int __param_perm_check_##name __attribute__((unused)) = BUILD_BUG_ON_ZERO((perm) < 0 || (perm) > 0777 || ((perm) & 2)) + BUILD_BUG_ON_ZERO(sizeof(""prefix) > MAX_PARAM_PREFIX_LEN); static const char __param_str_##name[] = prefix #name; static struct kernel_param __moduleparam_const __param_##name __used __attribute__ ((unused,__section__ ("__param"),aligned(sizeof(void *)))) = { __param_str_##name, ops, perm, level, { arg } }
module_param_call  macro  include/linux/moduleparam.h  188  #define module_param_call(name,set,get,arg,perm) static struct kernel_param_ops __param_ops_##name = { (void *)set, (void *)get }; __module_param_call(MODULE_PARAM_PREFIX, name, &__param_ops_##name, arg, (perm) + sizeof(__check_old_set_param(set))*0, -1)
__check_old_set_param  function  include/linux/moduleparam.h  197  __check_old_set_param(int (*oldset)(const char *,struct kernel_param *))
kparam_block_sysfs_write  macro  include/linux/moduleparam.h  208  #define kparam_block_sysfs_write(name) do { BUG_ON(!(__param_##name.perm & 0222)); __kernel_param_lock(); } while (0)
kparam_unblock_sysfs_write  macro  include/linux/moduleparam.h  218  #define kparam_unblock_sysfs_write(name) do { BUG_ON(!(__param_##name.perm & 0222)); __kernel_param_unlock(); } while (0)
kparam_block_sysfs_read  macro  include/linux/moduleparam.h  230  #define kparam_block_sysfs_read(name) do { BUG_ON(!(__param_##name.perm & 0444)); __kernel_param_lock(); } while (0)
kparam_unblock_sysfs_read  macro  include/linux/moduleparam.h  240  #define kparam_unblock_sysfs_read(name) do { BUG_ON(!(__param_##name.perm & 0444)); __kernel_param_unlock(); } while (0)
__kernel_param_lock  function  include/linux/moduleparam.h  250  static inline void __kernel_param_lock(void)
__kernel_param_unlock  function  include/linux/moduleparam.h  253  static inline void __kernel_param_unlock(void)
core_param  macro  include/linux/moduleparam.h  271  #define core_param(name,var,type,perm) param_check_##type(name, &(var)); __module_param_call("", name, &param_ops_##type, &var, perm, -1)
module_param_string  macro  include/linux/moduleparam.h  286  #define module_param_string(name,string,len,perm) static const struct kparam_string __param_string_##name = { len, string }; __module_param_call(MODULE_PARAM_PREFIX, name, &param_ops_string, .str = &__param_string_##name, perm, -1); __MODULE_PARM_TYPE(name, "string")
parameq  prototype  include/linux/moduleparam.h  302  extern bool parameq(const char *name1,const char *name2);
parameqn  prototype  include/linux/moduleparam.h  312  extern bool parameqn(const char *name1,const char *name2,size_t n);
parse_args  prototype  include/linux/moduleparam.h  315  extern int parse_args(const char *name,char *args,const struct kernel_param *params,unsigned num,s16 level_min,s16 level_max,int (*unknown)(char *param, char *val,const char *doing));
destroy_params  function  include/linux/moduleparam.h  328  static inline void destroy_params(const struct kernel_param *params,unsigned num)
__param_check  macro  include/linux/moduleparam.h  337  #define __param_check(name,p,type) static inline type *__check_##name(void) { return(p); }
param_set_byte  prototype  include/linux/moduleparam.h  341  extern int param_set_byte(const char *val,const struct kernel_param *kp);
param_get_byte  prototype  include/linux/moduleparam.h  342  extern int param_get_byte(char *buffer,const struct kernel_param *kp);
param_check_byte  macro  include/linux/moduleparam.h  343  #define param_check_byte(name,p) __param_check(name,p,unsigned char)
param_set_short  prototype  include/linux/moduleparam.h  346  extern int param_set_short(const char *val,const struct kernel_param *kp);
param_get_short  prototype  include/linux/moduleparam.h  347  extern int param_get_short(char *buffer,const struct kernel_param *kp);
param_check_short  macro  include/linux/moduleparam.h  348  #define param_check_short(name,p) __param_check(name,p,short)
param_set_ushort  prototype  include/linux/moduleparam.h  351  extern int param_set_ushort(const char *val,const struct kernel_param *kp);
param_get_ushort  prototype  include/linux/moduleparam.h  352  extern int param_get_ushort(char *buffer,const struct kernel_param *kp);
param_check_ushort  macro  include/linux/moduleparam.h  353  #define param_check_ushort(name,p) __param_check(name,p,unsigned short)
param_set_int  prototype  include/linux/moduleparam.h  356  extern int param_set_int(const char *val,const struct kernel_param *kp);
param_get_int  prototype  include/linux/moduleparam.h  357  extern int param_get_int(char *buffer,const struct kernel_param *kp);
param_check_int  macro  include/linux/moduleparam.h  358  #define param_check_int(name,p) __param_check(name,p,int)
param_set_uint  prototype  include/linux/moduleparam.h  361  extern int param_set_uint(const char *val,const struct kernel_param *kp);
param_get_uint  prototype  include/linux/moduleparam.h  362  extern int param_get_uint(char *buffer,const struct kernel_param *kp);
param_check_uint  macro  include/linux/moduleparam.h  363  #define param_check_uint(name,p) __param_check(name,p,unsigned int)
param_set_long  prototype  include/linux/moduleparam.h  366  extern int param_set_long(const char *val,const struct kernel_param *kp);
param_get_long  prototype  include/linux/moduleparam.h  367  extern int param_get_long(char *buffer,const struct kernel_param *kp);
param_check_long  macro  include/linux/moduleparam.h  368  #define param_check_long(name,p) __param_check(name,p,long)
param_set_ulong  prototype  include/linux/moduleparam.h  371  extern int param_set_ulong(const char *val,const struct kernel_param *kp);
param_get_ulong  prototype  include/linux/moduleparam.h  372  extern int param_get_ulong(char *buffer,const struct kernel_param *kp);
param_check_ulong  macro  include/linux/moduleparam.h  373  #define param_check_ulong(name,p) __param_check(name,p,unsigned long)
param_set_charp  prototype  include/linux/moduleparam.h  376  extern int param_set_charp(const char *val,const struct kernel_param *kp);
param_get_charp  prototype  include/linux/moduleparam.h  377  extern int param_get_charp(char *buffer,const struct kernel_param *kp);
param_check_charp  macro  include/linux/moduleparam.h  378  #define param_check_charp(name,p) __param_check(name,p,char *)
param_set_bool  prototype  include/linux/moduleparam.h  382  extern int param_set_bool(const char *val,const struct kernel_param *kp);
param_get_bool  prototype  include/linux/moduleparam.h  383  extern int param_get_bool(char *buffer,const struct kernel_param *kp);
param_check_bool  macro  include/linux/moduleparam.h  384  #define param_check_bool(name,p) __param_check(name,p,bool)
param_set_invbool  prototype  include/linux/moduleparam.h  387  extern int param_set_invbool(const char *val,const struct kernel_param *kp);
param_get_invbool  prototype  include/linux/moduleparam.h  388  extern int param_get_invbool(char *buffer,const struct kernel_param *kp);
param_check_invbool  macro  include/linux/moduleparam.h  389  #define param_check_invbool(name,p) __param_check(name,p,bool)
param_set_bint  prototype  include/linux/moduleparam.h  393  extern int param_set_bint(const char *val,const struct kernel_param *kp);
param_get_bint  macro  include/linux/moduleparam.h  394  #define param_get_bint param_get_int
param_check_bint  macro  include/linux/moduleparam.h  395  #define param_check_bint param_check_int
module_param_array  macro  include/linux/moduleparam.h  410  #define module_param_array(name,type,nump,perm) module_param_array_named(name, name, type, nump, perm)
module_param_array_named  macro  include/linux/moduleparam.h  424  #define module_param_array_named(name,array,type,nump,perm) param_check_##type(name, &(array)[0]); static const struct kparam_array __param_arr_##name = { .max = ARRAY_SIZE(array), .num = nump, .ops = &param_ops_##type, .elemsize = sizeof(array[0]), .elem = array }; __module_param_call(MODULE_PARAM_PREFIX, name, &param_array_ops, .arr = &__param_arr_##name, perm, -1); __MODULE_PARM_TYPE(name, "array of " #type)
param_set_copystring  prototype  include/linux/moduleparam.h  439  extern int param_set_copystring(const char *val,const struct kernel_param *);
param_get_string  prototype  include/linux/moduleparam.h  440  extern int param_get_string(char *buffer,const struct kernel_param *kp);
module_param_sysfs_setup  function  include/linux/moduleparam.h  453  static inline int module_param_sysfs_setup(struct module *mod,const struct kernel_param *kparam,unsigned int num_params)
module_param_sysfs_remove  function  include/linux/moduleparam.h  460  static inline void module_param_sysfs_remove(struct module *mod)
_LINUX_TRACEPOINT_H  macro  include/linux/tracepoint.h  2  #define _LINUX_TRACEPOINT_H
tracepoint_func  struct  include/linux/tracepoint.h  25  struct tracepoint_func { void *func; void *data; };
tracepoint  struct  include/linux/tracepoint.h  30  struct tracepoint { const char *name; struct static_key key; void (*regfunc)(void); void (*unregfunc)(void); struct tracepoint_func __rcu *funcs; };
tracepoint_probe_register  prototype  include/linux/tracepoint.h  42  extern int tracepoint_probe_register(const char *name,void *probe,void *data);
tracepoint_probe_unregister  prototype  include/linux/tracepoint.h  49  tracepoint_probe_unregister(const char *name,void *probe,void *data);
tracepoint_probe_register_noupdate  prototype  include/linux/tracepoint.h  51  extern int tracepoint_probe_register_noupdate(const char *name,void *probe,void *data);
tracepoint_probe_unregister_noupdate  prototype  include/linux/tracepoint.h  53  extern int tracepoint_probe_unregister_noupdate(const char *name,void *probe,void *data);
tracepoint_probe_update_all  prototype  include/linux/tracepoint.h  55  extern void tracepoint_probe_update_all(void);
tp_module  struct  include/linux/tracepoint.h  58  struct tp_module { struct list_head list; unsigned int num_tracepoints; struct tracepoint * const *tracepoints_ptrs; };
tracepoint_iter  struct  include/linux/tracepoint.h  65  struct tracepoint_iter { struct tp_module *module; struct tracepoint * const *tracepoint; };
tracepoint_iter_start  prototype  include/linux/tracepoint.h  72  extern void tracepoint_iter_start(struct tracepoint_iter *iter);
tracepoint_iter_next  prototype  include/linux/tracepoint.h  73  extern void tracepoint_iter_next(struct tracepoint_iter *iter);
tracepoint_iter_stop  prototype  include/linux/tracepoint.h  74  extern void tracepoint_iter_stop(struct tracepoint_iter *iter);
tracepoint_iter_reset  prototype  include/linux/tracepoint.h  75  extern void tracepoint_iter_reset(struct tracepoint_iter *iter);
tracepoint_synchronize_unregister  function  include/linux/tracepoint.h  82  static inline void tracepoint_synchronize_unregister(void)
PARAMS  macro  include/linux/tracepoint.h  87  #define PARAMS(args...) args
TP_PROTO  macro  include/linux/tracepoint.h  101  #define TP_PROTO(args...) args
TP_ARGS  macro  include/linux/tracepoint.h  102  #define TP_ARGS(args...) args
TP_CONDITION  macro  include/linux/tracepoint.h  103  #define TP_CONDITION(args...) args
__DO_TRACE  macro  include/linux/tracepoint.h  117  #define __DO_TRACE(tp,proto,args,cond,prercu,postrcu) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cond)) return; prercu; rcu_read_lock_sched_notrace(); it_func_ptr = rcu_dereference_sched((tp)->funcs); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(proto))(it_func))(args); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); postrcu; } while (0)
__DECLARE_TRACE_RCU  macro  include/linux/tracepoint.h  152  #define __DECLARE_TRACE_RCU(name,proto,args,cond,data_proto,data_args)
__DECLARE_TRACE  macro  include/linux/tracepoint.h  213  #define __DECLARE_TRACE(name,proto,args,cond,data_proto,data_args) static inline void trace_##name(proto) { } static inline void trace_##name##_rcuidle(proto) { } static inline int register_trace_##name(void (*probe)(data_proto), void *data) { return -ENOSYS; } static inline int unregister_trace_##name(void (*probe)(data_proto), void *data) { return -ENOSYS; } static inline void check_trace_callback_type_##name(void (*cb)(data_proto)) { }
DEFINE_TRACE_FN  macro  include/linux/tracepoint.h  234  #define DEFINE_TRACE_FN(name,reg,unreg)
DEFINE_TRACE  macro  include/linux/tracepoint.h  235  #define DEFINE_TRACE(name)
EXPORT_TRACEPOINT_SYMBOL_GPL  macro  include/linux/tracepoint.h  236  #define EXPORT_TRACEPOINT_SYMBOL_GPL(name)
EXPORT_TRACEPOINT_SYMBOL  macro  include/linux/tracepoint.h  237  #define EXPORT_TRACEPOINT_SYMBOL(name)
DECLARE_TRACE_NOARGS  macro  include/linux/tracepoint.h  255  #define DECLARE_TRACE_NOARGS(name) __DECLARE_TRACE(name, void, , 1, void *__data, __data)
DECLARE_TRACE  macro  include/linux/tracepoint.h  258  #define DECLARE_TRACE(name,proto,args) __DECLARE_TRACE(name, PARAMS(proto), PARAMS(args), 1, PARAMS(void *__data, proto), PARAMS(__data, args))
DECLARE_TRACE_CONDITION  macro  include/linux/tracepoint.h  263  #define DECLARE_TRACE_CONDITION(name,proto,args,cond) __DECLARE_TRACE(name, PARAMS(proto), PARAMS(args), PARAMS(cond), PARAMS(void *__data, proto), PARAMS(__data, args))
TRACE_EVENT_FLAGS  macro  include/linux/tracepoint.h  398  #define TRACE_EVENT_FLAGS(event,flag)
DECLARE_EVENT_CLASS  macro  include/linux/tracepoint.h  378  #define DECLARE_EVENT_CLASS(name,proto,args,tstruct,assign,print)
DEFINE_EVENT  macro  include/linux/tracepoint.h  379  #define DEFINE_EVENT(template,name,proto,args) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
DEFINE_EVENT_PRINT  macro  include/linux/tracepoint.h  381  #define DEFINE_EVENT_PRINT(template,name,proto,args,print) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
DEFINE_EVENT_CONDITION  macro  include/linux/tracepoint.h  383  #define DEFINE_EVENT_CONDITION(template,name,proto, args, cond) DECLARE_TRACE_CONDITION(name, PARAMS(proto), PARAMS(args), PARAMS(cond))
TRACE_EVENT  macro  include/linux/tracepoint.h  388  #define TRACE_EVENT(name,proto,args,struct,assign,print) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
TRACE_EVENT_FN  macro  include/linux/tracepoint.h  390  #define TRACE_EVENT_FN(name,proto,args,struct, assign, print, reg, unreg) DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))
TRACE_EVENT_CONDITION  macro  include/linux/tracepoint.h  393  #define TRACE_EVENT_CONDITION(name,proto,args,cond, struct, assign, print) DECLARE_TRACE_CONDITION(name, PARAMS(proto), PARAMS(args), PARAMS(cond))
_LINUX_EXPORT_H  macro  include/linux/export.h  2  #define _LINUX_EXPORT_H
MODULE_SYMBOL_PREFIX  macro  include/linux/export.h  16  #define MODULE_SYMBOL_PREFIX ""
kernel_symbol  struct  include/linux/export.h  19  struct kernel_symbol { unsigned long value; const char *name; };
THIS_MODULE  macro  include/linux/export.h  29  #define THIS_MODULE ((struct module *)0)
__CRC_SYMBOL  macro  include/linux/export.h  45  #define __CRC_SYMBOL(sym,sec)
__EXPORT_SYMBOL  macro  include/linux/export.h  49  #define __EXPORT_SYMBOL(sym,sec) extern typeof(sym) sym; __CRC_SYMBOL(sym, sec) static const char __kstrtab_##sym[] __attribute__((section("__ksymtab_strings"), aligned(1))) = MODULE_SYMBOL_PREFIX #sym; static const struct kernel_symbol __ksymtab_##sym __used __attribute__((section("___ksymtab" sec "+" #sym), unused)) = { (unsigned long)&sym, __kstrtab_##sym }
EXPORT_SYMBOL  macro  include/linux/export.h  81  #define EXPORT_SYMBOL(sym)
EXPORT_SYMBOL_GPL  macro  include/linux/export.h  82  #define EXPORT_SYMBOL_GPL(sym)
EXPORT_SYMBOL_GPL_FUTURE  macro  include/linux/export.h  83  #define EXPORT_SYMBOL_GPL_FUTURE(sym)
EXPORT_UNUSED_SYMBOL  macro  include/linux/export.h  84  #define EXPORT_UNUSED_SYMBOL(sym)
EXPORT_UNUSED_SYMBOL_GPL  macro  include/linux/export.h  85  #define EXPORT_UNUSED_SYMBOL_GPL(sym)
__LINUX_PERCPU_H  macro  include/linux/percpu.h  2  #define __LINUX_PERCPU_H
PERCPU_MODULE_RESERVE  macro  include/linux/percpu.h  16  #define PERCPU_MODULE_RESERVE 0
PERCPU_ENOUGH_ROOM  macro  include/linux/percpu.h  20  #define PERCPU_ENOUGH_ROOM (ALIGN(__per_cpu_end - __per_cpu_start, SMP_CACHE_BYTES) + PERCPU_MODULE_RESERVE)
get_cpu_var  macro  include/linux/percpu.h  29  #define get_cpu_var(var) (*({ preempt_disable(); &__get_cpu_var(var); }))
put_cpu_var  macro  include/linux/percpu.h  37  #define put_cpu_var(var) do { (void)&(var); preempt_enable(); } while (0)
get_cpu_ptr  macro  include/linux/percpu.h  42  #define get_cpu_ptr(var) ({ preempt_disable(); this_cpu_ptr(var); })
put_cpu_ptr  macro  include/linux/percpu.h  46  #define put_cpu_ptr(var) do { (void)(var); preempt_enable(); } while (0)
PCPU_MIN_UNIT_SIZE  macro  include/linux/percpu.h  52  #define PCPU_MIN_UNIT_SIZE PFN_ALIGN(32 << 10)
PERCPU_DYNAMIC_EARLY_SLOTS  macro  include/linux/percpu.h  61  #define PERCPU_DYNAMIC_EARLY_SLOTS 128
PERCPU_DYNAMIC_EARLY_SIZE  macro  include/linux/percpu.h  62  #define PERCPU_DYNAMIC_EARLY_SIZE (12 << 10)
PERCPU_DYNAMIC_RESERVE  macro  include/linux/percpu.h  78  #define PERCPU_DYNAMIC_RESERVE (12 << 10)
pcpu_group_info  struct  include/linux/percpu.h  84  struct pcpu_group_info { int nr_units; unsigned long base_offset; unsigned int *cpu_map; };
pcpu_alloc_info  struct  include/linux/percpu.h  91  struct pcpu_alloc_info { size_t static_size; size_t reserved_size; size_t dyn_size; size_t unit_size; size_t atom_size; size_t alloc_size; size_t __ai_size; int nr_groups; struct pcpu_group_info groups[]; };
pcpu_fc  enum  include/linux/percpu.h  103  enum pcpu_fc { PCPU_FC_AUTO, PCPU_FC_EMBED, PCPU_FC_PAGE, PCPU_FC_NR, };
pcpu_alloc_alloc_info  prototype  include/linux/percpu.h  120  extern struct pcpu_alloc_info * __init pcpu_alloc_alloc_info(int nr_groups,int nr_units);
pcpu_free_alloc_info  prototype  include/linux/percpu.h  122  extern void __init pcpu_free_alloc_info(struct pcpu_alloc_info *ai);
pcpu_setup_first_chunk  prototype  include/linux/percpu.h  124  extern int __init pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,void *base_addr);
pcpu_embed_first_chunk  prototype  include/linux/percpu.h  128  extern int __init pcpu_embed_first_chunk(size_t reserved_size,size_t dyn_size,size_t atom_size,pcpu_fc_cpu_distance_fn_t cpu_distance_fn,pcpu_fc_alloc_fn_t alloc_fn,pcpu_fc_free_fn_t free_fn);
pcpu_page_first_chunk  prototype  include/linux/percpu.h  136  extern int __init pcpu_page_first_chunk(size_t reserved_size,pcpu_fc_alloc_fn_t alloc_fn,pcpu_fc_free_fn_t free_fn,pcpu_fc_populate_pte_fn_t populate_pte_fn);
per_cpu_ptr  macro  include/linux/percpu.h  150  #define per_cpu_ptr(ptr,cpu) ({ (void)(cpu); VERIFY_PERCPU_PTR((ptr)); })
__alloc_reserved_percpu  prototype  include/linux/percpu.h  153  extern void __percpu *__alloc_reserved_percpu(size_t size,size_t align);
is_kernel_percpu_address  prototype  include/linux/percpu.h  154  extern bool is_kernel_percpu_address(unsigned long addr);
setup_per_cpu_areas  prototype  include/linux/percpu.h  157  extern void __init setup_per_cpu_areas(void);
percpu_init_late  prototype  include/linux/percpu.h  159  extern void __init percpu_init_late(void);
__alloc_percpu  prototype  include/linux/percpu.h  161  extern void __percpu *__alloc_percpu(size_t size,size_t align);
free_percpu  prototype  include/linux/percpu.h  162  extern void free_percpu(void __percpu *__pdata);
per_cpu_ptr_to_phys  prototype  include/linux/percpu.h  163  extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
alloc_percpu  macro  include/linux/percpu.h  165  #define alloc_percpu(type) (typeof(type) __percpu *)__alloc_percpu(sizeof(type), __alignof__(type))
__bad_size_call_parameter  prototype  include/linux/percpu.h  173  extern void __bad_size_call_parameter(void);
__pcpu_size_call_return  macro  include/linux/percpu.h  175  #define __pcpu_size_call_return(stem,variable) ({	typeof(variable) pscr_ret__; __verify_pcpu_ptr(&(variable)); switch(sizeof(variable)) { case 1: pscr_ret__ = stem##1(variable);break; case 2: pscr_ret__ = stem##2(variable);break; case 4: pscr_ret__ = stem##4(variable);break; case 8: pscr_ret__ = stem##8(variable);break; default: __bad_size_call_parameter();break; } pscr_ret__; })
__pcpu_size_call_return2  macro  include/linux/percpu.h  189  #define __pcpu_size_call_return2(stem,variable,...) ({ typeof(variable) pscr2_ret__; __verify_pcpu_ptr(&(variable)); switch(sizeof(variable)) { case 1: pscr2_ret__ = stem##1(variable, __VA_ARGS__); break; case 2: pscr2_ret__ = stem##2(variable, __VA_ARGS__); break; case 4: pscr2_ret__ = stem##4(variable, __VA_ARGS__); break; case 8: pscr2_ret__ = stem##8(variable, __VA_ARGS__); break; default: __bad_size_call_parameter(); break; } pscr2_ret__; })
__pcpu_double_call_return_bool  macro  include/linux/percpu.h  212  #define __pcpu_double_call_return_bool(stem,pcp1,pcp2,...) ({ bool pdcrb_ret__; __verify_pcpu_ptr(&pcp1); BUILD_BUG_ON(sizeof(pcp1) != sizeof(pcp2)); VM_BUG_ON((unsigned long)(&pcp1) % (2 * sizeof(pcp1))); VM_BUG_ON((unsigned long)(&pcp2) != (unsigned long)(&pcp1) + sizeof(pcp1)); switch(sizeof(pcp1)) { case 1: pdcrb_ret__ = stem##1(pcp1, pcp2, __VA_ARGS__); break; case 2: pdcrb_ret__ = stem##2(pcp1, pcp2, __VA_ARGS__); break; case 4: pdcrb_ret__ = stem##4(pcp1, pcp2, __VA_ARGS__); break; case 8: pdcrb_ret__ = stem##8(pcp1, pcp2, __VA_ARGS__); break; default: __bad_size_call_parameter(); break; } pdcrb_ret__; })
__pcpu_size_call  macro  include/linux/percpu.h  231  #define __pcpu_size_call(stem,variable,...) do { __verify_pcpu_ptr(&(variable)); switch(sizeof(variable)) { case 1: stem##1(variable, __VA_ARGS__);break; case 2: stem##2(variable, __VA_ARGS__);break; case 4: stem##4(variable, __VA_ARGS__);break; case 8: stem##8(variable, __VA_ARGS__);break; default: __bad_size_call_parameter();break; } } while (0)
_this_cpu_generic_read  macro  include/linux/percpu.h  270  #define _this_cpu_generic_read(pcp) ({	typeof(pcp) ret__; preempt_disable(); ret__ = *this_cpu_ptr(&(pcp)); preempt_enable(); ret__; })
this_cpu_read_1  macro  arch/x86/include/asm/percpu.h  387  #define this_cpu_read_1(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read_2  macro  arch/x86/include/asm/percpu.h  388  #define this_cpu_read_2(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read_4  macro  arch/x86/include/asm/percpu.h  389  #define this_cpu_read_4(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read_8  macro  arch/x86/include/asm/percpu.h  454  #define this_cpu_read_8(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
this_cpu_read  macro  include/linux/percpu.h  291  # define this_cpu_read(pcp) __pcpu_size_call_return(this_cpu_read_,(pcp))
_this_cpu_generic_to_op  macro  include/linux/percpu.h  294  #define _this_cpu_generic_to_op(pcp,val,op) do { unsigned long flags; raw_local_irq_save(flags); *__this_cpu_ptr(&(pcp)) op val; raw_local_irq_restore(flags); } while (0)
this_cpu_write_1  macro  arch/x86/include/asm/percpu.h  390  #define this_cpu_write_1(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write_2  macro  arch/x86/include/asm/percpu.h  391  #define this_cpu_write_2(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write_4  macro  arch/x86/include/asm/percpu.h  392  #define this_cpu_write_4(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write_8  macro  arch/x86/include/asm/percpu.h  455  #define this_cpu_write_8(pcp,val) percpu_to_op("mov",(pcp),val)
this_cpu_write  macro  include/linux/percpu.h  315  # define this_cpu_write(pcp,val) __pcpu_size_call(this_cpu_write_,(pcp),(val))
this_cpu_add_1  macro  arch/x86/include/asm/percpu.h  393  #define this_cpu_add_1(pcp,val) percpu_add_op((pcp),val)
this_cpu_add_2  macro  arch/x86/include/asm/percpu.h  394  #define this_cpu_add_2(pcp,val) percpu_add_op((pcp),val)
this_cpu_add_4  macro  arch/x86/include/asm/percpu.h  395  #define this_cpu_add_4(pcp,val) percpu_add_op((pcp),val)
this_cpu_add_8  macro  arch/x86/include/asm/percpu.h  456  #define this_cpu_add_8(pcp,val) percpu_add_op((pcp),val)
this_cpu_add  macro  include/linux/percpu.h  331  # define this_cpu_add(pcp,val) __pcpu_size_call(this_cpu_add_,(pcp),(val))
this_cpu_sub  macro  include/linux/percpu.h  335  # define this_cpu_sub(pcp,val) this_cpu_add((pcp),-(val))
this_cpu_inc  macro  include/linux/percpu.h  339  # define this_cpu_inc(pcp) this_cpu_add((pcp),1)
this_cpu_dec  macro  include/linux/percpu.h  343  # define this_cpu_dec(pcp) this_cpu_sub((pcp),1)
this_cpu_and_1  macro  arch/x86/include/asm/percpu.h  396  #define this_cpu_and_1(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and_2  macro  arch/x86/include/asm/percpu.h  397  #define this_cpu_and_2(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and_4  macro  arch/x86/include/asm/percpu.h  398  #define this_cpu_and_4(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and_8  macro  arch/x86/include/asm/percpu.h  457  #define this_cpu_and_8(pcp,val) percpu_to_op("and",(pcp),val)
this_cpu_and  macro  include/linux/percpu.h  359  # define this_cpu_and(pcp,val) __pcpu_size_call(this_cpu_and_,(pcp),(val))
this_cpu_or_1  macro  arch/x86/include/asm/percpu.h  399  #define this_cpu_or_1(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or_2  macro  arch/x86/include/asm/percpu.h  400  #define this_cpu_or_2(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or_4  macro  arch/x86/include/asm/percpu.h  401  #define this_cpu_or_4(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or_8  macro  arch/x86/include/asm/percpu.h  458  #define this_cpu_or_8(pcp,val) percpu_to_op("or",(pcp),val)
this_cpu_or  macro  include/linux/percpu.h  375  # define this_cpu_or(pcp,val) __pcpu_size_call(this_cpu_or_,(pcp),(val))
this_cpu_xor_1  macro  arch/x86/include/asm/percpu.h  402  #define this_cpu_xor_1(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor_2  macro  arch/x86/include/asm/percpu.h  403  #define this_cpu_xor_2(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor_4  macro  arch/x86/include/asm/percpu.h  404  #define this_cpu_xor_4(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor_8  macro  arch/x86/include/asm/percpu.h  459  #define this_cpu_xor_8(pcp,val) percpu_to_op("xor",(pcp),val)
this_cpu_xor  macro  include/linux/percpu.h  391  # define this_cpu_xor(pcp,val) __pcpu_size_call(this_cpu_or_,(pcp),(val))
_this_cpu_generic_add_return  macro  include/linux/percpu.h  394  #define _this_cpu_generic_add_return(pcp,val) ({ typeof(pcp) ret__; unsigned long flags; raw_local_irq_save(flags); __this_cpu_add(pcp, val); ret__ = __this_cpu_read(pcp); raw_local_irq_restore(flags); ret__; })
this_cpu_add_return_1  macro  arch/x86/include/asm/percpu.h  416  #define this_cpu_add_return_1(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return_2  macro  arch/x86/include/asm/percpu.h  417  #define this_cpu_add_return_2(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return_4  macro  arch/x86/include/asm/percpu.h  418  #define this_cpu_add_return_4(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return_8  macro  arch/x86/include/asm/percpu.h  460  #define this_cpu_add_return_8(pcp,val) percpu_add_return_op(pcp,val)
this_cpu_add_return  macro  include/linux/percpu.h  418  # define this_cpu_add_return(pcp,val) __pcpu_size_call_return2(this_cpu_add_return_,pcp,val)
this_cpu_sub_return  macro  include/linux/percpu.h  421  #define this_cpu_sub_return(pcp,val) this_cpu_add_return(pcp,-(val))
this_cpu_inc_return  macro  include/linux/percpu.h  422  #define this_cpu_inc_return(pcp) this_cpu_add_return(pcp,1)
this_cpu_dec_return  macro  include/linux/percpu.h  423  #define this_cpu_dec_return(pcp) this_cpu_add_return(pcp,-1)
_this_cpu_generic_xchg  macro  include/linux/percpu.h  425  #define _this_cpu_generic_xchg(pcp,nval) ({	typeof(pcp) ret__; unsigned long flags; raw_local_irq_save(flags); ret__ = __this_cpu_read(pcp); __this_cpu_write(pcp, nval); raw_local_irq_restore(flags); ret__; })
this_cpu_xchg_1  macro  arch/x86/include/asm/percpu.h  405  #define this_cpu_xchg_1(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg_2  macro  arch/x86/include/asm/percpu.h  406  #define this_cpu_xchg_2(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg_4  macro  arch/x86/include/asm/percpu.h  407  #define this_cpu_xchg_4(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg_8  macro  arch/x86/include/asm/percpu.h  461  #define this_cpu_xchg_8(pcp,nval) percpu_xchg_op(pcp,nval)
this_cpu_xchg  macro  include/linux/percpu.h  448  # define this_cpu_xchg(pcp,nval) __pcpu_size_call_return2(this_cpu_xchg_, (pcp), nval)
_this_cpu_generic_cmpxchg  macro  include/linux/percpu.h  452  #define _this_cpu_generic_cmpxchg(pcp,oval,nval) ({ typeof(pcp) ret__; unsigned long flags; raw_local_irq_save(flags); ret__ = __this_cpu_read(pcp); if (ret__ == (oval)) __this_cpu_write(pcp, nval); raw_local_irq_restore(flags); ret__; })
this_cpu_cmpxchg_1  macro  arch/x86/include/asm/percpu.h  419  #define this_cpu_cmpxchg_1(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg_2  macro  arch/x86/include/asm/percpu.h  420  #define this_cpu_cmpxchg_2(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg_4  macro  arch/x86/include/asm/percpu.h  421  #define this_cpu_cmpxchg_4(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg_8  macro  arch/x86/include/asm/percpu.h  462  #define this_cpu_cmpxchg_8(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
this_cpu_cmpxchg  macro  include/linux/percpu.h  477  # define this_cpu_cmpxchg(pcp,oval,nval) __pcpu_size_call_return2(this_cpu_cmpxchg_, pcp, oval, nval)
_this_cpu_generic_cmpxchg_double  macro  include/linux/percpu.h  489  #define _this_cpu_generic_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) ({ int ret__; unsigned long flags; raw_local_irq_save(flags); ret__ = __this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2); raw_local_irq_restore(flags); ret__; })
this_cpu_cmpxchg_double_1  macro  include/linux/percpu.h  502  # define this_cpu_cmpxchg_double_1(pcp1,pcp2,oval1,oval2,nval1,nval2) _this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
this_cpu_cmpxchg_double_2  macro  include/linux/percpu.h  506  # define this_cpu_cmpxchg_double_2(pcp1,pcp2,oval1,oval2,nval1,nval2) _this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
this_cpu_cmpxchg_double_4  macro  arch/x86/include/asm/percpu.h  436  #define this_cpu_cmpxchg_double_4 percpu_cmpxchg8b_double
this_cpu_cmpxchg_double_8  macro  arch/x86/include/asm/percpu.h  485  #define this_cpu_cmpxchg_double_8 percpu_cmpxchg16b_double
this_cpu_cmpxchg_double  macro  include/linux/percpu.h  517  # define this_cpu_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) __pcpu_double_call_return_bool(this_cpu_cmpxchg_double_, (pcp1), (pcp2), (oval1), (oval2), (nval1), (nval2))
__this_cpu_read_1  macro  arch/x86/include/asm/percpu.h  364  #define __this_cpu_read_1(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read_2  macro  arch/x86/include/asm/percpu.h  365  #define __this_cpu_read_2(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read_4  macro  arch/x86/include/asm/percpu.h  366  #define __this_cpu_read_4(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read_8  macro  arch/x86/include/asm/percpu.h  444  #define __this_cpu_read_8(pcp) percpu_from_op("mov",(pcp),"m"(pcp))
__this_cpu_read  macro  include/linux/percpu.h  548  # define __this_cpu_read(pcp) __pcpu_size_call_return(__this_cpu_read_,(pcp))
__this_cpu_generic_to_op  macro  include/linux/percpu.h  551  #define __this_cpu_generic_to_op(pcp,val,op) do { *__this_cpu_ptr(&(pcp)) op val; } while (0)
__this_cpu_write_1  macro  arch/x86/include/asm/percpu.h  368  #define __this_cpu_write_1(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write_2  macro  arch/x86/include/asm/percpu.h  369  #define __this_cpu_write_2(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write_4  macro  arch/x86/include/asm/percpu.h  370  #define __this_cpu_write_4(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write_8  macro  arch/x86/include/asm/percpu.h  445  #define __this_cpu_write_8(pcp,val) percpu_to_op("mov",(pcp),val)
__this_cpu_write  macro  include/linux/percpu.h  569  # define __this_cpu_write(pcp,val) __pcpu_size_call(__this_cpu_write_,(pcp),(val))
__this_cpu_add_1  macro  arch/x86/include/asm/percpu.h  371  #define __this_cpu_add_1(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add_2  macro  arch/x86/include/asm/percpu.h  372  #define __this_cpu_add_2(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add_4  macro  arch/x86/include/asm/percpu.h  373  #define __this_cpu_add_4(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add_8  macro  arch/x86/include/asm/percpu.h  446  #define __this_cpu_add_8(pcp,val) percpu_add_op((pcp),val)
__this_cpu_add  macro  include/linux/percpu.h  585  # define __this_cpu_add(pcp,val) __pcpu_size_call(__this_cpu_add_,(pcp),(val))
__this_cpu_sub  macro  include/linux/percpu.h  589  # define __this_cpu_sub(pcp,val) __this_cpu_add((pcp),-(val))
__this_cpu_inc  macro  include/linux/percpu.h  593  # define __this_cpu_inc(pcp) __this_cpu_add((pcp),1)
__this_cpu_dec  macro  include/linux/percpu.h  597  # define __this_cpu_dec(pcp) __this_cpu_sub((pcp),1)
__this_cpu_and_1  macro  arch/x86/include/asm/percpu.h  374  #define __this_cpu_and_1(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and_2  macro  arch/x86/include/asm/percpu.h  375  #define __this_cpu_and_2(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and_4  macro  arch/x86/include/asm/percpu.h  376  #define __this_cpu_and_4(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and_8  macro  arch/x86/include/asm/percpu.h  447  #define __this_cpu_and_8(pcp,val) percpu_to_op("and",(pcp),val)
__this_cpu_and  macro  include/linux/percpu.h  613  # define __this_cpu_and(pcp,val) __pcpu_size_call(__this_cpu_and_,(pcp),(val))
__this_cpu_or_1  macro  arch/x86/include/asm/percpu.h  377  #define __this_cpu_or_1(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or_2  macro  arch/x86/include/asm/percpu.h  378  #define __this_cpu_or_2(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or_4  macro  arch/x86/include/asm/percpu.h  379  #define __this_cpu_or_4(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or_8  macro  arch/x86/include/asm/percpu.h  448  #define __this_cpu_or_8(pcp,val) percpu_to_op("or",(pcp),val)
__this_cpu_or  macro  include/linux/percpu.h  629  # define __this_cpu_or(pcp,val) __pcpu_size_call(__this_cpu_or_,(pcp),(val))
__this_cpu_xor_1  macro  arch/x86/include/asm/percpu.h  380  #define __this_cpu_xor_1(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor_2  macro  arch/x86/include/asm/percpu.h  381  #define __this_cpu_xor_2(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor_4  macro  arch/x86/include/asm/percpu.h  382  #define __this_cpu_xor_4(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor_8  macro  arch/x86/include/asm/percpu.h  449  #define __this_cpu_xor_8(pcp,val) percpu_to_op("xor",(pcp),val)
__this_cpu_xor  macro  include/linux/percpu.h  645  # define __this_cpu_xor(pcp,val) __pcpu_size_call(__this_cpu_xor_,(pcp),(val))
__this_cpu_generic_add_return  macro  include/linux/percpu.h  648  #define __this_cpu_generic_add_return(pcp,val) ({ __this_cpu_add(pcp, val); __this_cpu_read(pcp); })
__this_cpu_add_return_1  macro  arch/x86/include/asm/percpu.h  409  #define __this_cpu_add_return_1(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return_2  macro  arch/x86/include/asm/percpu.h  410  #define __this_cpu_add_return_2(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return_4  macro  arch/x86/include/asm/percpu.h  411  #define __this_cpu_add_return_4(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return_8  macro  arch/x86/include/asm/percpu.h  450  #define __this_cpu_add_return_8(pcp,val) percpu_add_return_op(pcp,val)
__this_cpu_add_return  macro  include/linux/percpu.h  667  # define __this_cpu_add_return(pcp,val) __pcpu_size_call_return2(__this_cpu_add_return_, pcp, val)
__this_cpu_sub_return  macro  include/linux/percpu.h  671  #define __this_cpu_sub_return(pcp,val) __this_cpu_add_return(pcp,-(val))
__this_cpu_inc_return  macro  include/linux/percpu.h  672  #define __this_cpu_inc_return(pcp) __this_cpu_add_return(pcp,1)
__this_cpu_dec_return  macro  include/linux/percpu.h  673  #define __this_cpu_dec_return(pcp) __this_cpu_add_return(pcp,-1)
__this_cpu_generic_xchg  macro  include/linux/percpu.h  675  #define __this_cpu_generic_xchg(pcp,nval) ({	typeof(pcp) ret__; ret__ = __this_cpu_read(pcp); __this_cpu_write(pcp, nval); ret__; })
__this_cpu_xchg_1  macro  arch/x86/include/asm/percpu.h  383  #define __this_cpu_xchg_1(pcp,val) percpu_xchg_op(pcp,val)
__this_cpu_xchg_2  macro  arch/x86/include/asm/percpu.h  384  #define __this_cpu_xchg_2(pcp,val) percpu_xchg_op(pcp,val)
__this_cpu_xchg_4  macro  arch/x86/include/asm/percpu.h  385  #define __this_cpu_xchg_4(pcp,val) percpu_xchg_op(pcp,val)
__this_cpu_xchg_8  macro  arch/x86/include/asm/percpu.h  451  #define __this_cpu_xchg_8(pcp,nval) percpu_xchg_op(pcp,nval)
__this_cpu_xchg  macro  include/linux/percpu.h  695  # define __this_cpu_xchg(pcp,nval) __pcpu_size_call_return2(__this_cpu_xchg_, (pcp), nval)
__this_cpu_generic_cmpxchg  macro  include/linux/percpu.h  699  #define __this_cpu_generic_cmpxchg(pcp,oval,nval) ({ typeof(pcp) ret__; ret__ = __this_cpu_read(pcp); if (ret__ == (oval)) __this_cpu_write(pcp, nval); ret__; })
__this_cpu_cmpxchg_1  macro  arch/x86/include/asm/percpu.h  412  #define __this_cpu_cmpxchg_1(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg_2  macro  arch/x86/include/asm/percpu.h  413  #define __this_cpu_cmpxchg_2(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg_4  macro  arch/x86/include/asm/percpu.h  414  #define __this_cpu_cmpxchg_4(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg_8  macro  arch/x86/include/asm/percpu.h  452  #define __this_cpu_cmpxchg_8(pcp,oval,nval) percpu_cmpxchg_op(pcp,oval,nval)
__this_cpu_cmpxchg  macro  include/linux/percpu.h  721  # define __this_cpu_cmpxchg(pcp,oval,nval) __pcpu_size_call_return2(__this_cpu_cmpxchg_, pcp, oval, nval)
__this_cpu_generic_cmpxchg_double  macro  include/linux/percpu.h  725  #define __this_cpu_generic_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) ({ int __ret = 0; if (__this_cpu_read(pcp1) == (oval1) && __this_cpu_read(pcp2)  == (oval2)) { __this_cpu_write(pcp1, (nval1)); __this_cpu_write(pcp2, (nval2)); __ret = 1; } (__ret); })
__this_cpu_cmpxchg_double_1  macro  include/linux/percpu.h  739  # define __this_cpu_cmpxchg_double_1(pcp1,pcp2,oval1,oval2,nval1,nval2) __this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
__this_cpu_cmpxchg_double_2  macro  include/linux/percpu.h  743  # define __this_cpu_cmpxchg_double_2(pcp1,pcp2,oval1,oval2,nval1,nval2) __this_cpu_generic_cmpxchg_double(pcp1, pcp2, oval1, oval2, nval1, nval2)
__this_cpu_cmpxchg_double_4  macro  arch/x86/include/asm/percpu.h  435  #define __this_cpu_cmpxchg_double_4 percpu_cmpxchg8b_double
__this_cpu_cmpxchg_double_8  macro  arch/x86/include/asm/percpu.h  484  #define __this_cpu_cmpxchg_double_8 percpu_cmpxchg16b_double
__this_cpu_cmpxchg_double  macro  include/linux/percpu.h  754  # define __this_cpu_cmpxchg_double(pcp1,pcp2,oval1,oval2,nval1,nval2) __pcpu_double_call_return_bool(__this_cpu_cmpxchg_double_, (pcp1), (pcp2), (oval1), (oval2), (nval1), (nval2))
_ASM_X86_MODULE_H  macro  arch/x86/include/asm/module.h  2  #define _ASM_X86_MODULE_H
MODULE_PROC_FAMILY  macro  arch/x86/include/asm/module.h  55  #define MODULE_PROC_FAMILY "GEODE "
MODULE_ARCH_VERMAGIC  macro  arch/x86/include/asm/module.h  61  # define MODULE_ARCH_VERMAGIC MODULE_PROC_FAMILY
__LINUX_PREEMPT_H  macro  include/linux/preempt.h  2  #define __LINUX_PREEMPT_H
add_preempt_count  macro  include/linux/preempt.h  17  # define add_preempt_count(val) do { preempt_count() += (val); } while (0)
sub_preempt_count  macro  include/linux/preempt.h  18  # define sub_preempt_count(val) do { preempt_count() -= (val); } while (0)
inc_preempt_count  macro  include/linux/preempt.h  21  #define inc_preempt_count() add_preempt_count(1)
dec_preempt_count  macro  include/linux/preempt.h  22  #define dec_preempt_count() sub_preempt_count(1)
preempt_count  macro  include/linux/preempt.h  24  #define preempt_count() (current_thread_info()->preempt_count)
preempt_schedule  prototype  include/linux/preempt.h  28  asmlinkage void preempt_schedule(void);
preempt_check_resched  macro  include/linux/preempt.h  38  #define preempt_check_resched() do { } while (0)
preempt_disable  macro  include/linux/preempt.h  102  #define preempt_disable() barrier()
sched_preempt_enable_no_resched  macro  include/linux/preempt.h  103  #define sched_preempt_enable_no_resched() barrier()
preempt_enable_no_resched  macro  include/linux/preempt.h  104  #define preempt_enable_no_resched() barrier()
preempt_enable  macro  include/linux/preempt.h  105  #define preempt_enable() barrier()
add_preempt_count_notrace  macro  include/linux/preempt.h  67  #define add_preempt_count_notrace(val) do { preempt_count() += (val); } while (0)
sub_preempt_count_notrace  macro  include/linux/preempt.h  69  #define sub_preempt_count_notrace(val) do { preempt_count() -= (val); } while (0)
inc_preempt_count_notrace  macro  include/linux/preempt.h  71  #define inc_preempt_count_notrace() add_preempt_count_notrace(1)
dec_preempt_count_notrace  macro  include/linux/preempt.h  72  #define dec_preempt_count_notrace() sub_preempt_count_notrace(1)
preempt_disable_notrace  macro  include/linux/preempt.h  107  #define preempt_disable_notrace() barrier()
preempt_enable_no_resched_notrace  macro  include/linux/preempt.h  108  #define preempt_enable_no_resched_notrace() barrier()
preempt_enable_notrace  macro  include/linux/preempt.h  109  #define preempt_enable_notrace() barrier()
preempt_ops  struct  include/linux/preempt.h  131  struct preempt_ops { void (*sched_in)(struct preempt_notifier *notifier, int cpu); void (*sched_out)(struct preempt_notifier *notifier,struct task_struct *next); };
preempt_notifier  struct  include/linux/preempt.h  144  struct preempt_notifier { struct hlist_node link; struct preempt_ops *ops; };
preempt_notifier_register  prototype  include/linux/preempt.h  149  void preempt_notifier_register(struct preempt_notifier *notifier);
preempt_notifier_unregister  prototype  include/linux/preempt.h  150  void preempt_notifier_unregister(struct preempt_notifier *notifier);
preempt_notifier_init  function  include/linux/preempt.h  152  static inline void preempt_notifier_init(struct preempt_notifier *notifier,struct preempt_ops *ops)
__LINUX_CPUMASK_H  macro  include/linux/cpumask.h  2  #define __LINUX_CPUMASK_H
cpumask  struct  include/linux/cpumask.h  14  typedef struct cpumask { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;
cpumask_t  struct  include/linux/cpumask.h  14  typedef struct cpumask { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;
cpumask_bits  macro  include/linux/cpumask.h  23  #define cpumask_bits(maskp) ((maskp)->bits)
nr_cpu_ids  macro  include/linux/cpumask.h  26  #define nr_cpu_ids 1
nr_cpumask_bits  macro  include/linux/cpumask.h  36  #define nr_cpumask_bits NR_CPUS
num_online_cpus  macro  include/linux/cpumask.h  94  #define num_online_cpus() 1U
num_possible_cpus  macro  include/linux/cpumask.h  95  #define num_possible_cpus() 1U
num_present_cpus  macro  include/linux/cpumask.h  96  #define num_present_cpus() 1U
num_active_cpus  macro  include/linux/cpumask.h  97  #define num_active_cpus() 1U
cpu_online  macro  include/linux/cpumask.h  98  #define cpu_online(cpu) ((cpu) == 0)
cpu_possible  macro  include/linux/cpumask.h  99  #define cpu_possible(cpu) ((cpu) == 0)
cpu_present  macro  include/linux/cpumask.h  100  #define cpu_present(cpu) ((cpu) == 0)
cpu_active  macro  include/linux/cpumask.h  101  #define cpu_active(cpu) ((cpu) == 0)
cpumask_check  function  include/linux/cpumask.h  105  static inline unsigned int cpumask_check(unsigned int cpu)
cpumask_first  function  include/linux/cpumask.h  158  static inline unsigned int cpumask_first(const struct cpumask *srcp)
cpumask_next  function  include/linux/cpumask.h  170  static inline unsigned int cpumask_next(int n,const struct cpumask *srcp)
cpumask_next_zero  function  include/linux/cpumask.h  185  static inline unsigned int cpumask_next_zero(int n,const struct cpumask *srcp)
cpumask_next_and  prototype  include/linux/cpumask.h  193  int cpumask_next_and(int n,const struct cpumask *,const struct cpumask *);
cpumask_any_but  prototype  include/linux/cpumask.h  194  int cpumask_any_but(const struct cpumask *mask,unsigned int cpu);
for_each_cpu  macro  include/linux/cpumask.h  203  #define for_each_cpu(cpu,mask) for ((cpu) = -1; (cpu) = cpumask_next((cpu), (mask)), (cpu) < nr_cpu_ids;)
for_each_cpu_not  macro  include/linux/cpumask.h  215  #define for_each_cpu_not(cpu,mask) for ((cpu) = -1; (cpu) = cpumask_next_zero((cpu), (mask)), (cpu) < nr_cpu_ids;)
for_each_cpu_and  macro  include/linux/cpumask.h  234  #define for_each_cpu_and(cpu,mask,and) for ((cpu) = -1; (cpu) = cpumask_next_and((cpu), (mask), (and)), (cpu) < nr_cpu_ids;)
CPU_BITS_NONE  macro  include/linux/cpumask.h  240  #define CPU_BITS_NONE { [0 ... BITS_TO_LONGS(NR_CPUS)-1] = 0UL }
CPU_BITS_CPU0  macro  include/linux/cpumask.h  245  #define CPU_BITS_CPU0 { [0] =  1UL }
cpumask_set_cpu  function  include/linux/cpumask.h  255  static inline void cpumask_set_cpu(unsigned int cpu,struct cpumask *dstp)
cpumask_clear_cpu  function  include/linux/cpumask.h  265  static inline void cpumask_clear_cpu(int cpu,struct cpumask *dstp)
cpumask_test_cpu  macro  include/linux/cpumask.h  279  #define cpumask_test_cpu(cpu,cpumask) test_bit(cpumask_check(cpu), cpumask_bits((cpumask)))
cpumask_test_and_set_cpu  function  include/linux/cpumask.h  291  static inline int cpumask_test_and_set_cpu(int cpu,struct cpumask *cpumask)
cpumask_test_and_clear_cpu  function  include/linux/cpumask.h  305  static inline int cpumask_test_and_clear_cpu(int cpu,struct cpumask *cpumask)
cpumask_setall  function  include/linux/cpumask.h  314  static inline void cpumask_setall(struct cpumask *dstp)
cpumask_clear  function  include/linux/cpumask.h  323  static inline void cpumask_clear(struct cpumask *dstp)
cpumask_and  function  include/linux/cpumask.h  336  static inline int cpumask_and(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_or  function  include/linux/cpumask.h  350  static inline void cpumask_or(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_xor  function  include/linux/cpumask.h  363  static inline void cpumask_xor(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_andnot  function  include/linux/cpumask.h  379  static inline int cpumask_andnot(struct cpumask *dstp,const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_complement  function  include/linux/cpumask.h  392  static inline void cpumask_complement(struct cpumask *dstp,const struct cpumask *srcp)
cpumask_equal  function  include/linux/cpumask.h  404  static inline bool cpumask_equal(const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_intersects  function  include/linux/cpumask.h  416  static inline bool cpumask_intersects(const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_subset  function  include/linux/cpumask.h  430  static inline int cpumask_subset(const struct cpumask *src1p,const struct cpumask *src2p)
cpumask_empty  function  include/linux/cpumask.h  441  static inline bool cpumask_empty(const struct cpumask *srcp)
cpumask_full  function  include/linux/cpumask.h  450  static inline bool cpumask_full(const struct cpumask *srcp)
cpumask_weight  function  include/linux/cpumask.h  459  static inline unsigned int cpumask_weight(const struct cpumask *srcp)
cpumask_shift_right  function  include/linux/cpumask.h  470  static inline void cpumask_shift_right(struct cpumask *dstp,const struct cpumask *srcp, int n)
cpumask_shift_left  function  include/linux/cpumask.h  483  static inline void cpumask_shift_left(struct cpumask *dstp,const struct cpumask *srcp, int n)
cpumask_copy  function  include/linux/cpumask.h  495  static inline void cpumask_copy(struct cpumask *dstp,const struct cpumask *srcp)
cpumask_any  macro  include/linux/cpumask.h  507  #define cpumask_any(srcp) cpumask_first(srcp)
cpumask_first_and  macro  include/linux/cpumask.h  516  #define cpumask_first_and(src1p,src2p) cpumask_next_and(-1,(src1p),(src2p))
cpumask_any_and  macro  include/linux/cpumask.h  525  #define cpumask_any_and(mask1,mask2) cpumask_first_and((mask1),(mask2))
cpumask_of  macro  include/linux/cpumask.h  531  #define cpumask_of(cpu) (get_cpu_mask(cpu))
cpumask_scnprintf  function  include/linux/cpumask.h  542  static inline int cpumask_scnprintf(char *buf,int len,const struct cpumask *srcp)
cpumask_parse_user  function  include/linux/cpumask.h  556  static inline int cpumask_parse_user(const char __user *buf,int len,struct cpumask *dstp)
cpumask_parselist_user  function  include/linux/cpumask.h  570  static inline int cpumask_parselist_user(const char __user *buf,int len,struct cpumask *dstp)
cpulist_scnprintf  function  include/linux/cpumask.h  586  static inline int cpulist_scnprintf(char *buf,int len,const struct cpumask *srcp)
cpulist_parse  function  include/linux/cpumask.h  600  static inline int cpulist_parse(const char *buf,struct cpumask *dstp)
cpumask_size  function  include/linux/cpumask.h  610  static inline size_t cpumask_size(void)
alloc_cpumask_var_node  function  include/linux/cpumask.h  666  static inline bool alloc_cpumask_var_node(cpumask_var_t *mask,gfp_t flags,int node)
alloc_cpumask_var  function  include/linux/cpumask.h  661  static inline bool alloc_cpumask_var(cpumask_var_t *mask,gfp_t flags)
zalloc_cpumask_var_node  function  include/linux/cpumask.h  678  static inline bool zalloc_cpumask_var_node(cpumask_var_t *mask,gfp_t flags,int node)
zalloc_cpumask_var  function  include/linux/cpumask.h  672  static inline bool zalloc_cpumask_var(cpumask_var_t *mask,gfp_t flags)
alloc_bootmem_cpumask_var  function  include/linux/cpumask.h  685  static inline void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
free_cpumask_var  function  include/linux/cpumask.h  689  static inline void free_cpumask_var(cpumask_var_t mask)
free_bootmem_cpumask_var  function  include/linux/cpumask.h  693  static inline void free_bootmem_cpumask_var(cpumask_var_t mask)
cpu_all_mask  macro  include/linux/cpumask.h  701  #define cpu_all_mask to_cpumask(cpu_all_bits)
cpu_none_mask  macro  include/linux/cpumask.h  704  #define cpu_none_mask to_cpumask(cpu_bit_bitmap[0])
for_each_possible_cpu  macro  include/linux/cpumask.h  706  #define for_each_possible_cpu(cpu) for_each_cpu((cpu),cpu_possible_mask)
for_each_online_cpu  macro  include/linux/cpumask.h  707  #define for_each_online_cpu(cpu) for_each_cpu((cpu),cpu_online_mask)
for_each_present_cpu  macro  include/linux/cpumask.h  708  #define for_each_present_cpu(cpu) for_each_cpu((cpu),cpu_present_mask)
set_cpu_possible  prototype  include/linux/cpumask.h  711  void set_cpu_possible(unsigned int cpu,bool possible);
set_cpu_present  prototype  include/linux/cpumask.h  712  void set_cpu_present(unsigned int cpu,bool present);
set_cpu_online  prototype  include/linux/cpumask.h  713  void set_cpu_online(unsigned int cpu,bool online);
set_cpu_active  prototype  include/linux/cpumask.h  714  void set_cpu_active(unsigned int cpu,bool active);
init_cpu_present  prototype  include/linux/cpumask.h  715  void init_cpu_present(const struct cpumask *src);
init_cpu_possible  prototype  include/linux/cpumask.h  716  void init_cpu_possible(const struct cpumask *src);
init_cpu_online  prototype  include/linux/cpumask.h  717  void init_cpu_online(const struct cpumask *src);
to_cpumask  macro  include/linux/cpumask.h  729  #define to_cpumask(bitmap) ((struct cpumask *)(1 ? (bitmap) : (void *)sizeof(__check_is_bitmap(bitmap))))
__check_is_bitmap  function  include/linux/cpumask.h  733  static inline int __check_is_bitmap(const unsigned long *bitmap)
get_cpu_mask  function  include/linux/cpumask.h  748  static inline const struct cpumask *get_cpu_mask(unsigned int cpu)
cpu_is_offline  macro  include/linux/cpumask.h  755  #define cpu_is_offline(cpu) unlikely(!cpu_online(cpu))
CPU_BITS_ALL  macro  include/linux/cpumask.h  765  #define CPU_BITS_ALL { [0 ... BITS_TO_LONGS(NR_CPUS)-2] = ~0UL, [BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD }
cpumask_of_cpu  macro  include/linux/cpumask.h  778  #define cpumask_of_cpu(cpu) (*get_cpu_mask(cpu))
CPU_MASK_LAST_WORD  macro  include/linux/cpumask.h  780  #define CPU_MASK_LAST_WORD BITMAP_LAST_WORD_MASK(NR_CPUS)
CPU_MASK_ALL  macro  include/linux/cpumask.h  791  #define CPU_MASK_ALL (cpumask_t) { { [0 ... BITS_TO_LONGS(NR_CPUS)-2] = ~0UL, [BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD } }
CPU_MASK_NONE  macro  include/linux/cpumask.h  799  #define CPU_MASK_NONE (cpumask_t) { { [0 ... BITS_TO_LONGS(NR_CPUS)-1] =  0UL } }
CPU_MASK_CPU0  macro  include/linux/cpumask.h  804  #define CPU_MASK_CPU0 (cpumask_t) { { [0] =  1UL } }
first_cpu  macro  include/linux/cpumask.h  819  #define first_cpu(src) __first_cpu(&(src))
next_cpu  macro  include/linux/cpumask.h  820  #define next_cpu(n,src) __next_cpu((n),&(src))
any_online_cpu  macro  include/linux/cpumask.h  821  #define any_online_cpu(mask) cpumask_any_and(&mask,cpu_online_mask)
for_each_cpu_mask  macro  include/linux/cpumask.h  822  #define for_each_cpu_mask(cpu,mask) for ((cpu) = -1; (cpu) = next_cpu((cpu), (mask)), (cpu) < NR_CPUS; )
__first_cpu  prototype  include/linux/cpumask.h  816  int __first_cpu(const cpumask_t *srcp);
__next_cpu  prototype  include/linux/cpumask.h  817  int __next_cpu(int n,const cpumask_t *srcp);
for_each_cpu_mask_nr  macro  include/linux/cpumask.h  835  #define for_each_cpu_mask_nr(cpu,mask) for ((cpu) = -1; (cpu) = __next_cpu_nr((cpu), &(mask)), (cpu) < nr_cpu_ids; )
__next_cpu_nr  prototype  include/linux/cpumask.h  834  int __next_cpu_nr(int n,const cpumask_t *srcp);
cpus_addr  macro  include/linux/cpumask.h  842  #define cpus_addr(src) ((src).bits)
cpu_set  macro  include/linux/cpumask.h  844  #define cpu_set(cpu,dst) __cpu_set((cpu),&(dst))
__cpu_set  function  include/linux/cpumask.h  845  static inline void __cpu_set(int cpu,volatile cpumask_t *dstp)
cpu_clear  macro  include/linux/cpumask.h  850  #define cpu_clear(cpu,dst) __cpu_clear((cpu),&(dst))
__cpu_clear  function  include/linux/cpumask.h  851  static inline void __cpu_clear(int cpu,volatile cpumask_t *dstp)
cpus_setall  macro  include/linux/cpumask.h  856  #define cpus_setall(dst) __cpus_setall(&(dst),NR_CPUS)
__cpus_setall  function  include/linux/cpumask.h  857  static inline void __cpus_setall(cpumask_t *dstp,int nbits)
cpus_clear  macro  include/linux/cpumask.h  862  #define cpus_clear(dst) __cpus_clear(&(dst),NR_CPUS)
__cpus_clear  function  include/linux/cpumask.h  863  static inline void __cpus_clear(cpumask_t *dstp,int nbits)
cpu_isset  macro  include/linux/cpumask.h  869  #define cpu_isset(cpu,cpumask) test_bit((cpu),(cpumask).bits)
cpu_test_and_set  macro  include/linux/cpumask.h  871  #define cpu_test_and_set(cpu,cpumask) __cpu_test_and_set((cpu),&(cpumask))
__cpu_test_and_set  function  include/linux/cpumask.h  872  static inline int __cpu_test_and_set(int cpu,cpumask_t *addr)
cpus_and  macro  include/linux/cpumask.h  877  #define cpus_and(dst,src1,src2) __cpus_and(&(dst),&(src1),&(src2),NR_CPUS)
__cpus_and  function  include/linux/cpumask.h  878  static inline int __cpus_and(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_or  macro  include/linux/cpumask.h  884  #define cpus_or(dst,src1,src2) __cpus_or(&(dst),&(src1),&(src2),NR_CPUS)
__cpus_or  function  include/linux/cpumask.h  885  static inline void __cpus_or(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_xor  macro  include/linux/cpumask.h  891  #define cpus_xor(dst,src1,src2) __cpus_xor(&(dst),&(src1),&(src2),NR_CPUS)
__cpus_xor  function  include/linux/cpumask.h  892  static inline void __cpus_xor(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_andnot  macro  include/linux/cpumask.h  898  #define cpus_andnot(dst,src1,src2) __cpus_andnot(&(dst), &(src1), &(src2), NR_CPUS)
__cpus_andnot  function  include/linux/cpumask.h  900  static inline int __cpus_andnot(cpumask_t *dstp,const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_equal  macro  include/linux/cpumask.h  906  #define cpus_equal(src1,src2) __cpus_equal(&(src1),&(src2),NR_CPUS)
__cpus_equal  function  include/linux/cpumask.h  907  static inline int __cpus_equal(const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_intersects  macro  include/linux/cpumask.h  913  #define cpus_intersects(src1,src2) __cpus_intersects(&(src1),&(src2),NR_CPUS)
__cpus_intersects  function  include/linux/cpumask.h  914  static inline int __cpus_intersects(const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_subset  macro  include/linux/cpumask.h  920  #define cpus_subset(src1,src2) __cpus_subset(&(src1),&(src2),NR_CPUS)
__cpus_subset  function  include/linux/cpumask.h  921  static inline int __cpus_subset(const cpumask_t *src1p,const cpumask_t *src2p, int nbits)
cpus_empty  macro  include/linux/cpumask.h  927  #define cpus_empty(src) __cpus_empty(&(src),NR_CPUS)
__cpus_empty  function  include/linux/cpumask.h  928  static inline int __cpus_empty(const cpumask_t *srcp,int nbits)
cpus_weight  macro  include/linux/cpumask.h  933  #define cpus_weight(cpumask) __cpus_weight(&(cpumask),NR_CPUS)
__cpus_weight  function  include/linux/cpumask.h  934  static inline int __cpus_weight(const cpumask_t *srcp,int nbits)
cpus_shift_left  macro  include/linux/cpumask.h  939  #define cpus_shift_left(dst,src,n) __cpus_shift_left(&(dst), &(src), (n), NR_CPUS)
__cpus_shift_left  function  include/linux/cpumask.h  941  static inline void __cpus_shift_left(cpumask_t *dstp,const cpumask_t *srcp, int n, int nbits)
_LINUX_IRQRETURN_H  macro  include/linux/irqreturn.h  2  #define _LINUX_IRQRETURN_H
irqreturn  enum  include/linux/irqreturn.h  10  enum irqreturn { IRQ_NONE = (0 << 0), IRQ_HANDLED = (1 << 0), IRQ_WAKE_THREAD = (1 << 1), };
IRQ_RETVAL  macro  include/linux/irqreturn.h  17  #define IRQ_RETVAL(x) ((x) != IRQ_NONE)
_LINUX_IRQNR_H  macro  include/linux/irqnr.h  2  #define _LINUX_IRQNR_H
nr_irqs  macro  include/linux/irqnr.h  13  #define nr_irqs NR_IRQS
irq_to_desc  prototype  include/linux/irqnr.h  25  extern struct irq_desc *irq_to_desc(unsigned int irq);
for_each_irq_desc  macro  include/linux/irqnr.h  28  # define for_each_irq_desc(irq,desc) for (irq = 0, desc = irq_to_desc(irq); irq < nr_irqs; irq++, desc = irq_to_desc(irq)) if (!desc) ; else
for_each_irq_desc_reverse  macro  include/linux/irqnr.h  36  # define for_each_irq_desc_reverse(irq,desc) for (irq = nr_irqs - 1, desc = irq_to_desc(irq); irq >= 0; irq--, desc = irq_to_desc(irq)) if (!desc) ; else
irq_get_next_irq  prototype  include/linux/irqnr.h  26  unsigned int irq_get_next_irq(unsigned int offset);
irq_node  macro  include/linux/irqnr.h  46  #define irq_node(irq) 0
for_each_active_irq  macro  include/linux/irqnr.h  49  # define for_each_active_irq(irq) for (irq = irq_get_next_irq(0); irq < nr_irqs; irq = irq_get_next_irq(irq + 1))
for_each_irq_nr  macro  include/linux/irqnr.h  55  #define for_each_irq_nr(irq) for (irq = 0; irq < nr_irqs; irq++)
LINUX_HARDIRQ_H  macro  include/linux/hardirq.h  2  #define LINUX_HARDIRQ_H
PREEMPT_BITS  macro  include/linux/hardirq.h  33  #define PREEMPT_BITS 8
SOFTIRQ_BITS  macro  include/linux/hardirq.h  34  #define SOFTIRQ_BITS 8
NMI_BITS  macro  include/linux/hardirq.h  35  #define NMI_BITS 1
MAX_HARDIRQ_BITS  macro  include/linux/hardirq.h  37  #define MAX_HARDIRQ_BITS 10
HARDIRQ_BITS  macro  include/linux/hardirq.h  40  # define HARDIRQ_BITS MAX_HARDIRQ_BITS
PREEMPT_SHIFT  macro  include/linux/hardirq.h  47  #define PREEMPT_SHIFT 0
SOFTIRQ_SHIFT  macro  include/linux/hardirq.h  48  #define SOFTIRQ_SHIFT (PREEMPT_SHIFT + PREEMPT_BITS)
HARDIRQ_SHIFT  macro  include/linux/hardirq.h  49  #define HARDIRQ_SHIFT (SOFTIRQ_SHIFT + SOFTIRQ_BITS)
NMI_SHIFT  macro  include/linux/hardirq.h  50  #define NMI_SHIFT (HARDIRQ_SHIFT + HARDIRQ_BITS)
__IRQ_MASK  macro  include/linux/hardirq.h  52  #define __IRQ_MASK(x) ((1UL << (x))-1)
PREEMPT_MASK  macro  include/linux/hardirq.h  54  #define PREEMPT_MASK (__IRQ_MASK(PREEMPT_BITS) << PREEMPT_SHIFT)
SOFTIRQ_MASK  macro  include/linux/hardirq.h  55  #define SOFTIRQ_MASK (__IRQ_MASK(SOFTIRQ_BITS) << SOFTIRQ_SHIFT)
HARDIRQ_MASK  macro  include/linux/hardirq.h  56  #define HARDIRQ_MASK (__IRQ_MASK(HARDIRQ_BITS) << HARDIRQ_SHIFT)
NMI_MASK  macro  include/linux/hardirq.h  57  #define NMI_MASK (__IRQ_MASK(NMI_BITS) << NMI_SHIFT)
PREEMPT_OFFSET  macro  include/linux/hardirq.h  59  #define PREEMPT_OFFSET (1UL << PREEMPT_SHIFT)
SOFTIRQ_OFFSET  macro  include/linux/hardirq.h  60  #define SOFTIRQ_OFFSET (1UL << SOFTIRQ_SHIFT)
HARDIRQ_OFFSET  macro  include/linux/hardirq.h  61  #define HARDIRQ_OFFSET (1UL << HARDIRQ_SHIFT)
NMI_OFFSET  macro  include/linux/hardirq.h  62  #define NMI_OFFSET (1UL << NMI_SHIFT)
SOFTIRQ_DISABLE_OFFSET  macro  include/linux/hardirq.h  64  #define SOFTIRQ_DISABLE_OFFSET (2 * SOFTIRQ_OFFSET)
PREEMPT_ACTIVE_BITS  macro  include/linux/hardirq.h  67  #define PREEMPT_ACTIVE_BITS 1
PREEMPT_ACTIVE_SHIFT  macro  include/linux/hardirq.h  68  #define PREEMPT_ACTIVE_SHIFT (NMI_SHIFT + NMI_BITS)
PREEMPT_ACTIVE  macro  include/linux/hardirq.h  69  #define PREEMPT_ACTIVE (__IRQ_MASK(PREEMPT_ACTIVE_BITS) << PREEMPT_ACTIVE_SHIFT)
hardirq_count  macro  include/linux/hardirq.h  76  #define hardirq_count() (preempt_count() & HARDIRQ_MASK)
softirq_count  macro  include/linux/hardirq.h  77  #define softirq_count() (preempt_count() & SOFTIRQ_MASK)
irq_count  macro  include/linux/hardirq.h  78  #define irq_count() (preempt_count() & (HARDIRQ_MASK | SOFTIRQ_MASK | NMI_MASK))
in_irq  macro  include/linux/hardirq.h  87  #define in_irq() (hardirq_count())
in_softirq  macro  include/linux/hardirq.h  88  #define in_softirq() (softirq_count())
in_interrupt  macro  include/linux/hardirq.h  89  #define in_interrupt() (irq_count())
in_serving_softirq  macro  include/linux/hardirq.h  90  #define in_serving_softirq() (softirq_count() & SOFTIRQ_OFFSET)
in_nmi  macro  include/linux/hardirq.h  95  #define in_nmi() (preempt_count() & NMI_MASK)
PREEMPT_CHECK_OFFSET  macro  include/linux/hardirq.h  100  # define PREEMPT_CHECK_OFFSET 0
in_atomic  macro  include/linux/hardirq.h  110  #define in_atomic() ((preempt_count() & ~PREEMPT_ACTIVE) != 0)
in_atomic_preempt_off  macro  include/linux/hardirq.h  116  #define in_atomic_preempt_off() ((preempt_count() & ~PREEMPT_ACTIVE) != PREEMPT_CHECK_OFFSET)
preemptible  macro  include/linux/hardirq.h  123  # define preemptible() 0
IRQ_EXIT_OFFSET  macro  include/linux/hardirq.h  124  # define IRQ_EXIT_OFFSET HARDIRQ_OFFSET
synchronize_irq  macro  include/linux/hardirq.h  130  # define synchronize_irq(irq) barrier()
rcu_nmi_enter  prototype  include/linux/hardirq.h  144  extern void rcu_nmi_enter(void);
rcu_nmi_exit  prototype  include/linux/hardirq.h  145  extern void rcu_nmi_exit(void);
__irq_enter  macro  include/linux/hardirq.h  154  #define __irq_enter() do { vtime_account_irq_enter(current); add_preempt_count(HARDIRQ_OFFSET); trace_hardirq_enter(); } while (0)
irq_enter  prototype  include/linux/hardirq.h  164  extern void irq_enter(void);
__irq_exit  macro  include/linux/hardirq.h  169  #define __irq_exit() do { trace_hardirq_exit(); vtime_account_irq_exit(current); sub_preempt_count(HARDIRQ_OFFSET); } while (0)
irq_exit  prototype  include/linux/hardirq.h  179  extern void irq_exit(void);
nmi_enter  macro  include/linux/hardirq.h  181  #define nmi_enter() do { ftrace_nmi_enter(); BUG_ON(in_nmi()); add_preempt_count(NMI_OFFSET + HARDIRQ_OFFSET); lockdep_off(); rcu_nmi_enter(); trace_hardirq_enter(); } while (0)
nmi_exit  macro  include/linux/hardirq.h  191  #define nmi_exit() do { trace_hardirq_exit(); rcu_nmi_exit(); lockdep_on(); BUG_ON(!in_nmi()); sub_preempt_count(NMI_OFFSET + HARDIRQ_OFFSET); ftrace_nmi_exit(); } while (0)
_LINUX_TRACE_IRQFLAGS_H  macro  include/linux/irqflags.h  12  #define _LINUX_TRACE_IRQFLAGS_H
trace_softirqs_on  macro  include/linux/irqflags.h  34  # define trace_softirqs_on(ip) do { } while (0)
trace_softirqs_off  macro  include/linux/irqflags.h  35  # define trace_softirqs_off(ip) do { } while (0)
trace_hardirqs_on  macro  include/linux/irqflags.h  32  # define trace_hardirqs_on() do { } while (0)
trace_hardirqs_off  macro  include/linux/irqflags.h  33  # define trace_hardirqs_off() do { } while (0)
trace_hardirq_context  macro  include/linux/irqflags.h  36  # define trace_hardirq_context(p) 0
trace_softirq_context  macro  include/linux/irqflags.h  37  # define trace_softirq_context(p) 0
trace_hardirqs_enabled  macro  include/linux/irqflags.h  38  # define trace_hardirqs_enabled(p) 0
trace_softirqs_enabled  macro  include/linux/irqflags.h  39  # define trace_softirqs_enabled(p) 0
trace_hardirq_enter  macro  include/linux/irqflags.h  40  # define trace_hardirq_enter() do { } while (0)
trace_hardirq_exit  macro  include/linux/irqflags.h  41  # define trace_hardirq_exit() do { } while (0)
lockdep_softirq_enter  macro  include/linux/irqflags.h  42  # define lockdep_softirq_enter() do { } while (0)
lockdep_softirq_exit  macro  include/linux/irqflags.h  43  # define lockdep_softirq_exit() do { } while (0)
INIT_TRACE_IRQFLAGS  macro  include/linux/irqflags.h  44  # define INIT_TRACE_IRQFLAGS
stop_critical_timings  macro  include/linux/irqflags.h  52  # define stop_critical_timings() do { } while (0)
start_critical_timings  macro  include/linux/irqflags.h  53  # define start_critical_timings() do { } while (0)
raw_local_irq_disable  macro  include/linux/irqflags.h  59  #define raw_local_irq_disable() arch_local_irq_disable()
raw_local_irq_enable  macro  include/linux/irqflags.h  60  #define raw_local_irq_enable() arch_local_irq_enable()
raw_local_irq_save  macro  include/linux/irqflags.h  61  #define raw_local_irq_save(flags) do { typecheck(unsigned long, flags); flags = arch_local_irq_save(); } while (0)
raw_local_irq_restore  macro  include/linux/irqflags.h  66  #define raw_local_irq_restore(flags) do { typecheck(unsigned long, flags); arch_local_irq_restore(flags); } while (0)
raw_local_save_flags  macro  include/linux/irqflags.h  71  #define raw_local_save_flags(flags) do { typecheck(unsigned long, flags); flags = arch_local_save_flags(); } while (0)
raw_irqs_disabled_flags  macro  include/linux/irqflags.h  76  #define raw_irqs_disabled_flags(flags) ({ typecheck(unsigned long, flags); arch_irqs_disabled_flags(flags); })
raw_irqs_disabled  macro  include/linux/irqflags.h  81  #define raw_irqs_disabled() (arch_irqs_disabled())
raw_safe_halt  macro  include/linux/irqflags.h  82  #define raw_safe_halt() arch_safe_halt()
local_irq_enable  macro  include/linux/irqflags.h  136  #define local_irq_enable() do { raw_local_irq_enable(); } while (0)
local_irq_disable  macro  include/linux/irqflags.h  137  #define local_irq_disable() do { raw_local_irq_disable(); } while (0)
local_irq_save  macro  include/linux/irqflags.h  138  #define local_irq_save(flags) do { raw_local_irq_save(flags); } while (0)
local_irq_restore  macro  include/linux/irqflags.h  142  #define local_irq_restore(flags) do { raw_local_irq_restore(flags); } while (0)
local_save_flags  macro  include/linux/irqflags.h  143  #define local_save_flags(flags) do { raw_local_save_flags(flags); } while (0)
irqs_disabled_flags  macro  include/linux/irqflags.h  145  #define irqs_disabled_flags(flags) (raw_irqs_disabled_flags(flags))
irqs_disabled  macro  include/linux/irqflags.h  144  #define irqs_disabled() (raw_irqs_disabled())
safe_halt  macro  include/linux/irqflags.h  146  #define safe_halt() do { raw_safe_halt(); } while (0)
__LINUX_SMP_H  macro  include/linux/smp.h  2  #define __LINUX_SMP_H
cpu_idle  prototype  include/linux/smp.h  15  extern void cpu_idle(void);
call_single_data  struct  include/linux/smp.h  18  struct call_single_data { struct list_head list; smp_call_func_t func; void *info; u16 flags; u16 priv; };
smp_call_function_single  prototype  include/linux/smp.h  29  int smp_call_function_single(int cpuid,smp_call_func_t func,void *info,int wait);
smp_send_stop  function  arch/x86/include/asm/smp.h  93  static inline void smp_send_stop(void)
smp_send_reschedule  function  arch/x86/include/asm/smp.h  138  static inline void smp_send_reschedule(int cpu)
smp_prepare_cpus  function  arch/x86/include/asm/smp.h  108  static inline void smp_prepare_cpus(unsigned int max_cpus)
__cpu_up  function  arch/x86/include/asm/smp.h  118  static inline int __cpu_up(unsigned int cpu,struct task_struct *tidle)
smp_cpus_done  function  arch/x86/include/asm/smp.h  113  static inline void smp_cpus_done(unsigned int max_cpus)
smp_call_function  macro  include/linux/smp.h  140  #define smp_call_function(func,info,wait) (up_smp_call_function(func, info))
smp_call_function_many  macro  include/linux/smp.h  181  #define smp_call_function_many(mask,func,info,wait) (up_smp_call_function(func, info))
__smp_call_function_single  prototype  include/linux/smp.h  78  void __smp_call_function_single(int cpuid,struct call_single_data *data,int wait);
smp_call_function_any  function  include/linux/smp.h  186  smp_call_function_any(const struct cpumask *mask,smp_call_func_t func,void *info, int wait)
kick_all_cpus_sync  function  include/linux/smp.h  192  static inline void kick_all_cpus_sync(void) { }
call_function_init  function  include/linux/smp.h  183  static inline void call_function_init(void) { }
generic_smp_call_function_single_interrupt  prototype  include/linux/smp.h  91  void generic_smp_call_function_single_interrupt(void);
generic_smp_call_function_interrupt  prototype  include/linux/smp.h  92  void generic_smp_call_function_interrupt(void);
on_each_cpu  macro  include/linux/smp.h  142  #define on_each_cpu(func,info,wait) ({ local_irq_disable(); func(info); local_irq_enable(); 0; })
on_each_cpu_mask  macro  include/linux/smp.h  155  #define on_each_cpu_mask(mask,func,info,wait) do { if (cpumask_test_cpu(0, (mask))) { local_irq_disable(); (func)(info); local_irq_enable(); } } while (0)
on_each_cpu_cond  macro  include/linux/smp.h  167  #define on_each_cpu_cond(cond_func,func,info,wait,gfp_flags) do { void *__info = (info); preempt_disable(); if ((cond_func)(0, __info)) { local_irq_disable(); (func)(__info); local_irq_enable(); } preempt_enable(); } while (0)
smp_prepare_boot_cpu  function  arch/x86/include/asm/smp.h  103  static inline void smp_prepare_boot_cpu(void)
setup_nr_cpu_ids  prototype  include/linux/smp.h  125  extern void __init setup_nr_cpu_ids(void);
smp_init  prototype  include/linux/smp.h  126  extern void __init smp_init(void);
raw_smp_processor_id  macro  arch/x86/include/asm/smp.h  194  #define raw_smp_processor_id() (this_cpu_read(cpu_number))
up_smp_call_function  function  include/linux/smp.h  136  static inline int up_smp_call_function(smp_call_func_t func,void *info)
debug_smp_processor_id  prototype  include/linux/smp.h  212  extern unsigned int debug_smp_processor_id(void);
smp_processor_id  macro  include/linux/smp.h  215  # define smp_processor_id() raw_smp_processor_id()
get_cpu  macro  include/linux/smp.h  218  #define get_cpu() ({ preempt_disable(); smp_processor_id(); })
put_cpu  macro  include/linux/smp.h  219  #define put_cpu() preempt_enable()
arch_disable_smp_support  prototype  include/linux/smp.h  225  extern void arch_disable_smp_support(void);
smp_setup_processor_id  prototype  include/linux/smp.h  227  void smp_setup_processor_id(void);
_LINUX_HRTIMER_H  macro  include/linux/hrtimer.h  16  #define _LINUX_HRTIMER_H
hrtimer_mode  enum  include/linux/hrtimer.h  33  enum hrtimer_mode { HRTIMER_MODE_ABS = 0x0, HRTIMER_MODE_REL = 0x1, HRTIMER_MODE_PINNED = 0x02, HRTIMER_MODE_ABS_PINNED = 0x02, HRTIMER_MODE_REL_PINNED = 0x03, };
hrtimer_restart  function  include/linux/hrtimer.h  380  static inline int hrtimer_restart(struct hrtimer *timer)
HRTIMER_STATE_INACTIVE  macro  include/linux/hrtimer.h  80  #define HRTIMER_STATE_INACTIVE 0x00
HRTIMER_STATE_ENQUEUED  macro  include/linux/hrtimer.h  81  #define HRTIMER_STATE_ENQUEUED 0x01
HRTIMER_STATE_CALLBACK  macro  include/linux/hrtimer.h  82  #define HRTIMER_STATE_CALLBACK 0x02
HRTIMER_STATE_MIGRATE  macro  include/linux/hrtimer.h  83  #define HRTIMER_STATE_MIGRATE 0x04
hrtimer  struct  include/linux/hrtimer.h  108  struct hrtimer { struct timerqueue_node node; ktime_t _softexpires; enum hrtimer_restart (*function)(struct hrtimer *); struct hrtimer_clock_base *base; unsigned long state; int start_pid; void *start_site; char start_comm[16]; };
hrtimer_sleeper  struct  include/linux/hrtimer.h  128  struct hrtimer_sleeper { struct hrtimer timer; struct task_struct *task; };
hrtimer_clock_base  struct  include/linux/hrtimer.h  145  struct hrtimer_clock_base { struct hrtimer_cpu_base *cpu_base; int index; clockid_t clockid; struct timerqueue_head active; ktime_t resolution; ktime_t (*get_time)(void); ktime_t softirq_time; ktime_t offset; };
hrtimer_base_type  enum  include/linux/hrtimer.h  156  enum hrtimer_base_type { HRTIMER_BASE_MONOTONIC, HRTIMER_BASE_REALTIME, HRTIMER_BASE_BOOTTIME, HRTIMER_MAX_CLOCK_BASES, };
hrtimer_cpu_base  struct  include/linux/hrtimer.h  179  struct hrtimer_cpu_base { raw_spinlock_t lock; unsigned int active_bases; unsigned int clock_was_set; ktime_t expires_next; int hres_active; int hang_detected; unsigned long nr_events; unsigned long nr_retries; unsigned long nr_hangs; ktime_t max_hang_time; struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES]; };
hrtimer_set_expires  function  include/linux/hrtimer.h  195  static inline void hrtimer_set_expires(struct hrtimer *timer,ktime_t time)
hrtimer_set_expires_range  function  include/linux/hrtimer.h  201  static inline void hrtimer_set_expires_range(struct hrtimer *timer,ktime_t time,ktime_t delta)
hrtimer_set_expires_range_ns  function  include/linux/hrtimer.h  207  static inline void hrtimer_set_expires_range_ns(struct hrtimer *timer,ktime_t time,unsigned long delta)
hrtimer_set_expires_tv64  function  include/linux/hrtimer.h  213  static inline void hrtimer_set_expires_tv64(struct hrtimer *timer,s64 tv64)
hrtimer_add_expires  function  include/linux/hrtimer.h  219  static inline void hrtimer_add_expires(struct hrtimer *timer,ktime_t time)
hrtimer_add_expires_ns  function  include/linux/hrtimer.h  225  static inline void hrtimer_add_expires_ns(struct hrtimer *timer,u64 ns)
hrtimer_get_expires  function  include/linux/hrtimer.h  231  static inline ktime_t hrtimer_get_expires(const struct hrtimer *timer)
hrtimer_get_softexpires  function  include/linux/hrtimer.h  236  static inline ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
hrtimer_get_expires_tv64  function  include/linux/hrtimer.h  241  static inline s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
hrtimer_get_softexpires_tv64  function  include/linux/hrtimer.h  245  static inline s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
hrtimer_get_expires_ns  function  include/linux/hrtimer.h  250  static inline s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
hrtimer_expires_remaining  function  include/linux/hrtimer.h  255  static inline ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
hrtimer_interrupt  prototype  include/linux/hrtimer.h  263  extern void hrtimer_interrupt(struct clock_event_device *dev);
hrtimer_cb_get_time  function  include/linux/hrtimer.h  304  static inline ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
hrtimer_is_hres_active  function  include/linux/hrtimer.h  309  static inline int hrtimer_is_hres_active(struct hrtimer *timer)
hrtimer_peek_ahead_timers  function  include/linux/hrtimer.h  298  static inline void hrtimer_peek_ahead_timers(void) { }
HIGH_RES_NSEC  macro  include/linux/hrtimer.h  286  # define HIGH_RES_NSEC 1
KTIME_HIGH_RES  macro  include/linux/hrtimer.h  287  # define KTIME_HIGH_RES (ktime_t) { .tv64 = HIGH_RES_NSEC }
MONOTONIC_RES_NSEC  macro  include/linux/hrtimer.h  295  # define MONOTONIC_RES_NSEC LOW_RES_NSEC
KTIME_MONOTONIC_RES  macro  include/linux/hrtimer.h  296  # define KTIME_MONOTONIC_RES KTIME_LOW_RES
clock_was_set_delayed  function  include/linux/hrtimer.h  314  static inline void clock_was_set_delayed(void) { }
clock_was_set  prototype  include/linux/hrtimer.h  318  extern void clock_was_set(void);
timerfd_clock_was_set  function  include/linux/hrtimer.h  322  static inline void timerfd_clock_was_set(void) { }
hrtimers_resume  prototype  include/linux/hrtimer.h  324  extern void hrtimers_resume(void);
ktime_get  prototype  include/linux/hrtimer.h  326  extern ktime_t ktime_get(void);
ktime_get_real  prototype  include/linux/hrtimer.h  327  extern ktime_t ktime_get_real(void);
ktime_get_boottime  prototype  include/linux/hrtimer.h  328  extern ktime_t ktime_get_boottime(void);
ktime_get_monotonic_offset  prototype  include/linux/hrtimer.h  329  extern ktime_t ktime_get_monotonic_offset(void);
ktime_get_update_offsets  prototype  include/linux/hrtimer.h  330  extern ktime_t ktime_get_update_offsets(ktime_t *offs_real,ktime_t *offs_boot);
hrtimer_init  prototype  include/linux/hrtimer.h  338  extern void hrtimer_init(struct hrtimer *timer,clockid_t which_clock,enum hrtimer_mode mode);
hrtimer_init_on_stack  function  include/linux/hrtimer.h  347  static inline void hrtimer_init_on_stack(struct hrtimer *timer,clockid_t which_clock,enum hrtimer_mode mode)
destroy_hrtimer_on_stack  function  include/linux/hrtimer.h  353  static inline void destroy_hrtimer_on_stack(struct hrtimer *timer) { }
hrtimer_start  prototype  include/linux/hrtimer.h  357  extern int hrtimer_start(struct hrtimer *timer,ktime_t tim,const enum hrtimer_mode mode);
hrtimer_start_range_ns  prototype  include/linux/hrtimer.h  359  extern int hrtimer_start_range_ns(struct hrtimer *timer,ktime_t tim,unsigned long range_ns, const enum hrtimer_mode mode);
__hrtimer_start_range_ns  prototype  include/linux/hrtimer.h  362  __hrtimer_start_range_ns(struct hrtimer *timer,ktime_t tim,unsigned long delta_ns,const enum hrtimer_mode mode, int wakeup);
hrtimer_cancel  prototype  include/linux/hrtimer.h  366  extern int hrtimer_cancel(struct hrtimer *timer);
hrtimer_try_to_cancel  prototype  include/linux/hrtimer.h  367  extern int hrtimer_try_to_cancel(struct hrtimer *timer);
hrtimer_start_expires  function  include/linux/hrtimer.h  369  static inline int hrtimer_start_expires(struct hrtimer *timer,enum hrtimer_mode mode)
hrtimer_get_remaining  prototype  include/linux/hrtimer.h  386  extern ktime_t hrtimer_get_remaining(const struct hrtimer *timer);
hrtimer_get_res  prototype  include/linux/hrtimer.h  387  extern int hrtimer_get_res(const clockid_t which_clock,struct timespec *tp);
hrtimer_get_next_event  prototype  include/linux/hrtimer.h  389  extern ktime_t hrtimer_get_next_event(void);
hrtimer_active  function  include/linux/hrtimer.h  396  static inline int hrtimer_active(const struct hrtimer *timer)
hrtimer_is_queued  function  include/linux/hrtimer.h  404  static inline int hrtimer_is_queued(struct hrtimer *timer)
hrtimer_callback_running  function  include/linux/hrtimer.h  413  static inline int hrtimer_callback_running(struct hrtimer *timer)
hrtimer_forward  prototype  include/linux/hrtimer.h  420  hrtimer_forward(struct hrtimer *timer,ktime_t now,ktime_t interval);
hrtimer_forward_now  function  include/linux/hrtimer.h  423  static inline u64 hrtimer_forward_now(struct hrtimer *timer,ktime_t interval)
hrtimer_nanosleep  prototype  include/linux/hrtimer.h  430  extern long hrtimer_nanosleep(struct timespec *rqtp,struct timespec __user *rmtp,const enum hrtimer_mode mode,const clockid_t clockid);
hrtimer_nanosleep_restart  prototype  include/linux/hrtimer.h  434  extern long hrtimer_nanosleep_restart(struct restart_block *restart_block);
hrtimer_init_sleeper  prototype  include/linux/hrtimer.h  436  extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl,struct task_struct *tsk);
schedule_hrtimeout_range  prototype  include/linux/hrtimer.h  439  extern int schedule_hrtimeout_range(ktime_t *expires,unsigned long delta,const enum hrtimer_mode mode);
schedule_hrtimeout_range_clock  prototype  include/linux/hrtimer.h  441  extern int schedule_hrtimeout_range_clock(ktime_t *expires,unsigned long delta, const enum hrtimer_mode mode, int clock);
schedule_hrtimeout  prototype  include/linux/hrtimer.h  443  extern int schedule_hrtimeout(ktime_t *expires,const enum hrtimer_mode mode);
hrtimer_run_queues  prototype  include/linux/hrtimer.h  446  extern void hrtimer_run_queues(void);
hrtimer_run_pending  prototype  include/linux/hrtimer.h  447  extern void hrtimer_run_pending(void);
hrtimers_init  prototype  include/linux/hrtimer.h  450  extern void __init hrtimers_init(void);
ktime_divns  macro  include/linux/hrtimer.h  455  # define ktime_divns(kt,div) (u64)((kt).tv64 / (div))
sysrq_timer_list_show  prototype  include/linux/hrtimer.h  459  extern void sysrq_timer_list_show(void);
_KREF_H_  macro  include/linux/kref.h  16  #define _KREF_H_
kref  struct  include/linux/kref.h  23  struct kref { atomic_t refcount; };
kref_init  function  include/linux/kref.h  31  static inline void kref_init(struct kref *kref)
kref_get  function  include/linux/kref.h  40  static inline void kref_get(struct kref *kref)
kref_sub  function  include/linux/kref.h  64  static inline int kref_sub(struct kref *kref,unsigned int count,void (*release)(struct kref *kref))
kref_put  function  include/linux/kref.h  93  static inline int kref_put(struct kref *kref,void (*release)(struct kref *kref))
kref_put_mutex  function  include/linux/kref.h  98  static inline int kref_put_mutex(struct kref *kref,void (*release)(struct kref *kref),struct mutex *lock)
kref_get_unless_zero  function  include/linux/kref.h  131  static inline int __must_check kref_get_unless_zero(struct kref *kref)
_LINUX_ATOMIC_H  macro  include/linux/atomic.h  3  #define _LINUX_ATOMIC_H
atomic_add_unless  function  include/linux/atomic.h  15  static inline int atomic_add_unless(atomic_t *v,int a,int u)
atomic_inc_not_zero  macro  include/linux/atomic.h  28  #define atomic_inc_not_zero(v) atomic_add_unless((v),1,0)
atomic_inc_not_zero_hint  function  include/linux/atomic.h  44  static inline int atomic_inc_not_zero_hint(atomic_t *v,int hint)
atomic_inc_unless_negative  function  include/linux/atomic.h  64  static inline int atomic_inc_unless_negative(atomic_t *p)
atomic_dec_unless_positive  function  include/linux/atomic.h  77  static inline int atomic_dec_unless_positive(atomic_t *p)
atomic_dec_if_positive  function  include/linux/atomic.h  97  static inline int atomic_dec_if_positive(atomic_t *v)
atomic_or  function  include/linux/atomic.h  115  static inline void atomic_or(int i,atomic_t *v)
_ASM_X86_PTRACE_H  macro  arch/x86/include/asm/ptrace.h  2  #define _ASM_X86_PTRACE_H
pt_regs  struct  arch/x86/include/uapi/asm/ptrace.h  43  struct pt_regs { unsigned long r15; unsigned long r14; unsigned long r13; unsigned long r12; unsigned long rbp; unsigned long rbx; unsigned long r11; unsigned long r10; unsigned long r9; unsigned long r8; unsigned long rax; unsigned long rcx; unsigned long rdx; unsigned long rsi; unsigned long rdi; unsigned long orig_rax; unsigned long rip; unsigned long cs; unsigned long eflags; unsigned long rsp; unsigned long ss; };
profile_pc  macro  include/asm-generic/ptrace.h  33  #define profile_pc(regs) instruction_pointer(regs)
convert_ip_to_linear  prototype  arch/x86/include/asm/ptrace.h  75  convert_ip_to_linear(struct task_struct *child,struct pt_regs *regs);
send_sigtrap  prototype  arch/x86/include/asm/ptrace.h  76  extern void send_sigtrap(struct task_struct *tsk,struct pt_regs *regs,int error_code, int si_code);
syscall_trace_enter  prototype  arch/x86/include/asm/ptrace.h  79  extern long syscall_trace_enter(struct pt_regs *);
syscall_trace_leave  prototype  arch/x86/include/asm/ptrace.h  80  extern void syscall_trace_leave(struct pt_regs *);
regs_return_value  function  arch/x86/include/asm/ptrace.h  82  static inline unsigned long regs_return_value(struct pt_regs *regs)
user_mode  function  arch/x86/include/asm/ptrace.h  94  static inline int user_mode(struct pt_regs *regs)
user_mode_vm  function  arch/x86/include/asm/ptrace.h  103  static inline int user_mode_vm(struct pt_regs *regs)
v8086_mode  function  arch/x86/include/asm/ptrace.h  113  static inline int v8086_mode(struct pt_regs *regs)
user_64bit_mode  function  arch/x86/include/asm/ptrace.h  123  static inline bool user_64bit_mode(struct pt_regs *regs)
current_user_stack_pointer  macro  arch/x86/include/asm/ptrace.h  137  #define current_user_stack_pointer() this_cpu_read(old_rsp)
compat_user_stack_pointer  macro  arch/x86/include/asm/ptrace.h  139  #define compat_user_stack_pointer() (test_thread_flag(TIF_IA32) ? current_pt_regs()->sp : this_cpu_read(old_rsp))
kernel_stack_pointer  function  arch/x86/include/asm/ptrace.h  148  static inline unsigned long kernel_stack_pointer(struct pt_regs *regs)
GET_IP  macro  include/asm-generic/ptrace.h  16  #define GET_IP(regs) ((regs)->pc)
GET_FP  macro  include/asm-generic/ptrace.h  56  #define GET_FP(regs) ((regs)->fp)
GET_USP  macro  include/asm-generic/ptrace.h  38  #define GET_USP(regs) ((regs)->usp)
regs_query_register_offset  prototype  arch/x86/include/asm/ptrace.h  161  extern int regs_query_register_offset(const char *name);
regs_query_register_name  prototype  arch/x86/include/asm/ptrace.h  162  extern const char *regs_query_register_name(unsigned int offset);
MAX_REG_OFFSET  macro  arch/x86/include/asm/ptrace.h  163  #define MAX_REG_OFFSET (offsetof(struct pt_regs,ss))
regs_get_register  function  arch/x86/include/asm/ptrace.h  174  static inline unsigned long regs_get_register(struct pt_regs *regs,unsigned int offset)
regs_within_kernel_stack  function  arch/x86/include/asm/ptrace.h  199  static inline int regs_within_kernel_stack(struct pt_regs *regs,unsigned long addr)
regs_get_kernel_stack_nth  function  arch/x86/include/asm/ptrace.h  215  static inline unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,unsigned int n)
arch_has_single_step  macro  arch/x86/include/asm/ptrace.h  226  #define arch_has_single_step() (1)
arch_has_block_step  macro  arch/x86/include/asm/ptrace.h  230  #define arch_has_block_step() (boot_cpu_data.x86 >= 6)
ARCH_HAS_USER_SINGLE_STEP_INFO  macro  arch/x86/include/asm/ptrace.h  233  #define ARCH_HAS_USER_SINGLE_STEP_INFO
do_get_thread_area  prototype  arch/x86/include/asm/ptrace.h  236  extern int do_get_thread_area(struct task_struct *p,int idx,struct user_desc __user *info);
do_set_thread_area  prototype  arch/x86/include/asm/ptrace.h  238  extern int do_set_thread_area(struct task_struct *p,int idx,struct user_desc __user *info, int can_allocate);
__LINUX_GFP_H  macro  include/linux/gfp.h  2  #define __LINUX_GFP_H
___GFP_DMA  macro  include/linux/gfp.h  13  #define ___GFP_DMA 0x01u
___GFP_HIGHMEM  macro  include/linux/gfp.h  14  #define ___GFP_HIGHMEM 0x02u
___GFP_DMA32  macro  include/linux/gfp.h  15  #define ___GFP_DMA32 0x04u
___GFP_MOVABLE  macro  include/linux/gfp.h  16  #define ___GFP_MOVABLE 0x08u
___GFP_WAIT  macro  include/linux/gfp.h  17  #define ___GFP_WAIT 0x10u
___GFP_HIGH  macro  include/linux/gfp.h  18  #define ___GFP_HIGH 0x20u
___GFP_IO  macro  include/linux/gfp.h  19  #define ___GFP_IO 0x40u
___GFP_FS  macro  include/linux/gfp.h  20  #define ___GFP_FS 0x80u
___GFP_COLD  macro  include/linux/gfp.h  21  #define ___GFP_COLD 0x100u
___GFP_NOWARN  macro  include/linux/gfp.h  22  #define ___GFP_NOWARN 0x200u
___GFP_REPEAT  macro  include/linux/gfp.h  23  #define ___GFP_REPEAT 0x400u
___GFP_NOFAIL  macro  include/linux/gfp.h  24  #define ___GFP_NOFAIL 0x800u
___GFP_NORETRY  macro  include/linux/gfp.h  25  #define ___GFP_NORETRY 0x1000u
___GFP_MEMALLOC  macro  include/linux/gfp.h  26  #define ___GFP_MEMALLOC 0x2000u
___GFP_COMP  macro  include/linux/gfp.h  27  #define ___GFP_COMP 0x4000u
___GFP_ZERO  macro  include/linux/gfp.h  28  #define ___GFP_ZERO 0x8000u
___GFP_NOMEMALLOC  macro  include/linux/gfp.h  29  #define ___GFP_NOMEMALLOC 0x10000u
___GFP_HARDWALL  macro  include/linux/gfp.h  30  #define ___GFP_HARDWALL 0x20000u
___GFP_THISNODE  macro  include/linux/gfp.h  31  #define ___GFP_THISNODE 0x40000u
___GFP_RECLAIMABLE  macro  include/linux/gfp.h  32  #define ___GFP_RECLAIMABLE 0x80000u
___GFP_KMEMCG  macro  include/linux/gfp.h  33  #define ___GFP_KMEMCG 0x100000u
___GFP_NOTRACK  macro  include/linux/gfp.h  34  #define ___GFP_NOTRACK 0x200000u
___GFP_NO_KSWAPD  macro  include/linux/gfp.h  35  #define ___GFP_NO_KSWAPD 0x400000u
___GFP_OTHER_NODE  macro  include/linux/gfp.h  36  #define ___GFP_OTHER_NODE 0x800000u
___GFP_WRITE  macro  include/linux/gfp.h  37  #define ___GFP_WRITE 0x1000000u
__GFP_DMA  macro  include/linux/gfp.h  49  #define __GFP_DMA ((__force gfp_t)___GFP_DMA)
__GFP_HIGHMEM  macro  include/linux/gfp.h  50  #define __GFP_HIGHMEM ((__force gfp_t)___GFP_HIGHMEM)
__GFP_DMA32  macro  include/linux/gfp.h  51  #define __GFP_DMA32 ((__force gfp_t)___GFP_DMA32)
__GFP_MOVABLE  macro  include/linux/gfp.h  52  #define __GFP_MOVABLE ((__force gfp_t)___GFP_MOVABLE)
GFP_ZONEMASK  macro  include/linux/gfp.h  53  #define GFP_ZONEMASK (__GFP_DMA|__GFP_HIGHMEM|__GFP_DMA32|__GFP_MOVABLE)
__GFP_WAIT  macro  include/linux/gfp.h  69  #define __GFP_WAIT ((__force gfp_t)___GFP_WAIT)
__GFP_HIGH  macro  include/linux/gfp.h  70  #define __GFP_HIGH ((__force gfp_t)___GFP_HIGH)
__GFP_IO  macro  include/linux/gfp.h  71  #define __GFP_IO ((__force gfp_t)___GFP_IO)
__GFP_FS  macro  include/linux/gfp.h  72  #define __GFP_FS ((__force gfp_t)___GFP_FS)
__GFP_COLD  macro  include/linux/gfp.h  73  #define __GFP_COLD ((__force gfp_t)___GFP_COLD)
__GFP_NOWARN  macro  include/linux/gfp.h  74  #define __GFP_NOWARN ((__force gfp_t)___GFP_NOWARN)
__GFP_REPEAT  macro  include/linux/gfp.h  75  #define __GFP_REPEAT ((__force gfp_t)___GFP_REPEAT)
__GFP_NOFAIL  macro  include/linux/gfp.h  76  #define __GFP_NOFAIL ((__force gfp_t)___GFP_NOFAIL)
__GFP_NORETRY  macro  include/linux/gfp.h  77  #define __GFP_NORETRY ((__force gfp_t)___GFP_NORETRY)
__GFP_MEMALLOC  macro  include/linux/gfp.h  78  #define __GFP_MEMALLOC ((__force gfp_t)___GFP_MEMALLOC)
__GFP_COMP  macro  include/linux/gfp.h  79  #define __GFP_COMP ((__force gfp_t)___GFP_COMP)
__GFP_ZERO  macro  include/linux/gfp.h  80  #define __GFP_ZERO ((__force gfp_t)___GFP_ZERO)
__GFP_NOMEMALLOC  macro  include/linux/gfp.h  81  #define __GFP_NOMEMALLOC ((__force gfp_t)___GFP_NOMEMALLOC)
__GFP_HARDWALL  macro  include/linux/gfp.h  86  #define __GFP_HARDWALL ((__force gfp_t)___GFP_HARDWALL)
__GFP_THISNODE  macro  include/linux/gfp.h  87  #define __GFP_THISNODE ((__force gfp_t)___GFP_THISNODE)
__GFP_RECLAIMABLE  macro  include/linux/gfp.h  88  #define __GFP_RECLAIMABLE ((__force gfp_t)___GFP_RECLAIMABLE)
__GFP_NOTRACK  macro  include/linux/gfp.h  89  #define __GFP_NOTRACK ((__force gfp_t)___GFP_NOTRACK)
__GFP_NO_KSWAPD  macro  include/linux/gfp.h  91  #define __GFP_NO_KSWAPD ((__force gfp_t)___GFP_NO_KSWAPD)
__GFP_OTHER_NODE  macro  include/linux/gfp.h  92  #define __GFP_OTHER_NODE ((__force gfp_t)___GFP_OTHER_NODE)
__GFP_KMEMCG  macro  include/linux/gfp.h  93  #define __GFP_KMEMCG ((__force gfp_t)___GFP_KMEMCG)
__GFP_WRITE  macro  include/linux/gfp.h  94  #define __GFP_WRITE ((__force gfp_t)___GFP_WRITE)
__GFP_NOTRACK_FALSE_POSITIVE  macro  include/linux/gfp.h  100  #define __GFP_NOTRACK_FALSE_POSITIVE (__GFP_NOTRACK)
__GFP_BITS_SHIFT  macro  include/linux/gfp.h  102  #define __GFP_BITS_SHIFT 25
__GFP_BITS_MASK  macro  include/linux/gfp.h  103  #define __GFP_BITS_MASK ((__force gfp_t)((1 << __GFP_BITS_SHIFT) - 1))
GFP_NOWAIT  macro  include/linux/gfp.h  106  #define GFP_NOWAIT (GFP_ATOMIC & ~__GFP_HIGH)
GFP_ATOMIC  macro  include/linux/gfp.h  108  #define GFP_ATOMIC (__GFP_HIGH)
GFP_NOIO  macro  include/linux/gfp.h  109  #define GFP_NOIO (__GFP_WAIT)
GFP_NOFS  macro  include/linux/gfp.h  110  #define GFP_NOFS (__GFP_WAIT | __GFP_IO)
GFP_KERNEL  macro  include/linux/gfp.h  111  #define GFP_KERNEL (__GFP_WAIT | __GFP_IO | __GFP_FS)
GFP_TEMPORARY  macro  include/linux/gfp.h  112  #define GFP_TEMPORARY (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_RECLAIMABLE)
GFP_USER  macro  include/linux/gfp.h  114  #define GFP_USER (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL)
GFP_HIGHUSER  macro  include/linux/gfp.h  115  #define GFP_HIGHUSER (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL | __GFP_HIGHMEM)
GFP_HIGHUSER_MOVABLE  macro  include/linux/gfp.h  117  #define GFP_HIGHUSER_MOVABLE (__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_HARDWALL | __GFP_HIGHMEM | __GFP_MOVABLE)
GFP_IOFS  macro  include/linux/gfp.h  120  #define GFP_IOFS (__GFP_IO | __GFP_FS)
GFP_TRANSHUGE  macro  include/linux/gfp.h  121  #define GFP_TRANSHUGE (GFP_HIGHUSER_MOVABLE | __GFP_COMP | __GFP_NOMEMALLOC | __GFP_NORETRY | __GFP_NOWARN | __GFP_NO_KSWAPD)
GFP_THISNODE  macro  include/linux/gfp.h  128  #define GFP_THISNODE ((__force gfp_t)0)
GFP_MOVABLE_MASK  macro  include/linux/gfp.h  132  #define GFP_MOVABLE_MASK (__GFP_RECLAIMABLE|__GFP_MOVABLE)
GFP_RECLAIM_MASK  macro  include/linux/gfp.h  135  #define GFP_RECLAIM_MASK (__GFP_WAIT|__GFP_HIGH|__GFP_IO|__GFP_FS| __GFP_NOWARN|__GFP_REPEAT|__GFP_NOFAIL| __GFP_NORETRY|__GFP_MEMALLOC|__GFP_NOMEMALLOC)
GFP_BOOT_MASK  macro  include/linux/gfp.h  140  #define GFP_BOOT_MASK (__GFP_BITS_MASK & ~(__GFP_WAIT|__GFP_IO|__GFP_FS))
GFP_CONSTRAINT_MASK  macro  include/linux/gfp.h  143  #define GFP_CONSTRAINT_MASK (__GFP_HARDWALL|__GFP_THISNODE)
GFP_SLAB_BUG_MASK  macro  include/linux/gfp.h  146  #define GFP_SLAB_BUG_MASK (__GFP_DMA32|__GFP_HIGHMEM|~__GFP_BITS_MASK)
GFP_DMA  macro  include/linux/gfp.h  151  #define GFP_DMA __GFP_DMA
GFP_DMA32  macro  include/linux/gfp.h  154  #define GFP_DMA32 __GFP_DMA32
allocflags_to_migratetype  function  include/linux/gfp.h  157  static inline int allocflags_to_migratetype(gfp_t gfp_flags)
OPT_ZONE_HIGHMEM  macro  include/linux/gfp.h  172  #define OPT_ZONE_HIGHMEM ZONE_NORMAL
OPT_ZONE_DMA  macro  include/linux/gfp.h  178  #define OPT_ZONE_DMA ZONE_NORMAL
OPT_ZONE_DMA32  macro  include/linux/gfp.h  184  #define OPT_ZONE_DMA32 ZONE_NORMAL
GFP_ZONE_TABLE  macro  include/linux/gfp.h  224  #define GFP_ZONE_TABLE ( (ZONE_NORMAL << 0 * ZONES_SHIFT) | (OPT_ZONE_DMA << ___GFP_DMA * ZONES_SHIFT) | (OPT_ZONE_HIGHMEM << ___GFP_HIGHMEM * ZONES_SHIFT) | (OPT_ZONE_DMA32 << ___GFP_DMA32 * ZONES_SHIFT) | (ZONE_NORMAL << ___GFP_MOVABLE * ZONES_SHIFT) | (OPT_ZONE_DMA << (___GFP_MOVABLE | ___GFP_DMA) * ZONES_SHIFT) | (ZONE_MOVABLE << (___GFP_MOVABLE | ___GFP_HIGHMEM) * ZONES_SHIFT) | (OPT_ZONE_DMA32 << (___GFP_MOVABLE | ___GFP_DMA32) * ZONES_SHIFT) )
GFP_ZONE_BAD  macro  include/linux/gfp.h  241  #define GFP_ZONE_BAD ( 1 << (___GFP_DMA | ___GFP_HIGHMEM) | 1 << (___GFP_DMA | ___GFP_DMA32) | 1 << (___GFP_DMA32 | ___GFP_HIGHMEM) | 1 << (___GFP_DMA | ___GFP_DMA32 | ___GFP_HIGHMEM) | 1 << (___GFP_MOVABLE | ___GFP_HIGHMEM | ___GFP_DMA) | 1 << (___GFP_MOVABLE | ___GFP_DMA32 | ___GFP_DMA) | 1 << (___GFP_MOVABLE | ___GFP_DMA32 | ___GFP_HIGHMEM) | 1 << (___GFP_MOVABLE | ___GFP_DMA32 | ___GFP_DMA | ___GFP_HIGHMEM) )
gfp_zone  function  include/linux/gfp.h  252  static inline enum zone_type gfp_zone(gfp_t flags)
gfp_zonelist  function  include/linux/gfp.h  270  static inline int gfp_zonelist(gfp_t flags)
node_zonelist  function  include/linux/gfp.h  287  static inline struct zonelist *node_zonelist(int nid,gfp_t flags)
arch_free_page  function  include/linux/gfp.h  293  static inline void arch_free_page(struct page *page,int order) { }
arch_alloc_page  function  include/linux/gfp.h  296  static inline void arch_alloc_page(struct page *page,int order) { }
__alloc_pages_nodemask  prototype  include/linux/gfp.h  300  __alloc_pages_nodemask(gfp_t gfp_mask,unsigned int order,struct zonelist *zonelist, nodemask_t *nodemask);
__alloc_pages  function  include/linux/gfp.h  304  __alloc_pages(gfp_t gfp_mask,unsigned int order,struct zonelist *zonelist)
alloc_pages_node  function  include/linux/gfp.h  310  static inline struct page *alloc_pages_node(int nid,gfp_t gfp_mask,unsigned int order)
alloc_pages_exact_node  function  include/linux/gfp.h  320  static inline struct page *alloc_pages_exact_node(int nid,gfp_t gfp_mask,unsigned int order)
alloc_pages_current  prototype  include/linux/gfp.h  329  extern struct page *alloc_pages_current(gfp_t gfp_mask,unsigned order);
alloc_pages  macro  include/linux/gfp.h  340  #define alloc_pages(gfp_mask,order) alloc_pages_node(numa_node_id(), gfp_mask, order)
alloc_pages_vma  macro  include/linux/gfp.h  342  #define alloc_pages_vma(gfp_mask,order,vma,addr,node) alloc_pages(gfp_mask, order)
alloc_page  macro  include/linux/gfp.h  345  #define alloc_page(gfp_mask) alloc_pages(gfp_mask,0)
alloc_page_vma  macro  include/linux/gfp.h  346  #define alloc_page_vma(gfp_mask,vma,addr) alloc_pages_vma(gfp_mask, 0, vma, addr, numa_node_id())
alloc_page_vma_node  macro  include/linux/gfp.h  348  #define alloc_page_vma_node(gfp_mask,vma,addr,node) alloc_pages_vma(gfp_mask, 0, vma, addr, node)
__get_free_pages  prototype  include/linux/gfp.h  351  extern unsigned long __get_free_pages(gfp_t gfp_mask,unsigned int order);
get_zeroed_page  prototype  include/linux/gfp.h  352  extern unsigned long get_zeroed_page(gfp_t gfp_mask);
alloc_pages_exact  prototype  include/linux/gfp.h  354  void *alloc_pages_exact(size_t size,gfp_t gfp_mask);
free_pages_exact  prototype  include/linux/gfp.h  355  void free_pages_exact(void *virt,size_t size);
alloc_pages_exact_nid  prototype  include/linux/gfp.h  357  void *alloc_pages_exact_nid(int nid,size_t size,gfp_t gfp_mask);
__get_free_page  macro  include/linux/gfp.h  359  #define __get_free_page(gfp_mask) __get_free_pages((gfp_mask), 0)
__get_dma_pages  macro  include/linux/gfp.h  362  #define __get_dma_pages(gfp_mask,order) __get_free_pages((gfp_mask) | GFP_DMA, (order))
__free_pages  prototype  include/linux/gfp.h  365  extern void __free_pages(struct page *page,unsigned int order);
free_pages  prototype  include/linux/gfp.h  366  extern void free_pages(unsigned long addr,unsigned int order);
free_hot_cold_page  prototype  include/linux/gfp.h  367  extern void free_hot_cold_page(struct page *page,int cold);
free_hot_cold_page_list  prototype  include/linux/gfp.h  368  extern void free_hot_cold_page_list(struct list_head *list,int cold);
__free_memcg_kmem_pages  prototype  include/linux/gfp.h  370  extern void __free_memcg_kmem_pages(struct page *page,unsigned int order);
free_memcg_kmem_pages  prototype  include/linux/gfp.h  371  extern void free_memcg_kmem_pages(unsigned long addr,unsigned int order);
__free_page  macro  include/linux/gfp.h  373  #define __free_page(page) __free_pages((page),0)
free_page  macro  include/linux/gfp.h  374  #define free_page(addr) free_pages((addr),0)
page_alloc_init  prototype  include/linux/gfp.h  376  void page_alloc_init(void);
drain_zone_pages  prototype  include/linux/gfp.h  377  void drain_zone_pages(struct zone *zone,struct per_cpu_pages *pcp);
drain_all_pages  prototype  include/linux/gfp.h  378  void drain_all_pages(void);
drain_local_pages  prototype  include/linux/gfp.h  379  void drain_local_pages(void *dummy);
gfp_pfmemalloc_allowed  prototype  include/linux/gfp.h  391  bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);
pm_restrict_gfp_mask  prototype  include/linux/gfp.h  393  extern void pm_restrict_gfp_mask(void);
pm_restore_gfp_mask  prototype  include/linux/gfp.h  394  extern void pm_restore_gfp_mask(void);
pm_suspended_storage  function  include/linux/gfp.h  399  static inline bool pm_suspended_storage(void)
alloc_contig_range  prototype  include/linux/gfp.h  408  extern int alloc_contig_range(unsigned long start,unsigned long end,unsigned migratetype);
free_contig_range  prototype  include/linux/gfp.h  410  extern void free_contig_range(unsigned long pfn,unsigned nr_pages);
init_cma_reserved_pageblock  prototype  include/linux/gfp.h  413  extern void init_cma_reserved_pageblock(struct page *page);
_LINUX_SLUB_DEF_H  macro  include/linux/slub_def.h  2  #define _LINUX_SLUB_DEF_H
stat_item  enum  include/linux/slub_def.h  17  enum stat_item { ALLOC_FASTPATH, ALLOC_SLOWPATH, FREE_FASTPATH, FREE_SLOWPATH, FREE_FROZEN, FREE_ADD_PARTIAL, FREE_REMOVE_PARTIAL, ALLOC_FROM_PARTIAL, ALLOC_SLAB, ALLOC_REFILL, ALLOC_NODE_MISMATCH, FREE_SLAB, CPUSLAB_FLUSH, DEACTIVATE_FULL, DEACTIVATE_EMPTY, DEACTIVATE_TO_HEAD, DEACTIVATE_TO_TAIL, DEACTIVATE_REMOTE_FREES, DEACTIVATE_BYPASS, ORDER_FALLBACK, CMPXCHG_DOUBLE_CPU_FAIL, CMPXCHG_DOUBLE_FAIL, CPU_PARTIAL_ALLOC, CPU_PARTIAL_FREE, CPU_PARTIAL_NODE, CPU_PARTIAL_DRAIN, NR_SLUB_STAT_ITEMS };
kmem_cache_cpu  struct  include/linux/slub_def.h  46  struct kmem_cache_cpu { void **freelist; unsigned long tid; struct page *page; struct page *partial; unsigned stat[NR_SLUB_STAT_ITEMS]; };
kmem_cache_node  struct  include/linux/slub_def.h  56  struct kmem_cache_node { spinlock_t list_lock; unsigned long nr_partial; struct list_head partial; atomic_long_t nr_slabs; atomic_long_t total_objects; struct list_head full; };
kmem_cache_order_objects  struct  include/linux/slub_def.h  72  struct kmem_cache_order_objects { unsigned long x; };
KMALLOC_MIN_SIZE  macro  include/linux/slub_def.h  124  #define KMALLOC_MIN_SIZE 8
KMALLOC_SHIFT_LOW  macro  include/linux/slub_def.h  127  #define KMALLOC_SHIFT_LOW ilog2(KMALLOC_MIN_SIZE)
SLUB_MAX_SIZE  macro  include/linux/slub_def.h  138  #define SLUB_MAX_SIZE (2 * PAGE_SIZE)
SLUB_PAGE_SHIFT  macro  include/linux/slub_def.h  140  #define SLUB_PAGE_SHIFT (PAGE_SHIFT + 2)
SLUB_DMA  macro  include/linux/slub_def.h  146  #define SLUB_DMA (__force gfp_t)0
kmalloc_index  function  include/linux/slub_def.h  159  static __always_inline int kmalloc_index(size_t size)
kmalloc_slab  function  include/linux/slub_def.h  213  static __always_inline struct kmem_cache *kmalloc_slab(size_t size)
__kmalloc  prototype  include/linux/slab_def.h  118  void *__kmalloc(size_t size,gfp_t flags);
kmalloc_order  function  include/linux/slub_def.h  227  kmalloc_order(size_t size,gfp_t flags,unsigned int order)
verify_mem_not_deleted  function  include/linux/slub_def.h  244  static inline bool verify_mem_not_deleted(const void *x)
kmem_cache_alloc_trace  function  include/linux/slab_def.h  124  kmem_cache_alloc_trace(struct kmem_cache *cachep,gfp_t flags,size_t size)
kmalloc_order_trace  function  include/linux/slub_def.h  262  kmalloc_order_trace(size_t size,gfp_t flags,unsigned int order)
kmalloc_large  function  include/linux/slub_def.h  268  static __always_inline void *kmalloc_large(size_t size,gfp_t flags)
kmalloc  function  include/linux/slab_def.h  130  static __always_inline void *kmalloc(size_t size,gfp_t flags)
kmem_cache_alloc_node_trace  function  include/linux/slab_def.h  175  kmem_cache_alloc_node_trace(struct kmem_cache *cachep,gfp_t flags,int nodeid,size_t size)
__LINUX_SLOB_DEF_H  macro  include/linux/slob_def.h  2  #define __LINUX_SLOB_DEF_H
_LINUX_SLAB_DEF_H  macro  include/linux/slab_def.h  2  #define _LINUX_SLAB_DEF_H
cache_sizes  struct  include/linux/slab_def.h  108  struct cache_sizes { size_t cs_size; struct kmem_cache *cs_cachep; struct kmem_cache *cs_dmacachep; };
CACHE  macro  include/linux/slab_def.h  200  #undef CACHE
_LINUX_TIMER_H  macro  include/linux/timer.h  2  #define _LINUX_TIMER_H
timer_list  struct  include/linux/timer.h  12  struct timer_list { struct list_head entry; unsigned long expires; struct tvec_base *base; void (*function)(unsigned long); unsigned long data; int slack; int start_pid; void *start_site; char start_comm[16]; struct lockdep_map lockdep_map; };
__TIMER_LOCKDEP_MAP_INITIALIZER  macro  include/linux/timer.h  48  #define __TIMER_LOCKDEP_MAP_INITIALIZER(_kn)
TIMER_DEFERRABLE  macro  include/linux/timer.h  68  #define TIMER_DEFERRABLE 0x1LU
TIMER_IRQSAFE  macro  include/linux/timer.h  69  #define TIMER_IRQSAFE 0x2LU
TIMER_FLAG_MASK  macro  include/linux/timer.h  71  #define TIMER_FLAG_MASK 0x3LU
__TIMER_INITIALIZER  macro  include/linux/timer.h  73  #define __TIMER_INITIALIZER(_function,_expires,_data,_flags) { .entry = { .prev = TIMER_ENTRY_STATIC }, .function = (_function), .expires = (_expires), .data = (_data), .base = (void *)((unsigned long)&boot_tvec_bases + (_flags)), .slack = -1, __TIMER_LOCKDEP_MAP_INITIALIZER( __FILE__ ":" __stringify(__LINE__)) }
TIMER_INITIALIZER  macro  include/linux/timer.h  84  #define TIMER_INITIALIZER(_function,_expires,_data) __TIMER_INITIALIZER((_function), (_expires), (_data), 0)
TIMER_DEFERRED_INITIALIZER  macro  include/linux/timer.h  87  #define TIMER_DEFERRED_INITIALIZER(_function,_expires,_data) __TIMER_INITIALIZER((_function), (_expires), (_data), TIMER_DEFERRABLE)
DEFINE_TIMER  macro  include/linux/timer.h  90  #define DEFINE_TIMER(_name,_function,_expires,_data) struct timer_list _name = TIMER_INITIALIZER(_function, _expires, _data)
init_timer_key  prototype  include/linux/timer.h  94  void init_timer_key(struct timer_list *timer,unsigned int flags,const char *name, struct lock_class_key *key);
init_timer_on_stack_key  function  include/linux/timer.h  104  static inline void init_timer_on_stack_key(struct timer_list *timer,unsigned int flags, const char *name,struct lock_class_key *key)
destroy_timer_on_stack  function  include/linux/timer.h  103  static inline void destroy_timer_on_stack(struct timer_list *timer) { }
__init_timer  macro  include/linux/timer.h  125  #define __init_timer(_timer,_flags) init_timer_key((_timer), (_flags), NULL, NULL)
__init_timer_on_stack  macro  include/linux/timer.h  127  #define __init_timer_on_stack(_timer,_flags) init_timer_on_stack_key((_timer), (_flags), NULL, NULL)
init_timer  macro  include/linux/timer.h  131  #define init_timer(timer) __init_timer((timer), 0)
init_timer_deferrable  macro  include/linux/timer.h  133  #define init_timer_deferrable(timer) __init_timer((timer), TIMER_DEFERRABLE)
init_timer_on_stack  macro  include/linux/timer.h  135  #define init_timer_on_stack(timer) __init_timer_on_stack((timer), 0)
__setup_timer  macro  include/linux/timer.h  138  #define __setup_timer(_timer,_fn,_data,_flags) do { __init_timer((_timer), (_flags)); (_timer)->function = (_fn); (_timer)->data = (_data); } while (0)
__setup_timer_on_stack  macro  include/linux/timer.h  145  #define __setup_timer_on_stack(_timer,_fn,_data,_flags) do { __init_timer_on_stack((_timer), (_flags)); (_timer)->function = (_fn); (_timer)->data = (_data); } while (0)
setup_timer  macro  include/linux/timer.h  152  #define setup_timer(timer,fn,data) __setup_timer((timer), (fn), (data), 0)
setup_timer_on_stack  macro  include/linux/timer.h  154  #define setup_timer_on_stack(timer,fn,data) __setup_timer_on_stack((timer), (fn), (data), 0)
setup_deferrable_timer_on_stack  macro  include/linux/timer.h  156  #define setup_deferrable_timer_on_stack(timer,fn,data) __setup_timer_on_stack((timer), (fn), (data), TIMER_DEFERRABLE)
timer_pending  function  include/linux/timer.h  169  static inline int timer_pending(const struct timer_list * timer)
add_timer_on  prototype  include/linux/timer.h  174  extern void add_timer_on(struct timer_list *timer,int cpu);
del_timer  prototype  include/linux/timer.h  175  extern int del_timer(struct timer_list * timer);
mod_timer  prototype  include/linux/timer.h  176  extern int mod_timer(struct timer_list *timer,unsigned long expires);
mod_timer_pending  prototype  include/linux/timer.h  177  extern int mod_timer_pending(struct timer_list *timer,unsigned long expires);
mod_timer_pinned  prototype  include/linux/timer.h  178  extern int mod_timer_pinned(struct timer_list *timer,unsigned long expires);
set_timer_slack  prototype  include/linux/timer.h  180  extern void set_timer_slack(struct timer_list *time,int slack_hz);
TIMER_NOT_PINNED  macro  include/linux/timer.h  182  #define TIMER_NOT_PINNED 0
TIMER_PINNED  macro  include/linux/timer.h  183  #define TIMER_PINNED 1
NEXT_TIMER_MAX_DELTA  macro  include/linux/timer.h  188  #define NEXT_TIMER_MAX_DELTA ((1UL << 30) - 1)
get_next_timer_interrupt  prototype  include/linux/timer.h  195  extern unsigned long get_next_timer_interrupt(unsigned long now);
TIMER_STATS_FLAG_DEFERRABLE  macro  include/linux/timer.h  204  #define TIMER_STATS_FLAG_DEFERRABLE 0x1
init_timer_stats  function  include/linux/timer.h  227  static inline void init_timer_stats(void)
timer_stats_update_stats  prototype  include/linux/timer.h  208  extern void timer_stats_update_stats(void *timer,pid_t pid,void *startf,void *timerf, char *comm,unsigned int timer_flag);
__timer_stats_timer_set_start_info  prototype  include/linux/timer.h  212  extern void __timer_stats_timer_set_start_info(struct timer_list *timer,void *addr);
timer_stats_timer_set_start_info  function  include/linux/timer.h  231  static inline void timer_stats_timer_set_start_info(struct timer_list *timer)
timer_stats_timer_clear_start_info  function  include/linux/timer.h  235  static inline void timer_stats_timer_clear_start_info(struct timer_list *timer)
add_timer  prototype  include/linux/timer.h  240  extern void add_timer(struct timer_list *timer);
try_to_del_timer_sync  prototype  include/linux/timer.h  242  extern int try_to_del_timer_sync(struct timer_list *timer);
del_timer_sync  macro  include/linux/timer.h  247  # define del_timer_sync(t) del_timer(t)
del_singleshot_timer_sync  macro  include/linux/timer.h  250  #define del_singleshot_timer_sync(t) del_timer_sync(t)
init_timers  prototype  include/linux/timer.h  252  extern void init_timers(void);
run_local_timers  prototype  include/linux/timer.h  253  extern void run_local_timers(void);
it_real_fn  prototype  include/linux/timer.h  255  extern enum hrtimer_restart it_real_fn(struct hrtimer *);
__round_jiffies  prototype  include/linux/timer.h  257  unsigned long __round_jiffies(unsigned long j,int cpu);
__round_jiffies_relative  prototype  include/linux/timer.h  258  unsigned long __round_jiffies_relative(unsigned long j,int cpu);
round_jiffies  prototype  include/linux/timer.h  259  unsigned long round_jiffies(unsigned long j);
round_jiffies_relative  prototype  include/linux/timer.h  260  unsigned long round_jiffies_relative(unsigned long j);
__round_jiffies_up  prototype  include/linux/timer.h  262  unsigned long __round_jiffies_up(unsigned long j,int cpu);
__round_jiffies_up_relative  prototype  include/linux/timer.h  263  unsigned long __round_jiffies_up_relative(unsigned long j,int cpu);
round_jiffies_up  prototype  include/linux/timer.h  264  unsigned long round_jiffies_up(unsigned long j);
round_jiffies_up_relative  prototype  include/linux/timer.h  265  unsigned long round_jiffies_up_relative(unsigned long j);
__LINUX_LOCKDEP_H  macro  include/linux/lockdep.h  10  #define __LINUX_LOCKDEP_H
XXX_LOCK_USAGE_STATES  macro  include/linux/lockdep.h  30  #define XXX_LOCK_USAGE_STATES (1+3*4)
MAX_LOCKDEP_SUBCLASSES  macro  include/linux/lockdep.h  32  #define MAX_LOCKDEP_SUBCLASSES 8UL
NR_LOCKDEP_CACHING_CLASSES  macro  include/linux/lockdep.h  43  #define NR_LOCKDEP_CACHING_CLASSES 2
lockdep_subclass_key  struct  include/linux/lockdep.h  50  struct lockdep_subclass_key { char __one_byte; } __attribute__ ((__packed__));
lock_class_key  struct  include/linux/lockdep.h  409  struct lock_class_key { };
LOCKSTAT_POINTS  macro  include/linux/lockdep.h  60  #define LOCKSTAT_POINTS 4
lock_class  struct  include/linux/lockdep.h  65  struct lock_class { struct list_head hash_entry; struct list_head lock_entry; struct lockdep_subclass_key *key; unsigned int subclass; unsigned int dep_gen_id; unsigned long usage_mask; struct stack_trace usage_traces[XXX_LOCK_USAGE_STATES]; struct list_head locks_after, locks_before; unsigned int version; unsigned long ops; const char *name; int name_version; unsigned long contention_point[LOCKSTAT_POINTS]; unsigned long contending_point[LOCKSTAT_POINTS]; };
lock_time  struct  include/linux/lockdep.h  114  struct lock_time { s64 min; s64 max; s64 total; unsigned long nr; };
bounce_type  enum  include/linux/lockdep.h  121  enum bounce_type { bounce_acquired_write, bounce_acquired_read, bounce_contended_write, bounce_contended_read, nr_bounce_types, bounce_acquired = bounce_acquired_write, bounce_contended = bounce_contended_write, };
lock_class_stats  struct  include/linux/lockdep.h  132  struct lock_class_stats { unsigned long contention_point[4]; unsigned long contending_point[4]; struct lock_time read_waittime; struct lock_time write_waittime; struct lock_time read_holdtime; struct lock_time write_holdtime; unsigned long bounces[nr_bounce_types]; };
lock_stats  prototype  include/linux/lockdep.h  142  struct lock_class_stats lock_stats(struct lock_class *class);
clear_lock_stats  prototype  include/linux/lockdep.h  143  void clear_lock_stats(struct lock_class *class);
lockdep_map  struct  include/linux/lockdep.h  150  struct lockdep_map { struct lock_class_key *key; struct lock_class *class_cache[NR_LOCKDEP_CACHING_CLASSES]; const char *name; int cpu; unsigned long ip; };
lockdep_copy_map  function  include/linux/lockdep.h  160  static inline void lockdep_copy_map(struct lockdep_map *to,struct lockdep_map *from)
lock_list  struct  include/linux/lockdep.h  182  struct lock_list { struct list_head entry; struct stack_trace trace; int distance; struct lock_list *parent; };
lock_chain  struct  include/linux/lockdep.h  198  struct lock_chain { u8 irq_context; u8 depth; u16 base; struct list_head entry; u64 chain_key; };
MAX_LOCKDEP_KEYS_BITS  macro  include/linux/lockdep.h  206  #define MAX_LOCKDEP_KEYS_BITS 13
MAX_LOCKDEP_KEYS  macro  include/linux/lockdep.h  212  #define MAX_LOCKDEP_KEYS ((1UL << MAX_LOCKDEP_KEYS_BITS) - 1)
held_lock  struct  include/linux/lockdep.h  214  struct held_lock { u64 prev_chain_key; unsigned long acquire_ip; struct lockdep_map *instance; struct lockdep_map *nest_lock; u64 waittime_stamp; u64 holdtime_stamp; unsigned int class_idx:MAX_LOCKDEP_KEYS_BITS; unsigned int irq_context:2; unsigned int trylock:1; unsigned int read:2; unsigned int check:2; unsigned int hardirqs_off:1; unsigned int references:11; };
lockdep_init  macro  include/linux/lockdep.h  383  # define lockdep_init() do { } while (0)
lockdep_info  macro  include/linux/lockdep.h  384  # define lockdep_info() do { } while (0)
lockdep_reset  macro  include/linux/lockdep.h  403  # define lockdep_reset() do { debug_locks = 1; } while (0)
lockdep_reset_lock  prototype  include/linux/lockdep.h  266  extern void lockdep_reset_lock(struct lockdep_map *lock);
lockdep_free_key_range  macro  include/linux/lockdep.h  404  # define lockdep_free_key_range(start,size) do { } while (0)
lockdep_sys_exit  macro  include/linux/lockdep.h  405  # define lockdep_sys_exit() do { } while (0)
lockdep_off  function  include/linux/lockdep.h  368  static inline void lockdep_off(void)
lockdep_on  function  include/linux/lockdep.h  372  static inline void lockdep_on(void)
lockdep_init_map  macro  include/linux/lockdep.h  385  # define lockdep_init_map(lock,name,key,sub) do { (void)(name); (void)(key); } while (0)
STATIC_LOCKDEP_MAP_INIT  macro  include/linux/lockdep.h  286  #define STATIC_LOCKDEP_MAP_INIT(_name,_key) { .name = (_name), .key = (void *)(_key), }
lockdep_set_class  macro  include/linux/lockdep.h  387  # define lockdep_set_class(lock,key) do { (void)(key); } while (0)
lockdep_set_class_and_name  macro  include/linux/lockdep.h  388  # define lockdep_set_class_and_name(lock,key,name) do { (void)(key); (void)(name); } while (0)
lockdep_set_class_and_subclass  macro  include/linux/lockdep.h  390  #define lockdep_set_class_and_subclass(lock,key,sub) do { (void)(key); } while (0)
lockdep_set_subclass  macro  include/linux/lockdep.h  392  #define lockdep_set_subclass(lock,sub) do { } while (0)
lockdep_set_novalidate_class  macro  include/linux/lockdep.h  394  #define lockdep_set_novalidate_class(lock) do { } while (0)
lockdep_match_class  macro  include/linux/lockdep.h  310  #define lockdep_match_class(lock,key) lockdep_match_key(&(lock)->dep_map,key)
lockdep_match_key  function  include/linux/lockdep.h  312  static inline int lockdep_match_key(struct lockdep_map *lock,struct lock_class_key *key)
lock_acquire  macro  include/linux/lockdep.h  376  # define lock_acquire(l,s,t,r,c,n,i) do { } while (0)
lock_release  macro  include/linux/lockdep.h  377  # define lock_release(l,n,i) do { } while (0)
lockdep_is_held  macro  include/linux/lockdep.h  340  #define lockdep_is_held(lock) lock_is_held(&(lock)->dep_map)
lock_is_held  prototype  include/linux/lockdep.h  342  extern int lock_is_held(struct lockdep_map *lock);
lock_set_class  macro  include/linux/lockdep.h  378  # define lock_set_class(l,n,k,s,i) do { } while (0)
lock_set_subclass  macro  include/linux/lockdep.h  379  # define lock_set_subclass(l,s,i) do { } while (0)
lockdep_set_current_reclaim_state  macro  include/linux/lockdep.h  380  # define lockdep_set_current_reclaim_state(g) do { } while (0)
lockdep_clear_current_reclaim_state  macro  include/linux/lockdep.h  381  # define lockdep_clear_current_reclaim_state() do { } while (0)
lockdep_trace_alloc  macro  include/linux/lockdep.h  382  # define lockdep_trace_alloc(g) do { } while (0)
INIT_LOCKDEP  macro  include/linux/lockdep.h  402  # define INIT_LOCKDEP
lockdep_depth  macro  include/linux/lockdep.h  411  #define lockdep_depth(tsk) (0)
lockdep_assert_held  macro  include/linux/lockdep.h  413  #define lockdep_assert_held(l) do { } while (0)
lockdep_recursing  macro  include/linux/lockdep.h  415  #define lockdep_recursing(tsk) (0)
lock_contended  macro  include/linux/lockdep.h  435  #define lock_contended(lockdep_map,ip) do {} while (0)
lock_acquired  macro  include/linux/lockdep.h  436  #define lock_acquired(lockdep_map,ip) do {} while (0)
LOCK_CONTENDED  macro  include/linux/lockdep.h  438  #define LOCK_CONTENDED(_lock,try,lock) lock(_lock)
LOCK_CONTENDED_FLAGS  macro  include/linux/lockdep.h  455  #define LOCK_CONTENDED_FLAGS(_lock,try,lock,lockfl,flags) lockfl((_lock), (flags))
print_irqtrace_events  function  include/linux/lockdep.h  463  static inline void print_irqtrace_events(struct task_struct *curr)
SINGLE_DEPTH_NESTING  macro  include/linux/lockdep.h  473  #define SINGLE_DEPTH_NESTING 1
spin_acquire  macro  include/linux/lockdep.h  490  # define spin_acquire(l,s,t,i) do { } while (0)
spin_acquire_nest  macro  include/linux/lockdep.h  486  # define spin_acquire_nest(l,s,t,n,i) lock_acquire(l,s,t,0,1,NULL,i)
spin_release  macro  include/linux/lockdep.h  491  # define spin_release(l,n,i) do { } while (0)
rwlock_acquire  macro  include/linux/lockdep.h  504  # define rwlock_acquire(l,s,t,i) do { } while (0)
rwlock_acquire_read  macro  include/linux/lockdep.h  505  # define rwlock_acquire_read(l,s,t,i) do { } while (0)
rwlock_release  macro  include/linux/lockdep.h  506  # define rwlock_release(l,n,i) do { } while (0)
mutex_acquire  macro  include/linux/lockdep.h  519  # define mutex_acquire(l,s,t,i) do { } while (0)
mutex_acquire_nest  macro  include/linux/lockdep.h  520  # define mutex_acquire_nest(l,s,t,n,i) do { } while (0)
mutex_release  macro  include/linux/lockdep.h  521  # define mutex_release(l,n,i) do { } while (0)
rwsem_acquire  macro  include/linux/lockdep.h  536  # define rwsem_acquire(l,s,t,i) do { } while (0)
rwsem_acquire_nest  macro  include/linux/lockdep.h  537  # define rwsem_acquire_nest(l,s,t,n,i) do { } while (0)
rwsem_acquire_read  macro  include/linux/lockdep.h  538  # define rwsem_acquire_read(l,s,t,i) do { } while (0)
rwsem_release  macro  include/linux/lockdep.h  539  # define rwsem_release(l,n,i) do { } while (0)
lock_map_acquire  macro  include/linux/lockdep.h  552  # define lock_map_acquire(l) do { } while (0)
lock_map_acquire_read  macro  include/linux/lockdep.h  553  # define lock_map_acquire_read(l) do { } while (0)
lock_map_release  macro  include/linux/lockdep.h  554  # define lock_map_release(l) do { } while (0)
might_lock  macro  include/linux/lockdep.h  571  # define might_lock(lock) do { } while (0)
might_lock_read  macro  include/linux/lockdep.h  572  # define might_lock_read(lock) do { } while (0)
lockdep_rcu_suspicious  prototype  include/linux/lockdep.h  576  void lockdep_rcu_suspicious(const char *file,const int line,const char *s);
_LINUX_THREADS_H  macro  include/linux/threads.h  2  #define _LINUX_THREADS_H
CONFIG_NR_CPUS  macro  include/linux/threads.h  16  #define CONFIG_NR_CPUS 1
NR_CPUS  macro  include/linux/threads.h  20  #define NR_CPUS CONFIG_NR_CPUS
MIN_THREADS_LEFT_FOR_ROOT  macro  include/linux/threads.h  22  #define MIN_THREADS_LEFT_FOR_ROOT 4
PID_MAX_DEFAULT  macro  include/linux/threads.h  27  #define PID_MAX_DEFAULT (CONFIG_BASE_SMALL ? 0x1000 : 0x8000)
PID_MAX_LIMIT  macro  include/linux/threads.h  33  #define PID_MAX_LIMIT (CONFIG_BASE_SMALL ? PAGE_SIZE * 8 : (sizeof(long) > 4 ? 4 * 1024 * 1024 : PID_MAX_DEFAULT))
PIDS_PER_CPU_DEFAULT  macro  include/linux/threads.h  42  #define PIDS_PER_CPU_DEFAULT 1024
PIDS_PER_CPU_MIN  macro  include/linux/threads.h  43  #define PIDS_PER_CPU_MIN 8
LINUX_MOD_DEVICETABLE_H  macro  include/linux/mod_devicetable.h  8  #define LINUX_MOD_DEVICETABLE_H
PCI_ANY_ID  macro  include/linux/mod_devicetable.h  15  #define PCI_ANY_ID (~0)
pci_device_id  struct  include/linux/mod_devicetable.h  17  struct pci_device_id { __u32 vendor, device; __u32 subvendor, subdevice; __u32 class, class_mask; kernel_ulong_t driver_data; };
IEEE1394_MATCH_VENDOR_ID  macro  include/linux/mod_devicetable.h  25  #define IEEE1394_MATCH_VENDOR_ID 0x0001
IEEE1394_MATCH_MODEL_ID  macro  include/linux/mod_devicetable.h  26  #define IEEE1394_MATCH_MODEL_ID 0x0002
IEEE1394_MATCH_SPECIFIER_ID  macro  include/linux/mod_devicetable.h  27  #define IEEE1394_MATCH_SPECIFIER_ID 0x0004
IEEE1394_MATCH_VERSION  macro  include/linux/mod_devicetable.h  28  #define IEEE1394_MATCH_VERSION 0x0008
ieee1394_device_id  struct  include/linux/mod_devicetable.h  30  struct ieee1394_device_id { __u32 match_flags; __u32 vendor_id; __u32 model_id; __u32 specifier_id; __u32 version; kernel_ulong_t driver_data };
usb_device_id  struct  include/linux/mod_devicetable.h  101  struct usb_device_id { __u16 match_flags; __u16 idVendor; __u16 idProduct; __u16 bcdDevice_lo; __u16 bcdDevice_hi; __u8 bDeviceClass; __u8 bDeviceSubClass; __u8 bDeviceProtocol; __u8 bInterfaceClass; __u8 bInterfaceSubClass; __u8 bInterfaceProtocol; __u8 bInterfaceNumber; kernel_ulong_t driver_info };
USB_DEVICE_ID_MATCH_VENDOR  macro  include/linux/mod_devicetable.h  130  #define USB_DEVICE_ID_MATCH_VENDOR 0x0001
USB_DEVICE_ID_MATCH_PRODUCT  macro  include/linux/mod_devicetable.h  131  #define USB_DEVICE_ID_MATCH_PRODUCT 0x0002
USB_DEVICE_ID_MATCH_DEV_LO  macro  include/linux/mod_devicetable.h  132  #define USB_DEVICE_ID_MATCH_DEV_LO 0x0004
USB_DEVICE_ID_MATCH_DEV_HI  macro  include/linux/mod_devicetable.h  133  #define USB_DEVICE_ID_MATCH_DEV_HI 0x0008
USB_DEVICE_ID_MATCH_DEV_CLASS  macro  include/linux/mod_devicetable.h  134  #define USB_DEVICE_ID_MATCH_DEV_CLASS 0x0010
USB_DEVICE_ID_MATCH_DEV_SUBCLASS  macro  include/linux/mod_devicetable.h  135  #define USB_DEVICE_ID_MATCH_DEV_SUBCLASS 0x0020
USB_DEVICE_ID_MATCH_DEV_PROTOCOL  macro  include/linux/mod_devicetable.h  136  #define USB_DEVICE_ID_MATCH_DEV_PROTOCOL 0x0040
USB_DEVICE_ID_MATCH_INT_CLASS  macro  include/linux/mod_devicetable.h  137  #define USB_DEVICE_ID_MATCH_INT_CLASS 0x0080
USB_DEVICE_ID_MATCH_INT_SUBCLASS  macro  include/linux/mod_devicetable.h  138  #define USB_DEVICE_ID_MATCH_INT_SUBCLASS 0x0100
USB_DEVICE_ID_MATCH_INT_PROTOCOL  macro  include/linux/mod_devicetable.h  139  #define USB_DEVICE_ID_MATCH_INT_PROTOCOL 0x0200
USB_DEVICE_ID_MATCH_INT_NUMBER  macro  include/linux/mod_devicetable.h  140  #define USB_DEVICE_ID_MATCH_INT_NUMBER 0x0400
HID_ANY_ID  macro  include/linux/mod_devicetable.h  142  #define HID_ANY_ID (~0)
HID_BUS_ANY  macro  include/linux/mod_devicetable.h  143  #define HID_BUS_ANY 0xffff
HID_GROUP_ANY  macro  include/linux/mod_devicetable.h  144  #define HID_GROUP_ANY 0x0000
hid_device_id  struct  include/linux/mod_devicetable.h  146  struct hid_device_id { __u16 bus; __u16 group; __u32 vendor; __u32 product; kernel_ulong_t driver_data };
ccw_device_id  struct  include/linux/mod_devicetable.h  156  struct ccw_device_id { __u16 match_flags; __u16 cu_type; __u16 dev_type; __u8 cu_model; __u8 dev_model; kernel_ulong_t driver_info; };
CCW_DEVICE_ID_MATCH_CU_TYPE  macro  include/linux/mod_devicetable.h  167  #define CCW_DEVICE_ID_MATCH_CU_TYPE 0x01
CCW_DEVICE_ID_MATCH_CU_MODEL  macro  include/linux/mod_devicetable.h  168  #define CCW_DEVICE_ID_MATCH_CU_MODEL 0x02
CCW_DEVICE_ID_MATCH_DEVICE_TYPE  macro  include/linux/mod_devicetable.h  169  #define CCW_DEVICE_ID_MATCH_DEVICE_TYPE 0x04
CCW_DEVICE_ID_MATCH_DEVICE_MODEL  macro  include/linux/mod_devicetable.h  170  #define CCW_DEVICE_ID_MATCH_DEVICE_MODEL 0x08
ap_device_id  struct  include/linux/mod_devicetable.h  173  struct ap_device_id { __u16 match_flags; __u8 dev_type; __u8 pad1; __u32 pad2; kernel_ulong_t driver_info; };
AP_DEVICE_ID_MATCH_DEVICE_TYPE  macro  include/linux/mod_devicetable.h  181  #define AP_DEVICE_ID_MATCH_DEVICE_TYPE 0x01
css_device_id  struct  include/linux/mod_devicetable.h  184  struct css_device_id { __u8 match_flags; __u8 type; __u16 pad2; __u32 pad3; kernel_ulong_t driver_data; };
ACPI_ID_LEN  macro  include/linux/mod_devicetable.h  192  #define ACPI_ID_LEN 16
acpi_device_id  struct  include/linux/mod_devicetable.h  195  struct acpi_device_id { __u8 id[ACPI_ID_LEN]; kernel_ulong_t driver_data; };
PNP_ID_LEN  macro  include/linux/mod_devicetable.h  200  #define PNP_ID_LEN 8
PNP_MAX_DEVICES  macro  include/linux/mod_devicetable.h  201  #define PNP_MAX_DEVICES 8
pnp_device_id  struct  include/linux/mod_devicetable.h  203  struct pnp_device_id { __u8 id[PNP_ID_LEN]; kernel_ulong_t driver_data; };
pnp_card_device_id  struct  include/linux/mod_devicetable.h  208  struct pnp_card_device_id { __u8 id[PNP_ID_LEN]; kernel_ulong_t driver_data; struct { __u8 id[PNP_ID_LEN]; } devs[PNP_MAX_DEVICES]; };
SERIO_ANY  macro  include/linux/mod_devicetable.h  217  #define SERIO_ANY 0xff
serio_device_id  struct  include/linux/mod_devicetable.h  219  struct serio_device_id { __u8 type; __u8 extra; __u8 id; __u8 proto; };
of_device_id  struct  include/linux/mod_devicetable.h  229  struct of_device_id { char name[32]; char type[32]; char compatible[128]; const void *data; kernel_ulong_t data; };
vio_device_id  struct  include/linux/mod_devicetable.h  242  struct vio_device_id { char type[32]; char compat[32]; };
pcmcia_device_id  struct  include/linux/mod_devicetable.h  249  struct pcmcia_device_id { __u16 match_flags; __u16 manf_id; __u16 card_id; __u8 func_id; __u8 function; __u8 device_no; __u32 prod_id_hash[4] const char * prod_id[4]; kernel_ulong_t prod_id[4] kernel_ulong_t driver_info; char * cisfile; kernel_ulong_t cisfile; };
PCMCIA_DEV_ID_MATCH_MANF_ID  macro  include/linux/mod_devicetable.h  283  #define PCMCIA_DEV_ID_MATCH_MANF_ID 0x0001
PCMCIA_DEV_ID_MATCH_CARD_ID  macro  include/linux/mod_devicetable.h  284  #define PCMCIA_DEV_ID_MATCH_CARD_ID 0x0002
PCMCIA_DEV_ID_MATCH_FUNC_ID  macro  include/linux/mod_devicetable.h  285  #define PCMCIA_DEV_ID_MATCH_FUNC_ID 0x0004
PCMCIA_DEV_ID_MATCH_FUNCTION  macro  include/linux/mod_devicetable.h  286  #define PCMCIA_DEV_ID_MATCH_FUNCTION 0x0008
PCMCIA_DEV_ID_MATCH_PROD_ID1  macro  include/linux/mod_devicetable.h  287  #define PCMCIA_DEV_ID_MATCH_PROD_ID1 0x0010
PCMCIA_DEV_ID_MATCH_PROD_ID2  macro  include/linux/mod_devicetable.h  288  #define PCMCIA_DEV_ID_MATCH_PROD_ID2 0x0020
PCMCIA_DEV_ID_MATCH_PROD_ID3  macro  include/linux/mod_devicetable.h  289  #define PCMCIA_DEV_ID_MATCH_PROD_ID3 0x0040
PCMCIA_DEV_ID_MATCH_PROD_ID4  macro  include/linux/mod_devicetable.h  290  #define PCMCIA_DEV_ID_MATCH_PROD_ID4 0x0080
PCMCIA_DEV_ID_MATCH_DEVICE_NO  macro  include/linux/mod_devicetable.h  291  #define PCMCIA_DEV_ID_MATCH_DEVICE_NO 0x0100
PCMCIA_DEV_ID_MATCH_FAKE_CIS  macro  include/linux/mod_devicetable.h  292  #define PCMCIA_DEV_ID_MATCH_FAKE_CIS 0x0200
PCMCIA_DEV_ID_MATCH_ANONYMOUS  macro  include/linux/mod_devicetable.h  293  #define PCMCIA_DEV_ID_MATCH_ANONYMOUS 0x0400
INPUT_DEVICE_ID_EV_MAX  macro  include/linux/mod_devicetable.h  296  #define INPUT_DEVICE_ID_EV_MAX 0x1f
INPUT_DEVICE_ID_KEY_MIN_INTERESTING  macro  include/linux/mod_devicetable.h  297  #define INPUT_DEVICE_ID_KEY_MIN_INTERESTING 0x71
INPUT_DEVICE_ID_KEY_MAX  macro  include/linux/mod_devicetable.h  298  #define INPUT_DEVICE_ID_KEY_MAX 0x2ff
INPUT_DEVICE_ID_REL_MAX  macro  include/linux/mod_devicetable.h  299  #define INPUT_DEVICE_ID_REL_MAX 0x0f
INPUT_DEVICE_ID_ABS_MAX  macro  include/linux/mod_devicetable.h  300  #define INPUT_DEVICE_ID_ABS_MAX 0x3f
INPUT_DEVICE_ID_MSC_MAX  macro  include/linux/mod_devicetable.h  301  #define INPUT_DEVICE_ID_MSC_MAX 0x07
INPUT_DEVICE_ID_LED_MAX  macro  include/linux/mod_devicetable.h  302  #define INPUT_DEVICE_ID_LED_MAX 0x0f
INPUT_DEVICE_ID_SND_MAX  macro  include/linux/mod_devicetable.h  303  #define INPUT_DEVICE_ID_SND_MAX 0x07
INPUT_DEVICE_ID_FF_MAX  macro  include/linux/mod_devicetable.h  304  #define INPUT_DEVICE_ID_FF_MAX 0x7f
INPUT_DEVICE_ID_SW_MAX  macro  include/linux/mod_devicetable.h  305  #define INPUT_DEVICE_ID_SW_MAX 0x0f
INPUT_DEVICE_ID_MATCH_BUS  macro  include/linux/mod_devicetable.h  307  #define INPUT_DEVICE_ID_MATCH_BUS 1
INPUT_DEVICE_ID_MATCH_VENDOR  macro  include/linux/mod_devicetable.h  308  #define INPUT_DEVICE_ID_MATCH_VENDOR 2
INPUT_DEVICE_ID_MATCH_PRODUCT  macro  include/linux/mod_devicetable.h  309  #define INPUT_DEVICE_ID_MATCH_PRODUCT 4
INPUT_DEVICE_ID_MATCH_VERSION  macro  include/linux/mod_devicetable.h  310  #define INPUT_DEVICE_ID_MATCH_VERSION 8
INPUT_DEVICE_ID_MATCH_EVBIT  macro  include/linux/mod_devicetable.h  312  #define INPUT_DEVICE_ID_MATCH_EVBIT 0x0010
INPUT_DEVICE_ID_MATCH_KEYBIT  macro  include/linux/mod_devicetable.h  313  #define INPUT_DEVICE_ID_MATCH_KEYBIT 0x0020
INPUT_DEVICE_ID_MATCH_RELBIT  macro  include/linux/mod_devicetable.h  314  #define INPUT_DEVICE_ID_MATCH_RELBIT 0x0040
INPUT_DEVICE_ID_MATCH_ABSBIT  macro  include/linux/mod_devicetable.h  315  #define INPUT_DEVICE_ID_MATCH_ABSBIT 0x0080
INPUT_DEVICE_ID_MATCH_MSCIT  macro  include/linux/mod_devicetable.h  316  #define INPUT_DEVICE_ID_MATCH_MSCIT 0x0100
INPUT_DEVICE_ID_MATCH_LEDBIT  macro  include/linux/mod_devicetable.h  317  #define INPUT_DEVICE_ID_MATCH_LEDBIT 0x0200
INPUT_DEVICE_ID_MATCH_SNDBIT  macro  include/linux/mod_devicetable.h  318  #define INPUT_DEVICE_ID_MATCH_SNDBIT 0x0400
INPUT_DEVICE_ID_MATCH_FFBIT  macro  include/linux/mod_devicetable.h  319  #define INPUT_DEVICE_ID_MATCH_FFBIT 0x0800
INPUT_DEVICE_ID_MATCH_SWBIT  macro  include/linux/mod_devicetable.h  320  #define INPUT_DEVICE_ID_MATCH_SWBIT 0x1000
input_device_id  struct  include/linux/mod_devicetable.h  322  struct input_device_id { kernel_ulong_t flags; __u16 bustype; __u16 vendor; __u16 product; __u16 version; kernel_ulong_t evbit[INPUT_DEVICE_ID_EV_MAX / BITS_PER_LONG + 1]; kernel_ulong_t keybit[INPUT_DEVICE_ID_KEY_MAX / BITS_PER_LONG + 1]; kernel_ulong_t relbit[INPUT_DEVICE_ID_REL_MAX / BITS_PER_LONG + 1]; kernel_ulong_t absbit[INPUT_DEVICE_ID_ABS_MAX / BITS_PER_LONG + 1]; kernel_ulong_t mscbit[INPUT_DEVICE_ID_MSC_MAX / BITS_PER_LONG + 1]; kernel_ulong_t ledbit[INPUT_DEVICE_ID_LED_MAX / BITS_PER_LONG + 1]; kernel_ulong_t sndbit[INPUT_DEVICE_ID_SND_MAX / BITS_PER_LONG + 1]; kernel_ulong_t ffbit[INPUT_DEVICE_ID_FF_MAX / BITS_PER_LONG + 1]; kernel_ulong_t swbit[INPUT_DEVICE_ID_SW_MAX / BITS_PER_LONG + 1]; kernel_ulong_t driver_info; };
EISA_SIG_LEN  macro  include/linux/mod_devicetable.h  346  #define EISA_SIG_LEN 8
eisa_device_id  struct  include/linux/mod_devicetable.h  349  struct eisa_device_id { char sig[EISA_SIG_LEN]; kernel_ulong_t driver_data; };
EISA_DEVICE_MODALIAS_FMT  macro  include/linux/mod_devicetable.h  354  #define EISA_DEVICE_MODALIAS_FMT "eisa:s%s"
parisc_device_id  struct  include/linux/mod_devicetable.h  356  struct parisc_device_id { __u8 hw_type; __u8 hversion_rev; __u16 hversion; __u32 sversion; };
PA_HWTYPE_ANY_ID  macro  include/linux/mod_devicetable.h  363  #define PA_HWTYPE_ANY_ID 0xff
PA_HVERSION_REV_ANY_ID  macro  include/linux/mod_devicetable.h  364  #define PA_HVERSION_REV_ANY_ID 0xff
PA_HVERSION_ANY_ID  macro  include/linux/mod_devicetable.h  365  #define PA_HVERSION_ANY_ID 0xffff
PA_SVERSION_ANY_ID  macro  include/linux/mod_devicetable.h  366  #define PA_SVERSION_ANY_ID 0xffffffff
SDIO_ANY_ID  macro  include/linux/mod_devicetable.h  370  #define SDIO_ANY_ID (~0)
sdio_device_id  struct  include/linux/mod_devicetable.h  372  struct sdio_device_id { __u16 vendor; __u16 device; kernel_ulong_t driver_data };
ssb_device_id  struct  include/linux/mod_devicetable.h  381  struct ssb_device_id { __u16 vendor; __u16 coreid; __u8 revision; };
SSB_DEVICE  macro  include/linux/mod_devicetable.h  386  #define SSB_DEVICE(_vendor,_coreid,_revision) { .vendor = _vendor, .coreid = _coreid, .revision = _revision, }
SSB_DEVTABLE_END  macro  include/linux/mod_devicetable.h  388  #define SSB_DEVTABLE_END { 0, },
SSB_ANY_VENDOR  macro  include/linux/mod_devicetable.h  391  #define SSB_ANY_VENDOR 0xFFFF
SSB_ANY_ID  macro  include/linux/mod_devicetable.h  392  #define SSB_ANY_ID 0xFFFF
SSB_ANY_REV  macro  include/linux/mod_devicetable.h  393  #define SSB_ANY_REV 0xFF
bcma_device_id  struct  include/linux/mod_devicetable.h  396  struct bcma_device_id { __u16 manuf; __u16 id; __u8 rev; };
BCMA_CORE  macro  include/linux/mod_devicetable.h  402  #define BCMA_CORE(_manuf,_id,_rev,_class) { .manuf = _manuf, .id = _id, .rev = _rev, .class = _class, }
BCMA_CORETABLE_END  macro  include/linux/mod_devicetable.h  404  #define BCMA_CORETABLE_END { 0, },
BCMA_ANY_MANUF  macro  include/linux/mod_devicetable.h  407  #define BCMA_ANY_MANUF 0xFFFF
BCMA_ANY_ID  macro  include/linux/mod_devicetable.h  408  #define BCMA_ANY_ID 0xFFFF
BCMA_ANY_REV  macro  include/linux/mod_devicetable.h  409  #define BCMA_ANY_REV 0xFF
BCMA_ANY_CLASS  macro  include/linux/mod_devicetable.h  410  #define BCMA_ANY_CLASS 0xFF
virtio_device_id  struct  include/linux/mod_devicetable.h  412  struct virtio_device_id { __u32 device; __u32 vendor; };
VIRTIO_DEV_ANY_ID  macro  include/linux/mod_devicetable.h  416  #define VIRTIO_DEV_ANY_ID 0xffffffff
hv_vmbus_device_id  struct  include/linux/mod_devicetable.h  421  struct hv_vmbus_device_id { __u8 guid[16]; kernel_ulong_t driver_data };
RPMSG_NAME_SIZE  macro  include/linux/mod_devicetable.h  429  #define RPMSG_NAME_SIZE 32
RPMSG_DEVICE_MODALIAS_FMT  macro  include/linux/mod_devicetable.h  430  #define RPMSG_DEVICE_MODALIAS_FMT "rpmsg:%s"
rpmsg_device_id  struct  include/linux/mod_devicetable.h  432  struct rpmsg_device_id { char name[RPMSG_NAME_SIZE]; };
I2C_NAME_SIZE  macro  include/linux/mod_devicetable.h  438  #define I2C_NAME_SIZE 20
I2C_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  439  #define I2C_MODULE_PREFIX "i2c:"
i2c_device_id  struct  include/linux/mod_devicetable.h  441  struct i2c_device_id { char name[I2C_NAME_SIZE]; kernel_ulong_t driver_data };
SPI_NAME_SIZE  macro  include/linux/mod_devicetable.h  449  #define SPI_NAME_SIZE 32
SPI_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  450  #define SPI_MODULE_PREFIX "spi:"
spi_device_id  struct  include/linux/mod_devicetable.h  452  struct spi_device_id { char name[SPI_NAME_SIZE]; kernel_ulong_t driver_data };
dmi_field  enum  include/linux/mod_devicetable.h  459  enum dmi_field { DMI_NONE, DMI_BIOS_VENDOR, DMI_BIOS_VERSION, DMI_BIOS_DATE, DMI_SYS_VENDOR, DMI_PRODUCT_NAME, DMI_PRODUCT_VERSION, DMI_PRODUCT_SERIAL, DMI_PRODUCT_UUID, DMI_BOARD_VENDOR, DMI_BOARD_NAME, DMI_BOARD_VERSION, DMI_BOARD_SERIAL, DMI_BOARD_ASSET_TAG, DMI_CHASSIS_VENDOR, DMI_CHASSIS_TYPE, DMI_CHASSIS_VERSION, DMI_CHASSIS_SERIAL, DMI_CHASSIS_ASSET_TAG, DMI_STRING_MAX, };
dmi_strmatch  struct  include/linux/mod_devicetable.h  482  struct dmi_strmatch { unsigned char slot; char substr[79]; };
dmi_system_id  struct  include/linux/mod_devicetable.h  496  struct dmi_system_id { int (*callback)(const struct dmi_system_id *); const char *ident; struct dmi_strmatch matches[4]; void *driver_data; };
dmi_device_id  macro  include/linux/mod_devicetable.h  508  #define dmi_device_id dmi_system_id
DMI_MATCH  macro  include/linux/mod_devicetable.h  511  #define DMI_MATCH(a,b) { a,b }
PLATFORM_NAME_SIZE  macro  include/linux/mod_devicetable.h  513  #define PLATFORM_NAME_SIZE 20
PLATFORM_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  514  #define PLATFORM_MODULE_PREFIX "platform:"
platform_device_id  struct  include/linux/mod_devicetable.h  516  struct platform_device_id { char name[PLATFORM_NAME_SIZE]; kernel_ulong_t driver_data };
MDIO_MODULE_PREFIX  macro  include/linux/mod_devicetable.h  522  #define MDIO_MODULE_PREFIX "mdio:"
MDIO_ID_FMT  macro  include/linux/mod_devicetable.h  524  #define MDIO_ID_FMT "%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d"
MDIO_ID_ARGS  macro  include/linux/mod_devicetable.h  525  #define MDIO_ID_ARGS(_id) (_id)>>31, ((_id)>>30) & 1, ((_id)>>29) & 1, ((_id)>>28) & 1, ((_id)>>27) & 1, ((_id)>>26) & 1, ((_id)>>25) & 1, ((_id)>>24) & 1, ((_id)>>23) & 1, ((_id)>>22) & 1, ((_id)>>21) & 1, ((_id)>>20) & 1, ((_id)>>19) & 1, ((_id)>>18) & 1, ((_id)>>17) & 1, ((_id)>>16) & 1, ((_id)>>15) & 1, ((_id)>>14) & 1, ((_id)>>13) & 1, ((_id)>>12) & 1, ((_id)>>11) & 1, ((_id)>>10) & 1, ((_id)>>9) & 1, ((_id)>>8) & 1, ((_id)>>7) & 1, ((_id)>>6) & 1, ((_id)>>5) & 1, ((_id)>>4) & 1, ((_id)>>3) & 1, ((_id)>>2) & 1, ((_id)>>1) & 1, (_id) & 1
mdio_device_id  struct  include/linux/mod_devicetable.h  543  struct mdio_device_id { __u32 phy_id; __u32 phy_id_mask; };
zorro_device_id  struct  include/linux/mod_devicetable.h  548  struct zorro_device_id { __u32 id; kernel_ulong_t driver_data; };
ZORRO_WILDCARD  macro  include/linux/mod_devicetable.h  553  #define ZORRO_WILDCARD (0xffffffff)
ZORRO_DEVICE_MODALIAS_FMT  macro  include/linux/mod_devicetable.h  555  #define ZORRO_DEVICE_MODALIAS_FMT "zorro:i%08X"
ISAPNP_ANY_ID  macro  include/linux/mod_devicetable.h  557  #define ISAPNP_ANY_ID 0xffff
isapnp_device_id  struct  include/linux/mod_devicetable.h  558  struct isapnp_device_id { unsigned short card_vendor, card_device; unsigned short vendor, function; kernel_ulong_t driver_data; };
amba_id  struct  include/linux/mod_devicetable.h  572  struct amba_id { unsigned int id; unsigned int mask; kernel_ulong_t data; void *data; };
x86_cpu_id  struct  include/linux/mod_devicetable.h  587  struct x86_cpu_id { __u16 vendor; __u16 family; __u16 model; __u16 feature; kernel_ulong_t driver_data; };
X86_FEATURE_MATCH  macro  include/linux/mod_devicetable.h  595  #define X86_FEATURE_MATCH(x) { X86_VENDOR_ANY, X86_FAMILY_ANY, X86_MODEL_ANY, x }
X86_VENDOR_ANY  macro  include/linux/mod_devicetable.h  598  #define X86_VENDOR_ANY 0xffff
X86_FAMILY_ANY  macro  include/linux/mod_devicetable.h  599  #define X86_FAMILY_ANY 0
X86_MODEL_ANY  macro  include/linux/mod_devicetable.h  600  #define X86_MODEL_ANY 0
X86_FEATURE_ANY  macro  include/linux/mod_devicetable.h  601  #define X86_FEATURE_ANY 0
IPACK_ANY_FORMAT  macro  include/linux/mod_devicetable.h  603  #define IPACK_ANY_FORMAT 0xff
IPACK_ANY_ID  macro  include/linux/mod_devicetable.h  604  #define IPACK_ANY_ID (~0)
ipack_device_id  struct  include/linux/mod_devicetable.h  605  struct ipack_device_id { __u8 format; __u32 vendor; __u32 device; };
_LINUX_INIT_H  macro  include/linux/init.h  2  #define _LINUX_INIT_H
__init  macro  include/linux/init.h  44  #define __init __section(.init.text) __cold notrace
__initdata  macro  include/linux/init.h  45  #define __initdata __section(.init.data)
__initconst  macro  include/linux/init.h  46  #define __initconst __constsection(.init.rodata)
__exitdata  macro  include/linux/init.h  47  #define __exitdata __section(.exit.data)
__exit_call  macro  include/linux/init.h  48  #define __exit_call __used __section(.exitcall.exit)
__constsection  macro  include/linux/init.h  58  #define __constsection(x) __section(x)
__ref  macro  include/linux/init.h  78  #define __ref __section(.ref.text) noinline
__refdata  macro  include/linux/init.h  79  #define __refdata __section(.ref.data)
__refconst  macro  include/linux/init.h  80  #define __refconst __constsection(.ref.rodata)
__init_refok  macro  include/linux/init.h  83  #define __init_refok __ref
__initdata_refok  macro  include/linux/init.h  84  #define __initdata_refok __refdata
__exit_refok  macro  include/linux/init.h  85  #define __exit_refok __ref
__exitused  macro  include/linux/init.h  91  #define __exitused __used
__exit  macro  include/linux/init.h  94  #define __exit __section(.exit.text) __exitused __cold notrace
__cpuinit  macro  include/linux/init.h  97  #define __cpuinit __section(.cpuinit.text) __cold notrace
__cpuinitdata  macro  include/linux/init.h  98  #define __cpuinitdata __section(.cpuinit.data)
__cpuinitconst  macro  include/linux/init.h  99  #define __cpuinitconst __constsection(.cpuinit.rodata)
__cpuexit  macro  include/linux/init.h  100  #define __cpuexit __section(.cpuexit.text) __exitused __cold notrace
__cpuexitdata  macro  include/linux/init.h  101  #define __cpuexitdata __section(.cpuexit.data)
__cpuexitconst  macro  include/linux/init.h  102  #define __cpuexitconst __constsection(.cpuexit.rodata)
__meminit  macro  include/linux/init.h  105  #define __meminit __section(.meminit.text) __cold notrace
__meminitdata  macro  include/linux/init.h  106  #define __meminitdata __section(.meminit.data)
__meminitconst  macro  include/linux/init.h  107  #define __meminitconst __constsection(.meminit.rodata)
__memexit  macro  include/linux/init.h  108  #define __memexit __section(.memexit.text) __exitused __cold notrace
__memexitdata  macro  include/linux/init.h  109  #define __memexitdata __section(.memexit.data)
__memexitconst  macro  include/linux/init.h  110  #define __memexitconst __constsection(.memexit.rodata)
__HEAD  macro  include/linux/init.h  113  #define __HEAD .section ".head.text","ax"
__INIT  macro  include/linux/init.h  114  #define __INIT .section ".init.text","ax"
__FINIT  macro  include/linux/init.h  115  #define __FINIT .previous
__INITDATA  macro  include/linux/init.h  117  #define __INITDATA .section ".init.data","aw",%progbits
__INITRODATA  macro  include/linux/init.h  118  #define __INITRODATA .section ".init.rodata","a",%progbits
__FINITDATA  macro  include/linux/init.h  119  #define __FINITDATA .previous
__CPUINIT  macro  include/linux/init.h  121  #define __CPUINIT .section ".cpuinit.text","ax"
__CPUINITDATA  macro  include/linux/init.h  122  #define __CPUINITDATA .section ".cpuinit.data","aw"
__CPUINITRODATA  macro  include/linux/init.h  123  #define __CPUINITRODATA .section ".cpuinit.rodata","a"
__MEMINIT  macro  include/linux/init.h  125  #define __MEMINIT .section ".meminit.text","ax"
__MEMINITDATA  macro  include/linux/init.h  126  #define __MEMINITDATA .section ".meminit.data","aw"
__MEMINITRODATA  macro  include/linux/init.h  127  #define __MEMINITRODATA .section ".meminit.rodata","a"
__REF  macro  include/linux/init.h  130  #define __REF .section ".ref.text","ax"
__REFDATA  macro  include/linux/init.h  131  #define __REFDATA .section ".ref.data","aw"
__REFCONST  macro  include/linux/init.h  132  #define __REFCONST .section ".ref.rodata","a"
do_one_initcall  prototype  include/linux/init.h  148  extern int do_one_initcall(initcall_t fn);
setup_arch  prototype  include/linux/init.h  154  void setup_arch(char **);
prepare_namespace  prototype  include/linux/init.h  155  void prepare_namespace(void);
__define_initcall  macro  include/linux/init.h  177  #define __define_initcall(fn,id) static initcall_t __initcall_##fn##id __used __attribute__((__section__(".initcall" #id ".init"))) = fn
early_initcall  macro  include/linux/init.h  284  #define early_initcall(fn) module_init(fn)
pure_initcall  macro  include/linux/init.h  195  #define pure_initcall(fn) __define_initcall(fn,0)
core_initcall  macro  include/linux/init.h  285  #define core_initcall(fn) module_init(fn)
core_initcall_sync  macro  include/linux/init.h  198  #define core_initcall_sync(fn) __define_initcall(fn,1s)
postcore_initcall  macro  include/linux/init.h  286  #define postcore_initcall(fn) module_init(fn)
postcore_initcall_sync  macro  include/linux/init.h  200  #define postcore_initcall_sync(fn) __define_initcall(fn,2s)
arch_initcall  macro  include/linux/init.h  287  #define arch_initcall(fn) module_init(fn)
arch_initcall_sync  macro  include/linux/init.h  202  #define arch_initcall_sync(fn) __define_initcall(fn,3s)
subsys_initcall  macro  include/linux/init.h  288  #define subsys_initcall(fn) module_init(fn)
subsys_initcall_sync  macro  include/linux/init.h  204  #define subsys_initcall_sync(fn) __define_initcall(fn,4s)
fs_initcall  macro  include/linux/init.h  289  #define fs_initcall(fn) module_init(fn)
fs_initcall_sync  macro  include/linux/init.h  206  #define fs_initcall_sync(fn) __define_initcall(fn,5s)
rootfs_initcall  macro  include/linux/init.h  207  #define rootfs_initcall(fn) __define_initcall(fn,rootfs)
device_initcall  macro  include/linux/init.h  290  #define device_initcall(fn) module_init(fn)
device_initcall_sync  macro  include/linux/init.h  209  #define device_initcall_sync(fn) __define_initcall(fn,6s)
late_initcall  macro  include/linux/init.h  291  #define late_initcall(fn) module_init(fn)
late_initcall_sync  macro  include/linux/init.h  211  #define late_initcall_sync(fn) __define_initcall(fn,7s)
__initcall  macro  include/linux/init.h  213  #define __initcall(fn) device_initcall(fn)
__exitcall  macro  include/linux/init.h  215  #define __exitcall(fn) static exitcall_t __exitcall_##fn __exit_call = fn
console_initcall  macro  include/linux/init.h  218  #define console_initcall(fn) static initcall_t __initcall_##fn __used __section(.con_initcall.init) = fn
security_initcall  macro  include/linux/init.h  293  #define security_initcall(fn) module_init(fn)
obs_kernel_param  struct  include/linux/init.h  226  struct obs_kernel_param { const char *str; int (*setup_func)(char *); int early; };
__setup_param  macro  include/linux/init.h  307  #define __setup_param(str,unique_id,fn)
__setup  macro  include/linux/init.h  308  #define __setup(str,func)
early_param  macro  include/linux/init.h  251  #define early_param(str,fn) __setup_param(str, fn, fn, 1)
parse_early_param  prototype  include/linux/init.h  255  void __init parse_early_param(void);
parse_early_options  prototype  include/linux/init.h  256  void __init parse_early_options(char *cmdline);
module_init  macro  include/linux/init.h  296  #define module_init(initfn) static inline initcall_t __inittest(void) { return initfn; } int init_module(void) __attribute__((alias(#initfn)));
module_exit  macro  include/linux/init.h  302  #define module_exit(exitfn) static inline exitcall_t __exittest(void) { return exitfn; } void cleanup_module(void) __attribute__((alias(#exitfn)));
__nosavedata  macro  include/linux/init.h  312  #define __nosavedata __section(.data..nosave)
__init_or_module  macro  include/linux/init.h  324  #define __init_or_module __init
__initdata_or_module  macro  include/linux/init.h  325  #define __initdata_or_module __initdata
__initconst_or_module  macro  include/linux/init.h  326  #define __initconst_or_module __initconst
__INIT_OR_MODULE  macro  include/linux/init.h  327  #define __INIT_OR_MODULE __INIT
__INITDATA_OR_MODULE  macro  include/linux/init.h  328  #define __INITDATA_OR_MODULE __INITDATA
__INITRODATA_OR_MODULE  macro  include/linux/init.h  329  #define __INITRODATA_OR_MODULE __INITRODATA
__exit_p  macro  include/linux/init.h  335  #define __exit_p(x) NULL
_LINUX_IOPORT_H  macro  include/linux/ioport.h  9  #define _LINUX_IOPORT_H
resource  struct  include/linux/ioport.h  18  struct resource { resource_size_t start; resource_size_t end; const char *name; unsigned long flags; struct resource *parent, *sibling, *child; };
IORESOURCE_BITS  macro  include/linux/ioport.h  29  #define IORESOURCE_BITS 0x000000ff
IORESOURCE_TYPE_BITS  macro  include/linux/ioport.h  31  #define IORESOURCE_TYPE_BITS 0x00001f00
IORESOURCE_IO  macro  include/linux/ioport.h  32  #define IORESOURCE_IO 0x00000100
IORESOURCE_MEM  macro  include/linux/ioport.h  33  #define IORESOURCE_MEM 0x00000200
IORESOURCE_REG  macro  include/linux/ioport.h  34  #define IORESOURCE_REG 0x00000300
IORESOURCE_IRQ  macro  include/linux/ioport.h  35  #define IORESOURCE_IRQ 0x00000400
IORESOURCE_DMA  macro  include/linux/ioport.h  36  #define IORESOURCE_DMA 0x00000800
IORESOURCE_BUS  macro  include/linux/ioport.h  37  #define IORESOURCE_BUS 0x00001000
IORESOURCE_PREFETCH  macro  include/linux/ioport.h  39  #define IORESOURCE_PREFETCH 0x00002000
IORESOURCE_READONLY  macro  include/linux/ioport.h  40  #define IORESOURCE_READONLY 0x00004000
IORESOURCE_CACHEABLE  macro  include/linux/ioport.h  41  #define IORESOURCE_CACHEABLE 0x00008000
IORESOURCE_RANGELENGTH  macro  include/linux/ioport.h  42  #define IORESOURCE_RANGELENGTH 0x00010000
IORESOURCE_SHADOWABLE  macro  include/linux/ioport.h  43  #define IORESOURCE_SHADOWABLE 0x00020000
IORESOURCE_SIZEALIGN  macro  include/linux/ioport.h  45  #define IORESOURCE_SIZEALIGN 0x00040000
IORESOURCE_STARTALIGN  macro  include/linux/ioport.h  46  #define IORESOURCE_STARTALIGN 0x00080000
IORESOURCE_MEM_64  macro  include/linux/ioport.h  48  #define IORESOURCE_MEM_64 0x00100000
IORESOURCE_WINDOW  macro  include/linux/ioport.h  49  #define IORESOURCE_WINDOW 0x00200000
IORESOURCE_MUXED  macro  include/linux/ioport.h  50  #define IORESOURCE_MUXED 0x00400000
IORESOURCE_EXCLUSIVE  macro  include/linux/ioport.h  52  #define IORESOURCE_EXCLUSIVE 0x08000000
IORESOURCE_DISABLED  macro  include/linux/ioport.h  53  #define IORESOURCE_DISABLED 0x10000000
IORESOURCE_UNSET  macro  include/linux/ioport.h  54  #define IORESOURCE_UNSET 0x20000000
IORESOURCE_AUTO  macro  include/linux/ioport.h  55  #define IORESOURCE_AUTO 0x40000000
IORESOURCE_BUSY  macro  include/linux/ioport.h  56  #define IORESOURCE_BUSY 0x80000000
IORESOURCE_IRQ_HIGHEDGE  macro  include/linux/ioport.h  59  #define IORESOURCE_IRQ_HIGHEDGE (1<<0)
IORESOURCE_IRQ_LOWEDGE  macro  include/linux/ioport.h  60  #define IORESOURCE_IRQ_LOWEDGE (1<<1)
IORESOURCE_IRQ_HIGHLEVEL  macro  include/linux/ioport.h  61  #define IORESOURCE_IRQ_HIGHLEVEL (1<<2)
IORESOURCE_IRQ_LOWLEVEL  macro  include/linux/ioport.h  62  #define IORESOURCE_IRQ_LOWLEVEL (1<<3)
IORESOURCE_IRQ_SHAREABLE  macro  include/linux/ioport.h  63  #define IORESOURCE_IRQ_SHAREABLE (1<<4)
IORESOURCE_IRQ_OPTIONAL  macro  include/linux/ioport.h  64  #define IORESOURCE_IRQ_OPTIONAL (1<<5)
IORESOURCE_DMA_TYPE_MASK  macro  include/linux/ioport.h  67  #define IORESOURCE_DMA_TYPE_MASK (3<<0)
IORESOURCE_DMA_8BIT  macro  include/linux/ioport.h  68  #define IORESOURCE_DMA_8BIT (0<<0)
IORESOURCE_DMA_8AND16BIT  macro  include/linux/ioport.h  69  #define IORESOURCE_DMA_8AND16BIT (1<<0)
IORESOURCE_DMA_16BIT  macro  include/linux/ioport.h  70  #define IORESOURCE_DMA_16BIT (2<<0)
IORESOURCE_DMA_MASTER  macro  include/linux/ioport.h  72  #define IORESOURCE_DMA_MASTER (1<<2)
IORESOURCE_DMA_BYTE  macro  include/linux/ioport.h  73  #define IORESOURCE_DMA_BYTE (1<<3)
IORESOURCE_DMA_WORD  macro  include/linux/ioport.h  74  #define IORESOURCE_DMA_WORD (1<<4)
IORESOURCE_DMA_SPEED_MASK  macro  include/linux/ioport.h  76  #define IORESOURCE_DMA_SPEED_MASK (3<<6)
IORESOURCE_DMA_COMPATIBLE  macro  include/linux/ioport.h  77  #define IORESOURCE_DMA_COMPATIBLE (0<<6)
IORESOURCE_DMA_TYPEA  macro  include/linux/ioport.h  78  #define IORESOURCE_DMA_TYPEA (1<<6)
IORESOURCE_DMA_TYPEB  macro  include/linux/ioport.h  79  #define IORESOURCE_DMA_TYPEB (2<<6)
IORESOURCE_DMA_TYPEF  macro  include/linux/ioport.h  80  #define IORESOURCE_DMA_TYPEF (3<<6)
IORESOURCE_MEM_WRITEABLE  macro  include/linux/ioport.h  83  #define IORESOURCE_MEM_WRITEABLE (1<<0)
IORESOURCE_MEM_CACHEABLE  macro  include/linux/ioport.h  84  #define IORESOURCE_MEM_CACHEABLE (1<<1)
IORESOURCE_MEM_RANGELENGTH  macro  include/linux/ioport.h  85  #define IORESOURCE_MEM_RANGELENGTH (1<<2)
IORESOURCE_MEM_TYPE_MASK  macro  include/linux/ioport.h  86  #define IORESOURCE_MEM_TYPE_MASK (3<<3)
IORESOURCE_MEM_8BIT  macro  include/linux/ioport.h  87  #define IORESOURCE_MEM_8BIT (0<<3)
IORESOURCE_MEM_16BIT  macro  include/linux/ioport.h  88  #define IORESOURCE_MEM_16BIT (1<<3)
IORESOURCE_MEM_8AND16BIT  macro  include/linux/ioport.h  89  #define IORESOURCE_MEM_8AND16BIT (2<<3)
IORESOURCE_MEM_32BIT  macro  include/linux/ioport.h  90  #define IORESOURCE_MEM_32BIT (3<<3)
IORESOURCE_MEM_SHADOWABLE  macro  include/linux/ioport.h  91  #define IORESOURCE_MEM_SHADOWABLE (1<<5)
IORESOURCE_MEM_EXPANSIONROM  macro  include/linux/ioport.h  92  #define IORESOURCE_MEM_EXPANSIONROM (1<<6)
IORESOURCE_IO_16BIT_ADDR  macro  include/linux/ioport.h  95  #define IORESOURCE_IO_16BIT_ADDR (1<<0)
IORESOURCE_IO_FIXED  macro  include/linux/ioport.h  96  #define IORESOURCE_IO_FIXED (1<<1)
IORESOURCE_ROM_ENABLE  macro  include/linux/ioport.h  99  #define IORESOURCE_ROM_ENABLE (1<<0)
IORESOURCE_ROM_SHADOW  macro  include/linux/ioport.h  100  #define IORESOURCE_ROM_SHADOW (1<<1)
IORESOURCE_ROM_COPY  macro  include/linux/ioport.h  101  #define IORESOURCE_ROM_COPY (1<<2)
IORESOURCE_ROM_BIOS_COPY  macro  include/linux/ioport.h  102  #define IORESOURCE_ROM_BIOS_COPY (1<<3)
IORESOURCE_PCI_FIXED  macro  include/linux/ioport.h  105  #define IORESOURCE_PCI_FIXED (1<<4)
DEFINE_RES_NAMED  macro  include/linux/ioport.h  109  #define DEFINE_RES_NAMED(_start,_size,_name,_flags) { .start = (_start), .end = (_start) + (_size) - 1, .name = (_name), .flags = (_flags), }
DEFINE_RES_IO_NAMED  macro  include/linux/ioport.h  117  #define DEFINE_RES_IO_NAMED(_start,_size,_name) DEFINE_RES_NAMED((_start), (_size), (_name), IORESOURCE_IO)
DEFINE_RES_IO  macro  include/linux/ioport.h  119  #define DEFINE_RES_IO(_start,_size) DEFINE_RES_IO_NAMED((_start), (_size), NULL)
DEFINE_RES_MEM_NAMED  macro  include/linux/ioport.h  122  #define DEFINE_RES_MEM_NAMED(_start,_size,_name) DEFINE_RES_NAMED((_start), (_size), (_name), IORESOURCE_MEM)
DEFINE_RES_MEM  macro  include/linux/ioport.h  124  #define DEFINE_RES_MEM(_start,_size) DEFINE_RES_MEM_NAMED((_start), (_size), NULL)
DEFINE_RES_IRQ_NAMED  macro  include/linux/ioport.h  127  #define DEFINE_RES_IRQ_NAMED(_irq,_name) DEFINE_RES_NAMED((_irq), 1, (_name), IORESOURCE_IRQ)
DEFINE_RES_IRQ  macro  include/linux/ioport.h  129  #define DEFINE_RES_IRQ(_irq) DEFINE_RES_IRQ_NAMED((_irq), NULL)
DEFINE_RES_DMA_NAMED  macro  include/linux/ioport.h  132  #define DEFINE_RES_DMA_NAMED(_dma,_name) DEFINE_RES_NAMED((_dma), 1, (_name), IORESOURCE_DMA)
DEFINE_RES_DMA  macro  include/linux/ioport.h  134  #define DEFINE_RES_DMA(_dma) DEFINE_RES_DMA_NAMED((_dma), NULL)
request_resource_conflict  prototype  include/linux/ioport.h  141  extern struct resource *request_resource_conflict(struct resource *root,struct resource *new);
request_resource  prototype  include/linux/ioport.h  142  extern int request_resource(struct resource *root,struct resource *new);
release_resource  prototype  include/linux/ioport.h  143  extern int release_resource(struct resource *new);
release_child_resources  prototype  include/linux/ioport.h  144  void release_child_resources(struct resource *new);
reserve_region_with_split  prototype  include/linux/ioport.h  145  extern void reserve_region_with_split(struct resource *root,resource_size_t start, resource_size_t end,const char *name);
insert_resource_conflict  prototype  include/linux/ioport.h  148  extern struct resource *insert_resource_conflict(struct resource *parent,struct resource *new);
insert_resource  prototype  include/linux/ioport.h  149  extern int insert_resource(struct resource *parent,struct resource *new);
insert_resource_expand_to_fit  prototype  include/linux/ioport.h  150  extern void insert_resource_expand_to_fit(struct resource *root,struct resource *new);
arch_remove_reservations  prototype  include/linux/ioport.h  151  extern void arch_remove_reservations(struct resource *avail);
allocate_resource  prototype  include/linux/ioport.h  152  extern int allocate_resource(struct resource *root,struct resource *new,resource_size_t size, resource_size_t min,resource_size_t max, resource_size_t align,resource_size_t (*alignf)(void *,const struct resource *,resource_size_t,resource_size_t),void *alignf_data);
lookup_resource  prototype  include/linux/ioport.h  160  struct resource *lookup_resource(struct resource *root,resource_size_t start);
adjust_resource  prototype  include/linux/ioport.h  161  int adjust_resource(struct resource *res,resource_size_t start,resource_size_t size);
resource_alignment  prototype  include/linux/ioport.h  163  resource_size_t resource_alignment(struct resource *res);
resource_size  function  include/linux/ioport.h  164  static inline resource_size_t resource_size(const struct resource *res)
resource_type  function  include/linux/ioport.h  168  static inline unsigned long resource_type(const struct resource *res)
request_region  macro  include/linux/ioport.h  174  #define request_region(start,n,name) __request_region(&ioport_resource,(start),(n),(name),0)
request_muxed_region  macro  include/linux/ioport.h  175  #define request_muxed_region(start,n,name) __request_region(&ioport_resource,(start),(n),(name),IORESOURCE_MUXED)
__request_mem_region  macro  include/linux/ioport.h  176  #define __request_mem_region(start,n,name,excl) __request_region(&iomem_resource,(start),(n),(name),excl)
request_mem_region  macro  include/linux/ioport.h  177  #define request_mem_region(start,n,name) __request_region(&iomem_resource,(start),(n),(name),0)
request_mem_region_exclusive  macro  include/linux/ioport.h  178  #define request_mem_region_exclusive(start,n,name) __request_region(&iomem_resource, (start), (n), (name), IORESOURCE_EXCLUSIVE)
rename_region  macro  include/linux/ioport.h  180  #define rename_region(region,newname) do { (region)->name = (newname); } while (0)
__request_region  prototype  include/linux/ioport.h  182  extern struct resource * __request_region(struct resource *,resource_size_t start,resource_size_t n,const char *name, int flags);
release_region  macro  include/linux/ioport.h  188  #define release_region(start,n) __release_region(&ioport_resource,(start),(n))
check_mem_region  macro  include/linux/ioport.h  189  #define check_mem_region(start,n) __check_region(&iomem_resource,(start),(n))
release_mem_region  macro  include/linux/ioport.h  190  #define release_mem_region(start,n) __release_region(&iomem_resource,(start),(n))
__check_region  prototype  include/linux/ioport.h  192  extern int __check_region(struct resource *,resource_size_t,resource_size_t);
__release_region  prototype  include/linux/ioport.h  193  extern void __release_region(struct resource *,resource_size_t,resource_size_t);
check_region  function  include/linux/ioport.h  196  static inline int __deprecated check_region(resource_size_t s,resource_size_t n)
devm_request_region  macro  include/linux/ioport.h  204  #define devm_request_region(dev,start,n,name) __devm_request_region(dev, &ioport_resource, (start), (n), (name))
devm_request_mem_region  macro  include/linux/ioport.h  206  #define devm_request_mem_region(dev,start,n,name) __devm_request_region(dev, &iomem_resource, (start), (n), (name))
__devm_request_region  prototype  include/linux/ioport.h  209  extern struct resource * __devm_request_region(struct device *dev,struct resource *parent, resource_size_t start,resource_size_t n, const char *name);
devm_release_region  macro  include/linux/ioport.h  213  #define devm_release_region(dev,start,n) __devm_release_region(dev, &ioport_resource, (start), (n))
devm_release_mem_region  macro  include/linux/ioport.h  215  #define devm_release_mem_region(dev,start,n) __devm_release_region(dev, &iomem_resource, (start), (n))
__devm_release_region  prototype  include/linux/ioport.h  218  extern void __devm_release_region(struct device *dev,struct resource *parent,resource_size_t start, resource_size_t n);
iomem_map_sanity_check  prototype  include/linux/ioport.h  220  extern int iomem_map_sanity_check(resource_size_t addr,unsigned long size);
iomem_is_exclusive  prototype  include/linux/ioport.h  221  extern int iomem_is_exclusive(u64 addr);
walk_system_ram_range  prototype  include/linux/ioport.h  224  walk_system_ram_range(unsigned long start_pfn,unsigned long nr_pages,void *arg, int (*func)(unsigned long, unsigned long, void *));
resource_overlaps  function  include/linux/ioport.h  228  static inline bool resource_overlaps(struct resource *r1,struct resource *r2)
_LINUX_ERRNO_H  macro  include/linux/errno.h  2  #define _LINUX_ERRNO_H
ERESTARTSYS  macro  include/linux/errno.h  13  #define ERESTARTSYS 512
ERESTARTNOINTR  macro  include/linux/errno.h  14  #define ERESTARTNOINTR 513
ERESTARTNOHAND  macro  include/linux/errno.h  15  #define ERESTARTNOHAND 514
ENOIOCTLCMD  macro  include/linux/errno.h  16  #define ENOIOCTLCMD 515
ERESTART_RESTARTBLOCK  macro  include/linux/errno.h  17  #define ERESTART_RESTARTBLOCK 516
EPROBE_DEFER  macro  include/linux/errno.h  18  #define EPROBE_DEFER 517
EOPENSTALE  macro  include/linux/errno.h  19  #define EOPENSTALE 518
EBADHANDLE  macro  include/linux/errno.h  22  #define EBADHANDLE 521
ENOTSYNC  macro  include/linux/errno.h  23  #define ENOTSYNC 522
EBADCOOKIE  macro  include/linux/errno.h  24  #define EBADCOOKIE 523
ENOTSUPP  macro  include/linux/errno.h  25  #define ENOTSUPP 524
ETOOSMALL  macro  include/linux/errno.h  26  #define ETOOSMALL 525
ESERVERFAULT  macro  include/linux/errno.h  27  #define ESERVERFAULT 526
EBADTYPE  macro  include/linux/errno.h  28  #define EBADTYPE 527
EJUKEBOX  macro  include/linux/errno.h  29  #define EJUKEBOX 528
EIOCBQUEUED  macro  include/linux/errno.h  30  #define EIOCBQUEUED 529
EIOCBRETRY  macro  include/linux/errno.h  31  #define EIOCBRETRY 530
_DEVICE_H_  macro  include/linux/device.h  14  #define _DEVICE_H_
bus_attribute  struct  include/linux/device.h  41  struct bus_attribute { struct attribute attr; ssize_t (*show)(struct bus_type *bus, char *buf); ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count); };
BUS_ATTR  macro  include/linux/device.h  47  #define BUS_ATTR(_name,_mode,_show,_store) struct bus_attribute bus_attr_##_name = __ATTR(_name, _mode, _show, _store)
bus_create_file  prototype  include/linux/device.h  50  extern int __must_check bus_create_file(struct bus_type *,struct bus_attribute *);
bus_remove_file  prototype  include/linux/device.h  52  extern void bus_remove_file(struct bus_type *,struct bus_attribute *);
bus_type  struct  include/linux/device.h  91  struct bus_type { const char *name; const char *dev_name; struct device *dev_root; struct bus_attribute *bus_attrs; struct device_attribute *dev_attrs; struct driver_attribute *drv_attrs; int (*match)(struct device *dev, struct device_driver *drv); int (*uevent)(struct device *dev, struct kobj_uevent_env *env); int (*probe)(struct device *dev); int (*remove)(struct device *dev); void (*shutdown)(struct device *dev); int (*suspend)(struct device *dev, pm_message_t state); int (*resume)(struct device *dev); const struct dev_pm_ops *pm; struct iommu_ops *iommu_ops; struct subsys_private *p; };
bus_register  macro  include/linux/device.h  117  #define bus_register(subsys) ({ static struct lock_class_key __key; __bus_register(subsys, &__key); })
__bus_register  prototype  include/linux/device.h  122  extern int __must_check __bus_register(struct bus_type *bus,struct lock_class_key *key);
bus_unregister  prototype  include/linux/device.h  124  extern void bus_unregister(struct bus_type *bus);
bus_rescan_devices  prototype  include/linux/device.h  126  extern int __must_check bus_rescan_devices(struct bus_type *bus);
subsys_dev_iter  struct  include/linux/device.h  129  struct subsys_dev_iter { struct klist_iter ki; const struct device_type *type; };
subsys_dev_iter_init  prototype  include/linux/device.h  133  void subsys_dev_iter_init(struct subsys_dev_iter *iter,struct bus_type *subsys,struct device *start,const struct device_type *type);
subsys_dev_iter_next  prototype  include/linux/device.h  137  struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
subsys_dev_iter_exit  prototype  include/linux/device.h  138  void subsys_dev_iter_exit(struct subsys_dev_iter *iter);
bus_for_each_dev  prototype  include/linux/device.h  140  int bus_for_each_dev(struct bus_type *bus,struct device *start,void *data,int (*fn)(struct device *dev, void *data));
bus_find_device  prototype  include/linux/device.h  142  struct device *bus_find_device(struct bus_type *bus,struct device *start,void *data,int (*match)(struct device *dev, void *data));
bus_find_device_by_name  prototype  include/linux/device.h  145  struct device *bus_find_device_by_name(struct bus_type *bus,struct device *start,const char *name);
subsys_find_device_by_id  prototype  include/linux/device.h  148  struct device *subsys_find_device_by_id(struct bus_type *bus,unsigned int id,struct device *hint);
bus_for_each_drv  prototype  include/linux/device.h  150  int bus_for_each_drv(struct bus_type *bus,struct device_driver *start,void *data, int (*fn)(struct device_driver *, void *));
bus_sort_breadthfirst  prototype  include/linux/device.h  152  void bus_sort_breadthfirst(struct bus_type *bus,int (*compare)(const struct device *a,const struct device *b));
bus_register_notifier  prototype  include/linux/device.h  163  extern int bus_register_notifier(struct bus_type *bus,struct notifier_block *nb);
bus_unregister_notifier  prototype  include/linux/device.h  165  extern int bus_unregister_notifier(struct bus_type *bus,struct notifier_block *nb);
BUS_NOTIFY_ADD_DEVICE  macro  include/linux/device.h  172  #define BUS_NOTIFY_ADD_DEVICE 0x00000001
BUS_NOTIFY_DEL_DEVICE  macro  include/linux/device.h  173  #define BUS_NOTIFY_DEL_DEVICE 0x00000002
BUS_NOTIFY_BIND_DRIVER  macro  include/linux/device.h  174  #define BUS_NOTIFY_BIND_DRIVER 0x00000003
BUS_NOTIFY_BOUND_DRIVER  macro  include/linux/device.h  176  #define BUS_NOTIFY_BOUND_DRIVER 0x00000004
BUS_NOTIFY_UNBIND_DRIVER  macro  include/linux/device.h  177  #define BUS_NOTIFY_UNBIND_DRIVER 0x00000005
BUS_NOTIFY_UNBOUND_DRIVER  macro  include/linux/device.h  179  #define BUS_NOTIFY_UNBOUND_DRIVER 0x00000006
bus_get_kset  prototype  include/linux/device.h  182  extern struct kset *bus_get_kset(struct bus_type *bus);
bus_get_device_klist  prototype  include/linux/device.h  183  extern struct klist *bus_get_device_klist(struct bus_type *bus);
device_driver  struct  include/linux/device.h  217  struct device_driver { const char *name; struct bus_type *bus; struct module *owner; const char *mod_name; bool suppress_bind_attrs; const struct of_device_id *of_match_table; const struct acpi_device_id *acpi_match_table; int (*probe) (struct device *dev); int (*remove) (struct device *dev); void (*shutdown) (struct device *dev); int (*suspend) (struct device *dev, pm_message_t state); int (*resume) (struct device *dev); const struct attribute_group **groups; const struct dev_pm_ops *pm; struct driver_private *p; };
driver_register  prototype  include/linux/device.h  242  extern int __must_check driver_register(struct device_driver *drv);
driver_unregister  prototype  include/linux/device.h  243  extern void driver_unregister(struct device_driver *drv);
driver_find  prototype  include/linux/device.h  245  extern struct device_driver *driver_find(const char *name,struct bus_type *bus);
driver_probe_done  prototype  include/linux/device.h  247  extern int driver_probe_done(void);
wait_for_device_probe  prototype  include/linux/device.h  248  extern void wait_for_device_probe(void);
driver_attribute  struct  include/linux/device.h  253  struct driver_attribute { struct attribute attr; ssize_t (*show)(struct device_driver *driver, char *buf); ssize_t (*store)(struct device_driver *driver, const char *buf,size_t count); };
DRIVER_ATTR  macro  include/linux/device.h  260  #define DRIVER_ATTR(_name,_mode,_show,_store) struct driver_attribute driver_attr_##_name = __ATTR(_name, _mode, _show, _store)
driver_create_file  prototype  include/linux/device.h  264  extern int __must_check driver_create_file(struct device_driver *driver,const struct driver_attribute *attr);
driver_remove_file  prototype  include/linux/device.h  266  extern void driver_remove_file(struct device_driver *driver,const struct driver_attribute *attr);
driver_for_each_device  prototype  include/linux/device.h  269  extern int __must_check driver_for_each_device(struct device_driver *drv,struct device *start,void *data,int (*fn)(struct device *dev,void *));
driver_find_device  prototype  include/linux/device.h  274  struct device *driver_find_device(struct device_driver *drv,struct device *start, void *data,int (*match)(struct device *dev, void *data));
subsys_interface  struct  include/linux/device.h  291  struct subsys_interface { const char *name; struct bus_type *subsys; struct list_head node; int (*add_dev)(struct device *dev, struct subsys_interface *sif); int (*remove_dev)(struct device *dev, struct subsys_interface *sif); };
subsys_interface_register  prototype  include/linux/device.h  299  int subsys_interface_register(struct subsys_interface *sif);
subsys_interface_unregister  prototype  include/linux/device.h  300  void subsys_interface_unregister(struct subsys_interface *sif);
subsys_system_register  prototype  include/linux/device.h  302  int subsys_system_register(struct bus_type *subsys,const struct attribute_group **groups);
class_dev_iter  struct  include/linux/device.h  360  struct class_dev_iter { struct klist_iter ki; const struct device_type *type; };
__class_register  prototype  include/linux/device.h  367  extern int __must_check __class_register(struct class *class,struct lock_class_key *key);
class_unregister  prototype  include/linux/device.h  369  extern void class_unregister(struct class *class);
class_register  macro  include/linux/device.h  373  #define class_register(class) ({ static struct lock_class_key __key; __class_register(class, &__key); })
class_compat_register  prototype  include/linux/device.h  380  struct class_compat *class_compat_register(const char *name);
class_compat_unregister  prototype  include/linux/device.h  381  void class_compat_unregister(struct class_compat *cls);
class_compat_create_link  prototype  include/linux/device.h  382  int class_compat_create_link(struct class_compat *cls,struct device *dev,struct device *device_link);
class_compat_remove_link  prototype  include/linux/device.h  384  void class_compat_remove_link(struct class_compat *cls,struct device *dev,struct device *device_link);
class_dev_iter_init  prototype  include/linux/device.h  387  extern void class_dev_iter_init(struct class_dev_iter *iter,struct class *class,struct device *start,const struct device_type *type);
class_dev_iter_next  prototype  include/linux/device.h  391  extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
class_dev_iter_exit  prototype  include/linux/device.h  392  extern void class_dev_iter_exit(struct class_dev_iter *iter);
class_for_each_device  prototype  include/linux/device.h  394  extern int class_for_each_device(struct class *class,struct device *start,void *data,int (*fn)(struct device *dev, void *data));
class_find_device  prototype  include/linux/device.h  397  extern struct device *class_find_device(struct class *class,struct device *start, void *data,int (*match)(struct device *, void *));
class_attribute  struct  include/linux/device.h  401  struct class_attribute { struct attribute attr; ssize_t (*show)(struct class *class, struct class_attribute *attr,char *buf); ssize_t (*store)(struct class *class, struct class_attribute *attr,const char *buf, size_t count); };
CLASS_ATTR  macro  include/linux/device.h  411  #define CLASS_ATTR(_name,_mode,_show,_store) struct class_attribute class_attr_##_name = __ATTR(_name, _mode, _show, _store)
class_create_file  prototype  include/linux/device.h  414  extern int __must_check class_create_file(struct class *class,const struct class_attribute *attr);
class_remove_file  prototype  include/linux/device.h  416  extern void class_remove_file(struct class *class,const struct class_attribute *attr);
class_attribute_string  struct  include/linux/device.h  421  struct class_attribute_string { struct class_attribute attr; char *str; };
_CLASS_ATTR_STRING  macro  include/linux/device.h  427  #define _CLASS_ATTR_STRING(_name,_mode,_str) { __ATTR(_name, _mode, show_class_attr_string, NULL), _str }
CLASS_ATTR_STRING  macro  include/linux/device.h  429  #define CLASS_ATTR_STRING(_name,_mode,_str) struct class_attribute_string class_attr_##_name = _CLASS_ATTR_STRING(_name, _mode, _str)
show_class_attr_string  prototype  include/linux/device.h  433  extern ssize_t show_class_attr_string(struct class *class,struct class_attribute *attr,char *buf);
class_interface  struct  include/linux/device.h  436  struct class_interface { struct list_head node; int (*add_dev) (struct device *, struct class_interface *); void (*remove_dev) (struct device *, struct class_interface *); };
class_interface_register  prototype  include/linux/device.h  444  extern int __must_check class_interface_register(struct class_interface *);
class_interface_unregister  prototype  include/linux/device.h  445  extern void class_interface_unregister(struct class_interface *);
__class_create  prototype  include/linux/device.h  447  extern struct class * __must_check __class_create(struct module *owner,const char *name,struct lock_class_key *key);
class_destroy  prototype  include/linux/device.h  450  extern void class_destroy(struct class *cls);
class_create  macro  include/linux/device.h  454  #define class_create(owner,name) ({ static struct lock_class_key __key; __class_create(owner, name, &__key); })
device_type  struct  include/linux/device.h  469  struct device_type { const char *name; const struct attribute_group **groups; int (*uevent)(struct device *dev, struct kobj_uevent_env *env); char *(*devnode)(struct device *dev, umode_t *mode); void (*release)(struct device *dev); const struct dev_pm_ops *pm; };
device_attribute  struct  include/linux/device.h  480  struct device_attribute { struct attribute attr; ssize_t (*show)(struct device *dev, struct device_attribute *attr,char *buf); ssize_t (*store)(struct device *dev, struct device_attribute *attr,const char *buf, size_t count); };
dev_ext_attribute  struct  include/linux/device.h  488  struct dev_ext_attribute { struct device_attribute attr; void *var; };
device_show_ulong  prototype  include/linux/device.h  493  ssize_t device_show_ulong(struct device *dev,struct device_attribute *attr,char *buf);
device_store_ulong  prototype  include/linux/device.h  495  ssize_t device_store_ulong(struct device *dev,struct device_attribute *attr,const char *buf, size_t count);
device_show_int  prototype  include/linux/device.h  497  ssize_t device_show_int(struct device *dev,struct device_attribute *attr,char *buf);
device_store_int  prototype  include/linux/device.h  499  ssize_t device_store_int(struct device *dev,struct device_attribute *attr,const char *buf, size_t count);
device_show_bool  prototype  include/linux/device.h  501  ssize_t device_show_bool(struct device *dev,struct device_attribute *attr,char *buf);
device_store_bool  prototype  include/linux/device.h  503  ssize_t device_store_bool(struct device *dev,struct device_attribute *attr,const char *buf, size_t count);
DEVICE_ATTR  macro  include/linux/device.h  506  #define DEVICE_ATTR(_name,_mode,_show,_store) struct device_attribute dev_attr_##_name = __ATTR(_name, _mode, _show, _store)
DEVICE_ULONG_ATTR  macro  include/linux/device.h  508  #define DEVICE_ULONG_ATTR(_name,_mode,_var) struct dev_ext_attribute dev_attr_##_name = { __ATTR(_name, _mode, device_show_ulong, device_store_ulong), &(_var) }
DEVICE_INT_ATTR  macro  include/linux/device.h  511  #define DEVICE_INT_ATTR(_name,_mode,_var) struct dev_ext_attribute dev_attr_##_name = { __ATTR(_name, _mode, device_show_int, device_store_int), &(_var) }
DEVICE_BOOL_ATTR  macro  include/linux/device.h  514  #define DEVICE_BOOL_ATTR(_name,_mode,_var) struct dev_ext_attribute dev_attr_##_name = { __ATTR(_name, _mode, device_show_bool, device_store_bool), &(_var) }
DEVICE_ATTR_IGNORE_LOCKDEP  macro  include/linux/device.h  517  #define DEVICE_ATTR_IGNORE_LOCKDEP(_name,_mode,_show,_store) struct device_attribute dev_attr_##_name = __ATTR_IGNORE_LOCKDEP(_name, _mode, _show, _store)
device_create_file  prototype  include/linux/device.h  521  extern int device_create_file(struct device *device,const struct device_attribute *entry);
device_remove_file  prototype  include/linux/device.h  523  extern void device_remove_file(struct device *dev,const struct device_attribute *attr);
device_create_bin_file  prototype  include/linux/device.h  525  extern int __must_check device_create_bin_file(struct device *dev,const struct bin_attribute *attr);
device_remove_bin_file  prototype  include/linux/device.h  527  extern void device_remove_bin_file(struct device *dev,const struct bin_attribute *attr);
device_schedule_callback_owner  prototype  include/linux/device.h  529  extern int device_schedule_callback_owner(struct device *dev,void (*func)(struct device *dev), struct module *owner);
device_schedule_callback  macro  include/linux/device.h  533  #define device_schedule_callback(dev,func) device_schedule_callback_owner(dev, func, THIS_MODULE)
__devres_alloc  prototype  include/linux/device.h  541  extern void *__devres_alloc(dr_release_t release,size_t size,gfp_t gfp,const char *name);
devres_alloc  prototype  include/linux/device.h  546  extern void *devres_alloc(dr_release_t release,size_t size,gfp_t gfp);
devres_for_each_res  prototype  include/linux/device.h  548  extern void devres_for_each_res(struct device *dev,dr_release_t release,dr_match_t match, void *match_data,void (*fn)(struct device *, void *, void *),void *data);
devres_free  prototype  include/linux/device.h  552  extern void devres_free(void *res);
devres_add  prototype  include/linux/device.h  553  extern void devres_add(struct device *dev,void *res);
devres_find  prototype  include/linux/device.h  554  extern void *devres_find(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_get  prototype  include/linux/device.h  556  extern void *devres_get(struct device *dev,void *new_res,dr_match_t match, void *match_data);
devres_remove  prototype  include/linux/device.h  558  extern void *devres_remove(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_destroy  prototype  include/linux/device.h  560  extern int devres_destroy(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_release  prototype  include/linux/device.h  562  extern int devres_release(struct device *dev,dr_release_t release,dr_match_t match, void *match_data);
devres_open_group  prototype  include/linux/device.h  566  extern void * __must_check devres_open_group(struct device *dev,void *id,gfp_t gfp);
devres_close_group  prototype  include/linux/device.h  568  extern void devres_close_group(struct device *dev,void *id);
devres_remove_group  prototype  include/linux/device.h  569  extern void devres_remove_group(struct device *dev,void *id);
devres_release_group  prototype  include/linux/device.h  570  extern int devres_release_group(struct device *dev,void *id);
devm_kzalloc  prototype  include/linux/device.h  573  extern void *devm_kzalloc(struct device *dev,size_t size,gfp_t gfp);
devm_kfree  prototype  include/linux/device.h  574  extern void devm_kfree(struct device *dev,void *p);
devm_request_and_ioremap  prototype  include/linux/device.h  576  void __iomem *devm_request_and_ioremap(struct device *dev,struct resource *res);
device_dma_parameters  struct  include/linux/device.h  579  struct device_dma_parameters { unsigned int max_segment_size; unsigned long segment_boundary_mask; };
acpi_dev_node  struct  include/linux/device.h  588  struct acpi_dev_node { void *handle; };
device  struct  include/linux/device.h  654  struct device { struct device *parent; struct device_private *p; struct kobject kobj; const char *init_name; const struct device_type *type; struct mutex mutex; struct bus_type *bus; struct device_driver *driver; void *platform_data; struct dev_pm_info power; struct dev_pm_domain *pm_domain; int numa_node; u64 *dma_mask; u64 coherent_dma_mask; struct device_dma_parameters *dma_parms; struct list_head dma_pools; struct dma_coherent_mem *dma_mem; struct cma *cma_area; struct dev_archdata archdata; struct device_node *of_node; struct acpi_dev_node acpi_node; dev_t devt; u32 id; spinlock_t devres_lock; struct list_head devres_head; struct klist_node knode_class; const struct attribute_group **groups; void (*release)(struct device *dev); struct iommu_group *iommu_group; };
kobj_to_dev  function  include/linux/device.h  715  static inline struct device *kobj_to_dev(struct kobject *kobj)
ACPI_HANDLE  macro  include/linux/device.h  724  #define ACPI_HANDLE(dev) (NULL)
ACPI_HANDLE_SET  macro  include/linux/device.h  725  #define ACPI_HANDLE_SET(dev,_handle_) do { } while (0)
dev_name  function  include/linux/device.h  731  static inline const char *dev_name(const struct device *dev)
dev_set_name  prototype  include/linux/device.h  741  int dev_set_name(struct device *dev,const char *name,...);
dev_to_node  function  include/linux/device.h  753  static inline int dev_to_node(struct device *dev)
set_dev_node  function  include/linux/device.h  757  static inline void set_dev_node(struct device *dev,int node)
dev_to_psd  function  include/linux/device.h  762  static inline struct pm_subsys_data *dev_to_psd(struct device *dev)
dev_get_uevent_suppress  function  include/linux/device.h  767  static inline unsigned int dev_get_uevent_suppress(const struct device *dev)
dev_set_uevent_suppress  function  include/linux/device.h  772  static inline void dev_set_uevent_suppress(struct device *dev,int val)
device_is_registered  function  include/linux/device.h  777  static inline int device_is_registered(struct device *dev)
device_enable_async_suspend  function  include/linux/device.h  782  static inline void device_enable_async_suspend(struct device *dev)
device_disable_async_suspend  function  include/linux/device.h  788  static inline void device_disable_async_suspend(struct device *dev)
device_async_suspend_enabled  function  include/linux/device.h  794  static inline bool device_async_suspend_enabled(struct device *dev)
pm_suspend_ignore_children  function  include/linux/device.h  799  static inline void pm_suspend_ignore_children(struct device *dev,bool enable)
dev_pm_syscore_device  function  include/linux/device.h  804  static inline void dev_pm_syscore_device(struct device *dev,bool val)
device_lock  function  include/linux/device.h  811  static inline void device_lock(struct device *dev)
device_trylock  function  include/linux/device.h  816  static inline int device_trylock(struct device *dev)
device_unlock  function  include/linux/device.h  821  static inline void device_unlock(struct device *dev)
driver_init  prototype  include/linux/device.h  826  void driver_init(void);
device_register  prototype  include/linux/device.h  831  extern int __must_check device_register(struct device *dev);
device_unregister  prototype  include/linux/device.h  832  extern void device_unregister(struct device *dev);
device_initialize  prototype  include/linux/device.h  833  extern void device_initialize(struct device *dev);
device_add  prototype  include/linux/device.h  834  extern int __must_check device_add(struct device *dev);
device_del  prototype  include/linux/device.h  835  extern void device_del(struct device *dev);
device_for_each_child  prototype  include/linux/device.h  836  extern int device_for_each_child(struct device *dev,void *data,int (*fn)(struct device *dev, void *data));
device_find_child  prototype  include/linux/device.h  838  extern struct device *device_find_child(struct device *dev,void *data,int (*match)(struct device *dev, void *data));
device_rename  prototype  include/linux/device.h  840  extern int device_rename(struct device *dev,const char *new_name);
device_move  prototype  include/linux/device.h  841  extern int device_move(struct device *dev,struct device *new_parent,enum dpm_order dpm_order);
device_get_devnode  prototype  include/linux/device.h  843  extern const char *device_get_devnode(struct device *dev,umode_t *mode, const char **tmp);
dev_get_drvdata  prototype  include/linux/device.h  845  extern void *dev_get_drvdata(const struct device *dev);
dev_set_drvdata  prototype  include/linux/device.h  846  extern int dev_set_drvdata(struct device *dev,void *data);
__root_device_register  prototype  include/linux/device.h  851  extern struct device *__root_device_register(const char *name,struct module *owner);
root_device_register  macro  include/linux/device.h  858  #define root_device_register(name) __root_device_register(name, THIS_MODULE)
root_device_unregister  prototype  include/linux/device.h  861  extern void root_device_unregister(struct device *root);
dev_get_platdata  function  include/linux/device.h  863  static inline void *dev_get_platdata(const struct device *dev)
device_bind_driver  prototype  include/linux/device.h  872  extern int __must_check device_bind_driver(struct device *dev);
device_release_driver  prototype  include/linux/device.h  873  extern void device_release_driver(struct device *dev);
device_attach  prototype  include/linux/device.h  874  extern int __must_check device_attach(struct device *dev);
driver_attach  prototype  include/linux/device.h  875  extern int __must_check driver_attach(struct device_driver *drv);
device_reprobe  prototype  include/linux/device.h  876  extern int __must_check device_reprobe(struct device *dev);
device_create_vargs  prototype  include/linux/device.h  881  extern struct device *device_create_vargs(struct class *cls,struct device *parent,dev_t devt,void *drvdata,const char *fmt,va_list vargs);
device_create  prototype  include/linux/device.h  888  struct device *device_create(struct class *cls,struct device *parent,dev_t devt, void *drvdata,const char *fmt, ...);
device_destroy  prototype  include/linux/device.h  891  extern void device_destroy(struct class *cls,dev_t devt);
get_device  prototype  include/linux/device.h  908  extern struct device *get_device(struct device *dev);
put_device  prototype  include/linux/device.h  909  extern void put_device(struct device *dev);
devtmpfs_create_node  function  include/linux/device.h  916  static inline int devtmpfs_create_node(struct device *dev) { return 0; }
devtmpfs_delete_node  function  include/linux/device.h  917  static inline int devtmpfs_delete_node(struct device *dev) { return 0; }
devtmpfs_mount  function  include/linux/device.h  918  static inline int devtmpfs_mount(const char *mountpoint) { return 0; }
device_shutdown  prototype  include/linux/device.h  922  extern void device_shutdown(void);
dev_driver_string  prototype  include/linux/device.h  925  extern const char *dev_driver_string(const struct device *dev);
dev_vprintk_emit  function  include/linux/device.h  957  int dev_vprintk_emit(int level,const struct device *dev,const char *fmt, va_list args)
dev_printk_emit  function  include/linux/device.h  961  int dev_printk_emit(int level,const struct device *dev,const char *fmt,...)
dev_printk  function  include/linux/device.h  968  int dev_printk(const char *level,const struct device *dev,const char *fmt, ...)
dev_emerg  function  include/linux/device.h  973  int dev_emerg(const struct device *dev,const char *fmt,...)
dev_alert  function  include/linux/device.h  979  int dev_alert(const struct device *dev,const char *fmt,...)
dev_crit  function  include/linux/device.h  976  int dev_crit(const struct device *dev,const char *fmt,...)
dev_err  function  include/linux/device.h  982  int dev_err(const struct device *dev,const char *fmt,...)
dev_warn  function  include/linux/device.h  985  int dev_warn(const struct device *dev,const char *fmt,...)
dev_notice  function  include/linux/device.h  988  int dev_notice(const struct device *dev,const char *fmt,...)
_dev_info  function  include/linux/device.h  991  int _dev_info(const struct device *dev,const char *fmt,...)
__dev_printk  function  include/linux/device.h  964  static inline int __dev_printk(const char *level,const struct device *dev,struct va_format *vaf)
dev_info  macro  include/linux/device.h  1003  #define dev_info(dev,fmt,arg...) _dev_info(dev,fmt,##arg)
dev_dbg  macro  include/linux/device.h  1014  #define dev_dbg(dev,format,arg...) ({ if (0) dev_printk(KERN_DEBUG, dev, format, ##arg); 0; })
dev_level_ratelimited  macro  include/linux/device.h  1022  #define dev_level_ratelimited(dev_level,dev,fmt,...) do { static DEFINE_RATELIMIT_STATE(_rs, DEFAULT_RATELIMIT_INTERVAL, DEFAULT_RATELIMIT_BURST); if (__ratelimit(&_rs)) dev_level(dev, fmt, ##__VA_ARGS__); } while (0)
dev_emerg_ratelimited  macro  include/linux/device.h  1031  #define dev_emerg_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_emerg, dev, fmt, ##__VA_ARGS__)
dev_alert_ratelimited  macro  include/linux/device.h  1033  #define dev_alert_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_alert, dev, fmt, ##__VA_ARGS__)
dev_crit_ratelimited  macro  include/linux/device.h  1035  #define dev_crit_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_crit, dev, fmt, ##__VA_ARGS__)
dev_err_ratelimited  macro  include/linux/device.h  1037  #define dev_err_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_err, dev, fmt, ##__VA_ARGS__)
dev_warn_ratelimited  macro  include/linux/device.h  1039  #define dev_warn_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_warn, dev, fmt, ##__VA_ARGS__)
dev_notice_ratelimited  macro  include/linux/device.h  1041  #define dev_notice_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_notice, dev, fmt, ##__VA_ARGS__)
dev_info_ratelimited  macro  include/linux/device.h  1043  #define dev_info_ratelimited(dev,fmt,...) dev_level_ratelimited(dev_info, dev, fmt, ##__VA_ARGS__)
dev_dbg_ratelimited  macro  include/linux/device.h  1058  #define dev_dbg_ratelimited(dev,fmt,...) no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)
dev_vdbg  macro  include/linux/device.h  1065  #define dev_vdbg(dev,format,arg...) ({ if (0) dev_printk(KERN_DEBUG, dev, format, ##arg); 0; })
dev_WARN  macro  include/linux/device.h  1078  #define dev_WARN(dev,format,arg...) WARN(1, "Device: %s\n" format, dev_driver_string(dev), ## arg);
dev_WARN_ONCE  macro  include/linux/device.h  1081  #define dev_WARN_ONCE(dev,condition,format,arg...) WARN_ONCE(condition, "Device %s\n" format, dev_driver_string(dev), ## arg)
MODULE_ALIAS_CHARDEV  macro  include/linux/device.h  1086  #define MODULE_ALIAS_CHARDEV(major,minor) MODULE_ALIAS("char-major-" __stringify(major) "-" __stringify(minor))
MODULE_ALIAS_CHARDEV_MAJOR  macro  include/linux/device.h  1088  #define MODULE_ALIAS_CHARDEV_MAJOR(major) MODULE_ALIAS("char-major-" __stringify(major) "-*")
sysfs_deprecated  macro  include/linux/device.h  1094  #define sysfs_deprecated 0
module_driver  macro  include/linux/device.h  1111  #define module_driver(__driver,__register,__unregister,...) static int __init __driver##_init(void) { return __register(&(__driver) , ##__VA_ARGS__); } module_init(__driver##_init); static void __exit __driver##_exit(void) { __unregister(&(__driver) , ##__VA_ARGS__); } module_exit(__driver##_exit);
_LINUX_IO_H  macro  include/linux/io.h  19  #define _LINUX_IO_H
__iowrite32_copy  prototype  include/linux/io.h  27  void __iowrite32_copy(void __iomem *to,const void *from,size_t count);
__iowrite64_copy  prototype  include/linux/io.h  28  void __iowrite64_copy(void __iomem *to,const void *from,size_t count);
ioremap_page_range  function  include/linux/io.h  34  static inline int ioremap_page_range(unsigned long addr,unsigned long end,phys_addr_t phys_addr, pgprot_t prot)
devm_ioport_map  function  include/linux/io.h  49  static inline void __iomem *devm_ioport_map(struct device *dev,unsigned long port,unsigned int nr)
devm_ioport_unmap  function  include/linux/io.h  56  static inline void devm_ioport_unmap(struct device *dev,void __iomem *addr)
devm_ioremap  prototype  include/linux/io.h  61  void __iomem *devm_ioremap(struct device *dev,resource_size_t offset,unsigned long size);
devm_ioremap_nocache  prototype  include/linux/io.h  63  void __iomem *devm_ioremap_nocache(struct device *dev,resource_size_t offset,unsigned long size);
devm_iounmap  prototype  include/linux/io.h  65  void devm_iounmap(struct device *dev,void __iomem *addr);
check_signature  prototype  include/linux/io.h  66  int check_signature(const volatile void __iomem *io_addr,const unsigned char *signature, int length);
devm_ioremap_release  prototype  include/linux/io.h  68  void devm_ioremap_release(struct device *dev,void *res);
arch_has_dev_port  macro  include/linux/io.h  76  #define arch_has_dev_port() (1)
_UAPILINUX_PCI_H  macro  include/uapi/linux/pci.h  18  #define _UAPILINUX_PCI_H
PCI_DEVFN  macro  include/uapi/linux/pci.h  30  #define PCI_DEVFN(slot,func) ((((slot) & 0x1f) << 3) | ((func) & 0x07))
PCI_SLOT  macro  include/uapi/linux/pci.h  31  #define PCI_SLOT(devfn) (((devfn) >> 3) & 0x1f)
PCI_FUNC  macro  include/uapi/linux/pci.h  32  #define PCI_FUNC(devfn) ((devfn) & 0x07)
PCIIOC_BASE  macro  include/uapi/linux/pci.h  35  #define PCIIOC_BASE ('P' << 24 | 'C' << 16 | 'I' << 8)
PCIIOC_CONTROLLER  macro  include/uapi/linux/pci.h  36  #define PCIIOC_CONTROLLER (PCIIOC_BASE | 0x00)
PCIIOC_MMAP_IS_IO  macro  include/uapi/linux/pci.h  37  #define PCIIOC_MMAP_IS_IO (PCIIOC_BASE | 0x01)
PCIIOC_MMAP_IS_MEM  macro  include/uapi/linux/pci.h  38  #define PCIIOC_MMAP_IS_MEM (PCIIOC_BASE | 0x02)
PCIIOC_WRITE_COMBINE  macro  include/uapi/linux/pci.h  39  #define PCIIOC_WRITE_COMBINE (PCIIOC_BASE | 0x03)
PCI_CLASS_NOT_DEFINED  macro  include/linux/pci_ids.h  12  #define PCI_CLASS_NOT_DEFINED 0x0000
PCI_CLASS_NOT_DEFINED_VGA  macro  include/linux/pci_ids.h  13  #define PCI_CLASS_NOT_DEFINED_VGA 0x0001
PCI_BASE_CLASS_STORAGE  macro  include/linux/pci_ids.h  15  #define PCI_BASE_CLASS_STORAGE 0x01
PCI_CLASS_STORAGE_SCSI  macro  include/linux/pci_ids.h  16  #define PCI_CLASS_STORAGE_SCSI 0x0100
PCI_CLASS_STORAGE_IDE  macro  include/linux/pci_ids.h  17  #define PCI_CLASS_STORAGE_IDE 0x0101
PCI_CLASS_STORAGE_FLOPPY  macro  include/linux/pci_ids.h  18  #define PCI_CLASS_STORAGE_FLOPPY 0x0102
PCI_CLASS_STORAGE_IPI  macro  include/linux/pci_ids.h  19  #define PCI_CLASS_STORAGE_IPI 0x0103
PCI_CLASS_STORAGE_RAID  macro  include/linux/pci_ids.h  20  #define PCI_CLASS_STORAGE_RAID 0x0104
PCI_CLASS_STORAGE_SATA  macro  include/linux/pci_ids.h  21  #define PCI_CLASS_STORAGE_SATA 0x0106
PCI_CLASS_STORAGE_SATA_AHCI  macro  include/linux/pci_ids.h  22  #define PCI_CLASS_STORAGE_SATA_AHCI 0x010601
PCI_CLASS_STORAGE_SAS  macro  include/linux/pci_ids.h  23  #define PCI_CLASS_STORAGE_SAS 0x0107
PCI_CLASS_STORAGE_OTHER  macro  include/linux/pci_ids.h  24  #define PCI_CLASS_STORAGE_OTHER 0x0180
PCI_BASE_CLASS_NETWORK  macro  include/linux/pci_ids.h  26  #define PCI_BASE_CLASS_NETWORK 0x02
PCI_CLASS_NETWORK_ETHERNET  macro  include/linux/pci_ids.h  27  #define PCI_CLASS_NETWORK_ETHERNET 0x0200
PCI_CLASS_NETWORK_TOKEN_RING  macro  include/linux/pci_ids.h  28  #define PCI_CLASS_NETWORK_TOKEN_RING 0x0201
PCI_CLASS_NETWORK_FDDI  macro  include/linux/pci_ids.h  29  #define PCI_CLASS_NETWORK_FDDI 0x0202
PCI_CLASS_NETWORK_ATM  macro  include/linux/pci_ids.h  30  #define PCI_CLASS_NETWORK_ATM 0x0203
PCI_CLASS_NETWORK_OTHER  macro  include/linux/pci_ids.h  31  #define PCI_CLASS_NETWORK_OTHER 0x0280
PCI_BASE_CLASS_DISPLAY  macro  include/linux/pci_ids.h  33  #define PCI_BASE_CLASS_DISPLAY 0x03
PCI_CLASS_DISPLAY_VGA  macro  include/linux/pci_ids.h  34  #define PCI_CLASS_DISPLAY_VGA 0x0300
PCI_CLASS_DISPLAY_XGA  macro  include/linux/pci_ids.h  35  #define PCI_CLASS_DISPLAY_XGA 0x0301
PCI_CLASS_DISPLAY_3D  macro  include/linux/pci_ids.h  36  #define PCI_CLASS_DISPLAY_3D 0x0302
PCI_CLASS_DISPLAY_OTHER  macro  include/linux/pci_ids.h  37  #define PCI_CLASS_DISPLAY_OTHER 0x0380
PCI_BASE_CLASS_MULTIMEDIA  macro  include/linux/pci_ids.h  39  #define PCI_BASE_CLASS_MULTIMEDIA 0x04
PCI_CLASS_MULTIMEDIA_VIDEO  macro  include/linux/pci_ids.h  40  #define PCI_CLASS_MULTIMEDIA_VIDEO 0x0400
PCI_CLASS_MULTIMEDIA_AUDIO  macro  include/linux/pci_ids.h  41  #define PCI_CLASS_MULTIMEDIA_AUDIO 0x0401
PCI_CLASS_MULTIMEDIA_PHONE  macro  include/linux/pci_ids.h  42  #define PCI_CLASS_MULTIMEDIA_PHONE 0x0402
PCI_CLASS_MULTIMEDIA_OTHER  macro  include/linux/pci_ids.h  43  #define PCI_CLASS_MULTIMEDIA_OTHER 0x0480
PCI_BASE_CLASS_MEMORY  macro  include/linux/pci_ids.h  45  #define PCI_BASE_CLASS_MEMORY 0x05
PCI_CLASS_MEMORY_RAM  macro  include/linux/pci_ids.h  46  #define PCI_CLASS_MEMORY_RAM 0x0500
PCI_CLASS_MEMORY_FLASH  macro  include/linux/pci_ids.h  47  #define PCI_CLASS_MEMORY_FLASH 0x0501
PCI_CLASS_MEMORY_OTHER  macro  include/linux/pci_ids.h  48  #define PCI_CLASS_MEMORY_OTHER 0x0580
PCI_BASE_CLASS_BRIDGE  macro  include/linux/pci_ids.h  50  #define PCI_BASE_CLASS_BRIDGE 0x06
PCI_CLASS_BRIDGE_HOST  macro  include/linux/pci_ids.h  51  #define PCI_CLASS_BRIDGE_HOST 0x0600
PCI_CLASS_BRIDGE_ISA  macro  include/linux/pci_ids.h  52  #define PCI_CLASS_BRIDGE_ISA 0x0601
PCI_CLASS_BRIDGE_EISA  macro  include/linux/pci_ids.h  53  #define PCI_CLASS_BRIDGE_EISA 0x0602
PCI_CLASS_BRIDGE_MC  macro  include/linux/pci_ids.h  54  #define PCI_CLASS_BRIDGE_MC 0x0603
PCI_CLASS_BRIDGE_PCI  macro  include/linux/pci_ids.h  55  #define PCI_CLASS_BRIDGE_PCI 0x0604
PCI_CLASS_BRIDGE_PCMCIA  macro  include/linux/pci_ids.h  56  #define PCI_CLASS_BRIDGE_PCMCIA 0x0605
PCI_CLASS_BRIDGE_NUBUS  macro  include/linux/pci_ids.h  57  #define PCI_CLASS_BRIDGE_NUBUS 0x0606
PCI_CLASS_BRIDGE_CARDBUS  macro  include/linux/pci_ids.h  58  #define PCI_CLASS_BRIDGE_CARDBUS 0x0607
PCI_CLASS_BRIDGE_RACEWAY  macro  include/linux/pci_ids.h  59  #define PCI_CLASS_BRIDGE_RACEWAY 0x0608
PCI_CLASS_BRIDGE_OTHER  macro  include/linux/pci_ids.h  60  #define PCI_CLASS_BRIDGE_OTHER 0x0680
PCI_BASE_CLASS_COMMUNICATION  macro  include/linux/pci_ids.h  62  #define PCI_BASE_CLASS_COMMUNICATION 0x07
PCI_CLASS_COMMUNICATION_SERIAL  macro  include/linux/pci_ids.h  63  #define PCI_CLASS_COMMUNICATION_SERIAL 0x0700
PCI_CLASS_COMMUNICATION_PARALLEL  macro  include/linux/pci_ids.h  64  #define PCI_CLASS_COMMUNICATION_PARALLEL 0x0701
PCI_CLASS_COMMUNICATION_MULTISERIAL  macro  include/linux/pci_ids.h  65  #define PCI_CLASS_COMMUNICATION_MULTISERIAL 0x0702
PCI_CLASS_COMMUNICATION_MODEM  macro  include/linux/pci_ids.h  66  #define PCI_CLASS_COMMUNICATION_MODEM 0x0703
PCI_CLASS_COMMUNICATION_OTHER  macro  include/linux/pci_ids.h  67  #define PCI_CLASS_COMMUNICATION_OTHER 0x0780
PCI_BASE_CLASS_SYSTEM  macro  include/linux/pci_ids.h  69  #define PCI_BASE_CLASS_SYSTEM 0x08
PCI_CLASS_SYSTEM_PIC  macro  include/linux/pci_ids.h  70  #define PCI_CLASS_SYSTEM_PIC 0x0800
PCI_CLASS_SYSTEM_PIC_IOAPIC  macro  include/linux/pci_ids.h  71  #define PCI_CLASS_SYSTEM_PIC_IOAPIC 0x080010
PCI_CLASS_SYSTEM_PIC_IOXAPIC  macro  include/linux/pci_ids.h  72  #define PCI_CLASS_SYSTEM_PIC_IOXAPIC 0x080020
PCI_CLASS_SYSTEM_DMA  macro  include/linux/pci_ids.h  73  #define PCI_CLASS_SYSTEM_DMA 0x0801
PCI_CLASS_SYSTEM_TIMER  macro  include/linux/pci_ids.h  74  #define PCI_CLASS_SYSTEM_TIMER 0x0802
PCI_CLASS_SYSTEM_RTC  macro  include/linux/pci_ids.h  75  #define PCI_CLASS_SYSTEM_RTC 0x0803
PCI_CLASS_SYSTEM_PCI_HOTPLUG  macro  include/linux/pci_ids.h  76  #define PCI_CLASS_SYSTEM_PCI_HOTPLUG 0x0804
PCI_CLASS_SYSTEM_SDHCI  macro  include/linux/pci_ids.h  77  #define PCI_CLASS_SYSTEM_SDHCI 0x0805
PCI_CLASS_SYSTEM_OTHER  macro  include/linux/pci_ids.h  78  #define PCI_CLASS_SYSTEM_OTHER 0x0880
PCI_BASE_CLASS_INPUT  macro  include/linux/pci_ids.h  80  #define PCI_BASE_CLASS_INPUT 0x09
PCI_CLASS_INPUT_KEYBOARD  macro  include/linux/pci_ids.h  81  #define PCI_CLASS_INPUT_KEYBOARD 0x0900
PCI_CLASS_INPUT_PEN  macro  include/linux/pci_ids.h  82  #define PCI_CLASS_INPUT_PEN 0x0901
PCI_CLASS_INPUT_MOUSE  macro  include/linux/pci_ids.h  83  #define PCI_CLASS_INPUT_MOUSE 0x0902
PCI_CLASS_INPUT_SCANNER  macro  include/linux/pci_ids.h  84  #define PCI_CLASS_INPUT_SCANNER 0x0903
PCI_CLASS_INPUT_GAMEPORT  macro  include/linux/pci_ids.h  85  #define PCI_CLASS_INPUT_GAMEPORT 0x0904
PCI_CLASS_INPUT_OTHER  macro  include/linux/pci_ids.h  86  #define PCI_CLASS_INPUT_OTHER 0x0980
PCI_BASE_CLASS_DOCKING  macro  include/linux/pci_ids.h  88  #define PCI_BASE_CLASS_DOCKING 0x0a
PCI_CLASS_DOCKING_GENERIC  macro  include/linux/pci_ids.h  89  #define PCI_CLASS_DOCKING_GENERIC 0x0a00
PCI_CLASS_DOCKING_OTHER  macro  include/linux/pci_ids.h  90  #define PCI_CLASS_DOCKING_OTHER 0x0a80
PCI_BASE_CLASS_PROCESSOR  macro  include/linux/pci_ids.h  92  #define PCI_BASE_CLASS_PROCESSOR 0x0b
PCI_CLASS_PROCESSOR_386  macro  include/linux/pci_ids.h  93  #define PCI_CLASS_PROCESSOR_386 0x0b00
PCI_CLASS_PROCESSOR_486  macro  include/linux/pci_ids.h  94  #define PCI_CLASS_PROCESSOR_486 0x0b01
PCI_CLASS_PROCESSOR_PENTIUM  macro  include/linux/pci_ids.h  95  #define PCI_CLASS_PROCESSOR_PENTIUM 0x0b02
PCI_CLASS_PROCESSOR_ALPHA  macro  include/linux/pci_ids.h  96  #define PCI_CLASS_PROCESSOR_ALPHA 0x0b10
PCI_CLASS_PROCESSOR_POWERPC  macro  include/linux/pci_ids.h  97  #define PCI_CLASS_PROCESSOR_POWERPC 0x0b20
PCI_CLASS_PROCESSOR_MIPS  macro  include/linux/pci_ids.h  98  #define PCI_CLASS_PROCESSOR_MIPS 0x0b30
PCI_CLASS_PROCESSOR_CO  macro  include/linux/pci_ids.h  99  #define PCI_CLASS_PROCESSOR_CO 0x0b40
PCI_BASE_CLASS_SERIAL  macro  include/linux/pci_ids.h  101  #define PCI_BASE_CLASS_SERIAL 0x0c
PCI_CLASS_SERIAL_FIREWIRE  macro  include/linux/pci_ids.h  102  #define PCI_CLASS_SERIAL_FIREWIRE 0x0c00
PCI_CLASS_SERIAL_FIREWIRE_OHCI  macro  include/linux/pci_ids.h  103  #define PCI_CLASS_SERIAL_FIREWIRE_OHCI 0x0c0010
PCI_CLASS_SERIAL_ACCESS  macro  include/linux/pci_ids.h  104  #define PCI_CLASS_SERIAL_ACCESS 0x0c01
PCI_CLASS_SERIAL_SSA  macro  include/linux/pci_ids.h  105  #define PCI_CLASS_SERIAL_SSA 0x0c02
PCI_CLASS_SERIAL_USB  macro  include/linux/pci_ids.h  106  #define PCI_CLASS_SERIAL_USB 0x0c03
PCI_CLASS_SERIAL_USB_UHCI  macro  include/linux/pci_ids.h  107  #define PCI_CLASS_SERIAL_USB_UHCI 0x0c0300
PCI_CLASS_SERIAL_USB_OHCI  macro  include/linux/pci_ids.h  108  #define PCI_CLASS_SERIAL_USB_OHCI 0x0c0310
PCI_CLASS_SERIAL_USB_EHCI  macro  include/linux/pci_ids.h  109  #define PCI_CLASS_SERIAL_USB_EHCI 0x0c0320
PCI_CLASS_SERIAL_USB_XHCI  macro  include/linux/pci_ids.h  110  #define PCI_CLASS_SERIAL_USB_XHCI 0x0c0330
PCI_CLASS_SERIAL_FIBER  macro  include/linux/pci_ids.h  111  #define PCI_CLASS_SERIAL_FIBER 0x0c04
PCI_CLASS_SERIAL_SMBUS  macro  include/linux/pci_ids.h  112  #define PCI_CLASS_SERIAL_SMBUS 0x0c05
PCI_BASE_CLASS_WIRELESS  macro  include/linux/pci_ids.h  114  #define PCI_BASE_CLASS_WIRELESS 0x0d
PCI_CLASS_WIRELESS_RF_CONTROLLER  macro  include/linux/pci_ids.h  115  #define PCI_CLASS_WIRELESS_RF_CONTROLLER 0x0d10
PCI_CLASS_WIRELESS_WHCI  macro  include/linux/pci_ids.h  116  #define PCI_CLASS_WIRELESS_WHCI 0x0d1010
PCI_BASE_CLASS_INTELLIGENT  macro  include/linux/pci_ids.h  118  #define PCI_BASE_CLASS_INTELLIGENT 0x0e
PCI_CLASS_INTELLIGENT_I2O  macro  include/linux/pci_ids.h  119  #define PCI_CLASS_INTELLIGENT_I2O 0x0e00
PCI_BASE_CLASS_SATELLITE  macro  include/linux/pci_ids.h  121  #define PCI_BASE_CLASS_SATELLITE 0x0f
PCI_CLASS_SATELLITE_TV  macro  include/linux/pci_ids.h  122  #define PCI_CLASS_SATELLITE_TV 0x0f00
PCI_CLASS_SATELLITE_AUDIO  macro  include/linux/pci_ids.h  123  #define PCI_CLASS_SATELLITE_AUDIO 0x0f01
PCI_CLASS_SATELLITE_VOICE  macro  include/linux/pci_ids.h  124  #define PCI_CLASS_SATELLITE_VOICE 0x0f03
PCI_CLASS_SATELLITE_DATA  macro  include/linux/pci_ids.h  125  #define PCI_CLASS_SATELLITE_DATA 0x0f04
PCI_BASE_CLASS_CRYPT  macro  include/linux/pci_ids.h  127  #define PCI_BASE_CLASS_CRYPT 0x10
PCI_CLASS_CRYPT_NETWORK  macro  include/linux/pci_ids.h  128  #define PCI_CLASS_CRYPT_NETWORK 0x1000
PCI_CLASS_CRYPT_ENTERTAINMENT  macro  include/linux/pci_ids.h  129  #define PCI_CLASS_CRYPT_ENTERTAINMENT 0x1001
PCI_CLASS_CRYPT_OTHER  macro  include/linux/pci_ids.h  130  #define PCI_CLASS_CRYPT_OTHER 0x1080
PCI_BASE_CLASS_SIGNAL_PROCESSING  macro  include/linux/pci_ids.h  132  #define PCI_BASE_CLASS_SIGNAL_PROCESSING 0x11
PCI_CLASS_SP_DPIO  macro  include/linux/pci_ids.h  133  #define PCI_CLASS_SP_DPIO 0x1100
PCI_CLASS_SP_OTHER  macro  include/linux/pci_ids.h  134  #define PCI_CLASS_SP_OTHER 0x1180
PCI_CLASS_OTHERS  macro  include/linux/pci_ids.h  136  #define PCI_CLASS_OTHERS 0xff
PCI_VENDOR_ID_TTTECH  macro  include/linux/pci_ids.h  140  #define PCI_VENDOR_ID_TTTECH 0x0357
PCI_DEVICE_ID_TTTECH_MC322  macro  include/linux/pci_ids.h  141  #define PCI_DEVICE_ID_TTTECH_MC322 0x000a
PCI_VENDOR_ID_DYNALINK  macro  include/linux/pci_ids.h  143  #define PCI_VENDOR_ID_DYNALINK 0x0675
PCI_DEVICE_ID_DYNALINK_IS64PH  macro  include/linux/pci_ids.h  144  #define PCI_DEVICE_ID_DYNALINK_IS64PH 0x1702
PCI_VENDOR_ID_BERKOM  macro  include/linux/pci_ids.h  146  #define PCI_VENDOR_ID_BERKOM 0x0871
PCI_DEVICE_ID_BERKOM_A1T  macro  include/linux/pci_ids.h  147  #define PCI_DEVICE_ID_BERKOM_A1T 0xffa1
PCI_DEVICE_ID_BERKOM_T_CONCEPT  macro  include/linux/pci_ids.h  148  #define PCI_DEVICE_ID_BERKOM_T_CONCEPT 0xffa2
PCI_DEVICE_ID_BERKOM_A4T  macro  include/linux/pci_ids.h  149  #define PCI_DEVICE_ID_BERKOM_A4T 0xffa4
PCI_DEVICE_ID_BERKOM_SCITEL_QUADRO  macro  include/linux/pci_ids.h  150  #define PCI_DEVICE_ID_BERKOM_SCITEL_QUADRO 0xffa8
PCI_VENDOR_ID_COMPAQ  macro  include/linux/pci_ids.h  152  #define PCI_VENDOR_ID_COMPAQ 0x0e11
PCI_DEVICE_ID_COMPAQ_TOKENRING  macro  include/linux/pci_ids.h  153  #define PCI_DEVICE_ID_COMPAQ_TOKENRING 0x0508
PCI_DEVICE_ID_COMPAQ_TACHYON  macro  include/linux/pci_ids.h  154  #define PCI_DEVICE_ID_COMPAQ_TACHYON 0xa0fc
PCI_DEVICE_ID_COMPAQ_SMART2P  macro  include/linux/pci_ids.h  155  #define PCI_DEVICE_ID_COMPAQ_SMART2P 0xae10
PCI_DEVICE_ID_COMPAQ_NETEL100  macro  include/linux/pci_ids.h  156  #define PCI_DEVICE_ID_COMPAQ_NETEL100 0xae32
PCI_DEVICE_ID_COMPAQ_NETEL10  macro  include/linux/pci_ids.h  157  #define PCI_DEVICE_ID_COMPAQ_NETEL10 0xae34
PCI_DEVICE_ID_COMPAQ_TRIFLEX_IDE  macro  include/linux/pci_ids.h  158  #define PCI_DEVICE_ID_COMPAQ_TRIFLEX_IDE 0xae33
PCI_DEVICE_ID_COMPAQ_NETFLEX3I  macro  include/linux/pci_ids.h  159  #define PCI_DEVICE_ID_COMPAQ_NETFLEX3I 0xae35
PCI_DEVICE_ID_COMPAQ_NETEL100D  macro  include/linux/pci_ids.h  160  #define PCI_DEVICE_ID_COMPAQ_NETEL100D 0xae40
PCI_DEVICE_ID_COMPAQ_NETEL100PI  macro  include/linux/pci_ids.h  161  #define PCI_DEVICE_ID_COMPAQ_NETEL100PI 0xae43
PCI_DEVICE_ID_COMPAQ_NETEL100I  macro  include/linux/pci_ids.h  162  #define PCI_DEVICE_ID_COMPAQ_NETEL100I 0xb011
PCI_DEVICE_ID_COMPAQ_CISS  macro  include/linux/pci_ids.h  163  #define PCI_DEVICE_ID_COMPAQ_CISS 0xb060
PCI_DEVICE_ID_COMPAQ_CISSB  macro  include/linux/pci_ids.h  164  #define PCI_DEVICE_ID_COMPAQ_CISSB 0xb178
PCI_DEVICE_ID_COMPAQ_CISSC  macro  include/linux/pci_ids.h  165  #define PCI_DEVICE_ID_COMPAQ_CISSC 0x46
PCI_DEVICE_ID_COMPAQ_THUNDER  macro  include/linux/pci_ids.h  166  #define PCI_DEVICE_ID_COMPAQ_THUNDER 0xf130
PCI_DEVICE_ID_COMPAQ_NETFLEX3B  macro  include/linux/pci_ids.h  167  #define PCI_DEVICE_ID_COMPAQ_NETFLEX3B 0xf150
PCI_VENDOR_ID_NCR  macro  include/linux/pci_ids.h  169  #define PCI_VENDOR_ID_NCR 0x1000
PCI_VENDOR_ID_LSI_LOGIC  macro  include/linux/pci_ids.h  170  #define PCI_VENDOR_ID_LSI_LOGIC 0x1000
PCI_DEVICE_ID_NCR_53C810  macro  include/linux/pci_ids.h  171  #define PCI_DEVICE_ID_NCR_53C810 0x0001
PCI_DEVICE_ID_NCR_53C820  macro  include/linux/pci_ids.h  172  #define PCI_DEVICE_ID_NCR_53C820 0x0002
PCI_DEVICE_ID_NCR_53C825  macro  include/linux/pci_ids.h  173  #define PCI_DEVICE_ID_NCR_53C825 0x0003
PCI_DEVICE_ID_NCR_53C815  macro  include/linux/pci_ids.h  174  #define PCI_DEVICE_ID_NCR_53C815 0x0004
PCI_DEVICE_ID_LSI_53C810AP  macro  include/linux/pci_ids.h  175  #define PCI_DEVICE_ID_LSI_53C810AP 0x0005
PCI_DEVICE_ID_NCR_53C860  macro  include/linux/pci_ids.h  176  #define PCI_DEVICE_ID_NCR_53C860 0x0006
PCI_DEVICE_ID_LSI_53C1510  macro  include/linux/pci_ids.h  177  #define PCI_DEVICE_ID_LSI_53C1510 0x000a
PCI_DEVICE_ID_NCR_53C896  macro  include/linux/pci_ids.h  178  #define PCI_DEVICE_ID_NCR_53C896 0x000b
PCI_DEVICE_ID_NCR_53C895  macro  include/linux/pci_ids.h  179  #define PCI_DEVICE_ID_NCR_53C895 0x000c
PCI_DEVICE_ID_NCR_53C885  macro  include/linux/pci_ids.h  180  #define PCI_DEVICE_ID_NCR_53C885 0x000d
PCI_DEVICE_ID_NCR_53C875  macro  include/linux/pci_ids.h  181  #define PCI_DEVICE_ID_NCR_53C875 0x000f
PCI_DEVICE_ID_NCR_53C1510  macro  include/linux/pci_ids.h  182  #define PCI_DEVICE_ID_NCR_53C1510 0x0010
PCI_DEVICE_ID_LSI_53C895A  macro  include/linux/pci_ids.h  183  #define PCI_DEVICE_ID_LSI_53C895A 0x0012
PCI_DEVICE_ID_LSI_53C875A  macro  include/linux/pci_ids.h  184  #define PCI_DEVICE_ID_LSI_53C875A 0x0013
PCI_DEVICE_ID_LSI_53C1010_33  macro  include/linux/pci_ids.h  185  #define PCI_DEVICE_ID_LSI_53C1010_33 0x0020
PCI_DEVICE_ID_LSI_53C1010_66  macro  include/linux/pci_ids.h  186  #define PCI_DEVICE_ID_LSI_53C1010_66 0x0021
PCI_DEVICE_ID_LSI_53C1030  macro  include/linux/pci_ids.h  187  #define PCI_DEVICE_ID_LSI_53C1030 0x0030
PCI_DEVICE_ID_LSI_1030_53C1035  macro  include/linux/pci_ids.h  188  #define PCI_DEVICE_ID_LSI_1030_53C1035 0x0032
PCI_DEVICE_ID_LSI_53C1035  macro  include/linux/pci_ids.h  189  #define PCI_DEVICE_ID_LSI_53C1035 0x0040
PCI_DEVICE_ID_NCR_53C875J  macro  include/linux/pci_ids.h  190  #define PCI_DEVICE_ID_NCR_53C875J 0x008f
PCI_DEVICE_ID_LSI_FC909  macro  include/linux/pci_ids.h  191  #define PCI_DEVICE_ID_LSI_FC909 0x0621
PCI_DEVICE_ID_LSI_FC929  macro  include/linux/pci_ids.h  192  #define PCI_DEVICE_ID_LSI_FC929 0x0622
PCI_DEVICE_ID_LSI_FC929_LAN  macro  include/linux/pci_ids.h  193  #define PCI_DEVICE_ID_LSI_FC929_LAN 0x0623
PCI_DEVICE_ID_LSI_FC919  macro  include/linux/pci_ids.h  194  #define PCI_DEVICE_ID_LSI_FC919 0x0624
PCI_DEVICE_ID_LSI_FC919_LAN  macro  include/linux/pci_ids.h  195  #define PCI_DEVICE_ID_LSI_FC919_LAN 0x0625
PCI_DEVICE_ID_LSI_FC929X  macro  include/linux/pci_ids.h  196  #define PCI_DEVICE_ID_LSI_FC929X 0x0626
PCI_DEVICE_ID_LSI_FC939X  macro  include/linux/pci_ids.h  197  #define PCI_DEVICE_ID_LSI_FC939X 0x0642
PCI_DEVICE_ID_LSI_FC949X  macro  include/linux/pci_ids.h  198  #define PCI_DEVICE_ID_LSI_FC949X 0x0640
PCI_DEVICE_ID_LSI_FC949ES  macro  include/linux/pci_ids.h  199  #define PCI_DEVICE_ID_LSI_FC949ES 0x0646
PCI_DEVICE_ID_LSI_FC919X  macro  include/linux/pci_ids.h  200  #define PCI_DEVICE_ID_LSI_FC919X 0x0628
PCI_DEVICE_ID_NCR_YELLOWFIN  macro  include/linux/pci_ids.h  201  #define PCI_DEVICE_ID_NCR_YELLOWFIN 0x0701
PCI_DEVICE_ID_LSI_61C102  macro  include/linux/pci_ids.h  202  #define PCI_DEVICE_ID_LSI_61C102 0x0901
PCI_DEVICE_ID_LSI_63C815  macro  include/linux/pci_ids.h  203  #define PCI_DEVICE_ID_LSI_63C815 0x1000
PCI_DEVICE_ID_LSI_SAS1064  macro  include/linux/pci_ids.h  204  #define PCI_DEVICE_ID_LSI_SAS1064 0x0050
PCI_DEVICE_ID_LSI_SAS1064R  macro  include/linux/pci_ids.h  205  #define PCI_DEVICE_ID_LSI_SAS1064R 0x0411
PCI_DEVICE_ID_LSI_SAS1066  macro  include/linux/pci_ids.h  206  #define PCI_DEVICE_ID_LSI_SAS1066 0x005E
PCI_DEVICE_ID_LSI_SAS1068  macro  include/linux/pci_ids.h  207  #define PCI_DEVICE_ID_LSI_SAS1068 0x0054
PCI_DEVICE_ID_LSI_SAS1064A  macro  include/linux/pci_ids.h  208  #define PCI_DEVICE_ID_LSI_SAS1064A 0x005C
PCI_DEVICE_ID_LSI_SAS1064E  macro  include/linux/pci_ids.h  209  #define PCI_DEVICE_ID_LSI_SAS1064E 0x0056
PCI_DEVICE_ID_LSI_SAS1066E  macro  include/linux/pci_ids.h  210  #define PCI_DEVICE_ID_LSI_SAS1066E 0x005A
PCI_DEVICE_ID_LSI_SAS1068E  macro  include/linux/pci_ids.h  211  #define PCI_DEVICE_ID_LSI_SAS1068E 0x0058
PCI_DEVICE_ID_LSI_SAS1078  macro  include/linux/pci_ids.h  212  #define PCI_DEVICE_ID_LSI_SAS1078 0x0060
PCI_VENDOR_ID_ATI  macro  include/linux/pci_ids.h  214  #define PCI_VENDOR_ID_ATI 0x1002
PCI_DEVICE_ID_ATI_68800  macro  include/linux/pci_ids.h  216  #define PCI_DEVICE_ID_ATI_68800 0x4158
PCI_DEVICE_ID_ATI_215CT222  macro  include/linux/pci_ids.h  217  #define PCI_DEVICE_ID_ATI_215CT222 0x4354
PCI_DEVICE_ID_ATI_210888CX  macro  include/linux/pci_ids.h  218  #define PCI_DEVICE_ID_ATI_210888CX 0x4358
PCI_DEVICE_ID_ATI_215ET222  macro  include/linux/pci_ids.h  219  #define PCI_DEVICE_ID_ATI_215ET222 0x4554
PCI_DEVICE_ID_ATI_215GB  macro  include/linux/pci_ids.h  221  #define PCI_DEVICE_ID_ATI_215GB 0x4742
PCI_DEVICE_ID_ATI_215GD  macro  include/linux/pci_ids.h  222  #define PCI_DEVICE_ID_ATI_215GD 0x4744
PCI_DEVICE_ID_ATI_215GI  macro  include/linux/pci_ids.h  223  #define PCI_DEVICE_ID_ATI_215GI 0x4749
PCI_DEVICE_ID_ATI_215GP  macro  include/linux/pci_ids.h  224  #define PCI_DEVICE_ID_ATI_215GP 0x4750
PCI_DEVICE_ID_ATI_215GQ  macro  include/linux/pci_ids.h  225  #define PCI_DEVICE_ID_ATI_215GQ 0x4751
PCI_DEVICE_ID_ATI_215XL  macro  include/linux/pci_ids.h  226  #define PCI_DEVICE_ID_ATI_215XL 0x4752
PCI_DEVICE_ID_ATI_215GT  macro  include/linux/pci_ids.h  227  #define PCI_DEVICE_ID_ATI_215GT 0x4754
PCI_DEVICE_ID_ATI_215GTB  macro  include/linux/pci_ids.h  228  #define PCI_DEVICE_ID_ATI_215GTB 0x4755
PCI_DEVICE_ID_ATI_215_IV  macro  include/linux/pci_ids.h  229  #define PCI_DEVICE_ID_ATI_215_IV 0x4756
PCI_DEVICE_ID_ATI_215_IW  macro  include/linux/pci_ids.h  230  #define PCI_DEVICE_ID_ATI_215_IW 0x4757
PCI_DEVICE_ID_ATI_215_IZ  macro  include/linux/pci_ids.h  231  #define PCI_DEVICE_ID_ATI_215_IZ 0x475A
PCI_DEVICE_ID_ATI_210888GX  macro  include/linux/pci_ids.h  232  #define PCI_DEVICE_ID_ATI_210888GX 0x4758
PCI_DEVICE_ID_ATI_215_LB  macro  include/linux/pci_ids.h  233  #define PCI_DEVICE_ID_ATI_215_LB 0x4c42
PCI_DEVICE_ID_ATI_215_LD  macro  include/linux/pci_ids.h  234  #define PCI_DEVICE_ID_ATI_215_LD 0x4c44
PCI_DEVICE_ID_ATI_215_LG  macro  include/linux/pci_ids.h  235  #define PCI_DEVICE_ID_ATI_215_LG 0x4c47
PCI_DEVICE_ID_ATI_215_LI  macro  include/linux/pci_ids.h  236  #define PCI_DEVICE_ID_ATI_215_LI 0x4c49
PCI_DEVICE_ID_ATI_215_LM  macro  include/linux/pci_ids.h  237  #define PCI_DEVICE_ID_ATI_215_LM 0x4c4D
PCI_DEVICE_ID_ATI_215_LN  macro  include/linux/pci_ids.h  238  #define PCI_DEVICE_ID_ATI_215_LN 0x4c4E
PCI_DEVICE_ID_ATI_215_LR  macro  include/linux/pci_ids.h  239  #define PCI_DEVICE_ID_ATI_215_LR 0x4c52
PCI_DEVICE_ID_ATI_215_LS  macro  include/linux/pci_ids.h  240  #define PCI_DEVICE_ID_ATI_215_LS 0x4c53
PCI_DEVICE_ID_ATI_264_LT  macro  include/linux/pci_ids.h  241  #define PCI_DEVICE_ID_ATI_264_LT 0x4c54
PCI_DEVICE_ID_ATI_264VT  macro  include/linux/pci_ids.h  243  #define PCI_DEVICE_ID_ATI_264VT 0x5654
PCI_DEVICE_ID_ATI_264VU  macro  include/linux/pci_ids.h  244  #define PCI_DEVICE_ID_ATI_264VU 0x5655
PCI_DEVICE_ID_ATI_264VV  macro  include/linux/pci_ids.h  245  #define PCI_DEVICE_ID_ATI_264VV 0x5656
PCI_DEVICE_ID_ATI_RAGE128_RE  macro  include/linux/pci_ids.h  247  #define PCI_DEVICE_ID_ATI_RAGE128_RE 0x5245
PCI_DEVICE_ID_ATI_RAGE128_RF  macro  include/linux/pci_ids.h  248  #define PCI_DEVICE_ID_ATI_RAGE128_RF 0x5246
PCI_DEVICE_ID_ATI_RAGE128_RG  macro  include/linux/pci_ids.h  249  #define PCI_DEVICE_ID_ATI_RAGE128_RG 0x5247
PCI_DEVICE_ID_ATI_RAGE128_RK  macro  include/linux/pci_ids.h  251  #define PCI_DEVICE_ID_ATI_RAGE128_RK 0x524b
PCI_DEVICE_ID_ATI_RAGE128_RL  macro  include/linux/pci_ids.h  252  #define PCI_DEVICE_ID_ATI_RAGE128_RL 0x524c
PCI_DEVICE_ID_ATI_RAGE128_SE  macro  include/linux/pci_ids.h  253  #define PCI_DEVICE_ID_ATI_RAGE128_SE 0x5345
PCI_DEVICE_ID_ATI_RAGE128_SF  macro  include/linux/pci_ids.h  254  #define PCI_DEVICE_ID_ATI_RAGE128_SF 0x5346
PCI_DEVICE_ID_ATI_RAGE128_SG  macro  include/linux/pci_ids.h  255  #define PCI_DEVICE_ID_ATI_RAGE128_SG 0x5347
PCI_DEVICE_ID_ATI_RAGE128_SH  macro  include/linux/pci_ids.h  256  #define PCI_DEVICE_ID_ATI_RAGE128_SH 0x5348
PCI_DEVICE_ID_ATI_RAGE128_SK  macro  include/linux/pci_ids.h  257  #define PCI_DEVICE_ID_ATI_RAGE128_SK 0x534b
PCI_DEVICE_ID_ATI_RAGE128_SL  macro  include/linux/pci_ids.h  258  #define PCI_DEVICE_ID_ATI_RAGE128_SL 0x534c
PCI_DEVICE_ID_ATI_RAGE128_SM  macro  include/linux/pci_ids.h  259  #define PCI_DEVICE_ID_ATI_RAGE128_SM 0x534d
PCI_DEVICE_ID_ATI_RAGE128_SN  macro  include/linux/pci_ids.h  260  #define PCI_DEVICE_ID_ATI_RAGE128_SN 0x534e
PCI_DEVICE_ID_ATI_RAGE128_TF  macro  include/linux/pci_ids.h  262  #define PCI_DEVICE_ID_ATI_RAGE128_TF 0x5446
PCI_DEVICE_ID_ATI_RAGE128_TL  macro  include/linux/pci_ids.h  263  #define PCI_DEVICE_ID_ATI_RAGE128_TL 0x544c
PCI_DEVICE_ID_ATI_RAGE128_TR  macro  include/linux/pci_ids.h  264  #define PCI_DEVICE_ID_ATI_RAGE128_TR 0x5452
PCI_DEVICE_ID_ATI_RAGE128_TS  macro  include/linux/pci_ids.h  265  #define PCI_DEVICE_ID_ATI_RAGE128_TS 0x5453
PCI_DEVICE_ID_ATI_RAGE128_TT  macro  include/linux/pci_ids.h  266  #define PCI_DEVICE_ID_ATI_RAGE128_TT 0x5454
PCI_DEVICE_ID_ATI_RAGE128_TU  macro  include/linux/pci_ids.h  267  #define PCI_DEVICE_ID_ATI_RAGE128_TU 0x5455
PCI_DEVICE_ID_ATI_RAGE128_LE  macro  include/linux/pci_ids.h  269  #define PCI_DEVICE_ID_ATI_RAGE128_LE 0x4c45
PCI_DEVICE_ID_ATI_RAGE128_LF  macro  include/linux/pci_ids.h  270  #define PCI_DEVICE_ID_ATI_RAGE128_LF 0x4c46
PCI_DEVICE_ID_ATI_RAGE128_MF  macro  include/linux/pci_ids.h  272  #define PCI_DEVICE_ID_ATI_RAGE128_MF 0x4d46
PCI_DEVICE_ID_ATI_RAGE128_ML  macro  include/linux/pci_ids.h  273  #define PCI_DEVICE_ID_ATI_RAGE128_ML 0x4d4c
PCI_DEVICE_ID_ATI_RAGE128_PA  macro  include/linux/pci_ids.h  275  #define PCI_DEVICE_ID_ATI_RAGE128_PA 0x5041
PCI_DEVICE_ID_ATI_RAGE128_PB  macro  include/linux/pci_ids.h  276  #define PCI_DEVICE_ID_ATI_RAGE128_PB 0x5042
PCI_DEVICE_ID_ATI_RAGE128_PC  macro  include/linux/pci_ids.h  277  #define PCI_DEVICE_ID_ATI_RAGE128_PC 0x5043
PCI_DEVICE_ID_ATI_RAGE128_PD  macro  include/linux/pci_ids.h  278  #define PCI_DEVICE_ID_ATI_RAGE128_PD 0x5044
PCI_DEVICE_ID_ATI_RAGE128_PE  macro  include/linux/pci_ids.h  279  #define PCI_DEVICE_ID_ATI_RAGE128_PE 0x5045
PCI_DEVICE_ID_ATI_RAGE128_PF  macro  include/linux/pci_ids.h  280  #define PCI_DEVICE_ID_ATI_RAGE128_PF 0x5046
PCI_DEVICE_ID_ATI_RAGE128_PG  macro  include/linux/pci_ids.h  282  #define PCI_DEVICE_ID_ATI_RAGE128_PG 0x5047
PCI_DEVICE_ID_ATI_RAGE128_PH  macro  include/linux/pci_ids.h  283  #define PCI_DEVICE_ID_ATI_RAGE128_PH 0x5048
PCI_DEVICE_ID_ATI_RAGE128_PI  macro  include/linux/pci_ids.h  284  #define PCI_DEVICE_ID_ATI_RAGE128_PI 0x5049
PCI_DEVICE_ID_ATI_RAGE128_PJ  macro  include/linux/pci_ids.h  285  #define PCI_DEVICE_ID_ATI_RAGE128_PJ 0x504A
PCI_DEVICE_ID_ATI_RAGE128_PK  macro  include/linux/pci_ids.h  286  #define PCI_DEVICE_ID_ATI_RAGE128_PK 0x504B
PCI_DEVICE_ID_ATI_RAGE128_PL  macro  include/linux/pci_ids.h  287  #define PCI_DEVICE_ID_ATI_RAGE128_PL 0x504C
PCI_DEVICE_ID_ATI_RAGE128_PM  macro  include/linux/pci_ids.h  288  #define PCI_DEVICE_ID_ATI_RAGE128_PM 0x504D
PCI_DEVICE_ID_ATI_RAGE128_PN  macro  include/linux/pci_ids.h  289  #define PCI_DEVICE_ID_ATI_RAGE128_PN 0x504E
PCI_DEVICE_ID_ATI_RAGE128_PO  macro  include/linux/pci_ids.h  290  #define PCI_DEVICE_ID_ATI_RAGE128_PO 0x504F
PCI_DEVICE_ID_ATI_RAGE128_PP  macro  include/linux/pci_ids.h  291  #define PCI_DEVICE_ID_ATI_RAGE128_PP 0x5050
PCI_DEVICE_ID_ATI_RAGE128_PQ  macro  include/linux/pci_ids.h  292  #define PCI_DEVICE_ID_ATI_RAGE128_PQ 0x5051
PCI_DEVICE_ID_ATI_RAGE128_PR  macro  include/linux/pci_ids.h  293  #define PCI_DEVICE_ID_ATI_RAGE128_PR 0x5052
PCI_DEVICE_ID_ATI_RAGE128_PS  macro  include/linux/pci_ids.h  294  #define PCI_DEVICE_ID_ATI_RAGE128_PS 0x5053
PCI_DEVICE_ID_ATI_RAGE128_PT  macro  include/linux/pci_ids.h  295  #define PCI_DEVICE_ID_ATI_RAGE128_PT 0x5054
PCI_DEVICE_ID_ATI_RAGE128_PU  macro  include/linux/pci_ids.h  296  #define PCI_DEVICE_ID_ATI_RAGE128_PU 0x5055
PCI_DEVICE_ID_ATI_RAGE128_PV  macro  include/linux/pci_ids.h  297  #define PCI_DEVICE_ID_ATI_RAGE128_PV 0x5056
PCI_DEVICE_ID_ATI_RAGE128_PW  macro  include/linux/pci_ids.h  298  #define PCI_DEVICE_ID_ATI_RAGE128_PW 0x5057
PCI_DEVICE_ID_ATI_RAGE128_PX  macro  include/linux/pci_ids.h  299  #define PCI_DEVICE_ID_ATI_RAGE128_PX 0x5058
PCI_DEVICE_ID_ATI_RADEON_QD  macro  include/linux/pci_ids.h  302  #define PCI_DEVICE_ID_ATI_RADEON_QD 0x5144
PCI_DEVICE_ID_ATI_RADEON_QE  macro  include/linux/pci_ids.h  303  #define PCI_DEVICE_ID_ATI_RADEON_QE 0x5145
PCI_DEVICE_ID_ATI_RADEON_QF  macro  include/linux/pci_ids.h  304  #define PCI_DEVICE_ID_ATI_RADEON_QF 0x5146
PCI_DEVICE_ID_ATI_RADEON_QG  macro  include/linux/pci_ids.h  305  #define PCI_DEVICE_ID_ATI_RADEON_QG 0x5147
PCI_DEVICE_ID_ATI_RADEON_QY  macro  include/linux/pci_ids.h  307  #define PCI_DEVICE_ID_ATI_RADEON_QY 0x5159
PCI_DEVICE_ID_ATI_RADEON_QZ  macro  include/linux/pci_ids.h  308  #define PCI_DEVICE_ID_ATI_RADEON_QZ 0x515a
PCI_DEVICE_ID_ATI_RADEON_QL  macro  include/linux/pci_ids.h  310  #define PCI_DEVICE_ID_ATI_RADEON_QL 0x514c
PCI_DEVICE_ID_ATI_RADEON_QN  macro  include/linux/pci_ids.h  311  #define PCI_DEVICE_ID_ATI_RADEON_QN 0x514e
PCI_DEVICE_ID_ATI_RADEON_QO  macro  include/linux/pci_ids.h  312  #define PCI_DEVICE_ID_ATI_RADEON_QO 0x514f
PCI_DEVICE_ID_ATI_RADEON_Ql  macro  include/linux/pci_ids.h  313  #define PCI_DEVICE_ID_ATI_RADEON_Ql 0x516c
PCI_DEVICE_ID_ATI_RADEON_BB  macro  include/linux/pci_ids.h  314  #define PCI_DEVICE_ID_ATI_RADEON_BB 0x4242
PCI_DEVICE_ID_ATI_RADEON_QM  macro  include/linux/pci_ids.h  316  #define PCI_DEVICE_ID_ATI_RADEON_QM 0x514d
PCI_DEVICE_ID_ATI_RADEON_QW  macro  include/linux/pci_ids.h  318  #define PCI_DEVICE_ID_ATI_RADEON_QW 0x5157
PCI_DEVICE_ID_ATI_RADEON_QX  macro  include/linux/pci_ids.h  319  #define PCI_DEVICE_ID_ATI_RADEON_QX 0x5158
PCI_DEVICE_ID_ATI_RADEON_Id  macro  include/linux/pci_ids.h  322  #define PCI_DEVICE_ID_ATI_RADEON_Id 0x4964
PCI_DEVICE_ID_ATI_RADEON_Ie  macro  include/linux/pci_ids.h  323  #define PCI_DEVICE_ID_ATI_RADEON_Ie 0x4965
PCI_DEVICE_ID_ATI_RADEON_If  macro  include/linux/pci_ids.h  324  #define PCI_DEVICE_ID_ATI_RADEON_If 0x4966
PCI_DEVICE_ID_ATI_RADEON_Ig  macro  include/linux/pci_ids.h  325  #define PCI_DEVICE_ID_ATI_RADEON_Ig 0x4967
PCI_DEVICE_ID_ATI_RADEON_Ya  macro  include/linux/pci_ids.h  327  #define PCI_DEVICE_ID_ATI_RADEON_Ya 0x5961
PCI_DEVICE_ID_ATI_RADEON_Yd  macro  include/linux/pci_ids.h  328  #define PCI_DEVICE_ID_ATI_RADEON_Yd 0x5964
PCI_DEVICE_ID_ATI_RADEON_ND  macro  include/linux/pci_ids.h  331  #define PCI_DEVICE_ID_ATI_RADEON_ND 0x4e44
PCI_DEVICE_ID_ATI_RADEON_NE  macro  include/linux/pci_ids.h  332  #define PCI_DEVICE_ID_ATI_RADEON_NE 0x4e45
PCI_DEVICE_ID_ATI_RADEON_NF  macro  include/linux/pci_ids.h  333  #define PCI_DEVICE_ID_ATI_RADEON_NF 0x4e46
PCI_DEVICE_ID_ATI_RADEON_NG  macro  include/linux/pci_ids.h  334  #define PCI_DEVICE_ID_ATI_RADEON_NG 0x4e47
PCI_DEVICE_ID_ATI_RADEON_LY  macro  include/linux/pci_ids.h  338  #define PCI_DEVICE_ID_ATI_RADEON_LY 0x4c59
PCI_DEVICE_ID_ATI_RADEON_LZ  macro  include/linux/pci_ids.h  339  #define PCI_DEVICE_ID_ATI_RADEON_LZ 0x4c5a
PCI_DEVICE_ID_ATI_RADEON_LW  macro  include/linux/pci_ids.h  341  #define PCI_DEVICE_ID_ATI_RADEON_LW 0x4c57
PCI_DEVICE_ID_ATI_RADEON_LX  macro  include/linux/pci_ids.h  342  #define PCI_DEVICE_ID_ATI_RADEON_LX 0x4c58
PCI_DEVICE_ID_ATI_RADEON_Ld  macro  include/linux/pci_ids.h  344  #define PCI_DEVICE_ID_ATI_RADEON_Ld 0x4c64
PCI_DEVICE_ID_ATI_RADEON_Le  macro  include/linux/pci_ids.h  345  #define PCI_DEVICE_ID_ATI_RADEON_Le 0x4c65
PCI_DEVICE_ID_ATI_RADEON_Lf  macro  include/linux/pci_ids.h  346  #define PCI_DEVICE_ID_ATI_RADEON_Lf 0x4c66
PCI_DEVICE_ID_ATI_RADEON_Lg  macro  include/linux/pci_ids.h  347  #define PCI_DEVICE_ID_ATI_RADEON_Lg 0x4c67
PCI_DEVICE_ID_ATI_RS100  macro  include/linux/pci_ids.h  350  #define PCI_DEVICE_ID_ATI_RS100 0xcab0
PCI_DEVICE_ID_ATI_RS200  macro  include/linux/pci_ids.h  351  #define PCI_DEVICE_ID_ATI_RS200 0xcab2
PCI_DEVICE_ID_ATI_RS200_B  macro  include/linux/pci_ids.h  352  #define PCI_DEVICE_ID_ATI_RS200_B 0xcbb2
PCI_DEVICE_ID_ATI_RS250  macro  include/linux/pci_ids.h  353  #define PCI_DEVICE_ID_ATI_RS250 0xcab3
PCI_DEVICE_ID_ATI_RS300_100  macro  include/linux/pci_ids.h  354  #define PCI_DEVICE_ID_ATI_RS300_100 0x5830
PCI_DEVICE_ID_ATI_RS300_133  macro  include/linux/pci_ids.h  355  #define PCI_DEVICE_ID_ATI_RS300_133 0x5831
PCI_DEVICE_ID_ATI_RS300_166  macro  include/linux/pci_ids.h  356  #define PCI_DEVICE_ID_ATI_RS300_166 0x5832
PCI_DEVICE_ID_ATI_RS300_200  macro  include/linux/pci_ids.h  357  #define PCI_DEVICE_ID_ATI_RS300_200 0x5833
PCI_DEVICE_ID_ATI_RS350_100  macro  include/linux/pci_ids.h  358  #define PCI_DEVICE_ID_ATI_RS350_100 0x7830
PCI_DEVICE_ID_ATI_RS350_133  macro  include/linux/pci_ids.h  359  #define PCI_DEVICE_ID_ATI_RS350_133 0x7831
PCI_DEVICE_ID_ATI_RS350_166  macro  include/linux/pci_ids.h  360  #define PCI_DEVICE_ID_ATI_RS350_166 0x7832
PCI_DEVICE_ID_ATI_RS350_200  macro  include/linux/pci_ids.h  361  #define PCI_DEVICE_ID_ATI_RS350_200 0x7833
PCI_DEVICE_ID_ATI_RS400_100  macro  include/linux/pci_ids.h  362  #define PCI_DEVICE_ID_ATI_RS400_100 0x5a30
PCI_DEVICE_ID_ATI_RS400_133  macro  include/linux/pci_ids.h  363  #define PCI_DEVICE_ID_ATI_RS400_133 0x5a31
PCI_DEVICE_ID_ATI_RS400_166  macro  include/linux/pci_ids.h  364  #define PCI_DEVICE_ID_ATI_RS400_166 0x5a32
PCI_DEVICE_ID_ATI_RS400_200  macro  include/linux/pci_ids.h  365  #define PCI_DEVICE_ID_ATI_RS400_200 0x5a33
PCI_DEVICE_ID_ATI_RS480  macro  include/linux/pci_ids.h  366  #define PCI_DEVICE_ID_ATI_RS480 0x5950
PCI_DEVICE_ID_ATI_IXP200_IDE  macro  include/linux/pci_ids.h  368  #define PCI_DEVICE_ID_ATI_IXP200_IDE 0x4349
PCI_DEVICE_ID_ATI_IXP200_SMBUS  macro  include/linux/pci_ids.h  369  #define PCI_DEVICE_ID_ATI_IXP200_SMBUS 0x4353
PCI_DEVICE_ID_ATI_IXP300_SMBUS  macro  include/linux/pci_ids.h  370  #define PCI_DEVICE_ID_ATI_IXP300_SMBUS 0x4363
PCI_DEVICE_ID_ATI_IXP300_IDE  macro  include/linux/pci_ids.h  371  #define PCI_DEVICE_ID_ATI_IXP300_IDE 0x4369
PCI_DEVICE_ID_ATI_IXP300_SATA  macro  include/linux/pci_ids.h  372  #define PCI_DEVICE_ID_ATI_IXP300_SATA 0x436e
PCI_DEVICE_ID_ATI_IXP400_SMBUS  macro  include/linux/pci_ids.h  373  #define PCI_DEVICE_ID_ATI_IXP400_SMBUS 0x4372
PCI_DEVICE_ID_ATI_IXP400_IDE  macro  include/linux/pci_ids.h  374  #define PCI_DEVICE_ID_ATI_IXP400_IDE 0x4376
PCI_DEVICE_ID_ATI_IXP400_SATA  macro  include/linux/pci_ids.h  375  #define PCI_DEVICE_ID_ATI_IXP400_SATA 0x4379
PCI_DEVICE_ID_ATI_IXP400_SATA2  macro  include/linux/pci_ids.h  376  #define PCI_DEVICE_ID_ATI_IXP400_SATA2 0x437a
PCI_DEVICE_ID_ATI_IXP600_SATA  macro  include/linux/pci_ids.h  377  #define PCI_DEVICE_ID_ATI_IXP600_SATA 0x4380
PCI_DEVICE_ID_ATI_SBX00_SMBUS  macro  include/linux/pci_ids.h  378  #define PCI_DEVICE_ID_ATI_SBX00_SMBUS 0x4385
PCI_DEVICE_ID_ATI_IXP600_IDE  macro  include/linux/pci_ids.h  379  #define PCI_DEVICE_ID_ATI_IXP600_IDE 0x438c
PCI_DEVICE_ID_ATI_IXP700_SATA  macro  include/linux/pci_ids.h  380  #define PCI_DEVICE_ID_ATI_IXP700_SATA 0x4390
PCI_DEVICE_ID_ATI_IXP700_IDE  macro  include/linux/pci_ids.h  381  #define PCI_DEVICE_ID_ATI_IXP700_IDE 0x439c
PCI_VENDOR_ID_VLSI  macro  include/linux/pci_ids.h  383  #define PCI_VENDOR_ID_VLSI 0x1004
PCI_DEVICE_ID_VLSI_82C592  macro  include/linux/pci_ids.h  384  #define PCI_DEVICE_ID_VLSI_82C592 0x0005
PCI_DEVICE_ID_VLSI_82C593  macro  include/linux/pci_ids.h  385  #define PCI_DEVICE_ID_VLSI_82C593 0x0006
PCI_DEVICE_ID_VLSI_82C594  macro  include/linux/pci_ids.h  386  #define PCI_DEVICE_ID_VLSI_82C594 0x0007
PCI_DEVICE_ID_VLSI_82C597  macro  include/linux/pci_ids.h  387  #define PCI_DEVICE_ID_VLSI_82C597 0x0009
PCI_DEVICE_ID_VLSI_82C541  macro  include/linux/pci_ids.h  388  #define PCI_DEVICE_ID_VLSI_82C541 0x000c
PCI_DEVICE_ID_VLSI_82C543  macro  include/linux/pci_ids.h  389  #define PCI_DEVICE_ID_VLSI_82C543 0x000d
PCI_DEVICE_ID_VLSI_82C532  macro  include/linux/pci_ids.h  390  #define PCI_DEVICE_ID_VLSI_82C532 0x0101
PCI_DEVICE_ID_VLSI_82C534  macro  include/linux/pci_ids.h  391  #define PCI_DEVICE_ID_VLSI_82C534 0x0102
PCI_DEVICE_ID_VLSI_82C535  macro  include/linux/pci_ids.h  392  #define PCI_DEVICE_ID_VLSI_82C535 0x0104
PCI_DEVICE_ID_VLSI_82C147  macro  include/linux/pci_ids.h  393  #define PCI_DEVICE_ID_VLSI_82C147 0x0105
PCI_DEVICE_ID_VLSI_VAS96011  macro  include/linux/pci_ids.h  394  #define PCI_DEVICE_ID_VLSI_VAS96011 0x0702
PCI_DEVICE_ID_RD890_IOMMU  macro  include/linux/pci_ids.h  397  #define PCI_DEVICE_ID_RD890_IOMMU 0x5a23
PCI_VENDOR_ID_ADL  macro  include/linux/pci_ids.h  399  #define PCI_VENDOR_ID_ADL 0x1005
PCI_DEVICE_ID_ADL_2301  macro  include/linux/pci_ids.h  400  #define PCI_DEVICE_ID_ADL_2301 0x2301
PCI_VENDOR_ID_NS  macro  include/linux/pci_ids.h  402  #define PCI_VENDOR_ID_NS 0x100b
PCI_DEVICE_ID_NS_87415  macro  include/linux/pci_ids.h  403  #define PCI_DEVICE_ID_NS_87415 0x0002
PCI_DEVICE_ID_NS_87560_LIO  macro  include/linux/pci_ids.h  404  #define PCI_DEVICE_ID_NS_87560_LIO 0x000e
PCI_DEVICE_ID_NS_87560_USB  macro  include/linux/pci_ids.h  405  #define PCI_DEVICE_ID_NS_87560_USB 0x0012
PCI_DEVICE_ID_NS_83815  macro  include/linux/pci_ids.h  406  #define PCI_DEVICE_ID_NS_83815 0x0020
PCI_DEVICE_ID_NS_83820  macro  include/linux/pci_ids.h  407  #define PCI_DEVICE_ID_NS_83820 0x0022
PCI_DEVICE_ID_NS_CS5535_ISA  macro  include/linux/pci_ids.h  408  #define PCI_DEVICE_ID_NS_CS5535_ISA 0x002b
PCI_DEVICE_ID_NS_CS5535_IDE  macro  include/linux/pci_ids.h  409  #define PCI_DEVICE_ID_NS_CS5535_IDE 0x002d
PCI_DEVICE_ID_NS_CS5535_AUDIO  macro  include/linux/pci_ids.h  410  #define PCI_DEVICE_ID_NS_CS5535_AUDIO 0x002e
PCI_DEVICE_ID_NS_CS5535_USB  macro  include/linux/pci_ids.h  411  #define PCI_DEVICE_ID_NS_CS5535_USB 0x002f
PCI_DEVICE_ID_NS_GX_VIDEO  macro  include/linux/pci_ids.h  412  #define PCI_DEVICE_ID_NS_GX_VIDEO 0x0030
PCI_DEVICE_ID_NS_SATURN  macro  include/linux/pci_ids.h  413  #define PCI_DEVICE_ID_NS_SATURN 0x0035
PCI_DEVICE_ID_NS_SCx200_BRIDGE  macro  include/linux/pci_ids.h  414  #define PCI_DEVICE_ID_NS_SCx200_BRIDGE 0x0500
PCI_DEVICE_ID_NS_SCx200_SMI  macro  include/linux/pci_ids.h  415  #define PCI_DEVICE_ID_NS_SCx200_SMI 0x0501
PCI_DEVICE_ID_NS_SCx200_IDE  macro  include/linux/pci_ids.h  416  #define PCI_DEVICE_ID_NS_SCx200_IDE 0x0502
PCI_DEVICE_ID_NS_SCx200_AUDIO  macro  include/linux/pci_ids.h  417  #define PCI_DEVICE_ID_NS_SCx200_AUDIO 0x0503
PCI_DEVICE_ID_NS_SCx200_VIDEO  macro  include/linux/pci_ids.h  418  #define PCI_DEVICE_ID_NS_SCx200_VIDEO 0x0504
PCI_DEVICE_ID_NS_SCx200_XBUS  macro  include/linux/pci_ids.h  419  #define PCI_DEVICE_ID_NS_SCx200_XBUS 0x0505
PCI_DEVICE_ID_NS_SC1100_BRIDGE  macro  include/linux/pci_ids.h  420  #define PCI_DEVICE_ID_NS_SC1100_BRIDGE 0x0510
PCI_DEVICE_ID_NS_SC1100_SMI  macro  include/linux/pci_ids.h  421  #define PCI_DEVICE_ID_NS_SC1100_SMI 0x0511
PCI_DEVICE_ID_NS_SC1100_XBUS  macro  include/linux/pci_ids.h  422  #define PCI_DEVICE_ID_NS_SC1100_XBUS 0x0515
PCI_DEVICE_ID_NS_87410  macro  include/linux/pci_ids.h  423  #define PCI_DEVICE_ID_NS_87410 0xd001
PCI_DEVICE_ID_NS_GX_HOST_BRIDGE  macro  include/linux/pci_ids.h  425  #define PCI_DEVICE_ID_NS_GX_HOST_BRIDGE 0x0028
PCI_VENDOR_ID_TSENG  macro  include/linux/pci_ids.h  427  #define PCI_VENDOR_ID_TSENG 0x100c
PCI_DEVICE_ID_TSENG_W32P_2  macro  include/linux/pci_ids.h  428  #define PCI_DEVICE_ID_TSENG_W32P_2 0x3202
PCI_DEVICE_ID_TSENG_W32P_b  macro  include/linux/pci_ids.h  429  #define PCI_DEVICE_ID_TSENG_W32P_b 0x3205
PCI_DEVICE_ID_TSENG_W32P_c  macro  include/linux/pci_ids.h  430  #define PCI_DEVICE_ID_TSENG_W32P_c 0x3206
PCI_DEVICE_ID_TSENG_W32P_d  macro  include/linux/pci_ids.h  431  #define PCI_DEVICE_ID_TSENG_W32P_d 0x3207
PCI_DEVICE_ID_TSENG_ET6000  macro  include/linux/pci_ids.h  432  #define PCI_DEVICE_ID_TSENG_ET6000 0x3208
PCI_VENDOR_ID_WEITEK  macro  include/linux/pci_ids.h  434  #define PCI_VENDOR_ID_WEITEK 0x100e
PCI_DEVICE_ID_WEITEK_P9000  macro  include/linux/pci_ids.h  435  #define PCI_DEVICE_ID_WEITEK_P9000 0x9001
PCI_DEVICE_ID_WEITEK_P9100  macro  include/linux/pci_ids.h  436  #define PCI_DEVICE_ID_WEITEK_P9100 0x9100
PCI_VENDOR_ID_DEC  macro  include/linux/pci_ids.h  438  #define PCI_VENDOR_ID_DEC 0x1011
PCI_DEVICE_ID_DEC_BRD  macro  include/linux/pci_ids.h  439  #define PCI_DEVICE_ID_DEC_BRD 0x0001
PCI_DEVICE_ID_DEC_TULIP  macro  include/linux/pci_ids.h  440  #define PCI_DEVICE_ID_DEC_TULIP 0x0002
PCI_DEVICE_ID_DEC_TGA  macro  include/linux/pci_ids.h  441  #define PCI_DEVICE_ID_DEC_TGA 0x0004
PCI_DEVICE_ID_DEC_TULIP_FAST  macro  include/linux/pci_ids.h  442  #define PCI_DEVICE_ID_DEC_TULIP_FAST 0x0009
PCI_DEVICE_ID_DEC_TGA2  macro  include/linux/pci_ids.h  443  #define PCI_DEVICE_ID_DEC_TGA2 0x000D
PCI_DEVICE_ID_DEC_FDDI  macro  include/linux/pci_ids.h  444  #define PCI_DEVICE_ID_DEC_FDDI 0x000F
PCI_DEVICE_ID_DEC_TULIP_PLUS  macro  include/linux/pci_ids.h  445  #define PCI_DEVICE_ID_DEC_TULIP_PLUS 0x0014
PCI_DEVICE_ID_DEC_21142  macro  include/linux/pci_ids.h  446  #define PCI_DEVICE_ID_DEC_21142 0x0019
PCI_DEVICE_ID_DEC_21052  macro  include/linux/pci_ids.h  447  #define PCI_DEVICE_ID_DEC_21052 0x0021
PCI_DEVICE_ID_DEC_21150  macro  include/linux/pci_ids.h  448  #define PCI_DEVICE_ID_DEC_21150 0x0022
PCI_DEVICE_ID_DEC_21152  macro  include/linux/pci_ids.h  449  #define PCI_DEVICE_ID_DEC_21152 0x0024
PCI_DEVICE_ID_DEC_21153  macro  include/linux/pci_ids.h  450  #define PCI_DEVICE_ID_DEC_21153 0x0025
PCI_DEVICE_ID_DEC_21154  macro  include/linux/pci_ids.h  451  #define PCI_DEVICE_ID_DEC_21154 0x0026
PCI_DEVICE_ID_DEC_21285  macro  include/linux/pci_ids.h  452  #define PCI_DEVICE_ID_DEC_21285 0x1065
PCI_DEVICE_ID_COMPAQ_42XX  macro  include/linux/pci_ids.h  453  #define PCI_DEVICE_ID_COMPAQ_42XX 0x0046
PCI_VENDOR_ID_CIRRUS  macro  include/linux/pci_ids.h  455  #define PCI_VENDOR_ID_CIRRUS 0x1013
PCI_DEVICE_ID_CIRRUS_7548  macro  include/linux/pci_ids.h  456  #define PCI_DEVICE_ID_CIRRUS_7548 0x0038
PCI_DEVICE_ID_CIRRUS_5430  macro  include/linux/pci_ids.h  457  #define PCI_DEVICE_ID_CIRRUS_5430 0x00a0
PCI_DEVICE_ID_CIRRUS_5434_4  macro  include/linux/pci_ids.h  458  #define PCI_DEVICE_ID_CIRRUS_5434_4 0x00a4
PCI_DEVICE_ID_CIRRUS_5434_8  macro  include/linux/pci_ids.h  459  #define PCI_DEVICE_ID_CIRRUS_5434_8 0x00a8
PCI_DEVICE_ID_CIRRUS_5436  macro  include/linux/pci_ids.h  460  #define PCI_DEVICE_ID_CIRRUS_5436 0x00ac
PCI_DEVICE_ID_CIRRUS_5446  macro  include/linux/pci_ids.h  461  #define PCI_DEVICE_ID_CIRRUS_5446 0x00b8
PCI_DEVICE_ID_CIRRUS_5480  macro  include/linux/pci_ids.h  462  #define PCI_DEVICE_ID_CIRRUS_5480 0x00bc
PCI_DEVICE_ID_CIRRUS_5462  macro  include/linux/pci_ids.h  463  #define PCI_DEVICE_ID_CIRRUS_5462 0x00d0
PCI_DEVICE_ID_CIRRUS_5464  macro  include/linux/pci_ids.h  464  #define PCI_DEVICE_ID_CIRRUS_5464 0x00d4
PCI_DEVICE_ID_CIRRUS_5465  macro  include/linux/pci_ids.h  465  #define PCI_DEVICE_ID_CIRRUS_5465 0x00d6
PCI_DEVICE_ID_CIRRUS_6729  macro  include/linux/pci_ids.h  466  #define PCI_DEVICE_ID_CIRRUS_6729 0x1100
PCI_DEVICE_ID_CIRRUS_6832  macro  include/linux/pci_ids.h  467  #define PCI_DEVICE_ID_CIRRUS_6832 0x1110
PCI_DEVICE_ID_CIRRUS_7543  macro  include/linux/pci_ids.h  468  #define PCI_DEVICE_ID_CIRRUS_7543 0x1202
PCI_DEVICE_ID_CIRRUS_4610  macro  include/linux/pci_ids.h  469  #define PCI_DEVICE_ID_CIRRUS_4610 0x6001
PCI_DEVICE_ID_CIRRUS_4612  macro  include/linux/pci_ids.h  470  #define PCI_DEVICE_ID_CIRRUS_4612 0x6003
PCI_DEVICE_ID_CIRRUS_4615  macro  include/linux/pci_ids.h  471  #define PCI_DEVICE_ID_CIRRUS_4615 0x6004
PCI_VENDOR_ID_IBM  macro  include/linux/pci_ids.h  473  #define PCI_VENDOR_ID_IBM 0x1014
PCI_DEVICE_ID_IBM_TR  macro  include/linux/pci_ids.h  474  #define PCI_DEVICE_ID_IBM_TR 0x0018
PCI_DEVICE_ID_IBM_TR_WAKE  macro  include/linux/pci_ids.h  475  #define PCI_DEVICE_ID_IBM_TR_WAKE 0x003e
PCI_DEVICE_ID_IBM_CPC710_PCI64  macro  include/linux/pci_ids.h  476  #define PCI_DEVICE_ID_IBM_CPC710_PCI64 0x00fc
PCI_DEVICE_ID_IBM_SNIPE  macro  include/linux/pci_ids.h  477  #define PCI_DEVICE_ID_IBM_SNIPE 0x0180
PCI_DEVICE_ID_IBM_CITRINE  macro  include/linux/pci_ids.h  478  #define PCI_DEVICE_ID_IBM_CITRINE 0x028C
PCI_DEVICE_ID_IBM_GEMSTONE  macro  include/linux/pci_ids.h  479  #define PCI_DEVICE_ID_IBM_GEMSTONE 0xB166
PCI_DEVICE_ID_IBM_OBSIDIAN  macro  include/linux/pci_ids.h  480  #define PCI_DEVICE_ID_IBM_OBSIDIAN 0x02BD
PCI_DEVICE_ID_IBM_ICOM_DEV_ID_1  macro  include/linux/pci_ids.h  481  #define PCI_DEVICE_ID_IBM_ICOM_DEV_ID_1 0x0031
PCI_DEVICE_ID_IBM_ICOM_DEV_ID_2  macro  include/linux/pci_ids.h  482  #define PCI_DEVICE_ID_IBM_ICOM_DEV_ID_2 0x0219
PCI_DEVICE_ID_IBM_ICOM_V2_TWO_PORTS_RVX  macro  include/linux/pci_ids.h  483  #define PCI_DEVICE_ID_IBM_ICOM_V2_TWO_PORTS_RVX 0x021A
PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM  macro  include/linux/pci_ids.h  484  #define PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM 0x0251
PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM_PCIE  macro  include/linux/pci_ids.h  485  #define PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM_PCIE 0x0361
PCI_DEVICE_ID_IBM_ICOM_FOUR_PORT_MODEL  macro  include/linux/pci_ids.h  486  #define PCI_DEVICE_ID_IBM_ICOM_FOUR_PORT_MODEL 0x252
PCI_SUBVENDOR_ID_IBM  macro  include/linux/pci_ids.h  488  #define PCI_SUBVENDOR_ID_IBM 0x1014
PCI_SUBDEVICE_ID_IBM_SATURN_SERIAL_ONE_PORT  macro  include/linux/pci_ids.h  489  #define PCI_SUBDEVICE_ID_IBM_SATURN_SERIAL_ONE_PORT 0x03d4
PCI_VENDOR_ID_UNISYS  macro  include/linux/pci_ids.h  491  #define PCI_VENDOR_ID_UNISYS 0x1018
PCI_DEVICE_ID_UNISYS_DMA_DIRECTOR  macro  include/linux/pci_ids.h  492  #define PCI_DEVICE_ID_UNISYS_DMA_DIRECTOR 0x001C
PCI_VENDOR_ID_COMPEX2  macro  include/linux/pci_ids.h  494  #define PCI_VENDOR_ID_COMPEX2 0x101a
PCI_DEVICE_ID_COMPEX2_100VG  macro  include/linux/pci_ids.h  495  #define PCI_DEVICE_ID_COMPEX2_100VG 0x0005
PCI_VENDOR_ID_WD  macro  include/linux/pci_ids.h  497  #define PCI_VENDOR_ID_WD 0x101c
PCI_DEVICE_ID_WD_90C  macro  include/linux/pci_ids.h  498  #define PCI_DEVICE_ID_WD_90C 0xc24a
PCI_VENDOR_ID_AMI  macro  include/linux/pci_ids.h  500  #define PCI_VENDOR_ID_AMI 0x101e
PCI_DEVICE_ID_AMI_MEGARAID3  macro  include/linux/pci_ids.h  501  #define PCI_DEVICE_ID_AMI_MEGARAID3 0x1960
PCI_DEVICE_ID_AMI_MEGARAID  macro  include/linux/pci_ids.h  502  #define PCI_DEVICE_ID_AMI_MEGARAID 0x9010
PCI_DEVICE_ID_AMI_MEGARAID2  macro  include/linux/pci_ids.h  503  #define PCI_DEVICE_ID_AMI_MEGARAID2 0x9060
PCI_VENDOR_ID_AMD  macro  include/linux/pci_ids.h  505  #define PCI_VENDOR_ID_AMD 0x1022
PCI_DEVICE_ID_AMD_K8_NB  macro  include/linux/pci_ids.h  506  #define PCI_DEVICE_ID_AMD_K8_NB 0x1100
PCI_DEVICE_ID_AMD_K8_NB_ADDRMAP  macro  include/linux/pci_ids.h  507  #define PCI_DEVICE_ID_AMD_K8_NB_ADDRMAP 0x1101
PCI_DEVICE_ID_AMD_K8_NB_MEMCTL  macro  include/linux/pci_ids.h  508  #define PCI_DEVICE_ID_AMD_K8_NB_MEMCTL 0x1102
PCI_DEVICE_ID_AMD_K8_NB_MISC  macro  include/linux/pci_ids.h  509  #define PCI_DEVICE_ID_AMD_K8_NB_MISC 0x1103
PCI_DEVICE_ID_AMD_10H_NB_HT  macro  include/linux/pci_ids.h  510  #define PCI_DEVICE_ID_AMD_10H_NB_HT 0x1200
PCI_DEVICE_ID_AMD_10H_NB_MAP  macro  include/linux/pci_ids.h  511  #define PCI_DEVICE_ID_AMD_10H_NB_MAP 0x1201
PCI_DEVICE_ID_AMD_10H_NB_DRAM  macro  include/linux/pci_ids.h  512  #define PCI_DEVICE_ID_AMD_10H_NB_DRAM 0x1202
PCI_DEVICE_ID_AMD_10H_NB_MISC  macro  include/linux/pci_ids.h  513  #define PCI_DEVICE_ID_AMD_10H_NB_MISC 0x1203
PCI_DEVICE_ID_AMD_10H_NB_LINK  macro  include/linux/pci_ids.h  514  #define PCI_DEVICE_ID_AMD_10H_NB_LINK 0x1204
PCI_DEVICE_ID_AMD_11H_NB_HT  macro  include/linux/pci_ids.h  515  #define PCI_DEVICE_ID_AMD_11H_NB_HT 0x1300
PCI_DEVICE_ID_AMD_11H_NB_MAP  macro  include/linux/pci_ids.h  516  #define PCI_DEVICE_ID_AMD_11H_NB_MAP 0x1301
PCI_DEVICE_ID_AMD_11H_NB_DRAM  macro  include/linux/pci_ids.h  517  #define PCI_DEVICE_ID_AMD_11H_NB_DRAM 0x1302
PCI_DEVICE_ID_AMD_11H_NB_MISC  macro  include/linux/pci_ids.h  518  #define PCI_DEVICE_ID_AMD_11H_NB_MISC 0x1303
PCI_DEVICE_ID_AMD_11H_NB_LINK  macro  include/linux/pci_ids.h  519  #define PCI_DEVICE_ID_AMD_11H_NB_LINK 0x1304
PCI_DEVICE_ID_AMD_15H_M10H_F3  macro  include/linux/pci_ids.h  520  #define PCI_DEVICE_ID_AMD_15H_M10H_F3 0x1403
PCI_DEVICE_ID_AMD_15H_NB_F0  macro  include/linux/pci_ids.h  521  #define PCI_DEVICE_ID_AMD_15H_NB_F0 0x1600
PCI_DEVICE_ID_AMD_15H_NB_F1  macro  include/linux/pci_ids.h  522  #define PCI_DEVICE_ID_AMD_15H_NB_F1 0x1601
PCI_DEVICE_ID_AMD_15H_NB_F2  macro  include/linux/pci_ids.h  523  #define PCI_DEVICE_ID_AMD_15H_NB_F2 0x1602
PCI_DEVICE_ID_AMD_15H_NB_F3  macro  include/linux/pci_ids.h  524  #define PCI_DEVICE_ID_AMD_15H_NB_F3 0x1603
PCI_DEVICE_ID_AMD_15H_NB_F4  macro  include/linux/pci_ids.h  525  #define PCI_DEVICE_ID_AMD_15H_NB_F4 0x1604
PCI_DEVICE_ID_AMD_15H_NB_F5  macro  include/linux/pci_ids.h  526  #define PCI_DEVICE_ID_AMD_15H_NB_F5 0x1605
PCI_DEVICE_ID_AMD_CNB17H_F3  macro  include/linux/pci_ids.h  527  #define PCI_DEVICE_ID_AMD_CNB17H_F3 0x1703
PCI_DEVICE_ID_AMD_LANCE  macro  include/linux/pci_ids.h  528  #define PCI_DEVICE_ID_AMD_LANCE 0x2000
PCI_DEVICE_ID_AMD_LANCE_HOME  macro  include/linux/pci_ids.h  529  #define PCI_DEVICE_ID_AMD_LANCE_HOME 0x2001
PCI_DEVICE_ID_AMD_SCSI  macro  include/linux/pci_ids.h  530  #define PCI_DEVICE_ID_AMD_SCSI 0x2020
PCI_DEVICE_ID_AMD_SERENADE  macro  include/linux/pci_ids.h  531  #define PCI_DEVICE_ID_AMD_SERENADE 0x36c0
PCI_DEVICE_ID_AMD_FE_GATE_7006  macro  include/linux/pci_ids.h  532  #define PCI_DEVICE_ID_AMD_FE_GATE_7006 0x7006
PCI_DEVICE_ID_AMD_FE_GATE_7007  macro  include/linux/pci_ids.h  533  #define PCI_DEVICE_ID_AMD_FE_GATE_7007 0x7007
PCI_DEVICE_ID_AMD_FE_GATE_700C  macro  include/linux/pci_ids.h  534  #define PCI_DEVICE_ID_AMD_FE_GATE_700C 0x700C
PCI_DEVICE_ID_AMD_FE_GATE_700E  macro  include/linux/pci_ids.h  535  #define PCI_DEVICE_ID_AMD_FE_GATE_700E 0x700E
PCI_DEVICE_ID_AMD_COBRA_7401  macro  include/linux/pci_ids.h  536  #define PCI_DEVICE_ID_AMD_COBRA_7401 0x7401
PCI_DEVICE_ID_AMD_VIPER_7409  macro  include/linux/pci_ids.h  537  #define PCI_DEVICE_ID_AMD_VIPER_7409 0x7409
PCI_DEVICE_ID_AMD_VIPER_740B  macro  include/linux/pci_ids.h  538  #define PCI_DEVICE_ID_AMD_VIPER_740B 0x740B
PCI_DEVICE_ID_AMD_VIPER_7410  macro  include/linux/pci_ids.h  539  #define PCI_DEVICE_ID_AMD_VIPER_7410 0x7410
PCI_DEVICE_ID_AMD_VIPER_7411  macro  include/linux/pci_ids.h  540  #define PCI_DEVICE_ID_AMD_VIPER_7411 0x7411
PCI_DEVICE_ID_AMD_VIPER_7413  macro  include/linux/pci_ids.h  541  #define PCI_DEVICE_ID_AMD_VIPER_7413 0x7413
PCI_DEVICE_ID_AMD_VIPER_7440  macro  include/linux/pci_ids.h  542  #define PCI_DEVICE_ID_AMD_VIPER_7440 0x7440
PCI_DEVICE_ID_AMD_OPUS_7441  macro  include/linux/pci_ids.h  543  #define PCI_DEVICE_ID_AMD_OPUS_7441 0x7441
PCI_DEVICE_ID_AMD_OPUS_7443  macro  include/linux/pci_ids.h  544  #define PCI_DEVICE_ID_AMD_OPUS_7443 0x7443
PCI_DEVICE_ID_AMD_VIPER_7443  macro  include/linux/pci_ids.h  545  #define PCI_DEVICE_ID_AMD_VIPER_7443 0x7443
PCI_DEVICE_ID_AMD_OPUS_7445  macro  include/linux/pci_ids.h  546  #define PCI_DEVICE_ID_AMD_OPUS_7445 0x7445
PCI_DEVICE_ID_AMD_8111_PCI  macro  include/linux/pci_ids.h  547  #define PCI_DEVICE_ID_AMD_8111_PCI 0x7460
PCI_DEVICE_ID_AMD_8111_LPC  macro  include/linux/pci_ids.h  548  #define PCI_DEVICE_ID_AMD_8111_LPC 0x7468
PCI_DEVICE_ID_AMD_8111_IDE  macro  include/linux/pci_ids.h  549  #define PCI_DEVICE_ID_AMD_8111_IDE 0x7469
PCI_DEVICE_ID_AMD_8111_SMBUS2  macro  include/linux/pci_ids.h  550  #define PCI_DEVICE_ID_AMD_8111_SMBUS2 0x746a
PCI_DEVICE_ID_AMD_8111_SMBUS  macro  include/linux/pci_ids.h  551  #define PCI_DEVICE_ID_AMD_8111_SMBUS 0x746b
PCI_DEVICE_ID_AMD_8111_AUDIO  macro  include/linux/pci_ids.h  552  #define PCI_DEVICE_ID_AMD_8111_AUDIO 0x746d
PCI_DEVICE_ID_AMD_8151_0  macro  include/linux/pci_ids.h  553  #define PCI_DEVICE_ID_AMD_8151_0 0x7454
PCI_DEVICE_ID_AMD_8131_BRIDGE  macro  include/linux/pci_ids.h  554  #define PCI_DEVICE_ID_AMD_8131_BRIDGE 0x7450
PCI_DEVICE_ID_AMD_8131_APIC  macro  include/linux/pci_ids.h  555  #define PCI_DEVICE_ID_AMD_8131_APIC 0x7451
PCI_DEVICE_ID_AMD_8132_BRIDGE  macro  include/linux/pci_ids.h  556  #define PCI_DEVICE_ID_AMD_8132_BRIDGE 0x7458
PCI_DEVICE_ID_AMD_HUDSON2_SMBUS  macro  include/linux/pci_ids.h  557  #define PCI_DEVICE_ID_AMD_HUDSON2_SMBUS 0x780b
PCI_DEVICE_ID_AMD_CS5535_IDE  macro  include/linux/pci_ids.h  558  #define PCI_DEVICE_ID_AMD_CS5535_IDE 0x208F
PCI_DEVICE_ID_AMD_CS5536_ISA  macro  include/linux/pci_ids.h  559  #define PCI_DEVICE_ID_AMD_CS5536_ISA 0x2090
PCI_DEVICE_ID_AMD_CS5536_FLASH  macro  include/linux/pci_ids.h  560  #define PCI_DEVICE_ID_AMD_CS5536_FLASH 0x2091
PCI_DEVICE_ID_AMD_CS5536_AUDIO  macro  include/linux/pci_ids.h  561  #define PCI_DEVICE_ID_AMD_CS5536_AUDIO 0x2093
PCI_DEVICE_ID_AMD_CS5536_OHC  macro  include/linux/pci_ids.h  562  #define PCI_DEVICE_ID_AMD_CS5536_OHC 0x2094
PCI_DEVICE_ID_AMD_CS5536_EHC  macro  include/linux/pci_ids.h  563  #define PCI_DEVICE_ID_AMD_CS5536_EHC 0x2095
PCI_DEVICE_ID_AMD_CS5536_UDC  macro  include/linux/pci_ids.h  564  #define PCI_DEVICE_ID_AMD_CS5536_UDC 0x2096
PCI_DEVICE_ID_AMD_CS5536_UOC  macro  include/linux/pci_ids.h  565  #define PCI_DEVICE_ID_AMD_CS5536_UOC 0x2097
PCI_DEVICE_ID_AMD_CS5536_IDE  macro  include/linux/pci_ids.h  566  #define PCI_DEVICE_ID_AMD_CS5536_IDE 0x209A
PCI_DEVICE_ID_AMD_LX_VIDEO  macro  include/linux/pci_ids.h  567  #define PCI_DEVICE_ID_AMD_LX_VIDEO 0x2081
PCI_DEVICE_ID_AMD_LX_AES  macro  include/linux/pci_ids.h  568  #define PCI_DEVICE_ID_AMD_LX_AES 0x2082
PCI_DEVICE_ID_AMD_HUDSON2_IDE  macro  include/linux/pci_ids.h  569  #define PCI_DEVICE_ID_AMD_HUDSON2_IDE 0x780c
PCI_DEVICE_ID_AMD_HUDSON2_SATA_IDE  macro  include/linux/pci_ids.h  570  #define PCI_DEVICE_ID_AMD_HUDSON2_SATA_IDE 0x7800
PCI_VENDOR_ID_TRIDENT  macro  include/linux/pci_ids.h  572  #define PCI_VENDOR_ID_TRIDENT 0x1023
PCI_DEVICE_ID_TRIDENT_4DWAVE_DX  macro  include/linux/pci_ids.h  573  #define PCI_DEVICE_ID_TRIDENT_4DWAVE_DX 0x2000
PCI_DEVICE_ID_TRIDENT_4DWAVE_NX  macro  include/linux/pci_ids.h  574  #define PCI_DEVICE_ID_TRIDENT_4DWAVE_NX 0x2001
PCI_DEVICE_ID_TRIDENT_9320  macro  include/linux/pci_ids.h  575  #define PCI_DEVICE_ID_TRIDENT_9320 0x9320
PCI_DEVICE_ID_TRIDENT_9388  macro  include/linux/pci_ids.h  576  #define PCI_DEVICE_ID_TRIDENT_9388 0x9388
PCI_DEVICE_ID_TRIDENT_9397  macro  include/linux/pci_ids.h  577  #define PCI_DEVICE_ID_TRIDENT_9397 0x9397
PCI_DEVICE_ID_TRIDENT_939A  macro  include/linux/pci_ids.h  578  #define PCI_DEVICE_ID_TRIDENT_939A 0x939A
PCI_DEVICE_ID_TRIDENT_9520  macro  include/linux/pci_ids.h  579  #define PCI_DEVICE_ID_TRIDENT_9520 0x9520
PCI_DEVICE_ID_TRIDENT_9525  macro  include/linux/pci_ids.h  580  #define PCI_DEVICE_ID_TRIDENT_9525 0x9525
PCI_DEVICE_ID_TRIDENT_9420  macro  include/linux/pci_ids.h  581  #define PCI_DEVICE_ID_TRIDENT_9420 0x9420
PCI_DEVICE_ID_TRIDENT_9440  macro  include/linux/pci_ids.h  582  #define PCI_DEVICE_ID_TRIDENT_9440 0x9440
PCI_DEVICE_ID_TRIDENT_9660  macro  include/linux/pci_ids.h  583  #define PCI_DEVICE_ID_TRIDENT_9660 0x9660
PCI_DEVICE_ID_TRIDENT_9750  macro  include/linux/pci_ids.h  584  #define PCI_DEVICE_ID_TRIDENT_9750 0x9750
PCI_DEVICE_ID_TRIDENT_9850  macro  include/linux/pci_ids.h  585  #define PCI_DEVICE_ID_TRIDENT_9850 0x9850
PCI_DEVICE_ID_TRIDENT_9880  macro  include/linux/pci_ids.h  586  #define PCI_DEVICE_ID_TRIDENT_9880 0x9880
PCI_DEVICE_ID_TRIDENT_8400  macro  include/linux/pci_ids.h  587  #define PCI_DEVICE_ID_TRIDENT_8400 0x8400
PCI_DEVICE_ID_TRIDENT_8420  macro  include/linux/pci_ids.h  588  #define PCI_DEVICE_ID_TRIDENT_8420 0x8420
PCI_DEVICE_ID_TRIDENT_8500  macro  include/linux/pci_ids.h  589  #define PCI_DEVICE_ID_TRIDENT_8500 0x8500
PCI_VENDOR_ID_AI  macro  include/linux/pci_ids.h  591  #define PCI_VENDOR_ID_AI 0x1025
PCI_DEVICE_ID_AI_M1435  macro  include/linux/pci_ids.h  592  #define PCI_DEVICE_ID_AI_M1435 0x1435
PCI_VENDOR_ID_DELL  macro  include/linux/pci_ids.h  594  #define PCI_VENDOR_ID_DELL 0x1028
PCI_DEVICE_ID_DELL_RACIII  macro  include/linux/pci_ids.h  595  #define PCI_DEVICE_ID_DELL_RACIII 0x0008
PCI_DEVICE_ID_DELL_RAC4  macro  include/linux/pci_ids.h  596  #define PCI_DEVICE_ID_DELL_RAC4 0x0012
PCI_DEVICE_ID_DELL_PERC5  macro  include/linux/pci_ids.h  597  #define PCI_DEVICE_ID_DELL_PERC5 0x0015
PCI_VENDOR_ID_MATROX  macro  include/linux/pci_ids.h  599  #define PCI_VENDOR_ID_MATROX 0x102B
PCI_DEVICE_ID_MATROX_MGA_2  macro  include/linux/pci_ids.h  600  #define PCI_DEVICE_ID_MATROX_MGA_2 0x0518
PCI_DEVICE_ID_MATROX_MIL  macro  include/linux/pci_ids.h  601  #define PCI_DEVICE_ID_MATROX_MIL 0x0519
PCI_DEVICE_ID_MATROX_MYS  macro  include/linux/pci_ids.h  602  #define PCI_DEVICE_ID_MATROX_MYS 0x051A
PCI_DEVICE_ID_MATROX_MIL_2  macro  include/linux/pci_ids.h  603  #define PCI_DEVICE_ID_MATROX_MIL_2 0x051b
PCI_DEVICE_ID_MATROX_MYS_AGP  macro  include/linux/pci_ids.h  604  #define PCI_DEVICE_ID_MATROX_MYS_AGP 0x051e
PCI_DEVICE_ID_MATROX_MIL_2_AGP  macro  include/linux/pci_ids.h  605  #define PCI_DEVICE_ID_MATROX_MIL_2_AGP 0x051f
PCI_DEVICE_ID_MATROX_MGA_IMP  macro  include/linux/pci_ids.h  606  #define PCI_DEVICE_ID_MATROX_MGA_IMP 0x0d10
PCI_DEVICE_ID_MATROX_G100_MM  macro  include/linux/pci_ids.h  607  #define PCI_DEVICE_ID_MATROX_G100_MM 0x1000
PCI_DEVICE_ID_MATROX_G100_AGP  macro  include/linux/pci_ids.h  608  #define PCI_DEVICE_ID_MATROX_G100_AGP 0x1001
PCI_DEVICE_ID_MATROX_G200_PCI  macro  include/linux/pci_ids.h  609  #define PCI_DEVICE_ID_MATROX_G200_PCI 0x0520
PCI_DEVICE_ID_MATROX_G200_AGP  macro  include/linux/pci_ids.h  610  #define PCI_DEVICE_ID_MATROX_G200_AGP 0x0521
PCI_DEVICE_ID_MATROX_G400  macro  include/linux/pci_ids.h  611  #define PCI_DEVICE_ID_MATROX_G400 0x0525
PCI_DEVICE_ID_MATROX_G200EV_PCI  macro  include/linux/pci_ids.h  612  #define PCI_DEVICE_ID_MATROX_G200EV_PCI 0x0530
PCI_DEVICE_ID_MATROX_G550  macro  include/linux/pci_ids.h  613  #define PCI_DEVICE_ID_MATROX_G550 0x2527
PCI_DEVICE_ID_MATROX_VIA  macro  include/linux/pci_ids.h  614  #define PCI_DEVICE_ID_MATROX_VIA 0x4536
PCI_VENDOR_ID_MOBILITY_ELECTRONICS  macro  include/linux/pci_ids.h  616  #define PCI_VENDOR_ID_MOBILITY_ELECTRONICS 0x14f2
PCI_VENDOR_ID_CT  macro  include/linux/pci_ids.h  618  #define PCI_VENDOR_ID_CT 0x102c
PCI_DEVICE_ID_CT_69000  macro  include/linux/pci_ids.h  619  #define PCI_DEVICE_ID_CT_69000 0x00c0
PCI_DEVICE_ID_CT_65545  macro  include/linux/pci_ids.h  620  #define PCI_DEVICE_ID_CT_65545 0x00d8
PCI_DEVICE_ID_CT_65548  macro  include/linux/pci_ids.h  621  #define PCI_DEVICE_ID_CT_65548 0x00dc
PCI_DEVICE_ID_CT_65550  macro  include/linux/pci_ids.h  622  #define PCI_DEVICE_ID_CT_65550 0x00e0
PCI_DEVICE_ID_CT_65554  macro  include/linux/pci_ids.h  623  #define PCI_DEVICE_ID_CT_65554 0x00e4
PCI_DEVICE_ID_CT_65555  macro  include/linux/pci_ids.h  624  #define PCI_DEVICE_ID_CT_65555 0x00e5
PCI_VENDOR_ID_MIRO  macro  include/linux/pci_ids.h  626  #define PCI_VENDOR_ID_MIRO 0x1031
PCI_DEVICE_ID_MIRO_36050  macro  include/linux/pci_ids.h  627  #define PCI_DEVICE_ID_MIRO_36050 0x5601
PCI_DEVICE_ID_MIRO_DC10PLUS  macro  include/linux/pci_ids.h  628  #define PCI_DEVICE_ID_MIRO_DC10PLUS 0x7efe
PCI_DEVICE_ID_MIRO_DC30PLUS  macro  include/linux/pci_ids.h  629  #define PCI_DEVICE_ID_MIRO_DC30PLUS 0xd801
PCI_VENDOR_ID_NEC  macro  include/linux/pci_ids.h  631  #define PCI_VENDOR_ID_NEC 0x1033
PCI_DEVICE_ID_NEC_CBUS_1  macro  include/linux/pci_ids.h  632  #define PCI_DEVICE_ID_NEC_CBUS_1 0x0001
PCI_DEVICE_ID_NEC_LOCAL  macro  include/linux/pci_ids.h  633  #define PCI_DEVICE_ID_NEC_LOCAL 0x0002
PCI_DEVICE_ID_NEC_ATM  macro  include/linux/pci_ids.h  634  #define PCI_DEVICE_ID_NEC_ATM 0x0003
PCI_DEVICE_ID_NEC_R4000  macro  include/linux/pci_ids.h  635  #define PCI_DEVICE_ID_NEC_R4000 0x0004
PCI_DEVICE_ID_NEC_486  macro  include/linux/pci_ids.h  636  #define PCI_DEVICE_ID_NEC_486 0x0005
PCI_DEVICE_ID_NEC_ACCEL_1  macro  include/linux/pci_ids.h  637  #define PCI_DEVICE_ID_NEC_ACCEL_1 0x0006
PCI_DEVICE_ID_NEC_UXBUS  macro  include/linux/pci_ids.h  638  #define PCI_DEVICE_ID_NEC_UXBUS 0x0007
PCI_DEVICE_ID_NEC_ACCEL_2  macro  include/linux/pci_ids.h  639  #define PCI_DEVICE_ID_NEC_ACCEL_2 0x0008
PCI_DEVICE_ID_NEC_GRAPH  macro  include/linux/pci_ids.h  640  #define PCI_DEVICE_ID_NEC_GRAPH 0x0009
PCI_DEVICE_ID_NEC_VL  macro  include/linux/pci_ids.h  641  #define PCI_DEVICE_ID_NEC_VL 0x0016
PCI_DEVICE_ID_NEC_STARALPHA2  macro  include/linux/pci_ids.h  642  #define PCI_DEVICE_ID_NEC_STARALPHA2 0x002c
PCI_DEVICE_ID_NEC_CBUS_2  macro  include/linux/pci_ids.h  643  #define PCI_DEVICE_ID_NEC_CBUS_2 0x002d
PCI_DEVICE_ID_NEC_USB  macro  include/linux/pci_ids.h  644  #define PCI_DEVICE_ID_NEC_USB 0x0035
PCI_DEVICE_ID_NEC_CBUS_3  macro  include/linux/pci_ids.h  645  #define PCI_DEVICE_ID_NEC_CBUS_3 0x003b
PCI_DEVICE_ID_NEC_NAPCCARD  macro  include/linux/pci_ids.h  646  #define PCI_DEVICE_ID_NEC_NAPCCARD 0x003e
PCI_DEVICE_ID_NEC_PCX2  macro  include/linux/pci_ids.h  647  #define PCI_DEVICE_ID_NEC_PCX2 0x0046
PCI_DEVICE_ID_NEC_VRC5476  macro  include/linux/pci_ids.h  648  #define PCI_DEVICE_ID_NEC_VRC5476 0x009b
PCI_DEVICE_ID_NEC_VRC4173  macro  include/linux/pci_ids.h  649  #define PCI_DEVICE_ID_NEC_VRC4173 0x00a5
PCI_DEVICE_ID_NEC_VRC5477_AC97  macro  include/linux/pci_ids.h  650  #define PCI_DEVICE_ID_NEC_VRC5477_AC97 0x00a6
PCI_DEVICE_ID_NEC_PC9821CS01  macro  include/linux/pci_ids.h  651  #define PCI_DEVICE_ID_NEC_PC9821CS01 0x800c
PCI_DEVICE_ID_NEC_PC9821NRB06  macro  include/linux/pci_ids.h  652  #define PCI_DEVICE_ID_NEC_PC9821NRB06 0x800d
PCI_VENDOR_ID_FD  macro  include/linux/pci_ids.h  654  #define PCI_VENDOR_ID_FD 0x1036
PCI_DEVICE_ID_FD_36C70  macro  include/linux/pci_ids.h  655  #define PCI_DEVICE_ID_FD_36C70 0x0000
PCI_VENDOR_ID_SI  macro  include/linux/pci_ids.h  657  #define PCI_VENDOR_ID_SI 0x1039
PCI_DEVICE_ID_SI_5591_AGP  macro  include/linux/pci_ids.h  658  #define PCI_DEVICE_ID_SI_5591_AGP 0x0001
PCI_DEVICE_ID_SI_6202  macro  include/linux/pci_ids.h  659  #define PCI_DEVICE_ID_SI_6202 0x0002
PCI_DEVICE_ID_SI_503  macro  include/linux/pci_ids.h  660  #define PCI_DEVICE_ID_SI_503 0x0008
PCI_DEVICE_ID_SI_ACPI  macro  include/linux/pci_ids.h  661  #define PCI_DEVICE_ID_SI_ACPI 0x0009
PCI_DEVICE_ID_SI_SMBUS  macro  include/linux/pci_ids.h  662  #define PCI_DEVICE_ID_SI_SMBUS 0x0016
PCI_DEVICE_ID_SI_LPC  macro  include/linux/pci_ids.h  663  #define PCI_DEVICE_ID_SI_LPC 0x0018
PCI_DEVICE_ID_SI_5597_VGA  macro  include/linux/pci_ids.h  664  #define PCI_DEVICE_ID_SI_5597_VGA 0x0200
PCI_DEVICE_ID_SI_6205  macro  include/linux/pci_ids.h  665  #define PCI_DEVICE_ID_SI_6205 0x0205
PCI_DEVICE_ID_SI_501  macro  include/linux/pci_ids.h  666  #define PCI_DEVICE_ID_SI_501 0x0406
PCI_DEVICE_ID_SI_496  macro  include/linux/pci_ids.h  667  #define PCI_DEVICE_ID_SI_496 0x0496
PCI_DEVICE_ID_SI_300  macro  include/linux/pci_ids.h  668  #define PCI_DEVICE_ID_SI_300 0x0300
PCI_DEVICE_ID_SI_315H  macro  include/linux/pci_ids.h  669  #define PCI_DEVICE_ID_SI_315H 0x0310
PCI_DEVICE_ID_SI_315  macro  include/linux/pci_ids.h  670  #define PCI_DEVICE_ID_SI_315 0x0315
PCI_DEVICE_ID_SI_315PRO  macro  include/linux/pci_ids.h  671  #define PCI_DEVICE_ID_SI_315PRO 0x0325
PCI_DEVICE_ID_SI_530  macro  include/linux/pci_ids.h  672  #define PCI_DEVICE_ID_SI_530 0x0530
PCI_DEVICE_ID_SI_540  macro  include/linux/pci_ids.h  673  #define PCI_DEVICE_ID_SI_540 0x0540
PCI_DEVICE_ID_SI_550  macro  include/linux/pci_ids.h  674  #define PCI_DEVICE_ID_SI_550 0x0550
PCI_DEVICE_ID_SI_540_VGA  macro  include/linux/pci_ids.h  675  #define PCI_DEVICE_ID_SI_540_VGA 0x5300
PCI_DEVICE_ID_SI_550_VGA  macro  include/linux/pci_ids.h  676  #define PCI_DEVICE_ID_SI_550_VGA 0x5315
PCI_DEVICE_ID_SI_620  macro  include/linux/pci_ids.h  677  #define PCI_DEVICE_ID_SI_620 0x0620
PCI_DEVICE_ID_SI_630  macro  include/linux/pci_ids.h  678  #define PCI_DEVICE_ID_SI_630 0x0630
PCI_DEVICE_ID_SI_633  macro  include/linux/pci_ids.h  679  #define PCI_DEVICE_ID_SI_633 0x0633
PCI_DEVICE_ID_SI_635  macro  include/linux/pci_ids.h  680  #define PCI_DEVICE_ID_SI_635 0x0635
PCI_DEVICE_ID_SI_640  macro  include/linux/pci_ids.h  681  #define PCI_DEVICE_ID_SI_640 0x0640
PCI_DEVICE_ID_SI_645  macro  include/linux/pci_ids.h  682  #define PCI_DEVICE_ID_SI_645 0x0645
PCI_DEVICE_ID_SI_646  macro  include/linux/pci_ids.h  683  #define PCI_DEVICE_ID_SI_646 0x0646
PCI_DEVICE_ID_SI_648  macro  include/linux/pci_ids.h  684  #define PCI_DEVICE_ID_SI_648 0x0648
PCI_DEVICE_ID_SI_650  macro  include/linux/pci_ids.h  685  #define PCI_DEVICE_ID_SI_650 0x0650
PCI_DEVICE_ID_SI_651  macro  include/linux/pci_ids.h  686  #define PCI_DEVICE_ID_SI_651 0x0651
PCI_DEVICE_ID_SI_655  macro  include/linux/pci_ids.h  687  #define PCI_DEVICE_ID_SI_655 0x0655
PCI_DEVICE_ID_SI_661  macro  include/linux/pci_ids.h  688  #define PCI_DEVICE_ID_SI_661 0x0661
PCI_DEVICE_ID_SI_730  macro  include/linux/pci_ids.h  689  #define PCI_DEVICE_ID_SI_730 0x0730
PCI_DEVICE_ID_SI_733  macro  include/linux/pci_ids.h  690  #define PCI_DEVICE_ID_SI_733 0x0733
PCI_DEVICE_ID_SI_630_VGA  macro  include/linux/pci_ids.h  691  #define PCI_DEVICE_ID_SI_630_VGA 0x6300
PCI_DEVICE_ID_SI_735  macro  include/linux/pci_ids.h  692  #define PCI_DEVICE_ID_SI_735 0x0735
PCI_DEVICE_ID_SI_740  macro  include/linux/pci_ids.h  693  #define PCI_DEVICE_ID_SI_740 0x0740
PCI_DEVICE_ID_SI_741  macro  include/linux/pci_ids.h  694  #define PCI_DEVICE_ID_SI_741 0x0741
PCI_DEVICE_ID_SI_745  macro  include/linux/pci_ids.h  695  #define PCI_DEVICE_ID_SI_745 0x0745
PCI_DEVICE_ID_SI_746  macro  include/linux/pci_ids.h  696  #define PCI_DEVICE_ID_SI_746 0x0746
PCI_DEVICE_ID_SI_755  macro  include/linux/pci_ids.h  697  #define PCI_DEVICE_ID_SI_755 0x0755
PCI_DEVICE_ID_SI_760  macro  include/linux/pci_ids.h  698  #define PCI_DEVICE_ID_SI_760 0x0760
PCI_DEVICE_ID_SI_900  macro  include/linux/pci_ids.h  699  #define PCI_DEVICE_ID_SI_900 0x0900
PCI_DEVICE_ID_SI_961  macro  include/linux/pci_ids.h  700  #define PCI_DEVICE_ID_SI_961 0x0961
PCI_DEVICE_ID_SI_962  macro  include/linux/pci_ids.h  701  #define PCI_DEVICE_ID_SI_962 0x0962
PCI_DEVICE_ID_SI_963  macro  include/linux/pci_ids.h  702  #define PCI_DEVICE_ID_SI_963 0x0963
PCI_DEVICE_ID_SI_965  macro  include/linux/pci_ids.h  703  #define PCI_DEVICE_ID_SI_965 0x0965
PCI_DEVICE_ID_SI_966  macro  include/linux/pci_ids.h  704  #define PCI_DEVICE_ID_SI_966 0x0966
PCI_DEVICE_ID_SI_968  macro  include/linux/pci_ids.h  705  #define PCI_DEVICE_ID_SI_968 0x0968
PCI_DEVICE_ID_SI_1180  macro  include/linux/pci_ids.h  706  #define PCI_DEVICE_ID_SI_1180 0x1180
PCI_DEVICE_ID_SI_5511  macro  include/linux/pci_ids.h  707  #define PCI_DEVICE_ID_SI_5511 0x5511
PCI_DEVICE_ID_SI_5513  macro  include/linux/pci_ids.h  708  #define PCI_DEVICE_ID_SI_5513 0x5513
PCI_DEVICE_ID_SI_5517  macro  include/linux/pci_ids.h  709  #define PCI_DEVICE_ID_SI_5517 0x5517
PCI_DEVICE_ID_SI_5518  macro  include/linux/pci_ids.h  710  #define PCI_DEVICE_ID_SI_5518 0x5518
PCI_DEVICE_ID_SI_5571  macro  include/linux/pci_ids.h  711  #define PCI_DEVICE_ID_SI_5571 0x5571
PCI_DEVICE_ID_SI_5581  macro  include/linux/pci_ids.h  712  #define PCI_DEVICE_ID_SI_5581 0x5581
PCI_DEVICE_ID_SI_5582  macro  include/linux/pci_ids.h  713  #define PCI_DEVICE_ID_SI_5582 0x5582
PCI_DEVICE_ID_SI_5591  macro  include/linux/pci_ids.h  714  #define PCI_DEVICE_ID_SI_5591 0x5591
PCI_DEVICE_ID_SI_5596  macro  include/linux/pci_ids.h  715  #define PCI_DEVICE_ID_SI_5596 0x5596
PCI_DEVICE_ID_SI_5597  macro  include/linux/pci_ids.h  716  #define PCI_DEVICE_ID_SI_5597 0x5597
PCI_DEVICE_ID_SI_5598  macro  include/linux/pci_ids.h  717  #define PCI_DEVICE_ID_SI_5598 0x5598
PCI_DEVICE_ID_SI_5600  macro  include/linux/pci_ids.h  718  #define PCI_DEVICE_ID_SI_5600 0x5600
PCI_DEVICE_ID_SI_7012  macro  include/linux/pci_ids.h  719  #define PCI_DEVICE_ID_SI_7012 0x7012
PCI_DEVICE_ID_SI_7013  macro  include/linux/pci_ids.h  720  #define PCI_DEVICE_ID_SI_7013 0x7013
PCI_DEVICE_ID_SI_7016  macro  include/linux/pci_ids.h  721  #define PCI_DEVICE_ID_SI_7016 0x7016
PCI_DEVICE_ID_SI_7018  macro  include/linux/pci_ids.h  722  #define PCI_DEVICE_ID_SI_7018 0x7018
PCI_VENDOR_ID_HP  macro  include/linux/pci_ids.h  724  #define PCI_VENDOR_ID_HP 0x103c
PCI_DEVICE_ID_HP_VISUALIZE_EG  macro  include/linux/pci_ids.h  725  #define PCI_DEVICE_ID_HP_VISUALIZE_EG 0x1005
PCI_DEVICE_ID_HP_VISUALIZE_FX6  macro  include/linux/pci_ids.h  726  #define PCI_DEVICE_ID_HP_VISUALIZE_FX6 0x1006
PCI_DEVICE_ID_HP_VISUALIZE_FX4  macro  include/linux/pci_ids.h  727  #define PCI_DEVICE_ID_HP_VISUALIZE_FX4 0x1008
PCI_DEVICE_ID_HP_VISUALIZE_FX2  macro  include/linux/pci_ids.h  728  #define PCI_DEVICE_ID_HP_VISUALIZE_FX2 0x100a
PCI_DEVICE_ID_HP_TACHYON  macro  include/linux/pci_ids.h  729  #define PCI_DEVICE_ID_HP_TACHYON 0x1028
PCI_DEVICE_ID_HP_TACHLITE  macro  include/linux/pci_ids.h  730  #define PCI_DEVICE_ID_HP_TACHLITE 0x1029
PCI_DEVICE_ID_HP_J2585A  macro  include/linux/pci_ids.h  731  #define PCI_DEVICE_ID_HP_J2585A 0x1030
PCI_DEVICE_ID_HP_J2585B  macro  include/linux/pci_ids.h  732  #define PCI_DEVICE_ID_HP_J2585B 0x1031
PCI_DEVICE_ID_HP_J2973A  macro  include/linux/pci_ids.h  733  #define PCI_DEVICE_ID_HP_J2973A 0x1040
PCI_DEVICE_ID_HP_J2970A  macro  include/linux/pci_ids.h  734  #define PCI_DEVICE_ID_HP_J2970A 0x1042
PCI_DEVICE_ID_HP_DIVA  macro  include/linux/pci_ids.h  735  #define PCI_DEVICE_ID_HP_DIVA 0x1048
PCI_DEVICE_ID_HP_DIVA_TOSCA1  macro  include/linux/pci_ids.h  736  #define PCI_DEVICE_ID_HP_DIVA_TOSCA1 0x1049
PCI_DEVICE_ID_HP_DIVA_TOSCA2  macro  include/linux/pci_ids.h  737  #define PCI_DEVICE_ID_HP_DIVA_TOSCA2 0x104A
PCI_DEVICE_ID_HP_DIVA_MAESTRO  macro  include/linux/pci_ids.h  738  #define PCI_DEVICE_ID_HP_DIVA_MAESTRO 0x104B
PCI_DEVICE_ID_HP_REO_IOC  macro  include/linux/pci_ids.h  739  #define PCI_DEVICE_ID_HP_REO_IOC 0x10f1
PCI_DEVICE_ID_HP_VISUALIZE_FXE  macro  include/linux/pci_ids.h  740  #define PCI_DEVICE_ID_HP_VISUALIZE_FXE 0x108b
PCI_DEVICE_ID_HP_DIVA_HALFDOME  macro  include/linux/pci_ids.h  741  #define PCI_DEVICE_ID_HP_DIVA_HALFDOME 0x1223
PCI_DEVICE_ID_HP_DIVA_KEYSTONE  macro  include/linux/pci_ids.h  742  #define PCI_DEVICE_ID_HP_DIVA_KEYSTONE 0x1226
PCI_DEVICE_ID_HP_DIVA_POWERBAR  macro  include/linux/pci_ids.h  743  #define PCI_DEVICE_ID_HP_DIVA_POWERBAR 0x1227
PCI_DEVICE_ID_HP_ZX1_IOC  macro  include/linux/pci_ids.h  744  #define PCI_DEVICE_ID_HP_ZX1_IOC 0x122a
PCI_DEVICE_ID_HP_PCIX_LBA  macro  include/linux/pci_ids.h  745  #define PCI_DEVICE_ID_HP_PCIX_LBA 0x122e
PCI_DEVICE_ID_HP_SX1000_IOC  macro  include/linux/pci_ids.h  746  #define PCI_DEVICE_ID_HP_SX1000_IOC 0x127c
PCI_DEVICE_ID_HP_DIVA_EVEREST  macro  include/linux/pci_ids.h  747  #define PCI_DEVICE_ID_HP_DIVA_EVEREST 0x1282
PCI_DEVICE_ID_HP_DIVA_AUX  macro  include/linux/pci_ids.h  748  #define PCI_DEVICE_ID_HP_DIVA_AUX 0x1290
PCI_DEVICE_ID_HP_DIVA_RMP3  macro  include/linux/pci_ids.h  749  #define PCI_DEVICE_ID_HP_DIVA_RMP3 0x1301
PCI_DEVICE_ID_HP_DIVA_HURRICANE  macro  include/linux/pci_ids.h  750  #define PCI_DEVICE_ID_HP_DIVA_HURRICANE 0x132a
PCI_DEVICE_ID_HP_CISSA  macro  include/linux/pci_ids.h  751  #define PCI_DEVICE_ID_HP_CISSA 0x3220
PCI_DEVICE_ID_HP_CISSC  macro  include/linux/pci_ids.h  752  #define PCI_DEVICE_ID_HP_CISSC 0x3230
PCI_DEVICE_ID_HP_CISSD  macro  include/linux/pci_ids.h  753  #define PCI_DEVICE_ID_HP_CISSD 0x3238
PCI_DEVICE_ID_HP_CISSE  macro  include/linux/pci_ids.h  754  #define PCI_DEVICE_ID_HP_CISSE 0x323a
PCI_DEVICE_ID_HP_CISSF  macro  include/linux/pci_ids.h  755  #define PCI_DEVICE_ID_HP_CISSF 0x323b
PCI_DEVICE_ID_HP_CISSH  macro  include/linux/pci_ids.h  756  #define PCI_DEVICE_ID_HP_CISSH 0x323c
PCI_DEVICE_ID_HP_ZX2_IOC  macro  include/linux/pci_ids.h  757  #define PCI_DEVICE_ID_HP_ZX2_IOC 0x4031
PCI_VENDOR_ID_PCTECH  macro  include/linux/pci_ids.h  759  #define PCI_VENDOR_ID_PCTECH 0x1042
PCI_DEVICE_ID_PCTECH_RZ1000  macro  include/linux/pci_ids.h  760  #define PCI_DEVICE_ID_PCTECH_RZ1000 0x1000
PCI_DEVICE_ID_PCTECH_RZ1001  macro  include/linux/pci_ids.h  761  #define PCI_DEVICE_ID_PCTECH_RZ1001 0x1001
PCI_DEVICE_ID_PCTECH_SAMURAI_IDE  macro  include/linux/pci_ids.h  762  #define PCI_DEVICE_ID_PCTECH_SAMURAI_IDE 0x3020
PCI_VENDOR_ID_ASUSTEK  macro  include/linux/pci_ids.h  764  #define PCI_VENDOR_ID_ASUSTEK 0x1043
PCI_DEVICE_ID_ASUSTEK_0675  macro  include/linux/pci_ids.h  765  #define PCI_DEVICE_ID_ASUSTEK_0675 0x0675
PCI_VENDOR_ID_DPT  macro  include/linux/pci_ids.h  767  #define PCI_VENDOR_ID_DPT 0x1044
PCI_DEVICE_ID_DPT  macro  include/linux/pci_ids.h  768  #define PCI_DEVICE_ID_DPT 0xa400
PCI_VENDOR_ID_OPTI  macro  include/linux/pci_ids.h  770  #define PCI_VENDOR_ID_OPTI 0x1045
PCI_DEVICE_ID_OPTI_82C558  macro  include/linux/pci_ids.h  771  #define PCI_DEVICE_ID_OPTI_82C558 0xc558
PCI_DEVICE_ID_OPTI_82C621  macro  include/linux/pci_ids.h  772  #define PCI_DEVICE_ID_OPTI_82C621 0xc621
PCI_DEVICE_ID_OPTI_82C700  macro  include/linux/pci_ids.h  773  #define PCI_DEVICE_ID_OPTI_82C700 0xc700
PCI_DEVICE_ID_OPTI_82C825  macro  include/linux/pci_ids.h  774  #define PCI_DEVICE_ID_OPTI_82C825 0xd568
PCI_VENDOR_ID_ELSA  macro  include/linux/pci_ids.h  776  #define PCI_VENDOR_ID_ELSA 0x1048
PCI_DEVICE_ID_ELSA_MICROLINK  macro  include/linux/pci_ids.h  777  #define PCI_DEVICE_ID_ELSA_MICROLINK 0x1000
PCI_DEVICE_ID_ELSA_QS3000  macro  include/linux/pci_ids.h  778  #define PCI_DEVICE_ID_ELSA_QS3000 0x3000
PCI_VENDOR_ID_STMICRO  macro  include/linux/pci_ids.h  780  #define PCI_VENDOR_ID_STMICRO 0x104A
PCI_DEVICE_ID_STMICRO_USB_HOST  macro  include/linux/pci_ids.h  781  #define PCI_DEVICE_ID_STMICRO_USB_HOST 0xCC00
PCI_DEVICE_ID_STMICRO_USB_OHCI  macro  include/linux/pci_ids.h  782  #define PCI_DEVICE_ID_STMICRO_USB_OHCI 0xCC01
PCI_DEVICE_ID_STMICRO_USB_OTG  macro  include/linux/pci_ids.h  783  #define PCI_DEVICE_ID_STMICRO_USB_OTG 0xCC02
PCI_DEVICE_ID_STMICRO_UART_HWFC  macro  include/linux/pci_ids.h  784  #define PCI_DEVICE_ID_STMICRO_UART_HWFC 0xCC03
PCI_DEVICE_ID_STMICRO_UART_NO_HWFC  macro  include/linux/pci_ids.h  785  #define PCI_DEVICE_ID_STMICRO_UART_NO_HWFC 0xCC04
PCI_DEVICE_ID_STMICRO_SOC_DMA  macro  include/linux/pci_ids.h  786  #define PCI_DEVICE_ID_STMICRO_SOC_DMA 0xCC05
PCI_DEVICE_ID_STMICRO_SATA  macro  include/linux/pci_ids.h  787  #define PCI_DEVICE_ID_STMICRO_SATA 0xCC06
PCI_DEVICE_ID_STMICRO_I2C  macro  include/linux/pci_ids.h  788  #define PCI_DEVICE_ID_STMICRO_I2C 0xCC07
PCI_DEVICE_ID_STMICRO_SPI_HS  macro  include/linux/pci_ids.h  789  #define PCI_DEVICE_ID_STMICRO_SPI_HS 0xCC08
PCI_DEVICE_ID_STMICRO_MAC  macro  include/linux/pci_ids.h  790  #define PCI_DEVICE_ID_STMICRO_MAC 0xCC09
PCI_DEVICE_ID_STMICRO_SDIO_EMMC  macro  include/linux/pci_ids.h  791  #define PCI_DEVICE_ID_STMICRO_SDIO_EMMC 0xCC0A
PCI_DEVICE_ID_STMICRO_SDIO  macro  include/linux/pci_ids.h  792  #define PCI_DEVICE_ID_STMICRO_SDIO 0xCC0B
PCI_DEVICE_ID_STMICRO_GPIO  macro  include/linux/pci_ids.h  793  #define PCI_DEVICE_ID_STMICRO_GPIO 0xCC0C
PCI_DEVICE_ID_STMICRO_VIP  macro  include/linux/pci_ids.h  794  #define PCI_DEVICE_ID_STMICRO_VIP 0xCC0D
PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_DMA  macro  include/linux/pci_ids.h  795  #define PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_DMA 0xCC0E
PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_SRCS  macro  include/linux/pci_ids.h  796  #define PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_SRCS 0xCC0F
PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_MSPS  macro  include/linux/pci_ids.h  797  #define PCI_DEVICE_ID_STMICRO_AUDIO_ROUTER_MSPS 0xCC10
PCI_DEVICE_ID_STMICRO_CAN  macro  include/linux/pci_ids.h  798  #define PCI_DEVICE_ID_STMICRO_CAN 0xCC11
PCI_DEVICE_ID_STMICRO_MLB  macro  include/linux/pci_ids.h  799  #define PCI_DEVICE_ID_STMICRO_MLB 0xCC12
PCI_DEVICE_ID_STMICRO_DBP  macro  include/linux/pci_ids.h  800  #define PCI_DEVICE_ID_STMICRO_DBP 0xCC13
PCI_DEVICE_ID_STMICRO_SATA_PHY  macro  include/linux/pci_ids.h  801  #define PCI_DEVICE_ID_STMICRO_SATA_PHY 0xCC14
PCI_DEVICE_ID_STMICRO_ESRAM  macro  include/linux/pci_ids.h  802  #define PCI_DEVICE_ID_STMICRO_ESRAM 0xCC15
PCI_DEVICE_ID_STMICRO_VIC  macro  include/linux/pci_ids.h  803  #define PCI_DEVICE_ID_STMICRO_VIC 0xCC16
PCI_VENDOR_ID_BUSLOGIC  macro  include/linux/pci_ids.h  805  #define PCI_VENDOR_ID_BUSLOGIC 0x104B
PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER_NC  macro  include/linux/pci_ids.h  806  #define PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER_NC 0x0140
PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER  macro  include/linux/pci_ids.h  807  #define PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER 0x1040
PCI_DEVICE_ID_BUSLOGIC_FLASHPOINT  macro  include/linux/pci_ids.h  808  #define PCI_DEVICE_ID_BUSLOGIC_FLASHPOINT 0x8130
PCI_VENDOR_ID_TI  macro  include/linux/pci_ids.h  810  #define PCI_VENDOR_ID_TI 0x104c
PCI_DEVICE_ID_TI_TVP4020  macro  include/linux/pci_ids.h  811  #define PCI_DEVICE_ID_TI_TVP4020 0x3d07
PCI_DEVICE_ID_TI_4450  macro  include/linux/pci_ids.h  812  #define PCI_DEVICE_ID_TI_4450 0x8011
PCI_DEVICE_ID_TI_XX21_XX11  macro  include/linux/pci_ids.h  813  #define PCI_DEVICE_ID_TI_XX21_XX11 0x8031
PCI_DEVICE_ID_TI_XX21_XX11_FM  macro  include/linux/pci_ids.h  814  #define PCI_DEVICE_ID_TI_XX21_XX11_FM 0x8033
PCI_DEVICE_ID_TI_XX21_XX11_SD  macro  include/linux/pci_ids.h  815  #define PCI_DEVICE_ID_TI_XX21_XX11_SD 0x8034
PCI_DEVICE_ID_TI_X515  macro  include/linux/pci_ids.h  816  #define PCI_DEVICE_ID_TI_X515 0x8036
PCI_DEVICE_ID_TI_XX12  macro  include/linux/pci_ids.h  817  #define PCI_DEVICE_ID_TI_XX12 0x8039
PCI_DEVICE_ID_TI_XX12_FM  macro  include/linux/pci_ids.h  818  #define PCI_DEVICE_ID_TI_XX12_FM 0x803b
PCI_DEVICE_ID_TI_XIO2000A  macro  include/linux/pci_ids.h  819  #define PCI_DEVICE_ID_TI_XIO2000A 0x8231
PCI_DEVICE_ID_TI_1130  macro  include/linux/pci_ids.h  820  #define PCI_DEVICE_ID_TI_1130 0xac12
PCI_DEVICE_ID_TI_1031  macro  include/linux/pci_ids.h  821  #define PCI_DEVICE_ID_TI_1031 0xac13
PCI_DEVICE_ID_TI_1131  macro  include/linux/pci_ids.h  822  #define PCI_DEVICE_ID_TI_1131 0xac15
PCI_DEVICE_ID_TI_1250  macro  include/linux/pci_ids.h  823  #define PCI_DEVICE_ID_TI_1250 0xac16
PCI_DEVICE_ID_TI_1220  macro  include/linux/pci_ids.h  824  #define PCI_DEVICE_ID_TI_1220 0xac17
PCI_DEVICE_ID_TI_1221  macro  include/linux/pci_ids.h  825  #define PCI_DEVICE_ID_TI_1221 0xac19
PCI_DEVICE_ID_TI_1210  macro  include/linux/pci_ids.h  826  #define PCI_DEVICE_ID_TI_1210 0xac1a
PCI_DEVICE_ID_TI_1450  macro  include/linux/pci_ids.h  827  #define PCI_DEVICE_ID_TI_1450 0xac1b
PCI_DEVICE_ID_TI_1225  macro  include/linux/pci_ids.h  828  #define PCI_DEVICE_ID_TI_1225 0xac1c
PCI_DEVICE_ID_TI_1251A  macro  include/linux/pci_ids.h  829  #define PCI_DEVICE_ID_TI_1251A 0xac1d
PCI_DEVICE_ID_TI_1211  macro  include/linux/pci_ids.h  830  #define PCI_DEVICE_ID_TI_1211 0xac1e
PCI_DEVICE_ID_TI_1251B  macro  include/linux/pci_ids.h  831  #define PCI_DEVICE_ID_TI_1251B 0xac1f
PCI_DEVICE_ID_TI_4410  macro  include/linux/pci_ids.h  832  #define PCI_DEVICE_ID_TI_4410 0xac41
PCI_DEVICE_ID_TI_4451  macro  include/linux/pci_ids.h  833  #define PCI_DEVICE_ID_TI_4451 0xac42
PCI_DEVICE_ID_TI_4510  macro  include/linux/pci_ids.h  834  #define PCI_DEVICE_ID_TI_4510 0xac44
PCI_DEVICE_ID_TI_4520  macro  include/linux/pci_ids.h  835  #define PCI_DEVICE_ID_TI_4520 0xac46
PCI_DEVICE_ID_TI_7510  macro  include/linux/pci_ids.h  836  #define PCI_DEVICE_ID_TI_7510 0xac47
PCI_DEVICE_ID_TI_7610  macro  include/linux/pci_ids.h  837  #define PCI_DEVICE_ID_TI_7610 0xac48
PCI_DEVICE_ID_TI_7410  macro  include/linux/pci_ids.h  838  #define PCI_DEVICE_ID_TI_7410 0xac49
PCI_DEVICE_ID_TI_1410  macro  include/linux/pci_ids.h  839  #define PCI_DEVICE_ID_TI_1410 0xac50
PCI_DEVICE_ID_TI_1420  macro  include/linux/pci_ids.h  840  #define PCI_DEVICE_ID_TI_1420 0xac51
PCI_DEVICE_ID_TI_1451A  macro  include/linux/pci_ids.h  841  #define PCI_DEVICE_ID_TI_1451A 0xac52
PCI_DEVICE_ID_TI_1620  macro  include/linux/pci_ids.h  842  #define PCI_DEVICE_ID_TI_1620 0xac54
PCI_DEVICE_ID_TI_1520  macro  include/linux/pci_ids.h  843  #define PCI_DEVICE_ID_TI_1520 0xac55
PCI_DEVICE_ID_TI_1510  macro  include/linux/pci_ids.h  844  #define PCI_DEVICE_ID_TI_1510 0xac56
PCI_DEVICE_ID_TI_X620  macro  include/linux/pci_ids.h  845  #define PCI_DEVICE_ID_TI_X620 0xac8d
PCI_DEVICE_ID_TI_X420  macro  include/linux/pci_ids.h  846  #define PCI_DEVICE_ID_TI_X420 0xac8e
PCI_DEVICE_ID_TI_XX20_FM  macro  include/linux/pci_ids.h  847  #define PCI_DEVICE_ID_TI_XX20_FM 0xac8f
PCI_VENDOR_ID_SONY  macro  include/linux/pci_ids.h  849  #define PCI_VENDOR_ID_SONY 0x104d
PCI_VENDOR_ID_WINBOND2  macro  include/linux/pci_ids.h  852  #define PCI_VENDOR_ID_WINBOND2 0x1050
PCI_DEVICE_ID_WINBOND2_89C940F  macro  include/linux/pci_ids.h  853  #define PCI_DEVICE_ID_WINBOND2_89C940F 0x5a5a
PCI_DEVICE_ID_WINBOND2_6692  macro  include/linux/pci_ids.h  854  #define PCI_DEVICE_ID_WINBOND2_6692 0x6692
PCI_VENDOR_ID_ANIGMA  macro  include/linux/pci_ids.h  856  #define PCI_VENDOR_ID_ANIGMA 0x1051
PCI_DEVICE_ID_ANIGMA_MC145575  macro  include/linux/pci_ids.h  857  #define PCI_DEVICE_ID_ANIGMA_MC145575 0x0100
PCI_VENDOR_ID_EFAR  macro  include/linux/pci_ids.h  859  #define PCI_VENDOR_ID_EFAR 0x1055
PCI_DEVICE_ID_EFAR_SLC90E66_1  macro  include/linux/pci_ids.h  860  #define PCI_DEVICE_ID_EFAR_SLC90E66_1 0x9130
PCI_DEVICE_ID_EFAR_SLC90E66_3  macro  include/linux/pci_ids.h  861  #define PCI_DEVICE_ID_EFAR_SLC90E66_3 0x9463
PCI_VENDOR_ID_MOTOROLA  macro  include/linux/pci_ids.h  863  #define PCI_VENDOR_ID_MOTOROLA 0x1057
PCI_DEVICE_ID_MOTOROLA_MPC105  macro  include/linux/pci_ids.h  864  #define PCI_DEVICE_ID_MOTOROLA_MPC105 0x0001
PCI_DEVICE_ID_MOTOROLA_MPC106  macro  include/linux/pci_ids.h  865  #define PCI_DEVICE_ID_MOTOROLA_MPC106 0x0002
PCI_DEVICE_ID_MOTOROLA_MPC107  macro  include/linux/pci_ids.h  866  #define PCI_DEVICE_ID_MOTOROLA_MPC107 0x0004
PCI_DEVICE_ID_MOTOROLA_RAVEN  macro  include/linux/pci_ids.h  867  #define PCI_DEVICE_ID_MOTOROLA_RAVEN 0x4801
PCI_DEVICE_ID_MOTOROLA_FALCON  macro  include/linux/pci_ids.h  868  #define PCI_DEVICE_ID_MOTOROLA_FALCON 0x4802
PCI_DEVICE_ID_MOTOROLA_HAWK  macro  include/linux/pci_ids.h  869  #define PCI_DEVICE_ID_MOTOROLA_HAWK 0x4803
PCI_DEVICE_ID_MOTOROLA_HARRIER  macro  include/linux/pci_ids.h  870  #define PCI_DEVICE_ID_MOTOROLA_HARRIER 0x480b
PCI_DEVICE_ID_MOTOROLA_MPC5200  macro  include/linux/pci_ids.h  871  #define PCI_DEVICE_ID_MOTOROLA_MPC5200 0x5803
PCI_DEVICE_ID_MOTOROLA_MPC5200B  macro  include/linux/pci_ids.h  872  #define PCI_DEVICE_ID_MOTOROLA_MPC5200B 0x5809
PCI_VENDOR_ID_PROMISE  macro  include/linux/pci_ids.h  874  #define PCI_VENDOR_ID_PROMISE 0x105a
PCI_DEVICE_ID_PROMISE_20265  macro  include/linux/pci_ids.h  875  #define PCI_DEVICE_ID_PROMISE_20265 0x0d30
PCI_DEVICE_ID_PROMISE_20267  macro  include/linux/pci_ids.h  876  #define PCI_DEVICE_ID_PROMISE_20267 0x4d30
PCI_DEVICE_ID_PROMISE_20246  macro  include/linux/pci_ids.h  877  #define PCI_DEVICE_ID_PROMISE_20246 0x4d33
PCI_DEVICE_ID_PROMISE_20262  macro  include/linux/pci_ids.h  878  #define PCI_DEVICE_ID_PROMISE_20262 0x4d38
PCI_DEVICE_ID_PROMISE_20263  macro  include/linux/pci_ids.h  879  #define PCI_DEVICE_ID_PROMISE_20263 0x0D38
PCI_DEVICE_ID_PROMISE_20268  macro  include/linux/pci_ids.h  880  #define PCI_DEVICE_ID_PROMISE_20268 0x4d68
PCI_DEVICE_ID_PROMISE_20269  macro  include/linux/pci_ids.h  881  #define PCI_DEVICE_ID_PROMISE_20269 0x4d69
PCI_DEVICE_ID_PROMISE_20270  macro  include/linux/pci_ids.h  882  #define PCI_DEVICE_ID_PROMISE_20270 0x6268
PCI_DEVICE_ID_PROMISE_20271  macro  include/linux/pci_ids.h  883  #define PCI_DEVICE_ID_PROMISE_20271 0x6269
PCI_DEVICE_ID_PROMISE_20275  macro  include/linux/pci_ids.h  884  #define PCI_DEVICE_ID_PROMISE_20275 0x1275
PCI_DEVICE_ID_PROMISE_20276  macro  include/linux/pci_ids.h  885  #define PCI_DEVICE_ID_PROMISE_20276 0x5275
PCI_DEVICE_ID_PROMISE_20277  macro  include/linux/pci_ids.h  886  #define PCI_DEVICE_ID_PROMISE_20277 0x7275
PCI_VENDOR_ID_FOXCONN  macro  include/linux/pci_ids.h  888  #define PCI_VENDOR_ID_FOXCONN 0x105b
PCI_VENDOR_ID_UMC  macro  include/linux/pci_ids.h  890  #define PCI_VENDOR_ID_UMC 0x1060
PCI_DEVICE_ID_UMC_UM8673F  macro  include/linux/pci_ids.h  891  #define PCI_DEVICE_ID_UMC_UM8673F 0x0101
PCI_DEVICE_ID_UMC_UM8886BF  macro  include/linux/pci_ids.h  892  #define PCI_DEVICE_ID_UMC_UM8886BF 0x673a
PCI_DEVICE_ID_UMC_UM8886A  macro  include/linux/pci_ids.h  893  #define PCI_DEVICE_ID_UMC_UM8886A 0x886a
PCI_VENDOR_ID_PICOPOWER  macro  include/linux/pci_ids.h  895  #define PCI_VENDOR_ID_PICOPOWER 0x1066
PCI_DEVICE_ID_PICOPOWER_PT86C523  macro  include/linux/pci_ids.h  896  #define PCI_DEVICE_ID_PICOPOWER_PT86C523 0x0002
PCI_DEVICE_ID_PICOPOWER_PT86C523BBP  macro  include/linux/pci_ids.h  897  #define PCI_DEVICE_ID_PICOPOWER_PT86C523BBP 0x8002
PCI_VENDOR_ID_MYLEX  macro  include/linux/pci_ids.h  899  #define PCI_VENDOR_ID_MYLEX 0x1069
PCI_DEVICE_ID_MYLEX_DAC960_P  macro  include/linux/pci_ids.h  900  #define PCI_DEVICE_ID_MYLEX_DAC960_P 0x0001
PCI_DEVICE_ID_MYLEX_DAC960_PD  macro  include/linux/pci_ids.h  901  #define PCI_DEVICE_ID_MYLEX_DAC960_PD 0x0002
PCI_DEVICE_ID_MYLEX_DAC960_PG  macro  include/linux/pci_ids.h  902  #define PCI_DEVICE_ID_MYLEX_DAC960_PG 0x0010
PCI_DEVICE_ID_MYLEX_DAC960_LA  macro  include/linux/pci_ids.h  903  #define PCI_DEVICE_ID_MYLEX_DAC960_LA 0x0020
PCI_DEVICE_ID_MYLEX_DAC960_LP  macro  include/linux/pci_ids.h  904  #define PCI_DEVICE_ID_MYLEX_DAC960_LP 0x0050
PCI_DEVICE_ID_MYLEX_DAC960_BA  macro  include/linux/pci_ids.h  905  #define PCI_DEVICE_ID_MYLEX_DAC960_BA 0xBA56
PCI_DEVICE_ID_MYLEX_DAC960_GEM  macro  include/linux/pci_ids.h  906  #define PCI_DEVICE_ID_MYLEX_DAC960_GEM 0xB166
PCI_VENDOR_ID_APPLE  macro  include/linux/pci_ids.h  908  #define PCI_VENDOR_ID_APPLE 0x106b
PCI_DEVICE_ID_APPLE_BANDIT  macro  include/linux/pci_ids.h  909  #define PCI_DEVICE_ID_APPLE_BANDIT 0x0001
PCI_DEVICE_ID_APPLE_HYDRA  macro  include/linux/pci_ids.h  910  #define PCI_DEVICE_ID_APPLE_HYDRA 0x000e
PCI_DEVICE_ID_APPLE_UNI_N_FW  macro  include/linux/pci_ids.h  911  #define PCI_DEVICE_ID_APPLE_UNI_N_FW 0x0018
PCI_DEVICE_ID_APPLE_UNI_N_AGP  macro  include/linux/pci_ids.h  912  #define PCI_DEVICE_ID_APPLE_UNI_N_AGP 0x0020
PCI_DEVICE_ID_APPLE_UNI_N_GMAC  macro  include/linux/pci_ids.h  913  #define PCI_DEVICE_ID_APPLE_UNI_N_GMAC 0x0021
PCI_DEVICE_ID_APPLE_UNI_N_GMACP  macro  include/linux/pci_ids.h  914  #define PCI_DEVICE_ID_APPLE_UNI_N_GMACP 0x0024
PCI_DEVICE_ID_APPLE_UNI_N_AGP_P  macro  include/linux/pci_ids.h  915  #define PCI_DEVICE_ID_APPLE_UNI_N_AGP_P 0x0027
PCI_DEVICE_ID_APPLE_UNI_N_AGP15  macro  include/linux/pci_ids.h  916  #define PCI_DEVICE_ID_APPLE_UNI_N_AGP15 0x002d
PCI_DEVICE_ID_APPLE_UNI_N_PCI15  macro  include/linux/pci_ids.h  917  #define PCI_DEVICE_ID_APPLE_UNI_N_PCI15 0x002e
PCI_DEVICE_ID_APPLE_UNI_N_GMAC2  macro  include/linux/pci_ids.h  918  #define PCI_DEVICE_ID_APPLE_UNI_N_GMAC2 0x0032
PCI_DEVICE_ID_APPLE_UNI_N_ATA  macro  include/linux/pci_ids.h  919  #define PCI_DEVICE_ID_APPLE_UNI_N_ATA 0x0033
PCI_DEVICE_ID_APPLE_UNI_N_AGP2  macro  include/linux/pci_ids.h  920  #define PCI_DEVICE_ID_APPLE_UNI_N_AGP2 0x0034
PCI_DEVICE_ID_APPLE_IPID_ATA100  macro  include/linux/pci_ids.h  921  #define PCI_DEVICE_ID_APPLE_IPID_ATA100 0x003b
PCI_DEVICE_ID_APPLE_K2_ATA100  macro  include/linux/pci_ids.h  922  #define PCI_DEVICE_ID_APPLE_K2_ATA100 0x0043
PCI_DEVICE_ID_APPLE_U3_AGP  macro  include/linux/pci_ids.h  923  #define PCI_DEVICE_ID_APPLE_U3_AGP 0x004b
PCI_DEVICE_ID_APPLE_K2_GMAC  macro  include/linux/pci_ids.h  924  #define PCI_DEVICE_ID_APPLE_K2_GMAC 0x004c
PCI_DEVICE_ID_APPLE_SH_ATA  macro  include/linux/pci_ids.h  925  #define PCI_DEVICE_ID_APPLE_SH_ATA 0x0050
PCI_DEVICE_ID_APPLE_SH_SUNGEM  macro  include/linux/pci_ids.h  926  #define PCI_DEVICE_ID_APPLE_SH_SUNGEM 0x0051
PCI_DEVICE_ID_APPLE_U3L_AGP  macro  include/linux/pci_ids.h  927  #define PCI_DEVICE_ID_APPLE_U3L_AGP 0x0058
PCI_DEVICE_ID_APPLE_U3H_AGP  macro  include/linux/pci_ids.h  928  #define PCI_DEVICE_ID_APPLE_U3H_AGP 0x0059
PCI_DEVICE_ID_APPLE_U4_PCIE  macro  include/linux/pci_ids.h  929  #define PCI_DEVICE_ID_APPLE_U4_PCIE 0x005b
PCI_DEVICE_ID_APPLE_IPID2_AGP  macro  include/linux/pci_ids.h  930  #define PCI_DEVICE_ID_APPLE_IPID2_AGP 0x0066
PCI_DEVICE_ID_APPLE_IPID2_ATA  macro  include/linux/pci_ids.h  931  #define PCI_DEVICE_ID_APPLE_IPID2_ATA 0x0069
PCI_DEVICE_ID_APPLE_IPID2_FW  macro  include/linux/pci_ids.h  932  #define PCI_DEVICE_ID_APPLE_IPID2_FW 0x006a
PCI_DEVICE_ID_APPLE_IPID2_GMAC  macro  include/linux/pci_ids.h  933  #define PCI_DEVICE_ID_APPLE_IPID2_GMAC 0x006b
PCI_DEVICE_ID_APPLE_TIGON3  macro  include/linux/pci_ids.h  934  #define PCI_DEVICE_ID_APPLE_TIGON3 0x1645
PCI_VENDOR_ID_YAMAHA  macro  include/linux/pci_ids.h  936  #define PCI_VENDOR_ID_YAMAHA 0x1073
PCI_DEVICE_ID_YAMAHA_724  macro  include/linux/pci_ids.h  937  #define PCI_DEVICE_ID_YAMAHA_724 0x0004
PCI_DEVICE_ID_YAMAHA_724F  macro  include/linux/pci_ids.h  938  #define PCI_DEVICE_ID_YAMAHA_724F 0x000d
PCI_DEVICE_ID_YAMAHA_740  macro  include/linux/pci_ids.h  939  #define PCI_DEVICE_ID_YAMAHA_740 0x000a
PCI_DEVICE_ID_YAMAHA_740C  macro  include/linux/pci_ids.h  940  #define PCI_DEVICE_ID_YAMAHA_740C 0x000c
PCI_DEVICE_ID_YAMAHA_744  macro  include/linux/pci_ids.h  941  #define PCI_DEVICE_ID_YAMAHA_744 0x0010
PCI_DEVICE_ID_YAMAHA_754  macro  include/linux/pci_ids.h  942  #define PCI_DEVICE_ID_YAMAHA_754 0x0012
PCI_VENDOR_ID_QLOGIC  macro  include/linux/pci_ids.h  944  #define PCI_VENDOR_ID_QLOGIC 0x1077
PCI_DEVICE_ID_QLOGIC_ISP10160  macro  include/linux/pci_ids.h  945  #define PCI_DEVICE_ID_QLOGIC_ISP10160 0x1016
PCI_DEVICE_ID_QLOGIC_ISP1020  macro  include/linux/pci_ids.h  946  #define PCI_DEVICE_ID_QLOGIC_ISP1020 0x1020
PCI_DEVICE_ID_QLOGIC_ISP1080  macro  include/linux/pci_ids.h  947  #define PCI_DEVICE_ID_QLOGIC_ISP1080 0x1080
PCI_DEVICE_ID_QLOGIC_ISP12160  macro  include/linux/pci_ids.h  948  #define PCI_DEVICE_ID_QLOGIC_ISP12160 0x1216
PCI_DEVICE_ID_QLOGIC_ISP1240  macro  include/linux/pci_ids.h  949  #define PCI_DEVICE_ID_QLOGIC_ISP1240 0x1240
PCI_DEVICE_ID_QLOGIC_ISP1280  macro  include/linux/pci_ids.h  950  #define PCI_DEVICE_ID_QLOGIC_ISP1280 0x1280
PCI_DEVICE_ID_QLOGIC_ISP2100  macro  include/linux/pci_ids.h  951  #define PCI_DEVICE_ID_QLOGIC_ISP2100 0x2100
PCI_DEVICE_ID_QLOGIC_ISP2200  macro  include/linux/pci_ids.h  952  #define PCI_DEVICE_ID_QLOGIC_ISP2200 0x2200
PCI_DEVICE_ID_QLOGIC_ISP2300  macro  include/linux/pci_ids.h  953  #define PCI_DEVICE_ID_QLOGIC_ISP2300 0x2300
PCI_DEVICE_ID_QLOGIC_ISP2312  macro  include/linux/pci_ids.h  954  #define PCI_DEVICE_ID_QLOGIC_ISP2312 0x2312
PCI_DEVICE_ID_QLOGIC_ISP2322  macro  include/linux/pci_ids.h  955  #define PCI_DEVICE_ID_QLOGIC_ISP2322 0x2322
PCI_DEVICE_ID_QLOGIC_ISP6312  macro  include/linux/pci_ids.h  956  #define PCI_DEVICE_ID_QLOGIC_ISP6312 0x6312
PCI_DEVICE_ID_QLOGIC_ISP6322  macro  include/linux/pci_ids.h  957  #define PCI_DEVICE_ID_QLOGIC_ISP6322 0x6322
PCI_DEVICE_ID_QLOGIC_ISP2422  macro  include/linux/pci_ids.h  958  #define PCI_DEVICE_ID_QLOGIC_ISP2422 0x2422
PCI_DEVICE_ID_QLOGIC_ISP2432  macro  include/linux/pci_ids.h  959  #define PCI_DEVICE_ID_QLOGIC_ISP2432 0x2432
PCI_DEVICE_ID_QLOGIC_ISP2512  macro  include/linux/pci_ids.h  960  #define PCI_DEVICE_ID_QLOGIC_ISP2512 0x2512
PCI_DEVICE_ID_QLOGIC_ISP2522  macro  include/linux/pci_ids.h  961  #define PCI_DEVICE_ID_QLOGIC_ISP2522 0x2522
PCI_DEVICE_ID_QLOGIC_ISP5422  macro  include/linux/pci_ids.h  962  #define PCI_DEVICE_ID_QLOGIC_ISP5422 0x5422
PCI_DEVICE_ID_QLOGIC_ISP5432  macro  include/linux/pci_ids.h  963  #define PCI_DEVICE_ID_QLOGIC_ISP5432 0x5432
PCI_VENDOR_ID_CYRIX  macro  include/linux/pci_ids.h  965  #define PCI_VENDOR_ID_CYRIX 0x1078
PCI_DEVICE_ID_CYRIX_5510  macro  include/linux/pci_ids.h  966  #define PCI_DEVICE_ID_CYRIX_5510 0x0000
PCI_DEVICE_ID_CYRIX_PCI_MASTER  macro  include/linux/pci_ids.h  967  #define PCI_DEVICE_ID_CYRIX_PCI_MASTER 0x0001
PCI_DEVICE_ID_CYRIX_5520  macro  include/linux/pci_ids.h  968  #define PCI_DEVICE_ID_CYRIX_5520 0x0002
PCI_DEVICE_ID_CYRIX_5530_LEGACY  macro  include/linux/pci_ids.h  969  #define PCI_DEVICE_ID_CYRIX_5530_LEGACY 0x0100
PCI_DEVICE_ID_CYRIX_5530_IDE  macro  include/linux/pci_ids.h  970  #define PCI_DEVICE_ID_CYRIX_5530_IDE 0x0102
PCI_DEVICE_ID_CYRIX_5530_AUDIO  macro  include/linux/pci_ids.h  971  #define PCI_DEVICE_ID_CYRIX_5530_AUDIO 0x0103
PCI_DEVICE_ID_CYRIX_5530_VIDEO  macro  include/linux/pci_ids.h  972  #define PCI_DEVICE_ID_CYRIX_5530_VIDEO 0x0104
PCI_VENDOR_ID_CONTAQ  macro  include/linux/pci_ids.h  974  #define PCI_VENDOR_ID_CONTAQ 0x1080
PCI_DEVICE_ID_CONTAQ_82C693  macro  include/linux/pci_ids.h  975  #define PCI_DEVICE_ID_CONTAQ_82C693 0xc693
PCI_VENDOR_ID_OLICOM  macro  include/linux/pci_ids.h  977  #define PCI_VENDOR_ID_OLICOM 0x108d
PCI_DEVICE_ID_OLICOM_OC2325  macro  include/linux/pci_ids.h  978  #define PCI_DEVICE_ID_OLICOM_OC2325 0x0012
PCI_DEVICE_ID_OLICOM_OC2183  macro  include/linux/pci_ids.h  979  #define PCI_DEVICE_ID_OLICOM_OC2183 0x0013
PCI_DEVICE_ID_OLICOM_OC2326  macro  include/linux/pci_ids.h  980  #define PCI_DEVICE_ID_OLICOM_OC2326 0x0014
PCI_VENDOR_ID_SUN  macro  include/linux/pci_ids.h  982  #define PCI_VENDOR_ID_SUN 0x108e
PCI_DEVICE_ID_SUN_EBUS  macro  include/linux/pci_ids.h  983  #define PCI_DEVICE_ID_SUN_EBUS 0x1000
PCI_DEVICE_ID_SUN_HAPPYMEAL  macro  include/linux/pci_ids.h  984  #define PCI_DEVICE_ID_SUN_HAPPYMEAL 0x1001
PCI_DEVICE_ID_SUN_RIO_EBUS  macro  include/linux/pci_ids.h  985  #define PCI_DEVICE_ID_SUN_RIO_EBUS 0x1100
PCI_DEVICE_ID_SUN_RIO_GEM  macro  include/linux/pci_ids.h  986  #define PCI_DEVICE_ID_SUN_RIO_GEM 0x1101
PCI_DEVICE_ID_SUN_RIO_1394  macro  include/linux/pci_ids.h  987  #define PCI_DEVICE_ID_SUN_RIO_1394 0x1102
PCI_DEVICE_ID_SUN_RIO_USB  macro  include/linux/pci_ids.h  988  #define PCI_DEVICE_ID_SUN_RIO_USB 0x1103
PCI_DEVICE_ID_SUN_GEM  macro  include/linux/pci_ids.h  989  #define PCI_DEVICE_ID_SUN_GEM 0x2bad
PCI_DEVICE_ID_SUN_SIMBA  macro  include/linux/pci_ids.h  990  #define PCI_DEVICE_ID_SUN_SIMBA 0x5000
PCI_DEVICE_ID_SUN_PBM  macro  include/linux/pci_ids.h  991  #define PCI_DEVICE_ID_SUN_PBM 0x8000
PCI_DEVICE_ID_SUN_SCHIZO  macro  include/linux/pci_ids.h  992  #define PCI_DEVICE_ID_SUN_SCHIZO 0x8001
PCI_DEVICE_ID_SUN_SABRE  macro  include/linux/pci_ids.h  993  #define PCI_DEVICE_ID_SUN_SABRE 0xa000
PCI_DEVICE_ID_SUN_HUMMINGBIRD  macro  include/linux/pci_ids.h  994  #define PCI_DEVICE_ID_SUN_HUMMINGBIRD 0xa001
PCI_DEVICE_ID_SUN_TOMATILLO  macro  include/linux/pci_ids.h  995  #define PCI_DEVICE_ID_SUN_TOMATILLO 0xa801
PCI_DEVICE_ID_SUN_CASSINI  macro  include/linux/pci_ids.h  996  #define PCI_DEVICE_ID_SUN_CASSINI 0xabba
PCI_VENDOR_ID_NI  macro  include/linux/pci_ids.h  998  #define PCI_VENDOR_ID_NI 0x1093
PCI_DEVICE_ID_NI_PCI2322  macro  include/linux/pci_ids.h  999  #define PCI_DEVICE_ID_NI_PCI2322 0xd130
PCI_DEVICE_ID_NI_PCI2324  macro  include/linux/pci_ids.h  1000  #define PCI_DEVICE_ID_NI_PCI2324 0xd140
PCI_DEVICE_ID_NI_PCI2328  macro  include/linux/pci_ids.h  1001  #define PCI_DEVICE_ID_NI_PCI2328 0xd150
PCI_DEVICE_ID_NI_PXI8422_2322  macro  include/linux/pci_ids.h  1002  #define PCI_DEVICE_ID_NI_PXI8422_2322 0xd190
PCI_DEVICE_ID_NI_PXI8422_2324  macro  include/linux/pci_ids.h  1003  #define PCI_DEVICE_ID_NI_PXI8422_2324 0xd1a0
PCI_DEVICE_ID_NI_PXI8420_2322  macro  include/linux/pci_ids.h  1004  #define PCI_DEVICE_ID_NI_PXI8420_2322 0xd1d0
PCI_DEVICE_ID_NI_PXI8420_2324  macro  include/linux/pci_ids.h  1005  #define PCI_DEVICE_ID_NI_PXI8420_2324 0xd1e0
PCI_DEVICE_ID_NI_PXI8420_2328  macro  include/linux/pci_ids.h  1006  #define PCI_DEVICE_ID_NI_PXI8420_2328 0xd1f0
PCI_DEVICE_ID_NI_PXI8420_23216  macro  include/linux/pci_ids.h  1007  #define PCI_DEVICE_ID_NI_PXI8420_23216 0xd1f1
PCI_DEVICE_ID_NI_PCI2322I  macro  include/linux/pci_ids.h  1008  #define PCI_DEVICE_ID_NI_PCI2322I 0xd250
PCI_DEVICE_ID_NI_PCI2324I  macro  include/linux/pci_ids.h  1009  #define PCI_DEVICE_ID_NI_PCI2324I 0xd270
PCI_DEVICE_ID_NI_PCI23216  macro  include/linux/pci_ids.h  1010  #define PCI_DEVICE_ID_NI_PCI23216 0xd2b0
PCI_DEVICE_ID_NI_PXI8430_2322  macro  include/linux/pci_ids.h  1011  #define PCI_DEVICE_ID_NI_PXI8430_2322 0x7080
PCI_DEVICE_ID_NI_PCI8430_2322  macro  include/linux/pci_ids.h  1012  #define PCI_DEVICE_ID_NI_PCI8430_2322 0x70db
PCI_DEVICE_ID_NI_PXI8430_2324  macro  include/linux/pci_ids.h  1013  #define PCI_DEVICE_ID_NI_PXI8430_2324 0x70dd
PCI_DEVICE_ID_NI_PCI8430_2324  macro  include/linux/pci_ids.h  1014  #define PCI_DEVICE_ID_NI_PCI8430_2324 0x70df
PCI_DEVICE_ID_NI_PXI8430_2328  macro  include/linux/pci_ids.h  1015  #define PCI_DEVICE_ID_NI_PXI8430_2328 0x70e2
PCI_DEVICE_ID_NI_PCI8430_2328  macro  include/linux/pci_ids.h  1016  #define PCI_DEVICE_ID_NI_PCI8430_2328 0x70e4
PCI_DEVICE_ID_NI_PXI8430_23216  macro  include/linux/pci_ids.h  1017  #define PCI_DEVICE_ID_NI_PXI8430_23216 0x70e6
PCI_DEVICE_ID_NI_PCI8430_23216  macro  include/linux/pci_ids.h  1018  #define PCI_DEVICE_ID_NI_PCI8430_23216 0x70e7
PCI_DEVICE_ID_NI_PXI8432_2322  macro  include/linux/pci_ids.h  1019  #define PCI_DEVICE_ID_NI_PXI8432_2322 0x70e8
PCI_DEVICE_ID_NI_PCI8432_2322  macro  include/linux/pci_ids.h  1020  #define PCI_DEVICE_ID_NI_PCI8432_2322 0x70ea
PCI_DEVICE_ID_NI_PXI8432_2324  macro  include/linux/pci_ids.h  1021  #define PCI_DEVICE_ID_NI_PXI8432_2324 0x70ec
PCI_DEVICE_ID_NI_PCI8432_2324  macro  include/linux/pci_ids.h  1022  #define PCI_DEVICE_ID_NI_PCI8432_2324 0x70ee
PCI_VENDOR_ID_CMD  macro  include/linux/pci_ids.h  1024  #define PCI_VENDOR_ID_CMD 0x1095
PCI_DEVICE_ID_CMD_643  macro  include/linux/pci_ids.h  1025  #define PCI_DEVICE_ID_CMD_643 0x0643
PCI_DEVICE_ID_CMD_646  macro  include/linux/pci_ids.h  1026  #define PCI_DEVICE_ID_CMD_646 0x0646
PCI_DEVICE_ID_CMD_648  macro  include/linux/pci_ids.h  1027  #define PCI_DEVICE_ID_CMD_648 0x0648
PCI_DEVICE_ID_CMD_649  macro  include/linux/pci_ids.h  1028  #define PCI_DEVICE_ID_CMD_649 0x0649
PCI_DEVICE_ID_SII_680  macro  include/linux/pci_ids.h  1030  #define PCI_DEVICE_ID_SII_680 0x0680
PCI_DEVICE_ID_SII_3112  macro  include/linux/pci_ids.h  1031  #define PCI_DEVICE_ID_SII_3112 0x3112
PCI_DEVICE_ID_SII_1210SA  macro  include/linux/pci_ids.h  1032  #define PCI_DEVICE_ID_SII_1210SA 0x0240
PCI_VENDOR_ID_BROOKTREE  macro  include/linux/pci_ids.h  1034  #define PCI_VENDOR_ID_BROOKTREE 0x109e
PCI_DEVICE_ID_BROOKTREE_878  macro  include/linux/pci_ids.h  1035  #define PCI_DEVICE_ID_BROOKTREE_878 0x0878
PCI_DEVICE_ID_BROOKTREE_879  macro  include/linux/pci_ids.h  1036  #define PCI_DEVICE_ID_BROOKTREE_879 0x0879
PCI_VENDOR_ID_SGI  macro  include/linux/pci_ids.h  1038  #define PCI_VENDOR_ID_SGI 0x10a9
PCI_DEVICE_ID_SGI_IOC3  macro  include/linux/pci_ids.h  1039  #define PCI_DEVICE_ID_SGI_IOC3 0x0003
PCI_DEVICE_ID_SGI_LITHIUM  macro  include/linux/pci_ids.h  1040  #define PCI_DEVICE_ID_SGI_LITHIUM 0x1002
PCI_DEVICE_ID_SGI_IOC4  macro  include/linux/pci_ids.h  1041  #define PCI_DEVICE_ID_SGI_IOC4 0x100a
PCI_VENDOR_ID_WINBOND  macro  include/linux/pci_ids.h  1043  #define PCI_VENDOR_ID_WINBOND 0x10ad
PCI_DEVICE_ID_WINBOND_82C105  macro  include/linux/pci_ids.h  1044  #define PCI_DEVICE_ID_WINBOND_82C105 0x0105
PCI_DEVICE_ID_WINBOND_83C553  macro  include/linux/pci_ids.h  1045  #define PCI_DEVICE_ID_WINBOND_83C553 0x0565
PCI_VENDOR_ID_PLX  macro  include/linux/pci_ids.h  1047  #define PCI_VENDOR_ID_PLX 0x10b5
PCI_DEVICE_ID_PLX_R685  macro  include/linux/pci_ids.h  1048  #define PCI_DEVICE_ID_PLX_R685 0x1030
PCI_DEVICE_ID_PLX_ROMULUS  macro  include/linux/pci_ids.h  1049  #define PCI_DEVICE_ID_PLX_ROMULUS 0x106a
PCI_DEVICE_ID_PLX_SPCOM800  macro  include/linux/pci_ids.h  1050  #define PCI_DEVICE_ID_PLX_SPCOM800 0x1076
PCI_DEVICE_ID_PLX_1077  macro  include/linux/pci_ids.h  1051  #define PCI_DEVICE_ID_PLX_1077 0x1077
PCI_DEVICE_ID_PLX_SPCOM200  macro  include/linux/pci_ids.h  1052  #define PCI_DEVICE_ID_PLX_SPCOM200 0x1103
PCI_DEVICE_ID_PLX_DJINN_ITOO  macro  include/linux/pci_ids.h  1053  #define PCI_DEVICE_ID_PLX_DJINN_ITOO 0x1151
PCI_DEVICE_ID_PLX_R753  macro  include/linux/pci_ids.h  1054  #define PCI_DEVICE_ID_PLX_R753 0x1152
PCI_DEVICE_ID_PLX_OLITEC  macro  include/linux/pci_ids.h  1055  #define PCI_DEVICE_ID_PLX_OLITEC 0x1187
PCI_DEVICE_ID_PLX_PCI200SYN  macro  include/linux/pci_ids.h  1056  #define PCI_DEVICE_ID_PLX_PCI200SYN 0x3196
PCI_DEVICE_ID_PLX_9030  macro  include/linux/pci_ids.h  1057  #define PCI_DEVICE_ID_PLX_9030 0x9030
PCI_DEVICE_ID_PLX_9050  macro  include/linux/pci_ids.h  1058  #define PCI_DEVICE_ID_PLX_9050 0x9050
PCI_DEVICE_ID_PLX_9056  macro  include/linux/pci_ids.h  1059  #define PCI_DEVICE_ID_PLX_9056 0x9056
PCI_DEVICE_ID_PLX_9080  macro  include/linux/pci_ids.h  1060  #define PCI_DEVICE_ID_PLX_9080 0x9080
PCI_DEVICE_ID_PLX_GTEK_SERIAL2  macro  include/linux/pci_ids.h  1061  #define PCI_DEVICE_ID_PLX_GTEK_SERIAL2 0xa001
PCI_VENDOR_ID_MADGE  macro  include/linux/pci_ids.h  1063  #define PCI_VENDOR_ID_MADGE 0x10b6
PCI_DEVICE_ID_MADGE_MK2  macro  include/linux/pci_ids.h  1064  #define PCI_DEVICE_ID_MADGE_MK2 0x0002
PCI_VENDOR_ID_3COM  macro  include/linux/pci_ids.h  1066  #define PCI_VENDOR_ID_3COM 0x10b7
PCI_DEVICE_ID_3COM_3C985  macro  include/linux/pci_ids.h  1067  #define PCI_DEVICE_ID_3COM_3C985 0x0001
PCI_DEVICE_ID_3COM_3C940  macro  include/linux/pci_ids.h  1068  #define PCI_DEVICE_ID_3COM_3C940 0x1700
PCI_DEVICE_ID_3COM_3C339  macro  include/linux/pci_ids.h  1069  #define PCI_DEVICE_ID_3COM_3C339 0x3390
PCI_DEVICE_ID_3COM_3C359  macro  include/linux/pci_ids.h  1070  #define PCI_DEVICE_ID_3COM_3C359 0x3590
PCI_DEVICE_ID_3COM_3C940B  macro  include/linux/pci_ids.h  1071  #define PCI_DEVICE_ID_3COM_3C940B 0x80eb
PCI_DEVICE_ID_3COM_3CR990  macro  include/linux/pci_ids.h  1072  #define PCI_DEVICE_ID_3COM_3CR990 0x9900
PCI_DEVICE_ID_3COM_3CR990_TX_95  macro  include/linux/pci_ids.h  1073  #define PCI_DEVICE_ID_3COM_3CR990_TX_95 0x9902
PCI_DEVICE_ID_3COM_3CR990_TX_97  macro  include/linux/pci_ids.h  1074  #define PCI_DEVICE_ID_3COM_3CR990_TX_97 0x9903
PCI_DEVICE_ID_3COM_3CR990B  macro  include/linux/pci_ids.h  1075  #define PCI_DEVICE_ID_3COM_3CR990B 0x9904
PCI_DEVICE_ID_3COM_3CR990_FX  macro  include/linux/pci_ids.h  1076  #define PCI_DEVICE_ID_3COM_3CR990_FX 0x9905
PCI_DEVICE_ID_3COM_3CR990SVR95  macro  include/linux/pci_ids.h  1077  #define PCI_DEVICE_ID_3COM_3CR990SVR95 0x9908
PCI_DEVICE_ID_3COM_3CR990SVR97  macro  include/linux/pci_ids.h  1078  #define PCI_DEVICE_ID_3COM_3CR990SVR97 0x9909
PCI_DEVICE_ID_3COM_3CR990SVR  macro  include/linux/pci_ids.h  1079  #define PCI_DEVICE_ID_3COM_3CR990SVR 0x990a
PCI_VENDOR_ID_AL  macro  include/linux/pci_ids.h  1081  #define PCI_VENDOR_ID_AL 0x10b9
PCI_DEVICE_ID_AL_M1533  macro  include/linux/pci_ids.h  1082  #define PCI_DEVICE_ID_AL_M1533 0x1533
PCI_DEVICE_ID_AL_M1535  macro  include/linux/pci_ids.h  1083  #define PCI_DEVICE_ID_AL_M1535 0x1535
PCI_DEVICE_ID_AL_M1541  macro  include/linux/pci_ids.h  1084  #define PCI_DEVICE_ID_AL_M1541 0x1541
PCI_DEVICE_ID_AL_M1563  macro  include/linux/pci_ids.h  1085  #define PCI_DEVICE_ID_AL_M1563 0x1563
PCI_DEVICE_ID_AL_M1621  macro  include/linux/pci_ids.h  1086  #define PCI_DEVICE_ID_AL_M1621 0x1621
PCI_DEVICE_ID_AL_M1631  macro  include/linux/pci_ids.h  1087  #define PCI_DEVICE_ID_AL_M1631 0x1631
PCI_DEVICE_ID_AL_M1632  macro  include/linux/pci_ids.h  1088  #define PCI_DEVICE_ID_AL_M1632 0x1632
PCI_DEVICE_ID_AL_M1641  macro  include/linux/pci_ids.h  1089  #define PCI_DEVICE_ID_AL_M1641 0x1641
PCI_DEVICE_ID_AL_M1644  macro  include/linux/pci_ids.h  1090  #define PCI_DEVICE_ID_AL_M1644 0x1644
PCI_DEVICE_ID_AL_M1647  macro  include/linux/pci_ids.h  1091  #define PCI_DEVICE_ID_AL_M1647 0x1647
PCI_DEVICE_ID_AL_M1651  macro  include/linux/pci_ids.h  1092  #define PCI_DEVICE_ID_AL_M1651 0x1651
PCI_DEVICE_ID_AL_M1671  macro  include/linux/pci_ids.h  1093  #define PCI_DEVICE_ID_AL_M1671 0x1671
PCI_DEVICE_ID_AL_M1681  macro  include/linux/pci_ids.h  1094  #define PCI_DEVICE_ID_AL_M1681 0x1681
PCI_DEVICE_ID_AL_M1683  macro  include/linux/pci_ids.h  1095  #define PCI_DEVICE_ID_AL_M1683 0x1683
PCI_DEVICE_ID_AL_M1689  macro  include/linux/pci_ids.h  1096  #define PCI_DEVICE_ID_AL_M1689 0x1689
PCI_DEVICE_ID_AL_M5219  macro  include/linux/pci_ids.h  1097  #define PCI_DEVICE_ID_AL_M5219 0x5219
PCI_DEVICE_ID_AL_M5228  macro  include/linux/pci_ids.h  1098  #define PCI_DEVICE_ID_AL_M5228 0x5228
PCI_DEVICE_ID_AL_M5229  macro  include/linux/pci_ids.h  1099  #define PCI_DEVICE_ID_AL_M5229 0x5229
PCI_DEVICE_ID_AL_M5451  macro  include/linux/pci_ids.h  1100  #define PCI_DEVICE_ID_AL_M5451 0x5451
PCI_DEVICE_ID_AL_M7101  macro  include/linux/pci_ids.h  1101  #define PCI_DEVICE_ID_AL_M7101 0x7101
PCI_VENDOR_ID_NEOMAGIC  macro  include/linux/pci_ids.h  1103  #define PCI_VENDOR_ID_NEOMAGIC 0x10c8
PCI_DEVICE_ID_NEOMAGIC_NM256AV_AUDIO  macro  include/linux/pci_ids.h  1104  #define PCI_DEVICE_ID_NEOMAGIC_NM256AV_AUDIO 0x8005
PCI_DEVICE_ID_NEOMAGIC_NM256ZX_AUDIO  macro  include/linux/pci_ids.h  1105  #define PCI_DEVICE_ID_NEOMAGIC_NM256ZX_AUDIO 0x8006
PCI_DEVICE_ID_NEOMAGIC_NM256XL_PLUS_AUDIO  macro  include/linux/pci_ids.h  1106  #define PCI_DEVICE_ID_NEOMAGIC_NM256XL_PLUS_AUDIO 0x8016
PCI_VENDOR_ID_TCONRAD  macro  include/linux/pci_ids.h  1108  #define PCI_VENDOR_ID_TCONRAD 0x10da
PCI_DEVICE_ID_TCONRAD_TOKENRING  macro  include/linux/pci_ids.h  1109  #define PCI_DEVICE_ID_TCONRAD_TOKENRING 0x0508
PCI_VENDOR_ID_NVIDIA  macro  include/linux/pci_ids.h  1111  #define PCI_VENDOR_ID_NVIDIA 0x10de
PCI_DEVICE_ID_NVIDIA_TNT  macro  include/linux/pci_ids.h  1112  #define PCI_DEVICE_ID_NVIDIA_TNT 0x0020
PCI_DEVICE_ID_NVIDIA_TNT2  macro  include/linux/pci_ids.h  1113  #define PCI_DEVICE_ID_NVIDIA_TNT2 0x0028
PCI_DEVICE_ID_NVIDIA_UTNT2  macro  include/linux/pci_ids.h  1114  #define PCI_DEVICE_ID_NVIDIA_UTNT2 0x0029
PCI_DEVICE_ID_NVIDIA_TNT_UNKNOWN  macro  include/linux/pci_ids.h  1115  #define PCI_DEVICE_ID_NVIDIA_TNT_UNKNOWN 0x002a
PCI_DEVICE_ID_NVIDIA_VTNT2  macro  include/linux/pci_ids.h  1116  #define PCI_DEVICE_ID_NVIDIA_VTNT2 0x002C
PCI_DEVICE_ID_NVIDIA_UVTNT2  macro  include/linux/pci_ids.h  1117  #define PCI_DEVICE_ID_NVIDIA_UVTNT2 0x002D
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SMBUS  macro  include/linux/pci_ids.h  1118  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SMBUS 0x0034
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_IDE  macro  include/linux/pci_ids.h  1119  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_IDE 0x0035
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA  macro  include/linux/pci_ids.h  1120  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA 0x0036
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA2  macro  include/linux/pci_ids.h  1121  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA2 0x003e
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_ULTRA  macro  include/linux/pci_ids.h  1122  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_ULTRA 0x0040
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800  macro  include/linux/pci_ids.h  1123  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800 0x0041
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_LE  macro  include/linux/pci_ids.h  1124  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_LE 0x0042
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_GT  macro  include/linux/pci_ids.h  1125  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_GT 0x0045
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_4000  macro  include/linux/pci_ids.h  1126  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_4000 0x004E
PCI_DEVICE_ID_NVIDIA_NFORCE4_SMBUS  macro  include/linux/pci_ids.h  1127  #define PCI_DEVICE_ID_NVIDIA_NFORCE4_SMBUS 0x0052
PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_IDE  macro  include/linux/pci_ids.h  1128  #define PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_IDE 0x0053
PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA  macro  include/linux/pci_ids.h  1129  #define PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA 0x0054
PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA2  macro  include/linux/pci_ids.h  1130  #define PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA2 0x0055
PCI_DEVICE_ID_NVIDIA_CK804_AUDIO  macro  include/linux/pci_ids.h  1131  #define PCI_DEVICE_ID_NVIDIA_CK804_AUDIO 0x0059
PCI_DEVICE_ID_NVIDIA_CK804_PCIE  macro  include/linux/pci_ids.h  1132  #define PCI_DEVICE_ID_NVIDIA_CK804_PCIE 0x005d
PCI_DEVICE_ID_NVIDIA_NFORCE2_SMBUS  macro  include/linux/pci_ids.h  1133  #define PCI_DEVICE_ID_NVIDIA_NFORCE2_SMBUS 0x0064
PCI_DEVICE_ID_NVIDIA_NFORCE2_IDE  macro  include/linux/pci_ids.h  1134  #define PCI_DEVICE_ID_NVIDIA_NFORCE2_IDE 0x0065
PCI_DEVICE_ID_NVIDIA_MCP2_MODEM  macro  include/linux/pci_ids.h  1135  #define PCI_DEVICE_ID_NVIDIA_MCP2_MODEM 0x0069
PCI_DEVICE_ID_NVIDIA_MCP2_AUDIO  macro  include/linux/pci_ids.h  1136  #define PCI_DEVICE_ID_NVIDIA_MCP2_AUDIO 0x006a
PCI_DEVICE_ID_NVIDIA_NFORCE2S_SMBUS  macro  include/linux/pci_ids.h  1137  #define PCI_DEVICE_ID_NVIDIA_NFORCE2S_SMBUS 0x0084
PCI_DEVICE_ID_NVIDIA_NFORCE2S_IDE  macro  include/linux/pci_ids.h  1138  #define PCI_DEVICE_ID_NVIDIA_NFORCE2S_IDE 0x0085
PCI_DEVICE_ID_NVIDIA_MCP2S_MODEM  macro  include/linux/pci_ids.h  1139  #define PCI_DEVICE_ID_NVIDIA_MCP2S_MODEM 0x0089
PCI_DEVICE_ID_NVIDIA_CK8_AUDIO  macro  include/linux/pci_ids.h  1140  #define PCI_DEVICE_ID_NVIDIA_CK8_AUDIO 0x008a
PCI_DEVICE_ID_NVIDIA_NFORCE2S_SATA  macro  include/linux/pci_ids.h  1141  #define PCI_DEVICE_ID_NVIDIA_NFORCE2S_SATA 0x008e
PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GT  macro  include/linux/pci_ids.h  1142  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GT 0x0090
PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GTX  macro  include/linux/pci_ids.h  1143  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GTX 0x0091
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800  macro  include/linux/pci_ids.h  1144  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800 0x0098
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800_GTX  macro  include/linux/pci_ids.h  1145  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800_GTX 0x0099
PCI_DEVICE_ID_NVIDIA_ITNT2  macro  include/linux/pci_ids.h  1146  #define PCI_DEVICE_ID_NVIDIA_ITNT2 0x00A0
PCI_DEVICE_ID_GEFORCE_6800A  macro  include/linux/pci_ids.h  1147  #define PCI_DEVICE_ID_GEFORCE_6800A 0x00c1
PCI_DEVICE_ID_GEFORCE_6800A_LE  macro  include/linux/pci_ids.h  1148  #define PCI_DEVICE_ID_GEFORCE_6800A_LE 0x00c2
PCI_DEVICE_ID_GEFORCE_GO_6800  macro  include/linux/pci_ids.h  1149  #define PCI_DEVICE_ID_GEFORCE_GO_6800 0x00c8
PCI_DEVICE_ID_GEFORCE_GO_6800_ULTRA  macro  include/linux/pci_ids.h  1150  #define PCI_DEVICE_ID_GEFORCE_GO_6800_ULTRA 0x00c9
PCI_DEVICE_ID_QUADRO_FX_GO1400  macro  include/linux/pci_ids.h  1151  #define PCI_DEVICE_ID_QUADRO_FX_GO1400 0x00cc
PCI_DEVICE_ID_QUADRO_FX_1400  macro  include/linux/pci_ids.h  1152  #define PCI_DEVICE_ID_QUADRO_FX_1400 0x00ce
PCI_DEVICE_ID_NVIDIA_NFORCE3  macro  include/linux/pci_ids.h  1153  #define PCI_DEVICE_ID_NVIDIA_NFORCE3 0x00d1
PCI_DEVICE_ID_NVIDIA_NFORCE3_SMBUS  macro  include/linux/pci_ids.h  1154  #define PCI_DEVICE_ID_NVIDIA_NFORCE3_SMBUS 0x00d4
PCI_DEVICE_ID_NVIDIA_NFORCE3_IDE  macro  include/linux/pci_ids.h  1155  #define PCI_DEVICE_ID_NVIDIA_NFORCE3_IDE 0x00d5
PCI_DEVICE_ID_NVIDIA_MCP3_MODEM  macro  include/linux/pci_ids.h  1156  #define PCI_DEVICE_ID_NVIDIA_MCP3_MODEM 0x00d9
PCI_DEVICE_ID_NVIDIA_MCP3_AUDIO  macro  include/linux/pci_ids.h  1157  #define PCI_DEVICE_ID_NVIDIA_MCP3_AUDIO 0x00da
PCI_DEVICE_ID_NVIDIA_NFORCE3S  macro  include/linux/pci_ids.h  1158  #define PCI_DEVICE_ID_NVIDIA_NFORCE3S 0x00e1
PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA  macro  include/linux/pci_ids.h  1159  #define PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA 0x00e3
PCI_DEVICE_ID_NVIDIA_NFORCE3S_SMBUS  macro  include/linux/pci_ids.h  1160  #define PCI_DEVICE_ID_NVIDIA_NFORCE3S_SMBUS 0x00e4
PCI_DEVICE_ID_NVIDIA_NFORCE3S_IDE  macro  include/linux/pci_ids.h  1161  #define PCI_DEVICE_ID_NVIDIA_NFORCE3S_IDE 0x00e5
PCI_DEVICE_ID_NVIDIA_CK8S_AUDIO  macro  include/linux/pci_ids.h  1162  #define PCI_DEVICE_ID_NVIDIA_CK8S_AUDIO 0x00ea
PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA2  macro  include/linux/pci_ids.h  1163  #define PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA2 0x00ee
PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_ALT1  macro  include/linux/pci_ids.h  1164  #define PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_ALT1 0x00f0
PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT1  macro  include/linux/pci_ids.h  1165  #define PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT1 0x00f1
PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT2  macro  include/linux/pci_ids.h  1166  #define PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT2 0x00f2
PCIE_DEVICE_ID_NVIDIA_GEFORCE_6200_ALT1  macro  include/linux/pci_ids.h  1167  #define PCIE_DEVICE_ID_NVIDIA_GEFORCE_6200_ALT1 0x00f3
PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_GT  macro  include/linux/pci_ids.h  1168  #define PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_GT 0x00f9
PCIE_DEVICE_ID_NVIDIA_QUADRO_NVS280  macro  include/linux/pci_ids.h  1169  #define PCIE_DEVICE_ID_NVIDIA_QUADRO_NVS280 0x00fd
PCI_DEVICE_ID_NVIDIA_GEFORCE_SDR  macro  include/linux/pci_ids.h  1170  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_SDR 0x0100
PCI_DEVICE_ID_NVIDIA_GEFORCE_DDR  macro  include/linux/pci_ids.h  1171  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_DDR 0x0101
PCI_DEVICE_ID_NVIDIA_QUADRO  macro  include/linux/pci_ids.h  1172  #define PCI_DEVICE_ID_NVIDIA_QUADRO 0x0103
PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX  macro  include/linux/pci_ids.h  1173  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX 0x0110
PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX2  macro  include/linux/pci_ids.h  1174  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX2 0x0111
PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO  macro  include/linux/pci_ids.h  1175  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO 0x0112
PCI_DEVICE_ID_NVIDIA_QUADRO2_MXR  macro  include/linux/pci_ids.h  1176  #define PCI_DEVICE_ID_NVIDIA_QUADRO2_MXR 0x0113
PCI_DEVICE_ID_NVIDIA_GEFORCE_6600_GT  macro  include/linux/pci_ids.h  1177  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6600_GT 0x0140
PCI_DEVICE_ID_NVIDIA_GEFORCE_6600  macro  include/linux/pci_ids.h  1178  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6600 0x0141
PCI_DEVICE_ID_NVIDIA_GEFORCE_6610_XL  macro  include/linux/pci_ids.h  1179  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6610_XL 0x0145
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_540  macro  include/linux/pci_ids.h  1180  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_540 0x014E
PCI_DEVICE_ID_NVIDIA_GEFORCE_6200  macro  include/linux/pci_ids.h  1181  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6200 0x014F
PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS  macro  include/linux/pci_ids.h  1182  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS 0x0150
PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS2  macro  include/linux/pci_ids.h  1183  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS2 0x0151
PCI_DEVICE_ID_NVIDIA_GEFORCE2_ULTRA  macro  include/linux/pci_ids.h  1184  #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_ULTRA 0x0152
PCI_DEVICE_ID_NVIDIA_QUADRO2_PRO  macro  include/linux/pci_ids.h  1185  #define PCI_DEVICE_ID_NVIDIA_QUADRO2_PRO 0x0153
PCI_DEVICE_ID_NVIDIA_GEFORCE_6200_TURBOCACHE  macro  include/linux/pci_ids.h  1186  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6200_TURBOCACHE 0x0161
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200  macro  include/linux/pci_ids.h  1187  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200 0x0164
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250  macro  include/linux/pci_ids.h  1188  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250 0x0166
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200_1  macro  include/linux/pci_ids.h  1189  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200_1 0x0167
PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250_1  macro  include/linux/pci_ids.h  1190  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250_1 0x0168
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_460  macro  include/linux/pci_ids.h  1191  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_460 0x0170
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440  macro  include/linux/pci_ids.h  1192  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440 0x0171
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420  macro  include/linux/pci_ids.h  1193  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420 0x0172
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_SE  macro  include/linux/pci_ids.h  1194  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_SE 0x0173
PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO  macro  include/linux/pci_ids.h  1195  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO 0x0174
PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO  macro  include/linux/pci_ids.h  1196  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO 0x0175
PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO_M32  macro  include/linux/pci_ids.h  1197  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO_M32 0x0176
PCI_DEVICE_ID_NVIDIA_GEFORCE4_460_GO  macro  include/linux/pci_ids.h  1198  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_460_GO 0x0177
PCI_DEVICE_ID_NVIDIA_QUADRO4_500XGL  macro  include/linux/pci_ids.h  1199  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_500XGL 0x0178
PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO_M64  macro  include/linux/pci_ids.h  1200  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO_M64 0x0179
PCI_DEVICE_ID_NVIDIA_QUADRO4_200  macro  include/linux/pci_ids.h  1201  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_200 0x017A
PCI_DEVICE_ID_NVIDIA_QUADRO4_550XGL  macro  include/linux/pci_ids.h  1202  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_550XGL 0x017B
PCI_DEVICE_ID_NVIDIA_QUADRO4_500_GOGL  macro  include/linux/pci_ids.h  1203  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_500_GOGL 0x017C
PCI_DEVICE_ID_NVIDIA_GEFORCE4_410_GO_M16  macro  include/linux/pci_ids.h  1204  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_410_GO_M16 0x017D
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_8X  macro  include/linux/pci_ids.h  1205  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_8X 0x0181
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440SE_8X  macro  include/linux/pci_ids.h  1206  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440SE_8X 0x0182
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420_8X  macro  include/linux/pci_ids.h  1207  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420_8X 0x0183
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_4000  macro  include/linux/pci_ids.h  1208  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_4000 0x0185
PCI_DEVICE_ID_NVIDIA_GEFORCE4_448_GO  macro  include/linux/pci_ids.h  1209  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_448_GO 0x0186
PCI_DEVICE_ID_NVIDIA_GEFORCE4_488_GO  macro  include/linux/pci_ids.h  1210  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_488_GO 0x0187
PCI_DEVICE_ID_NVIDIA_QUADRO4_580_XGL  macro  include/linux/pci_ids.h  1211  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_580_XGL 0x0188
PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_MAC  macro  include/linux/pci_ids.h  1212  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_MAC 0x0189
PCI_DEVICE_ID_NVIDIA_QUADRO4_280_NVS  macro  include/linux/pci_ids.h  1213  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_280_NVS 0x018A
PCI_DEVICE_ID_NVIDIA_QUADRO4_380_XGL  macro  include/linux/pci_ids.h  1214  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_380_XGL 0x018B
PCI_DEVICE_ID_NVIDIA_IGEFORCE2  macro  include/linux/pci_ids.h  1215  #define PCI_DEVICE_ID_NVIDIA_IGEFORCE2 0x01a0
PCI_DEVICE_ID_NVIDIA_NFORCE  macro  include/linux/pci_ids.h  1216  #define PCI_DEVICE_ID_NVIDIA_NFORCE 0x01a4
PCI_DEVICE_ID_NVIDIA_MCP1_AUDIO  macro  include/linux/pci_ids.h  1217  #define PCI_DEVICE_ID_NVIDIA_MCP1_AUDIO 0x01b1
PCI_DEVICE_ID_NVIDIA_NFORCE_SMBUS  macro  include/linux/pci_ids.h  1218  #define PCI_DEVICE_ID_NVIDIA_NFORCE_SMBUS 0x01b4
PCI_DEVICE_ID_NVIDIA_NFORCE_IDE  macro  include/linux/pci_ids.h  1219  #define PCI_DEVICE_ID_NVIDIA_NFORCE_IDE 0x01bc
PCI_DEVICE_ID_NVIDIA_MCP1_MODEM  macro  include/linux/pci_ids.h  1220  #define PCI_DEVICE_ID_NVIDIA_MCP1_MODEM 0x01c1
PCI_DEVICE_ID_NVIDIA_NFORCE2  macro  include/linux/pci_ids.h  1221  #define PCI_DEVICE_ID_NVIDIA_NFORCE2 0x01e0
PCI_DEVICE_ID_NVIDIA_GEFORCE3  macro  include/linux/pci_ids.h  1222  #define PCI_DEVICE_ID_NVIDIA_GEFORCE3 0x0200
PCI_DEVICE_ID_NVIDIA_GEFORCE3_1  macro  include/linux/pci_ids.h  1223  #define PCI_DEVICE_ID_NVIDIA_GEFORCE3_1 0x0201
PCI_DEVICE_ID_NVIDIA_GEFORCE3_2  macro  include/linux/pci_ids.h  1224  #define PCI_DEVICE_ID_NVIDIA_GEFORCE3_2 0x0202
PCI_DEVICE_ID_NVIDIA_QUADRO_DDC  macro  include/linux/pci_ids.h  1225  #define PCI_DEVICE_ID_NVIDIA_QUADRO_DDC 0x0203
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B  macro  include/linux/pci_ids.h  1226  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B 0x0211
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_LE  macro  include/linux/pci_ids.h  1227  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_LE 0x0212
PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_GT  macro  include/linux/pci_ids.h  1228  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_GT 0x0215
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4600  macro  include/linux/pci_ids.h  1229  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4600 0x0250
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4400  macro  include/linux/pci_ids.h  1230  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4400 0x0251
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4200  macro  include/linux/pci_ids.h  1231  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4200 0x0253
PCI_DEVICE_ID_NVIDIA_QUADRO4_900XGL  macro  include/linux/pci_ids.h  1232  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_900XGL 0x0258
PCI_DEVICE_ID_NVIDIA_QUADRO4_750XGL  macro  include/linux/pci_ids.h  1233  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_750XGL 0x0259
PCI_DEVICE_ID_NVIDIA_QUADRO4_700XGL  macro  include/linux/pci_ids.h  1234  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_700XGL 0x025B
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SMBUS  macro  include/linux/pci_ids.h  1235  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SMBUS 0x0264
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_IDE  macro  include/linux/pci_ids.h  1236  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_IDE 0x0265
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA  macro  include/linux/pci_ids.h  1237  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA 0x0266
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA2  macro  include/linux/pci_ids.h  1238  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA2 0x0267
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SMBUS  macro  include/linux/pci_ids.h  1239  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SMBUS 0x0368
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_IDE  macro  include/linux/pci_ids.h  1240  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_IDE 0x036E
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA  macro  include/linux/pci_ids.h  1241  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA 0x037E
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA2  macro  include/linux/pci_ids.h  1242  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA2 0x037F
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800  macro  include/linux/pci_ids.h  1243  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800 0x0280
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800_8X  macro  include/linux/pci_ids.h  1244  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800_8X 0x0281
PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800SE  macro  include/linux/pci_ids.h  1245  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800SE 0x0282
PCI_DEVICE_ID_NVIDIA_GEFORCE4_4200_GO  macro  include/linux/pci_ids.h  1246  #define PCI_DEVICE_ID_NVIDIA_GEFORCE4_4200_GO 0x0286
PCI_DEVICE_ID_NVIDIA_QUADRO4_980_XGL  macro  include/linux/pci_ids.h  1247  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_980_XGL 0x0288
PCI_DEVICE_ID_NVIDIA_QUADRO4_780_XGL  macro  include/linux/pci_ids.h  1248  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_780_XGL 0x0289
PCI_DEVICE_ID_NVIDIA_QUADRO4_700_GOGL  macro  include/linux/pci_ids.h  1249  #define PCI_DEVICE_ID_NVIDIA_QUADRO4_700_GOGL 0x028C
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800_ULTRA  macro  include/linux/pci_ids.h  1250  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800_ULTRA 0x0301
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800  macro  include/linux/pci_ids.h  1251  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800 0x0302
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_2000  macro  include/linux/pci_ids.h  1252  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_2000 0x0308
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1000  macro  include/linux/pci_ids.h  1253  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1000 0x0309
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600_ULTRA  macro  include/linux/pci_ids.h  1254  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600_ULTRA 0x0311
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600  macro  include/linux/pci_ids.h  1255  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600 0x0312
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600SE  macro  include/linux/pci_ids.h  1256  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600SE 0x0314
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5600  macro  include/linux/pci_ids.h  1257  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5600 0x031A
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5650  macro  include/linux/pci_ids.h  1258  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5650 0x031B
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO700  macro  include/linux/pci_ids.h  1259  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO700 0x031C
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200  macro  include/linux/pci_ids.h  1260  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200 0x0320
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_ULTRA  macro  include/linux/pci_ids.h  1261  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_ULTRA 0x0321
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_1  macro  include/linux/pci_ids.h  1262  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_1 0x0322
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200SE  macro  include/linux/pci_ids.h  1263  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200SE 0x0323
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5200  macro  include/linux/pci_ids.h  1264  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5200 0x0324
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250  macro  include/linux/pci_ids.h  1265  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250 0x0325
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5500  macro  include/linux/pci_ids.h  1266  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5500 0x0326
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5100  macro  include/linux/pci_ids.h  1267  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5100 0x0327
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250_32  macro  include/linux/pci_ids.h  1268  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250_32 0x0328
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO_5200  macro  include/linux/pci_ids.h  1269  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO_5200 0x0329
PCI_DEVICE_ID_NVIDIA_QUADRO_NVS_280_PCI  macro  include/linux/pci_ids.h  1270  #define PCI_DEVICE_ID_NVIDIA_QUADRO_NVS_280_PCI 0x032A
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_500  macro  include/linux/pci_ids.h  1271  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_500 0x032B
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5300  macro  include/linux/pci_ids.h  1272  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5300 0x032C
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5100  macro  include/linux/pci_ids.h  1273  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5100 0x032D
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900_ULTRA  macro  include/linux/pci_ids.h  1274  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900_ULTRA 0x0330
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900  macro  include/linux/pci_ids.h  1275  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900 0x0331
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900XT  macro  include/linux/pci_ids.h  1276  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900XT 0x0332
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5950_ULTRA  macro  include/linux/pci_ids.h  1277  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5950_ULTRA 0x0333
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900ZT  macro  include/linux/pci_ids.h  1278  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900ZT 0x0334
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_3000  macro  include/linux/pci_ids.h  1279  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_3000 0x0338
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_700  macro  include/linux/pci_ids.h  1280  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_700 0x033F
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700_ULTRA  macro  include/linux/pci_ids.h  1281  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700_ULTRA 0x0341
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700  macro  include/linux/pci_ids.h  1282  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700 0x0342
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700LE  macro  include/linux/pci_ids.h  1283  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700LE 0x0343
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700VE  macro  include/linux/pci_ids.h  1284  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700VE 0x0344
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_1  macro  include/linux/pci_ids.h  1285  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_1 0x0347
PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_2  macro  include/linux/pci_ids.h  1286  #define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_2 0x0348
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO1000  macro  include/linux/pci_ids.h  1287  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO1000 0x034C
PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1100  macro  include/linux/pci_ids.h  1288  #define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1100 0x034E
PCI_DEVICE_ID_NVIDIA_MCP55_BRIDGE_V0  macro  include/linux/pci_ids.h  1289  #define PCI_DEVICE_ID_NVIDIA_MCP55_BRIDGE_V0 0x0360
PCI_DEVICE_ID_NVIDIA_MCP55_BRIDGE_V4  macro  include/linux/pci_ids.h  1290  #define PCI_DEVICE_ID_NVIDIA_MCP55_BRIDGE_V4 0x0364
PCI_DEVICE_ID_NVIDIA_NVENET_15  macro  include/linux/pci_ids.h  1291  #define PCI_DEVICE_ID_NVIDIA_NVENET_15 0x0373
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA  macro  include/linux/pci_ids.h  1292  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA 0x03E7
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SMBUS  macro  include/linux/pci_ids.h  1293  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SMBUS 0x03EB
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_IDE  macro  include/linux/pci_ids.h  1294  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_IDE 0x03EC
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA2  macro  include/linux/pci_ids.h  1295  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA2 0x03F6
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA3  macro  include/linux/pci_ids.h  1296  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA3 0x03F7
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_SMBUS  macro  include/linux/pci_ids.h  1297  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_SMBUS 0x0446
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_IDE  macro  include/linux/pci_ids.h  1298  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_IDE 0x0448
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP67_SMBUS  macro  include/linux/pci_ids.h  1299  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP67_SMBUS 0x0542
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP67_IDE  macro  include/linux/pci_ids.h  1300  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP67_IDE 0x0560
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP73_IDE  macro  include/linux/pci_ids.h  1301  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP73_IDE 0x056C
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP78S_SMBUS  macro  include/linux/pci_ids.h  1302  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP78S_SMBUS 0x0752
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP77_IDE  macro  include/linux/pci_ids.h  1303  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP77_IDE 0x0759
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP73_SMBUS  macro  include/linux/pci_ids.h  1304  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP73_SMBUS 0x07D8
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP79_SMBUS  macro  include/linux/pci_ids.h  1305  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP79_SMBUS 0x0AA2
PCI_DEVICE_ID_NVIDIA_NFORCE_MCP89_SATA  macro  include/linux/pci_ids.h  1306  #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP89_SATA 0x0D85
PCI_VENDOR_ID_IMS  macro  include/linux/pci_ids.h  1308  #define PCI_VENDOR_ID_IMS 0x10e0
PCI_DEVICE_ID_IMS_TT128  macro  include/linux/pci_ids.h  1309  #define PCI_DEVICE_ID_IMS_TT128 0x9128
PCI_DEVICE_ID_IMS_TT3D  macro  include/linux/pci_ids.h  1310  #define PCI_DEVICE_ID_IMS_TT3D 0x9135
PCI_VENDOR_ID_INTERG  macro  include/linux/pci_ids.h  1312  #define PCI_VENDOR_ID_INTERG 0x10ea
PCI_DEVICE_ID_INTERG_1682  macro  include/linux/pci_ids.h  1313  #define PCI_DEVICE_ID_INTERG_1682 0x1682
PCI_DEVICE_ID_INTERG_2000  macro  include/linux/pci_ids.h  1314  #define PCI_DEVICE_ID_INTERG_2000 0x2000
PCI_DEVICE_ID_INTERG_2010  macro  include/linux/pci_ids.h  1315  #define PCI_DEVICE_ID_INTERG_2010 0x2010
PCI_DEVICE_ID_INTERG_5000  macro  include/linux/pci_ids.h  1316  #define PCI_DEVICE_ID_INTERG_5000 0x5000
PCI_DEVICE_ID_INTERG_5050  macro  include/linux/pci_ids.h  1317  #define PCI_DEVICE_ID_INTERG_5050 0x5050
PCI_VENDOR_ID_REALTEK  macro  include/linux/pci_ids.h  1319  #define PCI_VENDOR_ID_REALTEK 0x10ec
PCI_DEVICE_ID_REALTEK_8139  macro  include/linux/pci_ids.h  1320  #define PCI_DEVICE_ID_REALTEK_8139 0x8139
PCI_VENDOR_ID_XILINX  macro  include/linux/pci_ids.h  1322  #define PCI_VENDOR_ID_XILINX 0x10ee
PCI_DEVICE_ID_RME_DIGI96  macro  include/linux/pci_ids.h  1323  #define PCI_DEVICE_ID_RME_DIGI96 0x3fc0
PCI_DEVICE_ID_RME_DIGI96_8  macro  include/linux/pci_ids.h  1324  #define PCI_DEVICE_ID_RME_DIGI96_8 0x3fc1
PCI_DEVICE_ID_RME_DIGI96_8_PRO  macro  include/linux/pci_ids.h  1325  #define PCI_DEVICE_ID_RME_DIGI96_8_PRO 0x3fc2
PCI_DEVICE_ID_RME_DIGI96_8_PAD_OR_PST  macro  include/linux/pci_ids.h  1326  #define PCI_DEVICE_ID_RME_DIGI96_8_PAD_OR_PST 0x3fc3
PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP  macro  include/linux/pci_ids.h  1327  #define PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP 0x3fc5
PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP_MADI  macro  include/linux/pci_ids.h  1328  #define PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP_MADI 0x3fc6
PCI_VENDOR_ID_INIT  macro  include/linux/pci_ids.h  1330  #define PCI_VENDOR_ID_INIT 0x1101
PCI_VENDOR_ID_CREATIVE  macro  include/linux/pci_ids.h  1332  #define PCI_VENDOR_ID_CREATIVE 0x1102
PCI_DEVICE_ID_CREATIVE_EMU10K1  macro  include/linux/pci_ids.h  1333  #define PCI_DEVICE_ID_CREATIVE_EMU10K1 0x0002
PCI_DEVICE_ID_CREATIVE_20K1  macro  include/linux/pci_ids.h  1334  #define PCI_DEVICE_ID_CREATIVE_20K1 0x0005
PCI_DEVICE_ID_CREATIVE_20K2  macro  include/linux/pci_ids.h  1335  #define PCI_DEVICE_ID_CREATIVE_20K2 0x000b
PCI_SUBDEVICE_ID_CREATIVE_SB0760  macro  include/linux/pci_ids.h  1336  #define PCI_SUBDEVICE_ID_CREATIVE_SB0760 0x0024
PCI_SUBDEVICE_ID_CREATIVE_SB08801  macro  include/linux/pci_ids.h  1337  #define PCI_SUBDEVICE_ID_CREATIVE_SB08801 0x0041
PCI_SUBDEVICE_ID_CREATIVE_SB08802  macro  include/linux/pci_ids.h  1338  #define PCI_SUBDEVICE_ID_CREATIVE_SB08802 0x0042
PCI_SUBDEVICE_ID_CREATIVE_SB08803  macro  include/linux/pci_ids.h  1339  #define PCI_SUBDEVICE_ID_CREATIVE_SB08803 0x0043
PCI_SUBDEVICE_ID_CREATIVE_SB1270  macro  include/linux/pci_ids.h  1340  #define PCI_SUBDEVICE_ID_CREATIVE_SB1270 0x0062
PCI_SUBDEVICE_ID_CREATIVE_HENDRIX  macro  include/linux/pci_ids.h  1341  #define PCI_SUBDEVICE_ID_CREATIVE_HENDRIX 0x6000
PCI_VENDOR_ID_ECTIVA  macro  include/linux/pci_ids.h  1343  #define PCI_VENDOR_ID_ECTIVA 0x1102
PCI_DEVICE_ID_ECTIVA_EV1938  macro  include/linux/pci_ids.h  1344  #define PCI_DEVICE_ID_ECTIVA_EV1938 0x8938
PCI_VENDOR_ID_TTI  macro  include/linux/pci_ids.h  1346  #define PCI_VENDOR_ID_TTI 0x1103
PCI_DEVICE_ID_TTI_HPT343  macro  include/linux/pci_ids.h  1347  #define PCI_DEVICE_ID_TTI_HPT343 0x0003
PCI_DEVICE_ID_TTI_HPT366  macro  include/linux/pci_ids.h  1348  #define PCI_DEVICE_ID_TTI_HPT366 0x0004
PCI_DEVICE_ID_TTI_HPT372  macro  include/linux/pci_ids.h  1349  #define PCI_DEVICE_ID_TTI_HPT372 0x0005
PCI_DEVICE_ID_TTI_HPT302  macro  include/linux/pci_ids.h  1350  #define PCI_DEVICE_ID_TTI_HPT302 0x0006
PCI_DEVICE_ID_TTI_HPT371  macro  include/linux/pci_ids.h  1351  #define PCI_DEVICE_ID_TTI_HPT371 0x0007
PCI_DEVICE_ID_TTI_HPT374  macro  include/linux/pci_ids.h  1352  #define PCI_DEVICE_ID_TTI_HPT374 0x0008
PCI_DEVICE_ID_TTI_HPT372N  macro  include/linux/pci_ids.h  1353  #define PCI_DEVICE_ID_TTI_HPT372N 0x0009
PCI_VENDOR_ID_VIA  macro  include/linux/pci_ids.h  1355  #define PCI_VENDOR_ID_VIA 0x1106
PCI_DEVICE_ID_VIA_8763_0  macro  include/linux/pci_ids.h  1356  #define PCI_DEVICE_ID_VIA_8763_0 0x0198
PCI_DEVICE_ID_VIA_8380_0  macro  include/linux/pci_ids.h  1357  #define PCI_DEVICE_ID_VIA_8380_0 0x0204
PCI_DEVICE_ID_VIA_3238_0  macro  include/linux/pci_ids.h  1358  #define PCI_DEVICE_ID_VIA_3238_0 0x0238
PCI_DEVICE_ID_VIA_PT880  macro  include/linux/pci_ids.h  1359  #define PCI_DEVICE_ID_VIA_PT880 0x0258
PCI_DEVICE_ID_VIA_PT880ULTRA  macro  include/linux/pci_ids.h  1360  #define PCI_DEVICE_ID_VIA_PT880ULTRA 0x0308
PCI_DEVICE_ID_VIA_PX8X0_0  macro  include/linux/pci_ids.h  1361  #define PCI_DEVICE_ID_VIA_PX8X0_0 0x0259
PCI_DEVICE_ID_VIA_3269_0  macro  include/linux/pci_ids.h  1362  #define PCI_DEVICE_ID_VIA_3269_0 0x0269
PCI_DEVICE_ID_VIA_K8T800PRO_0  macro  include/linux/pci_ids.h  1363  #define PCI_DEVICE_ID_VIA_K8T800PRO_0 0x0282
PCI_DEVICE_ID_VIA_3296_0  macro  include/linux/pci_ids.h  1364  #define PCI_DEVICE_ID_VIA_3296_0 0x0296
PCI_DEVICE_ID_VIA_8363_0  macro  include/linux/pci_ids.h  1365  #define PCI_DEVICE_ID_VIA_8363_0 0x0305
PCI_DEVICE_ID_VIA_P4M800CE  macro  include/linux/pci_ids.h  1366  #define PCI_DEVICE_ID_VIA_P4M800CE 0x0314
PCI_DEVICE_ID_VIA_P4M890  macro  include/linux/pci_ids.h  1367  #define PCI_DEVICE_ID_VIA_P4M890 0x0327
PCI_DEVICE_ID_VIA_VT3324  macro  include/linux/pci_ids.h  1368  #define PCI_DEVICE_ID_VIA_VT3324 0x0324
PCI_DEVICE_ID_VIA_VT3336  macro  include/linux/pci_ids.h  1369  #define PCI_DEVICE_ID_VIA_VT3336 0x0336
PCI_DEVICE_ID_VIA_VT3351  macro  include/linux/pci_ids.h  1370  #define PCI_DEVICE_ID_VIA_VT3351 0x0351
PCI_DEVICE_ID_VIA_VT3364  macro  include/linux/pci_ids.h  1371  #define PCI_DEVICE_ID_VIA_VT3364 0x0364
PCI_DEVICE_ID_VIA_8371_0  macro  include/linux/pci_ids.h  1372  #define PCI_DEVICE_ID_VIA_8371_0 0x0391
PCI_DEVICE_ID_VIA_6415  macro  include/linux/pci_ids.h  1373  #define PCI_DEVICE_ID_VIA_6415 0x0415
PCI_DEVICE_ID_VIA_8501_0  macro  include/linux/pci_ids.h  1374  #define PCI_DEVICE_ID_VIA_8501_0 0x0501
PCI_DEVICE_ID_VIA_82C561  macro  include/linux/pci_ids.h  1375  #define PCI_DEVICE_ID_VIA_82C561 0x0561
PCI_DEVICE_ID_VIA_82C586_1  macro  include/linux/pci_ids.h  1376  #define PCI_DEVICE_ID_VIA_82C586_1 0x0571
PCI_DEVICE_ID_VIA_82C576  macro  include/linux/pci_ids.h  1377  #define PCI_DEVICE_ID_VIA_82C576 0x0576
PCI_DEVICE_ID_VIA_82C586_0  macro  include/linux/pci_ids.h  1378  #define PCI_DEVICE_ID_VIA_82C586_0 0x0586
PCI_DEVICE_ID_VIA_82C596  macro  include/linux/pci_ids.h  1379  #define PCI_DEVICE_ID_VIA_82C596 0x0596
PCI_DEVICE_ID_VIA_82C597_0  macro  include/linux/pci_ids.h  1380  #define PCI_DEVICE_ID_VIA_82C597_0 0x0597
PCI_DEVICE_ID_VIA_82C598_0  macro  include/linux/pci_ids.h  1381  #define PCI_DEVICE_ID_VIA_82C598_0 0x0598
PCI_DEVICE_ID_VIA_8601_0  macro  include/linux/pci_ids.h  1382  #define PCI_DEVICE_ID_VIA_8601_0 0x0601
PCI_DEVICE_ID_VIA_8605_0  macro  include/linux/pci_ids.h  1383  #define PCI_DEVICE_ID_VIA_8605_0 0x0605
PCI_DEVICE_ID_VIA_82C686  macro  include/linux/pci_ids.h  1384  #define PCI_DEVICE_ID_VIA_82C686 0x0686
PCI_DEVICE_ID_VIA_82C691_0  macro  include/linux/pci_ids.h  1385  #define PCI_DEVICE_ID_VIA_82C691_0 0x0691
PCI_DEVICE_ID_VIA_82C576_1  macro  include/linux/pci_ids.h  1386  #define PCI_DEVICE_ID_VIA_82C576_1 0x1571
PCI_DEVICE_ID_VIA_82C586_2  macro  include/linux/pci_ids.h  1387  #define PCI_DEVICE_ID_VIA_82C586_2 0x3038
PCI_DEVICE_ID_VIA_82C586_3  macro  include/linux/pci_ids.h  1388  #define PCI_DEVICE_ID_VIA_82C586_3 0x3040
PCI_DEVICE_ID_VIA_82C596_3  macro  include/linux/pci_ids.h  1389  #define PCI_DEVICE_ID_VIA_82C596_3 0x3050
PCI_DEVICE_ID_VIA_82C596B_3  macro  include/linux/pci_ids.h  1390  #define PCI_DEVICE_ID_VIA_82C596B_3 0x3051
PCI_DEVICE_ID_VIA_82C686_4  macro  include/linux/pci_ids.h  1391  #define PCI_DEVICE_ID_VIA_82C686_4 0x3057
PCI_DEVICE_ID_VIA_82C686_5  macro  include/linux/pci_ids.h  1392  #define PCI_DEVICE_ID_VIA_82C686_5 0x3058
PCI_DEVICE_ID_VIA_8233_5  macro  include/linux/pci_ids.h  1393  #define PCI_DEVICE_ID_VIA_8233_5 0x3059
PCI_DEVICE_ID_VIA_8233_0  macro  include/linux/pci_ids.h  1394  #define PCI_DEVICE_ID_VIA_8233_0 0x3074
PCI_DEVICE_ID_VIA_8633_0  macro  include/linux/pci_ids.h  1395  #define PCI_DEVICE_ID_VIA_8633_0 0x3091
PCI_DEVICE_ID_VIA_8367_0  macro  include/linux/pci_ids.h  1396  #define PCI_DEVICE_ID_VIA_8367_0 0x3099
PCI_DEVICE_ID_VIA_8653_0  macro  include/linux/pci_ids.h  1397  #define PCI_DEVICE_ID_VIA_8653_0 0x3101
PCI_DEVICE_ID_VIA_8622  macro  include/linux/pci_ids.h  1398  #define PCI_DEVICE_ID_VIA_8622 0x3102
PCI_DEVICE_ID_VIA_8235_USB_2  macro  include/linux/pci_ids.h  1399  #define PCI_DEVICE_ID_VIA_8235_USB_2 0x3104
PCI_DEVICE_ID_VIA_8233C_0  macro  include/linux/pci_ids.h  1400  #define PCI_DEVICE_ID_VIA_8233C_0 0x3109
PCI_DEVICE_ID_VIA_8361  macro  include/linux/pci_ids.h  1401  #define PCI_DEVICE_ID_VIA_8361 0x3112
PCI_DEVICE_ID_VIA_XM266  macro  include/linux/pci_ids.h  1402  #define PCI_DEVICE_ID_VIA_XM266 0x3116
PCI_DEVICE_ID_VIA_612X  macro  include/linux/pci_ids.h  1403  #define PCI_DEVICE_ID_VIA_612X 0x3119
PCI_DEVICE_ID_VIA_862X_0  macro  include/linux/pci_ids.h  1404  #define PCI_DEVICE_ID_VIA_862X_0 0x3123
PCI_DEVICE_ID_VIA_8753_0  macro  include/linux/pci_ids.h  1405  #define PCI_DEVICE_ID_VIA_8753_0 0x3128
PCI_DEVICE_ID_VIA_8233A  macro  include/linux/pci_ids.h  1406  #define PCI_DEVICE_ID_VIA_8233A 0x3147
PCI_DEVICE_ID_VIA_8703_51_0  macro  include/linux/pci_ids.h  1407  #define PCI_DEVICE_ID_VIA_8703_51_0 0x3148
PCI_DEVICE_ID_VIA_8237_SATA  macro  include/linux/pci_ids.h  1408  #define PCI_DEVICE_ID_VIA_8237_SATA 0x3149
PCI_DEVICE_ID_VIA_XN266  macro  include/linux/pci_ids.h  1409  #define PCI_DEVICE_ID_VIA_XN266 0x3156
PCI_DEVICE_ID_VIA_6410  macro  include/linux/pci_ids.h  1410  #define PCI_DEVICE_ID_VIA_6410 0x3164
PCI_DEVICE_ID_VIA_8754C_0  macro  include/linux/pci_ids.h  1411  #define PCI_DEVICE_ID_VIA_8754C_0 0x3168
PCI_DEVICE_ID_VIA_8235  macro  include/linux/pci_ids.h  1412  #define PCI_DEVICE_ID_VIA_8235 0x3177
PCI_DEVICE_ID_VIA_8385_0  macro  include/linux/pci_ids.h  1413  #define PCI_DEVICE_ID_VIA_8385_0 0x3188
PCI_DEVICE_ID_VIA_8377_0  macro  include/linux/pci_ids.h  1414  #define PCI_DEVICE_ID_VIA_8377_0 0x3189
PCI_DEVICE_ID_VIA_8378_0  macro  include/linux/pci_ids.h  1415  #define PCI_DEVICE_ID_VIA_8378_0 0x3205
PCI_DEVICE_ID_VIA_8783_0  macro  include/linux/pci_ids.h  1416  #define PCI_DEVICE_ID_VIA_8783_0 0x3208
PCI_DEVICE_ID_VIA_8237  macro  include/linux/pci_ids.h  1417  #define PCI_DEVICE_ID_VIA_8237 0x3227
PCI_DEVICE_ID_VIA_8251  macro  include/linux/pci_ids.h  1418  #define PCI_DEVICE_ID_VIA_8251 0x3287
PCI_DEVICE_ID_VIA_8261  macro  include/linux/pci_ids.h  1419  #define PCI_DEVICE_ID_VIA_8261 0x3402
PCI_DEVICE_ID_VIA_8237A  macro  include/linux/pci_ids.h  1420  #define PCI_DEVICE_ID_VIA_8237A 0x3337
PCI_DEVICE_ID_VIA_8237S  macro  include/linux/pci_ids.h  1421  #define PCI_DEVICE_ID_VIA_8237S 0x3372
PCI_DEVICE_ID_VIA_SATA_EIDE  macro  include/linux/pci_ids.h  1422  #define PCI_DEVICE_ID_VIA_SATA_EIDE 0x5324
PCI_DEVICE_ID_VIA_8231  macro  include/linux/pci_ids.h  1423  #define PCI_DEVICE_ID_VIA_8231 0x8231
PCI_DEVICE_ID_VIA_8231_4  macro  include/linux/pci_ids.h  1424  #define PCI_DEVICE_ID_VIA_8231_4 0x8235
PCI_DEVICE_ID_VIA_8365_1  macro  include/linux/pci_ids.h  1425  #define PCI_DEVICE_ID_VIA_8365_1 0x8305
PCI_DEVICE_ID_VIA_CX700  macro  include/linux/pci_ids.h  1426  #define PCI_DEVICE_ID_VIA_CX700 0x8324
PCI_DEVICE_ID_VIA_CX700_IDE  macro  include/linux/pci_ids.h  1427  #define PCI_DEVICE_ID_VIA_CX700_IDE 0x0581
PCI_DEVICE_ID_VIA_VX800  macro  include/linux/pci_ids.h  1428  #define PCI_DEVICE_ID_VIA_VX800 0x8353
PCI_DEVICE_ID_VIA_VX855  macro  include/linux/pci_ids.h  1429  #define PCI_DEVICE_ID_VIA_VX855 0x8409
PCI_DEVICE_ID_VIA_VX900  macro  include/linux/pci_ids.h  1430  #define PCI_DEVICE_ID_VIA_VX900 0x8410
PCI_DEVICE_ID_VIA_8371_1  macro  include/linux/pci_ids.h  1431  #define PCI_DEVICE_ID_VIA_8371_1 0x8391
PCI_DEVICE_ID_VIA_82C598_1  macro  include/linux/pci_ids.h  1432  #define PCI_DEVICE_ID_VIA_82C598_1 0x8598
PCI_DEVICE_ID_VIA_838X_1  macro  include/linux/pci_ids.h  1433  #define PCI_DEVICE_ID_VIA_838X_1 0xB188
PCI_DEVICE_ID_VIA_83_87XX_1  macro  include/linux/pci_ids.h  1434  #define PCI_DEVICE_ID_VIA_83_87XX_1 0xB198
PCI_DEVICE_ID_VIA_VX855_IDE  macro  include/linux/pci_ids.h  1435  #define PCI_DEVICE_ID_VIA_VX855_IDE 0xC409
PCI_DEVICE_ID_VIA_ANON  macro  include/linux/pci_ids.h  1436  #define PCI_DEVICE_ID_VIA_ANON 0xFFFF
PCI_VENDOR_ID_SIEMENS  macro  include/linux/pci_ids.h  1438  #define PCI_VENDOR_ID_SIEMENS 0x110A
PCI_DEVICE_ID_SIEMENS_DSCC4  macro  include/linux/pci_ids.h  1439  #define PCI_DEVICE_ID_SIEMENS_DSCC4 0x2102
PCI_VENDOR_ID_VORTEX  macro  include/linux/pci_ids.h  1441  #define PCI_VENDOR_ID_VORTEX 0x1119
PCI_DEVICE_ID_VORTEX_GDT60x0  macro  include/linux/pci_ids.h  1442  #define PCI_DEVICE_ID_VORTEX_GDT60x0 0x0000
PCI_DEVICE_ID_VORTEX_GDT6000B  macro  include/linux/pci_ids.h  1443  #define PCI_DEVICE_ID_VORTEX_GDT6000B 0x0001
PCI_DEVICE_ID_VORTEX_GDT6x10  macro  include/linux/pci_ids.h  1444  #define PCI_DEVICE_ID_VORTEX_GDT6x10 0x0002
PCI_DEVICE_ID_VORTEX_GDT6x20  macro  include/linux/pci_ids.h  1445  #define PCI_DEVICE_ID_VORTEX_GDT6x20 0x0003
PCI_DEVICE_ID_VORTEX_GDT6530  macro  include/linux/pci_ids.h  1446  #define PCI_DEVICE_ID_VORTEX_GDT6530 0x0004
PCI_DEVICE_ID_VORTEX_GDT6550  macro  include/linux/pci_ids.h  1447  #define PCI_DEVICE_ID_VORTEX_GDT6550 0x0005
PCI_DEVICE_ID_VORTEX_GDT6x17  macro  include/linux/pci_ids.h  1448  #define PCI_DEVICE_ID_VORTEX_GDT6x17 0x0006
PCI_DEVICE_ID_VORTEX_GDT6x27  macro  include/linux/pci_ids.h  1449  #define PCI_DEVICE_ID_VORTEX_GDT6x27 0x0007
PCI_DEVICE_ID_VORTEX_GDT6537  macro  include/linux/pci_ids.h  1450  #define PCI_DEVICE_ID_VORTEX_GDT6537 0x0008
PCI_DEVICE_ID_VORTEX_GDT6557  macro  include/linux/pci_ids.h  1451  #define PCI_DEVICE_ID_VORTEX_GDT6557 0x0009
PCI_DEVICE_ID_VORTEX_GDT6x15  macro  include/linux/pci_ids.h  1452  #define PCI_DEVICE_ID_VORTEX_GDT6x15 0x000a
PCI_DEVICE_ID_VORTEX_GDT6x25  macro  include/linux/pci_ids.h  1453  #define PCI_DEVICE_ID_VORTEX_GDT6x25 0x000b
PCI_DEVICE_ID_VORTEX_GDT6535  macro  include/linux/pci_ids.h  1454  #define PCI_DEVICE_ID_VORTEX_GDT6535 0x000c
PCI_DEVICE_ID_VORTEX_GDT6555  macro  include/linux/pci_ids.h  1455  #define PCI_DEVICE_ID_VORTEX_GDT6555 0x000d
PCI_DEVICE_ID_VORTEX_GDT6x17RP  macro  include/linux/pci_ids.h  1456  #define PCI_DEVICE_ID_VORTEX_GDT6x17RP 0x0100
PCI_DEVICE_ID_VORTEX_GDT6x27RP  macro  include/linux/pci_ids.h  1457  #define PCI_DEVICE_ID_VORTEX_GDT6x27RP 0x0101
PCI_DEVICE_ID_VORTEX_GDT6537RP  macro  include/linux/pci_ids.h  1458  #define PCI_DEVICE_ID_VORTEX_GDT6537RP 0x0102
PCI_DEVICE_ID_VORTEX_GDT6557RP  macro  include/linux/pci_ids.h  1459  #define PCI_DEVICE_ID_VORTEX_GDT6557RP 0x0103
PCI_DEVICE_ID_VORTEX_GDT6x11RP  macro  include/linux/pci_ids.h  1460  #define PCI_DEVICE_ID_VORTEX_GDT6x11RP 0x0104
PCI_DEVICE_ID_VORTEX_GDT6x21RP  macro  include/linux/pci_ids.h  1461  #define PCI_DEVICE_ID_VORTEX_GDT6x21RP 0x0105
PCI_VENDOR_ID_EF  macro  include/linux/pci_ids.h  1463  #define PCI_VENDOR_ID_EF 0x111a
PCI_DEVICE_ID_EF_ATM_FPGA  macro  include/linux/pci_ids.h  1464  #define PCI_DEVICE_ID_EF_ATM_FPGA 0x0000
PCI_DEVICE_ID_EF_ATM_ASIC  macro  include/linux/pci_ids.h  1465  #define PCI_DEVICE_ID_EF_ATM_ASIC 0x0002
PCI_DEVICE_ID_EF_ATM_LANAI2  macro  include/linux/pci_ids.h  1466  #define PCI_DEVICE_ID_EF_ATM_LANAI2 0x0003
PCI_DEVICE_ID_EF_ATM_LANAIHB  macro  include/linux/pci_ids.h  1467  #define PCI_DEVICE_ID_EF_ATM_LANAIHB 0x0005
PCI_VENDOR_ID_IDT  macro  include/linux/pci_ids.h  1469  #define PCI_VENDOR_ID_IDT 0x111d
PCI_DEVICE_ID_IDT_IDT77201  macro  include/linux/pci_ids.h  1470  #define PCI_DEVICE_ID_IDT_IDT77201 0x0001
PCI_VENDOR_ID_FORE  macro  include/linux/pci_ids.h  1472  #define PCI_VENDOR_ID_FORE 0x1127
PCI_DEVICE_ID_FORE_PCA200E  macro  include/linux/pci_ids.h  1473  #define PCI_DEVICE_ID_FORE_PCA200E 0x0300
PCI_VENDOR_ID_PHILIPS  macro  include/linux/pci_ids.h  1475  #define PCI_VENDOR_ID_PHILIPS 0x1131
PCI_DEVICE_ID_PHILIPS_SAA7146  macro  include/linux/pci_ids.h  1476  #define PCI_DEVICE_ID_PHILIPS_SAA7146 0x7146
PCI_DEVICE_ID_PHILIPS_SAA9730  macro  include/linux/pci_ids.h  1477  #define PCI_DEVICE_ID_PHILIPS_SAA9730 0x9730
PCI_VENDOR_ID_EICON  macro  include/linux/pci_ids.h  1479  #define PCI_VENDOR_ID_EICON 0x1133
PCI_DEVICE_ID_EICON_DIVA20  macro  include/linux/pci_ids.h  1480  #define PCI_DEVICE_ID_EICON_DIVA20 0xe002
PCI_DEVICE_ID_EICON_DIVA20_U  macro  include/linux/pci_ids.h  1481  #define PCI_DEVICE_ID_EICON_DIVA20_U 0xe004
PCI_DEVICE_ID_EICON_DIVA201  macro  include/linux/pci_ids.h  1482  #define PCI_DEVICE_ID_EICON_DIVA201 0xe005
PCI_DEVICE_ID_EICON_DIVA202  macro  include/linux/pci_ids.h  1483  #define PCI_DEVICE_ID_EICON_DIVA202 0xe00b
PCI_DEVICE_ID_EICON_MAESTRA  macro  include/linux/pci_ids.h  1484  #define PCI_DEVICE_ID_EICON_MAESTRA 0xe010
PCI_DEVICE_ID_EICON_MAESTRAQ  macro  include/linux/pci_ids.h  1485  #define PCI_DEVICE_ID_EICON_MAESTRAQ 0xe012
PCI_DEVICE_ID_EICON_MAESTRAQ_U  macro  include/linux/pci_ids.h  1486  #define PCI_DEVICE_ID_EICON_MAESTRAQ_U 0xe013
PCI_DEVICE_ID_EICON_MAESTRAP  macro  include/linux/pci_ids.h  1487  #define PCI_DEVICE_ID_EICON_MAESTRAP 0xe014
PCI_VENDOR_ID_CISCO  macro  include/linux/pci_ids.h  1489  #define PCI_VENDOR_ID_CISCO 0x1137
PCI_VENDOR_ID_ZIATECH  macro  include/linux/pci_ids.h  1491  #define PCI_VENDOR_ID_ZIATECH 0x1138
PCI_DEVICE_ID_ZIATECH_5550_HC  macro  include/linux/pci_ids.h  1492  #define PCI_DEVICE_ID_ZIATECH_5550_HC 0x5550
PCI_VENDOR_ID_SYSKONNECT  macro  include/linux/pci_ids.h  1495  #define PCI_VENDOR_ID_SYSKONNECT 0x1148
PCI_DEVICE_ID_SYSKONNECT_TR  macro  include/linux/pci_ids.h  1496  #define PCI_DEVICE_ID_SYSKONNECT_TR 0x4200
PCI_DEVICE_ID_SYSKONNECT_GE  macro  include/linux/pci_ids.h  1497  #define PCI_DEVICE_ID_SYSKONNECT_GE 0x4300
PCI_DEVICE_ID_SYSKONNECT_YU  macro  include/linux/pci_ids.h  1498  #define PCI_DEVICE_ID_SYSKONNECT_YU 0x4320
PCI_DEVICE_ID_SYSKONNECT_9DXX  macro  include/linux/pci_ids.h  1499  #define PCI_DEVICE_ID_SYSKONNECT_9DXX 0x4400
PCI_DEVICE_ID_SYSKONNECT_9MXX  macro  include/linux/pci_ids.h  1500  #define PCI_DEVICE_ID_SYSKONNECT_9MXX 0x4500
PCI_VENDOR_ID_DIGI  macro  include/linux/pci_ids.h  1502  #define PCI_VENDOR_ID_DIGI 0x114f
PCI_DEVICE_ID_DIGI_DF_M_IOM2_E  macro  include/linux/pci_ids.h  1503  #define PCI_DEVICE_ID_DIGI_DF_M_IOM2_E 0x0070
PCI_DEVICE_ID_DIGI_DF_M_E  macro  include/linux/pci_ids.h  1504  #define PCI_DEVICE_ID_DIGI_DF_M_E 0x0071
PCI_DEVICE_ID_DIGI_DF_M_IOM2_A  macro  include/linux/pci_ids.h  1505  #define PCI_DEVICE_ID_DIGI_DF_M_IOM2_A 0x0072
PCI_DEVICE_ID_DIGI_DF_M_A  macro  include/linux/pci_ids.h  1506  #define PCI_DEVICE_ID_DIGI_DF_M_A 0x0073
PCI_DEVICE_ID_DIGI_NEO_8  macro  include/linux/pci_ids.h  1507  #define PCI_DEVICE_ID_DIGI_NEO_8 0x00B1
PCI_DEVICE_ID_NEO_2DB9  macro  include/linux/pci_ids.h  1508  #define PCI_DEVICE_ID_NEO_2DB9 0x00C8
PCI_DEVICE_ID_NEO_2DB9PRI  macro  include/linux/pci_ids.h  1509  #define PCI_DEVICE_ID_NEO_2DB9PRI 0x00C9
PCI_DEVICE_ID_NEO_2RJ45  macro  include/linux/pci_ids.h  1510  #define PCI_DEVICE_ID_NEO_2RJ45 0x00CA
PCI_DEVICE_ID_NEO_2RJ45PRI  macro  include/linux/pci_ids.h  1511  #define PCI_DEVICE_ID_NEO_2RJ45PRI 0x00CB
PCIE_DEVICE_ID_NEO_4_IBM  macro  include/linux/pci_ids.h  1512  #define PCIE_DEVICE_ID_NEO_4_IBM 0x00F4
PCI_VENDOR_ID_XIRCOM  macro  include/linux/pci_ids.h  1514  #define PCI_VENDOR_ID_XIRCOM 0x115d
PCI_DEVICE_ID_XIRCOM_RBM56G  macro  include/linux/pci_ids.h  1515  #define PCI_DEVICE_ID_XIRCOM_RBM56G 0x0101
PCI_DEVICE_ID_XIRCOM_X3201_MDM  macro  include/linux/pci_ids.h  1516  #define PCI_DEVICE_ID_XIRCOM_X3201_MDM 0x0103
PCI_VENDOR_ID_SERVERWORKS  macro  include/linux/pci_ids.h  1518  #define PCI_VENDOR_ID_SERVERWORKS 0x1166
PCI_DEVICE_ID_SERVERWORKS_HE  macro  include/linux/pci_ids.h  1519  #define PCI_DEVICE_ID_SERVERWORKS_HE 0x0008
PCI_DEVICE_ID_SERVERWORKS_LE  macro  include/linux/pci_ids.h  1520  #define PCI_DEVICE_ID_SERVERWORKS_LE 0x0009
PCI_DEVICE_ID_SERVERWORKS_GCNB_LE  macro  include/linux/pci_ids.h  1521  #define PCI_DEVICE_ID_SERVERWORKS_GCNB_LE 0x0017
PCI_DEVICE_ID_SERVERWORKS_HT1000_PXB  macro  include/linux/pci_ids.h  1522  #define PCI_DEVICE_ID_SERVERWORKS_HT1000_PXB 0x0036
PCI_DEVICE_ID_SERVERWORKS_EPB  macro  include/linux/pci_ids.h  1523  #define PCI_DEVICE_ID_SERVERWORKS_EPB 0x0103
PCI_DEVICE_ID_SERVERWORKS_HT2000_PCIE  macro  include/linux/pci_ids.h  1524  #define PCI_DEVICE_ID_SERVERWORKS_HT2000_PCIE 0x0132
PCI_DEVICE_ID_SERVERWORKS_OSB4  macro  include/linux/pci_ids.h  1525  #define PCI_DEVICE_ID_SERVERWORKS_OSB4 0x0200
PCI_DEVICE_ID_SERVERWORKS_CSB5  macro  include/linux/pci_ids.h  1526  #define PCI_DEVICE_ID_SERVERWORKS_CSB5 0x0201
PCI_DEVICE_ID_SERVERWORKS_CSB6  macro  include/linux/pci_ids.h  1527  #define PCI_DEVICE_ID_SERVERWORKS_CSB6 0x0203
PCI_DEVICE_ID_SERVERWORKS_HT1000SB  macro  include/linux/pci_ids.h  1528  #define PCI_DEVICE_ID_SERVERWORKS_HT1000SB 0x0205
PCI_DEVICE_ID_SERVERWORKS_OSB4IDE  macro  include/linux/pci_ids.h  1529  #define PCI_DEVICE_ID_SERVERWORKS_OSB4IDE 0x0211
PCI_DEVICE_ID_SERVERWORKS_CSB5IDE  macro  include/linux/pci_ids.h  1530  #define PCI_DEVICE_ID_SERVERWORKS_CSB5IDE 0x0212
PCI_DEVICE_ID_SERVERWORKS_CSB6IDE  macro  include/linux/pci_ids.h  1531  #define PCI_DEVICE_ID_SERVERWORKS_CSB6IDE 0x0213
PCI_DEVICE_ID_SERVERWORKS_HT1000IDE  macro  include/linux/pci_ids.h  1532  #define PCI_DEVICE_ID_SERVERWORKS_HT1000IDE 0x0214
PCI_DEVICE_ID_SERVERWORKS_CSB6IDE2  macro  include/linux/pci_ids.h  1533  #define PCI_DEVICE_ID_SERVERWORKS_CSB6IDE2 0x0217
PCI_DEVICE_ID_SERVERWORKS_CSB6LPC  macro  include/linux/pci_ids.h  1534  #define PCI_DEVICE_ID_SERVERWORKS_CSB6LPC 0x0227
PCI_DEVICE_ID_SERVERWORKS_HT1100LD  macro  include/linux/pci_ids.h  1535  #define PCI_DEVICE_ID_SERVERWORKS_HT1100LD 0x0408
PCI_VENDOR_ID_SBE  macro  include/linux/pci_ids.h  1537  #define PCI_VENDOR_ID_SBE 0x1176
PCI_DEVICE_ID_SBE_WANXL100  macro  include/linux/pci_ids.h  1538  #define PCI_DEVICE_ID_SBE_WANXL100 0x0301
PCI_DEVICE_ID_SBE_WANXL200  macro  include/linux/pci_ids.h  1539  #define PCI_DEVICE_ID_SBE_WANXL200 0x0302
PCI_DEVICE_ID_SBE_WANXL400  macro  include/linux/pci_ids.h  1540  #define PCI_DEVICE_ID_SBE_WANXL400 0x0104
PCI_SUBDEVICE_ID_SBE_T3E3  macro  include/linux/pci_ids.h  1541  #define PCI_SUBDEVICE_ID_SBE_T3E3 0x0009
PCI_SUBDEVICE_ID_SBE_2T3E3_P0  macro  include/linux/pci_ids.h  1542  #define PCI_SUBDEVICE_ID_SBE_2T3E3_P0 0x0901
PCI_SUBDEVICE_ID_SBE_2T3E3_P1  macro  include/linux/pci_ids.h  1543  #define PCI_SUBDEVICE_ID_SBE_2T3E3_P1 0x0902
PCI_VENDOR_ID_TOSHIBA  macro  include/linux/pci_ids.h  1545  #define PCI_VENDOR_ID_TOSHIBA 0x1179
PCI_DEVICE_ID_TOSHIBA_PICCOLO_1  macro  include/linux/pci_ids.h  1546  #define PCI_DEVICE_ID_TOSHIBA_PICCOLO_1 0x0101
PCI_DEVICE_ID_TOSHIBA_PICCOLO_2  macro  include/linux/pci_ids.h  1547  #define PCI_DEVICE_ID_TOSHIBA_PICCOLO_2 0x0102
PCI_DEVICE_ID_TOSHIBA_PICCOLO_3  macro  include/linux/pci_ids.h  1548  #define PCI_DEVICE_ID_TOSHIBA_PICCOLO_3 0x0103
PCI_DEVICE_ID_TOSHIBA_PICCOLO_5  macro  include/linux/pci_ids.h  1549  #define PCI_DEVICE_ID_TOSHIBA_PICCOLO_5 0x0105
PCI_DEVICE_ID_TOSHIBA_TOPIC95  macro  include/linux/pci_ids.h  1550  #define PCI_DEVICE_ID_TOSHIBA_TOPIC95 0x060a
PCI_DEVICE_ID_TOSHIBA_TOPIC97  macro  include/linux/pci_ids.h  1551  #define PCI_DEVICE_ID_TOSHIBA_TOPIC97 0x060f
PCI_DEVICE_ID_TOSHIBA_TOPIC100  macro  include/linux/pci_ids.h  1552  #define PCI_DEVICE_ID_TOSHIBA_TOPIC100 0x0617
PCI_VENDOR_ID_TOSHIBA_2  macro  include/linux/pci_ids.h  1554  #define PCI_VENDOR_ID_TOSHIBA_2 0x102f
PCI_DEVICE_ID_TOSHIBA_TC35815CF  macro  include/linux/pci_ids.h  1555  #define PCI_DEVICE_ID_TOSHIBA_TC35815CF 0x0030
PCI_DEVICE_ID_TOSHIBA_TC35815_NWU  macro  include/linux/pci_ids.h  1556  #define PCI_DEVICE_ID_TOSHIBA_TC35815_NWU 0x0031
PCI_DEVICE_ID_TOSHIBA_TC35815_TX4939  macro  include/linux/pci_ids.h  1557  #define PCI_DEVICE_ID_TOSHIBA_TC35815_TX4939 0x0032
PCI_DEVICE_ID_TOSHIBA_TC86C001_IDE  macro  include/linux/pci_ids.h  1558  #define PCI_DEVICE_ID_TOSHIBA_TC86C001_IDE 0x0105
PCI_DEVICE_ID_TOSHIBA_TC86C001_MISC  macro  include/linux/pci_ids.h  1559  #define PCI_DEVICE_ID_TOSHIBA_TC86C001_MISC 0x0108
PCI_DEVICE_ID_TOSHIBA_SPIDER_NET  macro  include/linux/pci_ids.h  1560  #define PCI_DEVICE_ID_TOSHIBA_SPIDER_NET 0x01b3
PCI_VENDOR_ID_ATTO  macro  include/linux/pci_ids.h  1562  #define PCI_VENDOR_ID_ATTO 0x117c
PCI_VENDOR_ID_RICOH  macro  include/linux/pci_ids.h  1564  #define PCI_VENDOR_ID_RICOH 0x1180
PCI_DEVICE_ID_RICOH_RL5C465  macro  include/linux/pci_ids.h  1565  #define PCI_DEVICE_ID_RICOH_RL5C465 0x0465
PCI_DEVICE_ID_RICOH_RL5C466  macro  include/linux/pci_ids.h  1566  #define PCI_DEVICE_ID_RICOH_RL5C466 0x0466
PCI_DEVICE_ID_RICOH_RL5C475  macro  include/linux/pci_ids.h  1567  #define PCI_DEVICE_ID_RICOH_RL5C475 0x0475
PCI_DEVICE_ID_RICOH_RL5C476  macro  include/linux/pci_ids.h  1568  #define PCI_DEVICE_ID_RICOH_RL5C476 0x0476
PCI_DEVICE_ID_RICOH_RL5C478  macro  include/linux/pci_ids.h  1569  #define PCI_DEVICE_ID_RICOH_RL5C478 0x0478
PCI_DEVICE_ID_RICOH_R5C822  macro  include/linux/pci_ids.h  1570  #define PCI_DEVICE_ID_RICOH_R5C822 0x0822
PCI_DEVICE_ID_RICOH_R5CE822  macro  include/linux/pci_ids.h  1571  #define PCI_DEVICE_ID_RICOH_R5CE822 0xe822
PCI_DEVICE_ID_RICOH_R5CE823  macro  include/linux/pci_ids.h  1572  #define PCI_DEVICE_ID_RICOH_R5CE823 0xe823
PCI_DEVICE_ID_RICOH_R5C832  macro  include/linux/pci_ids.h  1573  #define PCI_DEVICE_ID_RICOH_R5C832 0x0832
PCI_DEVICE_ID_RICOH_R5C843  macro  include/linux/pci_ids.h  1574  #define PCI_DEVICE_ID_RICOH_R5C843 0x0843
PCI_VENDOR_ID_DLINK  macro  include/linux/pci_ids.h  1576  #define PCI_VENDOR_ID_DLINK 0x1186
PCI_DEVICE_ID_DLINK_DGE510T  macro  include/linux/pci_ids.h  1577  #define PCI_DEVICE_ID_DLINK_DGE510T 0x4c00
PCI_VENDOR_ID_ARTOP  macro  include/linux/pci_ids.h  1579  #define PCI_VENDOR_ID_ARTOP 0x1191
PCI_DEVICE_ID_ARTOP_ATP850UF  macro  include/linux/pci_ids.h  1580  #define PCI_DEVICE_ID_ARTOP_ATP850UF 0x0005
PCI_DEVICE_ID_ARTOP_ATP860  macro  include/linux/pci_ids.h  1581  #define PCI_DEVICE_ID_ARTOP_ATP860 0x0006
PCI_DEVICE_ID_ARTOP_ATP860R  macro  include/linux/pci_ids.h  1582  #define PCI_DEVICE_ID_ARTOP_ATP860R 0x0007
PCI_DEVICE_ID_ARTOP_ATP865  macro  include/linux/pci_ids.h  1583  #define PCI_DEVICE_ID_ARTOP_ATP865 0x0008
PCI_DEVICE_ID_ARTOP_ATP865R  macro  include/linux/pci_ids.h  1584  #define PCI_DEVICE_ID_ARTOP_ATP865R 0x0009
PCI_DEVICE_ID_ARTOP_ATP867A  macro  include/linux/pci_ids.h  1585  #define PCI_DEVICE_ID_ARTOP_ATP867A 0x000A
PCI_DEVICE_ID_ARTOP_ATP867B  macro  include/linux/pci_ids.h  1586  #define PCI_DEVICE_ID_ARTOP_ATP867B 0x000B
PCI_DEVICE_ID_ARTOP_AEC7610  macro  include/linux/pci_ids.h  1587  #define PCI_DEVICE_ID_ARTOP_AEC7610 0x8002
PCI_DEVICE_ID_ARTOP_AEC7612UW  macro  include/linux/pci_ids.h  1588  #define PCI_DEVICE_ID_ARTOP_AEC7612UW 0x8010
PCI_DEVICE_ID_ARTOP_AEC7612U  macro  include/linux/pci_ids.h  1589  #define PCI_DEVICE_ID_ARTOP_AEC7612U 0x8020
PCI_DEVICE_ID_ARTOP_AEC7612S  macro  include/linux/pci_ids.h  1590  #define PCI_DEVICE_ID_ARTOP_AEC7612S 0x8030
PCI_DEVICE_ID_ARTOP_AEC7612D  macro  include/linux/pci_ids.h  1591  #define PCI_DEVICE_ID_ARTOP_AEC7612D 0x8040
PCI_DEVICE_ID_ARTOP_AEC7612SUW  macro  include/linux/pci_ids.h  1592  #define PCI_DEVICE_ID_ARTOP_AEC7612SUW 0x8050
PCI_DEVICE_ID_ARTOP_8060  macro  include/linux/pci_ids.h  1593  #define PCI_DEVICE_ID_ARTOP_8060 0x8060
PCI_VENDOR_ID_ZEITNET  macro  include/linux/pci_ids.h  1595  #define PCI_VENDOR_ID_ZEITNET 0x1193
PCI_DEVICE_ID_ZEITNET_1221  macro  include/linux/pci_ids.h  1596  #define PCI_DEVICE_ID_ZEITNET_1221 0x0001
PCI_DEVICE_ID_ZEITNET_1225  macro  include/linux/pci_ids.h  1597  #define PCI_DEVICE_ID_ZEITNET_1225 0x0002
PCI_VENDOR_ID_FUJITSU_ME  macro  include/linux/pci_ids.h  1599  #define PCI_VENDOR_ID_FUJITSU_ME 0x119e
PCI_DEVICE_ID_FUJITSU_FS155  macro  include/linux/pci_ids.h  1600  #define PCI_DEVICE_ID_FUJITSU_FS155 0x0001
PCI_DEVICE_ID_FUJITSU_FS50  macro  include/linux/pci_ids.h  1601  #define PCI_DEVICE_ID_FUJITSU_FS50 0x0003
PCI_SUBVENDOR_ID_KEYSPAN  macro  include/linux/pci_ids.h  1603  #define PCI_SUBVENDOR_ID_KEYSPAN 0x11a9
PCI_SUBDEVICE_ID_KEYSPAN_SX2  macro  include/linux/pci_ids.h  1604  #define PCI_SUBDEVICE_ID_KEYSPAN_SX2 0x5334
PCI_VENDOR_ID_MARVELL  macro  include/linux/pci_ids.h  1606  #define PCI_VENDOR_ID_MARVELL 0x11ab
PCI_DEVICE_ID_MARVELL_GT64111  macro  include/linux/pci_ids.h  1607  #define PCI_DEVICE_ID_MARVELL_GT64111 0x4146
PCI_DEVICE_ID_MARVELL_GT64260  macro  include/linux/pci_ids.h  1608  #define PCI_DEVICE_ID_MARVELL_GT64260 0x6430
PCI_DEVICE_ID_MARVELL_MV64360  macro  include/linux/pci_ids.h  1609  #define PCI_DEVICE_ID_MARVELL_MV64360 0x6460
PCI_DEVICE_ID_MARVELL_MV64460  macro  include/linux/pci_ids.h  1610  #define PCI_DEVICE_ID_MARVELL_MV64460 0x6480
PCI_DEVICE_ID_MARVELL_88ALP01_NAND  macro  include/linux/pci_ids.h  1611  #define PCI_DEVICE_ID_MARVELL_88ALP01_NAND 0x4100
PCI_DEVICE_ID_MARVELL_88ALP01_SD  macro  include/linux/pci_ids.h  1612  #define PCI_DEVICE_ID_MARVELL_88ALP01_SD 0x4101
PCI_DEVICE_ID_MARVELL_88ALP01_CCIC  macro  include/linux/pci_ids.h  1613  #define PCI_DEVICE_ID_MARVELL_88ALP01_CCIC 0x4102
PCI_VENDOR_ID_V3  macro  include/linux/pci_ids.h  1615  #define PCI_VENDOR_ID_V3 0x11b0
PCI_DEVICE_ID_V3_V960  macro  include/linux/pci_ids.h  1616  #define PCI_DEVICE_ID_V3_V960 0x0001
PCI_DEVICE_ID_V3_V351  macro  include/linux/pci_ids.h  1617  #define PCI_DEVICE_ID_V3_V351 0x0002
PCI_VENDOR_ID_ATT  macro  include/linux/pci_ids.h  1619  #define PCI_VENDOR_ID_ATT 0x11c1
PCI_DEVICE_ID_ATT_VENUS_MODEM  macro  include/linux/pci_ids.h  1620  #define PCI_DEVICE_ID_ATT_VENUS_MODEM 0x480
PCI_VENDOR_ID_SPECIALIX  macro  include/linux/pci_ids.h  1622  #define PCI_VENDOR_ID_SPECIALIX 0x11cb
PCI_DEVICE_ID_SPECIALIX_IO8  macro  include/linux/pci_ids.h  1623  #define PCI_DEVICE_ID_SPECIALIX_IO8 0x2000
PCI_DEVICE_ID_SPECIALIX_RIO  macro  include/linux/pci_ids.h  1624  #define PCI_DEVICE_ID_SPECIALIX_RIO 0x8000
PCI_SUBDEVICE_ID_SPECIALIX_SPEED4  macro  include/linux/pci_ids.h  1625  #define PCI_SUBDEVICE_ID_SPECIALIX_SPEED4 0xa004
PCI_VENDOR_ID_ANALOG_DEVICES  macro  include/linux/pci_ids.h  1627  #define PCI_VENDOR_ID_ANALOG_DEVICES 0x11d4
PCI_DEVICE_ID_AD1889JS  macro  include/linux/pci_ids.h  1628  #define PCI_DEVICE_ID_AD1889JS 0x1889
PCI_DEVICE_ID_SEGA_BBA  macro  include/linux/pci_ids.h  1630  #define PCI_DEVICE_ID_SEGA_BBA 0x1234
PCI_VENDOR_ID_ZORAN  macro  include/linux/pci_ids.h  1632  #define PCI_VENDOR_ID_ZORAN 0x11de
PCI_DEVICE_ID_ZORAN_36057  macro  include/linux/pci_ids.h  1633  #define PCI_DEVICE_ID_ZORAN_36057 0x6057
PCI_DEVICE_ID_ZORAN_36120  macro  include/linux/pci_ids.h  1634  #define PCI_DEVICE_ID_ZORAN_36120 0x6120
PCI_VENDOR_ID_COMPEX  macro  include/linux/pci_ids.h  1636  #define PCI_VENDOR_ID_COMPEX 0x11f6
PCI_DEVICE_ID_COMPEX_ENET100VG4  macro  include/linux/pci_ids.h  1637  #define PCI_DEVICE_ID_COMPEX_ENET100VG4 0x0112
PCI_VENDOR_ID_PMC_Sierra  macro  include/linux/pci_ids.h  1639  #define PCI_VENDOR_ID_PMC_Sierra 0x11f8
PCI_VENDOR_ID_RP  macro  include/linux/pci_ids.h  1641  #define PCI_VENDOR_ID_RP 0x11fe
PCI_DEVICE_ID_RP32INTF  macro  include/linux/pci_ids.h  1642  #define PCI_DEVICE_ID_RP32INTF 0x0001
PCI_DEVICE_ID_RP8INTF  macro  include/linux/pci_ids.h  1643  #define PCI_DEVICE_ID_RP8INTF 0x0002
PCI_DEVICE_ID_RP16INTF  macro  include/linux/pci_ids.h  1644  #define PCI_DEVICE_ID_RP16INTF 0x0003
PCI_DEVICE_ID_RP4QUAD  macro  include/linux/pci_ids.h  1645  #define PCI_DEVICE_ID_RP4QUAD 0x0004
PCI_DEVICE_ID_RP8OCTA  macro  include/linux/pci_ids.h  1646  #define PCI_DEVICE_ID_RP8OCTA 0x0005
PCI_DEVICE_ID_RP8J  macro  include/linux/pci_ids.h  1647  #define PCI_DEVICE_ID_RP8J 0x0006
PCI_DEVICE_ID_RP4J  macro  include/linux/pci_ids.h  1648  #define PCI_DEVICE_ID_RP4J 0x0007
PCI_DEVICE_ID_RP8SNI  macro  include/linux/pci_ids.h  1649  #define PCI_DEVICE_ID_RP8SNI 0x0008
PCI_DEVICE_ID_RP16SNI  macro  include/linux/pci_ids.h  1650  #define PCI_DEVICE_ID_RP16SNI 0x0009
PCI_DEVICE_ID_RPP4  macro  include/linux/pci_ids.h  1651  #define PCI_DEVICE_ID_RPP4 0x000A
PCI_DEVICE_ID_RPP8  macro  include/linux/pci_ids.h  1652  #define PCI_DEVICE_ID_RPP8 0x000B
PCI_DEVICE_ID_RP4M  macro  include/linux/pci_ids.h  1653  #define PCI_DEVICE_ID_RP4M 0x000D
PCI_DEVICE_ID_RP2_232  macro  include/linux/pci_ids.h  1654  #define PCI_DEVICE_ID_RP2_232 0x000E
PCI_DEVICE_ID_RP2_422  macro  include/linux/pci_ids.h  1655  #define PCI_DEVICE_ID_RP2_422 0x000F
PCI_DEVICE_ID_URP32INTF  macro  include/linux/pci_ids.h  1656  #define PCI_DEVICE_ID_URP32INTF 0x0801
PCI_DEVICE_ID_URP8INTF  macro  include/linux/pci_ids.h  1657  #define PCI_DEVICE_ID_URP8INTF 0x0802
PCI_DEVICE_ID_URP16INTF  macro  include/linux/pci_ids.h  1658  #define PCI_DEVICE_ID_URP16INTF 0x0803
PCI_DEVICE_ID_URP8OCTA  macro  include/linux/pci_ids.h  1659  #define PCI_DEVICE_ID_URP8OCTA 0x0805
PCI_DEVICE_ID_UPCI_RM3_8PORT  macro  include/linux/pci_ids.h  1660  #define PCI_DEVICE_ID_UPCI_RM3_8PORT 0x080C
PCI_DEVICE_ID_UPCI_RM3_4PORT  macro  include/linux/pci_ids.h  1661  #define PCI_DEVICE_ID_UPCI_RM3_4PORT 0x080D
PCI_DEVICE_ID_CRP16INTF  macro  include/linux/pci_ids.h  1662  #define PCI_DEVICE_ID_CRP16INTF 0x0903
PCI_VENDOR_ID_CYCLADES  macro  include/linux/pci_ids.h  1664  #define PCI_VENDOR_ID_CYCLADES 0x120e
PCI_DEVICE_ID_CYCLOM_Y_Lo  macro  include/linux/pci_ids.h  1665  #define PCI_DEVICE_ID_CYCLOM_Y_Lo 0x0100
PCI_DEVICE_ID_CYCLOM_Y_Hi  macro  include/linux/pci_ids.h  1666  #define PCI_DEVICE_ID_CYCLOM_Y_Hi 0x0101
PCI_DEVICE_ID_CYCLOM_4Y_Lo  macro  include/linux/pci_ids.h  1667  #define PCI_DEVICE_ID_CYCLOM_4Y_Lo 0x0102
PCI_DEVICE_ID_CYCLOM_4Y_Hi  macro  include/linux/pci_ids.h  1668  #define PCI_DEVICE_ID_CYCLOM_4Y_Hi 0x0103
PCI_DEVICE_ID_CYCLOM_8Y_Lo  macro  include/linux/pci_ids.h  1669  #define PCI_DEVICE_ID_CYCLOM_8Y_Lo 0x0104
PCI_DEVICE_ID_CYCLOM_8Y_Hi  macro  include/linux/pci_ids.h  1670  #define PCI_DEVICE_ID_CYCLOM_8Y_Hi 0x0105
PCI_DEVICE_ID_CYCLOM_Z_Lo  macro  include/linux/pci_ids.h  1671  #define PCI_DEVICE_ID_CYCLOM_Z_Lo 0x0200
PCI_DEVICE_ID_CYCLOM_Z_Hi  macro  include/linux/pci_ids.h  1672  #define PCI_DEVICE_ID_CYCLOM_Z_Hi 0x0201
PCI_DEVICE_ID_PC300_RX_2  macro  include/linux/pci_ids.h  1673  #define PCI_DEVICE_ID_PC300_RX_2 0x0300
PCI_DEVICE_ID_PC300_RX_1  macro  include/linux/pci_ids.h  1674  #define PCI_DEVICE_ID_PC300_RX_1 0x0301
PCI_DEVICE_ID_PC300_TE_2  macro  include/linux/pci_ids.h  1675  #define PCI_DEVICE_ID_PC300_TE_2 0x0310
PCI_DEVICE_ID_PC300_TE_1  macro  include/linux/pci_ids.h  1676  #define PCI_DEVICE_ID_PC300_TE_1 0x0311
PCI_DEVICE_ID_PC300_TE_M_2  macro  include/linux/pci_ids.h  1677  #define PCI_DEVICE_ID_PC300_TE_M_2 0x0320
PCI_DEVICE_ID_PC300_TE_M_1  macro  include/linux/pci_ids.h  1678  #define PCI_DEVICE_ID_PC300_TE_M_1 0x0321
PCI_VENDOR_ID_ESSENTIAL  macro  include/linux/pci_ids.h  1680  #define PCI_VENDOR_ID_ESSENTIAL 0x120f
PCI_DEVICE_ID_ESSENTIAL_ROADRUNNER  macro  include/linux/pci_ids.h  1681  #define PCI_DEVICE_ID_ESSENTIAL_ROADRUNNER 0x0001
PCI_VENDOR_ID_O2  macro  include/linux/pci_ids.h  1683  #define PCI_VENDOR_ID_O2 0x1217
PCI_DEVICE_ID_O2_6729  macro  include/linux/pci_ids.h  1684  #define PCI_DEVICE_ID_O2_6729 0x6729
PCI_DEVICE_ID_O2_6730  macro  include/linux/pci_ids.h  1685  #define PCI_DEVICE_ID_O2_6730 0x673a
PCI_DEVICE_ID_O2_6832  macro  include/linux/pci_ids.h  1686  #define PCI_DEVICE_ID_O2_6832 0x6832
PCI_DEVICE_ID_O2_6836  macro  include/linux/pci_ids.h  1687  #define PCI_DEVICE_ID_O2_6836 0x6836
PCI_DEVICE_ID_O2_6812  macro  include/linux/pci_ids.h  1688  #define PCI_DEVICE_ID_O2_6812 0x6872
PCI_DEVICE_ID_O2_6933  macro  include/linux/pci_ids.h  1689  #define PCI_DEVICE_ID_O2_6933 0x6933
PCI_DEVICE_ID_O2_8120  macro  include/linux/pci_ids.h  1690  #define PCI_DEVICE_ID_O2_8120 0x8120
PCI_DEVICE_ID_O2_8220  macro  include/linux/pci_ids.h  1691  #define PCI_DEVICE_ID_O2_8220 0x8220
PCI_DEVICE_ID_O2_8221  macro  include/linux/pci_ids.h  1692  #define PCI_DEVICE_ID_O2_8221 0x8221
PCI_DEVICE_ID_O2_8320  macro  include/linux/pci_ids.h  1693  #define PCI_DEVICE_ID_O2_8320 0x8320
PCI_DEVICE_ID_O2_8321  macro  include/linux/pci_ids.h  1694  #define PCI_DEVICE_ID_O2_8321 0x8321
PCI_VENDOR_ID_3DFX  macro  include/linux/pci_ids.h  1696  #define PCI_VENDOR_ID_3DFX 0x121a
PCI_DEVICE_ID_3DFX_VOODOO  macro  include/linux/pci_ids.h  1697  #define PCI_DEVICE_ID_3DFX_VOODOO 0x0001
PCI_DEVICE_ID_3DFX_VOODOO2  macro  include/linux/pci_ids.h  1698  #define PCI_DEVICE_ID_3DFX_VOODOO2 0x0002
PCI_DEVICE_ID_3DFX_BANSHEE  macro  include/linux/pci_ids.h  1699  #define PCI_DEVICE_ID_3DFX_BANSHEE 0x0003
PCI_DEVICE_ID_3DFX_VOODOO3  macro  include/linux/pci_ids.h  1700  #define PCI_DEVICE_ID_3DFX_VOODOO3 0x0005
PCI_DEVICE_ID_3DFX_VOODOO5  macro  include/linux/pci_ids.h  1701  #define PCI_DEVICE_ID_3DFX_VOODOO5 0x0009
PCI_VENDOR_ID_AVM  macro  include/linux/pci_ids.h  1703  #define PCI_VENDOR_ID_AVM 0x1244
PCI_DEVICE_ID_AVM_B1  macro  include/linux/pci_ids.h  1704  #define PCI_DEVICE_ID_AVM_B1 0x0700
PCI_DEVICE_ID_AVM_C4  macro  include/linux/pci_ids.h  1705  #define PCI_DEVICE_ID_AVM_C4 0x0800
PCI_DEVICE_ID_AVM_A1  macro  include/linux/pci_ids.h  1706  #define PCI_DEVICE_ID_AVM_A1 0x0a00
PCI_DEVICE_ID_AVM_A1_V2  macro  include/linux/pci_ids.h  1707  #define PCI_DEVICE_ID_AVM_A1_V2 0x0e00
PCI_DEVICE_ID_AVM_C2  macro  include/linux/pci_ids.h  1708  #define PCI_DEVICE_ID_AVM_C2 0x1100
PCI_DEVICE_ID_AVM_T1  macro  include/linux/pci_ids.h  1709  #define PCI_DEVICE_ID_AVM_T1 0x1200
PCI_VENDOR_ID_STALLION  macro  include/linux/pci_ids.h  1711  #define PCI_VENDOR_ID_STALLION 0x124d
PCI_VENDOR_ID_AT  macro  include/linux/pci_ids.h  1714  #define PCI_VENDOR_ID_AT 0x1259
PCI_SUBDEVICE_ID_AT_2700FX  macro  include/linux/pci_ids.h  1715  #define PCI_SUBDEVICE_ID_AT_2700FX 0x2701
PCI_SUBDEVICE_ID_AT_2701FX  macro  include/linux/pci_ids.h  1716  #define PCI_SUBDEVICE_ID_AT_2701FX 0x2703
PCI_VENDOR_ID_ESS  macro  include/linux/pci_ids.h  1718  #define PCI_VENDOR_ID_ESS 0x125d
PCI_DEVICE_ID_ESS_ESS1968  macro  include/linux/pci_ids.h  1719  #define PCI_DEVICE_ID_ESS_ESS1968 0x1968
PCI_DEVICE_ID_ESS_ESS1978  macro  include/linux/pci_ids.h  1720  #define PCI_DEVICE_ID_ESS_ESS1978 0x1978
PCI_DEVICE_ID_ESS_ALLEGRO_1  macro  include/linux/pci_ids.h  1721  #define PCI_DEVICE_ID_ESS_ALLEGRO_1 0x1988
PCI_DEVICE_ID_ESS_ALLEGRO  macro  include/linux/pci_ids.h  1722  #define PCI_DEVICE_ID_ESS_ALLEGRO 0x1989
PCI_DEVICE_ID_ESS_CANYON3D_2LE  macro  include/linux/pci_ids.h  1723  #define PCI_DEVICE_ID_ESS_CANYON3D_2LE 0x1990
PCI_DEVICE_ID_ESS_CANYON3D_2  macro  include/linux/pci_ids.h  1724  #define PCI_DEVICE_ID_ESS_CANYON3D_2 0x1992
PCI_DEVICE_ID_ESS_MAESTRO3  macro  include/linux/pci_ids.h  1725  #define PCI_DEVICE_ID_ESS_MAESTRO3 0x1998
PCI_DEVICE_ID_ESS_MAESTRO3_1  macro  include/linux/pci_ids.h  1726  #define PCI_DEVICE_ID_ESS_MAESTRO3_1 0x1999
PCI_DEVICE_ID_ESS_MAESTRO3_HW  macro  include/linux/pci_ids.h  1727  #define PCI_DEVICE_ID_ESS_MAESTRO3_HW 0x199a
PCI_DEVICE_ID_ESS_MAESTRO3_2  macro  include/linux/pci_ids.h  1728  #define PCI_DEVICE_ID_ESS_MAESTRO3_2 0x199b
PCI_VENDOR_ID_SATSAGEM  macro  include/linux/pci_ids.h  1730  #define PCI_VENDOR_ID_SATSAGEM 0x1267
PCI_DEVICE_ID_SATSAGEM_NICCY  macro  include/linux/pci_ids.h  1731  #define PCI_DEVICE_ID_SATSAGEM_NICCY 0x1016
PCI_VENDOR_ID_ENSONIQ  macro  include/linux/pci_ids.h  1733  #define PCI_VENDOR_ID_ENSONIQ 0x1274
PCI_DEVICE_ID_ENSONIQ_CT5880  macro  include/linux/pci_ids.h  1734  #define PCI_DEVICE_ID_ENSONIQ_CT5880 0x5880
PCI_DEVICE_ID_ENSONIQ_ES1370  macro  include/linux/pci_ids.h  1735  #define PCI_DEVICE_ID_ENSONIQ_ES1370 0x5000
PCI_DEVICE_ID_ENSONIQ_ES1371  macro  include/linux/pci_ids.h  1736  #define PCI_DEVICE_ID_ENSONIQ_ES1371 0x1371
PCI_VENDOR_ID_TRANSMETA  macro  include/linux/pci_ids.h  1738  #define PCI_VENDOR_ID_TRANSMETA 0x1279
PCI_DEVICE_ID_EFFICEON  macro  include/linux/pci_ids.h  1739  #define PCI_DEVICE_ID_EFFICEON 0x0060
PCI_VENDOR_ID_ROCKWELL  macro  include/linux/pci_ids.h  1741  #define PCI_VENDOR_ID_ROCKWELL 0x127A
PCI_VENDOR_ID_ITE  macro  include/linux/pci_ids.h  1743  #define PCI_VENDOR_ID_ITE 0x1283
PCI_DEVICE_ID_ITE_8172  macro  include/linux/pci_ids.h  1744  #define PCI_DEVICE_ID_ITE_8172 0x8172
PCI_DEVICE_ID_ITE_8211  macro  include/linux/pci_ids.h  1745  #define PCI_DEVICE_ID_ITE_8211 0x8211
PCI_DEVICE_ID_ITE_8212  macro  include/linux/pci_ids.h  1746  #define PCI_DEVICE_ID_ITE_8212 0x8212
PCI_DEVICE_ID_ITE_8213  macro  include/linux/pci_ids.h  1747  #define PCI_DEVICE_ID_ITE_8213 0x8213
PCI_DEVICE_ID_ITE_8152  macro  include/linux/pci_ids.h  1748  #define PCI_DEVICE_ID_ITE_8152 0x8152
PCI_DEVICE_ID_ITE_8872  macro  include/linux/pci_ids.h  1749  #define PCI_DEVICE_ID_ITE_8872 0x8872
PCI_DEVICE_ID_ITE_IT8330G_0  macro  include/linux/pci_ids.h  1750  #define PCI_DEVICE_ID_ITE_IT8330G_0 0xe886
PCI_DEVICE_ID_ESS_ESS0100  macro  include/linux/pci_ids.h  1753  #define PCI_DEVICE_ID_ESS_ESS0100 0x0100
PCI_VENDOR_ID_ALTEON  macro  include/linux/pci_ids.h  1755  #define PCI_VENDOR_ID_ALTEON 0x12ae
PCI_SUBVENDOR_ID_CONNECT_TECH  macro  include/linux/pci_ids.h  1757  #define PCI_SUBVENDOR_ID_CONNECT_TECH 0x12c4
PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_232  macro  include/linux/pci_ids.h  1758  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_232 0x0001
PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_232  macro  include/linux/pci_ids.h  1759  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_232 0x0002
PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_232  macro  include/linux/pci_ids.h  1760  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_232 0x0003
PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485  macro  include/linux/pci_ids.h  1761  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485 0x0004
PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_4_4  macro  include/linux/pci_ids.h  1762  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_4_4 0x0005
PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485  macro  include/linux/pci_ids.h  1763  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485 0x0006
PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485_2_2  macro  include/linux/pci_ids.h  1764  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485_2_2 0x0007
PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_485  macro  include/linux/pci_ids.h  1765  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_485 0x0008
PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_2_6  macro  include/linux/pci_ids.h  1766  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_2_6 0x0009
PCI_SUBDEVICE_ID_CONNECT_TECH_BH081101V1  macro  include/linux/pci_ids.h  1767  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH081101V1 0x000A
PCI_SUBDEVICE_ID_CONNECT_TECH_BH041101V1  macro  include/linux/pci_ids.h  1768  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH041101V1 0x000B
PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_20MHZ  macro  include/linux/pci_ids.h  1769  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_20MHZ 0x000C
PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_PTM  macro  include/linux/pci_ids.h  1770  #define PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_PTM 0x000D
PCI_SUBDEVICE_ID_CONNECT_TECH_NT960PCI  macro  include/linux/pci_ids.h  1771  #define PCI_SUBDEVICE_ID_CONNECT_TECH_NT960PCI 0x0100
PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_2  macro  include/linux/pci_ids.h  1772  #define PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_2 0x0201
PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_4  macro  include/linux/pci_ids.h  1773  #define PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_4 0x0202
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_232  macro  include/linux/pci_ids.h  1774  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_232 0x0300
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_232  macro  include/linux/pci_ids.h  1775  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_232 0x0301
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_232  macro  include/linux/pci_ids.h  1776  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_232 0x0302
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_1_1  macro  include/linux/pci_ids.h  1777  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_1_1 0x0310
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_2  macro  include/linux/pci_ids.h  1778  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_2 0x0311
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_4  macro  include/linux/pci_ids.h  1779  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_4 0x0312
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2  macro  include/linux/pci_ids.h  1780  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2 0x0320
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4  macro  include/linux/pci_ids.h  1781  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4 0x0321
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8  macro  include/linux/pci_ids.h  1782  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8 0x0322
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_485  macro  include/linux/pci_ids.h  1783  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_485 0x0330
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_485  macro  include/linux/pci_ids.h  1784  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_485 0x0331
PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_485  macro  include/linux/pci_ids.h  1785  #define PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_485 0x0332
PCI_VENDOR_ID_NVIDIA_SGS  macro  include/linux/pci_ids.h  1787  #define PCI_VENDOR_ID_NVIDIA_SGS 0x12d2
PCI_DEVICE_ID_NVIDIA_SGS_RIVA128  macro  include/linux/pci_ids.h  1788  #define PCI_DEVICE_ID_NVIDIA_SGS_RIVA128 0x0018
PCI_SUBVENDOR_ID_CHASE_PCIFAST  macro  include/linux/pci_ids.h  1790  #define PCI_SUBVENDOR_ID_CHASE_PCIFAST 0x12E0
PCI_SUBDEVICE_ID_CHASE_PCIFAST4  macro  include/linux/pci_ids.h  1791  #define PCI_SUBDEVICE_ID_CHASE_PCIFAST4 0x0031
PCI_SUBDEVICE_ID_CHASE_PCIFAST8  macro  include/linux/pci_ids.h  1792  #define PCI_SUBDEVICE_ID_CHASE_PCIFAST8 0x0021
PCI_SUBDEVICE_ID_CHASE_PCIFAST16  macro  include/linux/pci_ids.h  1793  #define PCI_SUBDEVICE_ID_CHASE_PCIFAST16 0x0011
PCI_SUBDEVICE_ID_CHASE_PCIFAST16FMC  macro  include/linux/pci_ids.h  1794  #define PCI_SUBDEVICE_ID_CHASE_PCIFAST16FMC 0x0041
PCI_SUBVENDOR_ID_CHASE_PCIRAS  macro  include/linux/pci_ids.h  1795  #define PCI_SUBVENDOR_ID_CHASE_PCIRAS 0x124D
PCI_SUBDEVICE_ID_CHASE_PCIRAS4  macro  include/linux/pci_ids.h  1796  #define PCI_SUBDEVICE_ID_CHASE_PCIRAS4 0xF001
PCI_SUBDEVICE_ID_CHASE_PCIRAS8  macro  include/linux/pci_ids.h  1797  #define PCI_SUBDEVICE_ID_CHASE_PCIRAS8 0xF010
PCI_VENDOR_ID_AUREAL  macro  include/linux/pci_ids.h  1799  #define PCI_VENDOR_ID_AUREAL 0x12eb
PCI_DEVICE_ID_AUREAL_VORTEX_1  macro  include/linux/pci_ids.h  1800  #define PCI_DEVICE_ID_AUREAL_VORTEX_1 0x0001
PCI_DEVICE_ID_AUREAL_VORTEX_2  macro  include/linux/pci_ids.h  1801  #define PCI_DEVICE_ID_AUREAL_VORTEX_2 0x0002
PCI_DEVICE_ID_AUREAL_ADVANTAGE  macro  include/linux/pci_ids.h  1802  #define PCI_DEVICE_ID_AUREAL_ADVANTAGE 0x0003
PCI_VENDOR_ID_ELECTRONICDESIGNGMBH  macro  include/linux/pci_ids.h  1804  #define PCI_VENDOR_ID_ELECTRONICDESIGNGMBH 0x12f8
PCI_DEVICE_ID_LML_33R10  macro  include/linux/pci_ids.h  1805  #define PCI_DEVICE_ID_LML_33R10 0x8a02
PCI_VENDOR_ID_ESDGMBH  macro  include/linux/pci_ids.h  1807  #define PCI_VENDOR_ID_ESDGMBH 0x12fe
PCI_DEVICE_ID_ESDGMBH_CPCIASIO4  macro  include/linux/pci_ids.h  1808  #define PCI_DEVICE_ID_ESDGMBH_CPCIASIO4 0x0111
PCI_VENDOR_ID_SIIG  macro  include/linux/pci_ids.h  1810  #define PCI_VENDOR_ID_SIIG 0x131f
PCI_SUBVENDOR_ID_SIIG  macro  include/linux/pci_ids.h  1811  #define PCI_SUBVENDOR_ID_SIIG 0x131f
PCI_DEVICE_ID_SIIG_1S_10x_550  macro  include/linux/pci_ids.h  1812  #define PCI_DEVICE_ID_SIIG_1S_10x_550 0x1000
PCI_DEVICE_ID_SIIG_1S_10x_650  macro  include/linux/pci_ids.h  1813  #define PCI_DEVICE_ID_SIIG_1S_10x_650 0x1001
PCI_DEVICE_ID_SIIG_1S_10x_850  macro  include/linux/pci_ids.h  1814  #define PCI_DEVICE_ID_SIIG_1S_10x_850 0x1002
PCI_DEVICE_ID_SIIG_1S1P_10x_550  macro  include/linux/pci_ids.h  1815  #define PCI_DEVICE_ID_SIIG_1S1P_10x_550 0x1010
PCI_DEVICE_ID_SIIG_1S1P_10x_650  macro  include/linux/pci_ids.h  1816  #define PCI_DEVICE_ID_SIIG_1S1P_10x_650 0x1011
PCI_DEVICE_ID_SIIG_1S1P_10x_850  macro  include/linux/pci_ids.h  1817  #define PCI_DEVICE_ID_SIIG_1S1P_10x_850 0x1012
PCI_DEVICE_ID_SIIG_1P_10x  macro  include/linux/pci_ids.h  1818  #define PCI_DEVICE_ID_SIIG_1P_10x 0x1020
PCI_DEVICE_ID_SIIG_2P_10x  macro  include/linux/pci_ids.h  1819  #define PCI_DEVICE_ID_SIIG_2P_10x 0x1021
PCI_DEVICE_ID_SIIG_2S_10x_550  macro  include/linux/pci_ids.h  1820  #define PCI_DEVICE_ID_SIIG_2S_10x_550 0x1030
PCI_DEVICE_ID_SIIG_2S_10x_650  macro  include/linux/pci_ids.h  1821  #define PCI_DEVICE_ID_SIIG_2S_10x_650 0x1031
PCI_DEVICE_ID_SIIG_2S_10x_850  macro  include/linux/pci_ids.h  1822  #define PCI_DEVICE_ID_SIIG_2S_10x_850 0x1032
PCI_DEVICE_ID_SIIG_2S1P_10x_550  macro  include/linux/pci_ids.h  1823  #define PCI_DEVICE_ID_SIIG_2S1P_10x_550 0x1034
PCI_DEVICE_ID_SIIG_2S1P_10x_650  macro  include/linux/pci_ids.h  1824  #define PCI_DEVICE_ID_SIIG_2S1P_10x_650 0x1035
PCI_DEVICE_ID_SIIG_2S1P_10x_850  macro  include/linux/pci_ids.h  1825  #define PCI_DEVICE_ID_SIIG_2S1P_10x_850 0x1036
PCI_DEVICE_ID_SIIG_4S_10x_550  macro  include/linux/pci_ids.h  1826  #define PCI_DEVICE_ID_SIIG_4S_10x_550 0x1050
PCI_DEVICE_ID_SIIG_4S_10x_650  macro  include/linux/pci_ids.h  1827  #define PCI_DEVICE_ID_SIIG_4S_10x_650 0x1051
PCI_DEVICE_ID_SIIG_4S_10x_850  macro  include/linux/pci_ids.h  1828  #define PCI_DEVICE_ID_SIIG_4S_10x_850 0x1052
PCI_DEVICE_ID_SIIG_1S_20x_550  macro  include/linux/pci_ids.h  1829  #define PCI_DEVICE_ID_SIIG_1S_20x_550 0x2000
PCI_DEVICE_ID_SIIG_1S_20x_650  macro  include/linux/pci_ids.h  1830  #define PCI_DEVICE_ID_SIIG_1S_20x_650 0x2001
PCI_DEVICE_ID_SIIG_1S_20x_850  macro  include/linux/pci_ids.h  1831  #define PCI_DEVICE_ID_SIIG_1S_20x_850 0x2002
PCI_DEVICE_ID_SIIG_1P_20x  macro  include/linux/pci_ids.h  1832  #define PCI_DEVICE_ID_SIIG_1P_20x 0x2020
PCI_DEVICE_ID_SIIG_2P_20x  macro  include/linux/pci_ids.h  1833  #define PCI_DEVICE_ID_SIIG_2P_20x 0x2021
PCI_DEVICE_ID_SIIG_2S_20x_550  macro  include/linux/pci_ids.h  1834  #define PCI_DEVICE_ID_SIIG_2S_20x_550 0x2030
PCI_DEVICE_ID_SIIG_2S_20x_650  macro  include/linux/pci_ids.h  1835  #define PCI_DEVICE_ID_SIIG_2S_20x_650 0x2031
PCI_DEVICE_ID_SIIG_2S_20x_850  macro  include/linux/pci_ids.h  1836  #define PCI_DEVICE_ID_SIIG_2S_20x_850 0x2032
PCI_DEVICE_ID_SIIG_2P1S_20x_550  macro  include/linux/pci_ids.h  1837  #define PCI_DEVICE_ID_SIIG_2P1S_20x_550 0x2040
PCI_DEVICE_ID_SIIG_2P1S_20x_650  macro  include/linux/pci_ids.h  1838  #define PCI_DEVICE_ID_SIIG_2P1S_20x_650 0x2041
PCI_DEVICE_ID_SIIG_2P1S_20x_850  macro  include/linux/pci_ids.h  1839  #define PCI_DEVICE_ID_SIIG_2P1S_20x_850 0x2042
PCI_DEVICE_ID_SIIG_1S1P_20x_550  macro  include/linux/pci_ids.h  1840  #define PCI_DEVICE_ID_SIIG_1S1P_20x_550 0x2010
PCI_DEVICE_ID_SIIG_1S1P_20x_650  macro  include/linux/pci_ids.h  1841  #define PCI_DEVICE_ID_SIIG_1S1P_20x_650 0x2011
PCI_DEVICE_ID_SIIG_1S1P_20x_850  macro  include/linux/pci_ids.h  1842  #define PCI_DEVICE_ID_SIIG_1S1P_20x_850 0x2012
PCI_DEVICE_ID_SIIG_4S_20x_550  macro  include/linux/pci_ids.h  1843  #define PCI_DEVICE_ID_SIIG_4S_20x_550 0x2050
PCI_DEVICE_ID_SIIG_4S_20x_650  macro  include/linux/pci_ids.h  1844  #define PCI_DEVICE_ID_SIIG_4S_20x_650 0x2051
PCI_DEVICE_ID_SIIG_4S_20x_850  macro  include/linux/pci_ids.h  1845  #define PCI_DEVICE_ID_SIIG_4S_20x_850 0x2052
PCI_DEVICE_ID_SIIG_2S1P_20x_550  macro  include/linux/pci_ids.h  1846  #define PCI_DEVICE_ID_SIIG_2S1P_20x_550 0x2060
PCI_DEVICE_ID_SIIG_2S1P_20x_650  macro  include/linux/pci_ids.h  1847  #define PCI_DEVICE_ID_SIIG_2S1P_20x_650 0x2061
PCI_DEVICE_ID_SIIG_2S1P_20x_850  macro  include/linux/pci_ids.h  1848  #define PCI_DEVICE_ID_SIIG_2S1P_20x_850 0x2062
PCI_DEVICE_ID_SIIG_8S_20x_550  macro  include/linux/pci_ids.h  1849  #define PCI_DEVICE_ID_SIIG_8S_20x_550 0x2080
PCI_DEVICE_ID_SIIG_8S_20x_650  macro  include/linux/pci_ids.h  1850  #define PCI_DEVICE_ID_SIIG_8S_20x_650 0x2081
PCI_DEVICE_ID_SIIG_8S_20x_850  macro  include/linux/pci_ids.h  1851  #define PCI_DEVICE_ID_SIIG_8S_20x_850 0x2082
PCI_SUBDEVICE_ID_SIIG_QUARTET_SERIAL  macro  include/linux/pci_ids.h  1852  #define PCI_SUBDEVICE_ID_SIIG_QUARTET_SERIAL 0x2050
PCI_VENDOR_ID_RADISYS  macro  include/linux/pci_ids.h  1854  #define PCI_VENDOR_ID_RADISYS 0x1331
PCI_VENDOR_ID_MICRO_MEMORY  macro  include/linux/pci_ids.h  1856  #define PCI_VENDOR_ID_MICRO_MEMORY 0x1332
PCI_DEVICE_ID_MICRO_MEMORY_5415CN  macro  include/linux/pci_ids.h  1857  #define PCI_DEVICE_ID_MICRO_MEMORY_5415CN 0x5415
PCI_DEVICE_ID_MICRO_MEMORY_5425CN  macro  include/linux/pci_ids.h  1858  #define PCI_DEVICE_ID_MICRO_MEMORY_5425CN 0x5425
PCI_DEVICE_ID_MICRO_MEMORY_6155  macro  include/linux/pci_ids.h  1859  #define PCI_DEVICE_ID_MICRO_MEMORY_6155 0x6155
PCI_VENDOR_ID_DOMEX  macro  include/linux/pci_ids.h  1861  #define PCI_VENDOR_ID_DOMEX 0x134a
PCI_DEVICE_ID_DOMEX_DMX3191D  macro  include/linux/pci_ids.h  1862  #define PCI_DEVICE_ID_DOMEX_DMX3191D 0x0001
PCI_VENDOR_ID_INTASHIELD  macro  include/linux/pci_ids.h  1864  #define PCI_VENDOR_ID_INTASHIELD 0x135a
PCI_DEVICE_ID_INTASHIELD_IS200  macro  include/linux/pci_ids.h  1865  #define PCI_DEVICE_ID_INTASHIELD_IS200 0x0d80
PCI_DEVICE_ID_INTASHIELD_IS400  macro  include/linux/pci_ids.h  1866  #define PCI_DEVICE_ID_INTASHIELD_IS400 0x0dc0
PCI_VENDOR_ID_QUATECH  macro  include/linux/pci_ids.h  1868  #define PCI_VENDOR_ID_QUATECH 0x135C
PCI_DEVICE_ID_QUATECH_QSC100  macro  include/linux/pci_ids.h  1869  #define PCI_DEVICE_ID_QUATECH_QSC100 0x0010
PCI_DEVICE_ID_QUATECH_DSC100  macro  include/linux/pci_ids.h  1870  #define PCI_DEVICE_ID_QUATECH_DSC100 0x0020
PCI_DEVICE_ID_QUATECH_ESC100D  macro  include/linux/pci_ids.h  1871  #define PCI_DEVICE_ID_QUATECH_ESC100D 0x0050
PCI_DEVICE_ID_QUATECH_ESC100M  macro  include/linux/pci_ids.h  1872  #define PCI_DEVICE_ID_QUATECH_ESC100M 0x0060
PCI_DEVICE_ID_QUATECH_SPPXP_100  macro  include/linux/pci_ids.h  1873  #define PCI_DEVICE_ID_QUATECH_SPPXP_100 0x0278
PCI_VENDOR_ID_SEALEVEL  macro  include/linux/pci_ids.h  1875  #define PCI_VENDOR_ID_SEALEVEL 0x135e
PCI_DEVICE_ID_SEALEVEL_U530  macro  include/linux/pci_ids.h  1876  #define PCI_DEVICE_ID_SEALEVEL_U530 0x7101
PCI_DEVICE_ID_SEALEVEL_UCOMM2  macro  include/linux/pci_ids.h  1877  #define PCI_DEVICE_ID_SEALEVEL_UCOMM2 0x7201
PCI_DEVICE_ID_SEALEVEL_UCOMM422  macro  include/linux/pci_ids.h  1878  #define PCI_DEVICE_ID_SEALEVEL_UCOMM422 0x7402
PCI_DEVICE_ID_SEALEVEL_UCOMM232  macro  include/linux/pci_ids.h  1879  #define PCI_DEVICE_ID_SEALEVEL_UCOMM232 0x7202
PCI_DEVICE_ID_SEALEVEL_COMM4  macro  include/linux/pci_ids.h  1880  #define PCI_DEVICE_ID_SEALEVEL_COMM4 0x7401
PCI_DEVICE_ID_SEALEVEL_COMM8  macro  include/linux/pci_ids.h  1881  #define PCI_DEVICE_ID_SEALEVEL_COMM8 0x7801
PCI_DEVICE_ID_SEALEVEL_7803  macro  include/linux/pci_ids.h  1882  #define PCI_DEVICE_ID_SEALEVEL_7803 0x7803
PCI_DEVICE_ID_SEALEVEL_UCOMM8  macro  include/linux/pci_ids.h  1883  #define PCI_DEVICE_ID_SEALEVEL_UCOMM8 0x7804
PCI_VENDOR_ID_HYPERCOPE  macro  include/linux/pci_ids.h  1885  #define PCI_VENDOR_ID_HYPERCOPE 0x1365
PCI_DEVICE_ID_HYPERCOPE_PLX  macro  include/linux/pci_ids.h  1886  #define PCI_DEVICE_ID_HYPERCOPE_PLX 0x9050
PCI_SUBDEVICE_ID_HYPERCOPE_OLD_ERGO  macro  include/linux/pci_ids.h  1887  #define PCI_SUBDEVICE_ID_HYPERCOPE_OLD_ERGO 0x0104
PCI_SUBDEVICE_ID_HYPERCOPE_ERGO  macro  include/linux/pci_ids.h  1888  #define PCI_SUBDEVICE_ID_HYPERCOPE_ERGO 0x0106
PCI_SUBDEVICE_ID_HYPERCOPE_METRO  macro  include/linux/pci_ids.h  1889  #define PCI_SUBDEVICE_ID_HYPERCOPE_METRO 0x0107
PCI_SUBDEVICE_ID_HYPERCOPE_CHAMP2  macro  include/linux/pci_ids.h  1890  #define PCI_SUBDEVICE_ID_HYPERCOPE_CHAMP2 0x0108
PCI_VENDOR_ID_DIGIGRAM  macro  include/linux/pci_ids.h  1892  #define PCI_VENDOR_ID_DIGIGRAM 0x1369
PCI_SUBDEVICE_ID_DIGIGRAM_LX6464ES_SERIAL_SUBSYSTEM  macro  include/linux/pci_ids.h  1893  #define PCI_SUBDEVICE_ID_DIGIGRAM_LX6464ES_SERIAL_SUBSYSTEM 0xc001
PCI_SUBDEVICE_ID_DIGIGRAM_LX6464ES_CAE_SERIAL_SUBSYSTEM  macro  include/linux/pci_ids.h  1894  #define PCI_SUBDEVICE_ID_DIGIGRAM_LX6464ES_CAE_SERIAL_SUBSYSTEM 0xc002
PCI_VENDOR_ID_KAWASAKI  macro  include/linux/pci_ids.h  1896  #define PCI_VENDOR_ID_KAWASAKI 0x136b
PCI_DEVICE_ID_MCHIP_KL5A72002  macro  include/linux/pci_ids.h  1897  #define PCI_DEVICE_ID_MCHIP_KL5A72002 0xff01
PCI_VENDOR_ID_CNET  macro  include/linux/pci_ids.h  1899  #define PCI_VENDOR_ID_CNET 0x1371
PCI_DEVICE_ID_CNET_GIGACARD  macro  include/linux/pci_ids.h  1900  #define PCI_DEVICE_ID_CNET_GIGACARD 0x434e
PCI_VENDOR_ID_LMC  macro  include/linux/pci_ids.h  1902  #define PCI_VENDOR_ID_LMC 0x1376
PCI_DEVICE_ID_LMC_HSSI  macro  include/linux/pci_ids.h  1903  #define PCI_DEVICE_ID_LMC_HSSI 0x0003
PCI_DEVICE_ID_LMC_DS3  macro  include/linux/pci_ids.h  1904  #define PCI_DEVICE_ID_LMC_DS3 0x0004
PCI_DEVICE_ID_LMC_SSI  macro  include/linux/pci_ids.h  1905  #define PCI_DEVICE_ID_LMC_SSI 0x0005
PCI_DEVICE_ID_LMC_T1  macro  include/linux/pci_ids.h  1906  #define PCI_DEVICE_ID_LMC_T1 0x0006
PCI_VENDOR_ID_NETGEAR  macro  include/linux/pci_ids.h  1908  #define PCI_VENDOR_ID_NETGEAR 0x1385
PCI_DEVICE_ID_NETGEAR_GA620  macro  include/linux/pci_ids.h  1909  #define PCI_DEVICE_ID_NETGEAR_GA620 0x620a
PCI_VENDOR_ID_APPLICOM  macro  include/linux/pci_ids.h  1911  #define PCI_VENDOR_ID_APPLICOM 0x1389
PCI_DEVICE_ID_APPLICOM_PCIGENERIC  macro  include/linux/pci_ids.h  1912  #define PCI_DEVICE_ID_APPLICOM_PCIGENERIC 0x0001
PCI_DEVICE_ID_APPLICOM_PCI2000IBS_CAN  macro  include/linux/pci_ids.h  1913  #define PCI_DEVICE_ID_APPLICOM_PCI2000IBS_CAN 0x0002
PCI_DEVICE_ID_APPLICOM_PCI2000PFB  macro  include/linux/pci_ids.h  1914  #define PCI_DEVICE_ID_APPLICOM_PCI2000PFB 0x0003
PCI_VENDOR_ID_MOXA  macro  include/linux/pci_ids.h  1916  #define PCI_VENDOR_ID_MOXA 0x1393
PCI_DEVICE_ID_MOXA_RC7000  macro  include/linux/pci_ids.h  1917  #define PCI_DEVICE_ID_MOXA_RC7000 0x0001
PCI_DEVICE_ID_MOXA_CP102  macro  include/linux/pci_ids.h  1918  #define PCI_DEVICE_ID_MOXA_CP102 0x1020
PCI_DEVICE_ID_MOXA_CP102UL  macro  include/linux/pci_ids.h  1919  #define PCI_DEVICE_ID_MOXA_CP102UL 0x1021
PCI_DEVICE_ID_MOXA_CP102U  macro  include/linux/pci_ids.h  1920  #define PCI_DEVICE_ID_MOXA_CP102U 0x1022
PCI_DEVICE_ID_MOXA_C104  macro  include/linux/pci_ids.h  1921  #define PCI_DEVICE_ID_MOXA_C104 0x1040
PCI_DEVICE_ID_MOXA_CP104U  macro  include/linux/pci_ids.h  1922  #define PCI_DEVICE_ID_MOXA_CP104U 0x1041
PCI_DEVICE_ID_MOXA_CP104JU  macro  include/linux/pci_ids.h  1923  #define PCI_DEVICE_ID_MOXA_CP104JU 0x1042
PCI_DEVICE_ID_MOXA_CP104EL  macro  include/linux/pci_ids.h  1924  #define PCI_DEVICE_ID_MOXA_CP104EL 0x1043
PCI_DEVICE_ID_MOXA_CT114  macro  include/linux/pci_ids.h  1925  #define PCI_DEVICE_ID_MOXA_CT114 0x1140
PCI_DEVICE_ID_MOXA_CP114  macro  include/linux/pci_ids.h  1926  #define PCI_DEVICE_ID_MOXA_CP114 0x1141
PCI_DEVICE_ID_MOXA_CP118U  macro  include/linux/pci_ids.h  1927  #define PCI_DEVICE_ID_MOXA_CP118U 0x1180
PCI_DEVICE_ID_MOXA_CP118EL  macro  include/linux/pci_ids.h  1928  #define PCI_DEVICE_ID_MOXA_CP118EL 0x1181
PCI_DEVICE_ID_MOXA_CP132  macro  include/linux/pci_ids.h  1929  #define PCI_DEVICE_ID_MOXA_CP132 0x1320
PCI_DEVICE_ID_MOXA_CP132U  macro  include/linux/pci_ids.h  1930  #define PCI_DEVICE_ID_MOXA_CP132U 0x1321
PCI_DEVICE_ID_MOXA_CP134U  macro  include/linux/pci_ids.h  1931  #define PCI_DEVICE_ID_MOXA_CP134U 0x1340
PCI_DEVICE_ID_MOXA_C168  macro  include/linux/pci_ids.h  1932  #define PCI_DEVICE_ID_MOXA_C168 0x1680
PCI_DEVICE_ID_MOXA_CP168U  macro  include/linux/pci_ids.h  1933  #define PCI_DEVICE_ID_MOXA_CP168U 0x1681
PCI_DEVICE_ID_MOXA_CP168EL  macro  include/linux/pci_ids.h  1934  #define PCI_DEVICE_ID_MOXA_CP168EL 0x1682
PCI_DEVICE_ID_MOXA_CP204J  macro  include/linux/pci_ids.h  1935  #define PCI_DEVICE_ID_MOXA_CP204J 0x2040
PCI_DEVICE_ID_MOXA_C218  macro  include/linux/pci_ids.h  1936  #define PCI_DEVICE_ID_MOXA_C218 0x2180
PCI_DEVICE_ID_MOXA_C320  macro  include/linux/pci_ids.h  1937  #define PCI_DEVICE_ID_MOXA_C320 0x3200
PCI_VENDOR_ID_CCD  macro  include/linux/pci_ids.h  1939  #define PCI_VENDOR_ID_CCD 0x1397
PCI_DEVICE_ID_CCD_HFC4S  macro  include/linux/pci_ids.h  1940  #define PCI_DEVICE_ID_CCD_HFC4S 0x08B4
PCI_SUBDEVICE_ID_CCD_PMX2S  macro  include/linux/pci_ids.h  1941  #define PCI_SUBDEVICE_ID_CCD_PMX2S 0x1234
PCI_DEVICE_ID_CCD_HFC8S  macro  include/linux/pci_ids.h  1942  #define PCI_DEVICE_ID_CCD_HFC8S 0x16B8
PCI_DEVICE_ID_CCD_2BD0  macro  include/linux/pci_ids.h  1943  #define PCI_DEVICE_ID_CCD_2BD0 0x2bd0
PCI_DEVICE_ID_CCD_HFCE1  macro  include/linux/pci_ids.h  1944  #define PCI_DEVICE_ID_CCD_HFCE1 0x30B1
PCI_SUBDEVICE_ID_CCD_SPD4S  macro  include/linux/pci_ids.h  1945  #define PCI_SUBDEVICE_ID_CCD_SPD4S 0x3136
PCI_SUBDEVICE_ID_CCD_SPDE1  macro  include/linux/pci_ids.h  1946  #define PCI_SUBDEVICE_ID_CCD_SPDE1 0x3137
PCI_DEVICE_ID_CCD_B000  macro  include/linux/pci_ids.h  1947  #define PCI_DEVICE_ID_CCD_B000 0xb000
PCI_DEVICE_ID_CCD_B006  macro  include/linux/pci_ids.h  1948  #define PCI_DEVICE_ID_CCD_B006 0xb006
PCI_DEVICE_ID_CCD_B007  macro  include/linux/pci_ids.h  1949  #define PCI_DEVICE_ID_CCD_B007 0xb007
PCI_DEVICE_ID_CCD_B008  macro  include/linux/pci_ids.h  1950  #define PCI_DEVICE_ID_CCD_B008 0xb008
PCI_DEVICE_ID_CCD_B009  macro  include/linux/pci_ids.h  1951  #define PCI_DEVICE_ID_CCD_B009 0xb009
PCI_DEVICE_ID_CCD_B00A  macro  include/linux/pci_ids.h  1952  #define PCI_DEVICE_ID_CCD_B00A 0xb00a
PCI_DEVICE_ID_CCD_B00B  macro  include/linux/pci_ids.h  1953  #define PCI_DEVICE_ID_CCD_B00B 0xb00b
PCI_DEVICE_ID_CCD_B00C  macro  include/linux/pci_ids.h  1954  #define PCI_DEVICE_ID_CCD_B00C 0xb00c
PCI_DEVICE_ID_CCD_B100  macro  include/linux/pci_ids.h  1955  #define PCI_DEVICE_ID_CCD_B100 0xb100
PCI_SUBDEVICE_ID_CCD_IOB4ST  macro  include/linux/pci_ids.h  1956  #define PCI_SUBDEVICE_ID_CCD_IOB4ST 0xB520
PCI_SUBDEVICE_ID_CCD_IOB8STR  macro  include/linux/pci_ids.h  1957  #define PCI_SUBDEVICE_ID_CCD_IOB8STR 0xB521
PCI_SUBDEVICE_ID_CCD_IOB8ST  macro  include/linux/pci_ids.h  1958  #define PCI_SUBDEVICE_ID_CCD_IOB8ST 0xB522
PCI_SUBDEVICE_ID_CCD_IOB1E1  macro  include/linux/pci_ids.h  1959  #define PCI_SUBDEVICE_ID_CCD_IOB1E1 0xB523
PCI_SUBDEVICE_ID_CCD_SWYX4S  macro  include/linux/pci_ids.h  1960  #define PCI_SUBDEVICE_ID_CCD_SWYX4S 0xB540
PCI_SUBDEVICE_ID_CCD_JH4S20  macro  include/linux/pci_ids.h  1961  #define PCI_SUBDEVICE_ID_CCD_JH4S20 0xB550
PCI_SUBDEVICE_ID_CCD_IOB8ST_1  macro  include/linux/pci_ids.h  1962  #define PCI_SUBDEVICE_ID_CCD_IOB8ST_1 0xB552
PCI_SUBDEVICE_ID_CCD_JHSE1  macro  include/linux/pci_ids.h  1963  #define PCI_SUBDEVICE_ID_CCD_JHSE1 0xB553
PCI_SUBDEVICE_ID_CCD_JH8S  macro  include/linux/pci_ids.h  1964  #define PCI_SUBDEVICE_ID_CCD_JH8S 0xB55B
PCI_SUBDEVICE_ID_CCD_BN4S  macro  include/linux/pci_ids.h  1965  #define PCI_SUBDEVICE_ID_CCD_BN4S 0xB560
PCI_SUBDEVICE_ID_CCD_BN8S  macro  include/linux/pci_ids.h  1966  #define PCI_SUBDEVICE_ID_CCD_BN8S 0xB562
PCI_SUBDEVICE_ID_CCD_BNE1  macro  include/linux/pci_ids.h  1967  #define PCI_SUBDEVICE_ID_CCD_BNE1 0xB563
PCI_SUBDEVICE_ID_CCD_BNE1D  macro  include/linux/pci_ids.h  1968  #define PCI_SUBDEVICE_ID_CCD_BNE1D 0xB564
PCI_SUBDEVICE_ID_CCD_BNE1DP  macro  include/linux/pci_ids.h  1969  #define PCI_SUBDEVICE_ID_CCD_BNE1DP 0xB565
PCI_SUBDEVICE_ID_CCD_BN2S  macro  include/linux/pci_ids.h  1970  #define PCI_SUBDEVICE_ID_CCD_BN2S 0xB566
PCI_SUBDEVICE_ID_CCD_BN1SM  macro  include/linux/pci_ids.h  1971  #define PCI_SUBDEVICE_ID_CCD_BN1SM 0xB567
PCI_SUBDEVICE_ID_CCD_BN4SM  macro  include/linux/pci_ids.h  1972  #define PCI_SUBDEVICE_ID_CCD_BN4SM 0xB568
PCI_SUBDEVICE_ID_CCD_BN2SM  macro  include/linux/pci_ids.h  1973  #define PCI_SUBDEVICE_ID_CCD_BN2SM 0xB569
PCI_SUBDEVICE_ID_CCD_BNE1M  macro  include/linux/pci_ids.h  1974  #define PCI_SUBDEVICE_ID_CCD_BNE1M 0xB56A
PCI_SUBDEVICE_ID_CCD_BN8SP  macro  include/linux/pci_ids.h  1975  #define PCI_SUBDEVICE_ID_CCD_BN8SP 0xB56B
PCI_SUBDEVICE_ID_CCD_HFC4S  macro  include/linux/pci_ids.h  1976  #define PCI_SUBDEVICE_ID_CCD_HFC4S 0xB620
PCI_SUBDEVICE_ID_CCD_HFC8S  macro  include/linux/pci_ids.h  1977  #define PCI_SUBDEVICE_ID_CCD_HFC8S 0xB622
PCI_DEVICE_ID_CCD_B700  macro  include/linux/pci_ids.h  1978  #define PCI_DEVICE_ID_CCD_B700 0xb700
PCI_DEVICE_ID_CCD_B701  macro  include/linux/pci_ids.h  1979  #define PCI_DEVICE_ID_CCD_B701 0xb701
PCI_SUBDEVICE_ID_CCD_HFCE1  macro  include/linux/pci_ids.h  1980  #define PCI_SUBDEVICE_ID_CCD_HFCE1 0xC523
PCI_SUBDEVICE_ID_CCD_OV2S  macro  include/linux/pci_ids.h  1981  #define PCI_SUBDEVICE_ID_CCD_OV2S 0xE884
PCI_SUBDEVICE_ID_CCD_OV4S  macro  include/linux/pci_ids.h  1982  #define PCI_SUBDEVICE_ID_CCD_OV4S 0xE888
PCI_SUBDEVICE_ID_CCD_OV8S  macro  include/linux/pci_ids.h  1983  #define PCI_SUBDEVICE_ID_CCD_OV8S 0xE998
PCI_VENDOR_ID_EXAR  macro  include/linux/pci_ids.h  1985  #define PCI_VENDOR_ID_EXAR 0x13a8
PCI_DEVICE_ID_EXAR_XR17C152  macro  include/linux/pci_ids.h  1986  #define PCI_DEVICE_ID_EXAR_XR17C152 0x0152
PCI_DEVICE_ID_EXAR_XR17C154  macro  include/linux/pci_ids.h  1987  #define PCI_DEVICE_ID_EXAR_XR17C154 0x0154
PCI_DEVICE_ID_EXAR_XR17C158  macro  include/linux/pci_ids.h  1988  #define PCI_DEVICE_ID_EXAR_XR17C158 0x0158
PCI_DEVICE_ID_EXAR_XR17V352  macro  include/linux/pci_ids.h  1989  #define PCI_DEVICE_ID_EXAR_XR17V352 0x0352
PCI_DEVICE_ID_EXAR_XR17V354  macro  include/linux/pci_ids.h  1990  #define PCI_DEVICE_ID_EXAR_XR17V354 0x0354
PCI_DEVICE_ID_EXAR_XR17V358  macro  include/linux/pci_ids.h  1991  #define PCI_DEVICE_ID_EXAR_XR17V358 0x0358
PCI_VENDOR_ID_MICROGATE  macro  include/linux/pci_ids.h  1993  #define PCI_VENDOR_ID_MICROGATE 0x13c0
PCI_DEVICE_ID_MICROGATE_USC  macro  include/linux/pci_ids.h  1994  #define PCI_DEVICE_ID_MICROGATE_USC 0x0010
PCI_DEVICE_ID_MICROGATE_SCA  macro  include/linux/pci_ids.h  1995  #define PCI_DEVICE_ID_MICROGATE_SCA 0x0030
PCI_VENDOR_ID_3WARE  macro  include/linux/pci_ids.h  1997  #define PCI_VENDOR_ID_3WARE 0x13C1
PCI_DEVICE_ID_3WARE_1000  macro  include/linux/pci_ids.h  1998  #define PCI_DEVICE_ID_3WARE_1000 0x1000
PCI_DEVICE_ID_3WARE_7000  macro  include/linux/pci_ids.h  1999  #define PCI_DEVICE_ID_3WARE_7000 0x1001
PCI_DEVICE_ID_3WARE_9000  macro  include/linux/pci_ids.h  2000  #define PCI_DEVICE_ID_3WARE_9000 0x1002
PCI_VENDOR_ID_IOMEGA  macro  include/linux/pci_ids.h  2002  #define PCI_VENDOR_ID_IOMEGA 0x13ca
PCI_DEVICE_ID_IOMEGA_BUZ  macro  include/linux/pci_ids.h  2003  #define PCI_DEVICE_ID_IOMEGA_BUZ 0x4231
PCI_VENDOR_ID_ABOCOM  macro  include/linux/pci_ids.h  2005  #define PCI_VENDOR_ID_ABOCOM 0x13D1
PCI_DEVICE_ID_ABOCOM_2BD1  macro  include/linux/pci_ids.h  2006  #define PCI_DEVICE_ID_ABOCOM_2BD1 0x2BD1
PCI_VENDOR_ID_SUNDANCE  macro  include/linux/pci_ids.h  2008  #define PCI_VENDOR_ID_SUNDANCE 0x13f0
PCI_VENDOR_ID_CMEDIA  macro  include/linux/pci_ids.h  2010  #define PCI_VENDOR_ID_CMEDIA 0x13f6
PCI_DEVICE_ID_CMEDIA_CM8338A  macro  include/linux/pci_ids.h  2011  #define PCI_DEVICE_ID_CMEDIA_CM8338A 0x0100
PCI_DEVICE_ID_CMEDIA_CM8338B  macro  include/linux/pci_ids.h  2012  #define PCI_DEVICE_ID_CMEDIA_CM8338B 0x0101
PCI_DEVICE_ID_CMEDIA_CM8738  macro  include/linux/pci_ids.h  2013  #define PCI_DEVICE_ID_CMEDIA_CM8738 0x0111
PCI_DEVICE_ID_CMEDIA_CM8738B  macro  include/linux/pci_ids.h  2014  #define PCI_DEVICE_ID_CMEDIA_CM8738B 0x0112
PCI_VENDOR_ID_LAVA  macro  include/linux/pci_ids.h  2016  #define PCI_VENDOR_ID_LAVA 0x1407
PCI_DEVICE_ID_LAVA_DSERIAL  macro  include/linux/pci_ids.h  2017  #define PCI_DEVICE_ID_LAVA_DSERIAL 0x0100
PCI_DEVICE_ID_LAVA_QUATRO_A  macro  include/linux/pci_ids.h  2018  #define PCI_DEVICE_ID_LAVA_QUATRO_A 0x0101
PCI_DEVICE_ID_LAVA_QUATRO_B  macro  include/linux/pci_ids.h  2019  #define PCI_DEVICE_ID_LAVA_QUATRO_B 0x0102
PCI_DEVICE_ID_LAVA_QUATTRO_A  macro  include/linux/pci_ids.h  2020  #define PCI_DEVICE_ID_LAVA_QUATTRO_A 0x0120
PCI_DEVICE_ID_LAVA_QUATTRO_B  macro  include/linux/pci_ids.h  2021  #define PCI_DEVICE_ID_LAVA_QUATTRO_B 0x0121
PCI_DEVICE_ID_LAVA_OCTO_A  macro  include/linux/pci_ids.h  2022  #define PCI_DEVICE_ID_LAVA_OCTO_A 0x0180
PCI_DEVICE_ID_LAVA_OCTO_B  macro  include/linux/pci_ids.h  2023  #define PCI_DEVICE_ID_LAVA_OCTO_B 0x0181
PCI_DEVICE_ID_LAVA_PORT_PLUS  macro  include/linux/pci_ids.h  2024  #define PCI_DEVICE_ID_LAVA_PORT_PLUS 0x0200
PCI_DEVICE_ID_LAVA_QUAD_A  macro  include/linux/pci_ids.h  2025  #define PCI_DEVICE_ID_LAVA_QUAD_A 0x0201
PCI_DEVICE_ID_LAVA_QUAD_B  macro  include/linux/pci_ids.h  2026  #define PCI_DEVICE_ID_LAVA_QUAD_B 0x0202
PCI_DEVICE_ID_LAVA_SSERIAL  macro  include/linux/pci_ids.h  2027  #define PCI_DEVICE_ID_LAVA_SSERIAL 0x0500
PCI_DEVICE_ID_LAVA_PORT_650  macro  include/linux/pci_ids.h  2028  #define PCI_DEVICE_ID_LAVA_PORT_650 0x0600
PCI_DEVICE_ID_LAVA_PARALLEL  macro  include/linux/pci_ids.h  2029  #define PCI_DEVICE_ID_LAVA_PARALLEL 0x8000
PCI_DEVICE_ID_LAVA_DUAL_PAR_A  macro  include/linux/pci_ids.h  2030  #define PCI_DEVICE_ID_LAVA_DUAL_PAR_A 0x8002
PCI_DEVICE_ID_LAVA_DUAL_PAR_B  macro  include/linux/pci_ids.h  2031  #define PCI_DEVICE_ID_LAVA_DUAL_PAR_B 0x8003
PCI_DEVICE_ID_LAVA_BOCA_IOPPAR  macro  include/linux/pci_ids.h  2032  #define PCI_DEVICE_ID_LAVA_BOCA_IOPPAR 0x8800
PCI_VENDOR_ID_TIMEDIA  macro  include/linux/pci_ids.h  2034  #define PCI_VENDOR_ID_TIMEDIA 0x1409
PCI_DEVICE_ID_TIMEDIA_1889  macro  include/linux/pci_ids.h  2035  #define PCI_DEVICE_ID_TIMEDIA_1889 0x7168
PCI_VENDOR_ID_ICE  macro  include/linux/pci_ids.h  2037  #define PCI_VENDOR_ID_ICE 0x1412
PCI_DEVICE_ID_ICE_1712  macro  include/linux/pci_ids.h  2038  #define PCI_DEVICE_ID_ICE_1712 0x1712
PCI_DEVICE_ID_VT1724  macro  include/linux/pci_ids.h  2039  #define PCI_DEVICE_ID_VT1724 0x1724
PCI_VENDOR_ID_OXSEMI  macro  include/linux/pci_ids.h  2041  #define PCI_VENDOR_ID_OXSEMI 0x1415
PCI_DEVICE_ID_OXSEMI_12PCI840  macro  include/linux/pci_ids.h  2042  #define PCI_DEVICE_ID_OXSEMI_12PCI840 0x8403
PCI_DEVICE_ID_OXSEMI_PCIe840  macro  include/linux/pci_ids.h  2043  #define PCI_DEVICE_ID_OXSEMI_PCIe840 0xC000
PCI_DEVICE_ID_OXSEMI_PCIe840_G  macro  include/linux/pci_ids.h  2044  #define PCI_DEVICE_ID_OXSEMI_PCIe840_G 0xC004
PCI_DEVICE_ID_OXSEMI_PCIe952_0  macro  include/linux/pci_ids.h  2045  #define PCI_DEVICE_ID_OXSEMI_PCIe952_0 0xC100
PCI_DEVICE_ID_OXSEMI_PCIe952_0_G  macro  include/linux/pci_ids.h  2046  #define PCI_DEVICE_ID_OXSEMI_PCIe952_0_G 0xC104
PCI_DEVICE_ID_OXSEMI_PCIe952_1  macro  include/linux/pci_ids.h  2047  #define PCI_DEVICE_ID_OXSEMI_PCIe952_1 0xC110
PCI_DEVICE_ID_OXSEMI_PCIe952_1_G  macro  include/linux/pci_ids.h  2048  #define PCI_DEVICE_ID_OXSEMI_PCIe952_1_G 0xC114
PCI_DEVICE_ID_OXSEMI_PCIe952_1_U  macro  include/linux/pci_ids.h  2049  #define PCI_DEVICE_ID_OXSEMI_PCIe952_1_U 0xC118
PCI_DEVICE_ID_OXSEMI_PCIe952_1_GU  macro  include/linux/pci_ids.h  2050  #define PCI_DEVICE_ID_OXSEMI_PCIe952_1_GU 0xC11C
PCI_DEVICE_ID_OXSEMI_16PCI954  macro  include/linux/pci_ids.h  2051  #define PCI_DEVICE_ID_OXSEMI_16PCI954 0x9501
PCI_DEVICE_ID_OXSEMI_C950  macro  include/linux/pci_ids.h  2052  #define PCI_DEVICE_ID_OXSEMI_C950 0x950B
PCI_DEVICE_ID_OXSEMI_16PCI95N  macro  include/linux/pci_ids.h  2053  #define PCI_DEVICE_ID_OXSEMI_16PCI95N 0x9511
PCI_DEVICE_ID_OXSEMI_16PCI954PP  macro  include/linux/pci_ids.h  2054  #define PCI_DEVICE_ID_OXSEMI_16PCI954PP 0x9513
PCI_DEVICE_ID_OXSEMI_16PCI952  macro  include/linux/pci_ids.h  2055  #define PCI_DEVICE_ID_OXSEMI_16PCI952 0x9521
PCI_DEVICE_ID_OXSEMI_16PCI952PP  macro  include/linux/pci_ids.h  2056  #define PCI_DEVICE_ID_OXSEMI_16PCI952PP 0x9523
PCI_SUBDEVICE_ID_OXSEMI_C950  macro  include/linux/pci_ids.h  2057  #define PCI_SUBDEVICE_ID_OXSEMI_C950 0x0001
PCI_VENDOR_ID_CHELSIO  macro  include/linux/pci_ids.h  2059  #define PCI_VENDOR_ID_CHELSIO 0x1425
PCI_VENDOR_ID_SAMSUNG  macro  include/linux/pci_ids.h  2061  #define PCI_VENDOR_ID_SAMSUNG 0x144d
PCI_VENDOR_ID_GIGABYTE  macro  include/linux/pci_ids.h  2063  #define PCI_VENDOR_ID_GIGABYTE 0x1458
PCI_VENDOR_ID_AMBIT  macro  include/linux/pci_ids.h  2065  #define PCI_VENDOR_ID_AMBIT 0x1468
PCI_VENDOR_ID_MYRICOM  macro  include/linux/pci_ids.h  2067  #define PCI_VENDOR_ID_MYRICOM 0x14c1
PCI_VENDOR_ID_TITAN  macro  include/linux/pci_ids.h  2069  #define PCI_VENDOR_ID_TITAN 0x14D2
PCI_DEVICE_ID_TITAN_010L  macro  include/linux/pci_ids.h  2070  #define PCI_DEVICE_ID_TITAN_010L 0x8001
PCI_DEVICE_ID_TITAN_100L  macro  include/linux/pci_ids.h  2071  #define PCI_DEVICE_ID_TITAN_100L 0x8010
PCI_DEVICE_ID_TITAN_110L  macro  include/linux/pci_ids.h  2072  #define PCI_DEVICE_ID_TITAN_110L 0x8011
PCI_DEVICE_ID_TITAN_200L  macro  include/linux/pci_ids.h  2073  #define PCI_DEVICE_ID_TITAN_200L 0x8020
PCI_DEVICE_ID_TITAN_210L  macro  include/linux/pci_ids.h  2074  #define PCI_DEVICE_ID_TITAN_210L 0x8021
PCI_DEVICE_ID_TITAN_400L  macro  include/linux/pci_ids.h  2075  #define PCI_DEVICE_ID_TITAN_400L 0x8040
PCI_DEVICE_ID_TITAN_800L  macro  include/linux/pci_ids.h  2076  #define PCI_DEVICE_ID_TITAN_800L 0x8080
PCI_DEVICE_ID_TITAN_100  macro  include/linux/pci_ids.h  2077  #define PCI_DEVICE_ID_TITAN_100 0xA001
PCI_DEVICE_ID_TITAN_200  macro  include/linux/pci_ids.h  2078  #define PCI_DEVICE_ID_TITAN_200 0xA005
PCI_DEVICE_ID_TITAN_400  macro  include/linux/pci_ids.h  2079  #define PCI_DEVICE_ID_TITAN_400 0xA003
PCI_DEVICE_ID_TITAN_800B  macro  include/linux/pci_ids.h  2080  #define PCI_DEVICE_ID_TITAN_800B 0xA004
PCI_VENDOR_ID_PANACOM  macro  include/linux/pci_ids.h  2082  #define PCI_VENDOR_ID_PANACOM 0x14d4
PCI_DEVICE_ID_PANACOM_QUADMODEM  macro  include/linux/pci_ids.h  2083  #define PCI_DEVICE_ID_PANACOM_QUADMODEM 0x0400
PCI_DEVICE_ID_PANACOM_DUALMODEM  macro  include/linux/pci_ids.h  2084  #define PCI_DEVICE_ID_PANACOM_DUALMODEM 0x0402
PCI_VENDOR_ID_SIPACKETS  macro  include/linux/pci_ids.h  2086  #define PCI_VENDOR_ID_SIPACKETS 0x14d9
PCI_DEVICE_ID_SP1011  macro  include/linux/pci_ids.h  2087  #define PCI_DEVICE_ID_SP1011 0x0010
PCI_VENDOR_ID_AFAVLAB  macro  include/linux/pci_ids.h  2089  #define PCI_VENDOR_ID_AFAVLAB 0x14db
PCI_DEVICE_ID_AFAVLAB_P028  macro  include/linux/pci_ids.h  2090  #define PCI_DEVICE_ID_AFAVLAB_P028 0x2180
PCI_DEVICE_ID_AFAVLAB_P030  macro  include/linux/pci_ids.h  2091  #define PCI_DEVICE_ID_AFAVLAB_P030 0x2182
PCI_SUBDEVICE_ID_AFAVLAB_P061  macro  include/linux/pci_ids.h  2092  #define PCI_SUBDEVICE_ID_AFAVLAB_P061 0x2150
PCI_VENDOR_ID_BCM_GVC  macro  include/linux/pci_ids.h  2094  #define PCI_VENDOR_ID_BCM_GVC 0x14a4
PCI_VENDOR_ID_BROADCOM  macro  include/linux/pci_ids.h  2095  #define PCI_VENDOR_ID_BROADCOM 0x14e4
PCI_DEVICE_ID_TIGON3_5752  macro  include/linux/pci_ids.h  2096  #define PCI_DEVICE_ID_TIGON3_5752 0x1600
PCI_DEVICE_ID_TIGON3_5752M  macro  include/linux/pci_ids.h  2097  #define PCI_DEVICE_ID_TIGON3_5752M 0x1601
PCI_DEVICE_ID_NX2_5709  macro  include/linux/pci_ids.h  2098  #define PCI_DEVICE_ID_NX2_5709 0x1639
PCI_DEVICE_ID_NX2_5709S  macro  include/linux/pci_ids.h  2099  #define PCI_DEVICE_ID_NX2_5709S 0x163a
PCI_DEVICE_ID_TIGON3_5700  macro  include/linux/pci_ids.h  2100  #define PCI_DEVICE_ID_TIGON3_5700 0x1644
PCI_DEVICE_ID_TIGON3_5701  macro  include/linux/pci_ids.h  2101  #define PCI_DEVICE_ID_TIGON3_5701 0x1645
PCI_DEVICE_ID_TIGON3_5702  macro  include/linux/pci_ids.h  2102  #define PCI_DEVICE_ID_TIGON3_5702 0x1646
PCI_DEVICE_ID_TIGON3_5703  macro  include/linux/pci_ids.h  2103  #define PCI_DEVICE_ID_TIGON3_5703 0x1647
PCI_DEVICE_ID_TIGON3_5704  macro  include/linux/pci_ids.h  2104  #define PCI_DEVICE_ID_TIGON3_5704 0x1648
PCI_DEVICE_ID_TIGON3_5704S_2  macro  include/linux/pci_ids.h  2105  #define PCI_DEVICE_ID_TIGON3_5704S_2 0x1649
PCI_DEVICE_ID_NX2_5706  macro  include/linux/pci_ids.h  2106  #define PCI_DEVICE_ID_NX2_5706 0x164a
PCI_DEVICE_ID_NX2_5708  macro  include/linux/pci_ids.h  2107  #define PCI_DEVICE_ID_NX2_5708 0x164c
PCI_DEVICE_ID_TIGON3_5702FE  macro  include/linux/pci_ids.h  2108  #define PCI_DEVICE_ID_TIGON3_5702FE 0x164d
PCI_DEVICE_ID_NX2_57710  macro  include/linux/pci_ids.h  2109  #define PCI_DEVICE_ID_NX2_57710 0x164e
PCI_DEVICE_ID_NX2_57711  macro  include/linux/pci_ids.h  2110  #define PCI_DEVICE_ID_NX2_57711 0x164f
PCI_DEVICE_ID_NX2_57711E  macro  include/linux/pci_ids.h  2111  #define PCI_DEVICE_ID_NX2_57711E 0x1650
PCI_DEVICE_ID_TIGON3_5705  macro  include/linux/pci_ids.h  2112  #define PCI_DEVICE_ID_TIGON3_5705 0x1653
PCI_DEVICE_ID_TIGON3_5705_2  macro  include/linux/pci_ids.h  2113  #define PCI_DEVICE_ID_TIGON3_5705_2 0x1654
PCI_DEVICE_ID_TIGON3_5719  macro  include/linux/pci_ids.h  2114  #define PCI_DEVICE_ID_TIGON3_5719 0x1657
PCI_DEVICE_ID_TIGON3_5721  macro  include/linux/pci_ids.h  2115  #define PCI_DEVICE_ID_TIGON3_5721 0x1659
PCI_DEVICE_ID_TIGON3_5722  macro  include/linux/pci_ids.h  2116  #define PCI_DEVICE_ID_TIGON3_5722 0x165a
PCI_DEVICE_ID_TIGON3_5723  macro  include/linux/pci_ids.h  2117  #define PCI_DEVICE_ID_TIGON3_5723 0x165b
PCI_DEVICE_ID_TIGON3_5705M  macro  include/linux/pci_ids.h  2118  #define PCI_DEVICE_ID_TIGON3_5705M 0x165d
PCI_DEVICE_ID_TIGON3_5705M_2  macro  include/linux/pci_ids.h  2119  #define PCI_DEVICE_ID_TIGON3_5705M_2 0x165e
PCI_DEVICE_ID_NX2_57712  macro  include/linux/pci_ids.h  2120  #define PCI_DEVICE_ID_NX2_57712 0x1662
PCI_DEVICE_ID_NX2_57712E  macro  include/linux/pci_ids.h  2121  #define PCI_DEVICE_ID_NX2_57712E 0x1663
PCI_DEVICE_ID_TIGON3_5714  macro  include/linux/pci_ids.h  2122  #define PCI_DEVICE_ID_TIGON3_5714 0x1668
PCI_DEVICE_ID_TIGON3_5714S  macro  include/linux/pci_ids.h  2123  #define PCI_DEVICE_ID_TIGON3_5714S 0x1669
PCI_DEVICE_ID_TIGON3_5780  macro  include/linux/pci_ids.h  2124  #define PCI_DEVICE_ID_TIGON3_5780 0x166a
PCI_DEVICE_ID_TIGON3_5780S  macro  include/linux/pci_ids.h  2125  #define PCI_DEVICE_ID_TIGON3_5780S 0x166b
PCI_DEVICE_ID_TIGON3_5705F  macro  include/linux/pci_ids.h  2126  #define PCI_DEVICE_ID_TIGON3_5705F 0x166e
PCI_DEVICE_ID_TIGON3_5754M  macro  include/linux/pci_ids.h  2127  #define PCI_DEVICE_ID_TIGON3_5754M 0x1672
PCI_DEVICE_ID_TIGON3_5755M  macro  include/linux/pci_ids.h  2128  #define PCI_DEVICE_ID_TIGON3_5755M 0x1673
PCI_DEVICE_ID_TIGON3_5756  macro  include/linux/pci_ids.h  2129  #define PCI_DEVICE_ID_TIGON3_5756 0x1674
PCI_DEVICE_ID_TIGON3_5751  macro  include/linux/pci_ids.h  2130  #define PCI_DEVICE_ID_TIGON3_5751 0x1677
PCI_DEVICE_ID_TIGON3_5715  macro  include/linux/pci_ids.h  2131  #define PCI_DEVICE_ID_TIGON3_5715 0x1678
PCI_DEVICE_ID_TIGON3_5715S  macro  include/linux/pci_ids.h  2132  #define PCI_DEVICE_ID_TIGON3_5715S 0x1679
PCI_DEVICE_ID_TIGON3_5754  macro  include/linux/pci_ids.h  2133  #define PCI_DEVICE_ID_TIGON3_5754 0x167a
PCI_DEVICE_ID_TIGON3_5755  macro  include/linux/pci_ids.h  2134  #define PCI_DEVICE_ID_TIGON3_5755 0x167b
PCI_DEVICE_ID_TIGON3_5751M  macro  include/linux/pci_ids.h  2135  #define PCI_DEVICE_ID_TIGON3_5751M 0x167d
PCI_DEVICE_ID_TIGON3_5751F  macro  include/linux/pci_ids.h  2136  #define PCI_DEVICE_ID_TIGON3_5751F 0x167e
PCI_DEVICE_ID_TIGON3_5787F  macro  include/linux/pci_ids.h  2137  #define PCI_DEVICE_ID_TIGON3_5787F 0x167f
PCI_DEVICE_ID_TIGON3_5761E  macro  include/linux/pci_ids.h  2138  #define PCI_DEVICE_ID_TIGON3_5761E 0x1680
PCI_DEVICE_ID_TIGON3_5761  macro  include/linux/pci_ids.h  2139  #define PCI_DEVICE_ID_TIGON3_5761 0x1681
PCI_DEVICE_ID_TIGON3_5764  macro  include/linux/pci_ids.h  2140  #define PCI_DEVICE_ID_TIGON3_5764 0x1684
PCI_DEVICE_ID_NX2_57800  macro  include/linux/pci_ids.h  2141  #define PCI_DEVICE_ID_NX2_57800 0x168a
PCI_DEVICE_ID_NX2_57840  macro  include/linux/pci_ids.h  2142  #define PCI_DEVICE_ID_NX2_57840 0x168d
PCI_DEVICE_ID_NX2_57810  macro  include/linux/pci_ids.h  2143  #define PCI_DEVICE_ID_NX2_57810 0x168e
PCI_DEVICE_ID_TIGON3_5787M  macro  include/linux/pci_ids.h  2144  #define PCI_DEVICE_ID_TIGON3_5787M 0x1693
PCI_DEVICE_ID_TIGON3_5782  macro  include/linux/pci_ids.h  2145  #define PCI_DEVICE_ID_TIGON3_5782 0x1696
PCI_DEVICE_ID_TIGON3_5784  macro  include/linux/pci_ids.h  2146  #define PCI_DEVICE_ID_TIGON3_5784 0x1698
PCI_DEVICE_ID_TIGON3_5786  macro  include/linux/pci_ids.h  2147  #define PCI_DEVICE_ID_TIGON3_5786 0x169a
PCI_DEVICE_ID_TIGON3_5787  macro  include/linux/pci_ids.h  2148  #define PCI_DEVICE_ID_TIGON3_5787 0x169b
PCI_DEVICE_ID_TIGON3_5788  macro  include/linux/pci_ids.h  2149  #define PCI_DEVICE_ID_TIGON3_5788 0x169c
PCI_DEVICE_ID_TIGON3_5789  macro  include/linux/pci_ids.h  2150  #define PCI_DEVICE_ID_TIGON3_5789 0x169d
PCI_DEVICE_ID_NX2_57800_MF  macro  include/linux/pci_ids.h  2151  #define PCI_DEVICE_ID_NX2_57800_MF 0x16a5
PCI_DEVICE_ID_TIGON3_5702X  macro  include/linux/pci_ids.h  2152  #define PCI_DEVICE_ID_TIGON3_5702X 0x16a6
PCI_DEVICE_ID_TIGON3_5703X  macro  include/linux/pci_ids.h  2153  #define PCI_DEVICE_ID_TIGON3_5703X 0x16a7
PCI_DEVICE_ID_TIGON3_5704S  macro  include/linux/pci_ids.h  2154  #define PCI_DEVICE_ID_TIGON3_5704S 0x16a8
PCI_DEVICE_ID_NX2_57800_VF  macro  include/linux/pci_ids.h  2155  #define PCI_DEVICE_ID_NX2_57800_VF 0x16a9
PCI_DEVICE_ID_NX2_5706S  macro  include/linux/pci_ids.h  2156  #define PCI_DEVICE_ID_NX2_5706S 0x16aa
PCI_DEVICE_ID_NX2_57840_MF  macro  include/linux/pci_ids.h  2157  #define PCI_DEVICE_ID_NX2_57840_MF 0x16a4
PCI_DEVICE_ID_NX2_5708S  macro  include/linux/pci_ids.h  2158  #define PCI_DEVICE_ID_NX2_5708S 0x16ac
PCI_DEVICE_ID_NX2_57840_VF  macro  include/linux/pci_ids.h  2159  #define PCI_DEVICE_ID_NX2_57840_VF 0x16ad
PCI_DEVICE_ID_NX2_57810_MF  macro  include/linux/pci_ids.h  2160  #define PCI_DEVICE_ID_NX2_57810_MF 0x16ae
PCI_DEVICE_ID_NX2_57810_VF  macro  include/linux/pci_ids.h  2161  #define PCI_DEVICE_ID_NX2_57810_VF 0x16af
PCI_DEVICE_ID_TIGON3_5702A3  macro  include/linux/pci_ids.h  2162  #define PCI_DEVICE_ID_TIGON3_5702A3 0x16c6
PCI_DEVICE_ID_TIGON3_5703A3  macro  include/linux/pci_ids.h  2163  #define PCI_DEVICE_ID_TIGON3_5703A3 0x16c7
PCI_DEVICE_ID_TIGON3_5781  macro  include/linux/pci_ids.h  2164  #define PCI_DEVICE_ID_TIGON3_5781 0x16dd
PCI_DEVICE_ID_TIGON3_5753  macro  include/linux/pci_ids.h  2165  #define PCI_DEVICE_ID_TIGON3_5753 0x16f7
PCI_DEVICE_ID_TIGON3_5753M  macro  include/linux/pci_ids.h  2166  #define PCI_DEVICE_ID_TIGON3_5753M 0x16fd
PCI_DEVICE_ID_TIGON3_5753F  macro  include/linux/pci_ids.h  2167  #define PCI_DEVICE_ID_TIGON3_5753F 0x16fe
PCI_DEVICE_ID_TIGON3_5901  macro  include/linux/pci_ids.h  2168  #define PCI_DEVICE_ID_TIGON3_5901 0x170d
PCI_DEVICE_ID_BCM4401B1  macro  include/linux/pci_ids.h  2169  #define PCI_DEVICE_ID_BCM4401B1 0x170c
PCI_DEVICE_ID_TIGON3_5901_2  macro  include/linux/pci_ids.h  2170  #define PCI_DEVICE_ID_TIGON3_5901_2 0x170e
PCI_DEVICE_ID_TIGON3_5906  macro  include/linux/pci_ids.h  2171  #define PCI_DEVICE_ID_TIGON3_5906 0x1712
PCI_DEVICE_ID_TIGON3_5906M  macro  include/linux/pci_ids.h  2172  #define PCI_DEVICE_ID_TIGON3_5906M 0x1713
PCI_DEVICE_ID_BCM4401  macro  include/linux/pci_ids.h  2173  #define PCI_DEVICE_ID_BCM4401 0x4401
PCI_DEVICE_ID_BCM4401B0  macro  include/linux/pci_ids.h  2174  #define PCI_DEVICE_ID_BCM4401B0 0x4402
PCI_VENDOR_ID_TOPIC  macro  include/linux/pci_ids.h  2176  #define PCI_VENDOR_ID_TOPIC 0x151f
PCI_DEVICE_ID_TOPIC_TP560  macro  include/linux/pci_ids.h  2177  #define PCI_DEVICE_ID_TOPIC_TP560 0x0000
PCI_VENDOR_ID_MAINPINE  macro  include/linux/pci_ids.h  2179  #define PCI_VENDOR_ID_MAINPINE 0x1522
PCI_DEVICE_ID_MAINPINE_PBRIDGE  macro  include/linux/pci_ids.h  2180  #define PCI_DEVICE_ID_MAINPINE_PBRIDGE 0x0100
PCI_VENDOR_ID_ENE  macro  include/linux/pci_ids.h  2181  #define PCI_VENDOR_ID_ENE 0x1524
PCI_DEVICE_ID_ENE_CB710_FLASH  macro  include/linux/pci_ids.h  2182  #define PCI_DEVICE_ID_ENE_CB710_FLASH 0x0510
PCI_DEVICE_ID_ENE_CB712_SD  macro  include/linux/pci_ids.h  2183  #define PCI_DEVICE_ID_ENE_CB712_SD 0x0550
PCI_DEVICE_ID_ENE_CB712_SD_2  macro  include/linux/pci_ids.h  2184  #define PCI_DEVICE_ID_ENE_CB712_SD_2 0x0551
PCI_DEVICE_ID_ENE_CB714_SD  macro  include/linux/pci_ids.h  2185  #define PCI_DEVICE_ID_ENE_CB714_SD 0x0750
PCI_DEVICE_ID_ENE_CB714_SD_2  macro  include/linux/pci_ids.h  2186  #define PCI_DEVICE_ID_ENE_CB714_SD_2 0x0751
PCI_DEVICE_ID_ENE_1211  macro  include/linux/pci_ids.h  2187  #define PCI_DEVICE_ID_ENE_1211 0x1211
PCI_DEVICE_ID_ENE_1225  macro  include/linux/pci_ids.h  2188  #define PCI_DEVICE_ID_ENE_1225 0x1225
PCI_DEVICE_ID_ENE_1410  macro  include/linux/pci_ids.h  2189  #define PCI_DEVICE_ID_ENE_1410 0x1410
PCI_DEVICE_ID_ENE_710  macro  include/linux/pci_ids.h  2190  #define PCI_DEVICE_ID_ENE_710 0x1411
PCI_DEVICE_ID_ENE_712  macro  include/linux/pci_ids.h  2191  #define PCI_DEVICE_ID_ENE_712 0x1412
PCI_DEVICE_ID_ENE_1420  macro  include/linux/pci_ids.h  2192  #define PCI_DEVICE_ID_ENE_1420 0x1420
PCI_DEVICE_ID_ENE_720  macro  include/linux/pci_ids.h  2193  #define PCI_DEVICE_ID_ENE_720 0x1421
PCI_DEVICE_ID_ENE_722  macro  include/linux/pci_ids.h  2194  #define PCI_DEVICE_ID_ENE_722 0x1422
PCI_SUBVENDOR_ID_PERLE  macro  include/linux/pci_ids.h  2196  #define PCI_SUBVENDOR_ID_PERLE 0x155f
PCI_SUBDEVICE_ID_PCI_RAS4  macro  include/linux/pci_ids.h  2197  #define PCI_SUBDEVICE_ID_PCI_RAS4 0xf001
PCI_SUBDEVICE_ID_PCI_RAS8  macro  include/linux/pci_ids.h  2198  #define PCI_SUBDEVICE_ID_PCI_RAS8 0xf010
PCI_VENDOR_ID_SYBA  macro  include/linux/pci_ids.h  2200  #define PCI_VENDOR_ID_SYBA 0x1592
PCI_DEVICE_ID_SYBA_2P_EPP  macro  include/linux/pci_ids.h  2201  #define PCI_DEVICE_ID_SYBA_2P_EPP 0x0782
PCI_DEVICE_ID_SYBA_1P_ECP  macro  include/linux/pci_ids.h  2202  #define PCI_DEVICE_ID_SYBA_1P_ECP 0x0783
PCI_VENDOR_ID_MORETON  macro  include/linux/pci_ids.h  2204  #define PCI_VENDOR_ID_MORETON 0x15aa
PCI_DEVICE_ID_RASTEL_2PORT  macro  include/linux/pci_ids.h  2205  #define PCI_DEVICE_ID_RASTEL_2PORT 0x2000
PCI_VENDOR_ID_ZOLTRIX  macro  include/linux/pci_ids.h  2207  #define PCI_VENDOR_ID_ZOLTRIX 0x15b0
PCI_DEVICE_ID_ZOLTRIX_2BD0  macro  include/linux/pci_ids.h  2208  #define PCI_DEVICE_ID_ZOLTRIX_2BD0 0x2bd0
PCI_VENDOR_ID_MELLANOX  macro  include/linux/pci_ids.h  2210  #define PCI_VENDOR_ID_MELLANOX 0x15b3
PCI_DEVICE_ID_MELLANOX_TAVOR  macro  include/linux/pci_ids.h  2211  #define PCI_DEVICE_ID_MELLANOX_TAVOR 0x5a44
PCI_DEVICE_ID_MELLANOX_TAVOR_BRIDGE  macro  include/linux/pci_ids.h  2212  #define PCI_DEVICE_ID_MELLANOX_TAVOR_BRIDGE 0x5a46
PCI_DEVICE_ID_MELLANOX_ARBEL_COMPAT  macro  include/linux/pci_ids.h  2213  #define PCI_DEVICE_ID_MELLANOX_ARBEL_COMPAT 0x6278
PCI_DEVICE_ID_MELLANOX_ARBEL  macro  include/linux/pci_ids.h  2214  #define PCI_DEVICE_ID_MELLANOX_ARBEL 0x6282
PCI_DEVICE_ID_MELLANOX_SINAI_OLD  macro  include/linux/pci_ids.h  2215  #define PCI_DEVICE_ID_MELLANOX_SINAI_OLD 0x5e8c
PCI_DEVICE_ID_MELLANOX_SINAI  macro  include/linux/pci_ids.h  2216  #define PCI_DEVICE_ID_MELLANOX_SINAI 0x6274
PCI_VENDOR_ID_DFI  macro  include/linux/pci_ids.h  2218  #define PCI_VENDOR_ID_DFI 0x15bd
PCI_VENDOR_ID_QUICKNET  macro  include/linux/pci_ids.h  2220  #define PCI_VENDOR_ID_QUICKNET 0x15e2
PCI_DEVICE_ID_QUICKNET_XJ  macro  include/linux/pci_ids.h  2221  #define PCI_DEVICE_ID_QUICKNET_XJ 0x0500
PCI_VENDOR_ID_ADDIDATA_OLD  macro  include/linux/pci_ids.h  2226  #define PCI_VENDOR_ID_ADDIDATA_OLD 0x10E8
PCI_VENDOR_ID_ADDIDATA  macro  include/linux/pci_ids.h  2227  #define PCI_VENDOR_ID_ADDIDATA 0x15B8
PCI_DEVICE_ID_ADDIDATA_APCI7500  macro  include/linux/pci_ids.h  2228  #define PCI_DEVICE_ID_ADDIDATA_APCI7500 0x7000
PCI_DEVICE_ID_ADDIDATA_APCI7420  macro  include/linux/pci_ids.h  2229  #define PCI_DEVICE_ID_ADDIDATA_APCI7420 0x7001
PCI_DEVICE_ID_ADDIDATA_APCI7300  macro  include/linux/pci_ids.h  2230  #define PCI_DEVICE_ID_ADDIDATA_APCI7300 0x7002
PCI_DEVICE_ID_ADDIDATA_APCI7800  macro  include/linux/pci_ids.h  2231  #define PCI_DEVICE_ID_ADDIDATA_APCI7800 0x818E
PCI_DEVICE_ID_ADDIDATA_APCI7500_2  macro  include/linux/pci_ids.h  2232  #define PCI_DEVICE_ID_ADDIDATA_APCI7500_2 0x7009
PCI_DEVICE_ID_ADDIDATA_APCI7420_2  macro  include/linux/pci_ids.h  2233  #define PCI_DEVICE_ID_ADDIDATA_APCI7420_2 0x700A
PCI_DEVICE_ID_ADDIDATA_APCI7300_2  macro  include/linux/pci_ids.h  2234  #define PCI_DEVICE_ID_ADDIDATA_APCI7300_2 0x700B
PCI_DEVICE_ID_ADDIDATA_APCI7500_3  macro  include/linux/pci_ids.h  2235  #define PCI_DEVICE_ID_ADDIDATA_APCI7500_3 0x700C
PCI_DEVICE_ID_ADDIDATA_APCI7420_3  macro  include/linux/pci_ids.h  2236  #define PCI_DEVICE_ID_ADDIDATA_APCI7420_3 0x700D
PCI_DEVICE_ID_ADDIDATA_APCI7300_3  macro  include/linux/pci_ids.h  2237  #define PCI_DEVICE_ID_ADDIDATA_APCI7300_3 0x700E
PCI_DEVICE_ID_ADDIDATA_APCI7800_3  macro  include/linux/pci_ids.h  2238  #define PCI_DEVICE_ID_ADDIDATA_APCI7800_3 0x700F
PCI_DEVICE_ID_ADDIDATA_APCIe7300  macro  include/linux/pci_ids.h  2239  #define PCI_DEVICE_ID_ADDIDATA_APCIe7300 0x7010
PCI_DEVICE_ID_ADDIDATA_APCIe7420  macro  include/linux/pci_ids.h  2240  #define PCI_DEVICE_ID_ADDIDATA_APCIe7420 0x7011
PCI_DEVICE_ID_ADDIDATA_APCIe7500  macro  include/linux/pci_ids.h  2241  #define PCI_DEVICE_ID_ADDIDATA_APCIe7500 0x7012
PCI_DEVICE_ID_ADDIDATA_APCIe7800  macro  include/linux/pci_ids.h  2242  #define PCI_DEVICE_ID_ADDIDATA_APCIe7800 0x7013
PCI_VENDOR_ID_PDC  macro  include/linux/pci_ids.h  2244  #define PCI_VENDOR_ID_PDC 0x15e9
PCI_VENDOR_ID_FARSITE  macro  include/linux/pci_ids.h  2246  #define PCI_VENDOR_ID_FARSITE 0x1619
PCI_DEVICE_ID_FARSITE_T2P  macro  include/linux/pci_ids.h  2247  #define PCI_DEVICE_ID_FARSITE_T2P 0x0400
PCI_DEVICE_ID_FARSITE_T4P  macro  include/linux/pci_ids.h  2248  #define PCI_DEVICE_ID_FARSITE_T4P 0x0440
PCI_DEVICE_ID_FARSITE_T1U  macro  include/linux/pci_ids.h  2249  #define PCI_DEVICE_ID_FARSITE_T1U 0x0610
PCI_DEVICE_ID_FARSITE_T2U  macro  include/linux/pci_ids.h  2250  #define PCI_DEVICE_ID_FARSITE_T2U 0x0620
PCI_DEVICE_ID_FARSITE_T4U  macro  include/linux/pci_ids.h  2251  #define PCI_DEVICE_ID_FARSITE_T4U 0x0640
PCI_DEVICE_ID_FARSITE_TE1  macro  include/linux/pci_ids.h  2252  #define PCI_DEVICE_ID_FARSITE_TE1 0x1610
PCI_DEVICE_ID_FARSITE_TE1C  macro  include/linux/pci_ids.h  2253  #define PCI_DEVICE_ID_FARSITE_TE1C 0x1612
PCI_VENDOR_ID_ARIMA  macro  include/linux/pci_ids.h  2255  #define PCI_VENDOR_ID_ARIMA 0x161f
PCI_VENDOR_ID_BROCADE  macro  include/linux/pci_ids.h  2257  #define PCI_VENDOR_ID_BROCADE 0x1657
PCI_DEVICE_ID_BROCADE_CT  macro  include/linux/pci_ids.h  2258  #define PCI_DEVICE_ID_BROCADE_CT 0x0014
PCI_DEVICE_ID_BROCADE_FC_8G1P  macro  include/linux/pci_ids.h  2259  #define PCI_DEVICE_ID_BROCADE_FC_8G1P 0x0017
PCI_DEVICE_ID_BROCADE_CT_FC  macro  include/linux/pci_ids.h  2260  #define PCI_DEVICE_ID_BROCADE_CT_FC 0x0021
PCI_VENDOR_ID_SIBYTE  macro  include/linux/pci_ids.h  2262  #define PCI_VENDOR_ID_SIBYTE 0x166d
PCI_DEVICE_ID_BCM1250_PCI  macro  include/linux/pci_ids.h  2263  #define PCI_DEVICE_ID_BCM1250_PCI 0x0001
PCI_DEVICE_ID_BCM1250_HT  macro  include/linux/pci_ids.h  2264  #define PCI_DEVICE_ID_BCM1250_HT 0x0002
PCI_VENDOR_ID_ATHEROS  macro  include/linux/pci_ids.h  2266  #define PCI_VENDOR_ID_ATHEROS 0x168c
PCI_VENDOR_ID_NETCELL  macro  include/linux/pci_ids.h  2268  #define PCI_VENDOR_ID_NETCELL 0x169c
PCI_DEVICE_ID_REVOLUTION  macro  include/linux/pci_ids.h  2269  #define PCI_DEVICE_ID_REVOLUTION 0x0044
PCI_VENDOR_ID_CENATEK  macro  include/linux/pci_ids.h  2271  #define PCI_VENDOR_ID_CENATEK 0x16CA
PCI_DEVICE_ID_CENATEK_IDE  macro  include/linux/pci_ids.h  2272  #define PCI_DEVICE_ID_CENATEK_IDE 0x0001
PCI_VENDOR_ID_VITESSE  macro  include/linux/pci_ids.h  2274  #define PCI_VENDOR_ID_VITESSE 0x1725
PCI_DEVICE_ID_VITESSE_VSC7174  macro  include/linux/pci_ids.h  2275  #define PCI_DEVICE_ID_VITESSE_VSC7174 0x7174
PCI_VENDOR_ID_LINKSYS  macro  include/linux/pci_ids.h  2277  #define PCI_VENDOR_ID_LINKSYS 0x1737
PCI_DEVICE_ID_LINKSYS_EG1064  macro  include/linux/pci_ids.h  2278  #define PCI_DEVICE_ID_LINKSYS_EG1064 0x1064
PCI_VENDOR_ID_ALTIMA  macro  include/linux/pci_ids.h  2280  #define PCI_VENDOR_ID_ALTIMA 0x173b
PCI_DEVICE_ID_ALTIMA_AC1000  macro  include/linux/pci_ids.h  2281  #define PCI_DEVICE_ID_ALTIMA_AC1000 0x03e8
PCI_DEVICE_ID_ALTIMA_AC1001  macro  include/linux/pci_ids.h  2282  #define PCI_DEVICE_ID_ALTIMA_AC1001 0x03e9
PCI_DEVICE_ID_ALTIMA_AC9100  macro  include/linux/pci_ids.h  2283  #define PCI_DEVICE_ID_ALTIMA_AC9100 0x03ea
PCI_DEVICE_ID_ALTIMA_AC1003  macro  include/linux/pci_ids.h  2284  #define PCI_DEVICE_ID_ALTIMA_AC1003 0x03eb
PCI_VENDOR_ID_BELKIN  macro  include/linux/pci_ids.h  2286  #define PCI_VENDOR_ID_BELKIN 0x1799
PCI_DEVICE_ID_BELKIN_F5D7010V7  macro  include/linux/pci_ids.h  2287  #define PCI_DEVICE_ID_BELKIN_F5D7010V7 0x701f
PCI_VENDOR_ID_RDC  macro  include/linux/pci_ids.h  2289  #define PCI_VENDOR_ID_RDC 0x17f3
PCI_DEVICE_ID_RDC_R6020  macro  include/linux/pci_ids.h  2290  #define PCI_DEVICE_ID_RDC_R6020 0x6020
PCI_DEVICE_ID_RDC_R6030  macro  include/linux/pci_ids.h  2291  #define PCI_DEVICE_ID_RDC_R6030 0x6030
PCI_DEVICE_ID_RDC_R6040  macro  include/linux/pci_ids.h  2292  #define PCI_DEVICE_ID_RDC_R6040 0x6040
PCI_DEVICE_ID_RDC_R6060  macro  include/linux/pci_ids.h  2293  #define PCI_DEVICE_ID_RDC_R6060 0x6060
PCI_DEVICE_ID_RDC_R6061  macro  include/linux/pci_ids.h  2294  #define PCI_DEVICE_ID_RDC_R6061 0x6061
PCI_DEVICE_ID_RDC_D1010  macro  include/linux/pci_ids.h  2295  #define PCI_DEVICE_ID_RDC_D1010 0x1010
PCI_VENDOR_ID_LENOVO  macro  include/linux/pci_ids.h  2297  #define PCI_VENDOR_ID_LENOVO 0x17aa
PCI_VENDOR_ID_ARECA  macro  include/linux/pci_ids.h  2299  #define PCI_VENDOR_ID_ARECA 0x17d3
PCI_DEVICE_ID_ARECA_1110  macro  include/linux/pci_ids.h  2300  #define PCI_DEVICE_ID_ARECA_1110 0x1110
PCI_DEVICE_ID_ARECA_1120  macro  include/linux/pci_ids.h  2301  #define PCI_DEVICE_ID_ARECA_1120 0x1120
PCI_DEVICE_ID_ARECA_1130  macro  include/linux/pci_ids.h  2302  #define PCI_DEVICE_ID_ARECA_1130 0x1130
PCI_DEVICE_ID_ARECA_1160  macro  include/linux/pci_ids.h  2303  #define PCI_DEVICE_ID_ARECA_1160 0x1160
PCI_DEVICE_ID_ARECA_1170  macro  include/linux/pci_ids.h  2304  #define PCI_DEVICE_ID_ARECA_1170 0x1170
PCI_DEVICE_ID_ARECA_1200  macro  include/linux/pci_ids.h  2305  #define PCI_DEVICE_ID_ARECA_1200 0x1200
PCI_DEVICE_ID_ARECA_1201  macro  include/linux/pci_ids.h  2306  #define PCI_DEVICE_ID_ARECA_1201 0x1201
PCI_DEVICE_ID_ARECA_1202  macro  include/linux/pci_ids.h  2307  #define PCI_DEVICE_ID_ARECA_1202 0x1202
PCI_DEVICE_ID_ARECA_1210  macro  include/linux/pci_ids.h  2308  #define PCI_DEVICE_ID_ARECA_1210 0x1210
PCI_DEVICE_ID_ARECA_1220  macro  include/linux/pci_ids.h  2309  #define PCI_DEVICE_ID_ARECA_1220 0x1220
PCI_DEVICE_ID_ARECA_1230  macro  include/linux/pci_ids.h  2310  #define PCI_DEVICE_ID_ARECA_1230 0x1230
PCI_DEVICE_ID_ARECA_1260  macro  include/linux/pci_ids.h  2311  #define PCI_DEVICE_ID_ARECA_1260 0x1260
PCI_DEVICE_ID_ARECA_1270  macro  include/linux/pci_ids.h  2312  #define PCI_DEVICE_ID_ARECA_1270 0x1270
PCI_DEVICE_ID_ARECA_1280  macro  include/linux/pci_ids.h  2313  #define PCI_DEVICE_ID_ARECA_1280 0x1280
PCI_DEVICE_ID_ARECA_1380  macro  include/linux/pci_ids.h  2314  #define PCI_DEVICE_ID_ARECA_1380 0x1380
PCI_DEVICE_ID_ARECA_1381  macro  include/linux/pci_ids.h  2315  #define PCI_DEVICE_ID_ARECA_1381 0x1381
PCI_DEVICE_ID_ARECA_1680  macro  include/linux/pci_ids.h  2316  #define PCI_DEVICE_ID_ARECA_1680 0x1680
PCI_DEVICE_ID_ARECA_1681  macro  include/linux/pci_ids.h  2317  #define PCI_DEVICE_ID_ARECA_1681 0x1681
PCI_VENDOR_ID_S2IO  macro  include/linux/pci_ids.h  2319  #define PCI_VENDOR_ID_S2IO 0x17d5
PCI_DEVICE_ID_S2IO_WIN  macro  include/linux/pci_ids.h  2320  #define PCI_DEVICE_ID_S2IO_WIN 0x5731
PCI_DEVICE_ID_S2IO_UNI  macro  include/linux/pci_ids.h  2321  #define PCI_DEVICE_ID_S2IO_UNI 0x5831
PCI_DEVICE_ID_HERC_WIN  macro  include/linux/pci_ids.h  2322  #define PCI_DEVICE_ID_HERC_WIN 0x5732
PCI_DEVICE_ID_HERC_UNI  macro  include/linux/pci_ids.h  2323  #define PCI_DEVICE_ID_HERC_UNI 0x5832
PCI_VENDOR_ID_SITECOM  macro  include/linux/pci_ids.h  2325  #define PCI_VENDOR_ID_SITECOM 0x182d
PCI_DEVICE_ID_SITECOM_DC105V2  macro  include/linux/pci_ids.h  2326  #define PCI_DEVICE_ID_SITECOM_DC105V2 0x3069
PCI_VENDOR_ID_TOPSPIN  macro  include/linux/pci_ids.h  2328  #define PCI_VENDOR_ID_TOPSPIN 0x1867
PCI_VENDOR_ID_COMMTECH  macro  include/linux/pci_ids.h  2330  #define PCI_VENDOR_ID_COMMTECH 0x18f7
PCI_VENDOR_ID_SILAN  macro  include/linux/pci_ids.h  2332  #define PCI_VENDOR_ID_SILAN 0x1904
PCI_VENDOR_ID_RENESAS  macro  include/linux/pci_ids.h  2334  #define PCI_VENDOR_ID_RENESAS 0x1912
PCI_DEVICE_ID_RENESAS_SH7781  macro  include/linux/pci_ids.h  2335  #define PCI_DEVICE_ID_RENESAS_SH7781 0x0001
PCI_DEVICE_ID_RENESAS_SH7780  macro  include/linux/pci_ids.h  2336  #define PCI_DEVICE_ID_RENESAS_SH7780 0x0002
PCI_DEVICE_ID_RENESAS_SH7763  macro  include/linux/pci_ids.h  2337  #define PCI_DEVICE_ID_RENESAS_SH7763 0x0004
PCI_DEVICE_ID_RENESAS_SH7785  macro  include/linux/pci_ids.h  2338  #define PCI_DEVICE_ID_RENESAS_SH7785 0x0007
PCI_DEVICE_ID_RENESAS_SH7786  macro  include/linux/pci_ids.h  2339  #define PCI_DEVICE_ID_RENESAS_SH7786 0x0010
PCI_VENDOR_ID_SOLARFLARE  macro  include/linux/pci_ids.h  2341  #define PCI_VENDOR_ID_SOLARFLARE 0x1924
PCI_DEVICE_ID_SOLARFLARE_SFC4000A_0  macro  include/linux/pci_ids.h  2342  #define PCI_DEVICE_ID_SOLARFLARE_SFC4000A_0 0x0703
PCI_DEVICE_ID_SOLARFLARE_SFC4000A_1  macro  include/linux/pci_ids.h  2343  #define PCI_DEVICE_ID_SOLARFLARE_SFC4000A_1 0x6703
PCI_DEVICE_ID_SOLARFLARE_SFC4000B  macro  include/linux/pci_ids.h  2344  #define PCI_DEVICE_ID_SOLARFLARE_SFC4000B 0x0710
PCI_VENDOR_ID_TDI  macro  include/linux/pci_ids.h  2346  #define PCI_VENDOR_ID_TDI 0x192E
PCI_DEVICE_ID_TDI_EHCI  macro  include/linux/pci_ids.h  2347  #define PCI_DEVICE_ID_TDI_EHCI 0x0101
PCI_VENDOR_ID_FREESCALE  macro  include/linux/pci_ids.h  2349  #define PCI_VENDOR_ID_FREESCALE 0x1957
PCI_DEVICE_ID_MPC8308  macro  include/linux/pci_ids.h  2350  #define PCI_DEVICE_ID_MPC8308 0xc006
PCI_DEVICE_ID_MPC8315E  macro  include/linux/pci_ids.h  2351  #define PCI_DEVICE_ID_MPC8315E 0x00b4
PCI_DEVICE_ID_MPC8315  macro  include/linux/pci_ids.h  2352  #define PCI_DEVICE_ID_MPC8315 0x00b5
PCI_DEVICE_ID_MPC8314E  macro  include/linux/pci_ids.h  2353  #define PCI_DEVICE_ID_MPC8314E 0x00b6
PCI_DEVICE_ID_MPC8314  macro  include/linux/pci_ids.h  2354  #define PCI_DEVICE_ID_MPC8314 0x00b7
PCI_DEVICE_ID_MPC8378E  macro  include/linux/pci_ids.h  2355  #define PCI_DEVICE_ID_MPC8378E 0x00c4
PCI_DEVICE_ID_MPC8378  macro  include/linux/pci_ids.h  2356  #define PCI_DEVICE_ID_MPC8378 0x00c5
PCI_DEVICE_ID_MPC8377E  macro  include/linux/pci_ids.h  2357  #define PCI_DEVICE_ID_MPC8377E 0x00c6
PCI_DEVICE_ID_MPC8377  macro  include/linux/pci_ids.h  2358  #define PCI_DEVICE_ID_MPC8377 0x00c7
PCI_DEVICE_ID_MPC8548E  macro  include/linux/pci_ids.h  2359  #define PCI_DEVICE_ID_MPC8548E 0x0012
PCI_DEVICE_ID_MPC8548  macro  include/linux/pci_ids.h  2360  #define PCI_DEVICE_ID_MPC8548 0x0013
PCI_DEVICE_ID_MPC8543E  macro  include/linux/pci_ids.h  2361  #define PCI_DEVICE_ID_MPC8543E 0x0014
PCI_DEVICE_ID_MPC8543  macro  include/linux/pci_ids.h  2362  #define PCI_DEVICE_ID_MPC8543 0x0015
PCI_DEVICE_ID_MPC8547E  macro  include/linux/pci_ids.h  2363  #define PCI_DEVICE_ID_MPC8547E 0x0018
PCI_DEVICE_ID_MPC8545E  macro  include/linux/pci_ids.h  2364  #define PCI_DEVICE_ID_MPC8545E 0x0019
PCI_DEVICE_ID_MPC8545  macro  include/linux/pci_ids.h  2365  #define PCI_DEVICE_ID_MPC8545 0x001a
PCI_DEVICE_ID_MPC8569E  macro  include/linux/pci_ids.h  2366  #define PCI_DEVICE_ID_MPC8569E 0x0061
PCI_DEVICE_ID_MPC8569  macro  include/linux/pci_ids.h  2367  #define PCI_DEVICE_ID_MPC8569 0x0060
PCI_DEVICE_ID_MPC8568E  macro  include/linux/pci_ids.h  2368  #define PCI_DEVICE_ID_MPC8568E 0x0020
PCI_DEVICE_ID_MPC8568  macro  include/linux/pci_ids.h  2369  #define PCI_DEVICE_ID_MPC8568 0x0021
PCI_DEVICE_ID_MPC8567E  macro  include/linux/pci_ids.h  2370  #define PCI_DEVICE_ID_MPC8567E 0x0022
PCI_DEVICE_ID_MPC8567  macro  include/linux/pci_ids.h  2371  #define PCI_DEVICE_ID_MPC8567 0x0023
PCI_DEVICE_ID_MPC8533E  macro  include/linux/pci_ids.h  2372  #define PCI_DEVICE_ID_MPC8533E 0x0030
PCI_DEVICE_ID_MPC8533  macro  include/linux/pci_ids.h  2373  #define PCI_DEVICE_ID_MPC8533 0x0031
PCI_DEVICE_ID_MPC8544E  macro  include/linux/pci_ids.h  2374  #define PCI_DEVICE_ID_MPC8544E 0x0032
PCI_DEVICE_ID_MPC8544  macro  include/linux/pci_ids.h  2375  #define PCI_DEVICE_ID_MPC8544 0x0033
PCI_DEVICE_ID_MPC8572E  macro  include/linux/pci_ids.h  2376  #define PCI_DEVICE_ID_MPC8572E 0x0040
PCI_DEVICE_ID_MPC8572  macro  include/linux/pci_ids.h  2377  #define PCI_DEVICE_ID_MPC8572 0x0041
PCI_DEVICE_ID_MPC8536E  macro  include/linux/pci_ids.h  2378  #define PCI_DEVICE_ID_MPC8536E 0x0050
PCI_DEVICE_ID_MPC8536  macro  include/linux/pci_ids.h  2379  #define PCI_DEVICE_ID_MPC8536 0x0051
PCI_DEVICE_ID_P2020E  macro  include/linux/pci_ids.h  2380  #define PCI_DEVICE_ID_P2020E 0x0070
PCI_DEVICE_ID_P2020  macro  include/linux/pci_ids.h  2381  #define PCI_DEVICE_ID_P2020 0x0071
PCI_DEVICE_ID_P2010E  macro  include/linux/pci_ids.h  2382  #define PCI_DEVICE_ID_P2010E 0x0078
PCI_DEVICE_ID_P2010  macro  include/linux/pci_ids.h  2383  #define PCI_DEVICE_ID_P2010 0x0079
PCI_DEVICE_ID_P1020E  macro  include/linux/pci_ids.h  2384  #define PCI_DEVICE_ID_P1020E 0x0100
PCI_DEVICE_ID_P1020  macro  include/linux/pci_ids.h  2385  #define PCI_DEVICE_ID_P1020 0x0101
PCI_DEVICE_ID_P1021E  macro  include/linux/pci_ids.h  2386  #define PCI_DEVICE_ID_P1021E 0x0102
PCI_DEVICE_ID_P1021  macro  include/linux/pci_ids.h  2387  #define PCI_DEVICE_ID_P1021 0x0103
PCI_DEVICE_ID_P1011E  macro  include/linux/pci_ids.h  2388  #define PCI_DEVICE_ID_P1011E 0x0108
PCI_DEVICE_ID_P1011  macro  include/linux/pci_ids.h  2389  #define PCI_DEVICE_ID_P1011 0x0109
PCI_DEVICE_ID_P1022E  macro  include/linux/pci_ids.h  2390  #define PCI_DEVICE_ID_P1022E 0x0110
PCI_DEVICE_ID_P1022  macro  include/linux/pci_ids.h  2391  #define PCI_DEVICE_ID_P1022 0x0111
PCI_DEVICE_ID_P1013E  macro  include/linux/pci_ids.h  2392  #define PCI_DEVICE_ID_P1013E 0x0118
PCI_DEVICE_ID_P1013  macro  include/linux/pci_ids.h  2393  #define PCI_DEVICE_ID_P1013 0x0119
PCI_DEVICE_ID_P4080E  macro  include/linux/pci_ids.h  2394  #define PCI_DEVICE_ID_P4080E 0x0400
PCI_DEVICE_ID_P4080  macro  include/linux/pci_ids.h  2395  #define PCI_DEVICE_ID_P4080 0x0401
PCI_DEVICE_ID_P4040E  macro  include/linux/pci_ids.h  2396  #define PCI_DEVICE_ID_P4040E 0x0408
PCI_DEVICE_ID_P4040  macro  include/linux/pci_ids.h  2397  #define PCI_DEVICE_ID_P4040 0x0409
PCI_DEVICE_ID_P2040E  macro  include/linux/pci_ids.h  2398  #define PCI_DEVICE_ID_P2040E 0x0410
PCI_DEVICE_ID_P2040  macro  include/linux/pci_ids.h  2399  #define PCI_DEVICE_ID_P2040 0x0411
PCI_DEVICE_ID_P3041E  macro  include/linux/pci_ids.h  2400  #define PCI_DEVICE_ID_P3041E 0x041E
PCI_DEVICE_ID_P3041  macro  include/linux/pci_ids.h  2401  #define PCI_DEVICE_ID_P3041 0x041F
PCI_DEVICE_ID_P5020E  macro  include/linux/pci_ids.h  2402  #define PCI_DEVICE_ID_P5020E 0x0420
PCI_DEVICE_ID_P5020  macro  include/linux/pci_ids.h  2403  #define PCI_DEVICE_ID_P5020 0x0421
PCI_DEVICE_ID_P5010E  macro  include/linux/pci_ids.h  2404  #define PCI_DEVICE_ID_P5010E 0x0428
PCI_DEVICE_ID_P5010  macro  include/linux/pci_ids.h  2405  #define PCI_DEVICE_ID_P5010 0x0429
PCI_DEVICE_ID_MPC8641  macro  include/linux/pci_ids.h  2406  #define PCI_DEVICE_ID_MPC8641 0x7010
PCI_DEVICE_ID_MPC8641D  macro  include/linux/pci_ids.h  2407  #define PCI_DEVICE_ID_MPC8641D 0x7011
PCI_DEVICE_ID_MPC8610  macro  include/linux/pci_ids.h  2408  #define PCI_DEVICE_ID_MPC8610 0x7018
PCI_VENDOR_ID_PASEMI  macro  include/linux/pci_ids.h  2410  #define PCI_VENDOR_ID_PASEMI 0x1959
PCI_VENDOR_ID_ATTANSIC  macro  include/linux/pci_ids.h  2412  #define PCI_VENDOR_ID_ATTANSIC 0x1969
PCI_DEVICE_ID_ATTANSIC_L1  macro  include/linux/pci_ids.h  2413  #define PCI_DEVICE_ID_ATTANSIC_L1 0x1048
PCI_DEVICE_ID_ATTANSIC_L2  macro  include/linux/pci_ids.h  2414  #define PCI_DEVICE_ID_ATTANSIC_L2 0x2048
PCI_VENDOR_ID_JMICRON  macro  include/linux/pci_ids.h  2416  #define PCI_VENDOR_ID_JMICRON 0x197B
PCI_DEVICE_ID_JMICRON_JMB360  macro  include/linux/pci_ids.h  2417  #define PCI_DEVICE_ID_JMICRON_JMB360 0x2360
PCI_DEVICE_ID_JMICRON_JMB361  macro  include/linux/pci_ids.h  2418  #define PCI_DEVICE_ID_JMICRON_JMB361 0x2361
PCI_DEVICE_ID_JMICRON_JMB362  macro  include/linux/pci_ids.h  2419  #define PCI_DEVICE_ID_JMICRON_JMB362 0x2362
PCI_DEVICE_ID_JMICRON_JMB363  macro  include/linux/pci_ids.h  2420  #define PCI_DEVICE_ID_JMICRON_JMB363 0x2363
PCI_DEVICE_ID_JMICRON_JMB364  macro  include/linux/pci_ids.h  2421  #define PCI_DEVICE_ID_JMICRON_JMB364 0x2364
PCI_DEVICE_ID_JMICRON_JMB365  macro  include/linux/pci_ids.h  2422  #define PCI_DEVICE_ID_JMICRON_JMB365 0x2365
PCI_DEVICE_ID_JMICRON_JMB366  macro  include/linux/pci_ids.h  2423  #define PCI_DEVICE_ID_JMICRON_JMB366 0x2366
PCI_DEVICE_ID_JMICRON_JMB368  macro  include/linux/pci_ids.h  2424  #define PCI_DEVICE_ID_JMICRON_JMB368 0x2368
PCI_DEVICE_ID_JMICRON_JMB369  macro  include/linux/pci_ids.h  2425  #define PCI_DEVICE_ID_JMICRON_JMB369 0x2369
PCI_DEVICE_ID_JMICRON_JMB38X_SD  macro  include/linux/pci_ids.h  2426  #define PCI_DEVICE_ID_JMICRON_JMB38X_SD 0x2381
PCI_DEVICE_ID_JMICRON_JMB38X_MMC  macro  include/linux/pci_ids.h  2427  #define PCI_DEVICE_ID_JMICRON_JMB38X_MMC 0x2382
PCI_DEVICE_ID_JMICRON_JMB38X_MS  macro  include/linux/pci_ids.h  2428  #define PCI_DEVICE_ID_JMICRON_JMB38X_MS 0x2383
PCI_DEVICE_ID_JMICRON_JMB385_MS  macro  include/linux/pci_ids.h  2429  #define PCI_DEVICE_ID_JMICRON_JMB385_MS 0x2388
PCI_DEVICE_ID_JMICRON_JMB388_SD  macro  include/linux/pci_ids.h  2430  #define PCI_DEVICE_ID_JMICRON_JMB388_SD 0x2391
PCI_DEVICE_ID_JMICRON_JMB388_ESD  macro  include/linux/pci_ids.h  2431  #define PCI_DEVICE_ID_JMICRON_JMB388_ESD 0x2392
PCI_DEVICE_ID_JMICRON_JMB390_MS  macro  include/linux/pci_ids.h  2432  #define PCI_DEVICE_ID_JMICRON_JMB390_MS 0x2393
PCI_VENDOR_ID_KORENIX  macro  include/linux/pci_ids.h  2434  #define PCI_VENDOR_ID_KORENIX 0x1982
PCI_DEVICE_ID_KORENIX_JETCARDF0  macro  include/linux/pci_ids.h  2435  #define PCI_DEVICE_ID_KORENIX_JETCARDF0 0x1600
PCI_DEVICE_ID_KORENIX_JETCARDF1  macro  include/linux/pci_ids.h  2436  #define PCI_DEVICE_ID_KORENIX_JETCARDF1 0x16ff
PCI_DEVICE_ID_KORENIX_JETCARDF2  macro  include/linux/pci_ids.h  2437  #define PCI_DEVICE_ID_KORENIX_JETCARDF2 0x1700
PCI_DEVICE_ID_KORENIX_JETCARDF3  macro  include/linux/pci_ids.h  2438  #define PCI_DEVICE_ID_KORENIX_JETCARDF3 0x17ff
PCI_VENDOR_ID_QMI  macro  include/linux/pci_ids.h  2440  #define PCI_VENDOR_ID_QMI 0x1a32
PCI_VENDOR_ID_AZWAVE  macro  include/linux/pci_ids.h  2442  #define PCI_VENDOR_ID_AZWAVE 0x1a3b
PCI_VENDOR_ID_ASMEDIA  macro  include/linux/pci_ids.h  2444  #define PCI_VENDOR_ID_ASMEDIA 0x1b21
PCI_VENDOR_ID_TEKRAM  macro  include/linux/pci_ids.h  2446  #define PCI_VENDOR_ID_TEKRAM 0x1de1
PCI_DEVICE_ID_TEKRAM_DC290  macro  include/linux/pci_ids.h  2447  #define PCI_DEVICE_ID_TEKRAM_DC290 0xdc29
PCI_VENDOR_ID_TEHUTI  macro  include/linux/pci_ids.h  2449  #define PCI_VENDOR_ID_TEHUTI 0x1fc9
PCI_DEVICE_ID_TEHUTI_3009  macro  include/linux/pci_ids.h  2450  #define PCI_DEVICE_ID_TEHUTI_3009 0x3009
PCI_DEVICE_ID_TEHUTI_3010  macro  include/linux/pci_ids.h  2451  #define PCI_DEVICE_ID_TEHUTI_3010 0x3010
PCI_DEVICE_ID_TEHUTI_3014  macro  include/linux/pci_ids.h  2452  #define PCI_DEVICE_ID_TEHUTI_3014 0x3014
PCI_VENDOR_ID_HINT  macro  include/linux/pci_ids.h  2454  #define PCI_VENDOR_ID_HINT 0x3388
PCI_DEVICE_ID_HINT_VXPROII_IDE  macro  include/linux/pci_ids.h  2455  #define PCI_DEVICE_ID_HINT_VXPROII_IDE 0x8013
PCI_VENDOR_ID_3DLABS  macro  include/linux/pci_ids.h  2457  #define PCI_VENDOR_ID_3DLABS 0x3d3d
PCI_DEVICE_ID_3DLABS_PERMEDIA2  macro  include/linux/pci_ids.h  2458  #define PCI_DEVICE_ID_3DLABS_PERMEDIA2 0x0007
PCI_DEVICE_ID_3DLABS_PERMEDIA2V  macro  include/linux/pci_ids.h  2459  #define PCI_DEVICE_ID_3DLABS_PERMEDIA2V 0x0009
PCI_VENDOR_ID_NETXEN  macro  include/linux/pci_ids.h  2461  #define PCI_VENDOR_ID_NETXEN 0x4040
PCI_DEVICE_ID_NX2031_10GXSR  macro  include/linux/pci_ids.h  2462  #define PCI_DEVICE_ID_NX2031_10GXSR 0x0001
PCI_DEVICE_ID_NX2031_10GCX4  macro  include/linux/pci_ids.h  2463  #define PCI_DEVICE_ID_NX2031_10GCX4 0x0002
PCI_DEVICE_ID_NX2031_4GCU  macro  include/linux/pci_ids.h  2464  #define PCI_DEVICE_ID_NX2031_4GCU 0x0003
PCI_DEVICE_ID_NX2031_IMEZ  macro  include/linux/pci_ids.h  2465  #define PCI_DEVICE_ID_NX2031_IMEZ 0x0004
PCI_DEVICE_ID_NX2031_HMEZ  macro  include/linux/pci_ids.h  2466  #define PCI_DEVICE_ID_NX2031_HMEZ 0x0005
PCI_DEVICE_ID_NX2031_XG_MGMT  macro  include/linux/pci_ids.h  2467  #define PCI_DEVICE_ID_NX2031_XG_MGMT 0x0024
PCI_DEVICE_ID_NX2031_XG_MGMT2  macro  include/linux/pci_ids.h  2468  #define PCI_DEVICE_ID_NX2031_XG_MGMT2 0x0025
PCI_DEVICE_ID_NX3031  macro  include/linux/pci_ids.h  2469  #define PCI_DEVICE_ID_NX3031 0x0100
PCI_VENDOR_ID_AKS  macro  include/linux/pci_ids.h  2471  #define PCI_VENDOR_ID_AKS 0x416c
PCI_DEVICE_ID_AKS_ALADDINCARD  macro  include/linux/pci_ids.h  2472  #define PCI_DEVICE_ID_AKS_ALADDINCARD 0x0100
PCI_VENDOR_ID_ACCESSIO  macro  include/linux/pci_ids.h  2474  #define PCI_VENDOR_ID_ACCESSIO 0x494f
PCI_DEVICE_ID_ACCESSIO_WDG_CSM  macro  include/linux/pci_ids.h  2475  #define PCI_DEVICE_ID_ACCESSIO_WDG_CSM 0x22c0
PCI_VENDOR_ID_S3  macro  include/linux/pci_ids.h  2477  #define PCI_VENDOR_ID_S3 0x5333
PCI_DEVICE_ID_S3_TRIO  macro  include/linux/pci_ids.h  2478  #define PCI_DEVICE_ID_S3_TRIO 0x8811
PCI_DEVICE_ID_S3_868  macro  include/linux/pci_ids.h  2479  #define PCI_DEVICE_ID_S3_868 0x8880
PCI_DEVICE_ID_S3_968  macro  include/linux/pci_ids.h  2480  #define PCI_DEVICE_ID_S3_968 0x88f0
PCI_DEVICE_ID_S3_SAVAGE4  macro  include/linux/pci_ids.h  2481  #define PCI_DEVICE_ID_S3_SAVAGE4 0x8a25
PCI_DEVICE_ID_S3_PROSAVAGE8  macro  include/linux/pci_ids.h  2482  #define PCI_DEVICE_ID_S3_PROSAVAGE8 0x8d04
PCI_DEVICE_ID_S3_SONICVIBES  macro  include/linux/pci_ids.h  2483  #define PCI_DEVICE_ID_S3_SONICVIBES 0xca00
PCI_VENDOR_ID_DUNORD  macro  include/linux/pci_ids.h  2485  #define PCI_VENDOR_ID_DUNORD 0x5544
PCI_DEVICE_ID_DUNORD_I3000  macro  include/linux/pci_ids.h  2486  #define PCI_DEVICE_ID_DUNORD_I3000 0x0001
PCI_VENDOR_ID_DCI  macro  include/linux/pci_ids.h  2488  #define PCI_VENDOR_ID_DCI 0x6666
PCI_DEVICE_ID_DCI_PCCOM4  macro  include/linux/pci_ids.h  2489  #define PCI_DEVICE_ID_DCI_PCCOM4 0x0001
PCI_DEVICE_ID_DCI_PCCOM8  macro  include/linux/pci_ids.h  2490  #define PCI_DEVICE_ID_DCI_PCCOM8 0x0002
PCI_DEVICE_ID_DCI_PCCOM2  macro  include/linux/pci_ids.h  2491  #define PCI_DEVICE_ID_DCI_PCCOM2 0x0004
PCI_VENDOR_ID_INTEL  macro  include/linux/pci_ids.h  2493  #define PCI_VENDOR_ID_INTEL 0x8086
PCI_DEVICE_ID_INTEL_EESSC  macro  include/linux/pci_ids.h  2494  #define PCI_DEVICE_ID_INTEL_EESSC 0x0008
PCI_DEVICE_ID_INTEL_PXHD_0  macro  include/linux/pci_ids.h  2495  #define PCI_DEVICE_ID_INTEL_PXHD_0 0x0320
PCI_DEVICE_ID_INTEL_PXHD_1  macro  include/linux/pci_ids.h  2496  #define PCI_DEVICE_ID_INTEL_PXHD_1 0x0321
PCI_DEVICE_ID_INTEL_PXH_0  macro  include/linux/pci_ids.h  2497  #define PCI_DEVICE_ID_INTEL_PXH_0 0x0329
PCI_DEVICE_ID_INTEL_PXH_1  macro  include/linux/pci_ids.h  2498  #define PCI_DEVICE_ID_INTEL_PXH_1 0x032A
PCI_DEVICE_ID_INTEL_PXHV  macro  include/linux/pci_ids.h  2499  #define PCI_DEVICE_ID_INTEL_PXHV 0x032C
PCI_DEVICE_ID_INTEL_80332_0  macro  include/linux/pci_ids.h  2500  #define PCI_DEVICE_ID_INTEL_80332_0 0x0330
PCI_DEVICE_ID_INTEL_80332_1  macro  include/linux/pci_ids.h  2501  #define PCI_DEVICE_ID_INTEL_80332_1 0x0332
PCI_DEVICE_ID_INTEL_80333_0  macro  include/linux/pci_ids.h  2502  #define PCI_DEVICE_ID_INTEL_80333_0 0x0370
PCI_DEVICE_ID_INTEL_80333_1  macro  include/linux/pci_ids.h  2503  #define PCI_DEVICE_ID_INTEL_80333_1 0x0372
PCI_DEVICE_ID_INTEL_82375  macro  include/linux/pci_ids.h  2504  #define PCI_DEVICE_ID_INTEL_82375 0x0482
PCI_DEVICE_ID_INTEL_82424  macro  include/linux/pci_ids.h  2505  #define PCI_DEVICE_ID_INTEL_82424 0x0483
PCI_DEVICE_ID_INTEL_82378  macro  include/linux/pci_ids.h  2506  #define PCI_DEVICE_ID_INTEL_82378 0x0484
PCI_DEVICE_ID_INTEL_MRST_SD0  macro  include/linux/pci_ids.h  2507  #define PCI_DEVICE_ID_INTEL_MRST_SD0 0x0807
PCI_DEVICE_ID_INTEL_MRST_SD1  macro  include/linux/pci_ids.h  2508  #define PCI_DEVICE_ID_INTEL_MRST_SD1 0x0808
PCI_DEVICE_ID_INTEL_MFD_SD  macro  include/linux/pci_ids.h  2509  #define PCI_DEVICE_ID_INTEL_MFD_SD 0x0820
PCI_DEVICE_ID_INTEL_MFD_SDIO1  macro  include/linux/pci_ids.h  2510  #define PCI_DEVICE_ID_INTEL_MFD_SDIO1 0x0821
PCI_DEVICE_ID_INTEL_MFD_SDIO2  macro  include/linux/pci_ids.h  2511  #define PCI_DEVICE_ID_INTEL_MFD_SDIO2 0x0822
PCI_DEVICE_ID_INTEL_MFD_EMMC0  macro  include/linux/pci_ids.h  2512  #define PCI_DEVICE_ID_INTEL_MFD_EMMC0 0x0823
PCI_DEVICE_ID_INTEL_MFD_EMMC1  macro  include/linux/pci_ids.h  2513  #define PCI_DEVICE_ID_INTEL_MFD_EMMC1 0x0824
PCI_DEVICE_ID_INTEL_MRST_SD2  macro  include/linux/pci_ids.h  2514  #define PCI_DEVICE_ID_INTEL_MRST_SD2 0x084F
PCI_DEVICE_ID_INTEL_I960  macro  include/linux/pci_ids.h  2515  #define PCI_DEVICE_ID_INTEL_I960 0x0960
PCI_DEVICE_ID_INTEL_I960RM  macro  include/linux/pci_ids.h  2516  #define PCI_DEVICE_ID_INTEL_I960RM 0x0962
PCI_DEVICE_ID_INTEL_CENTERTON_ILB  macro  include/linux/pci_ids.h  2517  #define PCI_DEVICE_ID_INTEL_CENTERTON_ILB 0x0c60
PCI_DEVICE_ID_INTEL_8257X_SOL  macro  include/linux/pci_ids.h  2518  #define PCI_DEVICE_ID_INTEL_8257X_SOL 0x1062
PCI_DEVICE_ID_INTEL_82573E_SOL  macro  include/linux/pci_ids.h  2519  #define PCI_DEVICE_ID_INTEL_82573E_SOL 0x1085
PCI_DEVICE_ID_INTEL_82573L_SOL  macro  include/linux/pci_ids.h  2520  #define PCI_DEVICE_ID_INTEL_82573L_SOL 0x108F
PCI_DEVICE_ID_INTEL_82815_MC  macro  include/linux/pci_ids.h  2521  #define PCI_DEVICE_ID_INTEL_82815_MC 0x1130
PCI_DEVICE_ID_INTEL_82815_CGC  macro  include/linux/pci_ids.h  2522  #define PCI_DEVICE_ID_INTEL_82815_CGC 0x1132
PCI_DEVICE_ID_INTEL_82092AA_0  macro  include/linux/pci_ids.h  2523  #define PCI_DEVICE_ID_INTEL_82092AA_0 0x1221
PCI_DEVICE_ID_INTEL_7505_0  macro  include/linux/pci_ids.h  2524  #define PCI_DEVICE_ID_INTEL_7505_0 0x2550
PCI_DEVICE_ID_INTEL_7205_0  macro  include/linux/pci_ids.h  2525  #define PCI_DEVICE_ID_INTEL_7205_0 0x255d
PCI_DEVICE_ID_INTEL_82437  macro  include/linux/pci_ids.h  2526  #define PCI_DEVICE_ID_INTEL_82437 0x122d
PCI_DEVICE_ID_INTEL_82371FB_0  macro  include/linux/pci_ids.h  2527  #define PCI_DEVICE_ID_INTEL_82371FB_0 0x122e
PCI_DEVICE_ID_INTEL_82371FB_1  macro  include/linux/pci_ids.h  2528  #define PCI_DEVICE_ID_INTEL_82371FB_1 0x1230
PCI_DEVICE_ID_INTEL_82371MX  macro  include/linux/pci_ids.h  2529  #define PCI_DEVICE_ID_INTEL_82371MX 0x1234
PCI_DEVICE_ID_INTEL_82441  macro  include/linux/pci_ids.h  2530  #define PCI_DEVICE_ID_INTEL_82441 0x1237
PCI_DEVICE_ID_INTEL_82380FB  macro  include/linux/pci_ids.h  2531  #define PCI_DEVICE_ID_INTEL_82380FB 0x124b
PCI_DEVICE_ID_INTEL_82439  macro  include/linux/pci_ids.h  2532  #define PCI_DEVICE_ID_INTEL_82439 0x1250
PCI_DEVICE_ID_INTEL_80960_RP  macro  include/linux/pci_ids.h  2533  #define PCI_DEVICE_ID_INTEL_80960_RP 0x1960
PCI_DEVICE_ID_INTEL_82840_HB  macro  include/linux/pci_ids.h  2534  #define PCI_DEVICE_ID_INTEL_82840_HB 0x1a21
PCI_DEVICE_ID_INTEL_82845_HB  macro  include/linux/pci_ids.h  2535  #define PCI_DEVICE_ID_INTEL_82845_HB 0x1a30
PCI_DEVICE_ID_INTEL_IOAT  macro  include/linux/pci_ids.h  2536  #define PCI_DEVICE_ID_INTEL_IOAT 0x1a38
PCI_DEVICE_ID_INTEL_COUGARPOINT_LPC_MIN  macro  include/linux/pci_ids.h  2537  #define PCI_DEVICE_ID_INTEL_COUGARPOINT_LPC_MIN 0x1c41
PCI_DEVICE_ID_INTEL_COUGARPOINT_LPC_MAX  macro  include/linux/pci_ids.h  2538  #define PCI_DEVICE_ID_INTEL_COUGARPOINT_LPC_MAX 0x1c5f
PCI_DEVICE_ID_INTEL_PATSBURG_LPC_0  macro  include/linux/pci_ids.h  2539  #define PCI_DEVICE_ID_INTEL_PATSBURG_LPC_0 0x1d40
PCI_DEVICE_ID_INTEL_PATSBURG_LPC_1  macro  include/linux/pci_ids.h  2540  #define PCI_DEVICE_ID_INTEL_PATSBURG_LPC_1 0x1d41
PCI_DEVICE_ID_INTEL_PANTHERPOINT_XHCI  macro  include/linux/pci_ids.h  2541  #define PCI_DEVICE_ID_INTEL_PANTHERPOINT_XHCI 0x1e31
PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MIN  macro  include/linux/pci_ids.h  2542  #define PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MIN 0x1e40
PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MAX  macro  include/linux/pci_ids.h  2543  #define PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MAX 0x1e5f
PCI_DEVICE_ID_INTEL_DH89XXCC_LPC_MIN  macro  include/linux/pci_ids.h  2544  #define PCI_DEVICE_ID_INTEL_DH89XXCC_LPC_MIN 0x2310
PCI_DEVICE_ID_INTEL_DH89XXCC_LPC_MAX  macro  include/linux/pci_ids.h  2545  #define PCI_DEVICE_ID_INTEL_DH89XXCC_LPC_MAX 0x231f
PCI_DEVICE_ID_INTEL_82801AA_0  macro  include/linux/pci_ids.h  2546  #define PCI_DEVICE_ID_INTEL_82801AA_0 0x2410
PCI_DEVICE_ID_INTEL_82801AA_1  macro  include/linux/pci_ids.h  2547  #define PCI_DEVICE_ID_INTEL_82801AA_1 0x2411
PCI_DEVICE_ID_INTEL_82801AA_3  macro  include/linux/pci_ids.h  2548  #define PCI_DEVICE_ID_INTEL_82801AA_3 0x2413
PCI_DEVICE_ID_INTEL_82801AA_5  macro  include/linux/pci_ids.h  2549  #define PCI_DEVICE_ID_INTEL_82801AA_5 0x2415
PCI_DEVICE_ID_INTEL_82801AA_6  macro  include/linux/pci_ids.h  2550  #define PCI_DEVICE_ID_INTEL_82801AA_6 0x2416
PCI_DEVICE_ID_INTEL_82801AA_8  macro  include/linux/pci_ids.h  2551  #define PCI_DEVICE_ID_INTEL_82801AA_8 0x2418
PCI_DEVICE_ID_INTEL_82801AB_0  macro  include/linux/pci_ids.h  2552  #define PCI_DEVICE_ID_INTEL_82801AB_0 0x2420
PCI_DEVICE_ID_INTEL_82801AB_1  macro  include/linux/pci_ids.h  2553  #define PCI_DEVICE_ID_INTEL_82801AB_1 0x2421
PCI_DEVICE_ID_INTEL_82801AB_3  macro  include/linux/pci_ids.h  2554  #define PCI_DEVICE_ID_INTEL_82801AB_3 0x2423
PCI_DEVICE_ID_INTEL_82801AB_5  macro  include/linux/pci_ids.h  2555  #define PCI_DEVICE_ID_INTEL_82801AB_5 0x2425
PCI_DEVICE_ID_INTEL_82801AB_6  macro  include/linux/pci_ids.h  2556  #define PCI_DEVICE_ID_INTEL_82801AB_6 0x2426
PCI_DEVICE_ID_INTEL_82801AB_8  macro  include/linux/pci_ids.h  2557  #define PCI_DEVICE_ID_INTEL_82801AB_8 0x2428
PCI_DEVICE_ID_INTEL_82801BA_0  macro  include/linux/pci_ids.h  2558  #define PCI_DEVICE_ID_INTEL_82801BA_0 0x2440
PCI_DEVICE_ID_INTEL_82801BA_2  macro  include/linux/pci_ids.h  2559  #define PCI_DEVICE_ID_INTEL_82801BA_2 0x2443
PCI_DEVICE_ID_INTEL_82801BA_4  macro  include/linux/pci_ids.h  2560  #define PCI_DEVICE_ID_INTEL_82801BA_4 0x2445
PCI_DEVICE_ID_INTEL_82801BA_6  macro  include/linux/pci_ids.h  2561  #define PCI_DEVICE_ID_INTEL_82801BA_6 0x2448
PCI_DEVICE_ID_INTEL_82801BA_8  macro  include/linux/pci_ids.h  2562  #define PCI_DEVICE_ID_INTEL_82801BA_8 0x244a
PCI_DEVICE_ID_INTEL_82801BA_9  macro  include/linux/pci_ids.h  2563  #define PCI_DEVICE_ID_INTEL_82801BA_9 0x244b
PCI_DEVICE_ID_INTEL_82801BA_10  macro  include/linux/pci_ids.h  2564  #define PCI_DEVICE_ID_INTEL_82801BA_10 0x244c
PCI_DEVICE_ID_INTEL_82801BA_11  macro  include/linux/pci_ids.h  2565  #define PCI_DEVICE_ID_INTEL_82801BA_11 0x244e
PCI_DEVICE_ID_INTEL_82801E_0  macro  include/linux/pci_ids.h  2566  #define PCI_DEVICE_ID_INTEL_82801E_0 0x2450
PCI_DEVICE_ID_INTEL_82801E_11  macro  include/linux/pci_ids.h  2567  #define PCI_DEVICE_ID_INTEL_82801E_11 0x245b
PCI_DEVICE_ID_INTEL_82801CA_0  macro  include/linux/pci_ids.h  2568  #define PCI_DEVICE_ID_INTEL_82801CA_0 0x2480
PCI_DEVICE_ID_INTEL_82801CA_3  macro  include/linux/pci_ids.h  2569  #define PCI_DEVICE_ID_INTEL_82801CA_3 0x2483
PCI_DEVICE_ID_INTEL_82801CA_5  macro  include/linux/pci_ids.h  2570  #define PCI_DEVICE_ID_INTEL_82801CA_5 0x2485
PCI_DEVICE_ID_INTEL_82801CA_6  macro  include/linux/pci_ids.h  2571  #define PCI_DEVICE_ID_INTEL_82801CA_6 0x2486
PCI_DEVICE_ID_INTEL_82801CA_10  macro  include/linux/pci_ids.h  2572  #define PCI_DEVICE_ID_INTEL_82801CA_10 0x248a
PCI_DEVICE_ID_INTEL_82801CA_11  macro  include/linux/pci_ids.h  2573  #define PCI_DEVICE_ID_INTEL_82801CA_11 0x248b
PCI_DEVICE_ID_INTEL_82801CA_12  macro  include/linux/pci_ids.h  2574  #define PCI_DEVICE_ID_INTEL_82801CA_12 0x248c
PCI_DEVICE_ID_INTEL_82801DB_0  macro  include/linux/pci_ids.h  2575  #define PCI_DEVICE_ID_INTEL_82801DB_0 0x24c0
PCI_DEVICE_ID_INTEL_82801DB_1  macro  include/linux/pci_ids.h  2576  #define PCI_DEVICE_ID_INTEL_82801DB_1 0x24c1
PCI_DEVICE_ID_INTEL_82801DB_2  macro  include/linux/pci_ids.h  2577  #define PCI_DEVICE_ID_INTEL_82801DB_2 0x24c2
PCI_DEVICE_ID_INTEL_82801DB_3  macro  include/linux/pci_ids.h  2578  #define PCI_DEVICE_ID_INTEL_82801DB_3 0x24c3
PCI_DEVICE_ID_INTEL_82801DB_5  macro  include/linux/pci_ids.h  2579  #define PCI_DEVICE_ID_INTEL_82801DB_5 0x24c5
PCI_DEVICE_ID_INTEL_82801DB_6  macro  include/linux/pci_ids.h  2580  #define PCI_DEVICE_ID_INTEL_82801DB_6 0x24c6
PCI_DEVICE_ID_INTEL_82801DB_9  macro  include/linux/pci_ids.h  2581  #define PCI_DEVICE_ID_INTEL_82801DB_9 0x24c9
PCI_DEVICE_ID_INTEL_82801DB_10  macro  include/linux/pci_ids.h  2582  #define PCI_DEVICE_ID_INTEL_82801DB_10 0x24ca
PCI_DEVICE_ID_INTEL_82801DB_11  macro  include/linux/pci_ids.h  2583  #define PCI_DEVICE_ID_INTEL_82801DB_11 0x24cb
PCI_DEVICE_ID_INTEL_82801DB_12  macro  include/linux/pci_ids.h  2584  #define PCI_DEVICE_ID_INTEL_82801DB_12 0x24cc
PCI_DEVICE_ID_INTEL_82801EB_0  macro  include/linux/pci_ids.h  2585  #define PCI_DEVICE_ID_INTEL_82801EB_0 0x24d0
PCI_DEVICE_ID_INTEL_82801EB_1  macro  include/linux/pci_ids.h  2586  #define PCI_DEVICE_ID_INTEL_82801EB_1 0x24d1
PCI_DEVICE_ID_INTEL_82801EB_3  macro  include/linux/pci_ids.h  2587  #define PCI_DEVICE_ID_INTEL_82801EB_3 0x24d3
PCI_DEVICE_ID_INTEL_82801EB_5  macro  include/linux/pci_ids.h  2588  #define PCI_DEVICE_ID_INTEL_82801EB_5 0x24d5
PCI_DEVICE_ID_INTEL_82801EB_6  macro  include/linux/pci_ids.h  2589  #define PCI_DEVICE_ID_INTEL_82801EB_6 0x24d6
PCI_DEVICE_ID_INTEL_82801EB_11  macro  include/linux/pci_ids.h  2590  #define PCI_DEVICE_ID_INTEL_82801EB_11 0x24db
PCI_DEVICE_ID_INTEL_82801EB_12  macro  include/linux/pci_ids.h  2591  #define PCI_DEVICE_ID_INTEL_82801EB_12 0x24dc
PCI_DEVICE_ID_INTEL_82801EB_13  macro  include/linux/pci_ids.h  2592  #define PCI_DEVICE_ID_INTEL_82801EB_13 0x24dd
PCI_DEVICE_ID_INTEL_ESB_1  macro  include/linux/pci_ids.h  2593  #define PCI_DEVICE_ID_INTEL_ESB_1 0x25a1
PCI_DEVICE_ID_INTEL_ESB_2  macro  include/linux/pci_ids.h  2594  #define PCI_DEVICE_ID_INTEL_ESB_2 0x25a2
PCI_DEVICE_ID_INTEL_ESB_4  macro  include/linux/pci_ids.h  2595  #define PCI_DEVICE_ID_INTEL_ESB_4 0x25a4
PCI_DEVICE_ID_INTEL_ESB_5  macro  include/linux/pci_ids.h  2596  #define PCI_DEVICE_ID_INTEL_ESB_5 0x25a6
PCI_DEVICE_ID_INTEL_ESB_9  macro  include/linux/pci_ids.h  2597  #define PCI_DEVICE_ID_INTEL_ESB_9 0x25ab
PCI_DEVICE_ID_INTEL_ESB_10  macro  include/linux/pci_ids.h  2598  #define PCI_DEVICE_ID_INTEL_ESB_10 0x25ac
PCI_DEVICE_ID_INTEL_82820_HB  macro  include/linux/pci_ids.h  2599  #define PCI_DEVICE_ID_INTEL_82820_HB 0x2500
PCI_DEVICE_ID_INTEL_82820_UP_HB  macro  include/linux/pci_ids.h  2600  #define PCI_DEVICE_ID_INTEL_82820_UP_HB 0x2501
PCI_DEVICE_ID_INTEL_82850_HB  macro  include/linux/pci_ids.h  2601  #define PCI_DEVICE_ID_INTEL_82850_HB 0x2530
PCI_DEVICE_ID_INTEL_82860_HB  macro  include/linux/pci_ids.h  2602  #define PCI_DEVICE_ID_INTEL_82860_HB 0x2531
PCI_DEVICE_ID_INTEL_E7501_MCH  macro  include/linux/pci_ids.h  2603  #define PCI_DEVICE_ID_INTEL_E7501_MCH 0x254c
PCI_DEVICE_ID_INTEL_82845G_HB  macro  include/linux/pci_ids.h  2604  #define PCI_DEVICE_ID_INTEL_82845G_HB 0x2560
PCI_DEVICE_ID_INTEL_82845G_IG  macro  include/linux/pci_ids.h  2605  #define PCI_DEVICE_ID_INTEL_82845G_IG 0x2562
PCI_DEVICE_ID_INTEL_82865_HB  macro  include/linux/pci_ids.h  2606  #define PCI_DEVICE_ID_INTEL_82865_HB 0x2570
PCI_DEVICE_ID_INTEL_82865_IG  macro  include/linux/pci_ids.h  2607  #define PCI_DEVICE_ID_INTEL_82865_IG 0x2572
PCI_DEVICE_ID_INTEL_82875_HB  macro  include/linux/pci_ids.h  2608  #define PCI_DEVICE_ID_INTEL_82875_HB 0x2578
PCI_DEVICE_ID_INTEL_82915G_HB  macro  include/linux/pci_ids.h  2609  #define PCI_DEVICE_ID_INTEL_82915G_HB 0x2580
PCI_DEVICE_ID_INTEL_82915G_IG  macro  include/linux/pci_ids.h  2610  #define PCI_DEVICE_ID_INTEL_82915G_IG 0x2582
PCI_DEVICE_ID_INTEL_82915GM_HB  macro  include/linux/pci_ids.h  2611  #define PCI_DEVICE_ID_INTEL_82915GM_HB 0x2590
PCI_DEVICE_ID_INTEL_82915GM_IG  macro  include/linux/pci_ids.h  2612  #define PCI_DEVICE_ID_INTEL_82915GM_IG 0x2592
PCI_DEVICE_ID_INTEL_5000_ERR  macro  include/linux/pci_ids.h  2613  #define PCI_DEVICE_ID_INTEL_5000_ERR 0x25F0
PCI_DEVICE_ID_INTEL_5000_FBD0  macro  include/linux/pci_ids.h  2614  #define PCI_DEVICE_ID_INTEL_5000_FBD0 0x25F5
PCI_DEVICE_ID_INTEL_5000_FBD1  macro  include/linux/pci_ids.h  2615  #define PCI_DEVICE_ID_INTEL_5000_FBD1 0x25F6
PCI_DEVICE_ID_INTEL_82945G_HB  macro  include/linux/pci_ids.h  2616  #define PCI_DEVICE_ID_INTEL_82945G_HB 0x2770
PCI_DEVICE_ID_INTEL_82945G_IG  macro  include/linux/pci_ids.h  2617  #define PCI_DEVICE_ID_INTEL_82945G_IG 0x2772
PCI_DEVICE_ID_INTEL_3000_HB  macro  include/linux/pci_ids.h  2618  #define PCI_DEVICE_ID_INTEL_3000_HB 0x2778
PCI_DEVICE_ID_INTEL_82945GM_HB  macro  include/linux/pci_ids.h  2619  #define PCI_DEVICE_ID_INTEL_82945GM_HB 0x27A0
PCI_DEVICE_ID_INTEL_82945GM_IG  macro  include/linux/pci_ids.h  2620  #define PCI_DEVICE_ID_INTEL_82945GM_IG 0x27A2
PCI_DEVICE_ID_INTEL_ICH6_0  macro  include/linux/pci_ids.h  2621  #define PCI_DEVICE_ID_INTEL_ICH6_0 0x2640
PCI_DEVICE_ID_INTEL_ICH6_1  macro  include/linux/pci_ids.h  2622  #define PCI_DEVICE_ID_INTEL_ICH6_1 0x2641
PCI_DEVICE_ID_INTEL_ICH6_2  macro  include/linux/pci_ids.h  2623  #define PCI_DEVICE_ID_INTEL_ICH6_2 0x2642
PCI_DEVICE_ID_INTEL_ICH6_16  macro  include/linux/pci_ids.h  2624  #define PCI_DEVICE_ID_INTEL_ICH6_16 0x266a
PCI_DEVICE_ID_INTEL_ICH6_17  macro  include/linux/pci_ids.h  2625  #define PCI_DEVICE_ID_INTEL_ICH6_17 0x266d
PCI_DEVICE_ID_INTEL_ICH6_18  macro  include/linux/pci_ids.h  2626  #define PCI_DEVICE_ID_INTEL_ICH6_18 0x266e
PCI_DEVICE_ID_INTEL_ICH6_19  macro  include/linux/pci_ids.h  2627  #define PCI_DEVICE_ID_INTEL_ICH6_19 0x266f
PCI_DEVICE_ID_INTEL_ESB2_0  macro  include/linux/pci_ids.h  2628  #define PCI_DEVICE_ID_INTEL_ESB2_0 0x2670
PCI_DEVICE_ID_INTEL_ESB2_14  macro  include/linux/pci_ids.h  2629  #define PCI_DEVICE_ID_INTEL_ESB2_14 0x2698
PCI_DEVICE_ID_INTEL_ESB2_17  macro  include/linux/pci_ids.h  2630  #define PCI_DEVICE_ID_INTEL_ESB2_17 0x269b
PCI_DEVICE_ID_INTEL_ESB2_18  macro  include/linux/pci_ids.h  2631  #define PCI_DEVICE_ID_INTEL_ESB2_18 0x269e
PCI_DEVICE_ID_INTEL_ICH7_0  macro  include/linux/pci_ids.h  2632  #define PCI_DEVICE_ID_INTEL_ICH7_0 0x27b8
PCI_DEVICE_ID_INTEL_ICH7_1  macro  include/linux/pci_ids.h  2633  #define PCI_DEVICE_ID_INTEL_ICH7_1 0x27b9
PCI_DEVICE_ID_INTEL_ICH7_30  macro  include/linux/pci_ids.h  2634  #define PCI_DEVICE_ID_INTEL_ICH7_30 0x27b0
PCI_DEVICE_ID_INTEL_TGP_LPC  macro  include/linux/pci_ids.h  2635  #define PCI_DEVICE_ID_INTEL_TGP_LPC 0x27bc
PCI_DEVICE_ID_INTEL_ICH7_31  macro  include/linux/pci_ids.h  2636  #define PCI_DEVICE_ID_INTEL_ICH7_31 0x27bd
PCI_DEVICE_ID_INTEL_ICH7_17  macro  include/linux/pci_ids.h  2637  #define PCI_DEVICE_ID_INTEL_ICH7_17 0x27da
PCI_DEVICE_ID_INTEL_ICH7_19  macro  include/linux/pci_ids.h  2638  #define PCI_DEVICE_ID_INTEL_ICH7_19 0x27dd
PCI_DEVICE_ID_INTEL_ICH7_20  macro  include/linux/pci_ids.h  2639  #define PCI_DEVICE_ID_INTEL_ICH7_20 0x27de
PCI_DEVICE_ID_INTEL_ICH7_21  macro  include/linux/pci_ids.h  2640  #define PCI_DEVICE_ID_INTEL_ICH7_21 0x27df
PCI_DEVICE_ID_INTEL_ICH8_0  macro  include/linux/pci_ids.h  2641  #define PCI_DEVICE_ID_INTEL_ICH8_0 0x2810
PCI_DEVICE_ID_INTEL_ICH8_1  macro  include/linux/pci_ids.h  2642  #define PCI_DEVICE_ID_INTEL_ICH8_1 0x2811
PCI_DEVICE_ID_INTEL_ICH8_2  macro  include/linux/pci_ids.h  2643  #define PCI_DEVICE_ID_INTEL_ICH8_2 0x2812
PCI_DEVICE_ID_INTEL_ICH8_3  macro  include/linux/pci_ids.h  2644  #define PCI_DEVICE_ID_INTEL_ICH8_3 0x2814
PCI_DEVICE_ID_INTEL_ICH8_4  macro  include/linux/pci_ids.h  2645  #define PCI_DEVICE_ID_INTEL_ICH8_4 0x2815
PCI_DEVICE_ID_INTEL_ICH8_5  macro  include/linux/pci_ids.h  2646  #define PCI_DEVICE_ID_INTEL_ICH8_5 0x283e
PCI_DEVICE_ID_INTEL_ICH8_6  macro  include/linux/pci_ids.h  2647  #define PCI_DEVICE_ID_INTEL_ICH8_6 0x2850
PCI_DEVICE_ID_INTEL_ICH9_0  macro  include/linux/pci_ids.h  2648  #define PCI_DEVICE_ID_INTEL_ICH9_0 0x2910
PCI_DEVICE_ID_INTEL_ICH9_1  macro  include/linux/pci_ids.h  2649  #define PCI_DEVICE_ID_INTEL_ICH9_1 0x2917
PCI_DEVICE_ID_INTEL_ICH9_2  macro  include/linux/pci_ids.h  2650  #define PCI_DEVICE_ID_INTEL_ICH9_2 0x2912
PCI_DEVICE_ID_INTEL_ICH9_3  macro  include/linux/pci_ids.h  2651  #define PCI_DEVICE_ID_INTEL_ICH9_3 0x2913
PCI_DEVICE_ID_INTEL_ICH9_4  macro  include/linux/pci_ids.h  2652  #define PCI_DEVICE_ID_INTEL_ICH9_4 0x2914
PCI_DEVICE_ID_INTEL_ICH9_5  macro  include/linux/pci_ids.h  2653  #define PCI_DEVICE_ID_INTEL_ICH9_5 0x2919
PCI_DEVICE_ID_INTEL_ICH9_6  macro  include/linux/pci_ids.h  2654  #define PCI_DEVICE_ID_INTEL_ICH9_6 0x2930
PCI_DEVICE_ID_INTEL_ICH9_7  macro  include/linux/pci_ids.h  2655  #define PCI_DEVICE_ID_INTEL_ICH9_7 0x2916
PCI_DEVICE_ID_INTEL_ICH9_8  macro  include/linux/pci_ids.h  2656  #define PCI_DEVICE_ID_INTEL_ICH9_8 0x2918
PCI_DEVICE_ID_INTEL_I7_MCR  macro  include/linux/pci_ids.h  2657  #define PCI_DEVICE_ID_INTEL_I7_MCR 0x2c18
PCI_DEVICE_ID_INTEL_I7_MC_TAD  macro  include/linux/pci_ids.h  2658  #define PCI_DEVICE_ID_INTEL_I7_MC_TAD 0x2c19
PCI_DEVICE_ID_INTEL_I7_MC_RAS  macro  include/linux/pci_ids.h  2659  #define PCI_DEVICE_ID_INTEL_I7_MC_RAS 0x2c1a
PCI_DEVICE_ID_INTEL_I7_MC_TEST  macro  include/linux/pci_ids.h  2660  #define PCI_DEVICE_ID_INTEL_I7_MC_TEST 0x2c1c
PCI_DEVICE_ID_INTEL_I7_MC_CH0_CTRL  macro  include/linux/pci_ids.h  2661  #define PCI_DEVICE_ID_INTEL_I7_MC_CH0_CTRL 0x2c20
PCI_DEVICE_ID_INTEL_I7_MC_CH0_ADDR  macro  include/linux/pci_ids.h  2662  #define PCI_DEVICE_ID_INTEL_I7_MC_CH0_ADDR 0x2c21
PCI_DEVICE_ID_INTEL_I7_MC_CH0_RANK  macro  include/linux/pci_ids.h  2663  #define PCI_DEVICE_ID_INTEL_I7_MC_CH0_RANK 0x2c22
PCI_DEVICE_ID_INTEL_I7_MC_CH0_TC  macro  include/linux/pci_ids.h  2664  #define PCI_DEVICE_ID_INTEL_I7_MC_CH0_TC 0x2c23
PCI_DEVICE_ID_INTEL_I7_MC_CH1_CTRL  macro  include/linux/pci_ids.h  2665  #define PCI_DEVICE_ID_INTEL_I7_MC_CH1_CTRL 0x2c28
PCI_DEVICE_ID_INTEL_I7_MC_CH1_ADDR  macro  include/linux/pci_ids.h  2666  #define PCI_DEVICE_ID_INTEL_I7_MC_CH1_ADDR 0x2c29
PCI_DEVICE_ID_INTEL_I7_MC_CH1_RANK  macro  include/linux/pci_ids.h  2667  #define PCI_DEVICE_ID_INTEL_I7_MC_CH1_RANK 0x2c2a
PCI_DEVICE_ID_INTEL_I7_MC_CH1_TC  macro  include/linux/pci_ids.h  2668  #define PCI_DEVICE_ID_INTEL_I7_MC_CH1_TC 0x2c2b
PCI_DEVICE_ID_INTEL_I7_MC_CH2_CTRL  macro  include/linux/pci_ids.h  2669  #define PCI_DEVICE_ID_INTEL_I7_MC_CH2_CTRL 0x2c30
PCI_DEVICE_ID_INTEL_I7_MC_CH2_ADDR  macro  include/linux/pci_ids.h  2670  #define PCI_DEVICE_ID_INTEL_I7_MC_CH2_ADDR 0x2c31
PCI_DEVICE_ID_INTEL_I7_MC_CH2_RANK  macro  include/linux/pci_ids.h  2671  #define PCI_DEVICE_ID_INTEL_I7_MC_CH2_RANK 0x2c32
PCI_DEVICE_ID_INTEL_I7_MC_CH2_TC  macro  include/linux/pci_ids.h  2672  #define PCI_DEVICE_ID_INTEL_I7_MC_CH2_TC 0x2c33
PCI_DEVICE_ID_INTEL_I7_NONCORE  macro  include/linux/pci_ids.h  2673  #define PCI_DEVICE_ID_INTEL_I7_NONCORE 0x2c41
PCI_DEVICE_ID_INTEL_I7_NONCORE_ALT  macro  include/linux/pci_ids.h  2674  #define PCI_DEVICE_ID_INTEL_I7_NONCORE_ALT 0x2c40
PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE  macro  include/linux/pci_ids.h  2675  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE 0x2c50
PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_ALT  macro  include/linux/pci_ids.h  2676  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_ALT 0x2c51
PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_REV2  macro  include/linux/pci_ids.h  2677  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_REV2 0x2c70
PCI_DEVICE_ID_INTEL_LYNNFIELD_SAD  macro  include/linux/pci_ids.h  2678  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_SAD 0x2c81
PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_LINK0  macro  include/linux/pci_ids.h  2679  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_LINK0 0x2c90
PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_PHY0  macro  include/linux/pci_ids.h  2680  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_PHY0 0x2c91
PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR  macro  include/linux/pci_ids.h  2681  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR 0x2c98
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD  macro  include/linux/pci_ids.h  2682  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD 0x2c99
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST  macro  include/linux/pci_ids.h  2683  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST 0x2c9C
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL  macro  include/linux/pci_ids.h  2684  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL 0x2ca0
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR  macro  include/linux/pci_ids.h  2685  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR 0x2ca1
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK  macro  include/linux/pci_ids.h  2686  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK 0x2ca2
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC  macro  include/linux/pci_ids.h  2687  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC 0x2ca3
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL  macro  include/linux/pci_ids.h  2688  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL 0x2ca8
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR  macro  include/linux/pci_ids.h  2689  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR 0x2ca9
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK  macro  include/linux/pci_ids.h  2690  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK 0x2caa
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC  macro  include/linux/pci_ids.h  2691  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC 0x2cab
PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR_REV2  macro  include/linux/pci_ids.h  2692  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR_REV2 0x2d98
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD_REV2  macro  include/linux/pci_ids.h  2693  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD_REV2 0x2d99
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_RAS_REV2  macro  include/linux/pci_ids.h  2694  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_RAS_REV2 0x2d9a
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST_REV2  macro  include/linux/pci_ids.h  2695  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST_REV2 0x2d9c
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL_REV2  macro  include/linux/pci_ids.h  2696  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL_REV2 0x2da0
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR_REV2  macro  include/linux/pci_ids.h  2697  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR_REV2 0x2da1
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK_REV2  macro  include/linux/pci_ids.h  2698  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK_REV2 0x2da2
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC_REV2  macro  include/linux/pci_ids.h  2699  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC_REV2 0x2da3
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL_REV2  macro  include/linux/pci_ids.h  2700  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL_REV2 0x2da8
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR_REV2  macro  include/linux/pci_ids.h  2701  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR_REV2 0x2da9
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK_REV2  macro  include/linux/pci_ids.h  2702  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK_REV2 0x2daa
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC_REV2  macro  include/linux/pci_ids.h  2703  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC_REV2 0x2dab
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_CTRL_REV2  macro  include/linux/pci_ids.h  2704  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_CTRL_REV2 0x2db0
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_ADDR_REV2  macro  include/linux/pci_ids.h  2705  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_ADDR_REV2 0x2db1
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_RANK_REV2  macro  include/linux/pci_ids.h  2706  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_RANK_REV2 0x2db2
PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_TC_REV2  macro  include/linux/pci_ids.h  2707  #define PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_TC_REV2 0x2db3
PCI_DEVICE_ID_INTEL_82855PM_HB  macro  include/linux/pci_ids.h  2708  #define PCI_DEVICE_ID_INTEL_82855PM_HB 0x3340
PCI_DEVICE_ID_INTEL_IOAT_TBG4  macro  include/linux/pci_ids.h  2709  #define PCI_DEVICE_ID_INTEL_IOAT_TBG4 0x3429
PCI_DEVICE_ID_INTEL_IOAT_TBG5  macro  include/linux/pci_ids.h  2710  #define PCI_DEVICE_ID_INTEL_IOAT_TBG5 0x342a
PCI_DEVICE_ID_INTEL_IOAT_TBG6  macro  include/linux/pci_ids.h  2711  #define PCI_DEVICE_ID_INTEL_IOAT_TBG6 0x342b
PCI_DEVICE_ID_INTEL_IOAT_TBG7  macro  include/linux/pci_ids.h  2712  #define PCI_DEVICE_ID_INTEL_IOAT_TBG7 0x342c
PCI_DEVICE_ID_INTEL_X58_HUB_MGMT  macro  include/linux/pci_ids.h  2713  #define PCI_DEVICE_ID_INTEL_X58_HUB_MGMT 0x342e
PCI_DEVICE_ID_INTEL_IOAT_TBG0  macro  include/linux/pci_ids.h  2714  #define PCI_DEVICE_ID_INTEL_IOAT_TBG0 0x3430
PCI_DEVICE_ID_INTEL_IOAT_TBG1  macro  include/linux/pci_ids.h  2715  #define PCI_DEVICE_ID_INTEL_IOAT_TBG1 0x3431
PCI_DEVICE_ID_INTEL_IOAT_TBG2  macro  include/linux/pci_ids.h  2716  #define PCI_DEVICE_ID_INTEL_IOAT_TBG2 0x3432
PCI_DEVICE_ID_INTEL_IOAT_TBG3  macro  include/linux/pci_ids.h  2717  #define PCI_DEVICE_ID_INTEL_IOAT_TBG3 0x3433
PCI_DEVICE_ID_INTEL_82830_HB  macro  include/linux/pci_ids.h  2718  #define PCI_DEVICE_ID_INTEL_82830_HB 0x3575
PCI_DEVICE_ID_INTEL_82830_CGC  macro  include/linux/pci_ids.h  2719  #define PCI_DEVICE_ID_INTEL_82830_CGC 0x3577
PCI_DEVICE_ID_INTEL_82854_HB  macro  include/linux/pci_ids.h  2720  #define PCI_DEVICE_ID_INTEL_82854_HB 0x358c
PCI_DEVICE_ID_INTEL_82854_IG  macro  include/linux/pci_ids.h  2721  #define PCI_DEVICE_ID_INTEL_82854_IG 0x358e
PCI_DEVICE_ID_INTEL_82855GM_HB  macro  include/linux/pci_ids.h  2722  #define PCI_DEVICE_ID_INTEL_82855GM_HB 0x3580
PCI_DEVICE_ID_INTEL_82855GM_IG  macro  include/linux/pci_ids.h  2723  #define PCI_DEVICE_ID_INTEL_82855GM_IG 0x3582
PCI_DEVICE_ID_INTEL_E7520_MCH  macro  include/linux/pci_ids.h  2724  #define PCI_DEVICE_ID_INTEL_E7520_MCH 0x3590
PCI_DEVICE_ID_INTEL_E7320_MCH  macro  include/linux/pci_ids.h  2725  #define PCI_DEVICE_ID_INTEL_E7320_MCH 0x3592
PCI_DEVICE_ID_INTEL_MCH_PA  macro  include/linux/pci_ids.h  2726  #define PCI_DEVICE_ID_INTEL_MCH_PA 0x3595
PCI_DEVICE_ID_INTEL_MCH_PA1  macro  include/linux/pci_ids.h  2727  #define PCI_DEVICE_ID_INTEL_MCH_PA1 0x3596
PCI_DEVICE_ID_INTEL_MCH_PB  macro  include/linux/pci_ids.h  2728  #define PCI_DEVICE_ID_INTEL_MCH_PB 0x3597
PCI_DEVICE_ID_INTEL_MCH_PB1  macro  include/linux/pci_ids.h  2729  #define PCI_DEVICE_ID_INTEL_MCH_PB1 0x3598
PCI_DEVICE_ID_INTEL_MCH_PC  macro  include/linux/pci_ids.h  2730  #define PCI_DEVICE_ID_INTEL_MCH_PC 0x3599
PCI_DEVICE_ID_INTEL_MCH_PC1  macro  include/linux/pci_ids.h  2731  #define PCI_DEVICE_ID_INTEL_MCH_PC1 0x359a
PCI_DEVICE_ID_INTEL_E7525_MCH  macro  include/linux/pci_ids.h  2732  #define PCI_DEVICE_ID_INTEL_E7525_MCH 0x359e
PCI_DEVICE_ID_INTEL_I7300_MCH_ERR  macro  include/linux/pci_ids.h  2733  #define PCI_DEVICE_ID_INTEL_I7300_MCH_ERR 0x360c
PCI_DEVICE_ID_INTEL_I7300_MCH_FB0  macro  include/linux/pci_ids.h  2734  #define PCI_DEVICE_ID_INTEL_I7300_MCH_FB0 0x360f
PCI_DEVICE_ID_INTEL_I7300_MCH_FB1  macro  include/linux/pci_ids.h  2735  #define PCI_DEVICE_ID_INTEL_I7300_MCH_FB1 0x3610
PCI_DEVICE_ID_INTEL_IOAT_CNB  macro  include/linux/pci_ids.h  2736  #define PCI_DEVICE_ID_INTEL_IOAT_CNB 0x360b
PCI_DEVICE_ID_INTEL_FBD_CNB  macro  include/linux/pci_ids.h  2737  #define PCI_DEVICE_ID_INTEL_FBD_CNB 0x360c
PCI_DEVICE_ID_INTEL_IOAT_JSF0  macro  include/linux/pci_ids.h  2738  #define PCI_DEVICE_ID_INTEL_IOAT_JSF0 0x3710
PCI_DEVICE_ID_INTEL_IOAT_JSF1  macro  include/linux/pci_ids.h  2739  #define PCI_DEVICE_ID_INTEL_IOAT_JSF1 0x3711
PCI_DEVICE_ID_INTEL_IOAT_JSF2  macro  include/linux/pci_ids.h  2740  #define PCI_DEVICE_ID_INTEL_IOAT_JSF2 0x3712
PCI_DEVICE_ID_INTEL_IOAT_JSF3  macro  include/linux/pci_ids.h  2741  #define PCI_DEVICE_ID_INTEL_IOAT_JSF3 0x3713
PCI_DEVICE_ID_INTEL_IOAT_JSF4  macro  include/linux/pci_ids.h  2742  #define PCI_DEVICE_ID_INTEL_IOAT_JSF4 0x3714
PCI_DEVICE_ID_INTEL_IOAT_JSF5  macro  include/linux/pci_ids.h  2743  #define PCI_DEVICE_ID_INTEL_IOAT_JSF5 0x3715
PCI_DEVICE_ID_INTEL_IOAT_JSF6  macro  include/linux/pci_ids.h  2744  #define PCI_DEVICE_ID_INTEL_IOAT_JSF6 0x3716
PCI_DEVICE_ID_INTEL_IOAT_JSF7  macro  include/linux/pci_ids.h  2745  #define PCI_DEVICE_ID_INTEL_IOAT_JSF7 0x3717
PCI_DEVICE_ID_INTEL_IOAT_JSF8  macro  include/linux/pci_ids.h  2746  #define PCI_DEVICE_ID_INTEL_IOAT_JSF8 0x3718
PCI_DEVICE_ID_INTEL_IOAT_JSF9  macro  include/linux/pci_ids.h  2747  #define PCI_DEVICE_ID_INTEL_IOAT_JSF9 0x3719
PCI_DEVICE_ID_INTEL_ICH10_0  macro  include/linux/pci_ids.h  2748  #define PCI_DEVICE_ID_INTEL_ICH10_0 0x3a14
PCI_DEVICE_ID_INTEL_ICH10_1  macro  include/linux/pci_ids.h  2749  #define PCI_DEVICE_ID_INTEL_ICH10_1 0x3a16
PCI_DEVICE_ID_INTEL_ICH10_2  macro  include/linux/pci_ids.h  2750  #define PCI_DEVICE_ID_INTEL_ICH10_2 0x3a18
PCI_DEVICE_ID_INTEL_ICH10_3  macro  include/linux/pci_ids.h  2751  #define PCI_DEVICE_ID_INTEL_ICH10_3 0x3a1a
PCI_DEVICE_ID_INTEL_ICH10_4  macro  include/linux/pci_ids.h  2752  #define PCI_DEVICE_ID_INTEL_ICH10_4 0x3a30
PCI_DEVICE_ID_INTEL_ICH10_5  macro  include/linux/pci_ids.h  2753  #define PCI_DEVICE_ID_INTEL_ICH10_5 0x3a60
PCI_DEVICE_ID_INTEL_5_3400_SERIES_LPC_MIN  macro  include/linux/pci_ids.h  2754  #define PCI_DEVICE_ID_INTEL_5_3400_SERIES_LPC_MIN 0x3b00
PCI_DEVICE_ID_INTEL_5_3400_SERIES_LPC_MAX  macro  include/linux/pci_ids.h  2755  #define PCI_DEVICE_ID_INTEL_5_3400_SERIES_LPC_MAX 0x3b1f
PCI_DEVICE_ID_INTEL_IOAT_SNB0  macro  include/linux/pci_ids.h  2756  #define PCI_DEVICE_ID_INTEL_IOAT_SNB0 0x3c20
PCI_DEVICE_ID_INTEL_IOAT_SNB1  macro  include/linux/pci_ids.h  2757  #define PCI_DEVICE_ID_INTEL_IOAT_SNB1 0x3c21
PCI_DEVICE_ID_INTEL_IOAT_SNB2  macro  include/linux/pci_ids.h  2758  #define PCI_DEVICE_ID_INTEL_IOAT_SNB2 0x3c22
PCI_DEVICE_ID_INTEL_IOAT_SNB3  macro  include/linux/pci_ids.h  2759  #define PCI_DEVICE_ID_INTEL_IOAT_SNB3 0x3c23
PCI_DEVICE_ID_INTEL_IOAT_SNB4  macro  include/linux/pci_ids.h  2760  #define PCI_DEVICE_ID_INTEL_IOAT_SNB4 0x3c24
PCI_DEVICE_ID_INTEL_IOAT_SNB5  macro  include/linux/pci_ids.h  2761  #define PCI_DEVICE_ID_INTEL_IOAT_SNB5 0x3c25
PCI_DEVICE_ID_INTEL_IOAT_SNB6  macro  include/linux/pci_ids.h  2762  #define PCI_DEVICE_ID_INTEL_IOAT_SNB6 0x3c26
PCI_DEVICE_ID_INTEL_IOAT_SNB7  macro  include/linux/pci_ids.h  2763  #define PCI_DEVICE_ID_INTEL_IOAT_SNB7 0x3c27
PCI_DEVICE_ID_INTEL_IOAT_SNB8  macro  include/linux/pci_ids.h  2764  #define PCI_DEVICE_ID_INTEL_IOAT_SNB8 0x3c2e
PCI_DEVICE_ID_INTEL_IOAT_SNB9  macro  include/linux/pci_ids.h  2765  #define PCI_DEVICE_ID_INTEL_IOAT_SNB9 0x3c2f
PCI_DEVICE_ID_INTEL_UNC_HA  macro  include/linux/pci_ids.h  2766  #define PCI_DEVICE_ID_INTEL_UNC_HA 0x3c46
PCI_DEVICE_ID_INTEL_UNC_IMC0  macro  include/linux/pci_ids.h  2767  #define PCI_DEVICE_ID_INTEL_UNC_IMC0 0x3cb0
PCI_DEVICE_ID_INTEL_UNC_IMC1  macro  include/linux/pci_ids.h  2768  #define PCI_DEVICE_ID_INTEL_UNC_IMC1 0x3cb1
PCI_DEVICE_ID_INTEL_UNC_IMC2  macro  include/linux/pci_ids.h  2769  #define PCI_DEVICE_ID_INTEL_UNC_IMC2 0x3cb4
PCI_DEVICE_ID_INTEL_UNC_IMC3  macro  include/linux/pci_ids.h  2770  #define PCI_DEVICE_ID_INTEL_UNC_IMC3 0x3cb5
PCI_DEVICE_ID_INTEL_UNC_QPI0  macro  include/linux/pci_ids.h  2771  #define PCI_DEVICE_ID_INTEL_UNC_QPI0 0x3c41
PCI_DEVICE_ID_INTEL_UNC_QPI1  macro  include/linux/pci_ids.h  2772  #define PCI_DEVICE_ID_INTEL_UNC_QPI1 0x3c42
PCI_DEVICE_ID_INTEL_UNC_R2PCIE  macro  include/linux/pci_ids.h  2773  #define PCI_DEVICE_ID_INTEL_UNC_R2PCIE 0x3c43
PCI_DEVICE_ID_INTEL_UNC_R3QPI0  macro  include/linux/pci_ids.h  2774  #define PCI_DEVICE_ID_INTEL_UNC_R3QPI0 0x3c44
PCI_DEVICE_ID_INTEL_UNC_R3QPI1  macro  include/linux/pci_ids.h  2775  #define PCI_DEVICE_ID_INTEL_UNC_R3QPI1 0x3c45
PCI_DEVICE_ID_INTEL_JAKETOWN_UBOX  macro  include/linux/pci_ids.h  2776  #define PCI_DEVICE_ID_INTEL_JAKETOWN_UBOX 0x3ce0
PCI_DEVICE_ID_INTEL_IOAT_SNB  macro  include/linux/pci_ids.h  2777  #define PCI_DEVICE_ID_INTEL_IOAT_SNB 0x402f
PCI_DEVICE_ID_INTEL_5100_16  macro  include/linux/pci_ids.h  2778  #define PCI_DEVICE_ID_INTEL_5100_16 0x65f0
PCI_DEVICE_ID_INTEL_5100_21  macro  include/linux/pci_ids.h  2779  #define PCI_DEVICE_ID_INTEL_5100_21 0x65f5
PCI_DEVICE_ID_INTEL_5100_22  macro  include/linux/pci_ids.h  2780  #define PCI_DEVICE_ID_INTEL_5100_22 0x65f6
PCI_DEVICE_ID_INTEL_5400_ERR  macro  include/linux/pci_ids.h  2781  #define PCI_DEVICE_ID_INTEL_5400_ERR 0x4030
PCI_DEVICE_ID_INTEL_5400_FBD0  macro  include/linux/pci_ids.h  2782  #define PCI_DEVICE_ID_INTEL_5400_FBD0 0x4035
PCI_DEVICE_ID_INTEL_5400_FBD1  macro  include/linux/pci_ids.h  2783  #define PCI_DEVICE_ID_INTEL_5400_FBD1 0x4036
PCI_DEVICE_ID_INTEL_IOAT_SCNB  macro  include/linux/pci_ids.h  2784  #define PCI_DEVICE_ID_INTEL_IOAT_SCNB 0x65ff
PCI_DEVICE_ID_INTEL_EP80579_0  macro  include/linux/pci_ids.h  2785  #define PCI_DEVICE_ID_INTEL_EP80579_0 0x5031
PCI_DEVICE_ID_INTEL_EP80579_1  macro  include/linux/pci_ids.h  2786  #define PCI_DEVICE_ID_INTEL_EP80579_1 0x5032
PCI_DEVICE_ID_INTEL_82371SB_0  macro  include/linux/pci_ids.h  2787  #define PCI_DEVICE_ID_INTEL_82371SB_0 0x7000
PCI_DEVICE_ID_INTEL_82371SB_1  macro  include/linux/pci_ids.h  2788  #define PCI_DEVICE_ID_INTEL_82371SB_1 0x7010
PCI_DEVICE_ID_INTEL_82371SB_2  macro  include/linux/pci_ids.h  2789  #define PCI_DEVICE_ID_INTEL_82371SB_2 0x7020
PCI_DEVICE_ID_INTEL_82437VX  macro  include/linux/pci_ids.h  2790  #define PCI_DEVICE_ID_INTEL_82437VX 0x7030
PCI_DEVICE_ID_INTEL_82439TX  macro  include/linux/pci_ids.h  2791  #define PCI_DEVICE_ID_INTEL_82439TX 0x7100
PCI_DEVICE_ID_INTEL_82371AB_0  macro  include/linux/pci_ids.h  2792  #define PCI_DEVICE_ID_INTEL_82371AB_0 0x7110
PCI_DEVICE_ID_INTEL_82371AB  macro  include/linux/pci_ids.h  2793  #define PCI_DEVICE_ID_INTEL_82371AB 0x7111
PCI_DEVICE_ID_INTEL_82371AB_2  macro  include/linux/pci_ids.h  2794  #define PCI_DEVICE_ID_INTEL_82371AB_2 0x7112
PCI_DEVICE_ID_INTEL_82371AB_3  macro  include/linux/pci_ids.h  2795  #define PCI_DEVICE_ID_INTEL_82371AB_3 0x7113
PCI_DEVICE_ID_INTEL_82810_MC1  macro  include/linux/pci_ids.h  2796  #define PCI_DEVICE_ID_INTEL_82810_MC1 0x7120
PCI_DEVICE_ID_INTEL_82810_IG1  macro  include/linux/pci_ids.h  2797  #define PCI_DEVICE_ID_INTEL_82810_IG1 0x7121
PCI_DEVICE_ID_INTEL_82810_MC3  macro  include/linux/pci_ids.h  2798  #define PCI_DEVICE_ID_INTEL_82810_MC3 0x7122
PCI_DEVICE_ID_INTEL_82810_IG3  macro  include/linux/pci_ids.h  2799  #define PCI_DEVICE_ID_INTEL_82810_IG3 0x7123
PCI_DEVICE_ID_INTEL_82810E_MC  macro  include/linux/pci_ids.h  2800  #define PCI_DEVICE_ID_INTEL_82810E_MC 0x7124
PCI_DEVICE_ID_INTEL_82810E_IG  macro  include/linux/pci_ids.h  2801  #define PCI_DEVICE_ID_INTEL_82810E_IG 0x7125
PCI_DEVICE_ID_INTEL_82443LX_0  macro  include/linux/pci_ids.h  2802  #define PCI_DEVICE_ID_INTEL_82443LX_0 0x7180
PCI_DEVICE_ID_INTEL_82443LX_1  macro  include/linux/pci_ids.h  2803  #define PCI_DEVICE_ID_INTEL_82443LX_1 0x7181
PCI_DEVICE_ID_INTEL_82443BX_0  macro  include/linux/pci_ids.h  2804  #define PCI_DEVICE_ID_INTEL_82443BX_0 0x7190
PCI_DEVICE_ID_INTEL_82443BX_1  macro  include/linux/pci_ids.h  2805  #define PCI_DEVICE_ID_INTEL_82443BX_1 0x7191
PCI_DEVICE_ID_INTEL_82443BX_2  macro  include/linux/pci_ids.h  2806  #define PCI_DEVICE_ID_INTEL_82443BX_2 0x7192
PCI_DEVICE_ID_INTEL_440MX  macro  include/linux/pci_ids.h  2807  #define PCI_DEVICE_ID_INTEL_440MX 0x7195
PCI_DEVICE_ID_INTEL_440MX_6  macro  include/linux/pci_ids.h  2808  #define PCI_DEVICE_ID_INTEL_440MX_6 0x7196
PCI_DEVICE_ID_INTEL_82443MX_0  macro  include/linux/pci_ids.h  2809  #define PCI_DEVICE_ID_INTEL_82443MX_0 0x7198
PCI_DEVICE_ID_INTEL_82443MX_1  macro  include/linux/pci_ids.h  2810  #define PCI_DEVICE_ID_INTEL_82443MX_1 0x7199
PCI_DEVICE_ID_INTEL_82443MX_3  macro  include/linux/pci_ids.h  2811  #define PCI_DEVICE_ID_INTEL_82443MX_3 0x719b
PCI_DEVICE_ID_INTEL_82443GX_0  macro  include/linux/pci_ids.h  2812  #define PCI_DEVICE_ID_INTEL_82443GX_0 0x71a0
PCI_DEVICE_ID_INTEL_82443GX_2  macro  include/linux/pci_ids.h  2813  #define PCI_DEVICE_ID_INTEL_82443GX_2 0x71a2
PCI_DEVICE_ID_INTEL_82372FB_1  macro  include/linux/pci_ids.h  2814  #define PCI_DEVICE_ID_INTEL_82372FB_1 0x7601
PCI_DEVICE_ID_INTEL_SCH_LPC  macro  include/linux/pci_ids.h  2815  #define PCI_DEVICE_ID_INTEL_SCH_LPC 0x8119
PCI_DEVICE_ID_INTEL_SCH_IDE  macro  include/linux/pci_ids.h  2816  #define PCI_DEVICE_ID_INTEL_SCH_IDE 0x811a
PCI_DEVICE_ID_INTEL_ITC_LPC  macro  include/linux/pci_ids.h  2817  #define PCI_DEVICE_ID_INTEL_ITC_LPC 0x8186
PCI_DEVICE_ID_INTEL_82454GX  macro  include/linux/pci_ids.h  2818  #define PCI_DEVICE_ID_INTEL_82454GX 0x84c4
PCI_DEVICE_ID_INTEL_82450GX  macro  include/linux/pci_ids.h  2819  #define PCI_DEVICE_ID_INTEL_82450GX 0x84c5
PCI_DEVICE_ID_INTEL_82451NX  macro  include/linux/pci_ids.h  2820  #define PCI_DEVICE_ID_INTEL_82451NX 0x84ca
PCI_DEVICE_ID_INTEL_82454NX  macro  include/linux/pci_ids.h  2821  #define PCI_DEVICE_ID_INTEL_82454NX 0x84cb
PCI_DEVICE_ID_INTEL_84460GX  macro  include/linux/pci_ids.h  2822  #define PCI_DEVICE_ID_INTEL_84460GX 0x84ea
PCI_DEVICE_ID_INTEL_IXP4XX  macro  include/linux/pci_ids.h  2823  #define PCI_DEVICE_ID_INTEL_IXP4XX 0x8500
PCI_DEVICE_ID_INTEL_IXP2800  macro  include/linux/pci_ids.h  2824  #define PCI_DEVICE_ID_INTEL_IXP2800 0x9004
PCI_DEVICE_ID_INTEL_S21152BB  macro  include/linux/pci_ids.h  2825  #define PCI_DEVICE_ID_INTEL_S21152BB 0xb152
PCI_VENDOR_ID_SCALEMP  macro  include/linux/pci_ids.h  2827  #define PCI_VENDOR_ID_SCALEMP 0x8686
PCI_DEVICE_ID_SCALEMP_VSMP_CTL  macro  include/linux/pci_ids.h  2828  #define PCI_DEVICE_ID_SCALEMP_VSMP_CTL 0x1010
PCI_VENDOR_ID_COMPUTONE  macro  include/linux/pci_ids.h  2830  #define PCI_VENDOR_ID_COMPUTONE 0x8e0e
PCI_DEVICE_ID_COMPUTONE_IP2EX  macro  include/linux/pci_ids.h  2831  #define PCI_DEVICE_ID_COMPUTONE_IP2EX 0x0291
PCI_DEVICE_ID_COMPUTONE_PG  macro  include/linux/pci_ids.h  2832  #define PCI_DEVICE_ID_COMPUTONE_PG 0x0302
PCI_SUBVENDOR_ID_COMPUTONE  macro  include/linux/pci_ids.h  2833  #define PCI_SUBVENDOR_ID_COMPUTONE 0x8e0e
PCI_SUBDEVICE_ID_COMPUTONE_PG4  macro  include/linux/pci_ids.h  2834  #define PCI_SUBDEVICE_ID_COMPUTONE_PG4 0x0001
PCI_SUBDEVICE_ID_COMPUTONE_PG8  macro  include/linux/pci_ids.h  2835  #define PCI_SUBDEVICE_ID_COMPUTONE_PG8 0x0002
PCI_SUBDEVICE_ID_COMPUTONE_PG6  macro  include/linux/pci_ids.h  2836  #define PCI_SUBDEVICE_ID_COMPUTONE_PG6 0x0003
PCI_VENDOR_ID_KTI  macro  include/linux/pci_ids.h  2838  #define PCI_VENDOR_ID_KTI 0x8e2e
PCI_VENDOR_ID_ADAPTEC  macro  include/linux/pci_ids.h  2840  #define PCI_VENDOR_ID_ADAPTEC 0x9004
PCI_DEVICE_ID_ADAPTEC_7810  macro  include/linux/pci_ids.h  2841  #define PCI_DEVICE_ID_ADAPTEC_7810 0x1078
PCI_DEVICE_ID_ADAPTEC_7821  macro  include/linux/pci_ids.h  2842  #define PCI_DEVICE_ID_ADAPTEC_7821 0x2178
PCI_DEVICE_ID_ADAPTEC_38602  macro  include/linux/pci_ids.h  2843  #define PCI_DEVICE_ID_ADAPTEC_38602 0x3860
PCI_DEVICE_ID_ADAPTEC_7850  macro  include/linux/pci_ids.h  2844  #define PCI_DEVICE_ID_ADAPTEC_7850 0x5078
PCI_DEVICE_ID_ADAPTEC_7855  macro  include/linux/pci_ids.h  2845  #define PCI_DEVICE_ID_ADAPTEC_7855 0x5578
PCI_DEVICE_ID_ADAPTEC_3860  macro  include/linux/pci_ids.h  2846  #define PCI_DEVICE_ID_ADAPTEC_3860 0x6038
PCI_DEVICE_ID_ADAPTEC_1480A  macro  include/linux/pci_ids.h  2847  #define PCI_DEVICE_ID_ADAPTEC_1480A 0x6075
PCI_DEVICE_ID_ADAPTEC_7860  macro  include/linux/pci_ids.h  2848  #define PCI_DEVICE_ID_ADAPTEC_7860 0x6078
PCI_DEVICE_ID_ADAPTEC_7861  macro  include/linux/pci_ids.h  2849  #define PCI_DEVICE_ID_ADAPTEC_7861 0x6178
PCI_DEVICE_ID_ADAPTEC_7870  macro  include/linux/pci_ids.h  2850  #define PCI_DEVICE_ID_ADAPTEC_7870 0x7078
PCI_DEVICE_ID_ADAPTEC_7871  macro  include/linux/pci_ids.h  2851  #define PCI_DEVICE_ID_ADAPTEC_7871 0x7178
PCI_DEVICE_ID_ADAPTEC_7872  macro  include/linux/pci_ids.h  2852  #define PCI_DEVICE_ID_ADAPTEC_7872 0x7278
PCI_DEVICE_ID_ADAPTEC_7873  macro  include/linux/pci_ids.h  2853  #define PCI_DEVICE_ID_ADAPTEC_7873 0x7378
PCI_DEVICE_ID_ADAPTEC_7874  macro  include/linux/pci_ids.h  2854  #define PCI_DEVICE_ID_ADAPTEC_7874 0x7478
PCI_DEVICE_ID_ADAPTEC_7895  macro  include/linux/pci_ids.h  2855  #define PCI_DEVICE_ID_ADAPTEC_7895 0x7895
PCI_DEVICE_ID_ADAPTEC_7880  macro  include/linux/pci_ids.h  2856  #define PCI_DEVICE_ID_ADAPTEC_7880 0x8078
PCI_DEVICE_ID_ADAPTEC_7881  macro  include/linux/pci_ids.h  2857  #define PCI_DEVICE_ID_ADAPTEC_7881 0x8178
PCI_DEVICE_ID_ADAPTEC_7882  macro  include/linux/pci_ids.h  2858  #define PCI_DEVICE_ID_ADAPTEC_7882 0x8278
PCI_DEVICE_ID_ADAPTEC_7883  macro  include/linux/pci_ids.h  2859  #define PCI_DEVICE_ID_ADAPTEC_7883 0x8378
PCI_DEVICE_ID_ADAPTEC_7884  macro  include/linux/pci_ids.h  2860  #define PCI_DEVICE_ID_ADAPTEC_7884 0x8478
PCI_DEVICE_ID_ADAPTEC_7885  macro  include/linux/pci_ids.h  2861  #define PCI_DEVICE_ID_ADAPTEC_7885 0x8578
PCI_DEVICE_ID_ADAPTEC_7886  macro  include/linux/pci_ids.h  2862  #define PCI_DEVICE_ID_ADAPTEC_7886 0x8678
PCI_DEVICE_ID_ADAPTEC_7887  macro  include/linux/pci_ids.h  2863  #define PCI_DEVICE_ID_ADAPTEC_7887 0x8778
PCI_DEVICE_ID_ADAPTEC_7888  macro  include/linux/pci_ids.h  2864  #define PCI_DEVICE_ID_ADAPTEC_7888 0x8878
PCI_VENDOR_ID_ADAPTEC2  macro  include/linux/pci_ids.h  2866  #define PCI_VENDOR_ID_ADAPTEC2 0x9005
PCI_DEVICE_ID_ADAPTEC2_2940U2  macro  include/linux/pci_ids.h  2867  #define PCI_DEVICE_ID_ADAPTEC2_2940U2 0x0010
PCI_DEVICE_ID_ADAPTEC2_2930U2  macro  include/linux/pci_ids.h  2868  #define PCI_DEVICE_ID_ADAPTEC2_2930U2 0x0011
PCI_DEVICE_ID_ADAPTEC2_7890B  macro  include/linux/pci_ids.h  2869  #define PCI_DEVICE_ID_ADAPTEC2_7890B 0x0013
PCI_DEVICE_ID_ADAPTEC2_7890  macro  include/linux/pci_ids.h  2870  #define PCI_DEVICE_ID_ADAPTEC2_7890 0x001f
PCI_DEVICE_ID_ADAPTEC2_3940U2  macro  include/linux/pci_ids.h  2871  #define PCI_DEVICE_ID_ADAPTEC2_3940U2 0x0050
PCI_DEVICE_ID_ADAPTEC2_3950U2D  macro  include/linux/pci_ids.h  2872  #define PCI_DEVICE_ID_ADAPTEC2_3950U2D 0x0051
PCI_DEVICE_ID_ADAPTEC2_7896  macro  include/linux/pci_ids.h  2873  #define PCI_DEVICE_ID_ADAPTEC2_7896 0x005f
PCI_DEVICE_ID_ADAPTEC2_7892A  macro  include/linux/pci_ids.h  2874  #define PCI_DEVICE_ID_ADAPTEC2_7892A 0x0080
PCI_DEVICE_ID_ADAPTEC2_7892B  macro  include/linux/pci_ids.h  2875  #define PCI_DEVICE_ID_ADAPTEC2_7892B 0x0081
PCI_DEVICE_ID_ADAPTEC2_7892D  macro  include/linux/pci_ids.h  2876  #define PCI_DEVICE_ID_ADAPTEC2_7892D 0x0083
PCI_DEVICE_ID_ADAPTEC2_7892P  macro  include/linux/pci_ids.h  2877  #define PCI_DEVICE_ID_ADAPTEC2_7892P 0x008f
PCI_DEVICE_ID_ADAPTEC2_7899A  macro  include/linux/pci_ids.h  2878  #define PCI_DEVICE_ID_ADAPTEC2_7899A 0x00c0
PCI_DEVICE_ID_ADAPTEC2_7899B  macro  include/linux/pci_ids.h  2879  #define PCI_DEVICE_ID_ADAPTEC2_7899B 0x00c1
PCI_DEVICE_ID_ADAPTEC2_7899D  macro  include/linux/pci_ids.h  2880  #define PCI_DEVICE_ID_ADAPTEC2_7899D 0x00c3
PCI_DEVICE_ID_ADAPTEC2_7899P  macro  include/linux/pci_ids.h  2881  #define PCI_DEVICE_ID_ADAPTEC2_7899P 0x00cf
PCI_DEVICE_ID_ADAPTEC2_OBSIDIAN  macro  include/linux/pci_ids.h  2882  #define PCI_DEVICE_ID_ADAPTEC2_OBSIDIAN 0x0500
PCI_DEVICE_ID_ADAPTEC2_SCAMP  macro  include/linux/pci_ids.h  2883  #define PCI_DEVICE_ID_ADAPTEC2_SCAMP 0x0503
PCI_VENDOR_ID_HOLTEK  macro  include/linux/pci_ids.h  2885  #define PCI_VENDOR_ID_HOLTEK 0x9412
PCI_DEVICE_ID_HOLTEK_6565  macro  include/linux/pci_ids.h  2886  #define PCI_DEVICE_ID_HOLTEK_6565 0x6565
PCI_VENDOR_ID_NETMOS  macro  include/linux/pci_ids.h  2888  #define PCI_VENDOR_ID_NETMOS 0x9710
PCI_DEVICE_ID_NETMOS_9705  macro  include/linux/pci_ids.h  2889  #define PCI_DEVICE_ID_NETMOS_9705 0x9705
PCI_DEVICE_ID_NETMOS_9715  macro  include/linux/pci_ids.h  2890  #define PCI_DEVICE_ID_NETMOS_9715 0x9715
PCI_DEVICE_ID_NETMOS_9735  macro  include/linux/pci_ids.h  2891  #define PCI_DEVICE_ID_NETMOS_9735 0x9735
PCI_DEVICE_ID_NETMOS_9745  macro  include/linux/pci_ids.h  2892  #define PCI_DEVICE_ID_NETMOS_9745 0x9745
PCI_DEVICE_ID_NETMOS_9755  macro  include/linux/pci_ids.h  2893  #define PCI_DEVICE_ID_NETMOS_9755 0x9755
PCI_DEVICE_ID_NETMOS_9805  macro  include/linux/pci_ids.h  2894  #define PCI_DEVICE_ID_NETMOS_9805 0x9805
PCI_DEVICE_ID_NETMOS_9815  macro  include/linux/pci_ids.h  2895  #define PCI_DEVICE_ID_NETMOS_9815 0x9815
PCI_DEVICE_ID_NETMOS_9835  macro  include/linux/pci_ids.h  2896  #define PCI_DEVICE_ID_NETMOS_9835 0x9835
PCI_DEVICE_ID_NETMOS_9845  macro  include/linux/pci_ids.h  2897  #define PCI_DEVICE_ID_NETMOS_9845 0x9845
PCI_DEVICE_ID_NETMOS_9855  macro  include/linux/pci_ids.h  2898  #define PCI_DEVICE_ID_NETMOS_9855 0x9855
PCI_DEVICE_ID_NETMOS_9865  macro  include/linux/pci_ids.h  2899  #define PCI_DEVICE_ID_NETMOS_9865 0x9865
PCI_DEVICE_ID_NETMOS_9900  macro  include/linux/pci_ids.h  2900  #define PCI_DEVICE_ID_NETMOS_9900 0x9900
PCI_DEVICE_ID_NETMOS_9901  macro  include/linux/pci_ids.h  2901  #define PCI_DEVICE_ID_NETMOS_9901 0x9901
PCI_DEVICE_ID_NETMOS_9904  macro  include/linux/pci_ids.h  2902  #define PCI_DEVICE_ID_NETMOS_9904 0x9904
PCI_DEVICE_ID_NETMOS_9912  macro  include/linux/pci_ids.h  2903  #define PCI_DEVICE_ID_NETMOS_9912 0x9912
PCI_DEVICE_ID_NETMOS_9922  macro  include/linux/pci_ids.h  2904  #define PCI_DEVICE_ID_NETMOS_9922 0x9922
PCI_VENDOR_ID_3COM_2  macro  include/linux/pci_ids.h  2906  #define PCI_VENDOR_ID_3COM_2 0xa727
PCI_VENDOR_ID_DIGIUM  macro  include/linux/pci_ids.h  2908  #define PCI_VENDOR_ID_DIGIUM 0xd161
PCI_DEVICE_ID_DIGIUM_HFC4S  macro  include/linux/pci_ids.h  2909  #define PCI_DEVICE_ID_DIGIUM_HFC4S 0xb410
PCI_SUBVENDOR_ID_EXSYS  macro  include/linux/pci_ids.h  2911  #define PCI_SUBVENDOR_ID_EXSYS 0xd84d
PCI_SUBDEVICE_ID_EXSYS_4014  macro  include/linux/pci_ids.h  2912  #define PCI_SUBDEVICE_ID_EXSYS_4014 0x4014
PCI_SUBDEVICE_ID_EXSYS_4055  macro  include/linux/pci_ids.h  2913  #define PCI_SUBDEVICE_ID_EXSYS_4055 0x4055
PCI_VENDOR_ID_TIGERJET  macro  include/linux/pci_ids.h  2915  #define PCI_VENDOR_ID_TIGERJET 0xe159
PCI_DEVICE_ID_TIGERJET_300  macro  include/linux/pci_ids.h  2916  #define PCI_DEVICE_ID_TIGERJET_300 0x0001
PCI_DEVICE_ID_TIGERJET_100  macro  include/linux/pci_ids.h  2917  #define PCI_DEVICE_ID_TIGERJET_100 0x0002
PCI_VENDOR_ID_XILINX_RME  macro  include/linux/pci_ids.h  2919  #define PCI_VENDOR_ID_XILINX_RME 0xea60
PCI_DEVICE_ID_RME_DIGI32  macro  include/linux/pci_ids.h  2920  #define PCI_DEVICE_ID_RME_DIGI32 0x9896
PCI_DEVICE_ID_RME_DIGI32_PRO  macro  include/linux/pci_ids.h  2921  #define PCI_DEVICE_ID_RME_DIGI32_PRO 0x9897
PCI_DEVICE_ID_RME_DIGI32_8  macro  include/linux/pci_ids.h  2922  #define PCI_DEVICE_ID_RME_DIGI32_8 0x9898
PCI_VENDOR_ID_XEN  macro  include/linux/pci_ids.h  2924  #define PCI_VENDOR_ID_XEN 0x5853
PCI_DEVICE_ID_XEN_PLATFORM  macro  include/linux/pci_ids.h  2925  #define PCI_DEVICE_ID_XEN_PLATFORM 0x0001
PCI_VENDOR_ID_OCZ  macro  include/linux/pci_ids.h  2927  #define PCI_VENDOR_ID_OCZ 0x1b85
_LINUX_PCI_DMA_H  macro  include/linux/pci-dma.h  2  #define _LINUX_PCI_DMA_H
DECLARE_PCI_UNMAP_ADDR  macro  include/linux/pci-dma.h  4  #define DECLARE_PCI_UNMAP_ADDR(ADDR_NAME) DEFINE_DMA_UNMAP_ADDR(ADDR_NAME);
DECLARE_PCI_UNMAP_LEN  macro  include/linux/pci-dma.h  5  #define DECLARE_PCI_UNMAP_LEN(LEN_NAME) DEFINE_DMA_UNMAP_LEN(LEN_NAME);
pci_unmap_addr  macro  include/linux/pci-dma.h  6  #define pci_unmap_addr dma_unmap_addr
pci_unmap_addr_set  macro  include/linux/pci-dma.h  7  #define pci_unmap_addr_set dma_unmap_addr_set
pci_unmap_len  macro  include/linux/pci-dma.h  8  #define pci_unmap_len dma_unmap_len
pci_unmap_len_set  macro  include/linux/pci-dma.h  9  #define pci_unmap_len_set dma_unmap_len_set
LINUX_DMAPOOL_H  macro  include/linux/dmapool.h  12  #define LINUX_DMAPOOL_H
dma_pool_create  prototype  include/linux/dmapool.h  17  struct dma_pool *dma_pool_create(const char *name,struct device *dev,size_t size, size_t align, size_t allocation);
dma_pool_destroy  prototype  include/linux/dmapool.h  20  void dma_pool_destroy(struct dma_pool *pool);
dma_pool_alloc  prototype  include/linux/dmapool.h  22  void *dma_pool_alloc(struct dma_pool *pool,gfp_t mem_flags,dma_addr_t *handle);
dma_pool_free  prototype  include/linux/dmapool.h  25  void dma_pool_free(struct dma_pool *pool,void *vaddr,dma_addr_t addr);
dmam_pool_create  prototype  include/linux/dmapool.h  30  struct dma_pool *dmam_pool_create(const char *name,struct device *dev,size_t size, size_t align, size_t allocation);
dmam_pool_destroy  prototype  include/linux/dmapool.h  32  void dmam_pool_destroy(struct dma_pool *pool);
_ASM_X86_PCI_H  macro  arch/x86/include/asm/pci.h  2  #define _ASM_X86_PCI_H
pci_sysdata  struct  arch/x86/include/asm/pci.h  14  struct pci_sysdata { int domain; int node; void *iommu; };
pci_scan_bus_on_node  prototype  arch/x86/include/asm/pci.h  27  extern struct pci_bus *pci_scan_bus_on_node(int busno,struct pci_ops *ops,int node);
pci_scan_bus_with_sysdata  prototype  arch/x86/include/asm/pci.h  29  extern struct pci_bus *pci_scan_bus_with_sysdata(int busno);
pcibios_assign_all_busses  macro  arch/x86/include/asm/pci.h  58  # define pcibios_assign_all_busses() 0
pci_legacy_init  prototype  arch/x86/include/asm/pci.h  51  extern int pci_legacy_init(void);
x86_default_pci_init  macro  arch/x86/include/asm/pci.h  59  # define x86_default_pci_init NULL
PCIBIOS_MIN_IO  macro  arch/x86/include/asm/pci.h  63  #define PCIBIOS_MIN_IO 0x1000
PCIBIOS_MIN_MEM  macro  arch/x86/include/asm/pci.h  64  #define PCIBIOS_MIN_MEM (pci_mem_start)
PCIBIOS_MIN_CARDBUS_IO  macro  arch/x86/include/asm/pci.h  66  #define PCIBIOS_MIN_CARDBUS_IO 0x4000
pcibios_config_init  prototype  arch/x86/include/asm/pci.h  69  void pcibios_config_init(void);
pcibios_scan_root  prototype  arch/x86/include/asm/pci.h  70  struct pci_bus *pcibios_scan_root(int bus);
pcibios_penalize_isa_irq  prototype  arch/x86/include/asm/pci.h  73  void pcibios_penalize_isa_irq(int irq,int active);
pcibios_get_irq_routing_table  prototype  arch/x86/include/asm/pci.h  74  struct irq_routing_table *pcibios_get_irq_routing_table(void);
pcibios_set_irq_routing  prototype  arch/x86/include/asm/pci.h  75  int pcibios_set_irq_routing(struct pci_dev *dev,int pin,int irq);
HAVE_PCI_MMAP  macro  arch/x86/include/asm/pci.h  78  #define HAVE_PCI_MMAP
pci_mmap_page_range  prototype  arch/x86/include/asm/pci.h  79  extern int pci_mmap_page_range(struct pci_dev *dev,struct vm_area_struct *vma,enum pci_mmap_state mmap_state,int write_combine);
early_quirks  function  arch/x86/include/asm/pci.h  94  static inline void early_quirks(void) { }
pci_iommu_alloc  prototype  arch/x86/include/asm/pci.h  97  extern void pci_iommu_alloc(void);
x86_setup_msi_irqs  function  arch/x86/include/asm/pci.h  101  static inline int x86_setup_msi_irqs(struct pci_dev *dev,int nvec,int type)
x86_teardown_msi_irqs  function  arch/x86/include/asm/pci.h  106  static inline void x86_teardown_msi_irqs(struct pci_dev *dev)
x86_teardown_msi_irq  function  arch/x86/include/asm/pci.h  111  static inline void x86_teardown_msi_irq(unsigned int irq)
x86_restore_msi_irqs  function  arch/x86/include/asm/pci.h  115  static inline void x86_restore_msi_irqs(struct pci_dev *dev,int irq)
arch_setup_msi_irqs  macro  arch/x86/include/asm/pci.h  119  #define arch_setup_msi_irqs x86_setup_msi_irqs
arch_teardown_msi_irqs  macro  arch/x86/include/asm/pci.h  120  #define arch_teardown_msi_irqs x86_teardown_msi_irqs
arch_teardown_msi_irq  macro  arch/x86/include/asm/pci.h  121  #define arch_teardown_msi_irq x86_teardown_msi_irq
arch_restore_msi_irqs  macro  arch/x86/include/asm/pci.h  122  #define arch_restore_msi_irqs x86_restore_msi_irqs
native_setup_msi_irqs  macro  arch/x86/include/asm/pci.h  133  #define native_setup_msi_irqs NULL
native_teardown_msi_irq  macro  arch/x86/include/asm/pci.h  134  #define native_teardown_msi_irq NULL
native_restore_msi_irqs  prototype  arch/x86/include/asm/pci.h  126  void native_restore_msi_irqs(struct pci_dev *dev,int irq);
HAVE_DEFAULT_MSI_TEARDOWN_IRQS  macro  arch/x86/include/asm/pci.h  128  #define HAVE_DEFAULT_MSI_TEARDOWN_IRQS
HAVE_DEFAULT_MSI_RESTORE_IRQS  macro  arch/x86/include/asm/pci.h  129  #define HAVE_DEFAULT_MSI_RESTORE_IRQS
default_teardown_msi_irqs  macro  arch/x86/include/asm/pci.h  135  #define default_teardown_msi_irqs NULL
default_restore_msi_irqs  macro  arch/x86/include/asm/pci.h  136  #define default_restore_msi_irqs NULL
PCI_DMA_BUS_IS_PHYS  macro  include/asm-generic/pci.h  34  #define PCI_DMA_BUS_IS_PHYS (1)
__pcibus_to_node  function  arch/x86/include/asm/pci.h  156  static inline int __pcibus_to_node(const struct pci_bus *bus)
cpumask_of_pcibus  function  arch/x86/include/asm/pci.h  164  cpumask_of_pcibus(const struct pci_bus *bus)
pci_setup_rom  struct  arch/x86/include/asm/pci.h  174  struct pci_setup_rom { struct setup_data data; uint16_t vendor; uint16_t devid; uint64_t pcilen; unsigned long segment; unsigned long bus; unsigned long device; unsigned long function; uint8_t romdata[0]; };
_LINUX_SCATTERLIST_H  macro  include/linux/scatterlist.h  2  #define _LINUX_SCATTERLIST_H
sg_table  struct  include/linux/scatterlist.h  12  struct sg_table { struct scatterlist *sgl; unsigned int nents; unsigned int orig_nents; };
SG_MAGIC  macro  include/linux/scatterlist.h  35  #define SG_MAGIC 0x87654321
sg_is_chain  macro  include/linux/scatterlist.h  42  #define sg_is_chain(sg) ((sg)->page_link & 0x01)
sg_is_last  macro  include/linux/scatterlist.h  43  #define sg_is_last(sg) ((sg)->page_link & 0x02)
sg_chain_ptr  macro  include/linux/scatterlist.h  44  #define sg_chain_ptr(sg) ((struct scatterlist *) ((sg)->page_link & ~0x03))
sg_assign_page  function  include/linux/scatterlist.h  57  static inline void sg_assign_page(struct scatterlist *sg,struct page *page)
sg_set_page  function  include/linux/scatterlist.h  87  static inline void sg_set_page(struct scatterlist *sg,struct page *page,unsigned int len, unsigned int offset)
sg_page  function  include/linux/scatterlist.h  95  static inline struct page *sg_page(struct scatterlist *sg)
sg_set_buf  function  include/linux/scatterlist.h  111  static inline void sg_set_buf(struct scatterlist *sg,const void *buf,unsigned int buflen)
for_each_sg  macro  include/linux/scatterlist.h  120  #define for_each_sg(sglist,sg,nr,__i) for (__i = 0, sg = (sglist); __i < (nr); __i++, sg = sg_next(sg))
sg_chain  function  include/linux/scatterlist.h  133  static inline void sg_chain(struct scatterlist *prv,unsigned int prv_nents,struct scatterlist *sgl)
sg_mark_end  function  include/linux/scatterlist.h  162  static inline void sg_mark_end(struct scatterlist *sg)
sg_phys  function  include/linux/scatterlist.h  184  static inline dma_addr_t sg_phys(struct scatterlist *sg)
sg_virt  function  include/linux/scatterlist.h  199  static inline void *sg_virt(struct scatterlist *sg)
sg_nents  prototype  include/linux/scatterlist.h  204  int sg_nents(struct scatterlist *sg);
sg_next  prototype  include/linux/scatterlist.h  205  struct scatterlist *sg_next(struct scatterlist *);
sg_last  prototype  include/linux/scatterlist.h  206  struct scatterlist *sg_last(struct scatterlist *s,unsigned int);
sg_init_table  prototype  include/linux/scatterlist.h  207  void sg_init_table(struct scatterlist *,unsigned int);
sg_init_one  prototype  include/linux/scatterlist.h  208  void sg_init_one(struct scatterlist *,const void *,unsigned int);
__sg_free_table  prototype  include/linux/scatterlist.h  213  void __sg_free_table(struct sg_table *,unsigned int,sg_free_fn *);
sg_free_table  prototype  include/linux/scatterlist.h  214  void sg_free_table(struct sg_table *);
__sg_alloc_table  prototype  include/linux/scatterlist.h  215  int __sg_alloc_table(struct sg_table *,unsigned int,unsigned int,gfp_t,sg_alloc_fn *);
sg_alloc_table  prototype  include/linux/scatterlist.h  217  int sg_alloc_table(struct sg_table *,unsigned int,gfp_t);
sg_alloc_table_from_pages  prototype  include/linux/scatterlist.h  218  int sg_alloc_table_from_pages(struct sg_table *sgt,struct page **pages, unsigned int n_pages,unsigned long offset, unsigned long size,gfp_t gfp_mask);
sg_copy_from_buffer  prototype  include/linux/scatterlist.h  223  size_t sg_copy_from_buffer(struct scatterlist *sgl,unsigned int nents,void *buf, size_t buflen);
sg_copy_to_buffer  prototype  include/linux/scatterlist.h  225  size_t sg_copy_to_buffer(struct scatterlist *sgl,unsigned int nents,void *buf, size_t buflen);
SG_MAX_SINGLE_ALLOC  macro  include/linux/scatterlist.h  232  #define SG_MAX_SINGLE_ALLOC (PAGE_SIZE / sizeof(struct scatterlist))
SG_MITER_ATOMIC  macro  include/linux/scatterlist.h  251  #define SG_MITER_ATOMIC (1 << 0)
SG_MITER_TO_SG  macro  include/linux/scatterlist.h  252  #define SG_MITER_TO_SG (1 << 1)
SG_MITER_FROM_SG  macro  include/linux/scatterlist.h  253  #define SG_MITER_FROM_SG (1 << 2)
sg_mapping_iter  struct  include/linux/scatterlist.h  255  struct sg_mapping_iter { struct page *page; void *addr; size_t length; size_t consumed; struct scatterlist *__sg; unsigned int __nents; unsigned int __offset; unsigned int __flags; };
sg_miter_start  prototype  include/linux/scatterlist.h  269  void sg_miter_start(struct sg_mapping_iter *miter,struct scatterlist *sgl,unsigned int nents, unsigned int flags);
sg_miter_next  prototype  include/linux/scatterlist.h  271  bool sg_miter_next(struct sg_mapping_iter *miter);
sg_miter_stop  prototype  include/linux/scatterlist.h  272  void sg_miter_stop(struct sg_mapping_iter *miter);
__LINUX_MUTEX_H  macro  include/linux/mutex.h  11  #define __LINUX_MUTEX_H
mutex  struct  include/linux/mutex.h  48  struct mutex { atomic_t count; spinlock_t wait_lock; struct list_head wait_list; struct task_struct *owner; const char *name; void *magic; struct lockdep_map dep_map; };
mutex_waiter  struct  include/linux/mutex.h  69  struct mutex_waiter { struct list_head list; struct task_struct *task; void *magic; };
__DEBUG_MUTEX_INITIALIZER  macro  include/linux/mutex-debug.h  11  #define __DEBUG_MUTEX_INITIALIZER(lockname) , .magic = &lockname
mutex_init  macro  include/linux/mutex-debug.h  14  #define mutex_init(mutex) do { static struct lock_class_key __key; __mutex_init((mutex), #mutex, &__key); } while (0)
mutex_destroy  prototype  include/linux/mutex-debug.h  21  extern void mutex_destroy(struct mutex *lock);
__DEP_MAP_MUTEX_INITIALIZER  macro  include/linux/mutex.h  102  # define __DEP_MAP_MUTEX_INITIALIZER(lockname)
__MUTEX_INITIALIZER  macro  include/linux/mutex.h  105  #define __MUTEX_INITIALIZER(lockname) { .count = ATOMIC_INIT(1) , .wait_lock = __SPIN_LOCK_UNLOCKED(lockname.wait_lock) , .wait_list = LIST_HEAD_INIT(lockname.wait_list) __DEBUG_MUTEX_INITIALIZER(lockname) __DEP_MAP_MUTEX_INITIALIZER(lockname) }
DEFINE_MUTEX  macro  include/linux/mutex.h  112  #define DEFINE_MUTEX(mutexname) struct mutex mutexname = __MUTEX_INITIALIZER(mutexname)
__mutex_init  prototype  include/linux/mutex.h  115  extern void __mutex_init(struct mutex *lock,const char *name,struct lock_class_key *key);
mutex_is_locked  function  include/linux/mutex.h  124  static inline int mutex_is_locked(struct mutex *lock)
mutex_lock_nested  macro  include/linux/mutex.h  156  # define mutex_lock_nested(lock,subclass) mutex_lock(lock)
_mutex_lock_nest_lock  prototype  include/linux/mutex.h  135  extern void _mutex_lock_nest_lock(struct mutex *lock,struct lockdep_map *nest_lock);
mutex_lock_interruptible_nested  macro  include/linux/mutex.h  157  # define mutex_lock_interruptible_nested(lock,subclass) mutex_lock_interruptible(lock)
mutex_lock_killable_nested  macro  include/linux/mutex.h  158  # define mutex_lock_killable_nested(lock,subclass) mutex_lock_killable(lock)
mutex_lock  prototype  include/linux/mutex.h  152  extern void mutex_lock(struct mutex *lock);
mutex_lock_interruptible  prototype  include/linux/mutex.h  153  extern int __must_check mutex_lock_interruptible(struct mutex *lock);
mutex_lock_killable  prototype  include/linux/mutex.h  154  extern int __must_check mutex_lock_killable(struct mutex *lock);
mutex_lock_nest_lock  macro  include/linux/mutex.h  159  # define mutex_lock_nest_lock(lock,nest_lock) mutex_lock(lock)
mutex_trylock  prototype  include/linux/mutex.h  168  extern int mutex_trylock(struct mutex *lock);
mutex_unlock  prototype  include/linux/mutex.h  169  extern void mutex_unlock(struct mutex *lock);
atomic_dec_and_mutex_lock  prototype  include/linux/mutex.h  170  extern int atomic_dec_and_mutex_lock(atomic_t *cnt,struct mutex *lock);
arch_mutex_cpu_relax  macro  include/linux/mutex.h  173  #define arch_mutex_cpu_relax() cpu_relax()
_LINUX_DMA_MAPPING_H  macro  include/linux/dma-mapping.h  2  #define _LINUX_DMA_MAPPING_H
dma_map_ops  struct  include/linux/dma-mapping.h  11  struct dma_map_ops { void* (*alloc)(struct device *dev, size_t size,dma_addr_t *dma_handle, gfp_t gfp,struct dma_attrs *attrs); void (*free)(struct device *dev, size_t size,void *vaddr, dma_addr_t dma_handle,struct dma_attrs *attrs); int (*mmap)(struct device *, struct vm_area_struct *,void *, dma_addr_t, size_t, struct dma_attrs *attrs); int (*get_sgtable)(struct device *dev, struct sg_table *sgt, void *,dma_addr_t, size_t, struct dma_attrs *attrs); dma_addr_t (*map_page)(struct device *dev, struct page *page,unsigned long offset, size_t size,enum dma_data_direction dir,struct dma_attrs *attrs); void (*unmap_page)(struct device *dev, dma_addr_t dma_handle,size_t size, enum dma_data_direction dir,struct dma_attrs *attrs); int (*map_sg)(struct device *dev, struct scatterlist *sg,int nents, enum dma_data_direction dir,struct dma_attrs *attrs); void (*unmap_sg)(struct device *dev,struct scatterlist *sg, int nents,enum dma_data_direction dir,struct dma_attrs *attrs); void (*sync_single_for_cpu)(struct device *dev,dma_addr_t dma_handle, size_t size,enum dma_data_direction dir); void (*sync_single_for_device)(struct device *dev,dma_addr_t dma_handle, size_t size,enum dma_data_direction dir); void (*sync_sg_for_cpu)(struct device *dev,struct scatterlist *sg, int nents,enum dma_data_direction dir); void (*sync_sg_for_device)(struct device *dev,struct scatterlist *sg, int nents,enum dma_data_direction dir); int (*mapping_error)(struct device *dev, dma_addr_t dma_addr); int (*dma_supported)(struct device *dev, u64 mask); int (*set_dma_mask)(struct device *dev, u64 mask); u64 (*get_required_mask)(struct device *dev); int is_phys; };
DMA_BIT_MASK  macro  include/linux/dma-mapping.h  59  #define DMA_BIT_MASK(n) (((n) == 64) ? ~0ULL : ((1ULL<<(n))-1))
DMA_MASK_NONE  macro  include/linux/dma-mapping.h  61  #define DMA_MASK_NONE 0x0ULL
valid_dma_direction  function  include/linux/dma-mapping.h  63  static inline int valid_dma_direction(int dma_direction)
is_device_dma_capable  function  include/linux/dma-mapping.h  70  static inline int is_device_dma_capable(struct device *dev)
dma_get_mask  function  include/linux/dma-mapping.h  81  static inline u64 dma_get_mask(struct device *dev)
dma_set_coherent_mask  function  include/linux/dma-mapping.h  91  static inline int dma_set_coherent_mask(struct device *dev,u64 mask)
dma_get_required_mask  prototype  include/linux/dma-mapping.h  100  extern u64 dma_get_required_mask(struct device *dev);
dma_get_max_seg_size  function  include/linux/dma-mapping.h  102  static inline unsigned int dma_get_max_seg_size(struct device *dev)
dma_set_max_seg_size  function  include/linux/dma-mapping.h  107  static inline unsigned int dma_set_max_seg_size(struct device *dev,unsigned int size)
dma_get_seg_boundary  function  include/linux/dma-mapping.h  117  static inline unsigned long dma_get_seg_boundary(struct device *dev)
dma_set_seg_boundary  function  include/linux/dma-mapping.h  123  static inline int dma_set_seg_boundary(struct device *dev,unsigned long mask)
dma_zalloc_coherent  function  include/linux/dma-mapping.h  132  static inline void *dma_zalloc_coherent(struct device *dev,size_t size,dma_addr_t *dma_handle, gfp_t flag)
dma_get_cache_alignment  prototype  include/asm-generic/dma-mapping-broken.h  89  dma_get_cache_alignment(void);
DMA_MEMORY_MAP  macro  include/linux/dma-mapping.h  152  #define DMA_MEMORY_MAP 0x01
DMA_MEMORY_IO  macro  include/linux/dma-mapping.h  153  #define DMA_MEMORY_IO 0x02
DMA_MEMORY_INCLUDES_CHILDREN  macro  include/linux/dma-mapping.h  154  #define DMA_MEMORY_INCLUDES_CHILDREN 0x04
DMA_MEMORY_EXCLUSIVE  macro  include/linux/dma-mapping.h  155  #define DMA_MEMORY_EXCLUSIVE 0x08
dma_declare_coherent_memory  function  include/linux/dma-mapping.h  159  dma_declare_coherent_memory(struct device *dev,dma_addr_t bus_addr,dma_addr_t device_addr, size_t size, int flags)
dma_release_declared_memory  function  include/linux/dma-mapping.h  166  dma_release_declared_memory(struct device *dev)
dma_mark_declared_memory_occupied  function  include/linux/dma-mapping.h  171  dma_mark_declared_memory_occupied(struct device *dev,dma_addr_t device_addr, size_t size)
dmam_alloc_coherent  prototype  include/linux/dma-mapping.h  181  extern void *dmam_alloc_coherent(struct device *dev,size_t size,dma_addr_t *dma_handle, gfp_t gfp);
dmam_free_coherent  prototype  include/linux/dma-mapping.h  183  extern void dmam_free_coherent(struct device *dev,size_t size,void *vaddr,dma_addr_t dma_handle);
dmam_alloc_noncoherent  prototype  include/linux/dma-mapping.h  185  extern void *dmam_alloc_noncoherent(struct device *dev,size_t size,dma_addr_t *dma_handle, gfp_t gfp);
dmam_free_noncoherent  prototype  include/linux/dma-mapping.h  187  extern void dmam_free_noncoherent(struct device *dev,size_t size,void *vaddr,dma_addr_t dma_handle);
dmam_declare_coherent_memory  function  include/linux/dma-mapping.h  195  static inline int dmam_declare_coherent_memory(struct device *dev,dma_addr_t bus_addr, dma_addr_t device_addr,size_t size, gfp_t gfp)
dmam_release_declared_memory  function  include/linux/dma-mapping.h  202  static inline void dmam_release_declared_memory(struct device *dev)
dma_map_single_attrs  macro  include/linux/dma-mapping.h  210  #define dma_map_single_attrs(dev,cpu_addr,size,dir,attrs) dma_map_single(dev, cpu_addr, size, dir)
dma_unmap_single_attrs  macro  include/linux/dma-mapping.h  213  #define dma_unmap_single_attrs(dev,dma_addr,size,dir,attrs) dma_unmap_single(dev, dma_addr, size, dir)
dma_map_sg_attrs  macro  include/linux/dma-mapping.h  216  #define dma_map_sg_attrs(dev,sgl,nents,dir,attrs) dma_map_sg(dev, sgl, nents, dir)
dma_unmap_sg_attrs  macro  include/linux/dma-mapping.h  219  #define dma_unmap_sg_attrs(dev,sgl,nents,dir,attrs) dma_unmap_sg(dev, sgl, nents, dir)
DEFINE_DMA_UNMAP_ADDR  macro  include/linux/dma-mapping.h  232  #define DEFINE_DMA_UNMAP_ADDR(ADDR_NAME)
DEFINE_DMA_UNMAP_LEN  macro  include/linux/dma-mapping.h  233  #define DEFINE_DMA_UNMAP_LEN(LEN_NAME)
dma_unmap_addr  macro  include/linux/dma-mapping.h  234  #define dma_unmap_addr(PTR,ADDR_NAME) (0)
dma_unmap_addr_set  macro  include/linux/dma-mapping.h  235  #define dma_unmap_addr_set(PTR,ADDR_NAME,VAL) do { } while (0)
dma_unmap_len  macro  include/linux/dma-mapping.h  236  #define dma_unmap_len(PTR,LEN_NAME) (0)
dma_unmap_len_set  macro  include/linux/dma-mapping.h  237  #define dma_unmap_len_set(PTR,LEN_NAME,VAL) do { } while (0)
_LINUX_BLKDEV_H  macro  include/linux/blkdev.h  2  #define _LINUX_BLKDEV_H
BLKDEV_MIN_RQ  macro  include/linux/blkdev.h  37  #define BLKDEV_MIN_RQ 4
BLKDEV_MAX_RQ  macro  include/linux/blkdev.h  38  #define BLKDEV_MAX_RQ 128
BLKCG_MAX_POLS  macro  include/linux/blkdev.h  44  #define BLKCG_MAX_POLS 2
BLK_RL_SYNCFULL  macro  include/linux/blkdev.h  49  #define BLK_RL_SYNCFULL (1U << 0)
BLK_RL_ASYNCFULL  macro  include/linux/blkdev.h  50  #define BLK_RL_ASYNCFULL (1U << 1)
request_list  struct  include/linux/blkdev.h  52  struct request_list { struct request_queue *q; struct blkcg_gq *blkg; int count[2]; int starved[2]; mempool_t *rq_pool; wait_queue_head_t wait[2]; unsigned int flags; };
rq_cmd_type_bits  enum  include/linux/blkdev.h  71  enum rq_cmd_type_bits { REQ_TYPE_FS = 1, REQ_TYPE_BLOCK_PC, REQ_TYPE_SENSE, REQ_TYPE_PM_SUSPEND, REQ_TYPE_PM_RESUME, REQ_TYPE_PM_SHUTDOWN, REQ_TYPE_SPECIAL, REQ_TYPE_ATA_TASKFILE, REQ_TYPE_ATA_PC, };
BLK_MAX_CDB  macro  include/linux/blkdev.h  88  #define BLK_MAX_CDB 16
request  struct  include/linux/blkdev.h  95  struct request { struct list_head queuelist; struct call_single_data csd; struct request_queue *q; unsigned int cmd_flags; enum rq_cmd_type_bits cmd_type; unsigned long atomic_flags; int cpu; unsigned int __data_len; sector_t __sector; struct bio *bio; struct bio *biotail; struct hlist_node hash; struct rb_node rb_node; void *completion_data; }; struct io_cq *icq; void *priv[2]; } elv; struct { unsigned int seq; struct list_head list; rq_end_io_fn *saved_end_io; } flush; }; struct gendisk *rq_disk; struct hd_struct *part; unsigned long start_time; struct request_list *rl; unsigned long long start_time_ns; unsigned long long io_start_time_ns; unsigned short nr_phys_segments; unsigned short nr_integrity_segments; unsigned short ioprio; int ref_count; void *special; char *buffer; int tag; int errors; unsigned char __cmd[BLK_MAX_CDB]; unsigned char *cmd; unsigned short cmd_len; unsigned int extra_len; unsigned int sense_len; unsigned int resid_len; void *sense; unsigned long deadline; struct list_head timeout_list; unsigned int timeout; int retries; rq_end_io_fn *end_io; void *end_io_data; struct request *next_rq; };
req_get_ioprio  function  include/linux/blkdev.h  197  static inline unsigned short req_get_ioprio(struct request *req)
request_pm_state  struct  include/linux/blkdev.h  206  struct request_pm_state { int pm_step; u32 pm_state; void* data; };
bvec_merge_data  struct  include/linux/blkdev.h  223  struct bvec_merge_data { struct block_device *bi_bdev; sector_t bi_sector; unsigned bi_size; unsigned long bi_rw; };
blk_eh_timer_return  enum  include/linux/blkdev.h  236  enum blk_eh_timer_return { BLK_EH_NOT_HANDLED, BLK_EH_HANDLED, BLK_EH_RESET_TIMER, };
blk_queue_state  enum  include/linux/blkdev.h  244  enum blk_queue_state { Queue_down, Queue_up, };
blk_queue_tag  struct  include/linux/blkdev.h  249  struct blk_queue_tag { struct request **tag_index; unsigned long *tag_map; int busy; int max_depth; int real_max_depth; atomic_t refcnt; };
BLK_SCSI_MAX_CMDS  macro  include/linux/genhd.h  147  #define BLK_SCSI_MAX_CMDS (256)
BLK_SCSI_CMD_PER_LONG  macro  include/linux/genhd.h  148  #define BLK_SCSI_CMD_PER_LONG (BLK_SCSI_MAX_CMDS / (sizeof(long) * 8))
queue_limits  struct  include/linux/blkdev.h  261  struct queue_limits { unsigned long bounce_pfn; unsigned long seg_boundary_mask; unsigned int max_hw_sectors; unsigned int max_sectors; unsigned int max_segment_size; unsigned int physical_block_size; unsigned int alignment_offset; unsigned int io_min; unsigned int io_opt; unsigned int max_discard_sectors; unsigned int max_write_same_sectors; unsigned int discard_granularity; unsigned int discard_alignment; unsigned short logical_block_size; unsigned short max_segments; unsigned short max_integrity_segments; unsigned char misaligned; unsigned char discard_misaligned; unsigned char cluster; unsigned char discard_zeroes_data; };
request_queue  struct  include/linux/blkdev.h  287  struct request_queue { struct list_head queue_head; struct request *last_merge; struct elevator_queue *elevator; int nr_rqs[2]; int nr_rqs_elvpriv; struct request_list root_rl; request_fn_proc *request_fn; make_request_fn *make_request_fn; prep_rq_fn *prep_rq_fn; unprep_rq_fn *unprep_rq_fn; merge_bvec_fn *merge_bvec_fn; softirq_done_fn *softirq_done_fn; rq_timed_out_fn *rq_timed_out_fn; dma_drain_needed_fn *dma_drain_needed; lld_busy_fn *lld_busy_fn; sector_t end_sector; struct request *boundary_rq; struct delayed_work delay_work; struct backing_dev_info backing_dev_info; void *queuedata; unsigned long queue_flags; int id; gfp_t bounce_gfp; spinlock_t __queue_lock; spinlock_t *queue_lock; struct kobject kobj; unsigned long nr_requests; unsigned int nr_congestion_on; unsigned int nr_congestion_off; unsigned int nr_batching; unsigned int dma_drain_size; void *dma_drain_buffer; unsigned int dma_pad_mask; unsigned int dma_alignment; struct blk_queue_tag *queue_tags; struct list_head tag_busy_list; unsigned int nr_sorted; unsigned int in_flight[2]; unsigned int request_fn_active; unsigned int rq_timeout; struct timer_list timeout; struct list_head timeout_list; struct list_head icq_list; DECLARE_BITMAP (blkcg_pols, BLKCG_MAX_POLS); struct blkcg_gq *root_blkg; struct list_head blkg_list; struct queue_limits limits; unsigned int sg_timeout; unsigned int sg_reserved_size; int node; struct blk_trace *blk_trace; unsigned int flush_flags; unsigned int flush_not_queueable:1; unsigned int flush_queue_delayed:1; unsigned int flush_pending_idx:1; unsigned int flush_running_idx:1; unsigned long flush_pending_since; struct list_head flush_queue[2]; struct list_head flush_data_in_flight; struct request flush_rq; struct mutex sysfs_lock; int bypass_depth; bsg_job_fn *bsg_job_fn; int bsg_job_size; struct bsg_class_device bsg_dev; struct list_head all_q_node; struct throtl_data *td; };
QUEUE_FLAG_QUEUED  macro  include/linux/blkdev.h  442  #define QUEUE_FLAG_QUEUED 1
QUEUE_FLAG_STOPPED  macro  include/linux/blkdev.h  443  #define QUEUE_FLAG_STOPPED 2
QUEUE_FLAG_SYNCFULL  macro  include/linux/blkdev.h  444  #define QUEUE_FLAG_SYNCFULL 3
QUEUE_FLAG_ASYNCFULL  macro  include/linux/blkdev.h  445  #define QUEUE_FLAG_ASYNCFULL 4
QUEUE_FLAG_DYING  macro  include/linux/blkdev.h  446  #define QUEUE_FLAG_DYING 5
QUEUE_FLAG_BYPASS  macro  include/linux/blkdev.h  447  #define QUEUE_FLAG_BYPASS 6
QUEUE_FLAG_BIDI  macro  include/linux/blkdev.h  448  #define QUEUE_FLAG_BIDI 7
QUEUE_FLAG_NOMERGES  macro  include/linux/blkdev.h  449  #define QUEUE_FLAG_NOMERGES 8
QUEUE_FLAG_SAME_COMP  macro  include/linux/blkdev.h  450  #define QUEUE_FLAG_SAME_COMP 9
QUEUE_FLAG_FAIL_IO  macro  include/linux/blkdev.h  451  #define QUEUE_FLAG_FAIL_IO 10
QUEUE_FLAG_STACKABLE  macro  include/linux/blkdev.h  452  #define QUEUE_FLAG_STACKABLE 11
QUEUE_FLAG_NONROT  macro  include/linux/blkdev.h  453  #define QUEUE_FLAG_NONROT 12
QUEUE_FLAG_VIRT  macro  include/linux/blkdev.h  454  #define QUEUE_FLAG_VIRT QUEUE_FLAG_NONROT
QUEUE_FLAG_IO_STAT  macro  include/linux/blkdev.h  455  #define QUEUE_FLAG_IO_STAT 13
QUEUE_FLAG_DISCARD  macro  include/linux/blkdev.h  456  #define QUEUE_FLAG_DISCARD 14
QUEUE_FLAG_NOXMERGES  macro  include/linux/blkdev.h  457  #define QUEUE_FLAG_NOXMERGES 15
QUEUE_FLAG_ADD_RANDOM  macro  include/linux/blkdev.h  458  #define QUEUE_FLAG_ADD_RANDOM 16
QUEUE_FLAG_SECDISCARD  macro  include/linux/blkdev.h  459  #define QUEUE_FLAG_SECDISCARD 17
QUEUE_FLAG_SAME_FORCE  macro  include/linux/blkdev.h  460  #define QUEUE_FLAG_SAME_FORCE 18
QUEUE_FLAG_DEAD  macro  include/linux/blkdev.h  461  #define QUEUE_FLAG_DEAD 19
QUEUE_FLAG_DEFAULT  macro  include/linux/blkdev.h  463  #define QUEUE_FLAG_DEFAULT ((1 << QUEUE_FLAG_IO_STAT) | (1 << QUEUE_FLAG_STACKABLE)	| (1 << QUEUE_FLAG_SAME_COMP)	| (1 << QUEUE_FLAG_ADD_RANDOM))
queue_lockdep_assert_held  function  include/linux/blkdev.h  468  static inline void queue_lockdep_assert_held(struct request_queue *q)
queue_flag_set_unlocked  function  include/linux/blkdev.h  474  static inline void queue_flag_set_unlocked(unsigned int flag,struct request_queue *q)
queue_flag_test_and_clear  function  include/linux/blkdev.h  480  static inline int queue_flag_test_and_clear(unsigned int flag,struct request_queue *q)
queue_flag_test_and_set  function  include/linux/blkdev.h  493  static inline int queue_flag_test_and_set(unsigned int flag,struct request_queue *q)
queue_flag_set  function  include/linux/blkdev.h  506  static inline void queue_flag_set(unsigned int flag,struct request_queue *q)
queue_flag_clear_unlocked  function  include/linux/blkdev.h  512  static inline void queue_flag_clear_unlocked(unsigned int flag,struct request_queue *q)
queue_in_flight  function  include/linux/blkdev.h  518  static inline int queue_in_flight(struct request_queue *q)
queue_flag_clear  function  include/linux/blkdev.h  523  static inline void queue_flag_clear(unsigned int flag,struct request_queue *q)
blk_queue_tagged  macro  include/linux/blkdev.h  529  #define blk_queue_tagged(q) test_bit(QUEUE_FLAG_QUEUED,&(q)->queue_flags)
blk_queue_stopped  macro  include/linux/blkdev.h  530  #define blk_queue_stopped(q) test_bit(QUEUE_FLAG_STOPPED,&(q)->queue_flags)
blk_queue_dying  macro  include/linux/blkdev.h  531  #define blk_queue_dying(q) test_bit(QUEUE_FLAG_DYING,&(q)->queue_flags)
blk_queue_dead  macro  include/linux/blkdev.h  532  #define blk_queue_dead(q) test_bit(QUEUE_FLAG_DEAD,&(q)->queue_flags)
blk_queue_bypass  macro  include/linux/blkdev.h  533  #define blk_queue_bypass(q) test_bit(QUEUE_FLAG_BYPASS,&(q)->queue_flags)
blk_queue_nomerges  macro  include/linux/blkdev.h  534  #define blk_queue_nomerges(q) test_bit(QUEUE_FLAG_NOMERGES,&(q)->queue_flags)
blk_queue_noxmerges  macro  include/linux/blkdev.h  535  #define blk_queue_noxmerges(q) test_bit(QUEUE_FLAG_NOXMERGES, &(q)->queue_flags)
blk_queue_nonrot  macro  include/linux/blkdev.h  537  #define blk_queue_nonrot(q) test_bit(QUEUE_FLAG_NONROT,&(q)->queue_flags)
blk_queue_io_stat  macro  include/linux/blkdev.h  538  #define blk_queue_io_stat(q) test_bit(QUEUE_FLAG_IO_STAT,&(q)->queue_flags)
blk_queue_add_random  macro  include/linux/blkdev.h  539  #define blk_queue_add_random(q) test_bit(QUEUE_FLAG_ADD_RANDOM,&(q)->queue_flags)
blk_queue_stackable  macro  include/linux/blkdev.h  540  #define blk_queue_stackable(q) test_bit(QUEUE_FLAG_STACKABLE, &(q)->queue_flags)
blk_queue_discard  macro  include/linux/blkdev.h  542  #define blk_queue_discard(q) test_bit(QUEUE_FLAG_DISCARD,&(q)->queue_flags)
blk_queue_secdiscard  macro  include/linux/blkdev.h  543  #define blk_queue_secdiscard(q) (blk_queue_discard(q) && test_bit(QUEUE_FLAG_SECDISCARD, &(q)->queue_flags))
blk_noretry_request  macro  include/linux/blkdev.h  546  #define blk_noretry_request(rq) ((rq)->cmd_flags & (REQ_FAILFAST_DEV|REQ_FAILFAST_TRANSPORT| REQ_FAILFAST_DRIVER))
blk_account_rq  macro  include/linux/blkdev.h  550  #define blk_account_rq(rq) (((rq)->cmd_flags & REQ_STARTED) && ((rq)->cmd_type == REQ_TYPE_FS))
blk_pm_request  macro  include/linux/blkdev.h  554  #define blk_pm_request(rq) ((rq)->cmd_type == REQ_TYPE_PM_SUSPEND || (rq)->cmd_type == REQ_TYPE_PM_RESUME)
blk_rq_cpu_valid  macro  include/linux/blkdev.h  558  #define blk_rq_cpu_valid(rq) ((rq)->cpu != -1)
blk_bidi_rq  macro  include/linux/blkdev.h  559  #define blk_bidi_rq(rq) ((rq)->next_rq != NULL)
blk_queued_rq  macro  include/linux/blkdev.h  561  #define blk_queued_rq(rq) (!list_empty(&(rq)->queuelist))
list_entry_rq  macro  include/linux/blkdev.h  563  #define list_entry_rq(ptr) list_entry((ptr),struct request,queuelist)
rq_data_dir  macro  include/linux/blkdev.h  565  #define rq_data_dir(rq) ((rq)->cmd_flags & 1)
blk_queue_cluster  function  include/linux/blkdev.h  567  static inline unsigned int blk_queue_cluster(struct request_queue *q)
rw_is_sync  function  include/linux/blkdev.h  575  static inline bool rw_is_sync(unsigned int rw_flags)
rq_is_sync  function  include/linux/blkdev.h  580  static inline bool rq_is_sync(struct request *rq)
blk_rl_full  function  include/linux/blkdev.h  585  static inline bool blk_rl_full(struct request_list *rl,bool sync)
blk_set_rl_full  function  include/linux/blkdev.h  592  static inline void blk_set_rl_full(struct request_list *rl,bool sync)
blk_clear_rl_full  function  include/linux/blkdev.h  599  static inline void blk_clear_rl_full(struct request_list *rl,bool sync)
rq_mergeable  function  include/linux/blkdev.h  606  static inline bool rq_mergeable(struct request *rq)
blk_check_merge_flags  function  include/linux/blkdev.h  617  static inline bool blk_check_merge_flags(unsigned int flags1,unsigned int flags2)
blk_write_same_mergeable  function  include/linux/blkdev.h  632  static inline bool blk_write_same_mergeable(struct bio *a,struct bio *b)
BLKPREP_OK  macro  include/linux/blkdev.h  643  #define BLKPREP_OK 0
BLKPREP_KILL  macro  include/linux/blkdev.h  644  #define BLKPREP_KILL 1
BLKPREP_DEFER  macro  include/linux/blkdev.h  645  #define BLKPREP_DEFER 2
BLK_BOUNCE_HIGH  macro  include/linux/blkdev.h  660  #define BLK_BOUNCE_HIGH -1ULL
BLK_BOUNCE_ANY  macro  include/linux/blkdev.h  662  #define BLK_BOUNCE_ANY (-1ULL)
BLK_BOUNCE_ISA  macro  include/linux/blkdev.h  663  #define BLK_BOUNCE_ISA (DMA_BIT_MASK(24))
BLK_DEFAULT_SG_TIMEOUT  macro  include/linux/blkdev.h  668  #define BLK_DEFAULT_SG_TIMEOUT (60 * HZ)
BLK_MIN_SG_TIMEOUT  macro  include/linux/blkdev.h  669  #define BLK_MIN_SG_TIMEOUT (7 * HZ)
init_emergency_isa_pool  function  include/linux/blkdev.h  675  static inline int init_emergency_isa_pool(void)
blk_queue_bounce  function  include/linux/blkdev.h  679  static inline void blk_queue_bounce(struct request_queue *q,struct bio **bio)
rq_map_data  struct  include/linux/blkdev.h  684  struct rq_map_data { struct page **pages; int page_order; int nr_entries; unsigned long offset; int null_mapped; int from_user; };
req_iterator  struct  include/linux/blkdev.h  693  struct req_iterator { int i; struct bio *bio; };
for_each_bio  macro  include/linux/blkdev.h  699  #define for_each_bio(_bio) for (; _bio; _bio = _bio->bi_next)
__rq_for_each_bio  macro  include/linux/blkdev.h  701  #define __rq_for_each_bio(_bio,rq) if ((rq->bio)) for (_bio = (rq)->bio; _bio; _bio = _bio->bi_next)
rq_for_each_segment  macro  include/linux/blkdev.h  705  #define rq_for_each_segment(bvl,_rq,_iter) __rq_for_each_bio(_iter.bio, _rq) bio_for_each_segment(bvl, _iter.bio, _iter.i)
rq_iter_last  macro  include/linux/blkdev.h  709  #define rq_iter_last(rq,_iter) (_iter.bio->bi_next == NULL && _iter.i == _iter.bio->bi_vcnt-1)
rq_flush_dcache_pages  function  include/linux/blkdev.h  718  static inline void rq_flush_dcache_pages(struct request *rq)
blk_register_queue  prototype  include/linux/blkdev.h  723  extern int blk_register_queue(struct gendisk *disk);
blk_unregister_queue  prototype  include/linux/blkdev.h  724  extern void blk_unregister_queue(struct gendisk *disk);
generic_make_request  prototype  include/linux/blkdev.h  725  extern void generic_make_request(struct bio *bio);
blk_rq_init  prototype  include/linux/blkdev.h  726  extern void blk_rq_init(struct request_queue *q,struct request *rq);
blk_put_request  prototype  include/linux/blkdev.h  727  extern void blk_put_request(struct request *);
__blk_put_request  prototype  include/linux/blkdev.h  728  extern void __blk_put_request(struct request_queue *,struct request *);
blk_get_request  prototype  include/linux/blkdev.h  729  extern struct request *blk_get_request(struct request_queue *,int,gfp_t);
blk_make_request  prototype  include/linux/blkdev.h  730  extern struct request *blk_make_request(struct request_queue *,struct bio *,gfp_t);
blk_requeue_request  prototype  include/linux/blkdev.h  732  extern void blk_requeue_request(struct request_queue *,struct request *);
blk_add_request_payload  prototype  include/linux/blkdev.h  733  extern void blk_add_request_payload(struct request *rq,struct page *page,unsigned int len);
blk_rq_check_limits  prototype  include/linux/blkdev.h  735  extern int blk_rq_check_limits(struct request_queue *q,struct request *rq);
blk_lld_busy  prototype  include/linux/blkdev.h  736  extern int blk_lld_busy(struct request_queue *q);
blk_rq_prep_clone  prototype  include/linux/blkdev.h  737  extern int blk_rq_prep_clone(struct request *rq,struct request *rq_src,struct bio_set *bs, gfp_t gfp_mask,int (*bio_ctr)(struct bio *, struct bio *, void *),void *data);
blk_rq_unprep_clone  prototype  include/linux/blkdev.h  741  extern void blk_rq_unprep_clone(struct request *rq);
blk_insert_cloned_request  prototype  include/linux/blkdev.h  742  extern int blk_insert_cloned_request(struct request_queue *q,struct request *rq);
blk_delay_queue  prototype  include/linux/blkdev.h  744  extern void blk_delay_queue(struct request_queue *,unsigned long);
blk_recount_segments  prototype  include/linux/blkdev.h  745  extern void blk_recount_segments(struct request_queue *,struct bio *);
scsi_verify_blk_ioctl  prototype  include/linux/blkdev.h  746  extern int scsi_verify_blk_ioctl(struct block_device *,unsigned int);
scsi_cmd_blk_ioctl  prototype  include/linux/blkdev.h  747  extern int scsi_cmd_blk_ioctl(struct block_device *,fmode_t,unsigned int, void __user *);
scsi_cmd_ioctl  prototype  include/linux/blkdev.h  749  extern int scsi_cmd_ioctl(struct request_queue *,struct gendisk *,fmode_t,unsigned int, void __user *);
sg_scsi_ioctl  prototype  include/linux/blkdev.h  751  extern int sg_scsi_ioctl(struct request_queue *,struct gendisk *,fmode_t,struct scsi_ioctl_command __user *);
blk_queue_bio  prototype  include/linux/blkdev.h  754  extern void blk_queue_bio(struct request_queue *q,struct bio *bio);
blk_clear_queue_congested  function  include/linux/blkdev.h  761  static inline void blk_clear_queue_congested(struct request_queue *q,int sync)
blk_set_queue_congested  function  include/linux/blkdev.h  770  static inline void blk_set_queue_congested(struct request_queue *q,int sync)
blk_start_queue  prototype  include/linux/blkdev.h  775  extern void blk_start_queue(struct request_queue *q);
blk_stop_queue  prototype  include/linux/blkdev.h  776  extern void blk_stop_queue(struct request_queue *q);
blk_sync_queue  prototype  include/linux/blkdev.h  777  extern void blk_sync_queue(struct request_queue *q);
__blk_stop_queue  prototype  include/linux/blkdev.h  778  extern void __blk_stop_queue(struct request_queue *q);
__blk_run_queue  prototype  include/linux/blkdev.h  779  extern void __blk_run_queue(struct request_queue *q);
blk_run_queue  prototype  include/linux/blkdev.h  780  extern void blk_run_queue(struct request_queue *);
blk_run_queue_async  prototype  include/linux/blkdev.h  781  extern void blk_run_queue_async(struct request_queue *q);
blk_rq_map_user  prototype  include/linux/blkdev.h  782  extern int blk_rq_map_user(struct request_queue *,struct request *,struct rq_map_data *, void __user *, unsigned long,gfp_t);
blk_rq_unmap_user  prototype  include/linux/blkdev.h  785  extern int blk_rq_unmap_user(struct bio *);
blk_rq_map_kern  prototype  include/linux/blkdev.h  786  extern int blk_rq_map_kern(struct request_queue *,struct request *,void *,unsigned int,gfp_t);
blk_rq_map_user_iov  prototype  include/linux/blkdev.h  787  extern int blk_rq_map_user_iov(struct request_queue *,struct request *,struct rq_map_data *, struct sg_iovec *, int,unsigned int, gfp_t);
blk_execute_rq  prototype  include/linux/blkdev.h  790  extern int blk_execute_rq(struct request_queue *,struct gendisk *,struct request *, int);
blk_execute_rq_nowait  prototype  include/linux/blkdev.h  792  extern void blk_execute_rq_nowait(struct request_queue *,struct gendisk *,struct request *, int, rq_end_io_fn *);
bdev_get_queue  function  include/linux/blkdev.h  795  static inline struct request_queue *bdev_get_queue(struct block_device *bdev)
blk_rq_pos  function  include/linux/blkdev.h  808  static inline sector_t blk_rq_pos(const struct request *rq)
blk_rq_bytes  function  include/linux/blkdev.h  813  static inline unsigned int blk_rq_bytes(const struct request *rq)
blk_rq_cur_bytes  function  include/linux/blkdev.h  818  static inline int blk_rq_cur_bytes(const struct request *rq)
blk_rq_err_bytes  prototype  include/linux/blkdev.h  823  extern unsigned int blk_rq_err_bytes(const struct request *rq);
blk_rq_sectors  function  include/linux/blkdev.h  825  static inline unsigned int blk_rq_sectors(const struct request *rq)
blk_rq_cur_sectors  function  include/linux/blkdev.h  830  static inline unsigned int blk_rq_cur_sectors(const struct request *rq)
blk_queue_get_max_sectors  function  include/linux/blkdev.h  835  static inline unsigned int blk_queue_get_max_sectors(struct request_queue *q,unsigned int cmd_flags)
blk_rq_get_max_sectors  function  include/linux/blkdev.h  847  static inline unsigned int blk_rq_get_max_sectors(struct request *rq)
blk_peek_request  prototype  include/linux/blkdev.h  860  extern struct request *blk_peek_request(struct request_queue *q);
blk_start_request  prototype  include/linux/blkdev.h  861  extern void blk_start_request(struct request *rq);
blk_fetch_request  prototype  include/linux/blkdev.h  862  extern struct request *blk_fetch_request(struct request_queue *q);
blk_update_request  prototype  include/linux/blkdev.h  877  extern bool blk_update_request(struct request *rq,int error,unsigned int nr_bytes);
blk_end_request  prototype  include/linux/blkdev.h  879  extern bool blk_end_request(struct request *rq,int error,unsigned int nr_bytes);
blk_end_request_all  prototype  include/linux/blkdev.h  881  extern void blk_end_request_all(struct request *rq,int error);
blk_end_request_cur  prototype  include/linux/blkdev.h  882  extern bool blk_end_request_cur(struct request *rq,int error);
blk_end_request_err  prototype  include/linux/blkdev.h  883  extern bool blk_end_request_err(struct request *rq,int error);
__blk_end_request  prototype  include/linux/blkdev.h  884  extern bool __blk_end_request(struct request *rq,int error,unsigned int nr_bytes);
__blk_end_request_all  prototype  include/linux/blkdev.h  886  extern void __blk_end_request_all(struct request *rq,int error);
__blk_end_request_cur  prototype  include/linux/blkdev.h  887  extern bool __blk_end_request_cur(struct request *rq,int error);
__blk_end_request_err  prototype  include/linux/blkdev.h  888  extern bool __blk_end_request_err(struct request *rq,int error);
blk_complete_request  prototype  include/linux/blkdev.h  890  extern void blk_complete_request(struct request *);
__blk_complete_request  prototype  include/linux/blkdev.h  891  extern void __blk_complete_request(struct request *);
blk_abort_request  prototype  include/linux/blkdev.h  892  extern void blk_abort_request(struct request *);
blk_unprep_request  prototype  include/linux/blkdev.h  893  extern void blk_unprep_request(struct request *);
blk_init_queue_node  prototype  include/linux/blkdev.h  898  extern struct request_queue *blk_init_queue_node(request_fn_proc *rfn,spinlock_t *lock, int node_id);
blk_init_queue  prototype  include/linux/blkdev.h  900  extern struct request_queue *blk_init_queue(request_fn_proc *,spinlock_t *);
blk_init_allocated_queue  prototype  include/linux/blkdev.h  901  extern struct request_queue *blk_init_allocated_queue(struct request_queue *,request_fn_proc *, spinlock_t *);
blk_cleanup_queue  prototype  include/linux/blkdev.h  903  extern void blk_cleanup_queue(struct request_queue *);
blk_queue_make_request  prototype  include/linux/blkdev.h  904  extern void blk_queue_make_request(struct request_queue *,make_request_fn *);
blk_queue_bounce_limit  prototype  include/linux/blkdev.h  905  extern void blk_queue_bounce_limit(struct request_queue *,u64);
blk_limits_max_hw_sectors  prototype  include/linux/blkdev.h  906  extern void blk_limits_max_hw_sectors(struct queue_limits *,unsigned int);
blk_queue_max_hw_sectors  prototype  include/linux/blkdev.h  907  extern void blk_queue_max_hw_sectors(struct request_queue *,unsigned int);
blk_queue_max_segments  prototype  include/linux/blkdev.h  908  extern void blk_queue_max_segments(struct request_queue *,unsigned short);
blk_queue_max_segment_size  prototype  include/linux/blkdev.h  909  extern void blk_queue_max_segment_size(struct request_queue *,unsigned int);
blk_queue_max_discard_sectors  prototype  include/linux/blkdev.h  910  extern void blk_queue_max_discard_sectors(struct request_queue *q,unsigned int max_discard_sectors);
blk_queue_max_write_same_sectors  prototype  include/linux/blkdev.h  912  extern void blk_queue_max_write_same_sectors(struct request_queue *q,unsigned int max_write_same_sectors);
blk_queue_logical_block_size  prototype  include/linux/blkdev.h  914  extern void blk_queue_logical_block_size(struct request_queue *,unsigned short);
blk_queue_physical_block_size  prototype  include/linux/blkdev.h  915  extern void blk_queue_physical_block_size(struct request_queue *,unsigned int);
blk_queue_alignment_offset  prototype  include/linux/blkdev.h  916  extern void blk_queue_alignment_offset(struct request_queue *q,unsigned int alignment);
blk_limits_io_min  prototype  include/linux/blkdev.h  918  extern void blk_limits_io_min(struct queue_limits *limits,unsigned int min);
blk_queue_io_min  prototype  include/linux/blkdev.h  919  extern void blk_queue_io_min(struct request_queue *q,unsigned int min);
blk_limits_io_opt  prototype  include/linux/blkdev.h  920  extern void blk_limits_io_opt(struct queue_limits *limits,unsigned int opt);
blk_queue_io_opt  prototype  include/linux/blkdev.h  921  extern void blk_queue_io_opt(struct request_queue *q,unsigned int opt);
blk_set_default_limits  prototype  include/linux/blkdev.h  922  extern void blk_set_default_limits(struct queue_limits *lim);
blk_set_stacking_limits  prototype  include/linux/blkdev.h  923  extern void blk_set_stacking_limits(struct queue_limits *lim);
blk_stack_limits  prototype  include/linux/blkdev.h  924  extern int blk_stack_limits(struct queue_limits *t,struct queue_limits *b,sector_t offset);
bdev_stack_limits  prototype  include/linux/blkdev.h  926  extern int bdev_stack_limits(struct queue_limits *t,struct block_device *bdev,sector_t offset);
disk_stack_limits  prototype  include/linux/blkdev.h  928  extern void disk_stack_limits(struct gendisk *disk,struct block_device *bdev,sector_t offset);
blk_queue_stack_limits  prototype  include/linux/blkdev.h  930  extern void blk_queue_stack_limits(struct request_queue *t,struct request_queue *b);
blk_queue_dma_pad  prototype  include/linux/blkdev.h  931  extern void blk_queue_dma_pad(struct request_queue *,unsigned int);
blk_queue_update_dma_pad  prototype  include/linux/blkdev.h  932  extern void blk_queue_update_dma_pad(struct request_queue *,unsigned int);
blk_queue_dma_drain  prototype  include/linux/blkdev.h  933  extern int blk_queue_dma_drain(struct request_queue *q,dma_drain_needed_fn *dma_drain_needed,void *buf, unsigned int size);
blk_queue_lld_busy  prototype  include/linux/blkdev.h  936  extern void blk_queue_lld_busy(struct request_queue *q,lld_busy_fn *fn);
blk_queue_segment_boundary  prototype  include/linux/blkdev.h  937  extern void blk_queue_segment_boundary(struct request_queue *,unsigned long);
blk_queue_prep_rq  prototype  include/linux/blkdev.h  938  extern void blk_queue_prep_rq(struct request_queue *,prep_rq_fn *pfn);
blk_queue_unprep_rq  prototype  include/linux/blkdev.h  939  extern void blk_queue_unprep_rq(struct request_queue *,unprep_rq_fn *ufn);
blk_queue_merge_bvec  prototype  include/linux/blkdev.h  940  extern void blk_queue_merge_bvec(struct request_queue *,merge_bvec_fn *);
blk_queue_dma_alignment  prototype  include/linux/blkdev.h  941  extern void blk_queue_dma_alignment(struct request_queue *,int);
blk_queue_update_dma_alignment  prototype  include/linux/blkdev.h  942  extern void blk_queue_update_dma_alignment(struct request_queue *,int);
blk_queue_softirq_done  prototype  include/linux/blkdev.h  943  extern void blk_queue_softirq_done(struct request_queue *,softirq_done_fn *);
blk_queue_rq_timed_out  prototype  include/linux/blkdev.h  944  extern void blk_queue_rq_timed_out(struct request_queue *,rq_timed_out_fn *);
blk_queue_rq_timeout  prototype  include/linux/blkdev.h  945  extern void blk_queue_rq_timeout(struct request_queue *,unsigned int);
blk_queue_flush  prototype  include/linux/blkdev.h  946  extern void blk_queue_flush(struct request_queue *q,unsigned int flush);
blk_queue_flush_queueable  prototype  include/linux/blkdev.h  947  extern void blk_queue_flush_queueable(struct request_queue *q,bool queueable);
blk_get_backing_dev_info  prototype  include/linux/blkdev.h  948  extern struct backing_dev_info *blk_get_backing_dev_info(struct block_device *bdev);
blk_rq_map_sg  prototype  include/linux/blkdev.h  950  extern int blk_rq_map_sg(struct request_queue *,struct request *,struct scatterlist *);
blk_bio_map_sg  prototype  include/linux/blkdev.h  951  extern int blk_bio_map_sg(struct request_queue *q,struct bio *bio,struct scatterlist *sglist);
blk_dump_rq_flags  prototype  include/linux/blkdev.h  953  extern void blk_dump_rq_flags(struct request *,char *);
nr_blockdev_pages  function  include/linux/blkdev.h  1511  static inline long nr_blockdev_pages(void)
blk_get_queue  prototype  include/linux/blkdev.h  956  bool __must_check blk_get_queue(struct request_queue *);
blk_alloc_queue  prototype  include/linux/blkdev.h  957  struct request_queue *blk_alloc_queue(gfp_t);
blk_alloc_queue_node  prototype  include/linux/blkdev.h  958  struct request_queue *blk_alloc_queue_node(gfp_t,int);
blk_put_queue  prototype  include/linux/blkdev.h  959  extern void blk_put_queue(struct request_queue *);
blk_plug  struct  include/linux/blkdev.h  1516  struct blk_plug { };
BLK_MAX_REQUEST_COUNT  macro  include/linux/blkdev.h  979  #define BLK_MAX_REQUEST_COUNT 16
blk_plug_cb  struct  include/linux/blkdev.h  983  struct blk_plug_cb { struct list_head list; blk_plug_cb_fn callback; void *data; };
blk_check_plugged  prototype  include/linux/blkdev.h  988  extern struct blk_plug_cb *blk_check_plugged(blk_plug_cb_fn unplug,void *data, int size);
blk_start_plug  function  include/linux/blkdev.h  1519  static inline void blk_start_plug(struct blk_plug *plug)
blk_finish_plug  function  include/linux/blkdev.h  1523  static inline void blk_finish_plug(struct blk_plug *plug)
blk_flush_plug_list  prototype  include/linux/blkdev.h  992  extern void blk_flush_plug_list(struct blk_plug *,bool);
blk_flush_plug  function  include/linux/blkdev.h  1527  static inline void blk_flush_plug(struct task_struct *task)
blk_schedule_flush_plug  function  include/linux/blkdev.h  1531  static inline void blk_schedule_flush_plug(struct task_struct *task)
blk_needs_flush_plug  function  include/linux/blkdev.h  1536  static inline bool blk_needs_flush_plug(struct task_struct *tsk)
blk_rq_tagged  macro  include/linux/blkdev.h  1020  #define blk_rq_tagged(rq) ((rq)->cmd_flags & REQ_QUEUED)
blk_queue_start_tag  prototype  include/linux/blkdev.h  1021  extern int blk_queue_start_tag(struct request_queue *,struct request *);
blk_queue_find_tag  prototype  include/linux/blkdev.h  1022  extern struct request *blk_queue_find_tag(struct request_queue *,int);
blk_queue_end_tag  prototype  include/linux/blkdev.h  1023  extern void blk_queue_end_tag(struct request_queue *,struct request *);
blk_queue_init_tags  prototype  include/linux/blkdev.h  1024  extern int blk_queue_init_tags(struct request_queue *,int,struct blk_queue_tag *);
blk_queue_free_tags  prototype  include/linux/blkdev.h  1025  extern void blk_queue_free_tags(struct request_queue *);
blk_queue_resize_tags  prototype  include/linux/blkdev.h  1026  extern int blk_queue_resize_tags(struct request_queue *,int);
blk_queue_invalidate_tags  prototype  include/linux/blkdev.h  1027  extern void blk_queue_invalidate_tags(struct request_queue *);
blk_init_tags  prototype  include/linux/blkdev.h  1028  extern struct blk_queue_tag *blk_init_tags(int);
blk_free_tags  prototype  include/linux/blkdev.h  1029  extern void blk_free_tags(struct blk_queue_tag *);
blk_map_queue_find_tag  function  include/linux/blkdev.h  1031  static inline struct request *blk_map_queue_find_tag(struct blk_queue_tag *bqt,int tag)
BLKDEV_DISCARD_SECURE  macro  include/linux/blkdev.h  1039  #define BLKDEV_DISCARD_SECURE 0x01
blkdev_issue_flush  prototype  include/linux/blkdev.h  1041  extern int blkdev_issue_flush(struct block_device *,gfp_t,sector_t *);
blkdev_issue_discard  prototype  include/linux/blkdev.h  1042  extern int blkdev_issue_discard(struct block_device *bdev,sector_t sector,sector_t nr_sects, gfp_t gfp_mask, unsigned long flags);
blkdev_issue_write_same  prototype  include/linux/blkdev.h  1044  extern int blkdev_issue_write_same(struct block_device *bdev,sector_t sector,sector_t nr_sects, gfp_t gfp_mask, struct page *page);
blkdev_issue_zeroout  prototype  include/linux/blkdev.h  1046  extern int blkdev_issue_zeroout(struct block_device *bdev,sector_t sector,sector_t nr_sects, gfp_t gfp_mask);
sb_issue_discard  function  include/linux/blkdev.h  1048  static inline int sb_issue_discard(struct super_block *sb,sector_t block,sector_t nr_blocks, gfp_t gfp_mask, unsigned long flags)
sb_issue_zeroout  function  include/linux/blkdev.h  1055  static inline int sb_issue_zeroout(struct super_block *sb,sector_t block,sector_t nr_blocks, gfp_t gfp_mask)
blk_verify_command  prototype  include/linux/blkdev.h  1064  extern int blk_verify_command(unsigned char *cmd,fmode_t has_write_perm);
blk_default_limits  enum  include/linux/blkdev.h  1066  enum blk_default_limits { BLK_MAX_SEGMENTS = 128, BLK_SAFE_MAX_SECTORS = 255, BLK_DEF_MAX_SECTORS = 1024, BLK_MAX_SEGMENT_SIZE = 65536, BLK_SEG_BOUNDARY_MASK = 0xFFFFFFFFUL, };
blkdev_entry_to_request  macro  include/linux/blkdev.h  1074  #define blkdev_entry_to_request(entry) list_entry((entry),struct request,queuelist)
queue_bounce_pfn  function  include/linux/blkdev.h  1076  static inline unsigned long queue_bounce_pfn(struct request_queue *q)
queue_segment_boundary  function  include/linux/blkdev.h  1081  static inline unsigned long queue_segment_boundary(struct request_queue *q)
queue_max_sectors  function  include/linux/blkdev.h  1086  static inline unsigned int queue_max_sectors(struct request_queue *q)
queue_max_hw_sectors  function  include/linux/blkdev.h  1091  static inline unsigned int queue_max_hw_sectors(struct request_queue *q)
queue_max_segments  function  include/linux/blkdev.h  1096  static inline unsigned short queue_max_segments(struct request_queue *q)
queue_max_segment_size  function  include/linux/blkdev.h  1101  static inline unsigned int queue_max_segment_size(struct request_queue *q)
queue_logical_block_size  function  include/linux/blkdev.h  1106  static inline unsigned short queue_logical_block_size(struct request_queue *q)
bdev_logical_block_size  function  include/linux/blkdev.h  1116  static inline unsigned short bdev_logical_block_size(struct block_device *bdev)
queue_physical_block_size  function  include/linux/blkdev.h  1121  static inline unsigned int queue_physical_block_size(struct request_queue *q)
bdev_physical_block_size  function  include/linux/blkdev.h  1126  static inline unsigned int bdev_physical_block_size(struct block_device *bdev)
queue_io_min  function  include/linux/blkdev.h  1131  static inline unsigned int queue_io_min(struct request_queue *q)
bdev_io_min  function  include/linux/blkdev.h  1136  static inline int bdev_io_min(struct block_device *bdev)
queue_io_opt  function  include/linux/blkdev.h  1141  static inline unsigned int queue_io_opt(struct request_queue *q)
bdev_io_opt  function  include/linux/blkdev.h  1146  static inline int bdev_io_opt(struct block_device *bdev)
queue_alignment_offset  function  include/linux/blkdev.h  1151  static inline int queue_alignment_offset(struct request_queue *q)
queue_limit_alignment_offset  function  include/linux/blkdev.h  1159  static inline int queue_limit_alignment_offset(struct queue_limits *lim,sector_t sector)
bdev_alignment_offset  function  include/linux/blkdev.h  1168  static inline int bdev_alignment_offset(struct block_device *bdev)
queue_discard_alignment  function  include/linux/blkdev.h  1181  static inline int queue_discard_alignment(struct request_queue *q)
queue_limit_discard_alignment  function  include/linux/blkdev.h  1189  static inline int queue_limit_discard_alignment(struct queue_limits *lim,sector_t sector)
bdev_discard_alignment  function  include/linux/blkdev.h  1212  static inline int bdev_discard_alignment(struct block_device *bdev)
queue_discard_zeroes_data  function  include/linux/blkdev.h  1222  static inline unsigned int queue_discard_zeroes_data(struct request_queue *q)
bdev_discard_zeroes_data  function  include/linux/blkdev.h  1230  static inline unsigned int bdev_discard_zeroes_data(struct block_device *bdev)
bdev_write_same  function  include/linux/blkdev.h  1235  static inline unsigned int bdev_write_same(struct block_device *bdev)
queue_dma_alignment  function  include/linux/blkdev.h  1245  static inline int queue_dma_alignment(struct request_queue *q)
blk_rq_aligned  function  include/linux/blkdev.h  1250  static inline int blk_rq_aligned(struct request_queue *q,unsigned long addr,unsigned int len)
blksize_bits  function  include/linux/blkdev.h  1258  static inline unsigned int blksize_bits(unsigned int size)
block_size  function  include/linux/blkdev.h  1268  static inline unsigned int block_size(struct block_device *bdev)
queue_flush_queueable  function  include/linux/blkdev.h  1273  static inline bool queue_flush_queueable(struct request_queue *q)
Sector  struct  include/linux/blkdev.h  1278  typedef struct {struct page *v;} Sector;
read_dev_sector  prototype  include/linux/blkdev.h  1280  unsigned char *read_dev_sector(struct block_device *,sector_t,Sector *);
put_dev_sector  function  include/linux/blkdev.h  1282  static inline void put_dev_sector(Sector p)
kblockd_schedule_work  prototype  include/linux/blkdev.h  1288  int kblockd_schedule_work(struct request_queue *q,struct work_struct *work);
set_start_time_ns  function  include/linux/blkdev.h  1320  static inline void set_start_time_ns(struct request *req) {}
set_io_start_time_ns  function  include/linux/blkdev.h  1321  static inline void set_io_start_time_ns(struct request *req) {}
rq_start_time_ns  function  include/linux/blkdev.h  1322  static inline uint64_t rq_start_time_ns(struct request *req)
rq_io_start_time_ns  function  include/linux/blkdev.h  1326  static inline uint64_t rq_io_start_time_ns(struct request *req)
MODULE_ALIAS_BLOCKDEV  macro  include/linux/blkdev.h  1332  #define MODULE_ALIAS_BLOCKDEV(major,minor) MODULE_ALIAS("block-major-" __stringify(major) "-" __stringify(minor))
MODULE_ALIAS_BLOCKDEV_MAJOR  macro  include/linux/blkdev.h  1334  #define MODULE_ALIAS_BLOCKDEV_MAJOR(major) MODULE_ALIAS("block-major-" __stringify(major) "-*")
INTEGRITY_FLAG_READ  macro  include/linux/blkdev.h  1339  #define INTEGRITY_FLAG_READ 2
INTEGRITY_FLAG_WRITE  macro  include/linux/blkdev.h  1340  #define INTEGRITY_FLAG_WRITE 4
blk_integrity_exchg  struct  include/linux/blkdev.h  1342  struct blk_integrity_exchg { void *prot_buf; void *data_buf; sector_t sector; unsigned int data_size; unsigned short sector_size; const char *disk_name; };
blk_integrity  struct  include/linux/blkdev.h  1356  struct blk_integrity { integrity_gen_fn *generate_fn; integrity_vrfy_fn *verify_fn; integrity_set_tag_fn *set_tag_fn; integrity_get_tag_fn *get_tag_fn; unsigned short flags; unsigned short tuple_size; unsigned short sector_size; unsigned short tag_size; const char *name; struct kobject kobj; };
blk_integrity_is_initialized  function  include/linux/blkdev.h  1477  static inline bool blk_integrity_is_initialized(struct gendisk *g)
blk_integrity_register  function  include/linux/blkdev.h  1449  static inline int blk_integrity_register(struct gendisk *d,struct blk_integrity *b)
blk_integrity_unregister  function  include/linux/blkdev.h  1454  static inline void blk_integrity_unregister(struct gendisk *d)
blk_integrity_compare  function  include/linux/blkdev.h  1445  static inline int blk_integrity_compare(struct gendisk *a,struct gendisk *b)
blk_rq_map_integrity_sg  function  include/linux/blkdev.h  1431  static inline int blk_rq_map_integrity_sg(struct request_queue *q,struct bio *b,struct scatterlist *s)
blk_rq_count_integrity_sg  function  include/linux/blkdev.h  1426  static inline int blk_rq_count_integrity_sg(struct request_queue *q,struct bio *b)
blk_integrity_merge_rq  function  include/linux/blkdev.h  1465  static inline int blk_integrity_merge_rq(struct request_queue *rq,struct request *r1,struct request *r2)
blk_integrity_merge_bio  function  include/linux/blkdev.h  1471  static inline int blk_integrity_merge_bio(struct request_queue *rq,struct request *r,struct bio *b)
bdev_get_integrity  function  include/linux/blkdev.h  1437  static inline struct blk_integrity *bdev_get_integrity(struct block_device *b)
blk_get_integrity  function  include/linux/blkdev.h  1441  static inline struct blk_integrity *blk_get_integrity(struct gendisk *disk)
blk_integrity_rq  function  include/linux/blkdev.h  1422  static inline int blk_integrity_rq(struct request *rq)
blk_queue_max_integrity_segments  function  include/linux/blkdev.h  1457  static inline void blk_queue_max_integrity_segments(struct request_queue *q,unsigned int segs)
queue_max_integrity_segments  function  include/linux/blkdev.h  1461  static inline unsigned short queue_max_integrity_segments(struct request_queue *q)
block_device_operations  struct  include/linux/blkdev.h  1484  struct block_device_operations { int (*open) (struct block_device *, fmode_t); int (*release) (struct gendisk *, fmode_t); int (*ioctl) (struct block_device *, fmode_t, unsigned, unsigned long); int (*compat_ioctl) (struct block_device *, fmode_t, unsigned, unsigned long); int (*direct_access) (struct block_device *, sector_t,void **, unsigned long *); unsigned int (*check_events) (struct gendisk *disk,unsigned int clearing); int (*media_changed) (struct gendisk *); void (*unlock_native_capacity) (struct gendisk *); int (*revalidate_disk) (struct gendisk *); int (*getgeo)(struct block_device *, struct hd_geometry *); void (*swap_slot_free_notify) (struct block_device *, unsigned long); struct module *owner; };
__blkdev_driver_ioctl  prototype  include/linux/blkdev.h  1503  extern int __blkdev_driver_ioctl(struct block_device *,fmode_t,unsigned int,unsigned long);
buffer_heads_over_limit  macro  include/linux/blkdev.h  1509  #define buffer_heads_over_limit 0
__LINUX_SPINLOCK_H  macro  include/linux/spinlock.h  2  #define __LINUX_SPINLOCK_H
LOCK_SECTION_NAME  macro  include/linux/spinlock.h  64  #define LOCK_SECTION_NAME ".text..lock."KBUILD_BASENAME
LOCK_SECTION_START  macro  include/linux/spinlock.h  66  #define LOCK_SECTION_START(extra) ".subsection 1\n\t" extra ".ifndef " LOCK_SECTION_NAME "\n\t" LOCK_SECTION_NAME ":\n\t" ".endif\n"
LOCK_SECTION_END  macro  include/linux/spinlock.h  73  #define LOCK_SECTION_END ".previous\n\t"
__lockfunc  macro  include/linux/spinlock.h  76  #define __lockfunc __attribute__((section(".spinlock.text")))
__raw_spin_lock_init  prototype  include/linux/spinlock.h  93  extern void __raw_spin_lock_init(raw_spinlock_t *lock,const char *name,struct lock_class_key *key);
raw_spin_lock_init  macro  include/linux/spinlock.h  103  # define raw_spin_lock_init(lock) do { *(lock) = __RAW_SPIN_LOCK_UNLOCKED(lock); } while (0)
raw_spin_is_locked  macro  include/linux/spinlock.h  107  #define raw_spin_is_locked(lock) arch_spin_is_locked(&(lock)->raw_lock)
raw_spin_is_contended  macro  include/linux/spinlock.h  116  #define raw_spin_is_contended(lock) (((void)(lock),0))
smp_mb__after_lock  function  arch/x86/include/asm/spinlock.h  237  static inline void smp_mb__after_lock(void) { }
raw_spin_unlock_wait  macro  include/linux/spinlock.h  129  #define raw_spin_unlock_wait(lock) arch_spin_unlock_wait(&(lock)->raw_lock)
do_raw_spin_lock_flags  macro  include/linux/spinlock.h  133  #define do_raw_spin_lock_flags(lock,flags) do_raw_spin_lock(lock)
do_raw_spin_trylock  function  include/linux/spinlock.h  150  static inline int do_raw_spin_trylock(raw_spinlock_t *lock)
raw_spin_trylock  macro  include/linux/spinlock.h  168  #define raw_spin_trylock(lock) __cond_lock(lock,_raw_spin_trylock(lock))
raw_spin_lock  macro  include/linux/spinlock.h  170  #define raw_spin_lock(lock) _raw_spin_lock(lock)
raw_spin_lock_nested  macro  include/linux/spinlock.h  182  # define raw_spin_lock_nested(lock,subclass) _raw_spin_lock(lock)
raw_spin_lock_nest_lock  macro  include/linux/spinlock.h  183  # define raw_spin_lock_nest_lock(lock,nest_lock) _raw_spin_lock(lock)
raw_spin_lock_irqsave  macro  include/linux/spinlock.h  210  #define raw_spin_lock_irqsave(lock,flags) do { typecheck(unsigned long, flags); _raw_spin_lock_irqsave(lock, flags); } while (0)
raw_spin_lock_irqsave_nested  macro  include/linux/spinlock.h  216  #define raw_spin_lock_irqsave_nested(lock,flags,subclass) raw_spin_lock_irqsave(lock, flags)
raw_spin_lock_irq  macro  include/linux/spinlock.h  221  #define raw_spin_lock_irq(lock) _raw_spin_lock_irq(lock)
raw_spin_lock_bh  macro  include/linux/spinlock.h  222  #define raw_spin_lock_bh(lock) _raw_spin_lock_bh(lock)
raw_spin_unlock  macro  include/linux/spinlock.h  223  #define raw_spin_unlock(lock) _raw_spin_unlock(lock)
raw_spin_unlock_irq  macro  include/linux/spinlock.h  224  #define raw_spin_unlock_irq(lock) _raw_spin_unlock_irq(lock)
raw_spin_unlock_irqrestore  macro  include/linux/spinlock.h  226  #define raw_spin_unlock_irqrestore(lock,flags) do { typecheck(unsigned long, flags); _raw_spin_unlock_irqrestore(lock, flags); } while (0)
raw_spin_unlock_bh  macro  include/linux/spinlock.h  231  #define raw_spin_unlock_bh(lock) _raw_spin_unlock_bh(lock)
raw_spin_trylock_bh  macro  include/linux/spinlock.h  233  #define raw_spin_trylock_bh(lock) __cond_lock(lock, _raw_spin_trylock_bh(lock))
raw_spin_trylock_irq  macro  include/linux/spinlock.h  236  #define raw_spin_trylock_irq(lock) ({ local_irq_disable(); raw_spin_trylock(lock) ? 1 : ({ local_irq_enable(); 0;  }); })
raw_spin_trylock_irqsave  macro  include/linux/spinlock.h  243  #define raw_spin_trylock_irqsave(lock,flags) ({ local_irq_save(flags); raw_spin_trylock(lock) ? 1 : ({ local_irq_restore(flags); 0; }); })
raw_spin_can_lock  macro  include/linux/spinlock.h  254  #define raw_spin_can_lock(lock) (!raw_spin_is_locked(lock))
spinlock_check  function  include/linux/spinlock.h  272  static inline raw_spinlock_t *spinlock_check(spinlock_t *lock)
spin_lock_init  macro  include/linux/spinlock.h  277  #define spin_lock_init(_lock) do { spinlock_check(_lock); raw_spin_lock_init(&(_lock)->rlock); } while (0)
spin_lock  function  include/linux/spinlock.h  283  static inline void spin_lock(spinlock_t *lock)
spin_lock_bh  function  include/linux/spinlock.h  288  static inline void spin_lock_bh(spinlock_t *lock)
spin_trylock  function  include/linux/spinlock.h  293  static inline int spin_trylock(spinlock_t *lock)
spin_lock_nested  macro  include/linux/spinlock.h  298  #define spin_lock_nested(lock,subclass) do { raw_spin_lock_nested(spinlock_check(lock), subclass); } while (0)
spin_lock_nest_lock  macro  include/linux/spinlock.h  303  #define spin_lock_nest_lock(lock,nest_lock) do { raw_spin_lock_nest_lock(spinlock_check(lock), nest_lock); } while (0)
spin_lock_irq  function  include/linux/spinlock.h  308  static inline void spin_lock_irq(spinlock_t *lock)
spin_lock_irqsave  macro  include/linux/spinlock.h  313  #define spin_lock_irqsave(lock,flags) do { raw_spin_lock_irqsave(spinlock_check(lock), flags); } while (0)
spin_lock_irqsave_nested  macro  include/linux/spinlock.h  318  #define spin_lock_irqsave_nested(lock,flags,subclass) do { raw_spin_lock_irqsave_nested(spinlock_check(lock), flags, subclass); } while (0)
spin_unlock  function  include/linux/spinlock.h  323  static inline void spin_unlock(spinlock_t *lock)
spin_unlock_bh  function  include/linux/spinlock.h  328  static inline void spin_unlock_bh(spinlock_t *lock)
spin_unlock_irq  function  include/linux/spinlock.h  333  static inline void spin_unlock_irq(spinlock_t *lock)
spin_unlock_irqrestore  function  include/linux/spinlock.h  338  static inline void spin_unlock_irqrestore(spinlock_t *lock,unsigned long flags)
spin_trylock_bh  function  include/linux/spinlock.h  343  static inline int spin_trylock_bh(spinlock_t *lock)
spin_trylock_irq  function  include/linux/spinlock.h  348  static inline int spin_trylock_irq(spinlock_t *lock)
spin_trylock_irqsave  macro  include/linux/spinlock.h  353  #define spin_trylock_irqsave(lock,flags) ({ raw_spin_trylock_irqsave(spinlock_check(lock), flags); })
spin_unlock_wait  function  include/linux/spinlock.h  358  static inline void spin_unlock_wait(spinlock_t *lock)
spin_is_locked  function  include/linux/spinlock.h  363  static inline int spin_is_locked(spinlock_t *lock)
spin_is_contended  function  include/linux/spinlock.h  368  static inline int spin_is_contended(spinlock_t *lock)
spin_can_lock  function  include/linux/spinlock.h  373  static inline int spin_can_lock(spinlock_t *lock)
assert_spin_locked  macro  include/linux/spinlock.h  378  #define assert_spin_locked(lock) assert_raw_spin_locked(&(lock)->rlock)
_atomic_dec_and_lock  prototype  include/linux/spinlock.h  393  extern int _atomic_dec_and_lock(atomic_t *atomic,spinlock_t *lock);
atomic_dec_and_lock  macro  include/linux/spinlock.h  394  #define atomic_dec_and_lock(atomic,lock) __cond_lock(lock, _atomic_dec_and_lock(atomic, lock))
_ASM_X86_LINKAGE_H  macro  arch/x86/include/asm/linkage.h  2  #define _ASM_X86_LINKAGE_H
__asmlinkage_protect_n  macro  arch/x86/include/asm/linkage.h  25  #define __asmlinkage_protect_n(ret,args...) __asm__ __volatile__ ("" : "=r" (ret) : "0" (ret), ##args)
__asmlinkage_protect0  macro  arch/x86/include/asm/linkage.h  27  #define __asmlinkage_protect0(ret) __asmlinkage_protect_n(ret)
__asmlinkage_protect1  macro  arch/x86/include/asm/linkage.h  29  #define __asmlinkage_protect1(ret,arg1) __asmlinkage_protect_n(ret, "g" (arg1))
__asmlinkage_protect2  macro  arch/x86/include/asm/linkage.h  31  #define __asmlinkage_protect2(ret,arg1,arg2) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2))
__asmlinkage_protect3  macro  arch/x86/include/asm/linkage.h  33  #define __asmlinkage_protect3(ret,arg1,arg2,arg3) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3))
__asmlinkage_protect4  macro  arch/x86/include/asm/linkage.h  35  #define __asmlinkage_protect4(ret,arg1,arg2,arg3,arg4) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3), "g" (arg4))
__asmlinkage_protect5  macro  arch/x86/include/asm/linkage.h  38  #define __asmlinkage_protect5(ret,arg1,arg2,arg3,arg4,arg5) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3), "g" (arg4), "g" (arg5))
__asmlinkage_protect6  macro  arch/x86/include/asm/linkage.h  41  #define __asmlinkage_protect6(ret,arg1,arg2,arg3,arg4,arg5,arg6) __asmlinkage_protect_n(ret, "g" (arg1), "g" (arg2), "g" (arg3), "g" (arg4), "g" (arg5), "g" (arg6))
GLOBAL  macro  arch/x86/include/asm/linkage.h  49  #define GLOBAL(name) .globl name; name:
_UAPI_LINUX_TYPES_H  macro  include/uapi/linux/types.h  2  #define _UAPI_LINUX_TYPES_H
__bitwise__  macro  include/uapi/linux/types.h  24  #define __bitwise__
__bitwise  macro  include/uapi/linux/types.h  29  #define __bitwise
__aligned_u64  macro  include/uapi/linux/types.h  51  #define __aligned_u64 __u64 __attribute__((aligned(8)))
__aligned_be64  macro  include/uapi/linux/types.h  52  #define __aligned_be64 __be64 __attribute__((aligned(8)))
__aligned_le64  macro  include/uapi/linux/types.h  53  #define __aligned_le64 __le64 __attribute__((aligned(8)))
__must_be_array  macro  include/linux/compiler-intel.h  27  #define __must_be_array(a) 0
inline  macro  include/linux/compiler-gcc.h  55  # define inline inline notrace
__inline__  macro  include/linux/compiler-gcc.h  56  # define __inline__ __inline__ notrace
__inline  macro  include/linux/compiler-gcc.h  57  # define __inline __inline notrace
__packed  macro  include/linux/compiler-gcc.h  61  #define __packed __attribute__((packed))
__weak  macro  include/linux/compiler-gcc.h  62  #define __weak __attribute__((weak))
__naked  macro  include/linux/compiler-gcc.h  74  #define __naked __attribute__((naked)) noinline __noclone notrace
__noreturn  macro  include/linux/compiler-gcc.h  76  #define __noreturn __attribute__((noreturn))
__pure  macro  include/linux/compiler-gcc.h  88  #define __pure __attribute__((pure))
__aligned  macro  include/linux/compiler-gcc.h  89  #define __aligned(x) __attribute__((aligned(x)))
__printf  macro  include/linux/compiler-gcc.h  90  #define __printf(a,b) __attribute__((format(printf,a,b)))
__scanf  macro  include/linux/compiler-gcc.h  91  #define __scanf(a,b) __attribute__((format(scanf,a,b)))
__gcc_header  macro  include/linux/compiler-gcc.h  97  #define __gcc_header(x) #x
_gcc_header  macro  include/linux/compiler-gcc.h  98  #define _gcc_header(x) __gcc_header(linux/compiler-gcc##x.h)
gcc_header  macro  include/linux/compiler-gcc.h  99  #define gcc_header(x) _gcc_header(x)
__noclone  macro  include/linux/compiler-gcc.h  103  #define __noclone
uninitialized_var  macro  include/linux/compiler-intel.h  31  #define uninitialized_var(x) x
__HAVE_BUILTIN_BSWAP16__  macro  include/linux/compiler-intel.h  35  #define __HAVE_BUILTIN_BSWAP16__
__builtin_bswap16  macro  include/linux/compiler-intel.h  36  #define __builtin_bswap16 _bswap16
_ASM_X86_TYPES_H  macro  arch/x86/include/uapi/asm/types.h  2  #define _ASM_X86_TYPES_H
_ASM_X86_BITOPS_H  macro  arch/x86/include/asm/bitops.h  2  #define _ASM_X86_BITOPS_H
BIT_64  macro  arch/x86/include/asm/bitops.h  18  #define BIT_64(n) (U64_C(1) << (n))
BITOP_ADDR  macro  arch/x86/include/asm/bitops.h  33  #define BITOP_ADDR(x) "+m" (*(volatile long *) (x))
ADDR  macro  arch/x86/include/asm/bitops.h  392  #undef ADDR
IS_IMMEDIATE  macro  arch/x86/include/asm/bitops.h  42  #define IS_IMMEDIATE(nr) (__builtin_constant_p(nr))
CONST_MASK_ADDR  macro  arch/x86/include/asm/bitops.h  43  #define CONST_MASK_ADDR(nr,addr) BITOP_ADDR((void *)(addr) + ((nr)>>3))
CONST_MASK  macro  arch/x86/include/asm/bitops.h  44  #define CONST_MASK(nr) (1 << ((nr) & 7))
set_bit  function  arch/x86/include/asm/bitops.h  62  set_bit(unsigned int nr,volatile unsigned long *addr)
__set_bit  function  arch/x86/include/asm/bitops.h  84  static inline void __set_bit(int nr,volatile unsigned long *addr)
clear_bit  function  arch/x86/include/asm/bitops.h  100  clear_bit(int nr,volatile unsigned long *addr)
clear_bit_unlock  function  arch/x86/include/asm/bitops.h  121  static inline void clear_bit_unlock(unsigned nr,volatile unsigned long *addr)
__clear_bit  function  arch/x86/include/asm/bitops.h  127  static inline void __clear_bit(int nr,volatile unsigned long *addr)
__clear_bit_unlock  function  arch/x86/include/asm/bitops.h  144  static inline void __clear_bit_unlock(unsigned nr,volatile unsigned long *addr)
smp_mb__before_clear_bit  macro  arch/x86/include/asm/bitops.h  150  #define smp_mb__before_clear_bit() barrier()
smp_mb__after_clear_bit  macro  arch/x86/include/asm/bitops.h  151  #define smp_mb__after_clear_bit() barrier()
__change_bit  function  arch/x86/include/asm/bitops.h  162  static inline void __change_bit(int nr,volatile unsigned long *addr)
change_bit  function  arch/x86/include/asm/bitops.h  176  static inline void change_bit(int nr,volatile unsigned long *addr)
test_and_set_bit  function  arch/x86/include/asm/bitops.h  197  static inline int test_and_set_bit(int nr,volatile unsigned long *addr)
test_and_set_bit_lock  function  arch/x86/include/asm/bitops.h  215  test_and_set_bit_lock(int nr,volatile unsigned long *addr)
__test_and_set_bit  function  arch/x86/include/asm/bitops.h  229  static inline int __test_and_set_bit(int nr,volatile unsigned long *addr)
test_and_clear_bit  function  arch/x86/include/asm/bitops.h  248  static inline int test_and_clear_bit(int nr,volatile unsigned long *addr)
__test_and_clear_bit  function  arch/x86/include/asm/bitops.h  275  static inline int __test_and_clear_bit(int nr,volatile unsigned long *addr)
__test_and_change_bit  function  arch/x86/include/asm/bitops.h  287  static inline int __test_and_change_bit(int nr,volatile unsigned long *addr)
test_and_change_bit  function  arch/x86/include/asm/bitops.h  307  static inline int test_and_change_bit(int nr,volatile unsigned long *addr)
constant_test_bit  function  arch/x86/include/asm/bitops.h  318  static __always_inline int constant_test_bit(unsigned int nr,const volatile unsigned long *addr)
variable_test_bit  function  arch/x86/include/asm/bitops.h  324  static inline int variable_test_bit(int nr,volatile const unsigned long *addr)
test_bit  macro  arch/x86/include/asm/bitops.h  345  #define test_bit(nr,addr) (__builtin_constant_p((nr)) ? constant_test_bit((nr), (addr)) : variable_test_bit((nr), (addr)))
__ffs  function  arch/x86/include/asm/bitops.h  356  static inline unsigned long __ffs(unsigned long word)
ffz  function  arch/x86/include/asm/bitops.h  370  static inline unsigned long ffz(unsigned long word)
__fls  function  arch/x86/include/asm/bitops.h  384  static inline unsigned long __fls(unsigned long word)
ffs  function  arch/x86/include/asm/bitops.h  406  static inline int ffs(int x)
fls  function  arch/x86/include/asm/bitops.h  447  static inline int fls(int x)
fls64  function  arch/x86/include/asm/bitops.h  489  static __always_inline int fls64(__u64 x)
ARCH_HAS_FAST_MULTIPLIER  macro  arch/x86/include/asm/bitops.h  510  #define ARCH_HAS_FAST_MULTIPLIER 1
__KERN_LEVELS_H__  macro  include/linux/kern_levels.h  2  #define __KERN_LEVELS_H__
KERN_SOH  macro  include/linux/kern_levels.h  4  #define KERN_SOH "\001"
KERN_SOH_ASCII  macro  include/linux/kern_levels.h  5  #define KERN_SOH_ASCII '\001'
KERN_EMERG  macro  include/linux/kern_levels.h  7  #define KERN_EMERG KERN_SOH "0"
KERN_ALERT  macro  include/linux/kern_levels.h  8  #define KERN_ALERT KERN_SOH "1"
KERN_CRIT  macro  include/linux/kern_levels.h  9  #define KERN_CRIT KERN_SOH "2"
KERN_ERR  macro  include/linux/kern_levels.h  10  #define KERN_ERR KERN_SOH "3"
KERN_WARNING  macro  include/linux/kern_levels.h  11  #define KERN_WARNING KERN_SOH "4"
KERN_NOTICE  macro  include/linux/kern_levels.h  12  #define KERN_NOTICE KERN_SOH "5"
KERN_INFO  macro  include/linux/kern_levels.h  13  #define KERN_INFO KERN_SOH "6"
KERN_DEBUG  macro  include/linux/kern_levels.h  14  #define KERN_DEBUG KERN_SOH "7"
KERN_DEFAULT  macro  include/linux/kern_levels.h  16  #define KERN_DEFAULT KERN_SOH "d"
KERN_CONT  macro  include/linux/kern_levels.h  23  #define KERN_CONT ""
_LINUX_STRING_H_  macro  include/linux/string.h  2  #define _LINUX_STRING_H_
strndup_user  prototype  include/linux/string.h  11  extern char *strndup_user(const char __user *,long);
memdup_user  prototype  include/linux/string.h  12  extern void *memdup_user(const void __user *,size_t);
strcpy  prototype  include/linux/string.h  20  extern char * strcpy(char *,const char *);
strncpy  prototype  include/linux/string.h  23  extern char * strncpy(char *,const char *,__kernel_size_t);
strlcpy  prototype  include/linux/string.h  26  size_t strlcpy(char *,const char *,size_t);
strcat  prototype  include/linux/string.h  29  extern char * strcat(char *,const char *);
strncat  prototype  include/linux/string.h  32  extern char * strncat(char *,const char *,__kernel_size_t);
strlcat  prototype  include/linux/string.h  35  extern size_t strlcat(char *,const char *,__kernel_size_t);
strcmp  prototype  include/linux/string.h  38  extern int strcmp(const char *,const char *);
strncmp  prototype  include/linux/string.h  41  extern int strncmp(const char *,const char *,__kernel_size_t);
strnicmp  prototype  include/linux/string.h  44  extern int strnicmp(const char *,const char *,__kernel_size_t);
strcasecmp  prototype  include/linux/string.h  47  extern int strcasecmp(const char *s1,const char *s2);
strncasecmp  prototype  include/linux/string.h  50  extern int strncasecmp(const char *s1,const char *s2,size_t n);
strchr  prototype  include/linux/string.h  53  extern char * strchr(const char *,int);
strnchr  prototype  include/linux/string.h  56  extern char * strnchr(const char *,size_t,int);
strrchr  prototype  include/linux/string.h  59  extern char * strrchr(const char *,int);
skip_spaces  prototype  include/linux/string.h  61  extern char * __must_check skip_spaces(const char *);
strim  prototype  include/linux/string.h  63  extern char *strim(char *);
strstrip  function  include/linux/string.h  65  static inline __must_check char *strstrip(char *str)
strstr  prototype  include/linux/string.h  71  extern char * strstr(const char *,const char *);
strnstr  prototype  include/linux/string.h  74  extern char * strnstr(const char *,const char *,size_t);
strlen  prototype  include/linux/string.h  77  extern __kernel_size_t strlen(const char *);
strnlen  prototype  include/linux/string.h  80  extern __kernel_size_t strnlen(const char *,__kernel_size_t);
strpbrk  prototype  include/linux/string.h  83  extern char * strpbrk(const char *,const char *);
strsep  prototype  include/linux/string.h  86  extern char * strsep(char **,const char *);
strspn  prototype  include/linux/string.h  89  extern __kernel_size_t strspn(const char *,const char *);
strcspn  prototype  include/linux/string.h  92  extern __kernel_size_t strcspn(const char *,const char *);
memset  prototype  include/linux/string.h  96  extern void * memset(void *,int,__kernel_size_t);
memcpy  prototype  include/linux/string.h  99  extern void * memcpy(void *,const void *,__kernel_size_t);
memmove  prototype  include/linux/string.h  102  extern void * memmove(void *,const void *,__kernel_size_t);
memscan  prototype  include/linux/string.h  105  extern void * memscan(void *,int,__kernel_size_t);
memcmp  prototype  include/linux/string.h  108  extern int memcmp(const void *,const void *,__kernel_size_t);
memchr  prototype  include/linux/string.h  111  extern void * memchr(const void *,int,__kernel_size_t);
memchr_inv  prototype  include/linux/string.h  113  void *memchr_inv(const void *s,int c,size_t n);
kstrdup  prototype  include/linux/string.h  115  extern char *kstrdup(const char *s,gfp_t gfp);
kstrndup  prototype  include/linux/string.h  116  extern char *kstrndup(const char *s,size_t len,gfp_t gfp);
kmemdup  prototype  include/linux/string.h  117  extern void *kmemdup(const void *src,size_t len,gfp_t gfp);
argv_split  prototype  include/linux/string.h  119  extern char **argv_split(gfp_t gfp,const char *str,int *argcp);
argv_free  prototype  include/linux/string.h  120  extern void argv_free(char **argv);
sysfs_streq  prototype  include/linux/string.h  122  extern bool sysfs_streq(const char *s1,const char *s2);
strtobool  prototype  include/linux/string.h  123  extern int strtobool(const char *s,bool *res);
vbin_printf  prototype  include/linux/string.h  126  int vbin_printf(u32 *bin_buf,size_t size,const char *fmt,va_list args);
bstr_printf  prototype  include/linux/string.h  127  int bstr_printf(char *buf,size_t size,const char *fmt,const u32 *bin_buf);
memory_read_from_buffer  prototype  include/linux/string.h  131  extern ssize_t memory_read_from_buffer(void *to,size_t count,loff_t *ppos,const void *from, size_t available);
strstarts  function  include/linux/string.h  139  static inline bool strstarts(const char *str,const char *prefix)
memweight  prototype  include/linux/string.h  144  extern size_t memweight(const void *ptr,size_t bytes);
kbasename  function  include/linux/string.h  151  static inline const char *kbasename(const char *path)
_LINUX_SYSINFO_H  macro  include/uapi/linux/sysinfo.h  2  #define _LINUX_SYSINFO_H
SI_LOAD_SHIFT  macro  include/uapi/linux/sysinfo.h  6  #define SI_LOAD_SHIFT 16
sysinfo  struct  include/uapi/linux/sysinfo.h  7  struct sysinfo { __kernel_long_t uptime; __kernel_ulong_t loads[3]; __kernel_ulong_t totalram; __kernel_ulong_t freeram; __kernel_ulong_t sharedram; __kernel_ulong_t bufferram; __kernel_ulong_t totalswap; __kernel_ulong_t freeswap; __u16 procs; __u16 pad; __kernel_ulong_t totalhigh; __kernel_ulong_t freehigh; __u32 mem_unit; char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)]; };
_ASM_GENERIC_DIV64_H  macro  include/asm-generic/div64.h  2  #define _ASM_GENERIC_DIV64_H
__div64_32  prototype  include/asm-generic/div64.h  35  extern uint32_t __div64_32(uint64_t *dividend,uint32_t divisor);
_LINUX_POISON_H  macro  include/linux/poison.h  2  #define _LINUX_POISON_H
POISON_POINTER_DELTA  macro  include/linux/poison.h  14  # define POISON_POINTER_DELTA 0
LIST_POISON1  macro  include/linux/poison.h  22  #define LIST_POISON1 ((void *) 0x00100100 + POISON_POINTER_DELTA)
LIST_POISON2  macro  include/linux/poison.h  23  #define LIST_POISON2 ((void *) 0x00200200 + POISON_POINTER_DELTA)
TIMER_ENTRY_STATIC  macro  include/linux/poison.h  30  #define TIMER_ENTRY_STATIC ((void *) 0x74737461)
PAGE_POISON  macro  include/linux/poison.h  33  #define PAGE_POISON 0xaa
RED_INACTIVE  macro  include/linux/poison.h  40  #define RED_INACTIVE 0x09F911029D74E35BULL
RED_ACTIVE  macro  include/linux/poison.h  41  #define RED_ACTIVE 0xD84156C5635688C0ULL
SLUB_RED_INACTIVE  macro  include/linux/poison.h  43  #define SLUB_RED_INACTIVE 0xbb
SLUB_RED_ACTIVE  macro  include/linux/poison.h  44  #define SLUB_RED_ACTIVE 0xcc
POISON_INUSE  macro  include/linux/poison.h  47  #define POISON_INUSE 0x5a
POISON_FREE  macro  include/linux/poison.h  48  #define POISON_FREE 0x6b
POISON_END  macro  include/linux/poison.h  49  #define POISON_END 0xa5
POISON_FREE_INITMEM  macro  include/linux/poison.h  52  #define POISON_FREE_INITMEM 0xcc
JBD_POISON_FREE  macro  include/linux/poison.h  61  #define JBD_POISON_FREE 0x5b
JBD2_POISON_FREE  macro  include/linux/poison.h  62  #define JBD2_POISON_FREE 0x5c
POOL_POISON_FREED  macro  include/linux/poison.h  65  #define POOL_POISON_FREED 0xa7
POOL_POISON_ALLOCATED  macro  include/linux/poison.h  66  #define POOL_POISON_ALLOCATED 0xa9
ATM_POISON_FREE  macro  include/linux/poison.h  69  #define ATM_POISON_FREE 0x12
ATM_POISON  macro  include/linux/poison.h  70  #define ATM_POISON 0xdeadbeef
NEIGHBOR_DEAD  macro  include/linux/poison.h  73  #define NEIGHBOR_DEAD 0xdeadbeef
NETFILTER_LINK_POISON  macro  include/linux/poison.h  74  #define NETFILTER_LINK_POISON 0xdead57ac
MUTEX_DEBUG_INIT  macro  include/linux/poison.h  77  #define MUTEX_DEBUG_INIT 0x11
MUTEX_DEBUG_FREE  macro  include/linux/poison.h  78  #define MUTEX_DEBUG_FREE 0x22
FLEX_ARRAY_FREE  macro  include/linux/poison.h  81  #define FLEX_ARRAY_FREE 0x6c
KEY_DESTROY  macro  include/linux/poison.h  84  #define KEY_DESTROY 0xbd
OSS_POISON_FREE  macro  include/linux/poison.h  87  #define OSS_POISON_FREE 0xAB
_LINUX_CONST_H  macro  include/uapi/linux/const.h  4  #define _LINUX_CONST_H
_AC  macro  include/uapi/linux/const.h  20  #define _AC(X,Y) __AC(X,Y)
_AT  macro  include/uapi/linux/const.h  21  #define _AT(T,X) ((T)(X))
__AC  macro  include/uapi/linux/const.h  19  #define __AC(X,Y) (X##Y)
_ASM_X86_STAT_H  macro  arch/x86/include/uapi/asm/stat.h  2  #define _ASM_X86_STAT_H
STAT_HAVE_NSEC  macro  arch/x86/include/uapi/asm/stat.h  4  #define STAT_HAVE_NSEC 1
stat  struct  arch/x86/include/uapi/asm/stat.h  80  struct stat { unsigned long st_dev; unsigned long st_ino; unsigned long st_nlink; unsigned int st_mode; unsigned int st_uid; unsigned int st_gid; unsigned int __pad0; unsigned long st_rdev; long st_size; long st_blksize; long st_blocks; unsigned long st_atime; unsigned long st_atime_nsec; unsigned long st_mtime; unsigned long st_mtime_nsec; unsigned long st_ctime; unsigned long st_ctime_nsec; long __unused[3]; };
INIT_STRUCT_STAT_PADDING  macro  arch/x86/include/uapi/asm/stat.h  104  #define INIT_STRUCT_STAT_PADDING(st) do { st.__pad0 = 0; st.__unused[0] = 0; st.__unused[1] = 0; st.__unused[2] = 0; } while (0)
STAT64_HAS_BROKEN_ST_INO  macro  arch/x86/include/uapi/asm/stat.h  34  #define STAT64_HAS_BROKEN_ST_INO 1
stat64  struct  arch/x86/include/uapi/asm/stat.h  39  struct stat64 { unsigned long long st_dev; unsigned char __pad0[4]; unsigned long __st_ino; unsigned int st_mode; unsigned int st_nlink; unsigned long st_uid; unsigned long st_gid; unsigned long long st_rdev; unsigned char __pad3[4]; long long st_size; unsigned long st_blksize; unsigned long long st_blocks; unsigned long st_atime; unsigned long st_atime_nsec; unsigned long st_mtime; unsigned int st_mtime_nsec; unsigned long st_ctime; unsigned long st_ctime_nsec; unsigned long long st_ino; };
INIT_STRUCT_STAT64_PADDING  macro  arch/x86/include/uapi/asm/stat.h  73  #define INIT_STRUCT_STAT64_PADDING(st) do { memset(&st.__pad0, 0, sizeof(st.__pad0)); memset(&st.__pad3, 0, sizeof(st.__pad3)); } while (0)
__old_kernel_stat  struct  arch/x86/include/uapi/asm/stat.h  114  struct __old_kernel_stat { unsigned short st_dev; unsigned short st_ino; unsigned short st_mode; unsigned short st_nlink; unsigned short st_uid; unsigned short st_gid; unsigned short st_rdev; unsigned long st_size; unsigned long st_atime; unsigned long st_mtime; unsigned long st_ctime; unsigned int st_size; unsigned int st_atime; unsigned int st_mtime; unsigned int st_ctime; };
_UAPI_LINUX_STAT_H  macro  include/uapi/linux/stat.h  2  #define _UAPI_LINUX_STAT_H
S_IFMT  macro  include/uapi/linux/stat.h  7  #define S_IFMT 00170000
S_IFSOCK  macro  include/uapi/linux/stat.h  8  #define S_IFSOCK 0140000
S_IFLNK  macro  include/uapi/linux/stat.h  9  #define S_IFLNK 0120000
S_IFREG  macro  include/uapi/linux/stat.h  10  #define S_IFREG 0100000
S_IFBLK  macro  include/uapi/linux/stat.h  11  #define S_IFBLK 0060000
S_IFDIR  macro  include/uapi/linux/stat.h  12  #define S_IFDIR 0040000
S_IFCHR  macro  include/uapi/linux/stat.h  13  #define S_IFCHR 0020000
S_IFIFO  macro  include/uapi/linux/stat.h  14  #define S_IFIFO 0010000
S_ISUID  macro  include/uapi/linux/stat.h  15  #define S_ISUID 0004000
S_ISGID  macro  include/uapi/linux/stat.h  16  #define S_ISGID 0002000
S_ISVTX  macro  include/uapi/linux/stat.h  17  #define S_ISVTX 0001000
S_ISLNK  macro  include/uapi/linux/stat.h  19  #define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
S_ISREG  macro  include/uapi/linux/stat.h  20  #define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
S_ISDIR  macro  include/uapi/linux/stat.h  21  #define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
S_ISCHR  macro  include/uapi/linux/stat.h  22  #define S_ISCHR(m) (((m) & S_IFMT) == S_IFCHR)
S_ISBLK  macro  include/uapi/linux/stat.h  23  #define S_ISBLK(m) (((m) & S_IFMT) == S_IFBLK)
S_ISFIFO  macro  include/uapi/linux/stat.h  24  #define S_ISFIFO(m) (((m) & S_IFMT) == S_IFIFO)
S_ISSOCK  macro  include/uapi/linux/stat.h  25  #define S_ISSOCK(m) (((m) & S_IFMT) == S_IFSOCK)
S_IRWXU  macro  include/uapi/linux/stat.h  27  #define S_IRWXU 00700
S_IRUSR  macro  include/uapi/linux/stat.h  28  #define S_IRUSR 00400
S_IWUSR  macro  include/uapi/linux/stat.h  29  #define S_IWUSR 00200
S_IXUSR  macro  include/uapi/linux/stat.h  30  #define S_IXUSR 00100
S_IRWXG  macro  include/uapi/linux/stat.h  32  #define S_IRWXG 00070
S_IRGRP  macro  include/uapi/linux/stat.h  33  #define S_IRGRP 00040
S_IWGRP  macro  include/uapi/linux/stat.h  34  #define S_IWGRP 00020
S_IXGRP  macro  include/uapi/linux/stat.h  35  #define S_IXGRP 00010
S_IRWXO  macro  include/uapi/linux/stat.h  37  #define S_IRWXO 00007
S_IROTH  macro  include/uapi/linux/stat.h  38  #define S_IROTH 00004
S_IWOTH  macro  include/uapi/linux/stat.h  39  #define S_IWOTH 00002
S_IXOTH  macro  include/uapi/linux/stat.h  40  #define S_IXOTH 00001
_LINUX_TIME_H  macro  include/linux/time.h  2  #define _LINUX_TIME_H
MSEC_PER_SEC  macro  include/linux/time.h  12  #define MSEC_PER_SEC 1000L
USEC_PER_MSEC  macro  include/linux/time.h  13  #define USEC_PER_MSEC 1000L
NSEC_PER_USEC  macro  include/linux/time.h  14  #define NSEC_PER_USEC 1000L
NSEC_PER_MSEC  macro  include/linux/time.h  15  #define NSEC_PER_MSEC 1000000L
USEC_PER_SEC  macro  include/linux/time.h  16  #define USEC_PER_SEC 1000000L
NSEC_PER_SEC  macro  include/linux/time.h  17  #define NSEC_PER_SEC 1000000000L
FSEC_PER_SEC  macro  include/linux/time.h  18  #define FSEC_PER_SEC 1000000000000000LL
TIME_T_MAX  macro  include/linux/time.h  20  #define TIME_T_MAX (time_t)((1UL << ((sizeof(time_t) << 3) - 1)) - 1)
timespec_equal  function  include/linux/time.h  22  static inline int timespec_equal(const struct timespec *a,const struct timespec *b)
timespec_compare  function  include/linux/time.h  33  static inline int timespec_compare(const struct timespec *lhs,const struct timespec *rhs)
timeval_compare  function  include/linux/time.h  42  static inline int timeval_compare(const struct timeval *lhs,const struct timeval *rhs)
mktime  prototype  include/linux/time.h  51  extern unsigned long mktime(const unsigned int year,const unsigned int mon,const unsigned int day, const unsigned int hour,const unsigned int min, const unsigned int sec);
set_normalized_timespec  prototype  include/linux/time.h  55  extern void set_normalized_timespec(struct timespec *ts,time_t sec,s64 nsec);
timespec_add_safe  prototype  include/linux/time.h  62  extern struct timespec timespec_add_safe(const struct timespec lhs,const struct timespec rhs);
timespec_add  function  include/linux/time.h  66  static inline struct timespec timespec_add(struct timespec lhs,struct timespec rhs)
timespec_sub  function  include/linux/time.h  78  static inline struct timespec timespec_sub(struct timespec lhs,struct timespec rhs)
KTIME_MAX  macro  include/linux/time.h  87  #define KTIME_MAX ((s64)~((u64)1 << 63))
KTIME_SEC_MAX  macro  include/linux/time.h  91  # define KTIME_SEC_MAX LONG_MAX
timespec_valid  function  include/linux/time.h  97  static inline bool timespec_valid(const struct timespec *ts)
timespec_valid_strict  function  include/linux/time.h  108  static inline bool timespec_valid_strict(const struct timespec *ts)
read_persistent_clock  prototype  include/linux/time.h  118  extern void read_persistent_clock(struct timespec *ts);
read_boot_clock  prototype  include/linux/time.h  119  extern void read_boot_clock(struct timespec *ts);
update_persistent_clock  prototype  include/linux/time.h  120  extern int update_persistent_clock(struct timespec now);
timekeeping_init  prototype  include/linux/time.h  121  void timekeeping_init(void);
get_seconds  prototype  include/linux/time.h  124  unsigned long get_seconds(void);
current_kernel_time  prototype  include/linux/time.h  125  struct timespec current_kernel_time(void);
__current_kernel_time  prototype  include/linux/time.h  126  struct timespec __current_kernel_time(void);
get_monotonic_coarse  prototype  include/linux/time.h  127  struct timespec get_monotonic_coarse(void);
get_xtime_and_monotonic_and_sleep_offset  prototype  include/linux/time.h  128  void get_xtime_and_monotonic_and_sleep_offset(struct timespec *xtim,struct timespec *wtom, struct timespec *sleep);
timekeeping_inject_sleeptime  prototype  include/linux/time.h  130  void timekeeping_inject_sleeptime(struct timespec *delta);
CURRENT_TIME  macro  include/linux/time.h  132  #define CURRENT_TIME (current_kernel_time())
CURRENT_TIME_SEC  macro  include/linux/time.h  133  #define CURRENT_TIME_SEC ((struct timespec) { get_seconds(),0 })
arch_gettimeoffset  function  include/linux/time.h  147  static inline u32 arch_gettimeoffset(void) { return 0; }
do_gettimeofday  prototype  include/linux/time.h  150  extern void do_gettimeofday(struct timeval *tv);
do_settimeofday  prototype  include/linux/time.h  151  extern int do_settimeofday(const struct timespec *tv);
do_sys_settimeofday  prototype  include/linux/time.h  152  extern int do_sys_settimeofday(const struct timespec *tv,const struct timezone *tz);
do_posix_clock_monotonic_gettime  macro  include/linux/time.h  154  #define do_posix_clock_monotonic_gettime(ts) ktime_get_ts(ts)
do_utimes  prototype  include/linux/time.h  155  extern long do_utimes(int dfd,const char __user *filename,struct timespec *times,int flags);
do_setitimer  prototype  include/linux/time.h  157  extern int do_setitimer(int which,struct itimerval *value,struct itimerval *ovalue);
alarm_setitimer  prototype  include/linux/time.h  159  extern unsigned int alarm_setitimer(unsigned int seconds);
do_getitimer  prototype  include/linux/time.h  160  extern int do_getitimer(int which,struct itimerval *value);
getnstimeofday  prototype  include/linux/time.h  161  extern void getnstimeofday(struct timespec *tv);
getrawmonotonic  prototype  include/linux/time.h  162  extern void getrawmonotonic(struct timespec *ts);
getnstime_raw_and_real  prototype  include/linux/time.h  163  extern void getnstime_raw_and_real(struct timespec *ts_raw,struct timespec *ts_real);
getboottime  prototype  include/linux/time.h  165  extern void getboottime(struct timespec *ts);
monotonic_to_bootbased  prototype  include/linux/time.h  166  extern void monotonic_to_bootbased(struct timespec *ts);
get_monotonic_boottime  prototype  include/linux/time.h  167  extern void get_monotonic_boottime(struct timespec *ts);
timespec_trunc  prototype  include/linux/time.h  169  extern struct timespec timespec_trunc(struct timespec t,unsigned gran);
timekeeping_valid_for_hres  prototype  include/linux/time.h  170  extern int timekeeping_valid_for_hres(void);
timekeeping_max_deferment  prototype  include/linux/time.h  171  extern u64 timekeeping_max_deferment(void);
timekeeping_inject_offset  prototype  include/linux/time.h  172  extern int timekeeping_inject_offset(struct timespec *ts);
do_sys_times  prototype  include/linux/time.h  175  extern void do_sys_times(struct tms *);
tm  struct  include/linux/time.h  181  struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; long tm_year; int tm_wday; int tm_yday; };
time_to_tm  prototype  include/linux/time.h  203  void time_to_tm(time_t totalsecs,int offset,struct tm *result);
timespec_to_ns  function  include/linux/time.h  212  static inline s64 timespec_to_ns(const struct timespec *ts)
timeval_to_ns  function  include/linux/time.h  224  static inline s64 timeval_to_ns(const struct timeval *tv)
ns_to_timespec  prototype  include/linux/time.h  236  extern struct timespec ns_to_timespec(const s64 nsec);
ns_to_timeval  prototype  include/linux/time.h  244  extern struct timeval ns_to_timeval(const s64 nsec);
timespec_add_ns  function  include/linux/time.h  254  static __always_inline void timespec_add_ns(struct timespec *a,u64 ns)
_LINUX_UIDGID_H  macro  include/linux/uidgid.h  2  #define _LINUX_UIDGID_H
kuid_t  struct  include/linux/uidgid.h  22  typedef struct { uid_t val; } kuid_t;
kgid_t  struct  include/linux/uidgid.h  27  typedef struct { gid_t val; } kgid_t;
KUIDT_INIT  macro  include/linux/uidgid.h  59  #define KUIDT_INIT(value) ((kuid_t) value )
KGIDT_INIT  macro  include/linux/uidgid.h  60  #define KGIDT_INIT(value) ((kgid_t) value )
__kuid_val  function  include/linux/uidgid.h  49  static inline uid_t __kuid_val(kuid_t uid)
__kgid_val  function  include/linux/uidgid.h  54  static inline gid_t __kgid_val(kgid_t gid)
GLOBAL_ROOT_UID  macro  include/linux/uidgid.h  64  #define GLOBAL_ROOT_UID KUIDT_INIT(0)
GLOBAL_ROOT_GID  macro  include/linux/uidgid.h  65  #define GLOBAL_ROOT_GID KGIDT_INIT(0)
INVALID_UID  macro  include/linux/uidgid.h  67  #define INVALID_UID KUIDT_INIT(-1)
INVALID_GID  macro  include/linux/uidgid.h  68  #define INVALID_GID KGIDT_INIT(-1)
uid_eq  function  include/linux/uidgid.h  70  static inline bool uid_eq(kuid_t left,kuid_t right)
gid_eq  function  include/linux/uidgid.h  75  static inline bool gid_eq(kgid_t left,kgid_t right)
uid_gt  function  include/linux/uidgid.h  80  static inline bool uid_gt(kuid_t left,kuid_t right)
gid_gt  function  include/linux/uidgid.h  85  static inline bool gid_gt(kgid_t left,kgid_t right)
uid_gte  function  include/linux/uidgid.h  90  static inline bool uid_gte(kuid_t left,kuid_t right)
gid_gte  function  include/linux/uidgid.h  95  static inline bool gid_gte(kgid_t left,kgid_t right)
uid_lt  function  include/linux/uidgid.h  100  static inline bool uid_lt(kuid_t left,kuid_t right)
gid_lt  function  include/linux/uidgid.h  105  static inline bool gid_lt(kgid_t left,kgid_t right)
uid_lte  function  include/linux/uidgid.h  110  static inline bool uid_lte(kuid_t left,kuid_t right)
gid_lte  function  include/linux/uidgid.h  115  static inline bool gid_lte(kgid_t left,kgid_t right)
uid_valid  function  include/linux/uidgid.h  120  static inline bool uid_valid(kuid_t uid)
gid_valid  function  include/linux/uidgid.h  125  static inline bool gid_valid(kgid_t gid)
make_kuid  function  include/linux/uidgid.h  152  static inline kuid_t make_kuid(struct user_namespace *from,uid_t uid)
make_kgid  function  include/linux/uidgid.h  157  static inline kgid_t make_kgid(struct user_namespace *from,gid_t gid)
from_kuid  function  include/linux/uidgid.h  162  static inline uid_t from_kuid(struct user_namespace *to,kuid_t kuid)
from_kgid  function  include/linux/uidgid.h  167  static inline gid_t from_kgid(struct user_namespace *to,kgid_t kgid)
from_kuid_munged  function  include/linux/uidgid.h  172  static inline uid_t from_kuid_munged(struct user_namespace *to,kuid_t kuid)
from_kgid_munged  function  include/linux/uidgid.h  180  static inline gid_t from_kgid_munged(struct user_namespace *to,kgid_t kgid)
kuid_has_mapping  function  include/linux/uidgid.h  188  static inline bool kuid_has_mapping(struct user_namespace *ns,kuid_t uid)
kgid_has_mapping  function  include/linux/uidgid.h  193  static inline bool kgid_has_mapping(struct user_namespace *ns,kgid_t gid)
_ASM_X86_CACHE_H  macro  arch/x86/include/asm/cache.h  2  #define _ASM_X86_CACHE_H
L1_CACHE_SHIFT  macro  arch/x86/include/asm/cache.h  7  #define L1_CACHE_SHIFT (CONFIG_X86_L1_CACHE_SHIFT)
L1_CACHE_BYTES  macro  arch/x86/include/asm/cache.h  8  #define L1_CACHE_BYTES (1 << L1_CACHE_SHIFT)
INTERNODE_CACHE_BYTES  macro  arch/x86/include/asm/cache.h  13  #define INTERNODE_CACHE_BYTES (1 << INTERNODE_CACHE_SHIFT)
_LINUX_SYSCTL_H  macro  include/linux/sysctl.h  22  #define _LINUX_SYSCTL_H
proc_dostring  prototype  include/linux/sysctl.h  42  extern int proc_dostring(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec  prototype  include/linux/sysctl.h  44  extern int proc_dointvec(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_minmax  prototype  include/linux/sysctl.h  46  extern int proc_dointvec_minmax(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_jiffies  prototype  include/linux/sysctl.h  48  extern int proc_dointvec_jiffies(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_userhz_jiffies  prototype  include/linux/sysctl.h  50  extern int proc_dointvec_userhz_jiffies(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_dointvec_ms_jiffies  prototype  include/linux/sysctl.h  52  extern int proc_dointvec_ms_jiffies(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_doulongvec_minmax  prototype  include/linux/sysctl.h  54  extern int proc_doulongvec_minmax(struct ctl_table *,int,void __user *, size_t *, loff_t *);
proc_doulongvec_ms_jiffies_minmax  prototype  include/linux/sysctl.h  56  extern int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table,int,void __user *, size_t *, loff_t *);
proc_do_large_bitmap  prototype  include/linux/sysctl.h  58  extern int proc_do_large_bitmap(struct ctl_table *,int,void __user *, size_t *, loff_t *);
ctl_table_poll  struct  include/linux/sysctl.h  89  struct ctl_table_poll { atomic_t event; wait_queue_head_t wait; };
proc_sys_poll_event  function  include/linux/sysctl.h  94  static inline void *proc_sys_poll_event(struct ctl_table_poll *poll)
__CTL_TABLE_POLL_INITIALIZER  macro  include/linux/sysctl.h  99  #define __CTL_TABLE_POLL_INITIALIZER(name) { .event = ATOMIC_INIT(0), .wait = __WAIT_QUEUE_HEAD_INITIALIZER(name.wait) }
DEFINE_CTL_TABLE_POLL  macro  include/linux/sysctl.h  103  #define DEFINE_CTL_TABLE_POLL(name) struct ctl_table_poll name = __CTL_TABLE_POLL_INITIALIZER(name)
ctl_table  struct  include/linux/sysctl.h  107  struct ctl_table { const char *procname; void *data; int maxlen; umode_t mode; struct ctl_table *child; proc_handler *proc_handler; struct ctl_table_poll *poll; void *extra1; void *extra2; };
ctl_node  struct  include/linux/sysctl.h  120  struct ctl_node { struct rb_node node; struct ctl_table_header *header; };
ctl_table_header  struct  include/linux/sysctl.h  127  struct ctl_table_header { struct ctl_table *ctl_table; int used; int count; int nreg; }; struct rcu_head rcu; }; struct completion *unregistering; struct ctl_table *ctl_table_arg; struct ctl_table_root *root; struct ctl_table_set *set; struct ctl_dir *parent; struct ctl_node *node; };
ctl_dir  struct  include/linux/sysctl.h  146  struct ctl_dir { struct ctl_table_header header; struct rb_root root; };
ctl_table_set  struct  include/linux/sysctl.h  152  struct ctl_table_set { int (*is_seen)(struct ctl_table_set *); struct ctl_dir dir; };
ctl_table_root  struct  include/linux/sysctl.h  157  struct ctl_table_root { struct ctl_table_set default_set; struct ctl_table_set *(*lookup)(struct ctl_table_root *root,struct nsproxy *namespaces); int (*permissions)(struct ctl_table_header *head, struct ctl_table *table); };
ctl_path  struct  include/linux/sysctl.h  165  struct ctl_path { const char *procname; };
proc_sys_poll_notify  prototype  include/linux/sysctl.h  171  void proc_sys_poll_notify(struct ctl_table_poll *poll);
setup_sysctl_set  function  include/linux/sysctl.h  209  static inline void setup_sysctl_set(struct ctl_table_set *p,struct ctl_table_root *root,int (*is_seen)(struct ctl_table_set *))
retire_sysctl_set  prototype  include/linux/sysctl.h  176  extern void retire_sysctl_set(struct ctl_table_set *set);
register_sysctl_root  prototype  include/linux/sysctl.h  178  void register_sysctl_root(struct ctl_table_root *root);
__register_sysctl_table  prototype  include/linux/sysctl.h  179  struct ctl_table_header *__register_sysctl_table(
__register_sysctl_paths  prototype  include/linux/sysctl.h  182  struct ctl_table_header *__register_sysctl_paths(
register_sysctl  prototype  include/linux/sysctl.h  185  struct ctl_table_header *register_sysctl(const char *path,struct ctl_table *table);
register_sysctl_table  function  include/linux/sysctl.h  194  static inline struct ctl_table_header *register_sysctl_table(struct ctl_table * table)
register_sysctl_paths  function  include/linux/sysctl.h  199  static inline struct ctl_table_header *register_sysctl_paths(
unregister_sysctl_table  function  include/linux/sysctl.h  205  static inline void unregister_sysctl_table(struct ctl_table_header * table)
sysctl_init  prototype  include/linux/sysctl.h  192  extern int sysctl_init(void);
_ASM_X86_ELF_H  macro  arch/x86/include/asm/elf.h  2  #define _ASM_X86_ELF_H
ELF_NGREG  macro  arch/x86/include/asm/elf.h  15  #define ELF_NGREG (sizeof(struct user_regs_struct) / sizeof(elf_greg_t))
R_386_NONE  macro  arch/x86/include/asm/elf.h  24  #define R_386_NONE 0
R_386_32  macro  arch/x86/include/asm/elf.h  25  #define R_386_32 1
R_386_PC32  macro  arch/x86/include/asm/elf.h  26  #define R_386_PC32 2
R_386_GOT32  macro  arch/x86/include/asm/elf.h  27  #define R_386_GOT32 3
R_386_PLT32  macro  arch/x86/include/asm/elf.h  28  #define R_386_PLT32 4
R_386_COPY  macro  arch/x86/include/asm/elf.h  29  #define R_386_COPY 5
R_386_GLOB_DAT  macro  arch/x86/include/asm/elf.h  30  #define R_386_GLOB_DAT 6
R_386_JMP_SLOT  macro  arch/x86/include/asm/elf.h  31  #define R_386_JMP_SLOT 7
R_386_RELATIVE  macro  arch/x86/include/asm/elf.h  32  #define R_386_RELATIVE 8
R_386_GOTOFF  macro  arch/x86/include/asm/elf.h  33  #define R_386_GOTOFF 9
R_386_GOTPC  macro  arch/x86/include/asm/elf.h  34  #define R_386_GOTPC 10
R_386_NUM  macro  arch/x86/include/asm/elf.h  35  #define R_386_NUM 11
ELF_CLASS  macro  arch/x86/include/asm/elf.h  70  #define ELF_CLASS ELFCLASS64
ELF_DATA  macro  arch/x86/include/asm/elf.h  71  #define ELF_DATA ELFDATA2LSB
ELF_ARCH  macro  arch/x86/include/asm/elf.h  72  #define ELF_ARCH EM_X86_64
R_X86_64_NONE  macro  arch/x86/include/asm/elf.h  47  #define R_X86_64_NONE 0
R_X86_64_64  macro  arch/x86/include/asm/elf.h  48  #define R_X86_64_64 1
R_X86_64_PC32  macro  arch/x86/include/asm/elf.h  49  #define R_X86_64_PC32 2
R_X86_64_GOT32  macro  arch/x86/include/asm/elf.h  50  #define R_X86_64_GOT32 3
R_X86_64_PLT32  macro  arch/x86/include/asm/elf.h  51  #define R_X86_64_PLT32 4
R_X86_64_COPY  macro  arch/x86/include/asm/elf.h  52  #define R_X86_64_COPY 5
R_X86_64_GLOB_DAT  macro  arch/x86/include/asm/elf.h  53  #define R_X86_64_GLOB_DAT 6
R_X86_64_JUMP_SLOT  macro  arch/x86/include/asm/elf.h  54  #define R_X86_64_JUMP_SLOT 7
R_X86_64_RELATIVE  macro  arch/x86/include/asm/elf.h  55  #define R_X86_64_RELATIVE 8
R_X86_64_GOTPCREL  macro  arch/x86/include/asm/elf.h  56  #define R_X86_64_GOTPCREL 9
R_X86_64_32  macro  arch/x86/include/asm/elf.h  58  #define R_X86_64_32 10
R_X86_64_32S  macro  arch/x86/include/asm/elf.h  59  #define R_X86_64_32S 11
R_X86_64_16  macro  arch/x86/include/asm/elf.h  60  #define R_X86_64_16 12
R_X86_64_PC16  macro  arch/x86/include/asm/elf.h  61  #define R_X86_64_PC16 13
R_X86_64_8  macro  arch/x86/include/asm/elf.h  62  #define R_X86_64_8 14
R_X86_64_PC8  macro  arch/x86/include/asm/elf.h  63  #define R_X86_64_PC8 15
R_X86_64_NUM  macro  arch/x86/include/asm/elf.h  65  #define R_X86_64_NUM 16
elf_check_arch_ia32  macro  arch/x86/include/asm/elf.h  83  #define elf_check_arch_ia32(x) (((x)->e_machine == EM_386) || ((x)->e_machine == EM_486))
elf_check_arch  macro  arch/x86/include/asm/elf.h  155  #define elf_check_arch(x) ((x)->e_machine == EM_X86_64)
ELF_PLAT_INIT  macro  arch/x86/include/asm/elf.h  177  #define ELF_PLAT_INIT(_r,load_addr) elf_common_init(&current->thread, _r, 0)
ELF_CORE_COPY_REGS_COMMON  macro  arch/x86/include/asm/elf.h  115  #define ELF_CORE_COPY_REGS_COMMON(pr_reg,regs) do { pr_reg[0] = regs->bx; pr_reg[1] = regs->cx; pr_reg[2] = regs->dx; pr_reg[3] = regs->si; pr_reg[4] = regs->di; pr_reg[5] = regs->bp; pr_reg[6] = regs->ax; pr_reg[7] = regs->ds & 0xffff; pr_reg[8] = regs->es & 0xffff; pr_reg[9] = regs->fs & 0xffff; pr_reg[11] = regs->orig_ax; pr_reg[12] = regs->ip; pr_reg[13] = regs->cs & 0xffff; pr_reg[14] = regs->flags; pr_reg[15] = regs->sp; pr_reg[16] = regs->ss & 0xffff; } while (0);
ELF_CORE_COPY_REGS  macro  arch/x86/include/asm/elf.h  198  #define ELF_CORE_COPY_REGS(pr_reg,regs) do { unsigned v; (pr_reg)[0] = (regs)->r15; (pr_reg)[1] = (regs)->r14; (pr_reg)[2] = (regs)->r13; (pr_reg)[3] = (regs)->r12; (pr_reg)[4] = (regs)->bp; (pr_reg)[5] = (regs)->bx; (pr_reg)[6] = (regs)->r11; (pr_reg)[7] = (regs)->r10; (pr_reg)[8] = (regs)->r9; (pr_reg)[9] = (regs)->r8; (pr_reg)[10] = (regs)->ax; (pr_reg)[11] = (regs)->cx; (pr_reg)[12] = (regs)->dx; (pr_reg)[13] = (regs)->si; (pr_reg)[14] = (regs)->di; (pr_reg)[15] = (regs)->orig_ax; (pr_reg)[16] = (regs)->ip; (pr_reg)[17] = (regs)->cs; (pr_reg)[18] = (regs)->flags; (pr_reg)[19] = (regs)->sp; (pr_reg)[20] = (regs)->ss; (pr_reg)[21] = current->thread.fs; (pr_reg)[22] = current->thread.gs; asm("movl %%ds,%0" : "=r" (v)); (pr_reg)[23] = v; asm("movl %%es,%0" : "=r" (v)); (pr_reg)[24] = v; asm("movl %%fs,%0" : "=r" (v)); (pr_reg)[25] = v; asm("movl %%gs,%0" : "=r" (v)); (pr_reg)[26] = v; } while (0);
ELF_CORE_COPY_KERNEL_REGS  macro  arch/x86/include/asm/elf.h  141  #define ELF_CORE_COPY_KERNEL_REGS(pr_reg,regs) do { ELF_CORE_COPY_REGS_COMMON(pr_reg, regs); savesegment(gs, pr_reg[10]); } while (0);
ELF_PLATFORM  macro  arch/x86/include/asm/elf.h  231  #define ELF_PLATFORM ("x86_64")
set_personality_64bit  prototype  arch/x86/include/asm/elf.h  232  extern void set_personality_64bit(void);
compat_elf_check_arch  macro  arch/x86/include/asm/elf.h  158  #define compat_elf_check_arch(x) (elf_check_arch_ia32(x) || (x)->e_machine == EM_X86_64)
elf_common_init  function  arch/x86/include/asm/elf.h  165  static inline void elf_common_init(struct thread_struct *t,struct pt_regs *regs, const u16 ds)
COMPAT_ELF_PLAT_INIT  macro  arch/x86/include/asm/elf.h  180  #define COMPAT_ELF_PLAT_INIT(regs,load_addr) elf_common_init(&current->thread, regs, __USER_DS)
start_thread_ia32  prototype  arch/x86/include/asm/elf.h  183  void start_thread_ia32(struct pt_regs *regs,u32 new_ip,u32 new_sp);
compat_start_thread  macro  arch/x86/include/asm/elf.h  184  #define compat_start_thread start_thread_ia32
set_personality_ia32  prototype  arch/x86/include/asm/elf.h  186  void set_personality_ia32(bool);
COMPAT_SET_PERSONALITY  macro  arch/x86/include/asm/elf.h  187  #define COMPAT_SET_PERSONALITY(ex) set_personality_ia32((ex).e_machine == EM_X86_64)
COMPAT_ELF_PLATFORM  macro  arch/x86/include/asm/elf.h  190  #define COMPAT_ELF_PLATFORM ("i686")
CORE_DUMP_USE_REGSET  macro  arch/x86/include/asm/elf.h  238  #define CORE_DUMP_USE_REGSET
ELF_EXEC_PAGESIZE  macro  arch/x86/include/asm/elf.h  239  #define ELF_EXEC_PAGESIZE 4096
ELF_ET_DYN_BASE  macro  arch/x86/include/asm/elf.h  246  #define ELF_ET_DYN_BASE (TASK_SIZE / 3 * 2)
ELF_HWCAP  macro  arch/x86/include/asm/elf.h  252  #define ELF_HWCAP (boot_cpu_data.x86_capability[0])
SET_PERSONALITY  macro  arch/x86/include/asm/elf.h  261  #define SET_PERSONALITY(ex) set_personality_64bit()
ARCH_DLINFO_IA32  macro  arch/x86/include/asm/elf.h  272  #define ARCH_DLINFO_IA32(vdso_enabled) do { if (vdso_enabled) { NEW_AUX_ENT(AT_SYSINFO,	VDSO_ENTRY); NEW_AUX_ENT(AT_SYSINFO_EHDR, VDSO_CURRENT_BASE); } } while (0)
STACK_RND_MASK  macro  arch/x86/include/asm/elf.h  295  #define STACK_RND_MASK (test_thread_flag(TIF_ADDR32) ? 0x7ff : 0x3fffff)
VDSO_HIGH_BASE  macro  arch/x86/include/asm/elf.h  292  #define VDSO_HIGH_BASE 0xffffe000U
ARCH_DLINFO  macro  arch/x86/include/asm/elf.h  297  #define ARCH_DLINFO do { if (vdso_enabled) NEW_AUX_ENT(AT_SYSINFO_EHDR, (unsigned long)current->mm->context.vdso); } while (0)
ARCH_DLINFO_X32  macro  arch/x86/include/asm/elf.h  304  #define ARCH_DLINFO_X32 do { if (vdso_enabled) NEW_AUX_ENT(AT_SYSINFO_EHDR, (unsigned long)current->mm->context.vdso); } while (0)
AT_SYSINFO  macro  arch/x86/include/asm/elf.h  311  #define AT_SYSINFO 32
COMPAT_ARCH_DLINFO  macro  arch/x86/include/asm/elf.h  313  #define COMPAT_ARCH_DLINFO if (test_thread_flag(TIF_X32)) ARCH_DLINFO_X32; else ARCH_DLINFO_IA32(sysctl_vsyscall32)
COMPAT_ELF_ET_DYN_BASE  macro  arch/x86/include/asm/elf.h  319  #define COMPAT_ELF_ET_DYN_BASE (TASK_UNMAPPED_BASE + 0x1000000)
VDSO_CURRENT_BASE  macro  arch/x86/include/asm/elf.h  323  #define VDSO_CURRENT_BASE ((unsigned long)current->mm->context.vdso)
VDSO_ENTRY  macro  arch/x86/include/asm/elf.h  325  #define VDSO_ENTRY ((unsigned long)VDSO32_SYMBOL(VDSO_CURRENT_BASE, vsyscall))
ARCH_HAS_SETUP_ADDITIONAL_PAGES  macro  arch/x86/include/asm/elf.h  330  #define ARCH_HAS_SETUP_ADDITIONAL_PAGES 1
arch_setup_additional_pages  prototype  arch/x86/include/asm/elf.h  331  extern int arch_setup_additional_pages(struct linux_binprm *bprm,int uses_interp);
x32_setup_additional_pages  prototype  arch/x86/include/asm/elf.h  333  extern int x32_setup_additional_pages(struct linux_binprm *bprm,int uses_interp);
syscall32_setup_pages  prototype  arch/x86/include/asm/elf.h  336  extern int syscall32_setup_pages(struct linux_binprm *,int exstack);
compat_arch_setup_additional_pages  macro  arch/x86/include/asm/elf.h  337  #define compat_arch_setup_additional_pages syscall32_setup_pages
arch_randomize_brk  macro  arch/x86/include/asm/elf.h  340  #define arch_randomize_brk arch_randomize_brk
mmap_is_ia32  function  arch/x86/include/asm/elf.h  345  static inline int mmap_is_ia32(void)
align_flags  enum  arch/x86/include/asm/elf.h  358  enum align_flags { ALIGN_VA_32 = BIT(0), ALIGN_VA_64 = BIT(1), };
va_alignment  struct  arch/x86/include/asm/elf.h  363  struct va_alignment { int flags; unsigned long mask; } ____cacheline_aligned;
align_vdso_addr  prototype  arch/x86/include/asm/elf.h  369  extern unsigned long align_vdso_addr(unsigned long);
_UAPI_LINUX_ELF_H  macro  include/uapi/linux/elf.h  2  #define _UAPI_LINUX_ELF_H
PT_NULL  macro  include/uapi/linux/elf.h  25  #define PT_NULL 0
PT_LOAD  macro  include/uapi/linux/elf.h  26  #define PT_LOAD 1
PT_DYNAMIC  macro  include/uapi/linux/elf.h  27  #define PT_DYNAMIC 2
PT_INTERP  macro  include/uapi/linux/elf.h  28  #define PT_INTERP 3
PT_NOTE  macro  include/uapi/linux/elf.h  29  #define PT_NOTE 4
PT_SHLIB  macro  include/uapi/linux/elf.h  30  #define PT_SHLIB 5
PT_PHDR  macro  include/uapi/linux/elf.h  31  #define PT_PHDR 6
PT_TLS  macro  include/uapi/linux/elf.h  32  #define PT_TLS 7
PT_LOOS  macro  include/uapi/linux/elf.h  33  #define PT_LOOS 0x60000000
PT_HIOS  macro  include/uapi/linux/elf.h  34  #define PT_HIOS 0x6fffffff
PT_LOPROC  macro  include/uapi/linux/elf.h  35  #define PT_LOPROC 0x70000000
PT_HIPROC  macro  include/uapi/linux/elf.h  36  #define PT_HIPROC 0x7fffffff
PT_GNU_EH_FRAME  macro  include/uapi/linux/elf.h  37  #define PT_GNU_EH_FRAME 0x6474e550
PT_GNU_STACK  macro  include/uapi/linux/elf.h  39  #define PT_GNU_STACK (PT_LOOS + 0x474e551)
PN_XNUM  macro  include/uapi/linux/elf.h  61  #define PN_XNUM 0xffff
ET_NONE  macro  include/uapi/linux/elf.h  64  #define ET_NONE 0
ET_REL  macro  include/uapi/linux/elf.h  65  #define ET_REL 1
ET_EXEC  macro  include/uapi/linux/elf.h  66  #define ET_EXEC 2
ET_DYN  macro  include/uapi/linux/elf.h  67  #define ET_DYN 3
ET_CORE  macro  include/uapi/linux/elf.h  68  #define ET_CORE 4
ET_LOPROC  macro  include/uapi/linux/elf.h  69  #define ET_LOPROC 0xff00
ET_HIPROC  macro  include/uapi/linux/elf.h  70  #define ET_HIPROC 0xffff
DT_NULL  macro  include/uapi/linux/elf.h  73  #define DT_NULL 0
DT_NEEDED  macro  include/uapi/linux/elf.h  74  #define DT_NEEDED 1
DT_PLTRELSZ  macro  include/uapi/linux/elf.h  75  #define DT_PLTRELSZ 2
DT_PLTGOT  macro  include/uapi/linux/elf.h  76  #define DT_PLTGOT 3
DT_HASH  macro  include/uapi/linux/elf.h  77  #define DT_HASH 4
DT_STRTAB  macro  include/uapi/linux/elf.h  78  #define DT_STRTAB 5
DT_SYMTAB  macro  include/uapi/linux/elf.h  79  #define DT_SYMTAB 6
DT_RELA  macro  include/uapi/linux/elf.h  80  #define DT_RELA 7
DT_RELASZ  macro  include/uapi/linux/elf.h  81  #define DT_RELASZ 8
DT_RELAENT  macro  include/uapi/linux/elf.h  82  #define DT_RELAENT 9
DT_STRSZ  macro  include/uapi/linux/elf.h  83  #define DT_STRSZ 10
DT_SYMENT  macro  include/uapi/linux/elf.h  84  #define DT_SYMENT 11
DT_INIT  macro  include/uapi/linux/elf.h  85  #define DT_INIT 12
DT_FINI  macro  include/uapi/linux/elf.h  86  #define DT_FINI 13
DT_SONAME  macro  include/uapi/linux/elf.h  87  #define DT_SONAME 14
DT_RPATH  macro  include/uapi/linux/elf.h  88  #define DT_RPATH 15
DT_SYMBOLIC  macro  include/uapi/linux/elf.h  89  #define DT_SYMBOLIC 16
DT_REL  macro  include/uapi/linux/elf.h  90  #define DT_REL 17
DT_RELSZ  macro  include/uapi/linux/elf.h  91  #define DT_RELSZ 18
DT_RELENT  macro  include/uapi/linux/elf.h  92  #define DT_RELENT 19
DT_PLTREL  macro  include/uapi/linux/elf.h  93  #define DT_PLTREL 20
DT_DEBUG  macro  include/uapi/linux/elf.h  94  #define DT_DEBUG 21
DT_TEXTREL  macro  include/uapi/linux/elf.h  95  #define DT_TEXTREL 22
DT_JMPREL  macro  include/uapi/linux/elf.h  96  #define DT_JMPREL 23
DT_ENCODING  macro  include/uapi/linux/elf.h  97  #define DT_ENCODING 32
OLD_DT_LOOS  macro  include/uapi/linux/elf.h  98  #define OLD_DT_LOOS 0x60000000
DT_LOOS  macro  include/uapi/linux/elf.h  99  #define DT_LOOS 0x6000000d
DT_HIOS  macro  include/uapi/linux/elf.h  100  #define DT_HIOS 0x6ffff000
DT_VALRNGLO  macro  include/uapi/linux/elf.h  101  #define DT_VALRNGLO 0x6ffffd00
DT_VALRNGHI  macro  include/uapi/linux/elf.h  102  #define DT_VALRNGHI 0x6ffffdff
DT_ADDRRNGLO  macro  include/uapi/linux/elf.h  103  #define DT_ADDRRNGLO 0x6ffffe00
DT_ADDRRNGHI  macro  include/uapi/linux/elf.h  104  #define DT_ADDRRNGHI 0x6ffffeff
DT_VERSYM  macro  include/uapi/linux/elf.h  105  #define DT_VERSYM 0x6ffffff0
DT_RELACOUNT  macro  include/uapi/linux/elf.h  106  #define DT_RELACOUNT 0x6ffffff9
DT_RELCOUNT  macro  include/uapi/linux/elf.h  107  #define DT_RELCOUNT 0x6ffffffa
DT_FLAGS_1  macro  include/uapi/linux/elf.h  108  #define DT_FLAGS_1 0x6ffffffb
DT_VERDEF  macro  include/uapi/linux/elf.h  109  #define DT_VERDEF 0x6ffffffc
DT_VERDEFNUM  macro  include/uapi/linux/elf.h  110  #define DT_VERDEFNUM 0x6ffffffd
DT_VERNEED  macro  include/uapi/linux/elf.h  111  #define DT_VERNEED 0x6ffffffe
DT_VERNEEDNUM  macro  include/uapi/linux/elf.h  112  #define DT_VERNEEDNUM 0x6fffffff
OLD_DT_HIOS  macro  include/uapi/linux/elf.h  113  #define OLD_DT_HIOS 0x6fffffff
DT_LOPROC  macro  include/uapi/linux/elf.h  114  #define DT_LOPROC 0x70000000
DT_HIPROC  macro  include/uapi/linux/elf.h  115  #define DT_HIPROC 0x7fffffff
STB_LOCAL  macro  include/uapi/linux/elf.h  118  #define STB_LOCAL 0
STB_GLOBAL  macro  include/uapi/linux/elf.h  119  #define STB_GLOBAL 1
STB_WEAK  macro  include/uapi/linux/elf.h  120  #define STB_WEAK 2
STT_NOTYPE  macro  include/uapi/linux/elf.h  122  #define STT_NOTYPE 0
STT_OBJECT  macro  include/uapi/linux/elf.h  123  #define STT_OBJECT 1
STT_FUNC  macro  include/uapi/linux/elf.h  124  #define STT_FUNC 2
STT_SECTION  macro  include/uapi/linux/elf.h  125  #define STT_SECTION 3
STT_FILE  macro  include/uapi/linux/elf.h  126  #define STT_FILE 4
STT_COMMON  macro  include/uapi/linux/elf.h  127  #define STT_COMMON 5
STT_TLS  macro  include/uapi/linux/elf.h  128  #define STT_TLS 6
ELF_ST_BIND  macro  include/uapi/linux/elf.h  130  #define ELF_ST_BIND(x) ((x) >> 4)
ELF_ST_TYPE  macro  include/uapi/linux/elf.h  131  #define ELF_ST_TYPE(x) (((unsigned int) x) & 0xf)
ELF32_ST_BIND  macro  include/uapi/linux/elf.h  132  #define ELF32_ST_BIND(x) ELF_ST_BIND(x)
ELF32_ST_TYPE  macro  include/uapi/linux/elf.h  133  #define ELF32_ST_TYPE(x) ELF_ST_TYPE(x)
ELF64_ST_BIND  macro  include/uapi/linux/elf.h  134  #define ELF64_ST_BIND(x) ELF_ST_BIND(x)
ELF64_ST_TYPE  macro  include/uapi/linux/elf.h  135  #define ELF64_ST_TYPE(x) ELF_ST_TYPE(x)
dynamic  struct  include/uapi/linux/elf.h  137  typedef struct dynamic{ Elf32_Sword d_tag; union { Elf32_Sword d_val; Elf32_Addr d_ptr; } d_un; } Elf32_Dyn;
Elf32_Dyn  struct  include/uapi/linux/elf.h  137  typedef struct dynamic{ Elf32_Sword d_tag; union { Elf32_Sword d_val; Elf32_Addr d_ptr; } d_un; } Elf32_Dyn;
Elf64_Dyn  struct  include/uapi/linux/elf.h  145  typedef struct { Elf64_Sxword d_tag; Elf64_Xword d_val; Elf64_Addr d_ptr; } d_un; } Elf64_Dyn;
ELF32_R_SYM  macro  include/uapi/linux/elf.h  154  #define ELF32_R_SYM(x) ((x) >> 8)
ELF32_R_TYPE  macro  include/uapi/linux/elf.h  155  #define ELF32_R_TYPE(x) ((x) & 0xff)
ELF64_R_SYM  macro  include/uapi/linux/elf.h  157  #define ELF64_R_SYM(i) ((i) >> 32)
ELF64_R_TYPE  macro  include/uapi/linux/elf.h  158  #define ELF64_R_TYPE(i) ((i) & 0xffffffff)
elf32_rel  struct  include/uapi/linux/elf.h  160  typedef struct elf32_rel { Elf32_Addr r_offset; Elf32_Word r_info; } Elf32_Rel;
Elf32_Rel  struct  include/uapi/linux/elf.h  160  typedef struct elf32_rel { Elf32_Addr r_offset; Elf32_Word r_info; } Elf32_Rel;
elf64_rel  struct  include/uapi/linux/elf.h  165  typedef struct elf64_rel { Elf64_Addr r_offset; Elf64_Xword r_info; } Elf64_Rel;
Elf64_Rel  struct  include/uapi/linux/elf.h  165  typedef struct elf64_rel { Elf64_Addr r_offset; Elf64_Xword r_info; } Elf64_Rel;
elf32_rela  struct  include/uapi/linux/elf.h  170  typedef struct elf32_rela{ Elf32_Addr r_offset; Elf32_Word r_info; Elf32_Sword r_addend; } Elf32_Rela;
Elf32_Rela  struct  include/uapi/linux/elf.h  170  typedef struct elf32_rela{ Elf32_Addr r_offset; Elf32_Word r_info; Elf32_Sword r_addend; } Elf32_Rela;
elf64_rela  struct  include/uapi/linux/elf.h  176  typedef struct elf64_rela { Elf64_Addr r_offset; Elf64_Xword r_info; Elf64_Sxword r_addend; } Elf64_Rela;
Elf64_Rela  struct  include/uapi/linux/elf.h  176  typedef struct elf64_rela { Elf64_Addr r_offset; Elf64_Xword r_info; Elf64_Sxword r_addend; } Elf64_Rela;
elf32_sym  struct  include/uapi/linux/elf.h  182  typedef struct elf32_sym{ Elf32_Word st_name; Elf32_Addr st_value; Elf32_Word st_size; unsigned char st_info; unsigned char st_other; Elf32_Half st_shndx; } Elf32_Sym;
Elf32_Sym  struct  include/uapi/linux/elf.h  182  typedef struct elf32_sym{ Elf32_Word st_name; Elf32_Addr st_value; Elf32_Word st_size; unsigned char st_info; unsigned char st_other; Elf32_Half st_shndx; } Elf32_Sym;
elf64_sym  struct  include/uapi/linux/elf.h  191  typedef struct elf64_sym { Elf64_Word st_name; unsigned char st_info; unsigned char st_other; Elf64_Half st_shndx; Elf64_Addr st_value; Elf64_Xword st_size; } Elf64_Sym;
Elf64_Sym  struct  include/uapi/linux/elf.h  191  typedef struct elf64_sym { Elf64_Word st_name; unsigned char st_info; unsigned char st_other; Elf64_Half st_shndx; Elf64_Addr st_value; Elf64_Xword st_size; } Elf64_Sym;
EI_NIDENT  macro  include/uapi/linux/elf.h  201  #define EI_NIDENT 16
elf32_hdr  struct  include/uapi/linux/elf.h  203  typedef struct elf32_hdr{ unsigned char e_ident[EI_NIDENT]; Elf32_Half e_type; Elf32_Half e_machine; Elf32_Word e_version; Elf32_Addr e_entry; Elf32_Off e_phoff; Elf32_Off e_shoff; Elf32_Word e_flags; Elf32_Half e_ehsize; Elf32_Half e_phentsize; Elf32_Half e_phnum; Elf32_Half e_shentsize; Elf32_Half e_shnum; Elf32_Half e_shstrndx; } Elf32_Ehdr;
Elf32_Ehdr  struct  include/uapi/linux/elf.h  203  typedef struct elf32_hdr{ unsigned char e_ident[EI_NIDENT]; Elf32_Half e_type; Elf32_Half e_machine; Elf32_Word e_version; Elf32_Addr e_entry; Elf32_Off e_phoff; Elf32_Off e_shoff; Elf32_Word e_flags; Elf32_Half e_ehsize; Elf32_Half e_phentsize; Elf32_Half e_phnum; Elf32_Half e_shentsize; Elf32_Half e_shnum; Elf32_Half e_shstrndx; } Elf32_Ehdr;
elf64_hdr  struct  include/uapi/linux/elf.h  220  typedef struct elf64_hdr { unsigned char e_ident[EI_NIDENT]; Elf64_Half e_type; Elf64_Half e_machine; Elf64_Word e_version; Elf64_Addr e_entry; Elf64_Off e_phoff; Elf64_Off e_shoff; Elf64_Word e_flags; Elf64_Half e_ehsize; Elf64_Half e_phentsize; Elf64_Half e_phnum; Elf64_Half e_shentsize; Elf64_Half e_shnum; Elf64_Half e_shstrndx; } Elf64_Ehdr;
Elf64_Ehdr  struct  include/uapi/linux/elf.h  220  typedef struct elf64_hdr { unsigned char e_ident[EI_NIDENT]; Elf64_Half e_type; Elf64_Half e_machine; Elf64_Word e_version; Elf64_Addr e_entry; Elf64_Off e_phoff; Elf64_Off e_shoff; Elf64_Word e_flags; Elf64_Half e_ehsize; Elf64_Half e_phentsize; Elf64_Half e_phnum; Elf64_Half e_shentsize; Elf64_Half e_shnum; Elf64_Half e_shstrndx; } Elf64_Ehdr;
PF_R  macro  include/uapi/linux/elf.h  239  #define PF_R 0x4
PF_W  macro  include/uapi/linux/elf.h  240  #define PF_W 0x2
PF_X  macro  include/uapi/linux/elf.h  241  #define PF_X 0x1
elf32_phdr  struct  include/uapi/linux/elf.h  243  typedef struct elf32_phdr{ Elf32_Word p_type; Elf32_Off p_offset; Elf32_Addr p_vaddr; Elf32_Addr p_paddr; Elf32_Word p_filesz; Elf32_Word p_memsz; Elf32_Word p_flags; Elf32_Word p_align; } Elf32_Phdr;
Elf32_Phdr  struct  include/uapi/linux/elf.h  243  typedef struct elf32_phdr{ Elf32_Word p_type; Elf32_Off p_offset; Elf32_Addr p_vaddr; Elf32_Addr p_paddr; Elf32_Word p_filesz; Elf32_Word p_memsz; Elf32_Word p_flags; Elf32_Word p_align; } Elf32_Phdr;
elf64_phdr  struct  include/uapi/linux/elf.h  254  typedef struct elf64_phdr { Elf64_Word p_type; Elf64_Word p_flags; Elf64_Off p_offset; Elf64_Addr p_vaddr; Elf64_Addr p_paddr; Elf64_Xword p_filesz; Elf64_Xword p_memsz; Elf64_Xword p_align; } Elf64_Phdr;
Elf64_Phdr  struct  include/uapi/linux/elf.h  254  typedef struct elf64_phdr { Elf64_Word p_type; Elf64_Word p_flags; Elf64_Off p_offset; Elf64_Addr p_vaddr; Elf64_Addr p_paddr; Elf64_Xword p_filesz; Elf64_Xword p_memsz; Elf64_Xword p_align; } Elf64_Phdr;
SHT_NULL  macro  include/uapi/linux/elf.h  266  #define SHT_NULL 0
SHT_PROGBITS  macro  include/uapi/linux/elf.h  267  #define SHT_PROGBITS 1
SHT_SYMTAB  macro  include/uapi/linux/elf.h  268  #define SHT_SYMTAB 2
SHT_STRTAB  macro  include/uapi/linux/elf.h  269  #define SHT_STRTAB 3
SHT_RELA  macro  include/uapi/linux/elf.h  270  #define SHT_RELA 4
SHT_HASH  macro  include/uapi/linux/elf.h  271  #define SHT_HASH 5
SHT_DYNAMIC  macro  include/uapi/linux/elf.h  272  #define SHT_DYNAMIC 6
SHT_NOTE  macro  include/uapi/linux/elf.h  273  #define SHT_NOTE 7
SHT_NOBITS  macro  include/uapi/linux/elf.h  274  #define SHT_NOBITS 8
SHT_REL  macro  include/uapi/linux/elf.h  275  #define SHT_REL 9
SHT_SHLIB  macro  include/uapi/linux/elf.h  276  #define SHT_SHLIB 10
SHT_DYNSYM  macro  include/uapi/linux/elf.h  277  #define SHT_DYNSYM 11
SHT_NUM  macro  include/uapi/linux/elf.h  278  #define SHT_NUM 12
SHT_LOPROC  macro  include/uapi/linux/elf.h  279  #define SHT_LOPROC 0x70000000
SHT_HIPROC  macro  include/uapi/linux/elf.h  280  #define SHT_HIPROC 0x7fffffff
SHT_LOUSER  macro  include/uapi/linux/elf.h  281  #define SHT_LOUSER 0x80000000
SHT_HIUSER  macro  include/uapi/linux/elf.h  282  #define SHT_HIUSER 0xffffffff
SHF_WRITE  macro  include/uapi/linux/elf.h  285  #define SHF_WRITE 0x1
SHF_ALLOC  macro  include/uapi/linux/elf.h  286  #define SHF_ALLOC 0x2
SHF_EXECINSTR  macro  include/uapi/linux/elf.h  287  #define SHF_EXECINSTR 0x4
SHF_MASKPROC  macro  include/uapi/linux/elf.h  288  #define SHF_MASKPROC 0xf0000000
SHN_UNDEF  macro  include/uapi/linux/elf.h  291  #define SHN_UNDEF 0
SHN_LORESERVE  macro  include/uapi/linux/elf.h  292  #define SHN_LORESERVE 0xff00
SHN_LOPROC  macro  include/uapi/linux/elf.h  293  #define SHN_LOPROC 0xff00
SHN_HIPROC  macro  include/uapi/linux/elf.h  294  #define SHN_HIPROC 0xff1f
SHN_ABS  macro  include/uapi/linux/elf.h  295  #define SHN_ABS 0xfff1
SHN_COMMON  macro  include/uapi/linux/elf.h  296  #define SHN_COMMON 0xfff2
SHN_HIRESERVE  macro  include/uapi/linux/elf.h  297  #define SHN_HIRESERVE 0xffff
elf32_shdr  struct  include/uapi/linux/elf.h  299  typedef struct elf32_shdr { Elf32_Word sh_name; Elf32_Word sh_type; Elf32_Word sh_flags; Elf32_Addr sh_addr; Elf32_Off sh_offset; Elf32_Word sh_size; Elf32_Word sh_link; Elf32_Word sh_info; Elf32_Word sh_addralign; Elf32_Word sh_entsize; } Elf32_Shdr;
Elf32_Shdr  struct  include/uapi/linux/elf.h  299  typedef struct elf32_shdr { Elf32_Word sh_name; Elf32_Word sh_type; Elf32_Word sh_flags; Elf32_Addr sh_addr; Elf32_Off sh_offset; Elf32_Word sh_size; Elf32_Word sh_link; Elf32_Word sh_info; Elf32_Word sh_addralign; Elf32_Word sh_entsize; } Elf32_Shdr;
elf64_shdr  struct  include/uapi/linux/elf.h  312  typedef struct elf64_shdr { Elf64_Word sh_name; Elf64_Word sh_type; Elf64_Xword sh_flags; Elf64_Addr sh_addr; Elf64_Off sh_offset; Elf64_Xword sh_size; Elf64_Word sh_link; Elf64_Word sh_info; Elf64_Xword sh_addralign; Elf64_Xword sh_entsize; } Elf64_Shdr;
Elf64_Shdr  struct  include/uapi/linux/elf.h  312  typedef struct elf64_shdr { Elf64_Word sh_name; Elf64_Word sh_type; Elf64_Xword sh_flags; Elf64_Addr sh_addr; Elf64_Off sh_offset; Elf64_Xword sh_size; Elf64_Word sh_link; Elf64_Word sh_info; Elf64_Xword sh_addralign; Elf64_Xword sh_entsize; } Elf64_Shdr;
EI_MAG0  macro  include/uapi/linux/elf.h  325  #define EI_MAG0 0
EI_MAG1  macro  include/uapi/linux/elf.h  326  #define EI_MAG1 1
EI_MAG2  macro  include/uapi/linux/elf.h  327  #define EI_MAG2 2
EI_MAG3  macro  include/uapi/linux/elf.h  328  #define EI_MAG3 3
EI_CLASS  macro  include/uapi/linux/elf.h  329  #define EI_CLASS 4
EI_DATA  macro  include/uapi/linux/elf.h  330  #define EI_DATA 5
EI_VERSION  macro  include/uapi/linux/elf.h  331  #define EI_VERSION 6
EI_OSABI  macro  include/uapi/linux/elf.h  332  #define EI_OSABI 7
EI_PAD  macro  include/uapi/linux/elf.h  333  #define EI_PAD 8
ELFMAG0  macro  include/uapi/linux/elf.h  335  #define ELFMAG0 0x7f
ELFMAG1  macro  include/uapi/linux/elf.h  336  #define ELFMAG1 'E'
ELFMAG2  macro  include/uapi/linux/elf.h  337  #define ELFMAG2 'L'
ELFMAG3  macro  include/uapi/linux/elf.h  338  #define ELFMAG3 'F'
ELFMAG  macro  include/uapi/linux/elf.h  339  #define ELFMAG "\177ELF"
SELFMAG  macro  include/uapi/linux/elf.h  340  #define SELFMAG 4
ELFCLASSNONE  macro  include/uapi/linux/elf.h  342  #define ELFCLASSNONE 0
ELFCLASS32  macro  include/uapi/linux/elf.h  343  #define ELFCLASS32 1
ELFCLASS64  macro  include/uapi/linux/elf.h  344  #define ELFCLASS64 2
ELFCLASSNUM  macro  include/uapi/linux/elf.h  345  #define ELFCLASSNUM 3
ELFDATANONE  macro  include/uapi/linux/elf.h  347  #define ELFDATANONE 0
ELFDATA2LSB  macro  include/uapi/linux/elf.h  348  #define ELFDATA2LSB 1
ELFDATA2MSB  macro  include/uapi/linux/elf.h  349  #define ELFDATA2MSB 2
EV_NONE  macro  include/uapi/linux/elf.h  351  #define EV_NONE 0
EV_CURRENT  macro  include/uapi/linux/elf.h  352  #define EV_CURRENT 1
EV_NUM  macro  include/uapi/linux/elf.h  353  #define EV_NUM 2
ELFOSABI_NONE  macro  include/uapi/linux/elf.h  355  #define ELFOSABI_NONE 0
ELFOSABI_LINUX  macro  include/uapi/linux/elf.h  356  #define ELFOSABI_LINUX 3
ELF_OSABI  macro  include/uapi/linux/elf.h  359  #define ELF_OSABI ELFOSABI_NONE
NT_PRSTATUS  macro  include/uapi/linux/elf.h  367  #define NT_PRSTATUS 1
NT_PRFPREG  macro  include/uapi/linux/elf.h  368  #define NT_PRFPREG 2
NT_PRPSINFO  macro  include/uapi/linux/elf.h  369  #define NT_PRPSINFO 3
NT_TASKSTRUCT  macro  include/uapi/linux/elf.h  370  #define NT_TASKSTRUCT 4
NT_AUXV  macro  include/uapi/linux/elf.h  371  #define NT_AUXV 6
NT_SIGINFO  macro  include/uapi/linux/elf.h  376  #define NT_SIGINFO 0x53494749
NT_FILE  macro  include/uapi/linux/elf.h  377  #define NT_FILE 0x46494c45
NT_PRXFPREG  macro  include/uapi/linux/elf.h  378  #define NT_PRXFPREG 0x46e62b7f
NT_PPC_VMX  macro  include/uapi/linux/elf.h  379  #define NT_PPC_VMX 0x100
NT_PPC_SPE  macro  include/uapi/linux/elf.h  380  #define NT_PPC_SPE 0x101
NT_PPC_VSX  macro  include/uapi/linux/elf.h  381  #define NT_PPC_VSX 0x102
NT_386_TLS  macro  include/uapi/linux/elf.h  382  #define NT_386_TLS 0x200
NT_386_IOPERM  macro  include/uapi/linux/elf.h  383  #define NT_386_IOPERM 0x201
NT_X86_XSTATE  macro  include/uapi/linux/elf.h  384  #define NT_X86_XSTATE 0x202
NT_S390_HIGH_GPRS  macro  include/uapi/linux/elf.h  385  #define NT_S390_HIGH_GPRS 0x300
NT_S390_TIMER  macro  include/uapi/linux/elf.h  386  #define NT_S390_TIMER 0x301
NT_S390_TODCMP  macro  include/uapi/linux/elf.h  387  #define NT_S390_TODCMP 0x302
NT_S390_TODPREG  macro  include/uapi/linux/elf.h  388  #define NT_S390_TODPREG 0x303
NT_S390_CTRS  macro  include/uapi/linux/elf.h  389  #define NT_S390_CTRS 0x304
NT_S390_PREFIX  macro  include/uapi/linux/elf.h  390  #define NT_S390_PREFIX 0x305
NT_S390_LAST_BREAK  macro  include/uapi/linux/elf.h  391  #define NT_S390_LAST_BREAK 0x306
NT_S390_SYSTEM_CALL  macro  include/uapi/linux/elf.h  392  #define NT_S390_SYSTEM_CALL 0x307
NT_S390_TDB  macro  include/uapi/linux/elf.h  393  #define NT_S390_TDB 0x308
NT_ARM_VFP  macro  include/uapi/linux/elf.h  394  #define NT_ARM_VFP 0x400
NT_ARM_TLS  macro  include/uapi/linux/elf.h  395  #define NT_ARM_TLS 0x401
NT_ARM_HW_BREAK  macro  include/uapi/linux/elf.h  396  #define NT_ARM_HW_BREAK 0x402
NT_ARM_HW_WATCH  macro  include/uapi/linux/elf.h  397  #define NT_ARM_HW_WATCH 0x403
elf32_note  struct  include/uapi/linux/elf.h  401  typedef struct elf32_note { Elf32_Word n_namesz; Elf32_Word n_descsz; Elf32_Word n_type; } Elf32_Nhdr;
Elf32_Nhdr  struct  include/uapi/linux/elf.h  401  typedef struct elf32_note { Elf32_Word n_namesz; Elf32_Word n_descsz; Elf32_Word n_type; } Elf32_Nhdr;
elf64_note  struct  include/uapi/linux/elf.h  408  typedef struct elf64_note { Elf64_Word n_namesz; Elf64_Word n_descsz; Elf64_Word n_type; } Elf64_Nhdr;
Elf64_Nhdr  struct  include/uapi/linux/elf.h  408  typedef struct elf64_note { Elf64_Word n_namesz; Elf64_Word n_descsz; Elf64_Word n_type; } Elf64_Nhdr;
_SYSFS_H_  macro  include/linux/sysfs.h  13  #define _SYSFS_H_
attribute  struct  include/linux/sysfs.h  26  struct attribute { const char *name; umode_t mode; bool ignore_lockdep:1; struct lock_class_key *key; struct lock_class_key skey; };
sysfs_attr_init  macro  include/linux/sysfs.h  54  #define sysfs_attr_init(attr) do {} while(0)
attribute_group  struct  include/linux/sysfs.h  57  struct attribute_group { const char *name; umode_t (*is_visible)(struct kobject *,struct attribute *, int); struct attribute **attrs; };
__ATTR  macro  include/linux/sysfs.h  71  #define __ATTR(_name,_mode,_show,_store) { .attr = {.name = __stringify(_name), .mode = _mode }, .show	= _show, .store	= _store, }
__ATTR_RO  macro  include/linux/sysfs.h  77  #define __ATTR_RO(_name) { .attr	= { .name = __stringify(_name), .mode = 0444 }, .show	= _name##_show, }
__ATTR_NULL  macro  include/linux/sysfs.h  82  #define __ATTR_NULL { .attr = { .name = NULL } }
__ATTR_IGNORE_LOCKDEP  macro  include/linux/sysfs.h  92  #define __ATTR_IGNORE_LOCKDEP __ATTR
attr_name  macro  include/linux/sysfs.h  95  #define attr_name(_attr) (_attr).attr.name
bin_attribute  struct  include/linux/sysfs.h  100  struct bin_attribute { struct attribute attr; size_t size; ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,char *, loff_t, size_t); ssize_t (*write)(struct file *,struct kobject *, struct bin_attribute *,char *, loff_t, size_t); int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,struct vm_area_struct *vma); };
sysfs_bin_attr_init  macro  include/linux/sysfs.h  122  #define sysfs_bin_attr_init(bin_attr) sysfs_attr_init(&(bin_attr)->attr)
sysfs_ops  struct  include/linux/sysfs.h  124  struct sysfs_ops { ssize_t (*show)(struct kobject *, struct attribute *,char *); ssize_t (*store)(struct kobject *,struct attribute *,const char *, size_t); };
sysfs_schedule_callback  function  include/linux/sysfs.h  197  static inline int sysfs_schedule_callback(struct kobject *kobj,void (*func)(void *), void *data, struct module *owner)
sysfs_create_dir  function  include/linux/sysfs.h  203  static inline int sysfs_create_dir(struct kobject *kobj)
sysfs_remove_dir  function  include/linux/sysfs.h  208  static inline void sysfs_remove_dir(struct kobject *kobj)
sysfs_rename_dir  function  include/linux/sysfs.h  212  static inline int sysfs_rename_dir(struct kobject *kobj,const char *new_name)
sysfs_move_dir  function  include/linux/sysfs.h  217  static inline int sysfs_move_dir(struct kobject *kobj,struct kobject *new_parent_kobj)
sysfs_create_file  function  include/linux/sysfs.h  223  static inline int sysfs_create_file(struct kobject *kobj,const struct attribute *attr)
sysfs_create_files  function  include/linux/sysfs.h  229  static inline int sysfs_create_files(struct kobject *kobj,const struct attribute **attr)
sysfs_chmod_file  function  include/linux/sysfs.h  235  static inline int sysfs_chmod_file(struct kobject *kobj,const struct attribute *attr, umode_t mode)
sysfs_remove_file  function  include/linux/sysfs.h  241  static inline void sysfs_remove_file(struct kobject *kobj,const struct attribute *attr)
sysfs_remove_files  function  include/linux/sysfs.h  246  static inline void sysfs_remove_files(struct kobject *kobj,const struct attribute **attr)
sysfs_create_bin_file  function  include/linux/sysfs.h  251  static inline int sysfs_create_bin_file(struct kobject *kobj,const struct bin_attribute *attr)
sysfs_remove_bin_file  function  include/linux/sysfs.h  257  static inline void sysfs_remove_bin_file(struct kobject *kobj,const struct bin_attribute *attr)
sysfs_create_link  function  include/linux/sysfs.h  262  static inline int sysfs_create_link(struct kobject *kobj,struct kobject *target, const char *name)
sysfs_create_link_nowarn  function  include/linux/sysfs.h  268  static inline int sysfs_create_link_nowarn(struct kobject *kobj,struct kobject *target,const char *name)
sysfs_remove_link  function  include/linux/sysfs.h  275  static inline void sysfs_remove_link(struct kobject *kobj,const char *name)
sysfs_rename_link  function  include/linux/sysfs.h  279  static inline int sysfs_rename_link(struct kobject *k,struct kobject *t,const char *old_name, const char *new_name)
sysfs_delete_link  function  include/linux/sysfs.h  285  static inline void sysfs_delete_link(struct kobject *k,struct kobject *t,const char *name)
sysfs_create_group  function  include/linux/sysfs.h  290  static inline int sysfs_create_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_update_group  function  include/linux/sysfs.h  296  static inline int sysfs_update_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_remove_group  function  include/linux/sysfs.h  302  static inline void sysfs_remove_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_add_file_to_group  function  include/linux/sysfs.h  307  static inline int sysfs_add_file_to_group(struct kobject *kobj,const struct attribute *attr, const char *group)
sysfs_remove_file_from_group  function  include/linux/sysfs.h  313  static inline void sysfs_remove_file_from_group(struct kobject *kobj,const struct attribute *attr, const char *group)
sysfs_merge_group  function  include/linux/sysfs.h  318  static inline int sysfs_merge_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_unmerge_group  function  include/linux/sysfs.h  324  static inline void sysfs_unmerge_group(struct kobject *kobj,const struct attribute_group *grp)
sysfs_notify  function  include/linux/sysfs.h  329  static inline void sysfs_notify(struct kobject *kobj,const char *dir,const char *attr)
sysfs_notify_dirent  function  include/linux/sysfs.h  333  static inline void sysfs_notify_dirent(struct sysfs_dirent *sd)
sysfs_get_dirent  function  include/linux/sysfs.h  337  struct sysfs_dirent *sysfs_get_dirent(struct sysfs_dirent *parent_sd,const void *ns,const unsigned char *name)
sysfs_get  function  include/linux/sysfs.h  343  static inline struct sysfs_dirent *sysfs_get(struct sysfs_dirent *sd)
sysfs_put  function  include/linux/sysfs.h  347  static inline void sysfs_put(struct sysfs_dirent *sd)
sysfs_init  function  include/linux/sysfs.h  351  static inline int __must_check sysfs_init(void)
_LINUX_KOBJECT_NS_H  macro  include/linux/kobject_ns.h  18  #define _LINUX_KOBJECT_NS_H
kobj_ns_type  enum  include/linux/kobject_ns.h  27  enum kobj_ns_type { KOBJ_NS_TYPE_NONE = 0, KOBJ_NS_TYPE_NET, KOBJ_NS_TYPES };
kobj_ns_type_operations  struct  include/linux/kobject_ns.h  40  struct kobj_ns_type_operations { enum kobj_ns_type type; void *(*grab_current_ns)(void); const void *(*netlink_ns)(struct sock *sk); const void *(*initial_ns)(void); void (*drop_ns)(void *); };
kobj_ns_type_register  prototype  include/linux/kobject_ns.h  48  int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
kobj_ns_type_registered  prototype  include/linux/kobject_ns.h  49  int kobj_ns_type_registered(enum kobj_ns_type type);
kobj_child_ns_ops  prototype  include/linux/kobject_ns.h  50  const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
kobj_ns_ops  prototype  include/linux/kobject_ns.h  51  const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);
kobj_ns_grab_current  prototype  include/linux/kobject_ns.h  53  void *kobj_ns_grab_current(enum kobj_ns_type type);
kobj_ns_netlink  prototype  include/linux/kobject_ns.h  54  const void *kobj_ns_netlink(enum kobj_ns_type type,struct sock *sk);
kobj_ns_initial  prototype  include/linux/kobject_ns.h  55  const void *kobj_ns_initial(enum kobj_ns_type type);
kobj_ns_drop  prototype  include/linux/kobject_ns.h  56  void kobj_ns_drop(enum kobj_ns_type type,void *ns);
_LINUX_WAIT_H  macro  include/linux/wait.h  2  #define _LINUX_WAIT_H
default_wake_function  prototype  include/linux/wait.h  13  int default_wake_function(wait_queue_t *wait,unsigned mode,int flags,void *key);
__wait_queue  struct  include/linux/wait.h  15  struct __wait_queue { unsigned int flags; #define WQ_FLAG_EXCLUSIVE 0x01 wait_queue_func_t func; struct list_head task_list; };
wait_bit_key  struct  include/linux/wait.h  23  struct wait_bit_key { void *flags; int bit_nr; };
wait_bit_queue  struct  include/linux/wait.h  28  struct wait_bit_queue { struct wait_bit_key key; wait_queue_t wait; };
__wait_queue_head  struct  include/linux/wait.h  33  struct __wait_queue_head { spinlock_t lock; struct list_head task_list; };
__WAITQUEUE_INITIALIZER  macro  include/linux/wait.h  45  #define __WAITQUEUE_INITIALIZER(name,tsk) { .private	= tsk, .func		= default_wake_function, .task_list	= { NULL, NULL } }
DECLARE_WAITQUEUE  macro  include/linux/wait.h  50  #define DECLARE_WAITQUEUE(name,tsk) wait_queue_t name = __WAITQUEUE_INITIALIZER(name, tsk)
__WAIT_QUEUE_HEAD_INITIALIZER  macro  include/linux/wait.h  53  #define __WAIT_QUEUE_HEAD_INITIALIZER(name) { .lock		= __SPIN_LOCK_UNLOCKED(name.lock), .task_list	= { &(name).task_list, &(name).task_list } }
DECLARE_WAIT_QUEUE_HEAD  macro  include/linux/wait.h  57  #define DECLARE_WAIT_QUEUE_HEAD(name) wait_queue_head_t name = __WAIT_QUEUE_HEAD_INITIALIZER(name)
__WAIT_BIT_KEY_INITIALIZER  macro  include/linux/wait.h  60  #define __WAIT_BIT_KEY_INITIALIZER(word,bit) { .flags = word, .bit_nr = bit, }
__init_waitqueue_head  prototype  include/linux/wait.h  63  extern void __init_waitqueue_head(wait_queue_head_t *q,const char *name,struct lock_class_key *);
init_waitqueue_head  macro  include/linux/wait.h  65  #define init_waitqueue_head(q) do { static struct lock_class_key __key; __init_waitqueue_head((q), #q, &__key); } while (0)
__WAIT_QUEUE_HEAD_INIT_ONSTACK  macro  include/linux/wait.h  73  # define __WAIT_QUEUE_HEAD_INIT_ONSTACK(name) ({ init_waitqueue_head(&name); name; })
DECLARE_WAIT_QUEUE_HEAD_ONSTACK  macro  include/linux/wait.h  78  # define DECLARE_WAIT_QUEUE_HEAD_ONSTACK(name) DECLARE_WAIT_QUEUE_HEAD(name)
init_waitqueue_entry  function  include/linux/wait.h  81  static inline void init_waitqueue_entry(wait_queue_t *q,struct task_struct *p)
init_waitqueue_func_entry  function  include/linux/wait.h  88  static inline void init_waitqueue_func_entry(wait_queue_t *q,wait_queue_func_t func)
waitqueue_active  function  include/linux/wait.h  96  static inline int waitqueue_active(wait_queue_head_t *q)
add_wait_queue  prototype  include/linux/wait.h  101  extern void add_wait_queue(wait_queue_head_t *q,wait_queue_t *wait);
add_wait_queue_exclusive  prototype  include/linux/wait.h  102  extern void add_wait_queue_exclusive(wait_queue_head_t *q,wait_queue_t *wait);
remove_wait_queue  prototype  include/linux/wait.h  103  extern void remove_wait_queue(wait_queue_head_t *q,wait_queue_t *wait);
__add_wait_queue  function  include/linux/wait.h  105  static inline void __add_wait_queue(wait_queue_head_t *head,wait_queue_t *new)
__add_wait_queue_exclusive  function  include/linux/wait.h  113  static inline void __add_wait_queue_exclusive(wait_queue_head_t *q,wait_queue_t *wait)
__add_wait_queue_tail  function  include/linux/wait.h  120  static inline void __add_wait_queue_tail(wait_queue_head_t *head,wait_queue_t *new)
__add_wait_queue_tail_exclusive  function  include/linux/wait.h  126  static inline void __add_wait_queue_tail_exclusive(wait_queue_head_t *q,wait_queue_t *wait)
__remove_wait_queue  function  include/linux/wait.h  133  static inline void __remove_wait_queue(wait_queue_head_t *head,wait_queue_t *old)
__wake_up  prototype  include/linux/wait.h  139  void __wake_up(wait_queue_head_t *q,unsigned int mode,int nr,void *key);
__wake_up_locked_key  prototype  include/linux/wait.h  140  void __wake_up_locked_key(wait_queue_head_t *q,unsigned int mode,void *key);
__wake_up_sync_key  prototype  include/linux/wait.h  141  void __wake_up_sync_key(wait_queue_head_t *q,unsigned int mode,int nr,void *key);
__wake_up_locked  prototype  include/linux/wait.h  143  void __wake_up_locked(wait_queue_head_t *q,unsigned int mode,int nr);
__wake_up_sync  prototype  include/linux/wait.h  144  void __wake_up_sync(wait_queue_head_t *q,unsigned int mode,int nr);
__wake_up_bit  prototype  include/linux/wait.h  145  void __wake_up_bit(wait_queue_head_t *,void *,int);
__wait_on_bit  prototype  include/linux/wait.h  146  int __wait_on_bit(wait_queue_head_t *,struct wait_bit_queue *,int (*)(void *),unsigned);
__wait_on_bit_lock  prototype  include/linux/wait.h  147  int __wait_on_bit_lock(wait_queue_head_t *,struct wait_bit_queue *,int (*)(void *),unsigned);
wake_up_bit  prototype  include/linux/wait.h  148  void wake_up_bit(void *,int);
out_of_line_wait_on_bit  prototype  include/linux/wait.h  149  int out_of_line_wait_on_bit(void *,int,int (*)(void *),unsigned);
out_of_line_wait_on_bit_lock  prototype  include/linux/wait.h  150  int out_of_line_wait_on_bit_lock(void *,int,int (*)(void *),unsigned);
bit_waitqueue  prototype  include/linux/wait.h  151  wait_queue_head_t *bit_waitqueue(void *,int);
wake_up  macro  include/linux/wait.h  153  #define wake_up(x) __wake_up(x,TASK_NORMAL,1,NULL)
wake_up_nr  macro  include/linux/wait.h  154  #define wake_up_nr(x,nr) __wake_up(x,TASK_NORMAL,nr,NULL)
wake_up_all  macro  include/linux/wait.h  155  #define wake_up_all(x) __wake_up(x,TASK_NORMAL,0,NULL)
wake_up_locked  macro  include/linux/wait.h  156  #define wake_up_locked(x) __wake_up_locked((x),TASK_NORMAL,1)
wake_up_all_locked  macro  include/linux/wait.h  157  #define wake_up_all_locked(x) __wake_up_locked((x),TASK_NORMAL,0)
wake_up_interruptible  macro  include/linux/wait.h  159  #define wake_up_interruptible(x) __wake_up(x,TASK_INTERRUPTIBLE,1,NULL)
wake_up_interruptible_nr  macro  include/linux/wait.h  160  #define wake_up_interruptible_nr(x,nr) __wake_up(x,TASK_INTERRUPTIBLE,nr,NULL)
wake_up_interruptible_all  macro  include/linux/wait.h  161  #define wake_up_interruptible_all(x) __wake_up(x,TASK_INTERRUPTIBLE,0,NULL)
wake_up_interruptible_sync  macro  include/linux/wait.h  162  #define wake_up_interruptible_sync(x) __wake_up_sync((x),TASK_INTERRUPTIBLE,1)
wake_up_poll  macro  include/linux/wait.h  167  #define wake_up_poll(x,m) __wake_up(x, TASK_NORMAL, 1, (void *) (m))
wake_up_locked_poll  macro  include/linux/wait.h  169  #define wake_up_locked_poll(x,m) __wake_up_locked_key((x), TASK_NORMAL, (void *) (m))
wake_up_interruptible_poll  macro  include/linux/wait.h  171  #define wake_up_interruptible_poll(x,m) __wake_up(x, TASK_INTERRUPTIBLE, 1, (void *) (m))
wake_up_interruptible_sync_poll  macro  include/linux/wait.h  173  #define wake_up_interruptible_sync_poll(x,m) __wake_up_sync_key((x), TASK_INTERRUPTIBLE, 1, (void *) (m))
__wait_event  macro  include/linux/wait.h  176  #define __wait_event(wq,condition) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_UNINTERRUPTIBLE); if (condition) break; schedule(); } finish_wait(&wq, &__wait); } while (0)
wait_event  macro  include/linux/wait.h  201  #define wait_event(wq,condition) do { if (condition) break; __wait_event(wq, condition); } while (0)
__wait_event_timeout  macro  include/linux/wait.h  208  #define __wait_event_timeout(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_UNINTERRUPTIBLE); if (condition) break; ret = schedule_timeout(ret); if (!ret) break; } finish_wait(&wq, &__wait); } while (0)
wait_event_timeout  macro  include/linux/wait.h  239  #define wait_event_timeout(wq,condition,timeout) ({ long __ret = timeout; if (!(condition)) __wait_event_timeout(wq, condition, __ret); __ret; })
__wait_event_interruptible  macro  include/linux/wait.h  247  #define __wait_event_interruptible(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_INTERRUPTIBLE); if (condition) break; if (!signal_pending(current)) { schedule(); continue; } ret = -ERESTARTSYS; break; } finish_wait(&wq, &__wait); } while (0)
wait_event_interruptible  macro  include/linux/wait.h  280  #define wait_event_interruptible(wq,condition) ({ int __ret = 0; if (!(condition)) __wait_event_interruptible(wq, condition, __ret); __ret; })
__wait_event_interruptible_timeout  macro  include/linux/wait.h  288  #define __wait_event_interruptible_timeout(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_INTERRUPTIBLE); if (condition) break; if (!signal_pending(current)) { ret = schedule_timeout(ret); if (!ret) break; continue; } ret = -ERESTARTSYS; break; } finish_wait(&wq, &__wait); } while (0)
wait_event_interruptible_timeout  macro  include/linux/wait.h  325  #define wait_event_interruptible_timeout(wq,condition,timeout) ({ long __ret = timeout; if (!(condition)) __wait_event_interruptible_timeout(wq, condition, __ret); __ret; })
__wait_event_interruptible_exclusive  macro  include/linux/wait.h  333  #define __wait_event_interruptible_exclusive(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait_exclusive(&wq, &__wait, TASK_INTERRUPTIBLE); if (condition) { finish_wait(&wq, &__wait); break; } if (!signal_pending(current)) { schedule(); continue; } ret = -ERESTARTSYS; abort_exclusive_wait(&wq, &__wait, TASK_INTERRUPTIBLE, NULL); break; } } while (0)
wait_event_interruptible_exclusive  macro  include/linux/wait.h  355  #define wait_event_interruptible_exclusive(wq,condition) ({ int __ret = 0; if (!(condition)) __wait_event_interruptible_exclusive(wq, condition, __ret); __ret; })
__wait_event_interruptible_locked  macro  include/linux/wait.h  364  #define __wait_event_interruptible_locked(wq,condition,exclusive,irq) ({ int __ret = 0; DEFINE_WAIT(__wait); if (exclusive) __wait.flags |= WQ_FLAG_EXCLUSIVE; do { if (likely(list_empty(&__wait.task_list))) __add_wait_queue_tail(&(wq), &__wait); set_current_state(TASK_INTERRUPTIBLE); if (signal_pending(current)) { __ret = -ERESTARTSYS; break; } if (irq) spin_unlock_irq(&(wq).lock); else spin_unlock(&(wq).lock); schedule(); if (irq) spin_lock_irq(&(wq).lock); else spin_lock(&(wq).lock); } while (!(condition)); __remove_wait_queue(&(wq), &__wait); __set_current_state(TASK_RUNNING); __ret; })
wait_event_interruptible_locked  macro  include/linux/wait.h  417  #define wait_event_interruptible_locked(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 0, 0))
wait_event_interruptible_locked_irq  macro  include/linux/wait.h  444  #define wait_event_interruptible_locked_irq(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 0, 1))
wait_event_interruptible_exclusive_locked  macro  include/linux/wait.h  475  #define wait_event_interruptible_exclusive_locked(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 1, 0))
wait_event_interruptible_exclusive_locked_irq  macro  include/linux/wait.h  506  #define wait_event_interruptible_exclusive_locked_irq(wq,condition) ((condition) ? 0 : __wait_event_interruptible_locked(wq, condition, 1, 1))
__wait_event_killable  macro  include/linux/wait.h  512  #define __wait_event_killable(wq,condition,ret) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_KILLABLE); if (condition) break; if (!fatal_signal_pending(current)) { schedule(); continue; } ret = -ERESTARTSYS; break; } finish_wait(&wq, &__wait); } while (0)
wait_event_killable  macro  include/linux/wait.h  545  #define wait_event_killable(wq,condition) ({ int __ret = 0; if (!(condition)) __wait_event_killable(wq, condition, __ret); __ret; })
__wait_event_lock_irq  macro  include/linux/wait.h  554  #define __wait_event_lock_irq(wq,condition,lock,cmd) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_UNINTERRUPTIBLE); if (condition) break; spin_unlock_irq(&lock); cmd; schedule(); spin_lock_irq(&lock); } finish_wait(&wq, &__wait); } while (0)
wait_event_lock_irq_cmd  macro  include/linux/wait.h  593  #define wait_event_lock_irq_cmd(wq,condition,lock,cmd) do { if (condition) break; __wait_event_lock_irq(wq, condition, lock, cmd); } while (0)
wait_event_lock_irq  macro  include/linux/wait.h  620  #define wait_event_lock_irq(wq,condition,lock) do { if (condition) break; __wait_event_lock_irq(wq, condition, lock, ); } while (0)
__wait_event_interruptible_lock_irq  macro  include/linux/wait.h  628  #define __wait_event_interruptible_lock_irq(wq,condition, lock, ret, cmd) do { DEFINE_WAIT(__wait); for (;;) { prepare_to_wait(&wq, &__wait, TASK_INTERRUPTIBLE); if (condition) break; if (signal_pending(current)) { ret = -ERESTARTSYS; break; } spin_unlock_irq(&lock); cmd; schedule(); spin_lock_irq(&lock); } finish_wait(&wq, &__wait); } while (0)
wait_event_interruptible_lock_irq_cmd  macro  include/linux/wait.h  674  #define wait_event_interruptible_lock_irq_cmd(wq,condition,lock,cmd) ({ int __ret = 0; if (!(condition)) __wait_event_interruptible_lock_irq(wq, condition, lock, __ret, cmd); __ret; })
wait_event_interruptible_lock_irq  macro  include/linux/wait.h  706  #define wait_event_interruptible_lock_irq(wq,condition,lock) ({ int __ret = 0; if (!(condition)) __wait_event_interruptible_lock_irq(wq, condition, lock, __ret, ); __ret; })
sleep_on  prototype  include/linux/wait.h  722  extern void sleep_on(wait_queue_head_t *q);
sleep_on_timeout  prototype  include/linux/wait.h  723  extern long sleep_on_timeout(wait_queue_head_t *q,signed long timeout);
interruptible_sleep_on  prototype  include/linux/wait.h  725  extern void interruptible_sleep_on(wait_queue_head_t *q);
interruptible_sleep_on_timeout  prototype  include/linux/wait.h  726  extern long interruptible_sleep_on_timeout(wait_queue_head_t *q,signed long timeout);
prepare_to_wait  prototype  include/linux/wait.h  732  void prepare_to_wait(wait_queue_head_t *q,wait_queue_t *wait,int state);
prepare_to_wait_exclusive  prototype  include/linux/wait.h  733  void prepare_to_wait_exclusive(wait_queue_head_t *q,wait_queue_t *wait,int state);
finish_wait  prototype  include/linux/wait.h  734  void finish_wait(wait_queue_head_t *q,wait_queue_t *wait);
abort_exclusive_wait  prototype  include/linux/wait.h  735  void abort_exclusive_wait(wait_queue_head_t *q,wait_queue_t *wait,unsigned int mode, void *key);
autoremove_wake_function  prototype  include/linux/wait.h  737  int autoremove_wake_function(wait_queue_t *wait,unsigned mode,int sync,void *key);
wake_bit_function  prototype  include/linux/wait.h  738  int wake_bit_function(wait_queue_t *wait,unsigned mode,int sync,void *key);
DEFINE_WAIT_FUNC  macro  include/linux/wait.h  740  #define DEFINE_WAIT_FUNC(name,function) wait_queue_t name = { .private	= current, .func		= function, .task_list	= LIST_HEAD_INIT((name).task_list), }
DEFINE_WAIT  macro  include/linux/wait.h  747  #define DEFINE_WAIT(name) DEFINE_WAIT_FUNC(name,autoremove_wake_function)
DEFINE_WAIT_BIT  macro  include/linux/wait.h  749  #define DEFINE_WAIT_BIT(name,word,bit) struct wait_bit_queue name = { .key = __WAIT_BIT_KEY_INITIALIZER(word, bit), .wait	= { .private	= current, .func		= wake_bit_function, .task_list	= LIST_HEAD_INIT((name).wait.task_list), }, }
init_wait  macro  include/linux/wait.h  760  #define init_wait(wait) do { (wait)->private = current; (wait)->func = autoremove_wake_function; INIT_LIST_HEAD(&(wait)->task_list); (wait)->flags = 0; } while (0)
wait_on_bit  function  include/linux/wait.h  782  static inline int wait_on_bit(void *word,int bit,int (*action)(void *), unsigned mode)
wait_on_bit_lock  function  include/linux/wait.h  806  static inline int wait_on_bit_lock(void *word,int bit,int (*action)(void *), unsigned mode)
__LINUX_RCUPDATE_H  macro  include/linux/rcupdate.h  34  #define __LINUX_RCUPDATE_H
rcutorture_record_test_transition  function  include/linux/rcupdate.h  58  static inline void rcutorture_record_test_transition(void)
rcutorture_record_progress  function  include/linux/rcupdate.h  61  static inline void rcutorture_record_progress(unsigned long vernum)
do_trace_rcu_torture_read  macro  include/linux/rcupdate.h  68  #define do_trace_rcu_torture_read(rcutorturename,rhp) do { } while (0)
UINT_CMP_GE  macro  include/linux/rcupdate.h  72  #define UINT_CMP_GE(a,b) (UINT_MAX / 2 >= (a) - (b))
UINT_CMP_LT  macro  include/linux/rcupdate.h  73  #define UINT_CMP_LT(a,b) (UINT_MAX / 2 < (a) - (b))
ULONG_CMP_GE  macro  include/linux/rcupdate.h  74  #define ULONG_CMP_GE(a,b) (ULONG_MAX / 2 >= (a) - (b))
ULONG_CMP_LT  macro  include/linux/rcupdate.h  75  #define ULONG_CMP_LT(a,b) (ULONG_MAX / 2 < (a) - (b))
call_rcu  macro  include/linux/rcupdate.h  119  #define call_rcu call_rcu_sched
call_rcu_bh  prototype  include/linux/rcupdate.h  144  extern void call_rcu_bh(struct rcu_head *head,void (*func)(struct rcu_head *head));
call_rcu_sched  prototype  include/linux/rcupdate.h  166  extern void call_rcu_sched(struct rcu_head *head,void (*func)(struct rcu_head *rcu));
synchronize_sched  prototype  include/linux/rcupdate.h  169  extern void synchronize_sched(void);
__rcu_read_lock  function  include/linux/rcupdate.h  188  static inline void __rcu_read_lock(void)
__rcu_read_unlock  function  include/linux/rcupdate.h  193  static inline void __rcu_read_unlock(void)
rcu_read_unlock_special  prototype  include/linux/rcupdate.h  175  extern void rcu_read_unlock_special(struct task_struct *t);
synchronize_rcu  function  include/linux/rcupdate.h  198  static inline void synchronize_rcu(void)
rcu_preempt_depth  function  include/linux/rcupdate.h  203  static inline int rcu_preempt_depth(void)
rcu_sched_qs  prototype  include/linux/rcupdate.h  211  extern void rcu_sched_qs(int cpu);
rcu_bh_qs  prototype  include/linux/rcupdate.h  212  extern void rcu_bh_qs(int cpu);
rcu_check_callbacks  prototype  include/linux/rcupdate.h  213  extern void rcu_check_callbacks(int cpu,int user);
rcu_idle_enter  prototype  include/linux/rcupdate.h  215  extern void rcu_idle_enter(void);
rcu_idle_exit  prototype  include/linux/rcupdate.h  216  extern void rcu_idle_exit(void);
rcu_irq_enter  prototype  include/linux/rcupdate.h  217  extern void rcu_irq_enter(void);
rcu_irq_exit  prototype  include/linux/rcupdate.h  218  extern void rcu_irq_exit(void);
rcu_user_enter  function  include/linux/rcupdate.h  226  static inline void rcu_user_enter(void) { }
rcu_user_exit  function  include/linux/rcupdate.h  227  static inline void rcu_user_exit(void) { }
rcu_user_enter_after_irq  function  include/linux/rcupdate.h  228  static inline void rcu_user_enter_after_irq(void) { }
rcu_user_exit_after_irq  function  include/linux/rcupdate.h  229  static inline void rcu_user_exit_after_irq(void) { }
rcu_user_hooks_switch  function  include/linux/rcupdate.h  230  static inline void rcu_user_hooks_switch(struct task_struct *prev,struct task_struct *next) { }
exit_rcu  prototype  include/linux/rcupdate.h  234  extern void exit_rcu(void);
RCU_NONIDLE  macro  include/linux/rcupdate.h  254  #define RCU_NONIDLE(a) do { rcu_irq_enter(); do { a; } while (0); rcu_irq_exit(); } while (0)
wait_rcu_gp  prototype  include/linux/rcupdate.h  268  void wait_rcu_gp(call_rcu_func_t crf);
init_rcu_head_on_stack  function  include/linux/rcupdate.h  288  static inline void init_rcu_head_on_stack(struct rcu_head *head)
destroy_rcu_head_on_stack  function  include/linux/rcupdate.h  292  static inline void destroy_rcu_head_on_stack(struct rcu_head *head)
rcu_is_cpu_idle  prototype  include/linux/rcupdate.h  298  extern int rcu_is_cpu_idle(void);
rcu_lockdep_current_cpu_online  function  include/linux/rcupdate.h  304  static inline bool rcu_lockdep_current_cpu_online(void)
rcu_lock_acquire  macro  include/linux/rcupdate.h  419  # define rcu_lock_acquire(a) do { } while (0)
rcu_lock_release  macro  include/linux/rcupdate.h  420  # define rcu_lock_release(a) do { } while (0)
debug_lockdep_rcu_enabled  prototype  include/linux/rcupdate.h  325  extern int debug_lockdep_rcu_enabled(void);
rcu_read_lock_held  function  include/linux/rcupdate.h  422  static inline int rcu_read_lock_held(void)
rcu_read_lock_bh_held  function  include/linux/rcupdate.h  427  static inline int rcu_read_lock_bh_held(void)
rcu_read_lock_sched_held  function  include/linux/rcupdate.h  438  static inline int rcu_read_lock_sched_held(void)
rcu_my_thread_group_empty  prototype  include/linux/rcupdate.h  448  extern int rcu_my_thread_group_empty(void);
rcu_lockdep_assert  macro  include/linux/rcupdate.h  489  #define rcu_lockdep_assert(c,s) do { } while (0)
rcu_preempt_sleep_check  function  include/linux/rcupdate.h  471  static inline void rcu_preempt_sleep_check(void)
rcu_sleep_check  macro  include/linux/rcupdate.h  490  #define rcu_sleep_check() do { } while (0)
rcu_dereference_sparse  macro  include/linux/rcupdate.h  507  #define rcu_dereference_sparse(p,space)
__rcu_access_pointer  macro  include/linux/rcupdate.h  510  #define __rcu_access_pointer(p,space) ({ typeof(*p) *_________p1 = (typeof(*p)*__force )ACCESS_ONCE(p); rcu_dereference_sparse(p, space); ((typeof(*p) __force __kernel *)(_________p1)); })
__rcu_dereference_check  macro  include/linux/rcupdate.h  516  #define __rcu_dereference_check(p,c,space) ({ typeof(*p) *_________p1 = (typeof(*p)*__force )ACCESS_ONCE(p); rcu_lockdep_assert(c, "suspicious rcu_dereference_check()" " usage"); rcu_dereference_sparse(p, space); smp_read_barrier_depends(); ((typeof(*p) __force __kernel *)(_________p1)); })
__rcu_dereference_protected  macro  include/linux/rcupdate.h  525  #define __rcu_dereference_protected(p,c,space) ({ rcu_lockdep_assert(c, "suspicious rcu_dereference_protected()" " usage"); rcu_dereference_sparse(p, space); ((typeof(*p) __force __kernel *)(p)); })
__rcu_access_index  macro  include/linux/rcupdate.h  533  #define __rcu_access_index(p,space) ({ typeof(p) _________p1 = ACCESS_ONCE(p); rcu_dereference_sparse(p, space); (_________p1); })
__rcu_dereference_index_check  macro  include/linux/rcupdate.h  539  #define __rcu_dereference_index_check(p,c) ({ typeof(p) _________p1 = ACCESS_ONCE(p); rcu_lockdep_assert(c, "suspicious rcu_dereference_index_check()" " usage"); smp_read_barrier_depends(); (_________p1); })
__rcu_assign_pointer  macro  include/linux/rcupdate.h  548  #define __rcu_assign_pointer(p,v,space) do { smp_wmb(); (p) = (typeof(*v) __force space *)(v); } while (0)
rcu_access_pointer  macro  include/linux/rcupdate.h  574  #define rcu_access_pointer(p) __rcu_access_pointer((p),__rcu)
rcu_dereference_check  macro  include/linux/rcupdate.h  609  #define rcu_dereference_check(p,c) __rcu_dereference_check((p), rcu_read_lock_held() || (c), __rcu)
rcu_dereference_bh_check  macro  include/linux/rcupdate.h  619  #define rcu_dereference_bh_check(p,c) __rcu_dereference_check((p), rcu_read_lock_bh_held() || (c), __rcu)
rcu_dereference_sched_check  macro  include/linux/rcupdate.h  629  #define rcu_dereference_sched_check(p,c) __rcu_dereference_check((p), rcu_read_lock_sched_held() || (c), __rcu)
rcu_dereference_raw  macro  include/linux/rcupdate.h  633  #define rcu_dereference_raw(p) rcu_dereference_check(p,1)
rcu_access_index  macro  include/linux/rcupdate.h  647  #define rcu_access_index(p) __rcu_access_index((p),__rcu)
rcu_dereference_index_check  macro  include/linux/rcupdate.h  667  #define rcu_dereference_index_check(p,c) __rcu_dereference_index_check((p), (c))
rcu_dereference_protected  macro  include/linux/rcupdate.h  687  #define rcu_dereference_protected(p,c) __rcu_dereference_protected((p), (c), __rcu)
rcu_dereference  macro  include/linux/rcupdate.h  697  #define rcu_dereference(p) rcu_dereference_check(p,0)
rcu_dereference_bh  macro  include/linux/rcupdate.h  705  #define rcu_dereference_bh(p) rcu_dereference_bh_check(p,0)
rcu_dereference_sched  macro  include/linux/rcupdate.h  713  #define rcu_dereference_sched(p) rcu_dereference_sched_check(p,0)
rcu_read_lock  function  include/linux/rcupdate.h  757  static inline void rcu_read_lock(void)
rcu_read_unlock  function  include/linux/rcupdate.h  781  static inline void rcu_read_unlock(void)
rcu_read_lock_bh  function  include/linux/rcupdate.h  807  static inline void rcu_read_lock_bh(void)
rcu_read_unlock_bh  function  include/linux/rcupdate.h  821  static inline void rcu_read_unlock_bh(void)
rcu_read_lock_sched  function  include/linux/rcupdate.h  843  static inline void rcu_read_lock_sched(void)
rcu_read_lock_sched_notrace  function  include/linux/rcupdate.h  853  static inline notrace void rcu_read_lock_sched_notrace(void)
rcu_read_unlock_sched  function  include/linux/rcupdate.h  864  static inline void rcu_read_unlock_sched(void)
rcu_read_unlock_sched_notrace  function  include/linux/rcupdate.h  874  static inline notrace void rcu_read_unlock_sched_notrace(void)
rcu_assign_pointer  macro  include/linux/rcupdate.h  903  #define rcu_assign_pointer(p,v) __rcu_assign_pointer((p), (v), __rcu)
RCU_INIT_POINTER  macro  include/linux/rcupdate.h  938  #define RCU_INIT_POINTER(p,v) do { p = (typeof(*v) __force __rcu *)(v); } while (0)
RCU_POINTER_INITIALIZER  macro  include/linux/rcupdate.h  948  #define RCU_POINTER_INITIALIZER(p,v) .p = (typeof(*v) __force __rcu *)(v)
__is_kfree_rcu_offset  macro  include/linux/rcupdate.h  955  #define __is_kfree_rcu_offset(offset) ((offset) < 4096)
__kfree_rcu  macro  include/linux/rcupdate.h  960  #define __kfree_rcu(head,offset) do { BUILD_BUG_ON(!__is_kfree_rcu_offset(offset)); kfree_call_rcu(head, (void (*)(struct rcu_head *))(unsigned long)(offset)); } while (0)
kfree_rcu  macro  include/linux/rcupdate.h  992  #define kfree_rcu(ptr,rcu_head) __kfree_rcu(&((ptr)->rcu_head), offsetof(typeof(*(ptr)), rcu_head))
_LINUX_PFN_H_  macro  include/linux/pfn.h  2  #define _LINUX_PFN_H_
PFN_ALIGN  macro  include/linux/pfn.h  8  #define PFN_ALIGN(x) (((unsigned long)(x) + (PAGE_SIZE - 1)) & PAGE_MASK)
PFN_UP  macro  include/linux/pfn.h  9  #define PFN_UP(x) (((x) + PAGE_SIZE-1) >> PAGE_SHIFT)
PFN_DOWN  macro  include/linux/pfn.h  10  #define PFN_DOWN(x) ((x) >> PAGE_SHIFT)
PFN_PHYS  macro  include/linux/pfn.h  11  #define PFN_PHYS(x) ((phys_addr_t)(x) << PAGE_SHIFT)
_ASM_X86_PERCPU_H  macro  arch/x86/include/asm/percpu.h  2  #define _ASM_X86_PERCPU_H
__percpu_seg  macro  arch/x86/include/asm/percpu.h  8  #define __percpu_seg fs
__percpu_mov_op  macro  arch/x86/include/asm/percpu.h  9  #define __percpu_mov_op movl
PER_CPU  macro  arch/x86/include/asm/percpu.h  32  #define PER_CPU(var,reg) __percpu_mov_op $var,reg
PER_CPU_VAR  macro  arch/x86/include/asm/percpu.h  33  #define PER_CPU_VAR(var) var
INIT_PER_CPU_VAR  macro  arch/x86/include/asm/percpu.h  39  #define INIT_PER_CPU_VAR(var) var
__percpu_prefix  macro  arch/x86/include/asm/percpu.h  65  #define __percpu_prefix ""
__my_cpu_offset  macro  arch/x86/include/asm/percpu.h  49  #define __my_cpu_offset this_cpu_read(this_cpu_off)
__this_cpu_ptr  macro  arch/x86/include/asm/percpu.h  55  #define __this_cpu_ptr(ptr) ({ unsigned long tcp_ptr__; __verify_pcpu_ptr(ptr); asm volatile("add " __percpu_arg(1) ", %0" : "=r" (tcp_ptr__) : "m" (this_cpu_off), "0" (ptr)); (typeof(*(ptr)) __kernel __force *)tcp_ptr__; })
__percpu_arg  macro  arch/x86/include/asm/percpu.h  68  #define __percpu_arg(x) __percpu_prefix "%P" #x
DECLARE_INIT_PER_CPU  macro  arch/x86/include/asm/percpu.h  77  #define DECLARE_INIT_PER_CPU(var) extern typeof(var) init_per_cpu_var(var)
init_per_cpu_var  macro  arch/x86/include/asm/percpu.h  83  #define init_per_cpu_var(var) var
__bad_percpu_size  prototype  arch/x86/include/asm/percpu.h  88  extern void __bad_percpu_size(void);
percpu_to_op  macro  arch/x86/include/asm/percpu.h  90  #define percpu_to_op(op,var,val) do { typedef typeof(var) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (val); (void)pto_tmp__; } switch (sizeof(var)) { case 1: asm(op "b %1,"__percpu_arg(0) : "+m" (var) : "qi" ((pto_T__)(val))); break; case 2: asm(op "w %1,"__percpu_arg(0) : "+m" (var) : "ri" ((pto_T__)(val))); break; case 4: asm(op "l %1,"__percpu_arg(0) : "+m" (var) : "ri" ((pto_T__)(val))); break; case 8: asm(op "q %1,"__percpu_arg(0) : "+m" (var) : "re" ((pto_T__)(val))); break; default: __bad_percpu_size(); } } while (0)
percpu_add_op  macro  arch/x86/include/asm/percpu.h  127  #define percpu_add_op(var,val) do { typedef typeof(var) pao_T__; const int pao_ID__ = (__builtin_constant_p(val) && ((val) == 1 || (val) == -1)) ? (val) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (val); (void)pao_tmp__; } switch (sizeof(var)) { case 1: if (pao_ID__ == 1) asm("incb "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decb "__percpu_arg(0) : "+m" (var)); else asm("addb %1, "__percpu_arg(0) : "+m" (var) : "qi" ((pao_T__)(val))); break; case 2: if (pao_ID__ == 1) asm("incw "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decw "__percpu_arg(0) : "+m" (var)); else asm("addw %1, "__percpu_arg(0) : "+m" (var) : "ri" ((pao_T__)(val))); break; case 4: if (pao_ID__ == 1) asm("incl "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decl "__percpu_arg(0) : "+m" (var)); else asm("addl %1, "__percpu_arg(0) : "+m" (var) : "ri" ((pao_T__)(val))); break; case 8: if (pao_ID__ == 1) asm("incq "__percpu_arg(0) : "+m" (var)); else if (pao_ID__ == -1) asm("decq "__percpu_arg(0) : "+m" (var)); else asm("addq %1, "__percpu_arg(0) : "+m" (var) : "re" ((pao_T__)(val))); break; default: __bad_percpu_size(); } } while (0)
percpu_from_op  macro  arch/x86/include/asm/percpu.h  182  #define percpu_from_op(op,var,constraint) ({ typeof(var) pfo_ret__; switch (sizeof(var)) { case 1: asm(op "b "__percpu_arg(1)",%0" : "=q" (pfo_ret__) : constraint); break; case 2: asm(op "w "__percpu_arg(1)",%0" : "=r" (pfo_ret__) : constraint); break; case 4: asm(op "l "__percpu_arg(1)",%0" : "=r" (pfo_ret__) : constraint); break; case 8: asm(op "q "__percpu_arg(1)",%0" : "=r" (pfo_ret__) : constraint); break; default: __bad_percpu_size(); } pfo_ret__; })
percpu_unary_op  macro  arch/x86/include/asm/percpu.h  211  #define percpu_unary_op(op,var) ({ switch (sizeof(var)) { case 1: asm(op "b "__percpu_arg(0) : "+m" (var)); break; case 2: asm(op "w "__percpu_arg(0) : "+m" (var)); break; case 4: asm(op "l "__percpu_arg(0) : "+m" (var)); break; case 8: asm(op "q "__percpu_arg(0) : "+m" (var)); break; default: __bad_percpu_size(); } })
percpu_add_return_op  macro  arch/x86/include/asm/percpu.h  237  #define percpu_add_return_op(var,val) ({ typeof(var) paro_ret__ = val; switch (sizeof(var)) { case 1: asm("xaddb %0, "__percpu_arg(1) : "+q" (paro_ret__), "+m" (var) : : "memory"); break; case 2: asm("xaddw %0, "__percpu_arg(1) : "+r" (paro_ret__), "+m" (var) : : "memory"); break; case 4: asm("xaddl %0, "__percpu_arg(1) : "+r" (paro_ret__), "+m" (var) : : "memory"); break; case 8: asm("xaddq %0, "__percpu_arg(1) : "+re" (paro_ret__), "+m" (var) : : "memory"); break; default: __bad_percpu_size(); } paro_ret__ += val; paro_ret__; })
percpu_xchg_op  macro  arch/x86/include/asm/percpu.h  272  #define percpu_xchg_op(var,nval) ({ typeof(var) pxo_ret__; typeof(var) pxo_new__ = (nval); switch (sizeof(var)) { case 1: asm("\n\tmov "__percpu_arg(1)",%%al" "\n1:\tcmpxchgb %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "q" (pxo_new__) : "memory"); break; case 2: asm("\n\tmov "__percpu_arg(1)",%%ax" "\n1:\tcmpxchgw %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "r" (pxo_new__) : "memory"); break; case 4: asm("\n\tmov "__percpu_arg(1)",%%eax" "\n1:\tcmpxchgl %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "r" (pxo_new__) : "memory"); break; case 8: asm("\n\tmov "__percpu_arg(1)",%%rax" "\n1:\tcmpxchgq %2, "__percpu_arg(1) "\n\tjnz 1b" : "=&a" (pxo_ret__), "+m" (var) : "r" (pxo_new__) : "memory"); break; default: __bad_percpu_size(); } pxo_ret__; })
percpu_cmpxchg_op  macro  arch/x86/include/asm/percpu.h  318  #define percpu_cmpxchg_op(var,oval,nval) ({ typeof(var) pco_ret__; typeof(var) pco_old__ = (oval); typeof(var) pco_new__ = (nval); switch (sizeof(var)) { case 1: asm("cmpxchgb %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "q" (pco_new__), "0" (pco_old__) : "memory"); break; case 2: asm("cmpxchgw %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; case 4: asm("cmpxchgl %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; case 8: asm("cmpxchgq %2, "__percpu_arg(1) : "=a" (pco_ret__), "+m" (var) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; default: __bad_percpu_size(); } pco_ret__; })
this_cpu_read_stable  macro  arch/x86/include/asm/percpu.h  362  #define this_cpu_read_stable(var) percpu_from_op("mov",var,"p" (&(var)))
percpu_cmpxchg8b_double  macro  arch/x86/include/asm/percpu.h  424  #define percpu_cmpxchg8b_double(pcp1,pcp2,o1,o2,n1,n2) ({ bool __ret; typeof(pcp1) __o1 = (o1), __n1 = (n1); typeof(pcp2) __o2 = (o2), __n2 = (n2); asm volatile("cmpxchg8b "__percpu_arg(1)"\n\tsetz %0\n\t" : "=a" (__ret), "+m" (pcp1), "+m" (pcp2), "+d" (__o2) :  "b" (__n1), "c" (__n2), "a" (__o1)); __ret; })
percpu_cmpxchg16b_double  macro  arch/x86/include/asm/percpu.h  470  #define percpu_cmpxchg16b_double(pcp1,pcp2,o1,o2,n1,n2) ({ bool __ret; typeof(pcp1) __o1 = (o1), __n1 = (n1); typeof(pcp2) __o2 = (o2), __n2 = (n2); alternative_io("leaq %P1,%%rsi\n\tcall this_cpu_cmpxchg16b_emu\n\t", "cmpxchg16b " __percpu_arg(1) "\n\tsetz %0\n\t", X86_FEATURE_CX16, ASM_OUTPUT2("=a" (__ret), "+m" (pcp1), "+m" (pcp2), "+d" (__o2)), "b" (__n1), "c" (__n2), "a" (__o1) : "rsi"); __ret; })
x86_test_and_clear_bit_percpu  macro  arch/x86/include/asm/percpu.h  490  #define x86_test_and_clear_bit_percpu(bit,var) ({ int old__; asm volatile("btr %2,"__percpu_arg(1)"\n\tsbbl %0,%0" : "=r" (old__), "+m" (var) : "dIr" (bit)); old__; })
x86_this_cpu_constant_test_bit  function  arch/x86/include/asm/percpu.h  499  static __always_inline int x86_this_cpu_constant_test_bit(unsigned int nr,const unsigned long __percpu *addr)
x86_this_cpu_variable_test_bit  function  arch/x86/include/asm/percpu.h  511  static inline int x86_this_cpu_variable_test_bit(int nr,const unsigned long __percpu *addr)
x86_this_cpu_test_bit  macro  arch/x86/include/asm/percpu.h  524  #define x86_this_cpu_test_bit(nr,addr) (__builtin_constant_p((nr)) ? x86_this_cpu_constant_test_bit((nr), (addr)) : x86_this_cpu_variable_test_bit((nr), (addr)))
DEFINE_EARLY_PER_CPU  macro  arch/x86/include/asm/percpu.h  578  #define DEFINE_EARLY_PER_CPU(_type,_name,_initvalue) DEFINE_PER_CPU(_type, _name) = _initvalue
DEFINE_EARLY_PER_CPU_READ_MOSTLY  macro  arch/x86/include/asm/percpu.h  581  #define DEFINE_EARLY_PER_CPU_READ_MOSTLY(_type,_name,_initvalue) DEFINE_PER_CPU_READ_MOSTLY(_type, _name) = _initvalue
EXPORT_EARLY_PER_CPU_SYMBOL  macro  arch/x86/include/asm/percpu.h  584  #define EXPORT_EARLY_PER_CPU_SYMBOL(_name) EXPORT_PER_CPU_SYMBOL(_name)
DECLARE_EARLY_PER_CPU  macro  arch/x86/include/asm/percpu.h  587  #define DECLARE_EARLY_PER_CPU(_type,_name) DECLARE_PER_CPU(_type, _name)
DECLARE_EARLY_PER_CPU_READ_MOSTLY  macro  arch/x86/include/asm/percpu.h  590  #define DECLARE_EARLY_PER_CPU_READ_MOSTLY(_type,_name) DECLARE_PER_CPU_READ_MOSTLY(_type, _name)
early_per_cpu_ptr  macro  arch/x86/include/asm/percpu.h  594  #define early_per_cpu_ptr(_name) NULL
early_per_cpu_map  macro  arch/x86/include/asm/percpu.h  571  #define early_per_cpu_map(_name,_idx) (_name##_early_map[_idx])
early_per_cpu  macro  arch/x86/include/asm/percpu.h  593  #define early_per_cpu(_name,_cpu) per_cpu(_name,_cpu)
__ASM_GENERIC_MODULE_H  macro  include/asm-generic/module.h  2  #define __ASM_GENERIC_MODULE_H
mod_arch_specific  struct  include/asm-generic/module.h  9  struct mod_arch_specific { };
Elf_Shdr  macro  include/asm-generic/module.h  32  #define Elf_Shdr Elf32_Shdr
Elf_Phdr  macro  include/asm-generic/module.h  33  #define Elf_Phdr Elf32_Phdr
Elf_Sym  macro  include/asm-generic/module.h  34  #define Elf_Sym Elf32_Sym
Elf_Dyn  macro  include/asm-generic/module.h  35  #define Elf_Dyn Elf32_Dyn
Elf_Ehdr  macro  include/asm-generic/module.h  36  #define Elf_Ehdr Elf32_Ehdr
Elf_Addr  macro  include/asm-generic/module.h  37  #define Elf_Addr Elf32_Addr
Elf_Rel  macro  include/asm-generic/module.h  39  #define Elf_Rel Elf32_Rel
Elf_Rela  macro  include/asm-generic/module.h  42  #define Elf_Rela Elf32_Rela
ELF_R_TYPE  macro  include/asm-generic/module.h  44  #define ELF_R_TYPE(X) ELF32_R_TYPE(X)
ELF_R_SYM  macro  include/asm-generic/module.h  45  #define ELF_R_SYM(X) ELF32_R_SYM(X)
_LINUX_THREAD_INFO_H  macro  include/linux/thread_info.h  8  #define _LINUX_THREAD_INFO_H
restart_block  struct  include/linux/thread_info.h  19  struct restart_block { long (*fn)(struct restart_block *); union { u32 __user *uaddr; u32 val; u32 flags; u32 bitset; u64 time; u32 __user *uaddr2; } futex; clockid_t clockid; struct timespec __user *rmtp; struct compat_timespec __user *compat_rmtp; u64 expires; } nanosleep; struct pollfd __user *ufds; int nfds; int has_timeout; unsigned long tv_sec; unsigned long tv_nsec; } poll; };
do_no_restart_syscall  prototype  include/linux/thread_info.h  51  extern long do_no_restart_syscall(struct restart_block *parm);
THREADINFO_GFP  macro  include/linux/thread_info.h  61  # define THREADINFO_GFP (GFP_KERNEL | __GFP_NOTRACK)
THREADINFO_GFP_ACCOUNTED  macro  include/linux/thread_info.h  64  #define THREADINFO_GFP_ACCOUNTED (THREADINFO_GFP | __GFP_KMEMCG)
set_ti_thread_flag  function  include/linux/thread_info.h  71  static inline void set_ti_thread_flag(struct thread_info *ti,int flag)
clear_ti_thread_flag  function  include/linux/thread_info.h  76  static inline void clear_ti_thread_flag(struct thread_info *ti,int flag)
test_and_set_ti_thread_flag  function  include/linux/thread_info.h  81  static inline int test_and_set_ti_thread_flag(struct thread_info *ti,int flag)
test_and_clear_ti_thread_flag  function  include/linux/thread_info.h  86  static inline int test_and_clear_ti_thread_flag(struct thread_info *ti,int flag)
test_ti_thread_flag  function  include/linux/thread_info.h  91  static inline int test_ti_thread_flag(struct thread_info *ti,int flag)
set_thread_flag  macro  include/linux/thread_info.h  96  #define set_thread_flag(flag) set_ti_thread_flag(current_thread_info(), flag)
clear_thread_flag  macro  include/linux/thread_info.h  98  #define clear_thread_flag(flag) clear_ti_thread_flag(current_thread_info(), flag)
test_and_set_thread_flag  macro  include/linux/thread_info.h  100  #define test_and_set_thread_flag(flag) test_and_set_ti_thread_flag(current_thread_info(), flag)
test_and_clear_thread_flag  macro  include/linux/thread_info.h  102  #define test_and_clear_thread_flag(flag) test_and_clear_ti_thread_flag(current_thread_info(), flag)
test_thread_flag  macro  include/linux/thread_info.h  104  #define test_thread_flag(flag) test_ti_thread_flag(current_thread_info(), flag)
set_need_resched  macro  include/linux/thread_info.h  107  #define set_need_resched() set_thread_flag(TIF_NEED_RESCHED)
clear_need_resched  macro  include/linux/thread_info.h  108  #define clear_need_resched() clear_thread_flag(TIF_NEED_RESCHED)
HAVE_SET_RESTORE_SIGMASK  macro  include/linux/thread_info.h  115  #define HAVE_SET_RESTORE_SIGMASK 1
set_restore_sigmask  function  include/linux/thread_info.h  128  static inline void set_restore_sigmask(void)
clear_restore_sigmask  function  include/linux/thread_info.h  133  static inline void clear_restore_sigmask(void)
test_restore_sigmask  function  include/linux/thread_info.h  137  static inline bool test_restore_sigmask(void)
test_and_clear_restore_sigmask  function  include/linux/thread_info.h  141  static inline bool test_and_clear_restore_sigmask(void)
__LINUX_BITMAP_H  macro  include/linux/bitmap.h  2  #define __LINUX_BITMAP_H
__bitmap_empty  prototype  include/linux/bitmap.h  91  extern int __bitmap_empty(const unsigned long *bitmap,int bits);
__bitmap_full  prototype  include/linux/bitmap.h  92  extern int __bitmap_full(const unsigned long *bitmap,int bits);
__bitmap_equal  prototype  include/linux/bitmap.h  93  extern int __bitmap_equal(const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_complement  prototype  include/linux/bitmap.h  95  extern void __bitmap_complement(unsigned long *dst,const unsigned long *src,int bits);
__bitmap_shift_right  prototype  include/linux/bitmap.h  97  extern void __bitmap_shift_right(unsigned long *dst,const unsigned long *src, int shift, int bits);
__bitmap_shift_left  prototype  include/linux/bitmap.h  99  extern void __bitmap_shift_left(unsigned long *dst,const unsigned long *src, int shift, int bits);
__bitmap_and  prototype  include/linux/bitmap.h  101  extern int __bitmap_and(unsigned long *dst,const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_or  prototype  include/linux/bitmap.h  103  extern void __bitmap_or(unsigned long *dst,const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_xor  prototype  include/linux/bitmap.h  105  extern void __bitmap_xor(unsigned long *dst,const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_andnot  prototype  include/linux/bitmap.h  107  extern int __bitmap_andnot(unsigned long *dst,const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_intersects  prototype  include/linux/bitmap.h  109  extern int __bitmap_intersects(const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_subset  prototype  include/linux/bitmap.h  111  extern int __bitmap_subset(const unsigned long *bitmap1,const unsigned long *bitmap2, int bits);
__bitmap_weight  prototype  include/linux/bitmap.h  113  extern int __bitmap_weight(const unsigned long *bitmap,int bits);
bitmap_set  prototype  include/linux/bitmap.h  115  extern void bitmap_set(unsigned long *map,int i,int len);
bitmap_clear  prototype  include/linux/bitmap.h  116  extern void bitmap_clear(unsigned long *map,int start,int nr);
bitmap_find_next_zero_area  prototype  include/linux/bitmap.h  117  extern unsigned long bitmap_find_next_zero_area(unsigned long *map,unsigned long size,unsigned long start,unsigned int nr,unsigned long align_mask);
bitmap_scnprintf  prototype  include/linux/bitmap.h  123  extern int bitmap_scnprintf(char *buf,unsigned int len,const unsigned long *src, int nbits);
__bitmap_parse  prototype  include/linux/bitmap.h  125  extern int __bitmap_parse(const char *buf,unsigned int buflen,int is_user,unsigned long *dst, int nbits);
bitmap_parse_user  prototype  include/linux/bitmap.h  127  extern int bitmap_parse_user(const char __user *ubuf,unsigned int ulen,unsigned long *dst, int nbits);
bitmap_scnlistprintf  prototype  include/linux/bitmap.h  129  extern int bitmap_scnlistprintf(char *buf,unsigned int len,const unsigned long *src, int nbits);
bitmap_parselist  prototype  include/linux/bitmap.h  131  extern int bitmap_parselist(const char *buf,unsigned long *maskp,int nmaskbits);
bitmap_parselist_user  prototype  include/linux/bitmap.h  133  extern int bitmap_parselist_user(const char __user *ubuf,unsigned int ulen,unsigned long *dst, int nbits);
bitmap_remap  prototype  include/linux/bitmap.h  135  extern void bitmap_remap(unsigned long *dst,const unsigned long *src,const unsigned long *old, const unsigned long *new, int bits);
bitmap_bitremap  prototype  include/linux/bitmap.h  137  extern int bitmap_bitremap(int oldbit,const unsigned long *old, const unsigned long *new, int bits);
bitmap_onto  prototype  include/linux/bitmap.h  139  extern void bitmap_onto(unsigned long *dst,const unsigned long *orig,const unsigned long *relmap, int bits);
bitmap_fold  prototype  include/linux/bitmap.h  141  extern void bitmap_fold(unsigned long *dst,const unsigned long *orig,int sz, int bits);
bitmap_find_free_region  prototype  include/linux/bitmap.h  143  extern int bitmap_find_free_region(unsigned long *bitmap,int bits,int order);
bitmap_release_region  prototype  include/linux/bitmap.h  144  extern void bitmap_release_region(unsigned long *bitmap,int pos,int order);
bitmap_allocate_region  prototype  include/linux/bitmap.h  145  extern int bitmap_allocate_region(unsigned long *bitmap,int pos,int order);
bitmap_copy_le  prototype  include/linux/bitmap.h  146  extern void bitmap_copy_le(void *dst,const unsigned long *src,int nbits);
bitmap_ord_to_pos  prototype  include/linux/bitmap.h  147  extern int bitmap_ord_to_pos(const unsigned long *bitmap,int n,int bits);
BITMAP_FIRST_WORD_MASK  macro  include/linux/bitmap.h  149  #define BITMAP_FIRST_WORD_MASK(start) (~0UL << ((start) % BITS_PER_LONG))
BITMAP_LAST_WORD_MASK  macro  include/linux/bitmap.h  150  #define BITMAP_LAST_WORD_MASK(nbits) ( ((nbits) % BITS_PER_LONG) ? (1UL<<((nbits) % BITS_PER_LONG))-1 : ~0UL )
small_const_nbits  macro  include/linux/bitmap.h  156  #define small_const_nbits(nbits) (__builtin_constant_p(nbits) && (nbits) <= BITS_PER_LONG)
bitmap_zero  function  include/linux/bitmap.h  159  static inline void bitmap_zero(unsigned long *dst,int nbits)
bitmap_fill  function  include/linux/bitmap.h  169  static inline void bitmap_fill(unsigned long *dst,int nbits)
bitmap_copy  function  include/linux/bitmap.h  179  static inline void bitmap_copy(unsigned long *dst,const unsigned long *src,int nbits)
bitmap_and  function  include/linux/bitmap.h  190  static inline int bitmap_and(unsigned long *dst,const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_or  function  include/linux/bitmap.h  198  static inline void bitmap_or(unsigned long *dst,const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_xor  function  include/linux/bitmap.h  207  static inline void bitmap_xor(unsigned long *dst,const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_andnot  function  include/linux/bitmap.h  216  static inline int bitmap_andnot(unsigned long *dst,const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_complement  function  include/linux/bitmap.h  224  static inline void bitmap_complement(unsigned long *dst,const unsigned long *src,int nbits)
bitmap_equal  function  include/linux/bitmap.h  233  static inline int bitmap_equal(const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_intersects  function  include/linux/bitmap.h  242  static inline int bitmap_intersects(const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_subset  function  include/linux/bitmap.h  251  static inline int bitmap_subset(const unsigned long *src1,const unsigned long *src2, int nbits)
bitmap_empty  function  include/linux/bitmap.h  260  static inline int bitmap_empty(const unsigned long *src,int nbits)
bitmap_full  function  include/linux/bitmap.h  268  static inline int bitmap_full(const unsigned long *src,int nbits)
bitmap_weight  function  include/linux/bitmap.h  276  static inline int bitmap_weight(const unsigned long *src,int nbits)
bitmap_shift_right  function  include/linux/bitmap.h  283  static inline void bitmap_shift_right(unsigned long *dst,const unsigned long *src, int n, int nbits)
bitmap_shift_left  function  include/linux/bitmap.h  292  static inline void bitmap_shift_left(unsigned long *dst,const unsigned long *src, int n, int nbits)
bitmap_parse  function  include/linux/bitmap.h  301  static inline int bitmap_parse(const char *buf,unsigned int buflen,unsigned long *maskp, int nmaskbits)
_LINUX_BUG_H  macro  include/linux/bug.h  2  #define _LINUX_BUG_H
bug_trap_type  enum  include/linux/bug.h  6  enum bug_trap_type { BUG_TRAP_TYPE_NONE = 0, BUG_TRAP_TYPE_WARN = 1, BUG_TRAP_TYPE_BUG = 2, };
BUILD_BUG_ON_NOT_POWER_OF_2  macro  include/linux/bug.h  24  #define BUILD_BUG_ON_NOT_POWER_OF_2(n) BUILD_BUG_ON((n) == 0 || (((n) & ((n) - 1)) != 0))
BUILD_BUG_ON_ZERO  macro  include/linux/bug.h  31  #define BUILD_BUG_ON_ZERO(e) (sizeof(struct { int:-!!(e); }))
BUILD_BUG_ON_NULL  macro  include/linux/bug.h  32  #define BUILD_BUG_ON_NULL(e) ((void *)sizeof(struct { int:-!!(e); }))
BUILD_BUG_ON_INVALID  macro  include/linux/bug.h  39  #define BUILD_BUG_ON_INVALID(e) ((void)(sizeof((__force long)(e))))
BUILD_BUG_ON  macro  include/linux/bug.h  60  #define BUILD_BUG_ON(condition) do { ((void)sizeof(char[1 - 2*!!(condition)])); if (condition) __build_bug_on_failed = 1; } while(0)
BUILD_BUG  macro  include/linux/bug.h  74  #define BUILD_BUG() do { extern void __build_bug_failed(void) __linktime_error("BUILD_BUG failed"); __build_bug_failed(); } while (0)
is_warning_bug  function  include/linux/bug.h  86  static inline int is_warning_bug(const struct bug_entry *bug)
find_bug  prototype  include/linux/bug.h  91  const struct bug_entry *find_bug(unsigned long bugaddr);
report_bug  function  include/linux/bug.h  100  static inline enum bug_trap_type report_bug(unsigned long bug_addr,struct pt_regs *regs)
is_valid_bugaddr  prototype  include/linux/bug.h  96  int is_valid_bugaddr(unsigned long addr);
_ASM_X86_IRQ_H  macro  arch/x86/include/asm/irq.h  2  #define _ASM_X86_IRQ_H
irq_canonicalize  function  arch/x86/include/asm/irq.h  13  static inline int irq_canonicalize(int irq)
irq_ctx_init  macro  arch/x86/include/asm/irq.h  21  # define irq_ctx_init(cpu) do { } while (0)
__ARCH_HAS_DO_SOFTIRQ  macro  arch/x86/include/asm/irq.h  24  #define __ARCH_HAS_DO_SOFTIRQ
fixup_irqs  prototype  arch/x86/include/asm/irq.h  28  extern void fixup_irqs(void);
irq_force_complete_move  prototype  arch/x86/include/asm/irq.h  29  extern void irq_force_complete_move(int);
native_init_IRQ  prototype  arch/x86/include/asm/irq.h  33  extern void native_init_IRQ(void);
handle_irq  prototype  arch/x86/include/asm/irq.h  34  extern bool handle_irq(unsigned irq,struct pt_regs *regs);
do_IRQ  prototype  arch/x86/include/asm/irq.h  36  extern unsigned int do_IRQ(struct pt_regs *regs);
vector_used_by_percpu_irq  prototype  arch/x86/include/asm/irq.h  40  extern int vector_used_by_percpu_irq(unsigned int vector);
init_ISA_irqs  prototype  arch/x86/include/asm/irq.h  42  extern void init_ISA_irqs(void);
_LINUX_FTRACE_IRQ_H  macro  include/linux/ftrace_irq.h  2  #define _LINUX_FTRACE_IRQ_H
ftrace_nmi_enter  function  include/linux/ftrace_irq.h  9  static inline void ftrace_nmi_enter(void) { }
ftrace_nmi_exit  function  include/linux/ftrace_irq.h  10  static inline void ftrace_nmi_exit(void) { }
_LINUX_KERNEL_VTIME_H  macro  include/linux/vtime.h  2  #define _LINUX_KERNEL_VTIME_H
vtime_task_switch  function  include/linux/vtime.h  14  static inline void vtime_task_switch(struct task_struct *prev) { }
vtime_account_system  function  include/linux/vtime.h  15  static inline void vtime_account_system(struct task_struct *tsk) { }
vtime_account_system_irqsafe  function  include/linux/vtime.h  16  static inline void vtime_account_system_irqsafe(struct task_struct *tsk) { }
vtime_account_idle  prototype  include/linux/vtime.h  10  extern void vtime_account_idle(struct task_struct *tsk);
vtime_account_user  prototype  include/linux/vtime.h  11  extern void vtime_account_user(struct task_struct *tsk);
vtime_account  function  include/linux/vtime.h  17  static inline void vtime_account(struct task_struct *tsk) { }
irqtime_account_irq  function  include/linux/vtime.h  23  static inline void irqtime_account_irq(struct task_struct *tsk) { }
vtime_account_irq_enter  function  include/linux/vtime.h  26  static inline void vtime_account_irq_enter(struct task_struct *tsk)
vtime_account_irq_exit  function  include/linux/vtime.h  41  static inline void vtime_account_irq_exit(struct task_struct *tsk)
_ASM_X86_HARDIRQ_H  macro  arch/x86/include/asm/hardirq.h  2  #define _ASM_X86_HARDIRQ_H
MAX_HARDIRQS_PER_CPU  macro  arch/x86/include/asm/hardirq.h  38  #define MAX_HARDIRQS_PER_CPU NR_VECTORS
__ARCH_IRQ_STAT  macro  arch/x86/include/asm/hardirq.h  40  #define __ARCH_IRQ_STAT
inc_irq_stat  macro  arch/x86/include/asm/hardirq.h  42  #define inc_irq_stat(member) this_cpu_inc(irq_stat.member)
local_softirq_pending  macro  arch/x86/include/asm/hardirq.h  44  #define local_softirq_pending() this_cpu_read(irq_stat.__softirq_pending)
__ARCH_SET_SOFTIRQ_PENDING  macro  arch/x86/include/asm/hardirq.h  46  #define __ARCH_SET_SOFTIRQ_PENDING
ack_bad_irq  prototype  arch/x86/include/asm/hardirq.h  52  extern void ack_bad_irq(unsigned int irq);
arch_irq_stat_cpu  macro  arch/x86/include/asm/hardirq.h  55  #define arch_irq_stat_cpu arch_irq_stat_cpu
arch_irq_stat  macro  arch/x86/include/asm/hardirq.h  58  #define arch_irq_stat arch_irq_stat
_X86_IRQFLAGS_H_  macro  arch/x86/include/asm/irqflags.h  2  #define _X86_IRQFLAGS_H_
native_save_fl  function  arch/x86/include/asm/irqflags.h  11  static inline unsigned long native_save_fl(void)
native_restore_fl  function  arch/x86/include/asm/irqflags.h  29  static inline void native_restore_fl(unsigned long flags)
native_irq_disable  function  arch/x86/include/asm/irqflags.h  37  static inline void native_irq_disable(void)
native_irq_enable  function  arch/x86/include/asm/irqflags.h  42  static inline void native_irq_enable(void)
native_safe_halt  function  arch/x86/include/asm/irqflags.h  47  static inline void native_safe_halt(void)
native_halt  function  arch/x86/include/asm/irqflags.h  52  static inline void native_halt(void)
arch_local_save_flags  function  arch/x86/include/asm/irqflags.h  65  static inline notrace unsigned long arch_local_save_flags(void)
arch_local_irq_restore  function  arch/x86/include/asm/irqflags.h  70  static inline notrace void arch_local_irq_restore(unsigned long flags)
arch_local_irq_disable  function  arch/x86/include/asm/irqflags.h  75  static inline notrace void arch_local_irq_disable(void)
arch_local_irq_enable  function  arch/x86/include/asm/irqflags.h  80  static inline notrace void arch_local_irq_enable(void)
arch_safe_halt  function  arch/x86/include/asm/irqflags.h  89  static inline void arch_safe_halt(void)
halt  function  arch/x86/include/asm/irqflags.h  98  static inline void halt(void)
arch_local_irq_save  function  arch/x86/include/asm/irqflags.h  106  static inline notrace unsigned long arch_local_irq_save(void)
ENABLE_INTERRUPTS  macro  arch/x86/include/asm/irqflags.h  114  #define ENABLE_INTERRUPTS(x) sti
DISABLE_INTERRUPTS  macro  arch/x86/include/asm/irqflags.h  115  #define DISABLE_INTERRUPTS(x) cli
SWAPGS  macro  arch/x86/include/asm/irqflags.h  118  #define SWAPGS swapgs
SWAPGS_UNSAFE_STACK  macro  arch/x86/include/asm/irqflags.h  128  #define SWAPGS_UNSAFE_STACK swapgs
PARAVIRT_ADJUST_EXCEPTION_FRAME  macro  arch/x86/include/asm/irqflags.h  130  #define PARAVIRT_ADJUST_EXCEPTION_FRAME
INTERRUPT_RETURN  macro  arch/x86/include/asm/irqflags.h  145  #define INTERRUPT_RETURN iret
USERGS_SYSRET64  macro  arch/x86/include/asm/irqflags.h  133  #define USERGS_SYSRET64 swapgs; sysretq;
USERGS_SYSRET32  macro  arch/x86/include/asm/irqflags.h  136  #define USERGS_SYSRET32 swapgs; sysretl
ENABLE_INTERRUPTS_SYSEXIT32  macro  arch/x86/include/asm/irqflags.h  139  #define ENABLE_INTERRUPTS_SYSEXIT32 swapgs; sti; sysexit
ENABLE_INTERRUPTS_SYSEXIT  macro  arch/x86/include/asm/irqflags.h  146  #define ENABLE_INTERRUPTS_SYSEXIT sti; sysexit
GET_CR0_INTO_EAX  macro  arch/x86/include/asm/irqflags.h  147  #define GET_CR0_INTO_EAX movl %cr0,%eax
arch_irqs_disabled_flags  function  arch/x86/include/asm/irqflags.h  155  static inline int arch_irqs_disabled_flags(unsigned long flags)
arch_irqs_disabled  function  arch/x86/include/asm/irqflags.h  160  static inline int arch_irqs_disabled(void)
ARCH_LOCKDEP_SYS_EXIT  macro  arch/x86/include/asm/irqflags.h  181  #define ARCH_LOCKDEP_SYS_EXIT pushl %eax; pushl %ecx; pushl %edx; call lockdep_sys_exit; popl %edx; popl %ecx; popl %eax;
ARCH_LOCKDEP_SYS_EXIT_IRQ  macro  arch/x86/include/asm/irqflags.h  190  #define ARCH_LOCKDEP_SYS_EXIT_IRQ
TRACE_IRQS_ON  macro  arch/x86/include/asm/irqflags.h  197  # define TRACE_IRQS_ON
TRACE_IRQS_OFF  macro  arch/x86/include/asm/irqflags.h  198  # define TRACE_IRQS_OFF
LOCKDEP_SYS_EXIT  macro  arch/x86/include/asm/irqflags.h  204  # define LOCKDEP_SYS_EXIT
LOCKDEP_SYS_EXIT_IRQ  macro  arch/x86/include/asm/irqflags.h  205  # define LOCKDEP_SYS_EXIT_IRQ
_ASM_X86_SMP_H  macro  arch/x86/include/asm/smp.h  2  #define _ASM_X86_SMP_H
cpu_has_ht_siblings  function  arch/x86/include/asm/smp.h  25  static inline bool cpu_has_ht_siblings(void)
cpu_sibling_mask  function  arch/x86/include/asm/smp.h  41  static inline struct cpumask *cpu_sibling_mask(int cpu)
cpu_core_mask  function  arch/x86/include/asm/smp.h  46  static inline struct cpumask *cpu_core_mask(int cpu)
cpu_llc_shared_mask  function  arch/x86/include/asm/smp.h  51  static inline struct cpumask *cpu_llc_shared_mask(int cpu)
smp_ops  struct  arch/x86/include/asm/smp.h  67  struct smp_ops { void (*smp_prepare_boot_cpu)(void); void (*smp_prepare_cpus)(unsigned max_cpus); void (*smp_cpus_done)(unsigned max_cpus); void (*stop_other_cpus)(int wait); void (*smp_send_reschedule)(int cpu); int (*cpu_up)(unsigned cpu, struct task_struct *tidle); int (*cpu_disable)(void); void (*cpu_die)(unsigned int cpu); void (*play_dead)(void); void (*send_call_func_ipi)(const struct cpumask *mask); void (*send_call_func_single_ipi)(int cpu); };
set_cpu_sibling_map  prototype  arch/x86/include/asm/smp.h  85  extern void set_cpu_sibling_map(int cpu);
startup_ipi_hook  macro  arch/x86/include/asm/smp.h  89  #define startup_ipi_hook(phys_apicid,start_eip,start_esp) do { } while (0)
stop_other_cpus  function  arch/x86/include/asm/smp.h  98  static inline void stop_other_cpus(void)
__cpu_disable  function  arch/x86/include/asm/smp.h  123  static inline int __cpu_disable(void)
__cpu_die  function  arch/x86/include/asm/smp.h  128  static inline void __cpu_die(unsigned int cpu)
play_dead  function  arch/x86/include/asm/smp.h  133  static inline void play_dead(void)
arch_send_call_function_single_ipi  function  arch/x86/include/asm/smp.h  143  static inline void arch_send_call_function_single_ipi(int cpu)
arch_send_call_function_ipi_mask  function  arch/x86/include/asm/smp.h  148  static inline void arch_send_call_function_ipi_mask(const struct cpumask *mask)
cpu_disable_common  prototype  arch/x86/include/asm/smp.h  153  void cpu_disable_common(void);
native_smp_prepare_boot_cpu  prototype  arch/x86/include/asm/smp.h  154  void native_smp_prepare_boot_cpu(void);
native_smp_prepare_cpus  prototype  arch/x86/include/asm/smp.h  155  void native_smp_prepare_cpus(unsigned int max_cpus);
native_smp_cpus_done  prototype  arch/x86/include/asm/smp.h  156  void native_smp_cpus_done(unsigned int max_cpus);
native_cpu_up  prototype  arch/x86/include/asm/smp.h  157  int native_cpu_up(unsigned int cpunum,struct task_struct *tidle);
native_cpu_disable  prototype  arch/x86/include/asm/smp.h  158  int native_cpu_disable(void);
native_cpu_die  prototype  arch/x86/include/asm/smp.h  159  void native_cpu_die(unsigned int cpu);
native_play_dead  prototype  arch/x86/include/asm/smp.h  160  void native_play_dead(void);
play_dead_common  prototype  arch/x86/include/asm/smp.h  161  void play_dead_common(void);
wbinvd_on_cpu  macro  arch/x86/include/asm/smp.h  174  #define wbinvd_on_cpu(cpu) wbinvd()
wbinvd_on_all_cpus  function  arch/x86/include/asm/smp.h  175  static inline int wbinvd_on_all_cpus(void)
native_send_call_func_ipi  prototype  arch/x86/include/asm/smp.h  165  void native_send_call_func_ipi(const struct cpumask *mask);
native_send_call_func_single_ipi  prototype  arch/x86/include/asm/smp.h  166  void native_send_call_func_single_ipi(int cpu);
x86_idle_thread_init  prototype  arch/x86/include/asm/smp.h  167  void x86_idle_thread_init(unsigned int cpu,struct task_struct *idle);
smp_store_boot_cpu_info  prototype  arch/x86/include/asm/smp.h  169  void smp_store_boot_cpu_info(void);
smp_store_cpu_info  prototype  arch/x86/include/asm/smp.h  170  void smp_store_cpu_info(int id);
cpu_physical_id  macro  arch/x86/include/asm/smp.h  171  #define cpu_physical_id(cpu) per_cpu(x86_cpu_to_apicid,cpu)
safe_smp_processor_id  macro  arch/x86/include/asm/smp.h  202  #define safe_smp_processor_id() smp_processor_id()
stack_smp_processor_id  macro  arch/x86/include/asm/smp.h  196  #define stack_smp_processor_id() ({ struct thread_info *ti; __asm__("andq %%rsp,%0; ":"=r" (ti) : "0" (CURRENT_MASK)); ti->cpu; })
logical_smp_processor_id  function  arch/x86/include/asm/smp.h  209  static inline int logical_smp_processor_id(void)
hard_smp_processor_id  macro  arch/x86/include/asm/smp.h  222  # define hard_smp_processor_id() 0
nmi_selftest  macro  arch/x86/include/asm/smp.h  230  #define nmi_selftest() do { } while (0)
_LINUX_RBTREE_H  macro  include/linux/rbtree.h  30  #define _LINUX_RBTREE_H
rb_node  struct  include/linux/rbtree.h  35  struct rb_node { unsigned long __rb_parent_color; struct rb_node *rb_right; struct rb_node *rb_left; } __attribute__((aligned(sizeof(long))));
rb_root  struct  include/linux/rbtree.h  42  struct rb_root { struct rb_node *rb_node; };
rb_parent  macro  include/linux/rbtree.h  47  #define rb_parent(r) ((struct rb_node *)((r)->__rb_parent_color & ~3))
RB_ROOT  macro  include/linux/rbtree.h  49  #define RB_ROOT (struct rb_root) { NULL,}
rb_entry  macro  include/linux/rbtree.h  50  #define rb_entry(ptr,type,member) container_of(ptr,type,member)
RB_EMPTY_ROOT  macro  include/linux/rbtree.h  52  #define RB_EMPTY_ROOT(root) ((root)->rb_node == NULL)
RB_EMPTY_NODE  macro  include/linux/rbtree.h  55  #define RB_EMPTY_NODE(node) ((node)->__rb_parent_color == (unsigned long)(node))
RB_CLEAR_NODE  macro  include/linux/rbtree.h  57  #define RB_CLEAR_NODE(node) ((node)->__rb_parent_color = (unsigned long)(node))
rb_insert_color  prototype  include/linux/rbtree.h  61  extern void rb_insert_color(struct rb_node *,struct rb_root *);
rb_erase  prototype  include/linux/rbtree.h  62  extern void rb_erase(struct rb_node *,struct rb_root *);
rb_next  prototype  include/linux/rbtree.h  66  extern struct rb_node *rb_next(const struct rb_node *);
rb_prev  prototype  include/linux/rbtree.h  67  extern struct rb_node *rb_prev(const struct rb_node *);
rb_first  prototype  include/linux/rbtree.h  68  extern struct rb_node *rb_first(const struct rb_root *);
rb_last  prototype  include/linux/rbtree.h  69  extern struct rb_node *rb_last(const struct rb_root *);
rb_replace_node  prototype  include/linux/rbtree.h  72  extern void rb_replace_node(struct rb_node *victim,struct rb_node *new,struct rb_root *root);
rb_link_node  function  include/linux/rbtree.h  75  static inline void rb_link_node(struct rb_node * node,struct rb_node * parent,struct rb_node ** rb_link)
_LINUX_KTIME_H  macro  include/linux/ktime.h  22  #define _LINUX_KTIME_H
ktime  union  include/linux/ktime.h  46  union ktime { s64 tv64; s32 sec, nsec; } tv; };
ktime_set  function  include/linux/ktime.h  144  static inline ktime_t ktime_set(const long secs,const unsigned long nsecs)
ktime_sub  function  include/linux/ktime.h  156  static inline ktime_t ktime_sub(const ktime_t lhs,const ktime_t rhs)
ktime_add  function  include/linux/ktime.h  174  static inline ktime_t ktime_add(const ktime_t add1,const ktime_t add2)
ktime_add_ns  prototype  include/linux/ktime.h  200  extern ktime_t ktime_add_ns(const ktime_t kt,u64 nsec);
ktime_sub_ns  prototype  include/linux/ktime.h  209  extern ktime_t ktime_sub_ns(const ktime_t kt,u64 nsec);
timespec_to_ktime  function  include/linux/ktime.h  217  static inline ktime_t timespec_to_ktime(const struct timespec ts)
timeval_to_ktime  function  include/linux/ktime.h  229  static inline ktime_t timeval_to_ktime(const struct timeval tv)
ktime_to_timespec  function  include/linux/ktime.h  241  static inline struct timespec ktime_to_timespec(const ktime_t kt)
ktime_to_timeval  function  include/linux/ktime.h  253  static inline struct timeval ktime_to_timeval(const ktime_t kt)
ktime_to_ns  function  include/linux/ktime.h  266  static inline s64 ktime_to_ns(const ktime_t kt)
ktime_equal  function  include/linux/ktime.h  280  static inline int ktime_equal(const ktime_t cmp1,const ktime_t cmp2)
ktime_compare  function  include/linux/ktime.h  295  static inline int ktime_compare(const ktime_t cmp1,const ktime_t cmp2)
ktime_to_us  function  include/linux/ktime.h  304  static inline s64 ktime_to_us(const ktime_t kt)
ktime_to_ms  function  include/linux/ktime.h  310  static inline s64 ktime_to_ms(const ktime_t kt)
ktime_us_delta  function  include/linux/ktime.h  316  static inline s64 ktime_us_delta(const ktime_t later,const ktime_t earlier)
ktime_add_us  function  include/linux/ktime.h  321  static inline ktime_t ktime_add_us(const ktime_t kt,const u64 usec)
ktime_sub_us  function  include/linux/ktime.h  326  static inline ktime_t ktime_sub_us(const ktime_t kt,const u64 usec)
ktime_add_safe  prototype  include/linux/ktime.h  331  extern ktime_t ktime_add_safe(const ktime_t lhs,const ktime_t rhs);
LOW_RES_NSEC  macro  include/linux/ktime.h  339  #define LOW_RES_NSEC TICK_NSEC
KTIME_LOW_RES  macro  include/linux/ktime.h  340  #define KTIME_LOW_RES (ktime_t){ .tv64 = LOW_RES_NSEC }
ktime_get_ts  prototype  include/linux/ktime.h  343  extern void ktime_get_ts(struct timespec *ts);
ktime_get_real_ts  macro  include/linux/ktime.h  346  #define ktime_get_real_ts(ts) getnstimeofday(ts)
ns_to_ktime  function  include/linux/ktime.h  348  static inline ktime_t ns_to_ktime(u64 ns)
_LINUX_TIMERQUEUE_H  macro  include/linux/timerqueue.h  2  #define _LINUX_TIMERQUEUE_H
timerqueue_node  struct  include/linux/timerqueue.h  8  struct timerqueue_node { struct rb_node node; ktime_t expires; };
timerqueue_head  struct  include/linux/timerqueue.h  13  struct timerqueue_head { struct rb_root head; struct timerqueue_node *next; };
timerqueue_add  prototype  include/linux/timerqueue.h  19  extern void timerqueue_add(struct timerqueue_head *head,struct timerqueue_node *node);
timerqueue_del  prototype  include/linux/timerqueue.h  21  extern void timerqueue_del(struct timerqueue_head *head,struct timerqueue_node *node);
timerqueue_iterate_next  prototype  include/linux/timerqueue.h  23  extern struct timerqueue_node *timerqueue_iterate_next(
timerqueue_getnext  function  include/linux/timerqueue.h  35  struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
timerqueue_init  function  include/linux/timerqueue.h  40  static inline void timerqueue_init(struct timerqueue_node *node)
timerqueue_init_head  function  include/linux/timerqueue.h  45  static inline void timerqueue_init_head(struct timerqueue_head *head)
_ASM_X86_ATOMIC_H  macro  arch/x86/include/asm/atomic.h  2  #define _ASM_X86_ATOMIC_H
ATOMIC_INIT  macro  arch/x86/include/asm/atomic.h  15  #define ATOMIC_INIT(i) { (i) }
atomic_read  function  arch/x86/include/asm/atomic.h  23  static inline int atomic_read(const atomic_t *v)
atomic_set  function  arch/x86/include/asm/atomic.h  35  static inline void atomic_set(atomic_t *v,int i)
atomic_add  function  arch/x86/include/asm/atomic.h  47  static inline void atomic_add(int i,atomic_t *v)
atomic_sub  function  arch/x86/include/asm/atomic.h  61  static inline void atomic_sub(int i,atomic_t *v)
atomic_sub_and_test  function  arch/x86/include/asm/atomic.h  77  static inline int atomic_sub_and_test(int i,atomic_t *v)
atomic_inc  function  arch/x86/include/asm/atomic.h  93  static inline void atomic_inc(atomic_t *v)
atomic_dec  function  arch/x86/include/asm/atomic.h  105  static inline void atomic_dec(atomic_t *v)
atomic_dec_and_test  function  arch/x86/include/asm/atomic.h  119  static inline int atomic_dec_and_test(atomic_t *v)
atomic_inc_and_test  function  arch/x86/include/asm/atomic.h  137  static inline int atomic_inc_and_test(atomic_t *v)
atomic_add_negative  function  arch/x86/include/asm/atomic.h  156  static inline int atomic_add_negative(int i,atomic_t *v)
atomic_add_return  function  arch/x86/include/asm/atomic.h  173  static inline int atomic_add_return(int i,atomic_t *v)
atomic_sub_return  function  arch/x86/include/asm/atomic.h  185  static inline int atomic_sub_return(int i,atomic_t *v)
atomic_inc_return  macro  arch/x86/include/asm/atomic.h  190  #define atomic_inc_return(v) (atomic_add_return(1,v))
atomic_dec_return  macro  arch/x86/include/asm/atomic.h  191  #define atomic_dec_return(v) (atomic_sub_return(1,v))
atomic_cmpxchg  function  arch/x86/include/asm/atomic.h  193  static inline int atomic_cmpxchg(atomic_t *v,int old,int new)
atomic_xchg  function  arch/x86/include/asm/atomic.h  198  static inline int atomic_xchg(atomic_t *v,int new)
__atomic_add_unless  function  arch/x86/include/asm/atomic.h  212  static inline int __atomic_add_unless(atomic_t *v,int a,int u)
atomic_inc_short  function  arch/x86/include/asm/atomic.h  234  static inline short int atomic_inc_short(short int *v)
atomic_or_long  function  arch/x86/include/asm/atomic.h  249  static inline void atomic_or_long(unsigned long *v1,unsigned long v2)
atomic_clear_mask  macro  arch/x86/include/asm/atomic.h  256  #define atomic_clear_mask(mask,addr) asm volatile(LOCK_PREFIX "andl %0,%1" : : "r" (~(mask)), "m" (*(addr)) : "memory")
atomic_set_mask  macro  arch/x86/include/asm/atomic.h  260  #define atomic_set_mask(mask,addr) asm volatile(LOCK_PREFIX "orl %0,%1" : : "r" ((unsigned)(mask)), "m" (*(addr)) : "memory")
smp_mb__before_atomic_dec  macro  arch/x86/include/asm/atomic.h  266  #define smp_mb__before_atomic_dec() barrier()
smp_mb__after_atomic_dec  macro  arch/x86/include/asm/atomic.h  267  #define smp_mb__after_atomic_dec() barrier()
smp_mb__before_atomic_inc  macro  arch/x86/include/asm/atomic.h  268  #define smp_mb__before_atomic_inc() barrier()
smp_mb__after_atomic_inc  macro  arch/x86/include/asm/atomic.h  269  #define smp_mb__after_atomic_inc() barrier()
_ASM_GENERIC_ATOMIC_LONG_H  macro  include/asm-generic/atomic-long.h  2  #define _ASM_GENERIC_ATOMIC_LONG_H
ATOMIC_LONG_INIT  macro  include/asm-generic/atomic-long.h  143  #define ATOMIC_LONG_INIT(i) ATOMIC_INIT(i)
atomic_long_read  function  include/asm-generic/atomic-long.h  144  static inline long atomic_long_read(atomic_long_t *l)
atomic_long_set  function  include/asm-generic/atomic-long.h  151  static inline void atomic_long_set(atomic_long_t *l,long i)
atomic_long_inc  function  include/asm-generic/atomic-long.h  158  static inline void atomic_long_inc(atomic_long_t *l)
atomic_long_dec  function  include/asm-generic/atomic-long.h  165  static inline void atomic_long_dec(atomic_long_t *l)
atomic_long_add  function  include/asm-generic/atomic-long.h  172  static inline void atomic_long_add(long i,atomic_long_t *l)
atomic_long_sub  function  include/asm-generic/atomic-long.h  179  static inline void atomic_long_sub(long i,atomic_long_t *l)
atomic_long_sub_and_test  function  include/asm-generic/atomic-long.h  186  static inline int atomic_long_sub_and_test(long i,atomic_long_t *l)
atomic_long_dec_and_test  function  include/asm-generic/atomic-long.h  193  static inline int atomic_long_dec_and_test(atomic_long_t *l)
atomic_long_inc_and_test  function  include/asm-generic/atomic-long.h  200  static inline int atomic_long_inc_and_test(atomic_long_t *l)
atomic_long_add_negative  function  include/asm-generic/atomic-long.h  207  static inline int atomic_long_add_negative(long i,atomic_long_t *l)
atomic_long_add_return  function  include/asm-generic/atomic-long.h  214  static inline long atomic_long_add_return(long i,atomic_long_t *l)
atomic_long_sub_return  function  include/asm-generic/atomic-long.h  221  static inline long atomic_long_sub_return(long i,atomic_long_t *l)
atomic_long_inc_return  function  include/asm-generic/atomic-long.h  228  static inline long atomic_long_inc_return(atomic_long_t *l)
atomic_long_dec_return  function  include/asm-generic/atomic-long.h  235  static inline long atomic_long_dec_return(atomic_long_t *l)
atomic_long_add_unless  function  include/asm-generic/atomic-long.h  242  static inline long atomic_long_add_unless(atomic_long_t *l,long a,long u)
atomic_long_inc_not_zero  macro  include/asm-generic/atomic-long.h  249  #define atomic_long_inc_not_zero(l) atomic_inc_not_zero((atomic_t *)(l))
atomic_long_cmpxchg  macro  include/asm-generic/atomic-long.h  251  #define atomic_long_cmpxchg(l,old,new) (atomic_cmpxchg((atomic_t *)(l), (old), (new)))
atomic_long_xchg  macro  include/asm-generic/atomic-long.h  253  #define atomic_long_xchg(v,new) (atomic_xchg((atomic_t *)(v), (new)))
_ASM_GENERIC_ATOMIC64_H  macro  include/asm-generic/atomic64.h  13  #define _ASM_GENERIC_ATOMIC64_H
ATOMIC64_INIT  macro  include/asm-generic/atomic64.h  19  #define ATOMIC64_INIT(i) { (i) }
atomic64_read  prototype  include/asm-generic/atomic64.h  21  extern long long atomic64_read(const atomic64_t *v);
atomic64_set  prototype  include/asm-generic/atomic64.h  22  extern void atomic64_set(atomic64_t *v,long long i);
atomic64_add  prototype  include/asm-generic/atomic64.h  23  extern void atomic64_add(long long a,atomic64_t *v);
atomic64_add_return  prototype  include/asm-generic/atomic64.h  24  extern long long atomic64_add_return(long long a,atomic64_t *v);
atomic64_sub  prototype  include/asm-generic/atomic64.h  25  extern void atomic64_sub(long long a,atomic64_t *v);
atomic64_sub_return  prototype  include/asm-generic/atomic64.h  26  extern long long atomic64_sub_return(long long a,atomic64_t *v);
atomic64_dec_if_positive  prototype  include/asm-generic/atomic64.h  27  extern long long atomic64_dec_if_positive(atomic64_t *v);
atomic64_cmpxchg  prototype  include/asm-generic/atomic64.h  28  extern long long atomic64_cmpxchg(atomic64_t *v,long long o,long long n);
atomic64_xchg  prototype  include/asm-generic/atomic64.h  29  extern long long atomic64_xchg(atomic64_t *v,long long new);
atomic64_add_unless  prototype  include/asm-generic/atomic64.h  30  extern int atomic64_add_unless(atomic64_t *v,long long a,long long u);
atomic64_add_negative  macro  include/asm-generic/atomic64.h  32  #define atomic64_add_negative(a,v) (atomic64_add_return((a),(v)) < 0)
atomic64_inc  macro  include/asm-generic/atomic64.h  33  #define atomic64_inc(v) atomic64_add(1LL,(v))
atomic64_inc_return  macro  include/asm-generic/atomic64.h  34  #define atomic64_inc_return(v) atomic64_add_return(1LL,(v))
atomic64_inc_and_test  macro  include/asm-generic/atomic64.h  35  #define atomic64_inc_and_test(v) (atomic64_inc_return(v) == 0)
atomic64_sub_and_test  macro  include/asm-generic/atomic64.h  36  #define atomic64_sub_and_test(a,v) (atomic64_sub_return((a),(v)) == 0)
atomic64_dec  macro  include/asm-generic/atomic64.h  37  #define atomic64_dec(v) atomic64_sub(1LL,(v))
atomic64_dec_return  macro  include/asm-generic/atomic64.h  38  #define atomic64_dec_return(v) atomic64_sub_return(1LL,(v))
atomic64_dec_and_test  macro  include/asm-generic/atomic64.h  39  #define atomic64_dec_and_test(v) (atomic64_dec_return((v)) == 0)
atomic64_inc_not_zero  macro  include/asm-generic/atomic64.h  40  #define atomic64_inc_not_zero(v) atomic64_add_unless((v),1LL,0LL)
_ASM_X86_SEGMENT_H  macro  arch/x86/include/asm/segment.h  2  #define _ASM_X86_SEGMENT_H
GDT_ENTRY  macro  arch/x86/include/asm/segment.h  8  #define GDT_ENTRY(flags,base,limit) ((((base)  & _AC(0xff000000,ULL)) << (56-24)) | (((flags) & _AC(0x0000f0ff,ULL)) << 40) | (((limit) & _AC(0x000f0000,ULL)) << (48-16)) | (((base)  & _AC(0x00ffffff,ULL)) << 16) | (((limit) & _AC(0x0000ffff,ULL))))
GDT_ENTRY_BOOT_CS  macro  arch/x86/include/asm/segment.h  17  #define GDT_ENTRY_BOOT_CS 2
__BOOT_CS  macro  arch/x86/include/asm/segment.h  18  #define __BOOT_CS (GDT_ENTRY_BOOT_CS * 8)
GDT_ENTRY_BOOT_DS  macro  arch/x86/include/asm/segment.h  20  #define GDT_ENTRY_BOOT_DS (GDT_ENTRY_BOOT_CS + 1)
__BOOT_DS  macro  arch/x86/include/asm/segment.h  21  #define __BOOT_DS (GDT_ENTRY_BOOT_DS * 8)
GDT_ENTRY_BOOT_TSS  macro  arch/x86/include/asm/segment.h  23  #define GDT_ENTRY_BOOT_TSS (GDT_ENTRY_BOOT_CS + 2)
__BOOT_TSS  macro  arch/x86/include/asm/segment.h  24  #define __BOOT_TSS (GDT_ENTRY_BOOT_TSS * 8)
GDT_ENTRY_TLS_MIN  macro  arch/x86/include/asm/segment.h  170  #define GDT_ENTRY_TLS_MIN 12
GDT_ENTRY_TLS_MAX  macro  arch/x86/include/asm/segment.h  171  #define GDT_ENTRY_TLS_MAX 14
GDT_ENTRY_DEFAULT_USER_CS  macro  arch/x86/include/asm/segment.h  164  #define GDT_ENTRY_DEFAULT_USER_CS 6
GDT_ENTRY_DEFAULT_USER_DS  macro  arch/x86/include/asm/segment.h  163  #define GDT_ENTRY_DEFAULT_USER_DS 5
GDT_ENTRY_KERNEL_BASE  macro  arch/x86/include/asm/segment.h  78  #define GDT_ENTRY_KERNEL_BASE (12)
GDT_ENTRY_KERNEL_CS  macro  arch/x86/include/asm/segment.h  151  #define GDT_ENTRY_KERNEL_CS 2
GDT_ENTRY_KERNEL_DS  macro  arch/x86/include/asm/segment.h  152  #define GDT_ENTRY_KERNEL_DS 3
GDT_ENTRY_TSS  macro  arch/x86/include/asm/segment.h  168  #define GDT_ENTRY_TSS 8
GDT_ENTRY_LDT  macro  arch/x86/include/asm/segment.h  169  #define GDT_ENTRY_LDT 10
GDT_ENTRY_PNPBIOS_BASE  macro  arch/x86/include/asm/segment.h  87  #define GDT_ENTRY_PNPBIOS_BASE (GDT_ENTRY_KERNEL_BASE+6)
GDT_ENTRY_APMBIOS_BASE  macro  arch/x86/include/asm/segment.h  88  #define GDT_ENTRY_APMBIOS_BASE (GDT_ENTRY_KERNEL_BASE+11)
GDT_ENTRY_ESPFIX_SS  macro  arch/x86/include/asm/segment.h  90  #define GDT_ENTRY_ESPFIX_SS (GDT_ENTRY_KERNEL_BASE+14)
__ESPFIX_SS  macro  arch/x86/include/asm/segment.h  91  #define __ESPFIX_SS (GDT_ENTRY_ESPFIX_SS*8)
GDT_ENTRY_PERCPU  macro  arch/x86/include/asm/segment.h  93  #define GDT_ENTRY_PERCPU (GDT_ENTRY_KERNEL_BASE+15)
__KERNEL_PERCPU  macro  arch/x86/include/asm/segment.h  97  #define __KERNEL_PERCPU 0
GDT_ENTRY_STACK_CANARY  macro  arch/x86/include/asm/segment.h  100  #define GDT_ENTRY_STACK_CANARY (GDT_ENTRY_KERNEL_BASE+16)
__KERNEL_STACK_CANARY  macro  arch/x86/include/asm/segment.h  104  #define __KERNEL_STACK_CANARY 0
GDT_ENTRY_DOUBLEFAULT_TSS  macro  arch/x86/include/asm/segment.h  107  #define GDT_ENTRY_DOUBLEFAULT_TSS 31
GDT_ENTRIES  macro  arch/x86/include/asm/segment.h  183  #define GDT_ENTRIES 16
GDT_ENTRY_PNPBIOS_CS32  macro  arch/x86/include/asm/segment.h  115  #define GDT_ENTRY_PNPBIOS_CS32 (GDT_ENTRY_PNPBIOS_BASE + 0)
GDT_ENTRY_PNPBIOS_CS16  macro  arch/x86/include/asm/segment.h  116  #define GDT_ENTRY_PNPBIOS_CS16 (GDT_ENTRY_PNPBIOS_BASE + 1)
GDT_ENTRY_PNPBIOS_DS  macro  arch/x86/include/asm/segment.h  117  #define GDT_ENTRY_PNPBIOS_DS (GDT_ENTRY_PNPBIOS_BASE + 2)
GDT_ENTRY_PNPBIOS_TS1  macro  arch/x86/include/asm/segment.h  118  #define GDT_ENTRY_PNPBIOS_TS1 (GDT_ENTRY_PNPBIOS_BASE + 3)
GDT_ENTRY_PNPBIOS_TS2  macro  arch/x86/include/asm/segment.h  119  #define GDT_ENTRY_PNPBIOS_TS2 (GDT_ENTRY_PNPBIOS_BASE + 4)
PNP_CS32  macro  arch/x86/include/asm/segment.h  122  #define PNP_CS32 (GDT_ENTRY_PNPBIOS_CS32 * 8)
PNP_CS16  macro  arch/x86/include/asm/segment.h  123  #define PNP_CS16 (GDT_ENTRY_PNPBIOS_CS16 * 8)
PNP_DS  macro  arch/x86/include/asm/segment.h  124  #define PNP_DS (GDT_ENTRY_PNPBIOS_DS * 8)
PNP_TS1  macro  arch/x86/include/asm/segment.h  125  #define PNP_TS1 (GDT_ENTRY_PNPBIOS_TS1 * 8)
PNP_TS2  macro  arch/x86/include/asm/segment.h  126  #define PNP_TS2 (GDT_ENTRY_PNPBIOS_TS2 * 8)
SEGMENT_RPL_MASK  macro  arch/x86/include/asm/segment.h  202  #define SEGMENT_RPL_MASK 0x3
SEGMENT_TI_MASK  macro  arch/x86/include/asm/segment.h  204  #define SEGMENT_TI_MASK 0x4
USER_RPL  macro  arch/x86/include/asm/segment.h  196  #define USER_RPL 0x3
SEGMENT_LDT  macro  arch/x86/include/asm/segment.h  198  #define SEGMENT_LDT 0x4
SEGMENT_GDT  macro  arch/x86/include/asm/segment.h  199  #define SEGMENT_GDT 0x0
SEGMENT_IS_PNP_CODE  macro  arch/x86/include/asm/segment.h  144  #define SEGMENT_IS_PNP_CODE(x) (((x) & 0xf4) == GDT_ENTRY_PNPBIOS_BASE * 8)
GDT_ENTRY_KERNEL32_CS  macro  arch/x86/include/asm/segment.h  150  #define GDT_ENTRY_KERNEL32_CS 1
__KERNEL32_CS  macro  arch/x86/include/asm/segment.h  154  #define __KERNEL32_CS (GDT_ENTRY_KERNEL32_CS * 8)
GDT_ENTRY_DEFAULT_USER32_CS  macro  arch/x86/include/asm/segment.h  162  #define GDT_ENTRY_DEFAULT_USER32_CS 4
__USER32_CS  macro  arch/x86/include/asm/segment.h  165  #define __USER32_CS (GDT_ENTRY_DEFAULT_USER32_CS*8+3)
__USER32_DS  macro  arch/x86/include/asm/segment.h  166  #define __USER32_DS __USER_DS
GDT_ENTRY_PER_CPU  macro  arch/x86/include/asm/segment.h  173  #define GDT_ENTRY_PER_CPU 15
__PER_CPU_SEG  macro  arch/x86/include/asm/segment.h  174  #define __PER_CPU_SEG (GDT_ENTRY_PER_CPU * 8 + 3)
FS_TLS  macro  arch/x86/include/asm/segment.h  177  #define FS_TLS 0
GS_TLS  macro  arch/x86/include/asm/segment.h  178  #define GS_TLS 1
GS_TLS_SEL  macro  arch/x86/include/asm/segment.h  180  #define GS_TLS_SEL ((GDT_ENTRY_TLS_MIN+GS_TLS)*8 + 3)
FS_TLS_SEL  macro  arch/x86/include/asm/segment.h  181  #define FS_TLS_SEL ((GDT_ENTRY_TLS_MIN+FS_TLS)*8 + 3)
__KERNEL_CS  macro  arch/x86/include/asm/segment.h  187  #define __KERNEL_CS (GDT_ENTRY_KERNEL_CS*8)
__KERNEL_DS  macro  arch/x86/include/asm/segment.h  188  #define __KERNEL_DS (GDT_ENTRY_KERNEL_DS*8)
__USER_DS  macro  arch/x86/include/asm/segment.h  189  #define __USER_DS (GDT_ENTRY_DEFAULT_USER_DS*8+3)
__USER_CS  macro  arch/x86/include/asm/segment.h  190  #define __USER_CS (GDT_ENTRY_DEFAULT_USER_CS*8+3)
get_kernel_rpl  macro  arch/x86/include/asm/segment.h  192  #define get_kernel_rpl() 0
IDT_ENTRIES  macro  arch/x86/include/asm/segment.h  206  #define IDT_ENTRIES 256
NUM_EXCEPTION_VECTORS  macro  arch/x86/include/asm/segment.h  207  #define NUM_EXCEPTION_VECTORS 32
EXCEPTION_ERRCODE_MASK  macro  arch/x86/include/asm/segment.h  209  #define EXCEPTION_ERRCODE_MASK 0x00027d00
GDT_SIZE  macro  arch/x86/include/asm/segment.h  210  #define GDT_SIZE (GDT_ENTRIES * 8)
GDT_ENTRY_TLS_ENTRIES  macro  arch/x86/include/asm/segment.h  211  #define GDT_ENTRY_TLS_ENTRIES 3
TLS_SIZE  macro  arch/x86/include/asm/segment.h  212  #define TLS_SIZE (GDT_ENTRY_TLS_ENTRIES * 8)
loadsegment  macro  arch/x86/include/asm/segment.h  222  #define loadsegment(seg,value) do { unsigned short __val = (value); asm volatile("						\n" "1:	movl %k0,%%" #seg "		\n" ".section .fixup,\"ax\"			\n" "2:	xorl %k0,%k0			\n" "		jmp 1b				\n" ".previous					\n" _ASM_EXTABLE(1b, 2b) : "+r" (__val) : : "memory"); } while (0)
savesegment  macro  arch/x86/include/asm/segment.h  242  #define savesegment(seg,value) asm("mov %%" #seg ",%0":"=r" (value) : : "memory")
get_user_gs  macro  arch/x86/include/asm/segment.h  256  #define get_user_gs(regs) (u16)((regs)->gs)
set_user_gs  macro  arch/x86/include/asm/segment.h  257  #define set_user_gs(regs,v) do { (regs)->gs = (v); } while (0)
task_user_gs  macro  arch/x86/include/asm/segment.h  258  #define task_user_gs(tsk) (task_pt_regs(tsk)->gs)
lazy_save_gs  macro  arch/x86/include/asm/segment.h  259  #define lazy_save_gs(v) do { } while (0)
lazy_load_gs  macro  arch/x86/include/asm/segment.h  260  #define lazy_load_gs(v) do { } while (0)
get_limit  function  arch/x86/include/asm/segment.h  264  static inline unsigned long get_limit(unsigned long segment)
_ASM_X86_PAGE_DEFS_H  macro  arch/x86/include/asm/page_types.h  2  #define _ASM_X86_PAGE_DEFS_H
PAGE_SHIFT  macro  arch/x86/include/asm/page_types.h  8  #define PAGE_SHIFT 12
PAGE_SIZE  macro  arch/x86/include/asm/page_types.h  9  #define PAGE_SIZE (_AC(1,UL) << PAGE_SHIFT)
PAGE_MASK  macro  arch/x86/include/asm/page_types.h  10  #define PAGE_MASK (~(PAGE_SIZE-1))
__PHYSICAL_MASK  macro  arch/x86/include/asm/page_types.h  12  #define __PHYSICAL_MASK ((phys_addr_t)((1ULL << __PHYSICAL_MASK_SHIFT) - 1))
__VIRTUAL_MASK  macro  arch/x86/include/asm/page_types.h  13  #define __VIRTUAL_MASK ((1UL << __VIRTUAL_MASK_SHIFT) - 1)
PHYSICAL_PAGE_MASK  macro  arch/x86/include/asm/page_types.h  18  #define PHYSICAL_PAGE_MASK (((signed long)PAGE_MASK) & __PHYSICAL_MASK)
PMD_PAGE_SIZE  macro  arch/x86/include/asm/page_types.h  20  #define PMD_PAGE_SIZE (_AC(1,UL) << PMD_SHIFT)
PMD_PAGE_MASK  macro  arch/x86/include/asm/page_types.h  21  #define PMD_PAGE_MASK (~(PMD_PAGE_SIZE-1))
HPAGE_SHIFT  macro  arch/x86/include/asm/page_types.h  23  #define HPAGE_SHIFT PMD_SHIFT
HPAGE_SIZE  macro  arch/x86/include/asm/page_types.h  24  #define HPAGE_SIZE (_AC(1,UL) << HPAGE_SHIFT)
HPAGE_MASK  macro  arch/x86/include/asm/page_types.h  25  #define HPAGE_MASK (~(HPAGE_SIZE - 1))
HUGETLB_PAGE_ORDER  macro  arch/x86/include/asm/page_types.h  26  #define HUGETLB_PAGE_ORDER (HPAGE_SHIFT - PAGE_SHIFT)
HUGE_MAX_HSTATE  macro  arch/x86/include/asm/page_types.h  28  #define HUGE_MAX_HSTATE 2
PAGE_OFFSET  macro  arch/x86/include/asm/page_types.h  30  #define PAGE_OFFSET ((unsigned long)__PAGE_OFFSET)
VM_DATA_DEFAULT_FLAGS  macro  arch/x86/include/asm/page_types.h  32  #define VM_DATA_DEFAULT_FLAGS (((current->personality & READ_IMPLIES_EXEC) ? VM_EXEC : 0 ) | VM_READ | VM_WRITE | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)
devmem_is_allowed  prototype  arch/x86/include/asm/page_types.h  44  extern int devmem_is_allowed(unsigned long pagenr);
get_max_mapped  function  arch/x86/include/asm/page_types.h  49  static inline phys_addr_t get_max_mapped(void)
init_memory_mapping  prototype  arch/x86/include/asm/page_types.h  54  extern unsigned long init_memory_mapping(unsigned long start,unsigned long end);
initmem_init  prototype  arch/x86/include/asm/page_types.h  57  extern void initmem_init(void);
_UAPI_ASM_X86_PTRACE_H  macro  arch/x86/include/uapi/asm/ptrace.h  2  #define _UAPI_ASM_X86_PTRACE_H
_ASM_X86_PARAVIRT_TYPES_H  macro  arch/x86/include/asm/paravirt_types.h  2  #define _ASM_X86_PARAVIRT_TYPES_H
CLBR_NONE  macro  arch/x86/include/asm/paravirt_types.h  5  #define CLBR_NONE 0
CLBR_EAX  macro  arch/x86/include/asm/paravirt_types.h  6  #define CLBR_EAX (1 << 0)
CLBR_ECX  macro  arch/x86/include/asm/paravirt_types.h  7  #define CLBR_ECX (1 << 1)
CLBR_EDX  macro  arch/x86/include/asm/paravirt_types.h  8  #define CLBR_EDX (1 << 2)
CLBR_EDI  macro  arch/x86/include/asm/paravirt_types.h  9  #define CLBR_EDI (1 << 3)
CLBR_ANY  macro  arch/x86/include/asm/paravirt_types.h  29  #define CLBR_ANY ((1 << 9) - 1)
CLBR_ARG_REGS  macro  arch/x86/include/asm/paravirt_types.h  31  #define CLBR_ARG_REGS (CLBR_RDI | CLBR_RSI | CLBR_RDX | CLBR_RCX | CLBR_R8 | CLBR_R9)
CLBR_RET_REG  macro  arch/x86/include/asm/paravirt_types.h  33  #define CLBR_RET_REG (CLBR_RAX)
CLBR_SCRATCH  macro  arch/x86/include/asm/paravirt_types.h  34  #define CLBR_SCRATCH (CLBR_R10 | CLBR_R11)
CLBR_RAX  macro  arch/x86/include/asm/paravirt_types.h  19  #define CLBR_RAX CLBR_EAX
CLBR_RCX  macro  arch/x86/include/asm/paravirt_types.h  20  #define CLBR_RCX CLBR_ECX
CLBR_RDX  macro  arch/x86/include/asm/paravirt_types.h  21  #define CLBR_RDX CLBR_EDX
CLBR_RDI  macro  arch/x86/include/asm/paravirt_types.h  22  #define CLBR_RDI CLBR_EDI
CLBR_RSI  macro  arch/x86/include/asm/paravirt_types.h  23  #define CLBR_RSI (1 << 4)
CLBR_R8  macro  arch/x86/include/asm/paravirt_types.h  24  #define CLBR_R8 (1 << 5)
CLBR_R9  macro  arch/x86/include/asm/paravirt_types.h  25  #define CLBR_R9 (1 << 6)
CLBR_R10  macro  arch/x86/include/asm/paravirt_types.h  26  #define CLBR_R10 (1 << 7)
CLBR_R11  macro  arch/x86/include/asm/paravirt_types.h  27  #define CLBR_R11 (1 << 8)
CLBR_CALLEE_SAVE  macro  arch/x86/include/asm/paravirt_types.h  38  #define CLBR_CALLEE_SAVE ((CLBR_ARG_REGS | CLBR_SCRATCH) & ~CLBR_RET_REG)
paravirt_callee_save  struct  arch/x86/include/asm/paravirt_types.h  59  struct paravirt_callee_save { void *func; };
pv_info  struct  arch/x86/include/asm/paravirt_types.h  64  struct pv_info { unsigned int kernel_rpl; int shared_kernel_pmd; u16 extra_user_64bit_cs; int paravirt_enabled; const char *name; };
pv_init_ops  struct  arch/x86/include/asm/paravirt_types.h  76  struct pv_init_ops { unsigned (*patch)(u8 type, u16 clobber, void *insnbuf,unsigned long addr, unsigned len); };
pv_lazy_ops  struct  arch/x86/include/asm/paravirt_types.h  90  struct pv_lazy_ops { void (*enter)(void); void (*leave)(void); void (*flush)(void); };
pv_time_ops  struct  arch/x86/include/asm/paravirt_types.h  97  struct pv_time_ops { unsigned long long (*sched_clock)(void); unsigned long long (*steal_clock)(int cpu); unsigned long (*get_tsc_khz)(void); };
pv_cpu_ops  struct  arch/x86/include/asm/paravirt_types.h  103  struct pv_cpu_ops { unsigned long (*get_debugreg)(int regno); void (*set_debugreg)(int regno, unsigned long value); void (*clts)(void); unsigned long (*read_cr0)(void); void (*write_cr0)(unsigned long); unsigned long (*read_cr4_safe)(void); unsigned long (*read_cr4)(void); void (*write_cr4)(unsigned long); unsigned long (*read_cr8)(void); void (*write_cr8)(unsigned long); void (*load_tr_desc)(void); void (*load_gdt)(const struct desc_ptr *); void (*load_idt)(const struct desc_ptr *); void (*store_gdt)(struct desc_ptr *); void (*store_idt)(struct desc_ptr *); void (*set_ldt)(const void *desc, unsigned entries); unsigned long (*store_tr)(void); void (*load_tls)(struct thread_struct *t, unsigned int cpu); void (*load_gs_index)(unsigned int idx); void (*write_ldt_entry)(struct desc_struct *ldt, int entrynum,const void *desc); void (*write_gdt_entry)(struct desc_struct *,int entrynum, const void *desc, int size); void (*write_idt_entry)(gate_desc *,int entrynum, const gate_desc *gate); void (*alloc_ldt)(struct desc_struct *ldt, unsigned entries); void (*free_ldt)(struct desc_struct *ldt, unsigned entries); void (*load_sp0)(struct tss_struct *tss, struct thread_struct *t); void (*set_iopl_mask)(unsigned mask); void (*wbinvd)(void); void (*io_delay)(void); void (*cpuid)(unsigned int *eax, unsigned int *ebx,unsigned int *ecx, unsigned int *edx); u64 (*read_msr)(unsigned int msr, int *err); int (*write_msr)(unsigned int msr, unsigned low, unsigned high); u64 (*read_tsc)(void); u64 (*read_pmc)(int counter); unsigned long long (*read_tscp)(unsigned int *aux); void (*irq_enable_sysexit)(void); void (*usergs_sysret64)(void); void (*usergs_sysret32)(void); void (*iret)(void); void (*swapgs)(void); void (*start_context_switch)(struct task_struct *prev); void (*end_context_switch)(struct task_struct *next); };
pv_irq_ops  struct  arch/x86/include/asm/paravirt_types.h  197  struct pv_irq_ops { struct paravirt_callee_save save_fl; struct paravirt_callee_save restore_fl; struct paravirt_callee_save irq_disable; struct paravirt_callee_save irq_enable; void (*safe_halt)(void); void (*halt)(void); void (*adjust_exception_frame)(void); };
pv_apic_ops  struct  arch/x86/include/asm/paravirt_types.h  220  struct pv_apic_ops { void (*startup_ipi_hook)(int phys_apicid,unsigned long start_eip,unsigned long start_esp); };
pv_mmu_ops  struct  arch/x86/include/asm/paravirt_types.h  228  struct pv_mmu_ops { unsigned long (*read_cr2)(void); void (*write_cr2)(unsigned long); unsigned long (*read_cr3)(void); void (*write_cr3)(unsigned long); void (*activate_mm)(struct mm_struct *prev,struct mm_struct *next); void (*dup_mmap)(struct mm_struct *oldmm,struct mm_struct *mm); void (*exit_mmap)(struct mm_struct *mm); void (*flush_tlb_user)(void); void (*flush_tlb_kernel)(void); void (*flush_tlb_single)(unsigned long addr); void (*flush_tlb_others)(const struct cpumask *cpus,struct mm_struct *mm,unsigned long start,unsigned long end); int (*pgd_alloc)(struct mm_struct *mm); void (*pgd_free)(struct mm_struct *mm, pgd_t *pgd); void (*alloc_pte)(struct mm_struct *mm, unsigned long pfn); void (*alloc_pmd)(struct mm_struct *mm, unsigned long pfn); void (*alloc_pud)(struct mm_struct *mm, unsigned long pfn); void (*release_pte)(unsigned long pfn); void (*release_pmd)(unsigned long pfn); void (*release_pud)(unsigned long pfn); void (*set_pte)(pte_t *ptep, pte_t pteval); void (*set_pte_at)(struct mm_struct *mm, unsigned long addr,pte_t *ptep, pte_t pteval); void (*set_pmd)(pmd_t *pmdp, pmd_t pmdval); void (*set_pmd_at)(struct mm_struct *mm, unsigned long addr,pmd_t *pmdp, pmd_t pmdval); void (*pte_update)(struct mm_struct *mm, unsigned long addr,pte_t *ptep); void (*pte_update_defer)(struct mm_struct *mm,unsigned long addr, pte_t *ptep); void (*pmd_update)(struct mm_struct *mm, unsigned long addr,pmd_t *pmdp); void (*pmd_update_defer)(struct mm_struct *mm,unsigned long addr, pmd_t *pmdp); pte_t (*ptep_modify_prot_start)(struct mm_struct *mm, unsigned long addr,pte_t *ptep); void (*ptep_modify_prot_commit)(struct mm_struct *mm, unsigned long addr,pte_t *ptep, pte_t pte); struct paravirt_callee_save pte_val; struct paravirt_callee_save make_pte; struct paravirt_callee_save pgd_val; struct paravirt_callee_save make_pgd; void (*set_pte_atomic)(pte_t *ptep, pte_t pteval); void (*pte_clear)(struct mm_struct *mm, unsigned long addr,pte_t *ptep); void (*pmd_clear)(pmd_t *pmdp); void (*set_pud)(pud_t *pudp, pud_t pudval); struct paravirt_callee_save pmd_val; struct paravirt_callee_save make_pmd; struct paravirt_callee_save pud_val; struct paravirt_callee_save make_pud; void (*set_pgd)(pgd_t *pudp, pgd_t pgdval); struct pv_lazy_ops lazy_mode; void (*set_fixmap)(unsigned };
pv_lock_ops  struct  arch/x86/include/asm/paravirt_types.h  330  struct pv_lock_ops { int (*spin_is_locked)(struct arch_spinlock *lock); int (*spin_is_contended)(struct arch_spinlock *lock); void (*spin_lock)(struct arch_spinlock *lock); void (*spin_lock_flags)(struct arch_spinlock *lock, unsigned long flags); int (*spin_trylock)(struct arch_spinlock *lock); void (*spin_unlock)(struct arch_spinlock *lock); };
paravirt_patch_template  struct  arch/x86/include/asm/paravirt_types.h  342  struct paravirt_patch_template { struct pv_init_ops pv_init_ops; struct pv_time_ops pv_time_ops; struct pv_cpu_ops pv_cpu_ops; struct pv_irq_ops pv_irq_ops; struct pv_apic_ops pv_apic_ops; struct pv_mmu_ops pv_mmu_ops; struct pv_lock_ops pv_lock_ops; };
PARAVIRT_PATCH  macro  arch/x86/include/asm/paravirt_types.h  361  #define PARAVIRT_PATCH(x) (offsetof(struct paravirt_patch_template, x) / sizeof(void *))
paravirt_type  macro  arch/x86/include/asm/paravirt_types.h  364  #define paravirt_type(op) [paravirt_typenum] "i" (PARAVIRT_PATCH(op)), [paravirt_opptr] "i" (&(op))
paravirt_clobber  macro  arch/x86/include/asm/paravirt_types.h  367  #define paravirt_clobber(clobber) [paravirt_clobber] "i" (clobber)
_paravirt_alt  macro  arch/x86/include/asm/paravirt_types.h  374  #define _paravirt_alt(insn_string,type,clobber) "771:\n\t" insn_string "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" _ASM_ALIGN "\n" _ASM_PTR " 771b\n" "  .byte " type "\n" "  .byte 772b-771b\n" "  .short " clobber "\n" ".popsection\n"
paravirt_alt  macro  arch/x86/include/asm/paravirt_types.h  385  #define paravirt_alt(insn_string) _paravirt_alt(insn_string, "%c[paravirt_typenum]", "%c[paravirt_clobber]")
DEF_NATIVE  macro  arch/x86/include/asm/paravirt_types.h  389  #define DEF_NATIVE(ops,name,code) extern const char start_##ops##_##name[], end_##ops##_##name[]; asm("start_" #ops "_" #name ": " code "; end_" #ops "_" #name ":")
paravirt_patch_nop  prototype  arch/x86/include/asm/paravirt_types.h  393  unsigned paravirt_patch_nop(void);
paravirt_patch_ident_32  prototype  arch/x86/include/asm/paravirt_types.h  394  unsigned paravirt_patch_ident_32(void *insnbuf,unsigned len);
paravirt_patch_ident_64  prototype  arch/x86/include/asm/paravirt_types.h  395  unsigned paravirt_patch_ident_64(void *insnbuf,unsigned len);
paravirt_patch_ignore  prototype  arch/x86/include/asm/paravirt_types.h  396  unsigned paravirt_patch_ignore(unsigned len);
paravirt_patch_call  prototype  arch/x86/include/asm/paravirt_types.h  397  unsigned paravirt_patch_call(void *insnbuf,const void *target, u16 tgt_clobbers,unsigned long addr, u16 site_clobbers,unsigned len);
paravirt_patch_jmp  prototype  arch/x86/include/asm/paravirt_types.h  401  unsigned paravirt_patch_jmp(void *insnbuf,const void *target,unsigned long addr, unsigned len);
paravirt_patch_default  prototype  arch/x86/include/asm/paravirt_types.h  403  unsigned paravirt_patch_default(u8 type,u16 clobbers,void *insnbuf,unsigned long addr, unsigned len);
paravirt_patch_insns  prototype  arch/x86/include/asm/paravirt_types.h  406  unsigned paravirt_patch_insns(void *insnbuf,unsigned len,const char *start, const char *end);
native_patch  prototype  arch/x86/include/asm/paravirt_types.h  409  unsigned native_patch(u8 type,u16 clobbers,void *ibuf,unsigned long addr, unsigned len);
paravirt_disable_iospace  prototype  arch/x86/include/asm/paravirt_types.h  412  int paravirt_disable_iospace(void);
PARAVIRT_CALL  macro  arch/x86/include/asm/paravirt_types.h  420  #define PARAVIRT_CALL "call *%c[paravirt_opptr];"
PVOP_VCALL_ARGS  macro  arch/x86/include/asm/paravirt_types.h  506  #define PVOP_VCALL_ARGS unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax
PVOP_CALL_ARGS  macro  arch/x86/include/asm/paravirt_types.h  509  #define PVOP_CALL_ARGS PVOP_VCALL_ARGS
PVOP_CALL_ARG1  macro  arch/x86/include/asm/paravirt_types.h  511  #define PVOP_CALL_ARG1(x) "D" ((unsigned long)(x))
PVOP_CALL_ARG2  macro  arch/x86/include/asm/paravirt_types.h  512  #define PVOP_CALL_ARG2(x) "S" ((unsigned long)(x))
PVOP_CALL_ARG3  macro  arch/x86/include/asm/paravirt_types.h  513  #define PVOP_CALL_ARG3(x) "d" ((unsigned long)(x))
PVOP_VCALL_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  516  #define PVOP_VCALL_CLOBBERS "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx)
PVOP_CALL_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  519  #define PVOP_CALL_CLOBBERS PVOP_VCALL_CLOBBERS,"=a" (__eax)
PVOP_VCALLEE_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  522  #define PVOP_VCALLEE_CLOBBERS "=a" (__eax)
PVOP_CALLEE_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  523  #define PVOP_CALLEE_CLOBBERS PVOP_VCALLEE_CLOBBERS
EXTRA_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  525  #define EXTRA_CLOBBERS ,"r8","r9","r10","r11"
VEXTRA_CLOBBERS  macro  arch/x86/include/asm/paravirt_types.h  526  #define VEXTRA_CLOBBERS ,"rax","r8","r9","r10","r11"
PVOP_CALL_ARG4  macro  arch/x86/include/asm/paravirt_types.h  514  #define PVOP_CALL_ARG4(x) "c" ((unsigned long)(x))
PVOP_TEST_NULL  macro  arch/x86/include/asm/paravirt_types.h  532  #define PVOP_TEST_NULL(op) ((void)op)
____PVOP_CALL  macro  arch/x86/include/asm/paravirt_types.h  535  #define ____PVOP_CALL(rettype,op,clbr,call_clbr,extra_clbr, pre, post, ...) ({ rettype __ret; PVOP_CALL_ARGS; PVOP_TEST_NULL(op); /* This is 32-bit specific, but is okay in 64-bit */ /* since this condition will never hold */ if (sizeof(rettype) > sizeof(unsigned long)) { asm volatile(pre paravirt_alt(PARAVIRT_CALL) post : call_clbr : paravirt_type(op), paravirt_clobber(clbr), ##__VA_ARGS__ : "memory", "cc" extra_clbr); __ret = (rettype)((((u64)__edx) << 32) | __eax); } else { asm volatile(pre paravirt_alt(PARAVIRT_CALL) post : call_clbr : paravirt_type(op), paravirt_clobber(clbr), ##__VA_ARGS__ : "memory", "cc" extra_clbr); __ret = (rettype)__eax; } __ret; })
__PVOP_CALL  macro  arch/x86/include/asm/paravirt_types.h  567  #define __PVOP_CALL(rettype,op,pre,post,...) ____PVOP_CALL(rettype, op, CLBR_ANY, PVOP_CALL_CLOBBERS, EXTRA_CLOBBERS, pre, post, ##__VA_ARGS__)
__PVOP_CALLEESAVE  macro  arch/x86/include/asm/paravirt_types.h  571  #define __PVOP_CALLEESAVE(rettype,op,pre,post,...) ____PVOP_CALL(rettype, op.func, CLBR_RET_REG, PVOP_CALLEE_CLOBBERS, , pre, post, ##__VA_ARGS__)
____PVOP_VCALL  macro  arch/x86/include/asm/paravirt_types.h  577  #define ____PVOP_VCALL(op,clbr,call_clbr,extra_clbr,pre,post,...) ({ PVOP_VCALL_ARGS; PVOP_TEST_NULL(op); asm volatile(pre paravirt_alt(PARAVIRT_CALL) post : call_clbr : paravirt_type(op), paravirt_clobber(clbr), ##__VA_ARGS__ : "memory", "cc" extra_clbr); })
__PVOP_VCALL  macro  arch/x86/include/asm/paravirt_types.h  591  #define __PVOP_VCALL(op,pre,post,...) ____PVOP_VCALL(op, CLBR_ANY, PVOP_VCALL_CLOBBERS, VEXTRA_CLOBBERS, pre, post, ##__VA_ARGS__)
__PVOP_VCALLEESAVE  macro  arch/x86/include/asm/paravirt_types.h  596  #define __PVOP_VCALLEESAVE(op,pre,post,...) ____PVOP_VCALL(op.func, CLBR_RET_REG, PVOP_VCALLEE_CLOBBERS, , pre, post, ##__VA_ARGS__)
PVOP_CALL0  macro  arch/x86/include/asm/paravirt_types.h  603  #define PVOP_CALL0(rettype,op) __PVOP_CALL(rettype, op, "", "")
PVOP_VCALL0  macro  arch/x86/include/asm/paravirt_types.h  605  #define PVOP_VCALL0(op) __PVOP_VCALL(op, "", "")
PVOP_CALLEE0  macro  arch/x86/include/asm/paravirt_types.h  608  #define PVOP_CALLEE0(rettype,op) __PVOP_CALLEESAVE(rettype, op, "", "")
PVOP_VCALLEE0  macro  arch/x86/include/asm/paravirt_types.h  610  #define PVOP_VCALLEE0(op) __PVOP_VCALLEESAVE(op, "", "")
PVOP_CALL1  macro  arch/x86/include/asm/paravirt_types.h  614  #define PVOP_CALL1(rettype,op,arg1) __PVOP_CALL(rettype, op, "", "", PVOP_CALL_ARG1(arg1))
PVOP_VCALL1  macro  arch/x86/include/asm/paravirt_types.h  616  #define PVOP_VCALL1(op,arg1) __PVOP_VCALL(op, "", "", PVOP_CALL_ARG1(arg1))
PVOP_CALLEE1  macro  arch/x86/include/asm/paravirt_types.h  619  #define PVOP_CALLEE1(rettype,op,arg1) __PVOP_CALLEESAVE(rettype, op, "", "", PVOP_CALL_ARG1(arg1))
PVOP_VCALLEE1  macro  arch/x86/include/asm/paravirt_types.h  621  #define PVOP_VCALLEE1(op,arg1) __PVOP_VCALLEESAVE(op, "", "", PVOP_CALL_ARG1(arg1))
PVOP_CALL2  macro  arch/x86/include/asm/paravirt_types.h  625  #define PVOP_CALL2(rettype,op,arg1,arg2) __PVOP_CALL(rettype, op, "", "", PVOP_CALL_ARG1(arg1), PVOP_CALL_ARG2(arg2))
PVOP_VCALL2  macro  arch/x86/include/asm/paravirt_types.h  628  #define PVOP_VCALL2(op,arg1,arg2) __PVOP_VCALL(op, "", "", PVOP_CALL_ARG1(arg1), PVOP_CALL_ARG2(arg2))
PVOP_CALLEE2  macro  arch/x86/include/asm/paravirt_types.h  632  #define PVOP_CALLEE2(rettype,op,arg1,arg2) __PVOP_CALLEESAVE(rettype, op, "", "", PVOP_CALL_ARG1(arg1), PVOP_CALL_ARG2(arg2))
PVOP_VCALLEE2  macro  arch/x86/include/asm/paravirt_types.h  635  #define PVOP_VCALLEE2(op,arg1,arg2) __PVOP_VCALLEESAVE(op, "", "", PVOP_CALL_ARG1(arg1), PVOP_CALL_ARG2(arg2))
PVOP_CALL3  macro  arch/x86/include/asm/paravirt_types.h  640  #define PVOP_CALL3(rettype,op,arg1,arg2,arg3) __PVOP_CALL(rettype, op, "", "", PVOP_CALL_ARG1(arg1), PVOP_CALL_ARG2(arg2), PVOP_CALL_ARG3(arg3))
PVOP_VCALL3  macro  arch/x86/include/asm/paravirt_types.h  643  #define PVOP_VCALL3(op,arg1,arg2,arg3) __PVOP_VCALL(op, "", "", PVOP_CALL_ARG1(arg1), PVOP_CALL_ARG2(arg2), PVOP_CALL_ARG3(arg3))
PVOP_CALL4  macro  arch/x86/include/asm/paravirt_types.h  660  #define PVOP_CALL4(rettype,op,arg1,arg2,arg3,arg4) __PVOP_CALL(rettype, op, "", "", PVOP_CALL_ARG1(arg1), PVOP_CALL_ARG2(arg2), PVOP_CALL_ARG3(arg3), PVOP_CALL_ARG4(arg4))
PVOP_VCALL4  macro  arch/x86/include/asm/paravirt_types.h  664  #define PVOP_VCALL4(op,arg1,arg2,arg3,arg4) __PVOP_VCALL(op, "", "", PVOP_CALL_ARG1(arg1), PVOP_CALL_ARG2(arg2), PVOP_CALL_ARG3(arg3), PVOP_CALL_ARG4(arg4))
paravirt_lazy_mode  enum  arch/x86/include/asm/paravirt_types.h  671  enum paravirt_lazy_mode { PARAVIRT_LAZY_NONE, PARAVIRT_LAZY_MMU, PARAVIRT_LAZY_CPU, };
paravirt_get_lazy_mode  prototype  arch/x86/include/asm/paravirt_types.h  677  enum paravirt_lazy_mode paravirt_get_lazy_mode(void);
paravirt_start_context_switch  prototype  arch/x86/include/asm/paravirt_types.h  678  void paravirt_start_context_switch(struct task_struct *prev);
paravirt_end_context_switch  prototype  arch/x86/include/asm/paravirt_types.h  679  void paravirt_end_context_switch(struct task_struct *next);
paravirt_enter_lazy_mmu  prototype  arch/x86/include/asm/paravirt_types.h  681  void paravirt_enter_lazy_mmu(void);
paravirt_leave_lazy_mmu  prototype  arch/x86/include/asm/paravirt_types.h  682  void paravirt_leave_lazy_mmu(void);
paravirt_flush_lazy_mmu  prototype  arch/x86/include/asm/paravirt_types.h  683  void paravirt_flush_lazy_mmu(void);
_paravirt_nop  prototype  arch/x86/include/asm/paravirt_types.h  685  void _paravirt_nop(void);
_paravirt_ident_32  prototype  arch/x86/include/asm/paravirt_types.h  686  u32 _paravirt_ident_32(u32);
_paravirt_ident_64  prototype  arch/x86/include/asm/paravirt_types.h  687  u64 _paravirt_ident_64(u64);
paravirt_nop  macro  arch/x86/include/asm/paravirt_types.h  689  #define paravirt_nop ((void *)_paravirt_nop)
paravirt_patch_site  struct  arch/x86/include/asm/paravirt_types.h  692  struct paravirt_patch_site { u8 *instr; u8 instrtype; u8 len; u16 clobbers; };
__ASM_GENERIC_PTRACE_H__  macro  include/asm-generic/ptrace.h  10  #define __ASM_GENERIC_PTRACE_H__
SET_IP  macro  include/asm-generic/ptrace.h  19  #define SET_IP(regs,val) (GET_IP(regs) = (val))
instruction_pointer  function  include/asm-generic/ptrace.h  22  static inline unsigned long instruction_pointer(struct pt_regs *regs)
instruction_pointer_set  function  include/asm-generic/ptrace.h  26  static inline void instruction_pointer_set(struct pt_regs *regs,unsigned long val)
SET_USP  macro  include/asm-generic/ptrace.h  41  #define SET_USP(regs,val) (GET_USP(regs) = (val))
user_stack_pointer  function  include/asm-generic/ptrace.h  44  static inline unsigned long user_stack_pointer(struct pt_regs *regs)
user_stack_pointer_set  function  include/asm-generic/ptrace.h  48  static inline void user_stack_pointer_set(struct pt_regs *regs,unsigned long val)
SET_FP  macro  include/asm-generic/ptrace.h  59  #define SET_FP(regs,val) (GET_FP(regs) = (val))
frame_pointer  function  include/asm-generic/ptrace.h  62  static inline unsigned long frame_pointer(struct pt_regs *regs)
frame_pointer_set  function  include/asm-generic/ptrace.h  66  static inline void frame_pointer_set(struct pt_regs *regs,unsigned long val)
_LINUX_MMZONE_H  macro  include/linux/mmzone.h  2  #define _LINUX_MMZONE_H
MAX_ORDER  macro  include/linux/mmzone.h  26  #define MAX_ORDER CONFIG_FORCE_MAX_ZONEORDER
MAX_ORDER_NR_PAGES  macro  include/linux/mmzone.h  28  #define MAX_ORDER_NR_PAGES (1 << (MAX_ORDER - 1))
PAGE_ALLOC_COSTLY_ORDER  macro  include/linux/mmzone.h  36  #define PAGE_ALLOC_COSTLY_ORDER 3
is_migrate_cma  macro  include/linux/mmzone.h  67  # define is_migrate_cma(migratetype) false
for_each_migratetype_order  macro  include/linux/mmzone.h  70  #define for_each_migratetype_order(order,type) for (order = 0; order < MAX_ORDER; order++) for (type = 0; type < MIGRATE_TYPES; type++)
get_pageblock_migratetype  function  include/linux/mmzone.h  76  static inline int get_pageblock_migratetype(struct page *page)
free_area  struct  include/linux/mmzone.h  81  struct free_area { struct list_head free_list[MIGRATE_TYPES]; unsigned long nr_free; };
zone_padding  struct  include/linux/mmzone.h  95  struct zone_padding { char x[0]; } ____cacheline_internodealigned_in_smp;
ZONE_PADDING  macro  include/linux/mmzone.h  100  #define ZONE_PADDING(name)
zone_stat_item  enum  include/linux/mmzone.h  103  enum zone_stat_item { NR_FREE_PAGES, NR_LRU_BASE, NR_INACTIVE_ANON = NR_LRU_BASE, NR_ACTIVE_ANON, NR_INACTIVE_FILE, NR_ACTIVE_FILE, NR_UNEVICTABLE, NR_MLOCK, NR_ANON_PAGES, NR_FILE_MAPPED, NR_FILE_PAGES, NR_FILE_DIRTY, NR_WRITEBACK, NR_SLAB_RECLAIMABLE, NR_SLAB_UNRECLAIMABLE, NR_PAGETABLE, NR_KERNEL_STACK, NR_UNSTABLE_NFS, NR_BOUNCE, NR_VMSCAN_WRITE, NR_VMSCAN_IMMEDIATE, NR_WRITEBACK_TEMP, NR_ISOLATED_ANON, NR_ISOLATED_FILE, NR_SHMEM, NR_DIRTIED, NR_WRITTEN, NUMA_HIT, NUMA_MISS, NUMA_FOREIGN, NUMA_INTERLEAVE_HIT, NUMA_LOCAL, NUMA_OTHER, NR_ANON_TRANSPARENT_HUGEPAGES, NR_FREE_CMA_PAGES, NR_VM_ZONE_STAT_ITEMS };
LRU_BASE  macro  include/linux/mmzone.h  155  #define LRU_BASE 0
LRU_ACTIVE  macro  include/linux/mmzone.h  156  #define LRU_ACTIVE 1
LRU_FILE  macro  include/linux/mmzone.h  157  #define LRU_FILE 2
lru_list  enum  include/linux/mmzone.h  159  enum lru_list { LRU_INACTIVE_ANON = LRU_BASE, LRU_ACTIVE_ANON = LRU_BASE + LRU_ACTIVE, LRU_INACTIVE_FILE = LRU_BASE + LRU_FILE, LRU_ACTIVE_FILE = LRU_BASE + LRU_FILE + LRU_ACTIVE, LRU_UNEVICTABLE, NR_LRU_LISTS };
for_each_lru  macro  include/linux/mmzone.h  168  #define for_each_lru(lru) for (lru = 0; lru < NR_LRU_LISTS; lru++)
for_each_evictable_lru  macro  include/linux/mmzone.h  170  #define for_each_evictable_lru(lru) for (lru = 0; lru <= LRU_ACTIVE_FILE; lru++)
is_file_lru  function  include/linux/mmzone.h  172  static inline int is_file_lru(enum lru_list lru)
is_active_lru  function  include/linux/mmzone.h  177  static inline int is_active_lru(enum lru_list lru)
is_unevictable_lru  function  include/linux/mmzone.h  182  static inline int is_unevictable_lru(enum lru_list lru)
zone_reclaim_stat  struct  include/linux/mmzone.h  187  struct zone_reclaim_stat { unsigned long recent_rotated[2]; unsigned long recent_scanned[2]; };
lruvec  struct  include/linux/mmzone.h  200  struct lruvec { struct list_head lists[NR_LRU_LISTS]; struct zone_reclaim_stat reclaim_stat; struct zone *zone; };
LRU_ALL_FILE  macro  include/linux/mmzone.h  209  #define LRU_ALL_FILE (BIT(LRU_INACTIVE_FILE) | BIT(LRU_ACTIVE_FILE))
LRU_ALL_ANON  macro  include/linux/mmzone.h  210  #define LRU_ALL_ANON (BIT(LRU_INACTIVE_ANON) | BIT(LRU_ACTIVE_ANON))
LRU_ALL  macro  include/linux/mmzone.h  211  #define LRU_ALL ((1 << NR_LRU_LISTS) - 1)
ISOLATE_CLEAN  macro  include/linux/mmzone.h  214  #define ISOLATE_CLEAN ((__force isolate_mode_t)0x1)
ISOLATE_UNMAPPED  macro  include/linux/mmzone.h  216  #define ISOLATE_UNMAPPED ((__force isolate_mode_t)0x2)
ISOLATE_ASYNC_MIGRATE  macro  include/linux/mmzone.h  218  #define ISOLATE_ASYNC_MIGRATE ((__force isolate_mode_t)0x4)
ISOLATE_UNEVICTABLE  macro  include/linux/mmzone.h  220  #define ISOLATE_UNEVICTABLE ((__force isolate_mode_t)0x8)
zone_watermarks  enum  include/linux/mmzone.h  225  enum zone_watermarks { WMARK_MIN, WMARK_LOW, WMARK_HIGH, NR_WMARK };
min_wmark_pages  macro  include/linux/mmzone.h  232  #define min_wmark_pages(z) (z->watermark[WMARK_MIN])
low_wmark_pages  macro  include/linux/mmzone.h  233  #define low_wmark_pages(z) (z->watermark[WMARK_LOW])
high_wmark_pages  macro  include/linux/mmzone.h  234  #define high_wmark_pages(z) (z->watermark[WMARK_HIGH])
per_cpu_pages  struct  include/linux/mmzone.h  236  struct per_cpu_pages { int count; int high; int batch; struct list_head lists[MIGRATE_PCPTYPES]; };
per_cpu_pageset  struct  include/linux/mmzone.h  245  struct per_cpu_pageset { struct per_cpu_pages pcp; s8 expire; s8 stat_threshold; s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS]; };
zone_type  enum  include/linux/mmzone.h  258  enum zone_type { ZONE_DMA, ZONE_DMA32, ZONE_NORMAL, ZONE_HIGHMEM, ZONE_MOVABLE, __MAX_NR_ZONES };
ZONES_SHIFT  macro  include/linux/mmzone.h  324  #define ZONES_SHIFT 2
zone  struct  include/linux/mmzone.h  329  struct zone { unsigned long watermark[NR_WMARK]; unsigned long percpu_drift_mark; unsigned long lowmem_reserve[MAX_NR_ZONES]; unsigned long dirty_balance_reserve; int node; unsigned long min_unmapped_pages; unsigned long min_slab_pages; struct per_cpu_pageset __percpu *pageset; spinlock_t lock; int all_unreclaimable; bool compact_blockskip_flush; unsigned long compact_cached_free_pfn; unsigned long compact_cached_migrate_pfn; seqlock_t span_seqlock; struct free_area free_area[MAX_ORDER]; unsigned long *pageblock_flags; unsigned int compact_considered; unsigned int compact_defer_shift; int compact_order_failed; spinlock_t lru_lock; struct lruvec lruvec; unsigned long pages_scanned; unsigned long flags; atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS]; unsigned int inactive_ratio; wait_queue_head_t * wait_table; unsigned long wait_table_hash_nr_entries; unsigned long wait_table_bits; struct pglist_data *zone_pgdat; unsigned long zone_start_pfn; unsigned long spanned_pages; unsigned long present_pages; unsigned long managed_pages; const char *name; } ____cacheline_internodealigned_in_smp;
zone_flags_t  enum  include/linux/mmzone.h  508  typedef enum { ZONE_RECLAIM_LOCKED, ZONE_OOM_LOCKED, ZONE_CONGESTED, } zone_flags_t;
zone_set_flag  function  include/linux/mmzone.h  516  static inline void zone_set_flag(struct zone *zone,zone_flags_t flag)
zone_test_and_set_flag  function  include/linux/mmzone.h  521  static inline int zone_test_and_set_flag(struct zone *zone,zone_flags_t flag)
zone_clear_flag  function  include/linux/mmzone.h  526  static inline void zone_clear_flag(struct zone *zone,zone_flags_t flag)
zone_is_reclaim_congested  function  include/linux/mmzone.h  531  static inline int zone_is_reclaim_congested(const struct zone *zone)
zone_is_reclaim_locked  function  include/linux/mmzone.h  536  static inline int zone_is_reclaim_locked(const struct zone *zone)
zone_is_oom_locked  function  include/linux/mmzone.h  541  static inline int zone_is_oom_locked(const struct zone *zone)
DEF_PRIORITY  macro  include/linux/mmzone.h  551  #define DEF_PRIORITY 12
MAX_ZONES_PER_ZONELIST  macro  include/linux/mmzone.h  554  #define MAX_ZONES_PER_ZONELIST (MAX_NUMNODES * MAX_NR_ZONES)
MAX_ZONELISTS  macro  include/linux/mmzone.h  633  #define MAX_ZONELISTS 1
zonelist_cache  struct  include/linux/mmzone.h  627  struct zonelist_cache { unsigned short z_to_n[MAX_ZONES_PER_ZONELIST]; DECLARE_BITMAP(fullzones, MAX_ZONES_PER_ZONELIST); unsigned long last_full_zap; };
zoneref  struct  include/linux/mmzone.h  641  struct zoneref { struct zone *zone; int zone_idx; };
zonelist  struct  include/linux/mmzone.h  663  struct zonelist { struct zonelist_cache *zlcache_ptr; // NULL or &zlcache struct zoneref _zonerefs[MAX_ZONES_PER_ZONELIST + 1]; struct zonelist_cache zlcache; // optional ... };
node_active_region  struct  include/linux/mmzone.h  672  struct node_active_region { unsigned long start_pfn; unsigned long end_pfn; int nid; };
pglist_data  struct  include/linux/mmzone.h  696  typedef struct pglist_data { struct zone node_zones[MAX_NR_ZONES]; struct zonelist node_zonelists[MAX_ZONELISTS]; int nr_zones; struct page *node_mem_map; struct page_cgroup *node_page_cgroup; struct bootmem_data *bdata; spinlock_t node_size_lock; unsigned long node_start_pfn; unsigned long node_present_pages; unsigned long node_spanned_pages; int node_id; nodemask_t reclaim_nodes; wait_queue_head_t kswapd_wait; wait_queue_head_t pfmemalloc_wait; struct task_struct *kswapd; int kswapd_max_order; enum zone_type classzone_idx; spinlock_t numabalancing_migrate_lock; unsigned long numabalancing_migrate_next_window; unsigned long numabalancing_migrate_nr_pages; } pg_data_t;
pg_data_t  struct  include/linux/mmzone.h  696  typedef struct pglist_data { struct zone node_zones[MAX_NR_ZONES]; struct zonelist node_zonelists[MAX_ZONELISTS]; int nr_zones; struct page *node_mem_map; struct page_cgroup *node_page_cgroup; struct bootmem_data *bdata; spinlock_t node_size_lock; unsigned long node_start_pfn; unsigned long node_present_pages; unsigned long node_spanned_pages; int node_id; nodemask_t reclaim_nodes; wait_queue_head_t kswapd_wait; wait_queue_head_t pfmemalloc_wait; struct task_struct *kswapd; int kswapd_max_order; enum zone_type classzone_idx; spinlock_t numabalancing_migrate_lock; unsigned long numabalancing_migrate_next_window; unsigned long numabalancing_migrate_nr_pages; } pg_data_t;
node_present_pages  macro  include/linux/mmzone.h  745  #define node_present_pages(nid) (NODE_DATA(nid)->node_present_pages)
node_spanned_pages  macro  include/linux/mmzone.h  746  #define node_spanned_pages(nid) (NODE_DATA(nid)->node_spanned_pages)
pgdat_page_nr  macro  include/linux/mmzone.h  750  #define pgdat_page_nr(pgdat,pagenr) pfn_to_page((pgdat)->node_start_pfn + (pagenr))
nid_page_nr  macro  include/linux/mmzone.h  752  #define nid_page_nr(nid,pagenr) pgdat_page_nr(NODE_DATA(nid),(pagenr))
node_start_pfn  macro  include/linux/mmzone.h  754  #define node_start_pfn(nid) (NODE_DATA(nid)->node_start_pfn)
node_end_pfn  macro  include/linux/mmzone.h  756  #define node_end_pfn(nid) ({ pg_data_t *__pgdat = NODE_DATA(nid); __pgdat->node_start_pfn + __pgdat->node_spanned_pages; })
build_all_zonelists  prototype  include/linux/mmzone.h  764  void build_all_zonelists(pg_data_t *pgdat,struct zone *zone);
wakeup_kswapd  prototype  include/linux/mmzone.h  765  void wakeup_kswapd(struct zone *zone,int order,enum zone_type classzone_idx);
zone_watermark_ok  prototype  include/linux/mmzone.h  766  bool zone_watermark_ok(struct zone *z,int order,unsigned long mark,int classzone_idx, int alloc_flags);
zone_watermark_ok_safe  prototype  include/linux/mmzone.h  768  bool zone_watermark_ok_safe(struct zone *z,int order,unsigned long mark,int classzone_idx, int alloc_flags);
memmap_context  enum  include/linux/mmzone.h  770  enum memmap_context { MEMMAP_EARLY, MEMMAP_HOTPLUG, };
init_currently_empty_zone  prototype  include/linux/mmzone.h  774  extern int init_currently_empty_zone(struct zone *zone,unsigned long start_pfn,unsigned long size,enum memmap_context context);
lruvec_init  prototype  include/linux/mmzone.h  778  extern void lruvec_init(struct lruvec *lruvec);
lruvec_zone  function  include/linux/mmzone.h  780  static inline struct zone *lruvec_zone(struct lruvec *lruvec)
memory_present  prototype  include/linux/mmzone.h  1224  void memory_present(int nid,unsigned long start,unsigned long end);
local_memory_node  function  include/linux/mmzone.h  798  static inline int local_memory_node(int node_id) { return node_id; };
node_memmap_size_bytes  prototype  include/linux/mmzone.h  1225  unsigned long __init node_memmap_size_bytes(int,unsigned long,unsigned long);
zone_idx  macro  include/linux/mmzone.h  808  #define zone_idx(zone) ((zone) - (zone)->zone_pgdat->node_zones)
populated_zone  function  include/linux/mmzone.h  810  static inline int populated_zone(struct zone *zone)
zone_movable_is_highmem  function  include/linux/mmzone.h  817  static inline int zone_movable_is_highmem(void)
is_highmem_idx  function  include/linux/mmzone.h  826  static inline int is_highmem_idx(enum zone_type idx)
is_normal_idx  function  include/linux/mmzone.h  836  static inline int is_normal_idx(enum zone_type idx)
is_highmem  function  include/linux/mmzone.h  847  static inline int is_highmem(struct zone *zone)
is_normal  function  include/linux/mmzone.h  859  static inline int is_normal(struct zone *zone)
is_dma32  function  include/linux/mmzone.h  864  static inline int is_dma32(struct zone *zone)
is_dma  function  include/linux/mmzone.h  873  static inline int is_dma(struct zone *zone)
min_free_kbytes_sysctl_handler  prototype  include/linux/mmzone.h  884  int min_free_kbytes_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
lowmem_reserve_ratio_sysctl_handler  prototype  include/linux/mmzone.h  887  int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
percpu_pagelist_fraction_sysctl_handler  prototype  include/linux/mmzone.h  889  int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
sysctl_min_unmapped_ratio_sysctl_handler  prototype  include/linux/mmzone.h  891  int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
sysctl_min_slab_ratio_sysctl_handler  prototype  include/linux/mmzone.h  893  int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
numa_zonelist_order_handler  prototype  include/linux/mmzone.h  896  extern int numa_zonelist_order_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
NUMA_ZONELIST_ORDER_LEN  macro  include/linux/mmzone.h  899  #define NUMA_ZONELIST_ORDER_LEN 16
NODE_DATA  macro  include/linux/mmzone.h  904  #define NODE_DATA(nid) (&contig_page_data)
NODE_MEM_MAP  macro  include/linux/mmzone.h  905  #define NODE_MEM_MAP(nid) mem_map
first_online_pgdat  prototype  include/linux/mmzone.h  913  extern struct pglist_data *first_online_pgdat(void);
next_online_pgdat  prototype  include/linux/mmzone.h  914  extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
next_zone  prototype  include/linux/mmzone.h  915  extern struct zone *next_zone(struct zone *zone);
for_each_online_pgdat  macro  include/linux/mmzone.h  921  #define for_each_online_pgdat(pgdat) for (pgdat = first_online_pgdat(); pgdat; pgdat = next_online_pgdat(pgdat))
for_each_zone  macro  include/linux/mmzone.h  932  #define for_each_zone(zone) for (zone = (first_online_pgdat())->node_zones; zone; zone = next_zone(zone))
for_each_populated_zone  macro  include/linux/mmzone.h  937  #define for_each_populated_zone(zone) for (zone = (first_online_pgdat())->node_zones; zone; zone = next_zone(zone)) if (!populated_zone(zone)) ; /* do nothing */ else
zonelist_zone  function  include/linux/mmzone.h  945  static inline struct zone *zonelist_zone(struct zoneref *zoneref)
zonelist_zone_idx  function  include/linux/mmzone.h  950  static inline int zonelist_zone_idx(struct zoneref *zoneref)
zonelist_node_idx  function  include/linux/mmzone.h  955  static inline int zonelist_node_idx(struct zoneref *zoneref)
next_zones_zonelist  prototype  include/linux/mmzone.h  978  struct zoneref *next_zones_zonelist(struct zoneref *z,enum zone_type highest_zoneidx,nodemask_t *nodes,struct zone **zone);
first_zones_zonelist  function  include/linux/mmzone.h  995  static inline struct zoneref *first_zones_zonelist(struct zonelist *zonelist,enum zone_type highest_zoneidx,nodemask_t *nodes,struct zone **zone)
for_each_zone_zonelist_nodemask  macro  include/linux/mmzone.h  1015  #define for_each_zone_zonelist_nodemask(zone,z,zlist,highidx,nodemask) for (z = first_zones_zonelist(zlist, highidx, nodemask, &zone); zone; z = next_zones_zonelist(++z, highidx, nodemask, &zone)) 
for_each_zone_zonelist  macro  include/linux/mmzone.h  1029  #define for_each_zone_zonelist(zone,z,zlist,highidx) for_each_zone_zonelist_nodemask(zone, z, zlist, highidx, NULL)
early_pfn_to_nid  prototype  include/linux/mm.h  1372  extern int __meminit early_pfn_to_nid(unsigned long pfn);
pfn_to_nid  macro  include/linux/mmzone.h  1204  #define pfn_to_nid(pfn) (0)
SECTIONS_SHIFT  macro  include/linux/mmzone.h  1056  #define SECTIONS_SHIFT (MAX_PHYSMEM_BITS - SECTION_SIZE_BITS)
PA_SECTION_SHIFT  macro  include/linux/mmzone.h  1058  #define PA_SECTION_SHIFT (SECTION_SIZE_BITS)
PFN_SECTION_SHIFT  macro  include/linux/mmzone.h  1059  #define PFN_SECTION_SHIFT (SECTION_SIZE_BITS - PAGE_SHIFT)
NR_MEM_SECTIONS  macro  include/linux/mmzone.h  1061  #define NR_MEM_SECTIONS (1UL << SECTIONS_SHIFT)
PAGES_PER_SECTION  macro  include/linux/mmzone.h  1063  #define PAGES_PER_SECTION (1UL << PFN_SECTION_SHIFT)
PAGE_SECTION_MASK  macro  include/linux/mmzone.h  1064  #define PAGE_SECTION_MASK (~(PAGES_PER_SECTION-1))
SECTION_BLOCKFLAGS_BITS  macro  include/linux/mmzone.h  1066  #define SECTION_BLOCKFLAGS_BITS ((1UL << (PFN_SECTION_SHIFT - pageblock_order)) * NR_PAGEBLOCK_BITS)
pfn_to_section_nr  macro  include/linux/mmzone.h  1073  #define pfn_to_section_nr(pfn) ((pfn) >> PFN_SECTION_SHIFT)
section_nr_to_pfn  macro  include/linux/mmzone.h  1074  #define section_nr_to_pfn(sec) ((sec) << PFN_SECTION_SHIFT)
SECTION_ALIGN_UP  macro  include/linux/mmzone.h  1076  #define SECTION_ALIGN_UP(pfn) (((pfn) + PAGES_PER_SECTION - 1) & PAGE_SECTION_MASK)
SECTION_ALIGN_DOWN  macro  include/linux/mmzone.h  1077  #define SECTION_ALIGN_DOWN(pfn) ((pfn) & PAGE_SECTION_MASK)
mem_section  struct  include/linux/mmzone.h  1081  struct mem_section { unsigned long section_mem_map; unsigned long *pageblock_flags; struct page_cgroup *page_cgroup; unsigned long pad; };
SECTIONS_PER_ROOT  macro  include/linux/mmzone.h  1111  #define SECTIONS_PER_ROOT 1
SECTION_NR_TO_ROOT  macro  include/linux/mmzone.h  1114  #define SECTION_NR_TO_ROOT(sec) ((sec) / SECTIONS_PER_ROOT)
NR_SECTION_ROOTS  macro  include/linux/mmzone.h  1115  #define NR_SECTION_ROOTS DIV_ROUND_UP(NR_MEM_SECTIONS,SECTIONS_PER_ROOT)
SECTION_ROOT_MASK  macro  include/linux/mmzone.h  1116  #define SECTION_ROOT_MASK (SECTIONS_PER_ROOT - 1)
__nr_to_section  function  include/linux/mmzone.h  1124  static inline struct mem_section *__nr_to_section(unsigned long nr)
__section_nr  prototype  include/linux/mmzone.h  1130  extern int __section_nr(struct mem_section* ms);
usemap_size  prototype  include/linux/mmzone.h  1131  extern unsigned long usemap_size(void);
SECTION_MARKED_PRESENT  macro  include/linux/mmzone.h  1138  #define SECTION_MARKED_PRESENT (1UL<<0)
SECTION_HAS_MEM_MAP  macro  include/linux/mmzone.h  1139  #define SECTION_HAS_MEM_MAP (1UL<<1)
SECTION_MAP_LAST_BIT  macro  include/linux/mmzone.h  1140  #define SECTION_MAP_LAST_BIT (1UL<<2)
SECTION_MAP_MASK  macro  include/linux/mmzone.h  1141  #define SECTION_MAP_MASK (~(SECTION_MAP_LAST_BIT-1))
SECTION_NID_SHIFT  macro  include/linux/mmzone.h  1142  #define SECTION_NID_SHIFT 2
__section_mem_map_addr  function  include/linux/mmzone.h  1144  static inline struct page *__section_mem_map_addr(struct mem_section *section)
present_section  function  include/linux/mmzone.h  1151  static inline int present_section(struct mem_section *section)
present_section_nr  function  include/linux/mmzone.h  1156  static inline int present_section_nr(unsigned long nr)
valid_section  function  include/linux/mmzone.h  1161  static inline int valid_section(struct mem_section *section)
valid_section_nr  function  include/linux/mmzone.h  1166  static inline int valid_section_nr(unsigned long nr)
__pfn_to_section  function  include/linux/mmzone.h  1171  static inline struct mem_section *__pfn_to_section(unsigned long pfn)
pfn_valid  function  include/linux/mmzone.h  1177  static inline int pfn_valid(unsigned long pfn)
pfn_present  function  include/linux/mmzone.h  1185  static inline int pfn_present(unsigned long pfn)
early_pfn_valid  macro  include/linux/mmzone.h  1221  #define early_pfn_valid(pfn) (1)
sparse_init  macro  include/linux/mmzone.h  1210  #define sparse_init() do {} while (0)
sparse_index_init  macro  include/linux/mmzone.h  1211  #define sparse_index_init(_sec,_nid) do {} while (0)
early_pfn_in_nid  macro  include/linux/mmzone.h  1217  #define early_pfn_in_nid(pfn,nid) (1)
pfn_valid_within  macro  include/linux/mmzone.h  1236  #define pfn_valid_within(pfn) (1)
memmap_valid_within  function  include/linux/mmzone.h  1258  static inline int memmap_valid_within(unsigned long pfn,struct page *page, struct zone *zone)
_LINUX_TOPOLOGY_H  macro  include/linux/topology.h  28  #define _LINUX_TOPOLOGY_H
node_has_online_mem  macro  include/linux/topology.h  38  #define node_has_online_mem(nid) (1)
nr_cpus_node  macro  include/linux/topology.h  42  #define nr_cpus_node(node) cpumask_weight(cpumask_of_node(node))
for_each_node_with_cpus  macro  include/linux/topology.h  45  #define for_each_node_with_cpus(node) for_each_online_node(node) if (nr_cpus_node(node))
arch_update_cpu_topology  prototype  include/linux/topology.h  49  int arch_update_cpu_topology(void);
LOCAL_DISTANCE  macro  include/linux/topology.h  52  #define LOCAL_DISTANCE 10
REMOTE_DISTANCE  macro  include/linux/topology.h  53  #define REMOTE_DISTANCE 20
node_distance  macro  include/linux/topology.h  55  #define node_distance(from,to) ((from) == (to) ? LOCAL_DISTANCE : REMOTE_DISTANCE)
RECLAIM_DISTANCE  macro  include/linux/topology.h  63  #define RECLAIM_DISTANCE 30
PENALTY_FOR_NODE_WITH_CPUS  macro  include/linux/topology.h  66  #define PENALTY_FOR_NODE_WITH_CPUS (1)
ARCH_HAS_SCHED_WAKE_IDLE  macro  include/linux/topology.h  85  #define ARCH_HAS_SCHED_WAKE_IDLE
SD_SIBLING_INIT  macro  include/linux/topology.h  88  #define SD_SIBLING_INIT (struct sched_domain) { .min_interval		= 1, .max_interval		= 2, .busy_factor		= 64, .imbalance_pct		= 110, .flags			= 1*SD_LOAD_BALANCE | 1*SD_BALANCE_NEWIDLE | 1*SD_BALANCE_EXEC | 1*SD_BALANCE_FORK | 0*SD_BALANCE_WAKE | 1*SD_WAKE_AFFINE | 1*SD_SHARE_CPUPOWER | 1*SD_SHARE_PKG_RESOURCES | 0*SD_SERIALIZE | 0*SD_PREFER_SIBLING | arch_sd_sibling_asym_packing() , .last_balance		= jiffies, .balance_interval	= 1, .smt_gain		= 1178,	/* 15% */ }
SD_MC_INIT  macro  include/linux/topology.h  116  #define SD_MC_INIT (struct sched_domain) { .min_interval		= 1, .max_interval		= 4, .busy_factor		= 64, .imbalance_pct		= 125, .cache_nice_tries	= 1, .busy_idx		= 2, .wake_idx		= 0, .forkexec_idx		= 0, .flags			= 1*SD_LOAD_BALANCE | 1*SD_BALANCE_NEWIDLE | 1*SD_BALANCE_EXEC | 1*SD_BALANCE_FORK | 0*SD_BALANCE_WAKE | 1*SD_WAKE_AFFINE | 0*SD_SHARE_CPUPOWER | 1*SD_SHARE_PKG_RESOURCES | 0*SD_SERIALIZE , .last_balance		= jiffies, .balance_interval	= 1, }
SD_CPU_INIT  macro  include/linux/topology.h  144  #define SD_CPU_INIT (struct sched_domain) { .min_interval		= 1, .max_interval		= 4, .busy_factor		= 64, .imbalance_pct		= 125, .cache_nice_tries	= 1, .busy_idx		= 2, .idle_idx		= 1, .newidle_idx		= 0, .wake_idx		= 0, .forkexec_idx		= 0, .flags			= 1*SD_LOAD_BALANCE | 1*SD_BALANCE_NEWIDLE | 1*SD_BALANCE_EXEC | 1*SD_BALANCE_FORK | 0*SD_BALANCE_WAKE | 1*SD_WAKE_AFFINE | 0*SD_SHARE_CPUPOWER | 0*SD_SHARE_PKG_RESOURCES | 0*SD_SERIALIZE | 1*SD_PREFER_SIBLING , .last_balance		= jiffies, .balance_interval	= 1, }
numa_node_id  function  include/linux/topology.h  214  static inline int numa_node_id(void)
cpu_to_node  function  include/linux/topology.h  190  static inline int cpu_to_node(int cpu)
set_numa_node  function  include/linux/topology.h  197  static inline void set_numa_node(int node)
set_cpu_numa_node  function  include/linux/topology.h  204  static inline void set_cpu_numa_node(int cpu,int node)
set_numa_mem  function  include/linux/topology.h  232  static inline void set_numa_mem(int node)
numa_mem_id  function  include/linux/topology.h  264  static inline int numa_mem_id(void)
cpu_to_mem  function  include/linux/topology.h  271  static inline int cpu_to_mem(int cpu)
set_cpu_numa_mem  function  include/linux/topology.h  254  static inline void set_cpu_numa_mem(int cpu,int node)
topology_physical_package_id  macro  include/linux/topology.h  280  #define topology_physical_package_id(cpu) ((void)(cpu),-1)
topology_core_id  macro  include/linux/topology.h  283  #define topology_core_id(cpu) ((void)(cpu),0)
topology_thread_cpumask  macro  include/linux/topology.h  286  #define topology_thread_cpumask(cpu) cpumask_of(cpu)
topology_core_cpumask  macro  include/linux/topology.h  289  #define topology_core_cpumask(cpu) cpumask_of(cpu)
LINUX_MM_DEBUG_H  macro  include/linux/mmdebug.h  2  #define LINUX_MM_DEBUG_H 1
VM_BUG_ON  macro  include/linux/mmdebug.h  7  #define VM_BUG_ON(cond) BUILD_BUG_ON_INVALID(cond)
VIRTUAL_BUG_ON  macro  include/linux/mmdebug.h  13  #define VIRTUAL_BUG_ON(cond) do { } while (0)
__KMEMLEAK_H  macro  include/linux/kmemleak.h  22  #define __KMEMLEAK_H
kmemleak_alloc_recursive  function  include/linux/kmemleak.h  68  static inline void kmemleak_alloc_recursive(const void *ptr,size_t size,int min_count, unsigned long flags,gfp_t gfp)
kmemleak_free_recursive  function  include/linux/kmemleak.h  82  static inline void kmemleak_free_recursive(const void *ptr,unsigned long flags)
kmemleak_erase  function  include/linux/kmemleak.h  97  static inline void kmemleak_erase(void **ptr)
kmemleak_init  function  include/linux/kmemleak.h  61  static inline void kmemleak_init(void)
kmemleak_alloc  function  include/linux/kmemleak.h  64  static inline void kmemleak_alloc(const void *ptr,size_t size,int min_count,gfp_t gfp)
kmemleak_alloc_percpu  function  include/linux/kmemleak.h  73  static inline void kmemleak_alloc_percpu(const void __percpu *ptr,size_t size)
kmemleak_free  function  include/linux/kmemleak.h  76  static inline void kmemleak_free(const void *ptr)
kmemleak_free_part  function  include/linux/kmemleak.h  79  static inline void kmemleak_free_part(const void *ptr,size_t size)
kmemleak_free_percpu  function  include/linux/kmemleak.h  85  static inline void kmemleak_free_percpu(const void __percpu *ptr)
kmemleak_not_leak  function  include/linux/kmemleak.h  88  static inline void kmemleak_not_leak(const void *ptr)
kmemleak_ignore  function  include/linux/kmemleak.h  91  static inline void kmemleak_ignore(const void *ptr)
kmemleak_scan_area  function  include/linux/kmemleak.h  94  static inline void kmemleak_scan_area(const void *ptr,size_t size,gfp_t gfp)
kmemleak_no_scan  function  include/linux/kmemleak.h  100  static inline void kmemleak_no_scan(const void *ptr)
_LINUX_NUMA_H  macro  include/linux/numa.h  2  #define _LINUX_NUMA_H
NODES_SHIFT  macro  include/linux/numa.h  8  #define NODES_SHIFT 0
MAX_NUMNODES  macro  include/linux/numa.h  11  #define MAX_NUMNODES (1 << NODES_SHIFT)
NUMA_NO_NODE  macro  include/linux/numa.h  13  #define NUMA_NO_NODE (-1)
_ASM_X86_PAGE_H  macro  arch/x86/include/asm/page.h  2  #define _ASM_X86_PAGE_H
clear_user_page  function  arch/x86/include/asm/page.h  20  static inline void clear_user_page(void *page,unsigned long vaddr,struct page *pg)
copy_user_page  function  arch/x86/include/asm/page.h  26  static inline void copy_user_page(void *to,void *from,unsigned long vaddr,struct page *topage)
__alloc_zeroed_user_highpage  macro  arch/x86/include/asm/page.h  32  #define __alloc_zeroed_user_highpage(movableflags,vma,vaddr) alloc_page_vma(GFP_HIGHUSER | __GFP_ZERO | movableflags, vma, vaddr)
__HAVE_ARCH_ALLOC_ZEROED_USER_HIGHPAGE  macro  arch/x86/include/asm/page.h  34  #define __HAVE_ARCH_ALLOC_ZEROED_USER_HIGHPAGE
__pa  macro  arch/x86/include/asm/page.h  36  #define __pa(x) __phys_addr((unsigned long)(x))
__pa_nodebug  macro  arch/x86/include/asm/page.h  37  #define __pa_nodebug(x) __phys_addr_nodebug((unsigned long)(x))
__pa_symbol  macro  arch/x86/include/asm/page.h  47  #define __pa_symbol(x) __pa(__phys_reloc_hide((unsigned long)(x)))
__va  macro  arch/x86/include/asm/page.h  49  #define __va(x) ((void *)((unsigned long)(x)+PAGE_OFFSET))
__boot_va  macro  arch/x86/include/asm/page.h  51  #define __boot_va(x) __va(x)
__boot_pa  macro  arch/x86/include/asm/page.h  52  #define __boot_pa(x) __pa(x)
virt_to_page  macro  arch/x86/include/asm/page.h  58  #define virt_to_page(kaddr) pfn_to_page(__pa(kaddr) >> PAGE_SHIFT)
pfn_to_kaddr  macro  arch/x86/include/asm/page.h  59  #define pfn_to_kaddr(pfn) __va((pfn) << PAGE_SHIFT)
__virt_addr_valid  prototype  arch/x86/include/asm/page.h  60  extern bool __virt_addr_valid(unsigned long kaddr);
virt_addr_valid  macro  arch/x86/include/asm/page.h  61  #define virt_addr_valid(kaddr) __virt_addr_valid((unsigned long) (kaddr))
__HAVE_ARCH_GATE_AREA  macro  arch/x86/include/asm/page.h  68  #define __HAVE_ARCH_GATE_AREA 1
_LINUX_DEBUGOBJECTS_H  macro  include/linux/debugobjects.h  2  #define _LINUX_DEBUGOBJECTS_H
debug_obj_state  enum  include/linux/debugobjects.h  7  enum debug_obj_state { ODEBUG_STATE_NONE, ODEBUG_STATE_INIT, ODEBUG_STATE_INACTIVE, ODEBUG_STATE_ACTIVE, ODEBUG_STATE_DESTROYED, ODEBUG_STATE_NOTAVAILABLE, ODEBUG_STATE_MAX, };
debug_obj  struct  include/linux/debugobjects.h  27  struct debug_obj { struct hlist_node node; enum debug_obj_state state; unsigned int astate; void *object; struct debug_obj_descr *descr; };
debug_obj_descr  struct  include/linux/debugobjects.h  52  struct debug_obj_descr { const char *name; void *(*debug_hint) (void *addr); int (*fixup_init) (void *addr, enum debug_obj_state state); int (*fixup_activate) (void *addr, enum debug_obj_state state); int (*fixup_destroy) (void *addr, enum debug_obj_state state); int (*fixup_free) (void *addr, enum debug_obj_state state); int (*fixup_assert_init)(void *addr, enum debug_obj_state state); };
debug_object_init  function  include/linux/debugobjects.h  85  debug_object_init (void *addr,struct debug_obj_descr *descr) { }
debug_object_init_on_stack  function  include/linux/debugobjects.h  87  debug_object_init_on_stack(void *addr,struct debug_obj_descr *descr) { }
debug_object_activate  function  include/linux/debugobjects.h  89  debug_object_activate (void *addr,struct debug_obj_descr *descr) { }
debug_object_deactivate  function  include/linux/debugobjects.h  91  debug_object_deactivate(void *addr,struct debug_obj_descr *descr) { }
debug_object_destroy  function  include/linux/debugobjects.h  93  debug_object_destroy (void *addr,struct debug_obj_descr *descr) { }
debug_object_free  function  include/linux/debugobjects.h  95  debug_object_free (void *addr,struct debug_obj_descr *descr) { }
debug_object_assert_init  function  include/linux/debugobjects.h  97  debug_object_assert_init(void *addr,struct debug_obj_descr *descr) { }
debug_object_active_state  prototype  include/linux/debugobjects.h  78  debug_object_active_state(void *addr,struct debug_obj_descr *descr,unsigned int expect, unsigned int next);
debug_objects_early_init  function  include/linux/debugobjects.h  99  static inline void debug_objects_early_init(void) { }
debug_objects_mem_init  function  include/linux/debugobjects.h  100  static inline void debug_objects_mem_init(void) { }
debug_check_no_obj_freed  function  include/linux/debugobjects.h  107  debug_check_no_obj_freed(const void *address,unsigned long size) { }
__LINUX_DEBUG_LOCKING_H  macro  include/linux/debug_locks.h  2  #define __LINUX_DEBUG_LOCKING_H
__debug_locks_off  function  include/linux/debug_locks.h  14  static inline int __debug_locks_off(void)
debug_locks_off  prototype  include/linux/debug_locks.h  22  extern int debug_locks_off(void);
DEBUG_LOCKS_WARN_ON  macro  include/linux/debug_locks.h  24  #define DEBUG_LOCKS_WARN_ON(c) ({ int __ret = 0; if (!oops_in_progress && unlikely(c)) { if (debug_locks_off() && !debug_locks_silent) WARN_ON(1); __ret = 1; } __ret; })
SMP_DEBUG_LOCKS_WARN_ON  macro  include/linux/debug_locks.h  39  # define SMP_DEBUG_LOCKS_WARN_ON(c) do { } while (0)
locking_selftest  macro  include/linux/debug_locks.h  45  # define locking_selftest() do { } while (0)
debug_show_all_locks  function  include/linux/debug_locks.h  56  static inline void debug_show_all_locks(void)
debug_show_held_locks  function  include/linux/debug_locks.h  60  static inline void debug_show_held_locks(struct task_struct *task)
debug_check_no_locks_freed  function  include/linux/debug_locks.h  65  debug_check_no_locks_freed(const void *from,unsigned long len)
debug_check_no_locks_held  function  include/linux/debug_locks.h  70  debug_check_no_locks_held(struct task_struct *task)
__LINUX_STACKTRACE_H  macro  include/linux/stacktrace.h  2  #define __LINUX_STACKTRACE_H
stack_trace  struct  include/linux/stacktrace.h  10  struct stack_trace { unsigned int nr_entries, max_entries; unsigned long *entries; int skip; };
save_stack_trace  macro  include/linux/stacktrace.h  31  # define save_stack_trace(trace) do { } while (0)
save_stack_trace_regs  prototype  include/linux/stacktrace.h  17  extern void save_stack_trace_regs(struct pt_regs *regs,struct stack_trace *trace);
save_stack_trace_tsk  macro  include/linux/stacktrace.h  32  # define save_stack_trace_tsk(tsk,trace) do { } while (0)
print_stack_trace  macro  include/linux/stacktrace.h  34  # define print_stack_trace(trace,spaces) do { } while (0)
save_stack_trace_user  macro  include/linux/stacktrace.h  33  # define save_stack_trace_user(trace) do { } while (0)
_LINUX_KLIST_H  macro  include/linux/klist.h  13  #define _LINUX_KLIST_H
klist  struct  include/linux/klist.h  20  struct klist { spinlock_t k_lock; struct list_head k_list; void (*get)(struct klist_node *); void (*put)(struct klist_node *); } __attribute__ ((aligned (sizeof(void *))));
KLIST_INIT  macro  include/linux/klist.h  27  #define KLIST_INIT(_name,_get,_put) { .k_lock	= __SPIN_LOCK_UNLOCKED(_name.k_lock), .k_list	= LIST_HEAD_INIT(_name.k_list), .get		= _get, .put		= _put, }
DEFINE_KLIST  macro  include/linux/klist.h  33  #define DEFINE_KLIST(_name,_get,_put) struct klist _name = KLIST_INIT(_name, _get, _put)
klist_init  prototype  include/linux/klist.h  36  extern void klist_init(struct klist *k,void (*get)(struct klist_node *),void (*put)(struct klist_node *));
klist_node  struct  include/linux/klist.h  39  struct klist_node { void *n_klist; struct list_head n_node; struct kref n_ref; };
klist_add_tail  prototype  include/linux/klist.h  45  extern void klist_add_tail(struct klist_node *n,struct klist *k);
klist_add_head  prototype  include/linux/klist.h  46  extern void klist_add_head(struct klist_node *n,struct klist *k);
klist_add_after  prototype  include/linux/klist.h  47  extern void klist_add_after(struct klist_node *n,struct klist_node *pos);
klist_add_before  prototype  include/linux/klist.h  48  extern void klist_add_before(struct klist_node *n,struct klist_node *pos);
klist_del  prototype  include/linux/klist.h  50  extern void klist_del(struct klist_node *n);
klist_remove  prototype  include/linux/klist.h  51  extern void klist_remove(struct klist_node *n);
klist_node_attached  prototype  include/linux/klist.h  53  extern int klist_node_attached(struct klist_node *n);
klist_iter  struct  include/linux/klist.h  56  struct klist_iter { struct klist *i_klist; struct klist_node *i_cur; };
klist_iter_init  prototype  include/linux/klist.h  62  extern void klist_iter_init(struct klist *k,struct klist_iter *i);
klist_iter_init_node  prototype  include/linux/klist.h  63  extern void klist_iter_init_node(struct klist *k,struct klist_iter *i,struct klist_node *n);
klist_iter_exit  prototype  include/linux/klist.h  65  extern void klist_iter_exit(struct klist_iter *i);
klist_next  prototype  include/linux/klist.h  66  extern struct klist_node *klist_next(struct klist_iter *i);
_LINUX_PM_H  macro  include/linux/pm.h  22  #define _LINUX_PM_H
power_group_name  macro  include/linux/pm.h  47  #define power_group_name NULL
pm_message  struct  include/linux/pm.h  50  typedef struct pm_message { int event; } pm_message_t;
pm_message_t  struct  include/linux/pm.h  50  typedef struct pm_message { int event; } pm_message_t;
dev_pm_ops  struct  include/linux/pm.h  264  struct dev_pm_ops { int (*prepare)(struct device *dev); void (*complete)(struct device *dev); int (*suspend)(struct device *dev); int (*resume)(struct device *dev); int (*freeze)(struct device *dev); int (*thaw)(struct device *dev); int (*poweroff)(struct device *dev); int (*restore)(struct device *dev); int (*suspend_late)(struct device *dev); int (*resume_early)(struct device *dev); int (*freeze_late)(struct device *dev); int (*thaw_early)(struct device *dev); int (*poweroff_late)(struct device *dev); int (*restore_early)(struct device *dev); int (*suspend_noirq)(struct device *dev); int (*resume_noirq)(struct device *dev); int (*freeze_noirq)(struct device *dev); int (*thaw_noirq)(struct device *dev); int (*poweroff_noirq)(struct device *dev); int (*restore_noirq)(struct device *dev); int (*runtime_suspend)(struct device *dev); int (*runtime_resume)(struct device *dev); int (*runtime_idle)(struct device *dev); };
SET_SYSTEM_SLEEP_PM_OPS  macro  include/linux/pm.h  299  #define SET_SYSTEM_SLEEP_PM_OPS(suspend_fn,resume_fn)
SET_RUNTIME_PM_OPS  macro  include/linux/pm.h  308  #define SET_RUNTIME_PM_OPS(suspend_fn,resume_fn,idle_fn)
SIMPLE_DEV_PM_OPS  macro  include/linux/pm.h  315  #define SIMPLE_DEV_PM_OPS(name,suspend_fn,resume_fn) const struct dev_pm_ops name = { SET_SYSTEM_SLEEP_PM_OPS(suspend_fn, resume_fn) }
UNIVERSAL_DEV_PM_OPS  macro  include/linux/pm.h  333  #define UNIVERSAL_DEV_PM_OPS(name,suspend_fn,resume_fn,idle_fn) const struct dev_pm_ops name = { SET_SYSTEM_SLEEP_PM_OPS(suspend_fn, resume_fn) SET_RUNTIME_PM_OPS(suspend_fn, resume_fn, idle_fn) }
PM_EVENT_INVALID  macro  include/linux/pm.h  391  #define PM_EVENT_INVALID (-1)
PM_EVENT_ON  macro  include/linux/pm.h  392  #define PM_EVENT_ON 0x0000
PM_EVENT_FREEZE  macro  include/linux/pm.h  393  #define PM_EVENT_FREEZE 0x0001
PM_EVENT_SUSPEND  macro  include/linux/pm.h  394  #define PM_EVENT_SUSPEND 0x0002
PM_EVENT_HIBERNATE  macro  include/linux/pm.h  395  #define PM_EVENT_HIBERNATE 0x0004
PM_EVENT_QUIESCE  macro  include/linux/pm.h  396  #define PM_EVENT_QUIESCE 0x0008
PM_EVENT_RESUME  macro  include/linux/pm.h  397  #define PM_EVENT_RESUME 0x0010
PM_EVENT_THAW  macro  include/linux/pm.h  398  #define PM_EVENT_THAW 0x0020
PM_EVENT_RESTORE  macro  include/linux/pm.h  399  #define PM_EVENT_RESTORE 0x0040
PM_EVENT_RECOVER  macro  include/linux/pm.h  400  #define PM_EVENT_RECOVER 0x0080
PM_EVENT_USER  macro  include/linux/pm.h  401  #define PM_EVENT_USER 0x0100
PM_EVENT_REMOTE  macro  include/linux/pm.h  402  #define PM_EVENT_REMOTE 0x0200
PM_EVENT_AUTO  macro  include/linux/pm.h  403  #define PM_EVENT_AUTO 0x0400
PM_EVENT_SLEEP  macro  include/linux/pm.h  405  #define PM_EVENT_SLEEP (PM_EVENT_SUSPEND | PM_EVENT_HIBERNATE)
PM_EVENT_USER_SUSPEND  macro  include/linux/pm.h  406  #define PM_EVENT_USER_SUSPEND (PM_EVENT_USER | PM_EVENT_SUSPEND)
PM_EVENT_USER_RESUME  macro  include/linux/pm.h  407  #define PM_EVENT_USER_RESUME (PM_EVENT_USER | PM_EVENT_RESUME)
PM_EVENT_REMOTE_RESUME  macro  include/linux/pm.h  408  #define PM_EVENT_REMOTE_RESUME (PM_EVENT_REMOTE | PM_EVENT_RESUME)
PM_EVENT_AUTO_SUSPEND  macro  include/linux/pm.h  409  #define PM_EVENT_AUTO_SUSPEND (PM_EVENT_AUTO | PM_EVENT_SUSPEND)
PM_EVENT_AUTO_RESUME  macro  include/linux/pm.h  410  #define PM_EVENT_AUTO_RESUME (PM_EVENT_AUTO | PM_EVENT_RESUME)
PMSG_INVALID  macro  include/linux/pm.h  412  #define PMSG_INVALID ((struct pm_message){ .event = PM_EVENT_INVALID,})
PMSG_ON  macro  include/linux/pm.h  413  #define PMSG_ON ((struct pm_message){ .event = PM_EVENT_ON,})
PMSG_FREEZE  macro  include/linux/pm.h  414  #define PMSG_FREEZE ((struct pm_message){ .event = PM_EVENT_FREEZE,})
PMSG_QUIESCE  macro  include/linux/pm.h  415  #define PMSG_QUIESCE ((struct pm_message){ .event = PM_EVENT_QUIESCE,})
PMSG_SUSPEND  macro  include/linux/pm.h  416  #define PMSG_SUSPEND ((struct pm_message){ .event = PM_EVENT_SUSPEND,})
PMSG_HIBERNATE  macro  include/linux/pm.h  417  #define PMSG_HIBERNATE ((struct pm_message){ .event = PM_EVENT_HIBERNATE,})
PMSG_RESUME  macro  include/linux/pm.h  418  #define PMSG_RESUME ((struct pm_message){ .event = PM_EVENT_RESUME,})
PMSG_THAW  macro  include/linux/pm.h  419  #define PMSG_THAW ((struct pm_message){ .event = PM_EVENT_THAW,})
PMSG_RESTORE  macro  include/linux/pm.h  420  #define PMSG_RESTORE ((struct pm_message){ .event = PM_EVENT_RESTORE,})
PMSG_RECOVER  macro  include/linux/pm.h  421  #define PMSG_RECOVER ((struct pm_message){ .event = PM_EVENT_RECOVER,})
PMSG_USER_SUSPEND  macro  include/linux/pm.h  422  #define PMSG_USER_SUSPEND ((struct pm_message) { .event = PM_EVENT_USER_SUSPEND, })
PMSG_USER_RESUME  macro  include/linux/pm.h  424  #define PMSG_USER_RESUME ((struct pm_message) { .event = PM_EVENT_USER_RESUME, })
PMSG_REMOTE_RESUME  macro  include/linux/pm.h  426  #define PMSG_REMOTE_RESUME ((struct pm_message) { .event = PM_EVENT_REMOTE_RESUME, })
PMSG_AUTO_SUSPEND  macro  include/linux/pm.h  428  #define PMSG_AUTO_SUSPEND ((struct pm_message) { .event = PM_EVENT_AUTO_SUSPEND, })
PMSG_AUTO_RESUME  macro  include/linux/pm.h  430  #define PMSG_AUTO_RESUME ((struct pm_message) { .event = PM_EVENT_AUTO_RESUME, })
PMSG_IS_AUTO  macro  include/linux/pm.h  433  #define PMSG_IS_AUTO(msg) (((msg).event & PM_EVENT_AUTO) != 0)
rpm_status  enum  include/linux/pm.h  458  enum rpm_status { RPM_ACTIVE = 0, RPM_RESUMING, RPM_SUSPENDED, RPM_SUSPENDING, };
rpm_request  enum  include/linux/pm.h  480  enum rpm_request { RPM_REQ_NONE = 0, RPM_REQ_IDLE, RPM_REQ_SUSPEND, RPM_REQ_AUTOSUSPEND, RPM_REQ_RESUME, };
pm_domain_data  struct  include/linux/pm.h  490  struct pm_domain_data { struct list_head list_node; struct device *dev; };
pm_subsys_data  struct  include/linux/pm.h  495  struct pm_subsys_data { spinlock_t lock; unsigned int refcount; struct list_head clock_list; struct pm_domain_data *domain_data; };
dev_pm_info  struct  include/linux/pm.h  506  struct dev_pm_info { pm_message_t power_state; unsigned int can_wakeup:1; unsigned int async_suspend:1; bool is_prepared:1; bool is_suspended:1; bool ignore_children:1; bool early_init:1; spinlock_t lock; struct list_head entry; struct completion completion; struct wakeup_source *wakeup; bool wakeup_path:1; bool syscore:1; unsigned int should_wakeup:1; struct timer_list suspend_timer; unsigned long timer_expires; struct work_struct work; wait_queue_head_t wait_queue; atomic_t usage_count; atomic_t child_count; unsigned int disable_depth:3; unsigned int idle_notification:1; unsigned int request_pending:1; unsigned int deferred_resume:1; unsigned int run_wake:1; unsigned int runtime_auto:1; unsigned int no_callbacks:1; unsigned int irq_safe:1; unsigned int use_autosuspend:1; unsigned int timer_autosuspends:1; enum rpm_request request; enum rpm_status runtime_status; int runtime_error; int autosuspend_delay; unsigned long last_busy; unsigned long active_jiffies; unsigned long suspended_jiffies; unsigned long accounting_timestamp; struct pm_subsys_data *subsys_data; struct dev_pm_qos *qos; };
update_pm_runtime_accounting  prototype  include/linux/pm.h  554  extern void update_pm_runtime_accounting(struct device *dev);
dev_pm_get_subsys_data  prototype  include/linux/pm.h  555  extern int dev_pm_get_subsys_data(struct device *dev);
dev_pm_put_subsys_data  prototype  include/linux/pm.h  556  extern int dev_pm_put_subsys_data(struct device *dev);
dev_pm_domain  struct  include/linux/pm.h  563  struct dev_pm_domain { struct dev_pm_ops ops; };
PM_EVENT_PRETHAW  macro  include/linux/pm.h  574  #define PM_EVENT_PRETHAW PM_EVENT_QUIESCE
device_pm_lock  macro  include/linux/pm.h  667  #define device_pm_lock() do {} while (0)
dpm_resume_start  prototype  include/linux/pm.h  623  extern void dpm_resume_start(pm_message_t state);
dpm_resume_end  prototype  include/linux/pm.h  624  extern void dpm_resume_end(pm_message_t state);
dpm_resume  prototype  include/linux/pm.h  625  extern void dpm_resume(pm_message_t state);
dpm_complete  prototype  include/linux/pm.h  626  extern void dpm_complete(pm_message_t state);
device_pm_unlock  macro  include/linux/pm.h  668  #define device_pm_unlock() do {} while (0)
dpm_suspend_end  prototype  include/linux/pm.h  629  extern int dpm_suspend_end(pm_message_t state);
dpm_suspend_start  function  include/linux/pm.h  670  static inline int dpm_suspend_start(pm_message_t state)
dpm_suspend  prototype  include/linux/pm.h  631  extern int dpm_suspend(pm_message_t state);
dpm_prepare  prototype  include/linux/pm.h  632  extern int dpm_prepare(pm_message_t state);
__suspend_report_result  prototype  include/linux/pm.h  634  extern void __suspend_report_result(const char *function,void *fn,int ret);
suspend_report_result  macro  include/linux/pm.h  675  #define suspend_report_result(fn,ret) do {} while (0)
device_pm_wait_for_dev  function  include/linux/pm.h  677  static inline int device_pm_wait_for_dev(struct device *a,struct device *b)
dpm_for_each_dev  function  include/linux/pm.h  682  static inline void dpm_for_each_dev(void *data,void (*fn)(struct device *,void *))
pm_generic_prepare  macro  include/linux/pm.h  686  #define pm_generic_prepare NULL
pm_generic_suspend_late  prototype  include/linux/pm.h  645  extern int pm_generic_suspend_late(struct device *dev);
pm_generic_suspend_noirq  prototype  include/linux/pm.h  646  extern int pm_generic_suspend_noirq(struct device *dev);
pm_generic_suspend  macro  include/linux/pm.h  687  #define pm_generic_suspend NULL
pm_generic_resume_early  prototype  include/linux/pm.h  648  extern int pm_generic_resume_early(struct device *dev);
pm_generic_resume_noirq  prototype  include/linux/pm.h  649  extern int pm_generic_resume_noirq(struct device *dev);
pm_generic_resume  macro  include/linux/pm.h  688  #define pm_generic_resume NULL
pm_generic_freeze_noirq  prototype  include/linux/pm.h  651  extern int pm_generic_freeze_noirq(struct device *dev);
pm_generic_freeze_late  prototype  include/linux/pm.h  652  extern int pm_generic_freeze_late(struct device *dev);
pm_generic_freeze  macro  include/linux/pm.h  689  #define pm_generic_freeze NULL
pm_generic_thaw_noirq  prototype  include/linux/pm.h  654  extern int pm_generic_thaw_noirq(struct device *dev);
pm_generic_thaw_early  prototype  include/linux/pm.h  655  extern int pm_generic_thaw_early(struct device *dev);
pm_generic_thaw  macro  include/linux/pm.h  690  #define pm_generic_thaw NULL
pm_generic_restore_noirq  prototype  include/linux/pm.h  657  extern int pm_generic_restore_noirq(struct device *dev);
pm_generic_restore_early  prototype  include/linux/pm.h  658  extern int pm_generic_restore_early(struct device *dev);
pm_generic_restore  macro  include/linux/pm.h  691  #define pm_generic_restore NULL
pm_generic_poweroff_noirq  prototype  include/linux/pm.h  660  extern int pm_generic_poweroff_noirq(struct device *dev);
pm_generic_poweroff_late  prototype  include/linux/pm.h  661  extern int pm_generic_poweroff_late(struct device *dev);
pm_generic_poweroff  macro  include/linux/pm.h  692  #define pm_generic_poweroff NULL
pm_generic_complete  macro  include/linux/pm.h  693  #define pm_generic_complete NULL
dpm_order  enum  include/linux/pm.h  697  enum dpm_order { DPM_ORDER_NONE, DPM_ORDER_DEV_AFTER_PARENT, DPM_ORDER_PARENT_BEFORE_DEV, DPM_ORDER_DEV_LAST, };
_LINUX_RATELIMIT_H  macro  include/linux/ratelimit.h  2  #define _LINUX_RATELIMIT_H
DEFAULT_RATELIMIT_INTERVAL  macro  include/linux/ratelimit.h  7  #define DEFAULT_RATELIMIT_INTERVAL (5 * HZ)
DEFAULT_RATELIMIT_BURST  macro  include/linux/ratelimit.h  8  #define DEFAULT_RATELIMIT_BURST 10
ratelimit_state  struct  include/linux/ratelimit.h  10  struct ratelimit_state { raw_spinlock_t lock; int interval; int burst; int printed; int missed; unsigned long begin; };
DEFINE_RATELIMIT_STATE  macro  include/linux/ratelimit.h  20  #define DEFINE_RATELIMIT_STATE(name,interval_init,burst_init) struct ratelimit_state name = { .lock		= __RAW_SPIN_LOCK_UNLOCKED(name.lock), .interval	= interval_init, .burst		= burst_init, }
ratelimit_state_init  function  include/linux/ratelimit.h  28  static inline void ratelimit_state_init(struct ratelimit_state *rs,int interval, int burst)
___ratelimit  prototype  include/linux/ratelimit.h  41  extern int ___ratelimit(struct ratelimit_state *rs,const char *func);
__ratelimit  macro  include/linux/ratelimit.h  42  #define __ratelimit(state) ___ratelimit(state,__func__)
WARN_ON_RATELIMIT  macro  include/linux/ratelimit.h  64  #define WARN_ON_RATELIMIT(condition,state) WARN_ON(condition)
WARN_RATELIMIT  macro  include/linux/ratelimit.h  67  #define WARN_RATELIMIT(condition,format,...) ({ int rtn = WARN(condition, format, ##__VA_ARGS__); rtn; })
_ASM_X86_DEVICE_H  macro  arch/x86/include/asm/device.h  2  #define _ASM_X86_DEVICE_H
dev_archdata  struct  arch/x86/include/asm/device.h  4  struct dev_archdata { struct dma_map_ops *dma_ops; void *iommu; };
pdev_archdata  struct  arch/x86/include/asm/device.h  13  struct pdev_archdata { };
_LINUX_PM_WAKEUP_H  macro  include/linux/pm_wakeup.h  23  #define _LINUX_PM_WAKEUP_H
wakeup_source  struct  include/linux/pm_wakeup.h  46  struct wakeup_source { const char *name; struct list_head entry; spinlock_t lock; struct timer_list timer; unsigned long timer_expires; ktime_t total_time; ktime_t max_time; ktime_t last_time; ktime_t start_prevent_time; ktime_t prevent_sleep_time; unsigned long event_count; unsigned long active_count; unsigned long relax_count; unsigned long expire_count; unsigned long wakeup_count; bool active:1; bool autosleep_enabled:1; };
device_can_wakeup  function  include/linux/pm_wakeup.h  110  static inline bool device_can_wakeup(struct device *dev)
device_may_wakeup  function  include/linux/pm_wakeup.h  163  static inline bool device_may_wakeup(struct device *dev)
wakeup_source_prepare  function  include/linux/pm_wakeup.h  115  static inline void wakeup_source_prepare(struct wakeup_source *ws,const char *name) {}
wakeup_source_create  function  include/linux/pm_wakeup.h  118  static inline struct wakeup_source *wakeup_source_create(const char *name)
wakeup_source_drop  function  include/linux/pm_wakeup.h  123  static inline void wakeup_source_drop(struct wakeup_source *ws) {}
wakeup_source_destroy  function  include/linux/pm_wakeup.h  125  static inline void wakeup_source_destroy(struct wakeup_source *ws) {}
wakeup_source_add  function  include/linux/pm_wakeup.h  127  static inline void wakeup_source_add(struct wakeup_source *ws) {}
wakeup_source_remove  function  include/linux/pm_wakeup.h  129  static inline void wakeup_source_remove(struct wakeup_source *ws) {}
wakeup_source_register  function  include/linux/pm_wakeup.h  131  static inline struct wakeup_source *wakeup_source_register(const char *name)
wakeup_source_unregister  function  include/linux/pm_wakeup.h  136  static inline void wakeup_source_unregister(struct wakeup_source *ws) {}
device_wakeup_enable  function  include/linux/pm_wakeup.h  138  static inline int device_wakeup_enable(struct device *dev)
device_wakeup_disable  function  include/linux/pm_wakeup.h  144  static inline int device_wakeup_disable(struct device *dev)
device_set_wakeup_capable  function  include/linux/pm_wakeup.h  105  static inline void device_set_wakeup_capable(struct device *dev,bool capable)
device_init_wakeup  function  include/linux/pm_wakeup.h  156  static inline int device_init_wakeup(struct device *dev,bool val)
device_set_wakeup_enable  function  include/linux/pm_wakeup.h  150  static inline int device_set_wakeup_enable(struct device *dev,bool enable)
__pm_stay_awake  function  include/linux/pm_wakeup.h  168  static inline void __pm_stay_awake(struct wakeup_source *ws) {}
pm_stay_awake  function  include/linux/pm_wakeup.h  170  static inline void pm_stay_awake(struct device *dev) {}
__pm_relax  function  include/linux/pm_wakeup.h  172  static inline void __pm_relax(struct wakeup_source *ws) {}
pm_relax  function  include/linux/pm_wakeup.h  174  static inline void pm_relax(struct device *dev) {}
__pm_wakeup_event  function  include/linux/pm_wakeup.h  176  static inline void __pm_wakeup_event(struct wakeup_source *ws,unsigned int msec) {}
pm_wakeup_event  function  include/linux/pm_wakeup.h  178  static inline void pm_wakeup_event(struct device *dev,unsigned int msec) {}
wakeup_source_init  function  include/linux/pm_wakeup.h  182  static inline void wakeup_source_init(struct wakeup_source *ws,const char *name)
wakeup_source_trash  function  include/linux/pm_wakeup.h  189  static inline void wakeup_source_trash(struct wakeup_source *ws)
_ASM_X86_IO_H  macro  arch/x86/include/asm/io.h  2  #define _ASM_X86_IO_H
ARCH_HAS_IOREMAP_WC  macro  arch/x86/include/asm/io.h  37  #define ARCH_HAS_IOREMAP_WC
build_mmio_read  macro  arch/x86/include/asm/io.h  43  #define build_mmio_read(name,size,type,reg,barrier) static inline type name(const volatile void __iomem *addr) { type ret; asm volatile("mov" size " %1,%0":reg (ret) :"m" (*(volatile type __force *)addr) barrier); return ret; }
build_mmio_write  macro  arch/x86/include/asm/io.h  48  #define build_mmio_write(name,size,type,reg,barrier) static inline void name(type val, volatile void __iomem *addr) { asm volatile("mov" size " %0,%1": :reg (val), "m" (*(volatile type __force *)addr) barrier); }
readb_relaxed  macro  arch/x86/include/asm/io.h  69  #define readb_relaxed(a) __readb(a)
readw_relaxed  macro  arch/x86/include/asm/io.h  70  #define readw_relaxed(a) __readw(a)
readl_relaxed  macro  arch/x86/include/asm/io.h  71  #define readl_relaxed(a) __readl(a)
__raw_readb  macro  arch/x86/include/asm/io.h  72  #define __raw_readb __readb
__raw_readw  macro  arch/x86/include/asm/io.h  73  #define __raw_readw __readw
__raw_readl  macro  arch/x86/include/asm/io.h  74  #define __raw_readl __readl
__raw_writeb  macro  arch/x86/include/asm/io.h  76  #define __raw_writeb __writeb
__raw_writew  macro  arch/x86/include/asm/io.h  77  #define __raw_writew __writew
__raw_writel  macro  arch/x86/include/asm/io.h  78  #define __raw_writel __writel
mmiowb  macro  arch/x86/include/asm/io.h  80  #define mmiowb() barrier()
readq_relaxed  macro  arch/x86/include/asm/io.h  87  #define readq_relaxed(a) readq(a)
__raw_readq  macro  arch/x86/include/asm/io.h  89  #define __raw_readq(a) readq(a)
__raw_writeq  macro  arch/x86/include/asm/io.h  90  #define __raw_writeq(val,addr) writeq(val,addr)
readq  macro  arch/x86/include/asm/io.h  93  #define readq readq
writeq  macro  arch/x86/include/asm/io.h  94  #define writeq writeq
virt_to_phys  function  arch/x86/include/asm/io.h  111  static inline phys_addr_t virt_to_phys(volatile void *address)
phys_to_virt  function  arch/x86/include/asm/io.h  129  static inline void *phys_to_virt(phys_addr_t address)
page_to_phys  macro  arch/x86/include/asm/io.h  137  #define page_to_phys(page) ((dma_addr_t)page_to_pfn(page) << PAGE_SHIFT)
isa_virt_to_bus  function  arch/x86/include/asm/io.h  144  static inline unsigned int isa_virt_to_bus(volatile void *address)
isa_page_to_bus  macro  arch/x86/include/asm/io.h  148  #define isa_page_to_bus(page) ((unsigned int)page_to_phys(page))
isa_bus_to_virt  macro  arch/x86/include/asm/io.h  149  #define isa_bus_to_virt phys_to_virt
virt_to_bus  macro  arch/x86/include/asm/io.h  157  #define virt_to_bus virt_to_phys
bus_to_virt  macro  arch/x86/include/asm/io.h  158  #define bus_to_virt phys_to_virt
ioremap_nocache  prototype  arch/x86/include/asm/io.h  174  extern void __iomem *ioremap_nocache(resource_size_t offset,unsigned long size);
ioremap_cache  prototype  arch/x86/include/asm/io.h  175  extern void __iomem *ioremap_cache(resource_size_t offset,unsigned long size);
ioremap_prot  prototype  arch/x86/include/asm/io.h  176  extern void __iomem *ioremap_prot(resource_size_t offset,unsigned long size,unsigned long prot_val);
ioremap  function  arch/x86/include/asm/io.h  182  static inline void __iomem *ioremap(resource_size_t offset,unsigned long size)
iounmap  prototype  arch/x86/include/asm/io.h  187  extern void iounmap(volatile void __iomem *addr);
set_iounmap_nonlazy  prototype  arch/x86/include/asm/io.h  189  extern void set_iounmap_nonlazy(void);
xlate_dev_kmem_ptr  macro  arch/x86/include/asm/io.h  200  #define xlate_dev_kmem_ptr(p) p
memset_io  function  arch/x86/include/asm/io.h  203  memset_io(volatile void __iomem *addr,unsigned char val,size_t count)
memcpy_fromio  function  arch/x86/include/asm/io.h  209  memcpy_fromio(void *dst,const volatile void __iomem *src,size_t count)
memcpy_toio  function  arch/x86/include/asm/io.h  215  memcpy_toio(volatile void __iomem *dst,const void *src,size_t count)
__ISA_IO_base  macro  arch/x86/include/asm/io.h  228  #define __ISA_IO_base ((char __iomem *)(PAGE_OFFSET))
flush_write_buffers  function  arch/x86/include/asm/io.h  238  static inline void flush_write_buffers(void)
native_io_delay  prototype  arch/x86/include/asm/io.h  247  extern void native_io_delay(void);
io_delay_init  prototype  arch/x86/include/asm/io.h  250  extern void io_delay_init(void);
slow_down_io  function  arch/x86/include/asm/io.h  256  static inline void slow_down_io(void)
BUILDIO  macro  arch/x86/include/asm/io.h  268  #define BUILDIO(bwl,bw,type) static inline void out##bwl(unsigned type value, int port) { asm volatile("out" #bwl " %" #bw "0, %w1" : : "a"(value), "Nd"(port)); } static inline unsigned type in##bwl(int port) { unsigned type value; asm volatile("in" #bwl " %w1, %" #bw "0" : "=a"(value) : "Nd"(port)); return value; } static inline void out##bwl##_p(unsigned type value, int port) { out##bwl(value, port); slow_down_io(); } static inline unsigned type in##bwl##_p(int port) { unsigned type value = in##bwl(port); slow_down_io(); return value; } static inline void outs##bwl(int port, const void *addr, unsigned long count) { asm volatile("rep; outs" #bwl : "+S"(addr), "+c"(count) : "d"(port)); } static inline void ins##bwl(int port, void *addr, unsigned long count) { asm volatile("rep; ins" #bwl : "+D"(addr), "+c"(count) : "d"(port)); }
xlate_dev_mem_ptr  prototype  arch/x86/include/asm/io.h  312  extern void *xlate_dev_mem_ptr(unsigned long phys);
unxlate_dev_mem_ptr  prototype  arch/x86/include/asm/io.h  313  extern void unxlate_dev_mem_ptr(unsigned long phys,void *addr);
ioremap_change_attr  prototype  arch/x86/include/asm/io.h  315  extern int ioremap_change_attr(unsigned long vaddr,unsigned long size,unsigned long prot_val);
ioremap_wc  prototype  arch/x86/include/asm/io.h  317  extern void __iomem *ioremap_wc(resource_size_t offset,unsigned long size);
early_ioremap_init  prototype  arch/x86/include/asm/io.h  324  extern void early_ioremap_init(void);
early_ioremap_reset  prototype  arch/x86/include/asm/io.h  325  extern void early_ioremap_reset(void);
early_ioremap  prototype  arch/x86/include/asm/io.h  326  extern void __iomem *early_ioremap(resource_size_t phys_addr,unsigned long size);
early_memremap  prototype  arch/x86/include/asm/io.h  328  extern void __iomem *early_memremap(resource_size_t phys_addr,unsigned long size);
early_iounmap  prototype  arch/x86/include/asm/io.h  330  extern void early_iounmap(void __iomem *addr,unsigned long size);
fixup_early_ioremap  prototype  arch/x86/include/asm/io.h  331  extern void fixup_early_ioremap(void);
is_early_ioremap_ptep  prototype  arch/x86/include/asm/io.h  332  extern bool is_early_ioremap_ptep(pte_t *ptep);
xen_biovec_phys_mergeable  prototype  arch/x86/include/asm/io.h  338  extern bool xen_biovec_phys_mergeable(const struct bio_vec *vec1,const struct bio_vec *vec2);
BIOVEC_PHYS_MERGEABLE  macro  include/linux/bio.h  125  #define BIOVEC_PHYS_MERGEABLE(vec1,vec2) __BIOVEC_PHYS_MERGEABLE(vec1, vec2)
IO_SPACE_LIMIT  macro  arch/x86/include/asm/io.h  346  #define IO_SPACE_LIMIT 0xffff
LINUX_PCI_REGS_H  macro  include/uapi/linux/pci_regs.h  23  #define LINUX_PCI_REGS_H
PCI_STD_HEADER_SIZEOF  macro  include/uapi/linux/pci_regs.h  29  #define PCI_STD_HEADER_SIZEOF 64
PCI_VENDOR_ID  macro  include/uapi/linux/pci_regs.h  30  #define PCI_VENDOR_ID 0x00
PCI_DEVICE_ID  macro  include/uapi/linux/pci_regs.h  31  #define PCI_DEVICE_ID 0x02
PCI_COMMAND  macro  include/uapi/linux/pci_regs.h  32  #define PCI_COMMAND 0x04
PCI_COMMAND_IO  macro  include/uapi/linux/pci_regs.h  33  #define PCI_COMMAND_IO 0x1
PCI_COMMAND_MEMORY  macro  include/uapi/linux/pci_regs.h  34  #define PCI_COMMAND_MEMORY 0x2
PCI_COMMAND_MASTER  macro  include/uapi/linux/pci_regs.h  35  #define PCI_COMMAND_MASTER 0x4
PCI_COMMAND_SPECIAL  macro  include/uapi/linux/pci_regs.h  36  #define PCI_COMMAND_SPECIAL 0x8
PCI_COMMAND_INVALIDATE  macro  include/uapi/linux/pci_regs.h  37  #define PCI_COMMAND_INVALIDATE 0x10
PCI_COMMAND_VGA_PALETTE  macro  include/uapi/linux/pci_regs.h  38  #define PCI_COMMAND_VGA_PALETTE 0x20
PCI_COMMAND_PARITY  macro  include/uapi/linux/pci_regs.h  39  #define PCI_COMMAND_PARITY 0x40
PCI_COMMAND_WAIT  macro  include/uapi/linux/pci_regs.h  40  #define PCI_COMMAND_WAIT 0x80
PCI_COMMAND_SERR  macro  include/uapi/linux/pci_regs.h  41  #define PCI_COMMAND_SERR 0x100
PCI_COMMAND_FAST_BACK  macro  include/uapi/linux/pci_regs.h  42  #define PCI_COMMAND_FAST_BACK 0x200
PCI_COMMAND_INTX_DISABLE  macro  include/uapi/linux/pci_regs.h  43  #define PCI_COMMAND_INTX_DISABLE 0x400
PCI_STATUS  macro  include/uapi/linux/pci_regs.h  45  #define PCI_STATUS 0x06
PCI_STATUS_INTERRUPT  macro  include/uapi/linux/pci_regs.h  46  #define PCI_STATUS_INTERRUPT 0x08
PCI_STATUS_CAP_LIST  macro  include/uapi/linux/pci_regs.h  47  #define PCI_STATUS_CAP_LIST 0x10
PCI_STATUS_66MHZ  macro  include/uapi/linux/pci_regs.h  48  #define PCI_STATUS_66MHZ 0x20
PCI_STATUS_UDF  macro  include/uapi/linux/pci_regs.h  49  #define PCI_STATUS_UDF 0x40
PCI_STATUS_FAST_BACK  macro  include/uapi/linux/pci_regs.h  50  #define PCI_STATUS_FAST_BACK 0x80
PCI_STATUS_PARITY  macro  include/uapi/linux/pci_regs.h  51  #define PCI_STATUS_PARITY 0x100
PCI_STATUS_DEVSEL_MASK  macro  include/uapi/linux/pci_regs.h  52  #define PCI_STATUS_DEVSEL_MASK 0x600
PCI_STATUS_DEVSEL_FAST  macro  include/uapi/linux/pci_regs.h  53  #define PCI_STATUS_DEVSEL_FAST 0x000
PCI_STATUS_DEVSEL_MEDIUM  macro  include/uapi/linux/pci_regs.h  54  #define PCI_STATUS_DEVSEL_MEDIUM 0x200
PCI_STATUS_DEVSEL_SLOW  macro  include/uapi/linux/pci_regs.h  55  #define PCI_STATUS_DEVSEL_SLOW 0x400
PCI_STATUS_SIG_TARGET_ABORT  macro  include/uapi/linux/pci_regs.h  56  #define PCI_STATUS_SIG_TARGET_ABORT 0x800
PCI_STATUS_REC_TARGET_ABORT  macro  include/uapi/linux/pci_regs.h  57  #define PCI_STATUS_REC_TARGET_ABORT 0x1000
PCI_STATUS_REC_MASTER_ABORT  macro  include/uapi/linux/pci_regs.h  58  #define PCI_STATUS_REC_MASTER_ABORT 0x2000
PCI_STATUS_SIG_SYSTEM_ERROR  macro  include/uapi/linux/pci_regs.h  59  #define PCI_STATUS_SIG_SYSTEM_ERROR 0x4000
PCI_STATUS_DETECTED_PARITY  macro  include/uapi/linux/pci_regs.h  60  #define PCI_STATUS_DETECTED_PARITY 0x8000
PCI_CLASS_REVISION  macro  include/uapi/linux/pci_regs.h  62  #define PCI_CLASS_REVISION 0x08
PCI_REVISION_ID  macro  include/uapi/linux/pci_regs.h  63  #define PCI_REVISION_ID 0x08
PCI_CLASS_PROG  macro  include/uapi/linux/pci_regs.h  64  #define PCI_CLASS_PROG 0x09
PCI_CLASS_DEVICE  macro  include/uapi/linux/pci_regs.h  65  #define PCI_CLASS_DEVICE 0x0a
PCI_CACHE_LINE_SIZE  macro  include/uapi/linux/pci_regs.h  67  #define PCI_CACHE_LINE_SIZE 0x0c
PCI_LATENCY_TIMER  macro  include/uapi/linux/pci_regs.h  68  #define PCI_LATENCY_TIMER 0x0d
PCI_HEADER_TYPE  macro  include/uapi/linux/pci_regs.h  69  #define PCI_HEADER_TYPE 0x0e
PCI_HEADER_TYPE_NORMAL  macro  include/uapi/linux/pci_regs.h  70  #define PCI_HEADER_TYPE_NORMAL 0
PCI_HEADER_TYPE_BRIDGE  macro  include/uapi/linux/pci_regs.h  71  #define PCI_HEADER_TYPE_BRIDGE 1
PCI_HEADER_TYPE_CARDBUS  macro  include/uapi/linux/pci_regs.h  72  #define PCI_HEADER_TYPE_CARDBUS 2
PCI_BIST  macro  include/uapi/linux/pci_regs.h  74  #define PCI_BIST 0x0f
PCI_BIST_CODE_MASK  macro  include/uapi/linux/pci_regs.h  75  #define PCI_BIST_CODE_MASK 0x0f
PCI_BIST_START  macro  include/uapi/linux/pci_regs.h  76  #define PCI_BIST_START 0x40
PCI_BIST_CAPABLE  macro  include/uapi/linux/pci_regs.h  77  #define PCI_BIST_CAPABLE 0x80
PCI_BASE_ADDRESS_0  macro  include/uapi/linux/pci_regs.h  85  #define PCI_BASE_ADDRESS_0 0x10
PCI_BASE_ADDRESS_1  macro  include/uapi/linux/pci_regs.h  86  #define PCI_BASE_ADDRESS_1 0x14
PCI_BASE_ADDRESS_2  macro  include/uapi/linux/pci_regs.h  87  #define PCI_BASE_ADDRESS_2 0x18
PCI_BASE_ADDRESS_3  macro  include/uapi/linux/pci_regs.h  88  #define PCI_BASE_ADDRESS_3 0x1c
PCI_BASE_ADDRESS_4  macro  include/uapi/linux/pci_regs.h  89  #define PCI_BASE_ADDRESS_4 0x20
PCI_BASE_ADDRESS_5  macro  include/uapi/linux/pci_regs.h  90  #define PCI_BASE_ADDRESS_5 0x24
PCI_BASE_ADDRESS_SPACE  macro  include/uapi/linux/pci_regs.h  91  #define PCI_BASE_ADDRESS_SPACE 0x01
PCI_BASE_ADDRESS_SPACE_IO  macro  include/uapi/linux/pci_regs.h  92  #define PCI_BASE_ADDRESS_SPACE_IO 0x01
PCI_BASE_ADDRESS_SPACE_MEMORY  macro  include/uapi/linux/pci_regs.h  93  #define PCI_BASE_ADDRESS_SPACE_MEMORY 0x00
PCI_BASE_ADDRESS_MEM_TYPE_MASK  macro  include/uapi/linux/pci_regs.h  94  #define PCI_BASE_ADDRESS_MEM_TYPE_MASK 0x06
PCI_BASE_ADDRESS_MEM_TYPE_32  macro  include/uapi/linux/pci_regs.h  95  #define PCI_BASE_ADDRESS_MEM_TYPE_32 0x00
PCI_BASE_ADDRESS_MEM_TYPE_1M  macro  include/uapi/linux/pci_regs.h  96  #define PCI_BASE_ADDRESS_MEM_TYPE_1M 0x02
PCI_BASE_ADDRESS_MEM_TYPE_64  macro  include/uapi/linux/pci_regs.h  97  #define PCI_BASE_ADDRESS_MEM_TYPE_64 0x04
PCI_BASE_ADDRESS_MEM_PREFETCH  macro  include/uapi/linux/pci_regs.h  98  #define PCI_BASE_ADDRESS_MEM_PREFETCH 0x08
PCI_BASE_ADDRESS_MEM_MASK  macro  include/uapi/linux/pci_regs.h  99  #define PCI_BASE_ADDRESS_MEM_MASK (~0x0fUL)
PCI_BASE_ADDRESS_IO_MASK  macro  include/uapi/linux/pci_regs.h  100  #define PCI_BASE_ADDRESS_IO_MASK (~0x03UL)
PCI_CARDBUS_CIS  macro  include/uapi/linux/pci_regs.h  104  #define PCI_CARDBUS_CIS 0x28
PCI_SUBSYSTEM_VENDOR_ID  macro  include/uapi/linux/pci_regs.h  105  #define PCI_SUBSYSTEM_VENDOR_ID 0x2c
PCI_SUBSYSTEM_ID  macro  include/uapi/linux/pci_regs.h  106  #define PCI_SUBSYSTEM_ID 0x2e
PCI_ROM_ADDRESS  macro  include/uapi/linux/pci_regs.h  107  #define PCI_ROM_ADDRESS 0x30
PCI_ROM_ADDRESS_ENABLE  macro  include/uapi/linux/pci_regs.h  108  #define PCI_ROM_ADDRESS_ENABLE 0x01
PCI_ROM_ADDRESS_MASK  macro  include/uapi/linux/pci_regs.h  109  #define PCI_ROM_ADDRESS_MASK (~0x7ffUL)
PCI_CAPABILITY_LIST  macro  include/uapi/linux/pci_regs.h  111  #define PCI_CAPABILITY_LIST 0x34
PCI_INTERRUPT_LINE  macro  include/uapi/linux/pci_regs.h  114  #define PCI_INTERRUPT_LINE 0x3c
PCI_INTERRUPT_PIN  macro  include/uapi/linux/pci_regs.h  115  #define PCI_INTERRUPT_PIN 0x3d
PCI_MIN_GNT  macro  include/uapi/linux/pci_regs.h  116  #define PCI_MIN_GNT 0x3e
PCI_MAX_LAT  macro  include/uapi/linux/pci_regs.h  117  #define PCI_MAX_LAT 0x3f
PCI_PRIMARY_BUS  macro  include/uapi/linux/pci_regs.h  120  #define PCI_PRIMARY_BUS 0x18
PCI_SECONDARY_BUS  macro  include/uapi/linux/pci_regs.h  121  #define PCI_SECONDARY_BUS 0x19
PCI_SUBORDINATE_BUS  macro  include/uapi/linux/pci_regs.h  122  #define PCI_SUBORDINATE_BUS 0x1a
PCI_SEC_LATENCY_TIMER  macro  include/uapi/linux/pci_regs.h  123  #define PCI_SEC_LATENCY_TIMER 0x1b
PCI_IO_BASE  macro  include/uapi/linux/pci_regs.h  124  #define PCI_IO_BASE 0x1c
PCI_IO_LIMIT  macro  include/uapi/linux/pci_regs.h  125  #define PCI_IO_LIMIT 0x1d
PCI_IO_RANGE_TYPE_MASK  macro  include/uapi/linux/pci_regs.h  126  #define PCI_IO_RANGE_TYPE_MASK 0x0fUL
PCI_IO_RANGE_TYPE_16  macro  include/uapi/linux/pci_regs.h  127  #define PCI_IO_RANGE_TYPE_16 0x00
PCI_IO_RANGE_TYPE_32  macro  include/uapi/linux/pci_regs.h  128  #define PCI_IO_RANGE_TYPE_32 0x01
PCI_IO_RANGE_MASK  macro  include/uapi/linux/pci_regs.h  129  #define PCI_IO_RANGE_MASK (~0x0fUL)
PCI_IO_1K_RANGE_MASK  macro  include/uapi/linux/pci_regs.h  130  #define PCI_IO_1K_RANGE_MASK (~0x03UL)
PCI_SEC_STATUS  macro  include/uapi/linux/pci_regs.h  131  #define PCI_SEC_STATUS 0x1e
PCI_MEMORY_BASE  macro  include/uapi/linux/pci_regs.h  132  #define PCI_MEMORY_BASE 0x20
PCI_MEMORY_LIMIT  macro  include/uapi/linux/pci_regs.h  133  #define PCI_MEMORY_LIMIT 0x22
PCI_MEMORY_RANGE_TYPE_MASK  macro  include/uapi/linux/pci_regs.h  134  #define PCI_MEMORY_RANGE_TYPE_MASK 0x0fUL
PCI_MEMORY_RANGE_MASK  macro  include/uapi/linux/pci_regs.h  135  #define PCI_MEMORY_RANGE_MASK (~0x0fUL)
PCI_PREF_MEMORY_BASE  macro  include/uapi/linux/pci_regs.h  136  #define PCI_PREF_MEMORY_BASE 0x24
PCI_PREF_MEMORY_LIMIT  macro  include/uapi/linux/pci_regs.h  137  #define PCI_PREF_MEMORY_LIMIT 0x26
PCI_PREF_RANGE_TYPE_MASK  macro  include/uapi/linux/pci_regs.h  138  #define PCI_PREF_RANGE_TYPE_MASK 0x0fUL
PCI_PREF_RANGE_TYPE_32  macro  include/uapi/linux/pci_regs.h  139  #define PCI_PREF_RANGE_TYPE_32 0x00
PCI_PREF_RANGE_TYPE_64  macro  include/uapi/linux/pci_regs.h  140  #define PCI_PREF_RANGE_TYPE_64 0x01
PCI_PREF_RANGE_MASK  macro  include/uapi/linux/pci_regs.h  141  #define PCI_PREF_RANGE_MASK (~0x0fUL)
PCI_PREF_BASE_UPPER32  macro  include/uapi/linux/pci_regs.h  142  #define PCI_PREF_BASE_UPPER32 0x28
PCI_PREF_LIMIT_UPPER32  macro  include/uapi/linux/pci_regs.h  143  #define PCI_PREF_LIMIT_UPPER32 0x2c
PCI_IO_BASE_UPPER16  macro  include/uapi/linux/pci_regs.h  144  #define PCI_IO_BASE_UPPER16 0x30
PCI_IO_LIMIT_UPPER16  macro  include/uapi/linux/pci_regs.h  145  #define PCI_IO_LIMIT_UPPER16 0x32
PCI_ROM_ADDRESS1  macro  include/uapi/linux/pci_regs.h  148  #define PCI_ROM_ADDRESS1 0x38
PCI_BRIDGE_CONTROL  macro  include/uapi/linux/pci_regs.h  150  #define PCI_BRIDGE_CONTROL 0x3e
PCI_BRIDGE_CTL_PARITY  macro  include/uapi/linux/pci_regs.h  151  #define PCI_BRIDGE_CTL_PARITY 0x01
PCI_BRIDGE_CTL_SERR  macro  include/uapi/linux/pci_regs.h  152  #define PCI_BRIDGE_CTL_SERR 0x02
PCI_BRIDGE_CTL_ISA  macro  include/uapi/linux/pci_regs.h  153  #define PCI_BRIDGE_CTL_ISA 0x04
PCI_BRIDGE_CTL_VGA  macro  include/uapi/linux/pci_regs.h  154  #define PCI_BRIDGE_CTL_VGA 0x08
PCI_BRIDGE_CTL_MASTER_ABORT  macro  include/uapi/linux/pci_regs.h  155  #define PCI_BRIDGE_CTL_MASTER_ABORT 0x20
PCI_BRIDGE_CTL_BUS_RESET  macro  include/uapi/linux/pci_regs.h  156  #define PCI_BRIDGE_CTL_BUS_RESET 0x40
PCI_BRIDGE_CTL_FAST_BACK  macro  include/uapi/linux/pci_regs.h  157  #define PCI_BRIDGE_CTL_FAST_BACK 0x80
PCI_CB_CAPABILITY_LIST  macro  include/uapi/linux/pci_regs.h  160  #define PCI_CB_CAPABILITY_LIST 0x14
PCI_CB_SEC_STATUS  macro  include/uapi/linux/pci_regs.h  162  #define PCI_CB_SEC_STATUS 0x16
PCI_CB_PRIMARY_BUS  macro  include/uapi/linux/pci_regs.h  163  #define PCI_CB_PRIMARY_BUS 0x18
PCI_CB_CARD_BUS  macro  include/uapi/linux/pci_regs.h  164  #define PCI_CB_CARD_BUS 0x19
PCI_CB_SUBORDINATE_BUS  macro  include/uapi/linux/pci_regs.h  165  #define PCI_CB_SUBORDINATE_BUS 0x1a
PCI_CB_LATENCY_TIMER  macro  include/uapi/linux/pci_regs.h  166  #define PCI_CB_LATENCY_TIMER 0x1b
PCI_CB_MEMORY_BASE_0  macro  include/uapi/linux/pci_regs.h  167  #define PCI_CB_MEMORY_BASE_0 0x1c
PCI_CB_MEMORY_LIMIT_0  macro  include/uapi/linux/pci_regs.h  168  #define PCI_CB_MEMORY_LIMIT_0 0x20
PCI_CB_MEMORY_BASE_1  macro  include/uapi/linux/pci_regs.h  169  #define PCI_CB_MEMORY_BASE_1 0x24
PCI_CB_MEMORY_LIMIT_1  macro  include/uapi/linux/pci_regs.h  170  #define PCI_CB_MEMORY_LIMIT_1 0x28
PCI_CB_IO_BASE_0  macro  include/uapi/linux/pci_regs.h  171  #define PCI_CB_IO_BASE_0 0x2c
PCI_CB_IO_BASE_0_HI  macro  include/uapi/linux/pci_regs.h  172  #define PCI_CB_IO_BASE_0_HI 0x2e
PCI_CB_IO_LIMIT_0  macro  include/uapi/linux/pci_regs.h  173  #define PCI_CB_IO_LIMIT_0 0x30
PCI_CB_IO_LIMIT_0_HI  macro  include/uapi/linux/pci_regs.h  174  #define PCI_CB_IO_LIMIT_0_HI 0x32
PCI_CB_IO_BASE_1  macro  include/uapi/linux/pci_regs.h  175  #define PCI_CB_IO_BASE_1 0x34
PCI_CB_IO_BASE_1_HI  macro  include/uapi/linux/pci_regs.h  176  #define PCI_CB_IO_BASE_1_HI 0x36
PCI_CB_IO_LIMIT_1  macro  include/uapi/linux/pci_regs.h  177  #define PCI_CB_IO_LIMIT_1 0x38
PCI_CB_IO_LIMIT_1_HI  macro  include/uapi/linux/pci_regs.h  178  #define PCI_CB_IO_LIMIT_1_HI 0x3a
PCI_CB_IO_RANGE_MASK  macro  include/uapi/linux/pci_regs.h  179  #define PCI_CB_IO_RANGE_MASK (~0x03UL)
PCI_CB_BRIDGE_CONTROL  macro  include/uapi/linux/pci_regs.h  181  #define PCI_CB_BRIDGE_CONTROL 0x3e
PCI_CB_BRIDGE_CTL_PARITY  macro  include/uapi/linux/pci_regs.h  182  #define PCI_CB_BRIDGE_CTL_PARITY 0x01
PCI_CB_BRIDGE_CTL_SERR  macro  include/uapi/linux/pci_regs.h  183  #define PCI_CB_BRIDGE_CTL_SERR 0x02
PCI_CB_BRIDGE_CTL_ISA  macro  include/uapi/linux/pci_regs.h  184  #define PCI_CB_BRIDGE_CTL_ISA 0x04
PCI_CB_BRIDGE_CTL_VGA  macro  include/uapi/linux/pci_regs.h  185  #define PCI_CB_BRIDGE_CTL_VGA 0x08
PCI_CB_BRIDGE_CTL_MASTER_ABORT  macro  include/uapi/linux/pci_regs.h  186  #define PCI_CB_BRIDGE_CTL_MASTER_ABORT 0x20
PCI_CB_BRIDGE_CTL_CB_RESET  macro  include/uapi/linux/pci_regs.h  187  #define PCI_CB_BRIDGE_CTL_CB_RESET 0x40
PCI_CB_BRIDGE_CTL_16BIT_INT  macro  include/uapi/linux/pci_regs.h  188  #define PCI_CB_BRIDGE_CTL_16BIT_INT 0x80
PCI_CB_BRIDGE_CTL_PREFETCH_MEM0  macro  include/uapi/linux/pci_regs.h  189  #define PCI_CB_BRIDGE_CTL_PREFETCH_MEM0 0x100
PCI_CB_BRIDGE_CTL_PREFETCH_MEM1  macro  include/uapi/linux/pci_regs.h  190  #define PCI_CB_BRIDGE_CTL_PREFETCH_MEM1 0x200
PCI_CB_BRIDGE_CTL_POST_WRITES  macro  include/uapi/linux/pci_regs.h  191  #define PCI_CB_BRIDGE_CTL_POST_WRITES 0x400
PCI_CB_SUBSYSTEM_VENDOR_ID  macro  include/uapi/linux/pci_regs.h  192  #define PCI_CB_SUBSYSTEM_VENDOR_ID 0x40
PCI_CB_SUBSYSTEM_ID  macro  include/uapi/linux/pci_regs.h  193  #define PCI_CB_SUBSYSTEM_ID 0x42
PCI_CB_LEGACY_MODE_BASE  macro  include/uapi/linux/pci_regs.h  194  #define PCI_CB_LEGACY_MODE_BASE 0x44
PCI_CAP_LIST_ID  macro  include/uapi/linux/pci_regs.h  199  #define PCI_CAP_LIST_ID 0
PCI_CAP_ID_PM  macro  include/uapi/linux/pci_regs.h  200  #define PCI_CAP_ID_PM 0x01
PCI_CAP_ID_AGP  macro  include/uapi/linux/pci_regs.h  201  #define PCI_CAP_ID_AGP 0x02
PCI_CAP_ID_VPD  macro  include/uapi/linux/pci_regs.h  202  #define PCI_CAP_ID_VPD 0x03
PCI_CAP_ID_SLOTID  macro  include/uapi/linux/pci_regs.h  203  #define PCI_CAP_ID_SLOTID 0x04
PCI_CAP_ID_MSI  macro  include/uapi/linux/pci_regs.h  204  #define PCI_CAP_ID_MSI 0x05
PCI_CAP_ID_CHSWP  macro  include/uapi/linux/pci_regs.h  205  #define PCI_CAP_ID_CHSWP 0x06
PCI_CAP_ID_PCIX  macro  include/uapi/linux/pci_regs.h  206  #define PCI_CAP_ID_PCIX 0x07
PCI_CAP_ID_HT  macro  include/uapi/linux/pci_regs.h  207  #define PCI_CAP_ID_HT 0x08
PCI_CAP_ID_VNDR  macro  include/uapi/linux/pci_regs.h  208  #define PCI_CAP_ID_VNDR 0x09
PCI_CAP_ID_DBG  macro  include/uapi/linux/pci_regs.h  209  #define PCI_CAP_ID_DBG 0x0A
PCI_CAP_ID_CCRC  macro  include/uapi/linux/pci_regs.h  210  #define PCI_CAP_ID_CCRC 0x0B
PCI_CAP_ID_SHPC  macro  include/uapi/linux/pci_regs.h  211  #define PCI_CAP_ID_SHPC 0x0C
PCI_CAP_ID_SSVID  macro  include/uapi/linux/pci_regs.h  212  #define PCI_CAP_ID_SSVID 0x0D
PCI_CAP_ID_AGP3  macro  include/uapi/linux/pci_regs.h  213  #define PCI_CAP_ID_AGP3 0x0E
PCI_CAP_ID_SECDEV  macro  include/uapi/linux/pci_regs.h  214  #define PCI_CAP_ID_SECDEV 0x0F
PCI_CAP_ID_EXP  macro  include/uapi/linux/pci_regs.h  215  #define PCI_CAP_ID_EXP 0x10
PCI_CAP_ID_MSIX  macro  include/uapi/linux/pci_regs.h  216  #define PCI_CAP_ID_MSIX 0x11
PCI_CAP_ID_SATA  macro  include/uapi/linux/pci_regs.h  217  #define PCI_CAP_ID_SATA 0x12
PCI_CAP_ID_AF  macro  include/uapi/linux/pci_regs.h  218  #define PCI_CAP_ID_AF 0x13
PCI_CAP_ID_MAX  macro  include/uapi/linux/pci_regs.h  219  #define PCI_CAP_ID_MAX PCI_CAP_ID_AF
PCI_CAP_LIST_NEXT  macro  include/uapi/linux/pci_regs.h  220  #define PCI_CAP_LIST_NEXT 1
PCI_CAP_FLAGS  macro  include/uapi/linux/pci_regs.h  221  #define PCI_CAP_FLAGS 2
PCI_CAP_SIZEOF  macro  include/uapi/linux/pci_regs.h  222  #define PCI_CAP_SIZEOF 4
PCI_PM_PMC  macro  include/uapi/linux/pci_regs.h  226  #define PCI_PM_PMC 2
PCI_PM_CAP_VER_MASK  macro  include/uapi/linux/pci_regs.h  227  #define PCI_PM_CAP_VER_MASK 0x0007
PCI_PM_CAP_PME_CLOCK  macro  include/uapi/linux/pci_regs.h  228  #define PCI_PM_CAP_PME_CLOCK 0x0008
PCI_PM_CAP_RESERVED  macro  include/uapi/linux/pci_regs.h  229  #define PCI_PM_CAP_RESERVED 0x0010
PCI_PM_CAP_DSI  macro  include/uapi/linux/pci_regs.h  230  #define PCI_PM_CAP_DSI 0x0020
PCI_PM_CAP_AUX_POWER  macro  include/uapi/linux/pci_regs.h  231  #define PCI_PM_CAP_AUX_POWER 0x01C0
PCI_PM_CAP_D1  macro  include/uapi/linux/pci_regs.h  232  #define PCI_PM_CAP_D1 0x0200
PCI_PM_CAP_D2  macro  include/uapi/linux/pci_regs.h  233  #define PCI_PM_CAP_D2 0x0400
PCI_PM_CAP_PME  macro  include/uapi/linux/pci_regs.h  234  #define PCI_PM_CAP_PME 0x0800
PCI_PM_CAP_PME_MASK  macro  include/uapi/linux/pci_regs.h  235  #define PCI_PM_CAP_PME_MASK 0xF800
PCI_PM_CAP_PME_D0  macro  include/uapi/linux/pci_regs.h  236  #define PCI_PM_CAP_PME_D0 0x0800
PCI_PM_CAP_PME_D1  macro  include/uapi/linux/pci_regs.h  237  #define PCI_PM_CAP_PME_D1 0x1000
PCI_PM_CAP_PME_D2  macro  include/uapi/linux/pci_regs.h  238  #define PCI_PM_CAP_PME_D2 0x2000
PCI_PM_CAP_PME_D3  macro  include/uapi/linux/pci_regs.h  239  #define PCI_PM_CAP_PME_D3 0x4000
PCI_PM_CAP_PME_D3cold  macro  include/uapi/linux/pci_regs.h  240  #define PCI_PM_CAP_PME_D3cold 0x8000
PCI_PM_CAP_PME_SHIFT  macro  include/uapi/linux/pci_regs.h  241  #define PCI_PM_CAP_PME_SHIFT 11
PCI_PM_CTRL  macro  include/uapi/linux/pci_regs.h  242  #define PCI_PM_CTRL 4
PCI_PM_CTRL_STATE_MASK  macro  include/uapi/linux/pci_regs.h  243  #define PCI_PM_CTRL_STATE_MASK 0x0003
PCI_PM_CTRL_NO_SOFT_RESET  macro  include/uapi/linux/pci_regs.h  244  #define PCI_PM_CTRL_NO_SOFT_RESET 0x0008
PCI_PM_CTRL_PME_ENABLE  macro  include/uapi/linux/pci_regs.h  245  #define PCI_PM_CTRL_PME_ENABLE 0x0100
PCI_PM_CTRL_DATA_SEL_MASK  macro  include/uapi/linux/pci_regs.h  246  #define PCI_PM_CTRL_DATA_SEL_MASK 0x1e00
PCI_PM_CTRL_DATA_SCALE_MASK  macro  include/uapi/linux/pci_regs.h  247  #define PCI_PM_CTRL_DATA_SCALE_MASK 0x6000
PCI_PM_CTRL_PME_STATUS  macro  include/uapi/linux/pci_regs.h  248  #define PCI_PM_CTRL_PME_STATUS 0x8000
PCI_PM_PPB_EXTENSIONS  macro  include/uapi/linux/pci_regs.h  249  #define PCI_PM_PPB_EXTENSIONS 6
PCI_PM_PPB_B2_B3  macro  include/uapi/linux/pci_regs.h  250  #define PCI_PM_PPB_B2_B3 0x40
PCI_PM_BPCC_ENABLE  macro  include/uapi/linux/pci_regs.h  251  #define PCI_PM_BPCC_ENABLE 0x80
PCI_PM_DATA_REGISTER  macro  include/uapi/linux/pci_regs.h  252  #define PCI_PM_DATA_REGISTER 7
PCI_PM_SIZEOF  macro  include/uapi/linux/pci_regs.h  253  #define PCI_PM_SIZEOF 8
PCI_AGP_VERSION  macro  include/uapi/linux/pci_regs.h  257  #define PCI_AGP_VERSION 2
PCI_AGP_RFU  macro  include/uapi/linux/pci_regs.h  258  #define PCI_AGP_RFU 3
PCI_AGP_STATUS  macro  include/uapi/linux/pci_regs.h  259  #define PCI_AGP_STATUS 4
PCI_AGP_STATUS_RQ_MASK  macro  include/uapi/linux/pci_regs.h  260  #define PCI_AGP_STATUS_RQ_MASK 0xff000000
PCI_AGP_STATUS_SBA  macro  include/uapi/linux/pci_regs.h  261  #define PCI_AGP_STATUS_SBA 0x0200
PCI_AGP_STATUS_64BIT  macro  include/uapi/linux/pci_regs.h  262  #define PCI_AGP_STATUS_64BIT 0x0020
PCI_AGP_STATUS_FW  macro  include/uapi/linux/pci_regs.h  263  #define PCI_AGP_STATUS_FW 0x0010
PCI_AGP_STATUS_RATE4  macro  include/uapi/linux/pci_regs.h  264  #define PCI_AGP_STATUS_RATE4 0x0004
PCI_AGP_STATUS_RATE2  macro  include/uapi/linux/pci_regs.h  265  #define PCI_AGP_STATUS_RATE2 0x0002
PCI_AGP_STATUS_RATE1  macro  include/uapi/linux/pci_regs.h  266  #define PCI_AGP_STATUS_RATE1 0x0001
PCI_AGP_COMMAND  macro  include/uapi/linux/pci_regs.h  267  #define PCI_AGP_COMMAND 8
PCI_AGP_COMMAND_RQ_MASK  macro  include/uapi/linux/pci_regs.h  268  #define PCI_AGP_COMMAND_RQ_MASK 0xff000000
PCI_AGP_COMMAND_SBA  macro  include/uapi/linux/pci_regs.h  269  #define PCI_AGP_COMMAND_SBA 0x0200
PCI_AGP_COMMAND_AGP  macro  include/uapi/linux/pci_regs.h  270  #define PCI_AGP_COMMAND_AGP 0x0100
PCI_AGP_COMMAND_64BIT  macro  include/uapi/linux/pci_regs.h  271  #define PCI_AGP_COMMAND_64BIT 0x0020
PCI_AGP_COMMAND_FW  macro  include/uapi/linux/pci_regs.h  272  #define PCI_AGP_COMMAND_FW 0x0010
PCI_AGP_COMMAND_RATE4  macro  include/uapi/linux/pci_regs.h  273  #define PCI_AGP_COMMAND_RATE4 0x0004
PCI_AGP_COMMAND_RATE2  macro  include/uapi/linux/pci_regs.h  274  #define PCI_AGP_COMMAND_RATE2 0x0002
PCI_AGP_COMMAND_RATE1  macro  include/uapi/linux/pci_regs.h  275  #define PCI_AGP_COMMAND_RATE1 0x0001
PCI_AGP_SIZEOF  macro  include/uapi/linux/pci_regs.h  276  #define PCI_AGP_SIZEOF 12
PCI_VPD_ADDR  macro  include/uapi/linux/pci_regs.h  280  #define PCI_VPD_ADDR 2
PCI_VPD_ADDR_MASK  macro  include/uapi/linux/pci_regs.h  281  #define PCI_VPD_ADDR_MASK 0x7fff
PCI_VPD_ADDR_F  macro  include/uapi/linux/pci_regs.h  282  #define PCI_VPD_ADDR_F 0x8000
PCI_VPD_DATA  macro  include/uapi/linux/pci_regs.h  283  #define PCI_VPD_DATA 4
PCI_CAP_VPD_SIZEOF  macro  include/uapi/linux/pci_regs.h  284  #define PCI_CAP_VPD_SIZEOF 8
PCI_SID_ESR  macro  include/uapi/linux/pci_regs.h  288  #define PCI_SID_ESR 2
PCI_SID_ESR_NSLOTS  macro  include/uapi/linux/pci_regs.h  289  #define PCI_SID_ESR_NSLOTS 0x1f
PCI_SID_ESR_FIC  macro  include/uapi/linux/pci_regs.h  290  #define PCI_SID_ESR_FIC 0x20
PCI_SID_CHASSIS_NR  macro  include/uapi/linux/pci_regs.h  291  #define PCI_SID_CHASSIS_NR 3
PCI_MSI_FLAGS  macro  include/uapi/linux/pci_regs.h  295  #define PCI_MSI_FLAGS 2
PCI_MSI_FLAGS_64BIT  macro  include/uapi/linux/pci_regs.h  296  #define PCI_MSI_FLAGS_64BIT 0x80
PCI_MSI_FLAGS_QSIZE  macro  include/uapi/linux/pci_regs.h  297  #define PCI_MSI_FLAGS_QSIZE 0x70
PCI_MSI_FLAGS_QMASK  macro  include/uapi/linux/pci_regs.h  298  #define PCI_MSI_FLAGS_QMASK 0x0e
PCI_MSI_FLAGS_ENABLE  macro  include/uapi/linux/pci_regs.h  299  #define PCI_MSI_FLAGS_ENABLE 0x01
PCI_MSI_FLAGS_MASKBIT  macro  include/uapi/linux/pci_regs.h  300  #define PCI_MSI_FLAGS_MASKBIT 0x100
PCI_MSI_RFU  macro  include/uapi/linux/pci_regs.h  301  #define PCI_MSI_RFU 3
PCI_MSI_ADDRESS_LO  macro  include/uapi/linux/pci_regs.h  302  #define PCI_MSI_ADDRESS_LO 4
PCI_MSI_ADDRESS_HI  macro  include/uapi/linux/pci_regs.h  303  #define PCI_MSI_ADDRESS_HI 8
PCI_MSI_DATA_32  macro  include/uapi/linux/pci_regs.h  304  #define PCI_MSI_DATA_32 8
PCI_MSI_MASK_32  macro  include/uapi/linux/pci_regs.h  305  #define PCI_MSI_MASK_32 12
PCI_MSI_PENDING_32  macro  include/uapi/linux/pci_regs.h  306  #define PCI_MSI_PENDING_32 16
PCI_MSI_DATA_64  macro  include/uapi/linux/pci_regs.h  307  #define PCI_MSI_DATA_64 12
PCI_MSI_MASK_64  macro  include/uapi/linux/pci_regs.h  308  #define PCI_MSI_MASK_64 16
PCI_MSI_PENDING_64  macro  include/uapi/linux/pci_regs.h  309  #define PCI_MSI_PENDING_64 20
PCI_MSIX_FLAGS  macro  include/uapi/linux/pci_regs.h  312  #define PCI_MSIX_FLAGS 2
PCI_MSIX_FLAGS_QSIZE  macro  include/uapi/linux/pci_regs.h  313  #define PCI_MSIX_FLAGS_QSIZE 0x7FF
PCI_MSIX_FLAGS_ENABLE  macro  include/uapi/linux/pci_regs.h  314  #define PCI_MSIX_FLAGS_ENABLE (1 << 15)
PCI_MSIX_FLAGS_MASKALL  macro  include/uapi/linux/pci_regs.h  315  #define PCI_MSIX_FLAGS_MASKALL (1 << 14)
PCI_MSIX_TABLE  macro  include/uapi/linux/pci_regs.h  316  #define PCI_MSIX_TABLE 4
PCI_MSIX_PBA  macro  include/uapi/linux/pci_regs.h  317  #define PCI_MSIX_PBA 8
PCI_MSIX_FLAGS_BIRMASK  macro  include/uapi/linux/pci_regs.h  318  #define PCI_MSIX_FLAGS_BIRMASK (7 << 0)
PCI_CAP_MSIX_SIZEOF  macro  include/uapi/linux/pci_regs.h  319  #define PCI_CAP_MSIX_SIZEOF 12
PCI_MSIX_ENTRY_SIZE  macro  include/uapi/linux/pci_regs.h  322  #define PCI_MSIX_ENTRY_SIZE 16
PCI_MSIX_ENTRY_LOWER_ADDR  macro  include/uapi/linux/pci_regs.h  323  #define PCI_MSIX_ENTRY_LOWER_ADDR 0
PCI_MSIX_ENTRY_UPPER_ADDR  macro  include/uapi/linux/pci_regs.h  324  #define PCI_MSIX_ENTRY_UPPER_ADDR 4
PCI_MSIX_ENTRY_DATA  macro  include/uapi/linux/pci_regs.h  325  #define PCI_MSIX_ENTRY_DATA 8
PCI_MSIX_ENTRY_VECTOR_CTRL  macro  include/uapi/linux/pci_regs.h  326  #define PCI_MSIX_ENTRY_VECTOR_CTRL 12
PCI_MSIX_ENTRY_CTRL_MASKBIT  macro  include/uapi/linux/pci_regs.h  327  #define PCI_MSIX_ENTRY_CTRL_MASKBIT 1
PCI_CHSWP_CSR  macro  include/uapi/linux/pci_regs.h  331  #define PCI_CHSWP_CSR 2
PCI_CHSWP_DHA  macro  include/uapi/linux/pci_regs.h  332  #define PCI_CHSWP_DHA 0x01
PCI_CHSWP_EIM  macro  include/uapi/linux/pci_regs.h  333  #define PCI_CHSWP_EIM 0x02
PCI_CHSWP_PIE  macro  include/uapi/linux/pci_regs.h  334  #define PCI_CHSWP_PIE 0x04
PCI_CHSWP_LOO  macro  include/uapi/linux/pci_regs.h  335  #define PCI_CHSWP_LOO 0x08
PCI_CHSWP_PI  macro  include/uapi/linux/pci_regs.h  336  #define PCI_CHSWP_PI 0x30
PCI_CHSWP_EXT  macro  include/uapi/linux/pci_regs.h  337  #define PCI_CHSWP_EXT 0x40
PCI_CHSWP_INS  macro  include/uapi/linux/pci_regs.h  338  #define PCI_CHSWP_INS 0x80
PCI_AF_LENGTH  macro  include/uapi/linux/pci_regs.h  342  #define PCI_AF_LENGTH 2
PCI_AF_CAP  macro  include/uapi/linux/pci_regs.h  343  #define PCI_AF_CAP 3
PCI_AF_CAP_TP  macro  include/uapi/linux/pci_regs.h  344  #define PCI_AF_CAP_TP 0x01
PCI_AF_CAP_FLR  macro  include/uapi/linux/pci_regs.h  345  #define PCI_AF_CAP_FLR 0x02
PCI_AF_CTRL  macro  include/uapi/linux/pci_regs.h  346  #define PCI_AF_CTRL 4
PCI_AF_CTRL_FLR  macro  include/uapi/linux/pci_regs.h  347  #define PCI_AF_CTRL_FLR 0x01
PCI_AF_STATUS  macro  include/uapi/linux/pci_regs.h  348  #define PCI_AF_STATUS 5
PCI_AF_STATUS_TP  macro  include/uapi/linux/pci_regs.h  349  #define PCI_AF_STATUS_TP 0x01
PCI_CAP_AF_SIZEOF  macro  include/uapi/linux/pci_regs.h  350  #define PCI_CAP_AF_SIZEOF 6
PCI_X_CMD  macro  include/uapi/linux/pci_regs.h  354  #define PCI_X_CMD 2
PCI_X_CMD_DPERR_E  macro  include/uapi/linux/pci_regs.h  355  #define PCI_X_CMD_DPERR_E 0x0001
PCI_X_CMD_ERO  macro  include/uapi/linux/pci_regs.h  356  #define PCI_X_CMD_ERO 0x0002
PCI_X_CMD_READ_512  macro  include/uapi/linux/pci_regs.h  357  #define PCI_X_CMD_READ_512 0x0000
PCI_X_CMD_READ_1K  macro  include/uapi/linux/pci_regs.h  358  #define PCI_X_CMD_READ_1K 0x0004
PCI_X_CMD_READ_2K  macro  include/uapi/linux/pci_regs.h  359  #define PCI_X_CMD_READ_2K 0x0008
PCI_X_CMD_READ_4K  macro  include/uapi/linux/pci_regs.h  360  #define PCI_X_CMD_READ_4K 0x000c
PCI_X_CMD_MAX_READ  macro  include/uapi/linux/pci_regs.h  361  #define PCI_X_CMD_MAX_READ 0x000c
PCI_X_CMD_SPLIT_1  macro  include/uapi/linux/pci_regs.h  363  #define PCI_X_CMD_SPLIT_1 0x0000
PCI_X_CMD_SPLIT_2  macro  include/uapi/linux/pci_regs.h  364  #define PCI_X_CMD_SPLIT_2 0x0010
PCI_X_CMD_SPLIT_3  macro  include/uapi/linux/pci_regs.h  365  #define PCI_X_CMD_SPLIT_3 0x0020
PCI_X_CMD_SPLIT_4  macro  include/uapi/linux/pci_regs.h  366  #define PCI_X_CMD_SPLIT_4 0x0030
PCI_X_CMD_SPLIT_8  macro  include/uapi/linux/pci_regs.h  367  #define PCI_X_CMD_SPLIT_8 0x0040
PCI_X_CMD_SPLIT_12  macro  include/uapi/linux/pci_regs.h  368  #define PCI_X_CMD_SPLIT_12 0x0050
PCI_X_CMD_SPLIT_16  macro  include/uapi/linux/pci_regs.h  369  #define PCI_X_CMD_SPLIT_16 0x0060
PCI_X_CMD_SPLIT_32  macro  include/uapi/linux/pci_regs.h  370  #define PCI_X_CMD_SPLIT_32 0x0070
PCI_X_CMD_MAX_SPLIT  macro  include/uapi/linux/pci_regs.h  371  #define PCI_X_CMD_MAX_SPLIT 0x0070
PCI_X_CMD_VERSION  macro  include/uapi/linux/pci_regs.h  372  #define PCI_X_CMD_VERSION(x) (((x) >> 12) & 3)
PCI_X_STATUS  macro  include/uapi/linux/pci_regs.h  373  #define PCI_X_STATUS 4
PCI_X_STATUS_DEVFN  macro  include/uapi/linux/pci_regs.h  374  #define PCI_X_STATUS_DEVFN 0x000000ff
PCI_X_STATUS_BUS  macro  include/uapi/linux/pci_regs.h  375  #define PCI_X_STATUS_BUS 0x0000ff00
PCI_X_STATUS_64BIT  macro  include/uapi/linux/pci_regs.h  376  #define PCI_X_STATUS_64BIT 0x00010000
PCI_X_STATUS_133MHZ  macro  include/uapi/linux/pci_regs.h  377  #define PCI_X_STATUS_133MHZ 0x00020000
PCI_X_STATUS_SPL_DISC  macro  include/uapi/linux/pci_regs.h  378  #define PCI_X_STATUS_SPL_DISC 0x00040000
PCI_X_STATUS_UNX_SPL  macro  include/uapi/linux/pci_regs.h  379  #define PCI_X_STATUS_UNX_SPL 0x00080000
PCI_X_STATUS_COMPLEX  macro  include/uapi/linux/pci_regs.h  380  #define PCI_X_STATUS_COMPLEX 0x00100000
PCI_X_STATUS_MAX_READ  macro  include/uapi/linux/pci_regs.h  381  #define PCI_X_STATUS_MAX_READ 0x00600000
PCI_X_STATUS_MAX_SPLIT  macro  include/uapi/linux/pci_regs.h  382  #define PCI_X_STATUS_MAX_SPLIT 0x03800000
PCI_X_STATUS_MAX_CUM  macro  include/uapi/linux/pci_regs.h  383  #define PCI_X_STATUS_MAX_CUM 0x1c000000
PCI_X_STATUS_SPL_ERR  macro  include/uapi/linux/pci_regs.h  384  #define PCI_X_STATUS_SPL_ERR 0x20000000
PCI_X_STATUS_266MHZ  macro  include/uapi/linux/pci_regs.h  385  #define PCI_X_STATUS_266MHZ 0x40000000
PCI_X_STATUS_533MHZ  macro  include/uapi/linux/pci_regs.h  386  #define PCI_X_STATUS_533MHZ 0x80000000
PCI_X_ECC_CSR  macro  include/uapi/linux/pci_regs.h  387  #define PCI_X_ECC_CSR 8
PCI_CAP_PCIX_SIZEOF_V0  macro  include/uapi/linux/pci_regs.h  388  #define PCI_CAP_PCIX_SIZEOF_V0 8
PCI_CAP_PCIX_SIZEOF_V1  macro  include/uapi/linux/pci_regs.h  389  #define PCI_CAP_PCIX_SIZEOF_V1 24
PCI_CAP_PCIX_SIZEOF_V2  macro  include/uapi/linux/pci_regs.h  390  #define PCI_CAP_PCIX_SIZEOF_V2 PCI_CAP_PCIX_SIZEOF_V1
PCI_X_BRIDGE_SSTATUS  macro  include/uapi/linux/pci_regs.h  394  #define PCI_X_BRIDGE_SSTATUS 2
PCI_X_SSTATUS_64BIT  macro  include/uapi/linux/pci_regs.h  395  #define PCI_X_SSTATUS_64BIT 0x0001
PCI_X_SSTATUS_133MHZ  macro  include/uapi/linux/pci_regs.h  396  #define PCI_X_SSTATUS_133MHZ 0x0002
PCI_X_SSTATUS_FREQ  macro  include/uapi/linux/pci_regs.h  397  #define PCI_X_SSTATUS_FREQ 0x03c0
PCI_X_SSTATUS_VERS  macro  include/uapi/linux/pci_regs.h  398  #define PCI_X_SSTATUS_VERS 0x3000
PCI_X_SSTATUS_V1  macro  include/uapi/linux/pci_regs.h  399  #define PCI_X_SSTATUS_V1 0x1000
PCI_X_SSTATUS_V2  macro  include/uapi/linux/pci_regs.h  400  #define PCI_X_SSTATUS_V2 0x2000
PCI_X_SSTATUS_266MHZ  macro  include/uapi/linux/pci_regs.h  401  #define PCI_X_SSTATUS_266MHZ 0x4000
PCI_X_SSTATUS_533MHZ  macro  include/uapi/linux/pci_regs.h  402  #define PCI_X_SSTATUS_533MHZ 0x8000
PCI_X_BRIDGE_STATUS  macro  include/uapi/linux/pci_regs.h  403  #define PCI_X_BRIDGE_STATUS 4
PCI_SSVID_VENDOR_ID  macro  include/uapi/linux/pci_regs.h  407  #define PCI_SSVID_VENDOR_ID 4
PCI_SSVID_DEVICE_ID  macro  include/uapi/linux/pci_regs.h  408  #define PCI_SSVID_DEVICE_ID 6
PCI_EXP_FLAGS  macro  include/uapi/linux/pci_regs.h  412  #define PCI_EXP_FLAGS 2
PCI_EXP_FLAGS_VERS  macro  include/uapi/linux/pci_regs.h  413  #define PCI_EXP_FLAGS_VERS 0x000f
PCI_EXP_FLAGS_TYPE  macro  include/uapi/linux/pci_regs.h  414  #define PCI_EXP_FLAGS_TYPE 0x00f0
PCI_EXP_TYPE_ENDPOINT  macro  include/uapi/linux/pci_regs.h  415  #define PCI_EXP_TYPE_ENDPOINT 0x0
PCI_EXP_TYPE_LEG_END  macro  include/uapi/linux/pci_regs.h  416  #define PCI_EXP_TYPE_LEG_END 0x1
PCI_EXP_TYPE_ROOT_PORT  macro  include/uapi/linux/pci_regs.h  417  #define PCI_EXP_TYPE_ROOT_PORT 0x4
PCI_EXP_TYPE_UPSTREAM  macro  include/uapi/linux/pci_regs.h  418  #define PCI_EXP_TYPE_UPSTREAM 0x5
PCI_EXP_TYPE_DOWNSTREAM  macro  include/uapi/linux/pci_regs.h  419  #define PCI_EXP_TYPE_DOWNSTREAM 0x6
PCI_EXP_TYPE_PCI_BRIDGE  macro  include/uapi/linux/pci_regs.h  420  #define PCI_EXP_TYPE_PCI_BRIDGE 0x7
PCI_EXP_TYPE_PCIE_BRIDGE  macro  include/uapi/linux/pci_regs.h  421  #define PCI_EXP_TYPE_PCIE_BRIDGE 0x8
PCI_EXP_TYPE_RC_END  macro  include/uapi/linux/pci_regs.h  422  #define PCI_EXP_TYPE_RC_END 0x9
PCI_EXP_TYPE_RC_EC  macro  include/uapi/linux/pci_regs.h  423  #define PCI_EXP_TYPE_RC_EC 0xa
PCI_EXP_FLAGS_SLOT  macro  include/uapi/linux/pci_regs.h  424  #define PCI_EXP_FLAGS_SLOT 0x0100
PCI_EXP_FLAGS_IRQ  macro  include/uapi/linux/pci_regs.h  425  #define PCI_EXP_FLAGS_IRQ 0x3e00
PCI_EXP_DEVCAP  macro  include/uapi/linux/pci_regs.h  426  #define PCI_EXP_DEVCAP 4
PCI_EXP_DEVCAP_PAYLOAD  macro  include/uapi/linux/pci_regs.h  427  #define PCI_EXP_DEVCAP_PAYLOAD 0x07
PCI_EXP_DEVCAP_PHANTOM  macro  include/uapi/linux/pci_regs.h  428  #define PCI_EXP_DEVCAP_PHANTOM 0x18
PCI_EXP_DEVCAP_EXT_TAG  macro  include/uapi/linux/pci_regs.h  429  #define PCI_EXP_DEVCAP_EXT_TAG 0x20
PCI_EXP_DEVCAP_L0S  macro  include/uapi/linux/pci_regs.h  430  #define PCI_EXP_DEVCAP_L0S 0x1c0
PCI_EXP_DEVCAP_L1  macro  include/uapi/linux/pci_regs.h  431  #define PCI_EXP_DEVCAP_L1 0xe00
PCI_EXP_DEVCAP_ATN_BUT  macro  include/uapi/linux/pci_regs.h  432  #define PCI_EXP_DEVCAP_ATN_BUT 0x1000
PCI_EXP_DEVCAP_ATN_IND  macro  include/uapi/linux/pci_regs.h  433  #define PCI_EXP_DEVCAP_ATN_IND 0x2000
PCI_EXP_DEVCAP_PWR_IND  macro  include/uapi/linux/pci_regs.h  434  #define PCI_EXP_DEVCAP_PWR_IND 0x4000
PCI_EXP_DEVCAP_RBER  macro  include/uapi/linux/pci_regs.h  435  #define PCI_EXP_DEVCAP_RBER 0x8000
PCI_EXP_DEVCAP_PWR_VAL  macro  include/uapi/linux/pci_regs.h  436  #define PCI_EXP_DEVCAP_PWR_VAL 0x3fc0000
PCI_EXP_DEVCAP_PWR_SCL  macro  include/uapi/linux/pci_regs.h  437  #define PCI_EXP_DEVCAP_PWR_SCL 0xc000000
PCI_EXP_DEVCAP_FLR  macro  include/uapi/linux/pci_regs.h  438  #define PCI_EXP_DEVCAP_FLR 0x10000000
PCI_EXP_DEVCTL  macro  include/uapi/linux/pci_regs.h  439  #define PCI_EXP_DEVCTL 8
PCI_EXP_DEVCTL_CERE  macro  include/uapi/linux/pci_regs.h  440  #define PCI_EXP_DEVCTL_CERE 0x0001
PCI_EXP_DEVCTL_NFERE  macro  include/uapi/linux/pci_regs.h  441  #define PCI_EXP_DEVCTL_NFERE 0x0002
PCI_EXP_DEVCTL_FERE  macro  include/uapi/linux/pci_regs.h  442  #define PCI_EXP_DEVCTL_FERE 0x0004
PCI_EXP_DEVCTL_URRE  macro  include/uapi/linux/pci_regs.h  443  #define PCI_EXP_DEVCTL_URRE 0x0008
PCI_EXP_DEVCTL_RELAX_EN  macro  include/uapi/linux/pci_regs.h  444  #define PCI_EXP_DEVCTL_RELAX_EN 0x0010
PCI_EXP_DEVCTL_PAYLOAD  macro  include/uapi/linux/pci_regs.h  445  #define PCI_EXP_DEVCTL_PAYLOAD 0x00e0
PCI_EXP_DEVCTL_EXT_TAG  macro  include/uapi/linux/pci_regs.h  446  #define PCI_EXP_DEVCTL_EXT_TAG 0x0100
PCI_EXP_DEVCTL_PHANTOM  macro  include/uapi/linux/pci_regs.h  447  #define PCI_EXP_DEVCTL_PHANTOM 0x0200
PCI_EXP_DEVCTL_AUX_PME  macro  include/uapi/linux/pci_regs.h  448  #define PCI_EXP_DEVCTL_AUX_PME 0x0400
PCI_EXP_DEVCTL_NOSNOOP_EN  macro  include/uapi/linux/pci_regs.h  449  #define PCI_EXP_DEVCTL_NOSNOOP_EN 0x0800
PCI_EXP_DEVCTL_READRQ  macro  include/uapi/linux/pci_regs.h  450  #define PCI_EXP_DEVCTL_READRQ 0x7000
PCI_EXP_DEVCTL_BCR_FLR  macro  include/uapi/linux/pci_regs.h  451  #define PCI_EXP_DEVCTL_BCR_FLR 0x8000
PCI_EXP_DEVSTA  macro  include/uapi/linux/pci_regs.h  452  #define PCI_EXP_DEVSTA 10
PCI_EXP_DEVSTA_CED  macro  include/uapi/linux/pci_regs.h  453  #define PCI_EXP_DEVSTA_CED 0x01
PCI_EXP_DEVSTA_NFED  macro  include/uapi/linux/pci_regs.h  454  #define PCI_EXP_DEVSTA_NFED 0x02
PCI_EXP_DEVSTA_FED  macro  include/uapi/linux/pci_regs.h  455  #define PCI_EXP_DEVSTA_FED 0x04
PCI_EXP_DEVSTA_URD  macro  include/uapi/linux/pci_regs.h  456  #define PCI_EXP_DEVSTA_URD 0x08
PCI_EXP_DEVSTA_AUXPD  macro  include/uapi/linux/pci_regs.h  457  #define PCI_EXP_DEVSTA_AUXPD 0x10
PCI_EXP_DEVSTA_TRPND  macro  include/uapi/linux/pci_regs.h  458  #define PCI_EXP_DEVSTA_TRPND 0x20
PCI_EXP_LNKCAP  macro  include/uapi/linux/pci_regs.h  459  #define PCI_EXP_LNKCAP 12
PCI_EXP_LNKCAP_SLS  macro  include/uapi/linux/pci_regs.h  460  #define PCI_EXP_LNKCAP_SLS 0x0000000f
PCI_EXP_LNKCAP_SLS_2_5GB  macro  include/uapi/linux/pci_regs.h  461  #define PCI_EXP_LNKCAP_SLS_2_5GB 0x1
PCI_EXP_LNKCAP_SLS_5_0GB  macro  include/uapi/linux/pci_regs.h  462  #define PCI_EXP_LNKCAP_SLS_5_0GB 0x2
PCI_EXP_LNKCAP_MLW  macro  include/uapi/linux/pci_regs.h  463  #define PCI_EXP_LNKCAP_MLW 0x000003f0
PCI_EXP_LNKCAP_ASPMS  macro  include/uapi/linux/pci_regs.h  464  #define PCI_EXP_LNKCAP_ASPMS 0x00000c00
PCI_EXP_LNKCAP_L0SEL  macro  include/uapi/linux/pci_regs.h  465  #define PCI_EXP_LNKCAP_L0SEL 0x00007000
PCI_EXP_LNKCAP_L1EL  macro  include/uapi/linux/pci_regs.h  466  #define PCI_EXP_LNKCAP_L1EL 0x00038000
PCI_EXP_LNKCAP_CLKPM  macro  include/uapi/linux/pci_regs.h  467  #define PCI_EXP_LNKCAP_CLKPM 0x00040000
PCI_EXP_LNKCAP_SDERC  macro  include/uapi/linux/pci_regs.h  468  #define PCI_EXP_LNKCAP_SDERC 0x00080000
PCI_EXP_LNKCAP_DLLLARC  macro  include/uapi/linux/pci_regs.h  469  #define PCI_EXP_LNKCAP_DLLLARC 0x00100000
PCI_EXP_LNKCAP_LBNC  macro  include/uapi/linux/pci_regs.h  470  #define PCI_EXP_LNKCAP_LBNC 0x00200000
PCI_EXP_LNKCAP_PN  macro  include/uapi/linux/pci_regs.h  471  #define PCI_EXP_LNKCAP_PN 0xff000000
PCI_EXP_LNKCTL  macro  include/uapi/linux/pci_regs.h  472  #define PCI_EXP_LNKCTL 16
PCI_EXP_LNKCTL_ASPMC  macro  include/uapi/linux/pci_regs.h  473  #define PCI_EXP_LNKCTL_ASPMC 0x0003
PCI_EXP_LNKCTL_ASPM_L0S  macro  include/uapi/linux/pci_regs.h  474  #define PCI_EXP_LNKCTL_ASPM_L0S 0x01
PCI_EXP_LNKCTL_ASPM_L1  macro  include/uapi/linux/pci_regs.h  475  #define PCI_EXP_LNKCTL_ASPM_L1 0x02
PCI_EXP_LNKCTL_RCB  macro  include/uapi/linux/pci_regs.h  476  #define PCI_EXP_LNKCTL_RCB 0x0008
PCI_EXP_LNKCTL_LD  macro  include/uapi/linux/pci_regs.h  477  #define PCI_EXP_LNKCTL_LD 0x0010
PCI_EXP_LNKCTL_RL  macro  include/uapi/linux/pci_regs.h  478  #define PCI_EXP_LNKCTL_RL 0x0020
PCI_EXP_LNKCTL_CCC  macro  include/uapi/linux/pci_regs.h  479  #define PCI_EXP_LNKCTL_CCC 0x0040
PCI_EXP_LNKCTL_ES  macro  include/uapi/linux/pci_regs.h  480  #define PCI_EXP_LNKCTL_ES 0x0080
PCI_EXP_LNKCTL_CLKREQ_EN  macro  include/uapi/linux/pci_regs.h  481  #define PCI_EXP_LNKCTL_CLKREQ_EN 0x100
PCI_EXP_LNKCTL_HAWD  macro  include/uapi/linux/pci_regs.h  482  #define PCI_EXP_LNKCTL_HAWD 0x0200
PCI_EXP_LNKCTL_LBMIE  macro  include/uapi/linux/pci_regs.h  483  #define PCI_EXP_LNKCTL_LBMIE 0x0400
PCI_EXP_LNKCTL_LABIE  macro  include/uapi/linux/pci_regs.h  484  #define PCI_EXP_LNKCTL_LABIE 0x0800
PCI_EXP_LNKSTA  macro  include/uapi/linux/pci_regs.h  485  #define PCI_EXP_LNKSTA 18
PCI_EXP_LNKSTA_CLS  macro  include/uapi/linux/pci_regs.h  486  #define PCI_EXP_LNKSTA_CLS 0x000f
PCI_EXP_LNKSTA_CLS_2_5GB  macro  include/uapi/linux/pci_regs.h  487  #define PCI_EXP_LNKSTA_CLS_2_5GB 0x01
PCI_EXP_LNKSTA_CLS_5_0GB  macro  include/uapi/linux/pci_regs.h  488  #define PCI_EXP_LNKSTA_CLS_5_0GB 0x02
PCI_EXP_LNKSTA_NLW  macro  include/uapi/linux/pci_regs.h  489  #define PCI_EXP_LNKSTA_NLW 0x03f0
PCI_EXP_LNKSTA_NLW_SHIFT  macro  include/uapi/linux/pci_regs.h  490  #define PCI_EXP_LNKSTA_NLW_SHIFT 4
PCI_EXP_LNKSTA_LT  macro  include/uapi/linux/pci_regs.h  491  #define PCI_EXP_LNKSTA_LT 0x0800
PCI_EXP_LNKSTA_SLC  macro  include/uapi/linux/pci_regs.h  492  #define PCI_EXP_LNKSTA_SLC 0x1000
PCI_EXP_LNKSTA_DLLLA  macro  include/uapi/linux/pci_regs.h  493  #define PCI_EXP_LNKSTA_DLLLA 0x2000
PCI_EXP_LNKSTA_LBMS  macro  include/uapi/linux/pci_regs.h  494  #define PCI_EXP_LNKSTA_LBMS 0x4000
PCI_EXP_LNKSTA_LABS  macro  include/uapi/linux/pci_regs.h  495  #define PCI_EXP_LNKSTA_LABS 0x8000
PCI_CAP_EXP_ENDPOINT_SIZEOF_V1  macro  include/uapi/linux/pci_regs.h  496  #define PCI_CAP_EXP_ENDPOINT_SIZEOF_V1 20
PCI_EXP_SLTCAP  macro  include/uapi/linux/pci_regs.h  497  #define PCI_EXP_SLTCAP 20
PCI_EXP_SLTCAP_ABP  macro  include/uapi/linux/pci_regs.h  498  #define PCI_EXP_SLTCAP_ABP 0x00000001
PCI_EXP_SLTCAP_PCP  macro  include/uapi/linux/pci_regs.h  499  #define PCI_EXP_SLTCAP_PCP 0x00000002
PCI_EXP_SLTCAP_MRLSP  macro  include/uapi/linux/pci_regs.h  500  #define PCI_EXP_SLTCAP_MRLSP 0x00000004
PCI_EXP_SLTCAP_AIP  macro  include/uapi/linux/pci_regs.h  501  #define PCI_EXP_SLTCAP_AIP 0x00000008
PCI_EXP_SLTCAP_PIP  macro  include/uapi/linux/pci_regs.h  502  #define PCI_EXP_SLTCAP_PIP 0x00000010
PCI_EXP_SLTCAP_HPS  macro  include/uapi/linux/pci_regs.h  503  #define PCI_EXP_SLTCAP_HPS 0x00000020
PCI_EXP_SLTCAP_HPC  macro  include/uapi/linux/pci_regs.h  504  #define PCI_EXP_SLTCAP_HPC 0x00000040
PCI_EXP_SLTCAP_SPLV  macro  include/uapi/linux/pci_regs.h  505  #define PCI_EXP_SLTCAP_SPLV 0x00007f80
PCI_EXP_SLTCAP_SPLS  macro  include/uapi/linux/pci_regs.h  506  #define PCI_EXP_SLTCAP_SPLS 0x00018000
PCI_EXP_SLTCAP_EIP  macro  include/uapi/linux/pci_regs.h  507  #define PCI_EXP_SLTCAP_EIP 0x00020000
PCI_EXP_SLTCAP_NCCS  macro  include/uapi/linux/pci_regs.h  508  #define PCI_EXP_SLTCAP_NCCS 0x00040000
PCI_EXP_SLTCAP_PSN  macro  include/uapi/linux/pci_regs.h  509  #define PCI_EXP_SLTCAP_PSN 0xfff80000
PCI_EXP_SLTCTL  macro  include/uapi/linux/pci_regs.h  510  #define PCI_EXP_SLTCTL 24
PCI_EXP_SLTCTL_ABPE  macro  include/uapi/linux/pci_regs.h  511  #define PCI_EXP_SLTCTL_ABPE 0x0001
PCI_EXP_SLTCTL_PFDE  macro  include/uapi/linux/pci_regs.h  512  #define PCI_EXP_SLTCTL_PFDE 0x0002
PCI_EXP_SLTCTL_MRLSCE  macro  include/uapi/linux/pci_regs.h  513  #define PCI_EXP_SLTCTL_MRLSCE 0x0004
PCI_EXP_SLTCTL_PDCE  macro  include/uapi/linux/pci_regs.h  514  #define PCI_EXP_SLTCTL_PDCE 0x0008
PCI_EXP_SLTCTL_CCIE  macro  include/uapi/linux/pci_regs.h  515  #define PCI_EXP_SLTCTL_CCIE 0x0010
PCI_EXP_SLTCTL_HPIE  macro  include/uapi/linux/pci_regs.h  516  #define PCI_EXP_SLTCTL_HPIE 0x0020
PCI_EXP_SLTCTL_AIC  macro  include/uapi/linux/pci_regs.h  517  #define PCI_EXP_SLTCTL_AIC 0x00c0
PCI_EXP_SLTCTL_PIC  macro  include/uapi/linux/pci_regs.h  518  #define PCI_EXP_SLTCTL_PIC 0x0300
PCI_EXP_SLTCTL_PCC  macro  include/uapi/linux/pci_regs.h  519  #define PCI_EXP_SLTCTL_PCC 0x0400
PCI_EXP_SLTCTL_EIC  macro  include/uapi/linux/pci_regs.h  520  #define PCI_EXP_SLTCTL_EIC 0x0800
PCI_EXP_SLTCTL_DLLSCE  macro  include/uapi/linux/pci_regs.h  521  #define PCI_EXP_SLTCTL_DLLSCE 0x1000
PCI_EXP_SLTSTA  macro  include/uapi/linux/pci_regs.h  522  #define PCI_EXP_SLTSTA 26
PCI_EXP_SLTSTA_ABP  macro  include/uapi/linux/pci_regs.h  523  #define PCI_EXP_SLTSTA_ABP 0x0001
PCI_EXP_SLTSTA_PFD  macro  include/uapi/linux/pci_regs.h  524  #define PCI_EXP_SLTSTA_PFD 0x0002
PCI_EXP_SLTSTA_MRLSC  macro  include/uapi/linux/pci_regs.h  525  #define PCI_EXP_SLTSTA_MRLSC 0x0004
PCI_EXP_SLTSTA_PDC  macro  include/uapi/linux/pci_regs.h  526  #define PCI_EXP_SLTSTA_PDC 0x0008
PCI_EXP_SLTSTA_CC  macro  include/uapi/linux/pci_regs.h  527  #define PCI_EXP_SLTSTA_CC 0x0010
PCI_EXP_SLTSTA_MRLSS  macro  include/uapi/linux/pci_regs.h  528  #define PCI_EXP_SLTSTA_MRLSS 0x0020
PCI_EXP_SLTSTA_PDS  macro  include/uapi/linux/pci_regs.h  529  #define PCI_EXP_SLTSTA_PDS 0x0040
PCI_EXP_SLTSTA_EIS  macro  include/uapi/linux/pci_regs.h  530  #define PCI_EXP_SLTSTA_EIS 0x0080
PCI_EXP_SLTSTA_DLLSC  macro  include/uapi/linux/pci_regs.h  531  #define PCI_EXP_SLTSTA_DLLSC 0x0100
PCI_EXP_RTCTL  macro  include/uapi/linux/pci_regs.h  532  #define PCI_EXP_RTCTL 28
PCI_EXP_RTCTL_SECEE  macro  include/uapi/linux/pci_regs.h  533  #define PCI_EXP_RTCTL_SECEE 0x01
PCI_EXP_RTCTL_SENFEE  macro  include/uapi/linux/pci_regs.h  534  #define PCI_EXP_RTCTL_SENFEE 0x02
PCI_EXP_RTCTL_SEFEE  macro  include/uapi/linux/pci_regs.h  535  #define PCI_EXP_RTCTL_SEFEE 0x04
PCI_EXP_RTCTL_PMEIE  macro  include/uapi/linux/pci_regs.h  536  #define PCI_EXP_RTCTL_PMEIE 0x08
PCI_EXP_RTCTL_CRSSVE  macro  include/uapi/linux/pci_regs.h  537  #define PCI_EXP_RTCTL_CRSSVE 0x10
PCI_EXP_RTCAP  macro  include/uapi/linux/pci_regs.h  538  #define PCI_EXP_RTCAP 30
PCI_EXP_RTSTA  macro  include/uapi/linux/pci_regs.h  539  #define PCI_EXP_RTSTA 32
PCI_EXP_RTSTA_PME  macro  include/uapi/linux/pci_regs.h  540  #define PCI_EXP_RTSTA_PME 0x10000
PCI_EXP_RTSTA_PENDING  macro  include/uapi/linux/pci_regs.h  541  #define PCI_EXP_RTSTA_PENDING 0x20000
PCI_EXP_DEVCAP2  macro  include/uapi/linux/pci_regs.h  548  #define PCI_EXP_DEVCAP2 36
PCI_EXP_DEVCAP2_ARI  macro  include/uapi/linux/pci_regs.h  549  #define PCI_EXP_DEVCAP2_ARI 0x20
PCI_EXP_DEVCAP2_LTR  macro  include/uapi/linux/pci_regs.h  550  #define PCI_EXP_DEVCAP2_LTR 0x800
PCI_EXP_OBFF_MASK  macro  include/uapi/linux/pci_regs.h  551  #define PCI_EXP_OBFF_MASK 0xc0000
PCI_EXP_OBFF_MSG  macro  include/uapi/linux/pci_regs.h  552  #define PCI_EXP_OBFF_MSG 0x40000
PCI_EXP_OBFF_WAKE  macro  include/uapi/linux/pci_regs.h  553  #define PCI_EXP_OBFF_WAKE 0x80000
PCI_EXP_DEVCTL2  macro  include/uapi/linux/pci_regs.h  554  #define PCI_EXP_DEVCTL2 40
PCI_EXP_DEVCTL2_ARI  macro  include/uapi/linux/pci_regs.h  555  #define PCI_EXP_DEVCTL2_ARI 0x20
PCI_EXP_IDO_REQ_EN  macro  include/uapi/linux/pci_regs.h  556  #define PCI_EXP_IDO_REQ_EN 0x100
PCI_EXP_IDO_CMP_EN  macro  include/uapi/linux/pci_regs.h  557  #define PCI_EXP_IDO_CMP_EN 0x200
PCI_EXP_LTR_EN  macro  include/uapi/linux/pci_regs.h  558  #define PCI_EXP_LTR_EN 0x400
PCI_EXP_OBFF_MSGA_EN  macro  include/uapi/linux/pci_regs.h  559  #define PCI_EXP_OBFF_MSGA_EN 0x2000
PCI_EXP_OBFF_MSGB_EN  macro  include/uapi/linux/pci_regs.h  560  #define PCI_EXP_OBFF_MSGB_EN 0x4000
PCI_EXP_OBFF_WAKE_EN  macro  include/uapi/linux/pci_regs.h  561  #define PCI_EXP_OBFF_WAKE_EN 0x6000
PCI_CAP_EXP_ENDPOINT_SIZEOF_V2  macro  include/uapi/linux/pci_regs.h  562  #define PCI_CAP_EXP_ENDPOINT_SIZEOF_V2 44
PCI_EXP_LNKCAP2  macro  include/uapi/linux/pci_regs.h  563  #define PCI_EXP_LNKCAP2 44
PCI_EXP_LNKCAP2_SLS_2_5GB  macro  include/uapi/linux/pci_regs.h  564  #define PCI_EXP_LNKCAP2_SLS_2_5GB 0x02
PCI_EXP_LNKCAP2_SLS_5_0GB  macro  include/uapi/linux/pci_regs.h  565  #define PCI_EXP_LNKCAP2_SLS_5_0GB 0x04
PCI_EXP_LNKCAP2_SLS_8_0GB  macro  include/uapi/linux/pci_regs.h  566  #define PCI_EXP_LNKCAP2_SLS_8_0GB 0x08
PCI_EXP_LNKCAP2_CROSSLINK  macro  include/uapi/linux/pci_regs.h  567  #define PCI_EXP_LNKCAP2_CROSSLINK 0x100
PCI_EXP_LNKCTL2  macro  include/uapi/linux/pci_regs.h  568  #define PCI_EXP_LNKCTL2 48
PCI_EXP_LNKSTA2  macro  include/uapi/linux/pci_regs.h  569  #define PCI_EXP_LNKSTA2 50
PCI_EXP_SLTCTL2  macro  include/uapi/linux/pci_regs.h  570  #define PCI_EXP_SLTCTL2 56
PCI_EXT_CAP_ID  macro  include/uapi/linux/pci_regs.h  573  #define PCI_EXT_CAP_ID(header) (header & 0x0000ffff)
PCI_EXT_CAP_VER  macro  include/uapi/linux/pci_regs.h  574  #define PCI_EXT_CAP_VER(header) ((header >> 16) & 0xf)
PCI_EXT_CAP_NEXT  macro  include/uapi/linux/pci_regs.h  575  #define PCI_EXT_CAP_NEXT(header) ((header >> 20) & 0xffc)
PCI_EXT_CAP_ID_ERR  macro  include/uapi/linux/pci_regs.h  577  #define PCI_EXT_CAP_ID_ERR 0x01
PCI_EXT_CAP_ID_VC  macro  include/uapi/linux/pci_regs.h  578  #define PCI_EXT_CAP_ID_VC 0x02
PCI_EXT_CAP_ID_DSN  macro  include/uapi/linux/pci_regs.h  579  #define PCI_EXT_CAP_ID_DSN 0x03
PCI_EXT_CAP_ID_PWR  macro  include/uapi/linux/pci_regs.h  580  #define PCI_EXT_CAP_ID_PWR 0x04
PCI_EXT_CAP_ID_RCLD  macro  include/uapi/linux/pci_regs.h  581  #define PCI_EXT_CAP_ID_RCLD 0x05
PCI_EXT_CAP_ID_RCILC  macro  include/uapi/linux/pci_regs.h  582  #define PCI_EXT_CAP_ID_RCILC 0x06
PCI_EXT_CAP_ID_RCEC  macro  include/uapi/linux/pci_regs.h  583  #define PCI_EXT_CAP_ID_RCEC 0x07
PCI_EXT_CAP_ID_MFVC  macro  include/uapi/linux/pci_regs.h  584  #define PCI_EXT_CAP_ID_MFVC 0x08
PCI_EXT_CAP_ID_VC9  macro  include/uapi/linux/pci_regs.h  585  #define PCI_EXT_CAP_ID_VC9 0x09
PCI_EXT_CAP_ID_RCRB  macro  include/uapi/linux/pci_regs.h  586  #define PCI_EXT_CAP_ID_RCRB 0x0A
PCI_EXT_CAP_ID_VNDR  macro  include/uapi/linux/pci_regs.h  587  #define PCI_EXT_CAP_ID_VNDR 0x0B
PCI_EXT_CAP_ID_CAC  macro  include/uapi/linux/pci_regs.h  588  #define PCI_EXT_CAP_ID_CAC 0x0C
PCI_EXT_CAP_ID_ACS  macro  include/uapi/linux/pci_regs.h  589  #define PCI_EXT_CAP_ID_ACS 0x0D
PCI_EXT_CAP_ID_ARI  macro  include/uapi/linux/pci_regs.h  590  #define PCI_EXT_CAP_ID_ARI 0x0E
PCI_EXT_CAP_ID_ATS  macro  include/uapi/linux/pci_regs.h  591  #define PCI_EXT_CAP_ID_ATS 0x0F
PCI_EXT_CAP_ID_SRIOV  macro  include/uapi/linux/pci_regs.h  592  #define PCI_EXT_CAP_ID_SRIOV 0x10
PCI_EXT_CAP_ID_MRIOV  macro  include/uapi/linux/pci_regs.h  593  #define PCI_EXT_CAP_ID_MRIOV 0x11
PCI_EXT_CAP_ID_MCAST  macro  include/uapi/linux/pci_regs.h  594  #define PCI_EXT_CAP_ID_MCAST 0x12
PCI_EXT_CAP_ID_PRI  macro  include/uapi/linux/pci_regs.h  595  #define PCI_EXT_CAP_ID_PRI 0x13
PCI_EXT_CAP_ID_AMD_XXX  macro  include/uapi/linux/pci_regs.h  596  #define PCI_EXT_CAP_ID_AMD_XXX 0x14
PCI_EXT_CAP_ID_REBAR  macro  include/uapi/linux/pci_regs.h  597  #define PCI_EXT_CAP_ID_REBAR 0x15
PCI_EXT_CAP_ID_DPA  macro  include/uapi/linux/pci_regs.h  598  #define PCI_EXT_CAP_ID_DPA 0x16
PCI_EXT_CAP_ID_TPH  macro  include/uapi/linux/pci_regs.h  599  #define PCI_EXT_CAP_ID_TPH 0x17
PCI_EXT_CAP_ID_LTR  macro  include/uapi/linux/pci_regs.h  600  #define PCI_EXT_CAP_ID_LTR 0x18
PCI_EXT_CAP_ID_SECPCI  macro  include/uapi/linux/pci_regs.h  601  #define PCI_EXT_CAP_ID_SECPCI 0x19
PCI_EXT_CAP_ID_PMUX  macro  include/uapi/linux/pci_regs.h  602  #define PCI_EXT_CAP_ID_PMUX 0x1A
PCI_EXT_CAP_ID_PASID  macro  include/uapi/linux/pci_regs.h  603  #define PCI_EXT_CAP_ID_PASID 0x1B
PCI_EXT_CAP_ID_MAX  macro  include/uapi/linux/pci_regs.h  604  #define PCI_EXT_CAP_ID_MAX PCI_EXT_CAP_ID_PASID
PCI_EXT_CAP_DSN_SIZEOF  macro  include/uapi/linux/pci_regs.h  606  #define PCI_EXT_CAP_DSN_SIZEOF 12
PCI_EXT_CAP_MCAST_ENDPOINT_SIZEOF  macro  include/uapi/linux/pci_regs.h  607  #define PCI_EXT_CAP_MCAST_ENDPOINT_SIZEOF 40
PCI_ERR_UNCOR_STATUS  macro  include/uapi/linux/pci_regs.h  610  #define PCI_ERR_UNCOR_STATUS 4
PCI_ERR_UNC_TRAIN  macro  include/uapi/linux/pci_regs.h  611  #define PCI_ERR_UNC_TRAIN 0x00000001
PCI_ERR_UNC_DLP  macro  include/uapi/linux/pci_regs.h  612  #define PCI_ERR_UNC_DLP 0x00000010
PCI_ERR_UNC_SURPDN  macro  include/uapi/linux/pci_regs.h  613  #define PCI_ERR_UNC_SURPDN 0x00000020
PCI_ERR_UNC_POISON_TLP  macro  include/uapi/linux/pci_regs.h  614  #define PCI_ERR_UNC_POISON_TLP 0x00001000
PCI_ERR_UNC_FCP  macro  include/uapi/linux/pci_regs.h  615  #define PCI_ERR_UNC_FCP 0x00002000
PCI_ERR_UNC_COMP_TIME  macro  include/uapi/linux/pci_regs.h  616  #define PCI_ERR_UNC_COMP_TIME 0x00004000
PCI_ERR_UNC_COMP_ABORT  macro  include/uapi/linux/pci_regs.h  617  #define PCI_ERR_UNC_COMP_ABORT 0x00008000
PCI_ERR_UNC_UNX_COMP  macro  include/uapi/linux/pci_regs.h  618  #define PCI_ERR_UNC_UNX_COMP 0x00010000
PCI_ERR_UNC_RX_OVER  macro  include/uapi/linux/pci_regs.h  619  #define PCI_ERR_UNC_RX_OVER 0x00020000
PCI_ERR_UNC_MALF_TLP  macro  include/uapi/linux/pci_regs.h  620  #define PCI_ERR_UNC_MALF_TLP 0x00040000
PCI_ERR_UNC_ECRC  macro  include/uapi/linux/pci_regs.h  621  #define PCI_ERR_UNC_ECRC 0x00080000
PCI_ERR_UNC_UNSUP  macro  include/uapi/linux/pci_regs.h  622  #define PCI_ERR_UNC_UNSUP 0x00100000
PCI_ERR_UNC_ACSV  macro  include/uapi/linux/pci_regs.h  623  #define PCI_ERR_UNC_ACSV 0x00200000
PCI_ERR_UNC_INTN  macro  include/uapi/linux/pci_regs.h  624  #define PCI_ERR_UNC_INTN 0x00400000
PCI_ERR_UNC_MCBTLP  macro  include/uapi/linux/pci_regs.h  625  #define PCI_ERR_UNC_MCBTLP 0x00800000
PCI_ERR_UNC_ATOMEG  macro  include/uapi/linux/pci_regs.h  626  #define PCI_ERR_UNC_ATOMEG 0x01000000
PCI_ERR_UNC_TLPPRE  macro  include/uapi/linux/pci_regs.h  627  #define PCI_ERR_UNC_TLPPRE 0x02000000
PCI_ERR_UNCOR_MASK  macro  include/uapi/linux/pci_regs.h  628  #define PCI_ERR_UNCOR_MASK 8
PCI_ERR_UNCOR_SEVER  macro  include/uapi/linux/pci_regs.h  630  #define PCI_ERR_UNCOR_SEVER 12
PCI_ERR_COR_STATUS  macro  include/uapi/linux/pci_regs.h  632  #define PCI_ERR_COR_STATUS 16
PCI_ERR_COR_RCVR  macro  include/uapi/linux/pci_regs.h  633  #define PCI_ERR_COR_RCVR 0x00000001
PCI_ERR_COR_BAD_TLP  macro  include/uapi/linux/pci_regs.h  634  #define PCI_ERR_COR_BAD_TLP 0x00000040
PCI_ERR_COR_BAD_DLLP  macro  include/uapi/linux/pci_regs.h  635  #define PCI_ERR_COR_BAD_DLLP 0x00000080
PCI_ERR_COR_REP_ROLL  macro  include/uapi/linux/pci_regs.h  636  #define PCI_ERR_COR_REP_ROLL 0x00000100
PCI_ERR_COR_REP_TIMER  macro  include/uapi/linux/pci_regs.h  637  #define PCI_ERR_COR_REP_TIMER 0x00001000
PCI_ERR_COR_ADV_NFAT  macro  include/uapi/linux/pci_regs.h  638  #define PCI_ERR_COR_ADV_NFAT 0x00002000
PCI_ERR_COR_INTERNAL  macro  include/uapi/linux/pci_regs.h  639  #define PCI_ERR_COR_INTERNAL 0x00004000
PCI_ERR_COR_LOG_OVER  macro  include/uapi/linux/pci_regs.h  640  #define PCI_ERR_COR_LOG_OVER 0x00008000
PCI_ERR_COR_MASK  macro  include/uapi/linux/pci_regs.h  641  #define PCI_ERR_COR_MASK 20
PCI_ERR_CAP  macro  include/uapi/linux/pci_regs.h  643  #define PCI_ERR_CAP 24
PCI_ERR_CAP_FEP  macro  include/uapi/linux/pci_regs.h  644  #define PCI_ERR_CAP_FEP(x) ((x) & 31)
PCI_ERR_CAP_ECRC_GENC  macro  include/uapi/linux/pci_regs.h  645  #define PCI_ERR_CAP_ECRC_GENC 0x00000020
PCI_ERR_CAP_ECRC_GENE  macro  include/uapi/linux/pci_regs.h  646  #define PCI_ERR_CAP_ECRC_GENE 0x00000040
PCI_ERR_CAP_ECRC_CHKC  macro  include/uapi/linux/pci_regs.h  647  #define PCI_ERR_CAP_ECRC_CHKC 0x00000080
PCI_ERR_CAP_ECRC_CHKE  macro  include/uapi/linux/pci_regs.h  648  #define PCI_ERR_CAP_ECRC_CHKE 0x00000100
PCI_ERR_HEADER_LOG  macro  include/uapi/linux/pci_regs.h  649  #define PCI_ERR_HEADER_LOG 28
PCI_ERR_ROOT_COMMAND  macro  include/uapi/linux/pci_regs.h  650  #define PCI_ERR_ROOT_COMMAND 44
PCI_ERR_ROOT_CMD_COR_EN  macro  include/uapi/linux/pci_regs.h  652  #define PCI_ERR_ROOT_CMD_COR_EN 0x00000001
PCI_ERR_ROOT_CMD_NONFATAL_EN  macro  include/uapi/linux/pci_regs.h  654  #define PCI_ERR_ROOT_CMD_NONFATAL_EN 0x00000002
PCI_ERR_ROOT_CMD_FATAL_EN  macro  include/uapi/linux/pci_regs.h  656  #define PCI_ERR_ROOT_CMD_FATAL_EN 0x00000004
PCI_ERR_ROOT_STATUS  macro  include/uapi/linux/pci_regs.h  657  #define PCI_ERR_ROOT_STATUS 48
PCI_ERR_ROOT_COR_RCV  macro  include/uapi/linux/pci_regs.h  658  #define PCI_ERR_ROOT_COR_RCV 0x00000001
PCI_ERR_ROOT_MULTI_COR_RCV  macro  include/uapi/linux/pci_regs.h  660  #define PCI_ERR_ROOT_MULTI_COR_RCV 0x00000002
PCI_ERR_ROOT_UNCOR_RCV  macro  include/uapi/linux/pci_regs.h  662  #define PCI_ERR_ROOT_UNCOR_RCV 0x00000004
PCI_ERR_ROOT_MULTI_UNCOR_RCV  macro  include/uapi/linux/pci_regs.h  664  #define PCI_ERR_ROOT_MULTI_UNCOR_RCV 0x00000008
PCI_ERR_ROOT_FIRST_FATAL  macro  include/uapi/linux/pci_regs.h  665  #define PCI_ERR_ROOT_FIRST_FATAL 0x00000010
PCI_ERR_ROOT_NONFATAL_RCV  macro  include/uapi/linux/pci_regs.h  666  #define PCI_ERR_ROOT_NONFATAL_RCV 0x00000020
PCI_ERR_ROOT_FATAL_RCV  macro  include/uapi/linux/pci_regs.h  667  #define PCI_ERR_ROOT_FATAL_RCV 0x00000040
PCI_ERR_ROOT_ERR_SRC  macro  include/uapi/linux/pci_regs.h  668  #define PCI_ERR_ROOT_ERR_SRC 52
PCI_VC_PORT_REG1  macro  include/uapi/linux/pci_regs.h  671  #define PCI_VC_PORT_REG1 4
PCI_VC_REG1_EVCC  macro  include/uapi/linux/pci_regs.h  672  #define PCI_VC_REG1_EVCC 0x7
PCI_VC_PORT_REG2  macro  include/uapi/linux/pci_regs.h  673  #define PCI_VC_PORT_REG2 8
PCI_VC_REG2_32_PHASE  macro  include/uapi/linux/pci_regs.h  674  #define PCI_VC_REG2_32_PHASE 0x2
PCI_VC_REG2_64_PHASE  macro  include/uapi/linux/pci_regs.h  675  #define PCI_VC_REG2_64_PHASE 0x4
PCI_VC_REG2_128_PHASE  macro  include/uapi/linux/pci_regs.h  676  #define PCI_VC_REG2_128_PHASE 0x8
PCI_VC_PORT_CTRL  macro  include/uapi/linux/pci_regs.h  677  #define PCI_VC_PORT_CTRL 12
PCI_VC_PORT_STATUS  macro  include/uapi/linux/pci_regs.h  678  #define PCI_VC_PORT_STATUS 14
PCI_VC_RES_CAP  macro  include/uapi/linux/pci_regs.h  679  #define PCI_VC_RES_CAP 16
PCI_VC_RES_CTRL  macro  include/uapi/linux/pci_regs.h  680  #define PCI_VC_RES_CTRL 20
PCI_VC_RES_STATUS  macro  include/uapi/linux/pci_regs.h  681  #define PCI_VC_RES_STATUS 26
PCI_CAP_VC_BASE_SIZEOF  macro  include/uapi/linux/pci_regs.h  682  #define PCI_CAP_VC_BASE_SIZEOF 0x10
PCI_CAP_VC_PER_VC_SIZEOF  macro  include/uapi/linux/pci_regs.h  683  #define PCI_CAP_VC_PER_VC_SIZEOF 0x0C
PCI_PWR_DSR  macro  include/uapi/linux/pci_regs.h  686  #define PCI_PWR_DSR 4
PCI_PWR_DATA  macro  include/uapi/linux/pci_regs.h  687  #define PCI_PWR_DATA 8
PCI_PWR_DATA_BASE  macro  include/uapi/linux/pci_regs.h  688  #define PCI_PWR_DATA_BASE(x) ((x) & 0xff)
PCI_PWR_DATA_SCALE  macro  include/uapi/linux/pci_regs.h  689  #define PCI_PWR_DATA_SCALE(x) (((x) >> 8) & 3)
PCI_PWR_DATA_PM_SUB  macro  include/uapi/linux/pci_regs.h  690  #define PCI_PWR_DATA_PM_SUB(x) (((x) >> 10) & 7)
PCI_PWR_DATA_PM_STATE  macro  include/uapi/linux/pci_regs.h  691  #define PCI_PWR_DATA_PM_STATE(x) (((x) >> 13) & 3)
PCI_PWR_DATA_TYPE  macro  include/uapi/linux/pci_regs.h  692  #define PCI_PWR_DATA_TYPE(x) (((x) >> 15) & 7)
PCI_PWR_DATA_RAIL  macro  include/uapi/linux/pci_regs.h  693  #define PCI_PWR_DATA_RAIL(x) (((x) >> 18) & 7)
PCI_PWR_CAP  macro  include/uapi/linux/pci_regs.h  694  #define PCI_PWR_CAP 12
PCI_PWR_CAP_BUDGET  macro  include/uapi/linux/pci_regs.h  695  #define PCI_PWR_CAP_BUDGET(x) ((x) & 1)
PCI_EXT_CAP_PWR_SIZEOF  macro  include/uapi/linux/pci_regs.h  696  #define PCI_EXT_CAP_PWR_SIZEOF 16
PCI_VNDR_HEADER  macro  include/uapi/linux/pci_regs.h  699  #define PCI_VNDR_HEADER 4
PCI_VNDR_HEADER_ID  macro  include/uapi/linux/pci_regs.h  700  #define PCI_VNDR_HEADER_ID(x) ((x) & 0xffff)
PCI_VNDR_HEADER_REV  macro  include/uapi/linux/pci_regs.h  701  #define PCI_VNDR_HEADER_REV(x) (((x) >> 16) & 0xf)
PCI_VNDR_HEADER_LEN  macro  include/uapi/linux/pci_regs.h  702  #define PCI_VNDR_HEADER_LEN(x) (((x) >> 20) & 0xfff)
HT_3BIT_CAP_MASK  macro  include/uapi/linux/pci_regs.h  712  #define HT_3BIT_CAP_MASK 0xE0
HT_CAPTYPE_SLAVE  macro  include/uapi/linux/pci_regs.h  713  #define HT_CAPTYPE_SLAVE 0x00
HT_CAPTYPE_HOST  macro  include/uapi/linux/pci_regs.h  714  #define HT_CAPTYPE_HOST 0x20
HT_5BIT_CAP_MASK  macro  include/uapi/linux/pci_regs.h  716  #define HT_5BIT_CAP_MASK 0xF8
HT_CAPTYPE_IRQ  macro  include/uapi/linux/pci_regs.h  717  #define HT_CAPTYPE_IRQ 0x80
HT_CAPTYPE_REMAPPING_40  macro  include/uapi/linux/pci_regs.h  718  #define HT_CAPTYPE_REMAPPING_40 0xA0
HT_CAPTYPE_REMAPPING_64  macro  include/uapi/linux/pci_regs.h  719  #define HT_CAPTYPE_REMAPPING_64 0xA2
HT_CAPTYPE_UNITID_CLUMP  macro  include/uapi/linux/pci_regs.h  720  #define HT_CAPTYPE_UNITID_CLUMP 0x90
HT_CAPTYPE_EXTCONF  macro  include/uapi/linux/pci_regs.h  721  #define HT_CAPTYPE_EXTCONF 0x98
HT_CAPTYPE_MSI_MAPPING  macro  include/uapi/linux/pci_regs.h  722  #define HT_CAPTYPE_MSI_MAPPING 0xA8
HT_MSI_FLAGS  macro  include/uapi/linux/pci_regs.h  723  #define HT_MSI_FLAGS 0x02
HT_MSI_FLAGS_ENABLE  macro  include/uapi/linux/pci_regs.h  724  #define HT_MSI_FLAGS_ENABLE 0x1
HT_MSI_FLAGS_FIXED  macro  include/uapi/linux/pci_regs.h  725  #define HT_MSI_FLAGS_FIXED 0x2
HT_MSI_FIXED_ADDR  macro  include/uapi/linux/pci_regs.h  726  #define HT_MSI_FIXED_ADDR 0x00000000FEE00000ULL
HT_MSI_ADDR_LO  macro  include/uapi/linux/pci_regs.h  727  #define HT_MSI_ADDR_LO 0x04
HT_MSI_ADDR_LO_MASK  macro  include/uapi/linux/pci_regs.h  728  #define HT_MSI_ADDR_LO_MASK 0xFFF00000
HT_MSI_ADDR_HI  macro  include/uapi/linux/pci_regs.h  729  #define HT_MSI_ADDR_HI 0x08
HT_CAPTYPE_DIRECT_ROUTE  macro  include/uapi/linux/pci_regs.h  730  #define HT_CAPTYPE_DIRECT_ROUTE 0xB0
HT_CAPTYPE_VCSET  macro  include/uapi/linux/pci_regs.h  731  #define HT_CAPTYPE_VCSET 0xB8
HT_CAPTYPE_ERROR_RETRY  macro  include/uapi/linux/pci_regs.h  732  #define HT_CAPTYPE_ERROR_RETRY 0xC0
HT_CAPTYPE_GEN3  macro  include/uapi/linux/pci_regs.h  733  #define HT_CAPTYPE_GEN3 0xD0
HT_CAPTYPE_PM  macro  include/uapi/linux/pci_regs.h  734  #define HT_CAPTYPE_PM 0xE0
HT_CAP_SIZEOF_LONG  macro  include/uapi/linux/pci_regs.h  735  #define HT_CAP_SIZEOF_LONG 28
HT_CAP_SIZEOF_SHORT  macro  include/uapi/linux/pci_regs.h  736  #define HT_CAP_SIZEOF_SHORT 24
PCI_ARI_CAP  macro  include/uapi/linux/pci_regs.h  739  #define PCI_ARI_CAP 0x04
PCI_ARI_CAP_MFVC  macro  include/uapi/linux/pci_regs.h  740  #define PCI_ARI_CAP_MFVC 0x0001
PCI_ARI_CAP_ACS  macro  include/uapi/linux/pci_regs.h  741  #define PCI_ARI_CAP_ACS 0x0002
PCI_ARI_CAP_NFN  macro  include/uapi/linux/pci_regs.h  742  #define PCI_ARI_CAP_NFN(x) (((x) >> 8) & 0xff)
PCI_ARI_CTRL  macro  include/uapi/linux/pci_regs.h  743  #define PCI_ARI_CTRL 0x06
PCI_ARI_CTRL_MFVC  macro  include/uapi/linux/pci_regs.h  744  #define PCI_ARI_CTRL_MFVC 0x0001
PCI_ARI_CTRL_ACS  macro  include/uapi/linux/pci_regs.h  745  #define PCI_ARI_CTRL_ACS 0x0002
PCI_ARI_CTRL_FG  macro  include/uapi/linux/pci_regs.h  746  #define PCI_ARI_CTRL_FG(x) (((x) >> 4) & 7)
PCI_EXT_CAP_ARI_SIZEOF  macro  include/uapi/linux/pci_regs.h  747  #define PCI_EXT_CAP_ARI_SIZEOF 8
PCI_ATS_CAP  macro  include/uapi/linux/pci_regs.h  750  #define PCI_ATS_CAP 0x04
PCI_ATS_CAP_QDEP  macro  include/uapi/linux/pci_regs.h  751  #define PCI_ATS_CAP_QDEP(x) ((x) & 0x1f)
PCI_ATS_MAX_QDEP  macro  include/uapi/linux/pci_regs.h  752  #define PCI_ATS_MAX_QDEP 32
PCI_ATS_CTRL  macro  include/uapi/linux/pci_regs.h  753  #define PCI_ATS_CTRL 0x06
PCI_ATS_CTRL_ENABLE  macro  include/uapi/linux/pci_regs.h  754  #define PCI_ATS_CTRL_ENABLE 0x8000
PCI_ATS_CTRL_STU  macro  include/uapi/linux/pci_regs.h  755  #define PCI_ATS_CTRL_STU(x) ((x) & 0x1f)
PCI_ATS_MIN_STU  macro  include/uapi/linux/pci_regs.h  756  #define PCI_ATS_MIN_STU 12
PCI_EXT_CAP_ATS_SIZEOF  macro  include/uapi/linux/pci_regs.h  757  #define PCI_EXT_CAP_ATS_SIZEOF 8
PCI_PRI_CTRL  macro  include/uapi/linux/pci_regs.h  760  #define PCI_PRI_CTRL 0x04
PCI_PRI_CTRL_ENABLE  macro  include/uapi/linux/pci_regs.h  761  #define PCI_PRI_CTRL_ENABLE 0x01
PCI_PRI_CTRL_RESET  macro  include/uapi/linux/pci_regs.h  762  #define PCI_PRI_CTRL_RESET 0x02
PCI_PRI_STATUS  macro  include/uapi/linux/pci_regs.h  763  #define PCI_PRI_STATUS 0x06
PCI_PRI_STATUS_RF  macro  include/uapi/linux/pci_regs.h  764  #define PCI_PRI_STATUS_RF 0x001
PCI_PRI_STATUS_UPRGI  macro  include/uapi/linux/pci_regs.h  765  #define PCI_PRI_STATUS_UPRGI 0x002
PCI_PRI_STATUS_STOPPED  macro  include/uapi/linux/pci_regs.h  766  #define PCI_PRI_STATUS_STOPPED 0x100
PCI_PRI_MAX_REQ  macro  include/uapi/linux/pci_regs.h  767  #define PCI_PRI_MAX_REQ 0x08
PCI_PRI_ALLOC_REQ  macro  include/uapi/linux/pci_regs.h  768  #define PCI_PRI_ALLOC_REQ 0x0c
PCI_EXT_CAP_PRI_SIZEOF  macro  include/uapi/linux/pci_regs.h  769  #define PCI_EXT_CAP_PRI_SIZEOF 16
PCI_PASID_CAP  macro  include/uapi/linux/pci_regs.h  772  #define PCI_PASID_CAP 0x04
PCI_PASID_CAP_EXEC  macro  include/uapi/linux/pci_regs.h  773  #define PCI_PASID_CAP_EXEC 0x02
PCI_PASID_CAP_PRIV  macro  include/uapi/linux/pci_regs.h  774  #define PCI_PASID_CAP_PRIV 0x04
PCI_PASID_CTRL  macro  include/uapi/linux/pci_regs.h  775  #define PCI_PASID_CTRL 0x06
PCI_PASID_CTRL_ENABLE  macro  include/uapi/linux/pci_regs.h  776  #define PCI_PASID_CTRL_ENABLE 0x01
PCI_PASID_CTRL_EXEC  macro  include/uapi/linux/pci_regs.h  777  #define PCI_PASID_CTRL_EXEC 0x02
PCI_PASID_CTRL_PRIV  macro  include/uapi/linux/pci_regs.h  778  #define PCI_PASID_CTRL_PRIV 0x04
PCI_EXT_CAP_PASID_SIZEOF  macro  include/uapi/linux/pci_regs.h  779  #define PCI_EXT_CAP_PASID_SIZEOF 8
PCI_SRIOV_CAP  macro  include/uapi/linux/pci_regs.h  782  #define PCI_SRIOV_CAP 0x04
PCI_SRIOV_CAP_VFM  macro  include/uapi/linux/pci_regs.h  783  #define PCI_SRIOV_CAP_VFM 0x01
PCI_SRIOV_CAP_INTR  macro  include/uapi/linux/pci_regs.h  784  #define PCI_SRIOV_CAP_INTR(x) ((x) >> 21)
PCI_SRIOV_CTRL  macro  include/uapi/linux/pci_regs.h  785  #define PCI_SRIOV_CTRL 0x08
PCI_SRIOV_CTRL_VFE  macro  include/uapi/linux/pci_regs.h  786  #define PCI_SRIOV_CTRL_VFE 0x01
PCI_SRIOV_CTRL_VFM  macro  include/uapi/linux/pci_regs.h  787  #define PCI_SRIOV_CTRL_VFM 0x02
PCI_SRIOV_CTRL_INTR  macro  include/uapi/linux/pci_regs.h  788  #define PCI_SRIOV_CTRL_INTR 0x04
PCI_SRIOV_CTRL_MSE  macro  include/uapi/linux/pci_regs.h  789  #define PCI_SRIOV_CTRL_MSE 0x08
PCI_SRIOV_CTRL_ARI  macro  include/uapi/linux/pci_regs.h  790  #define PCI_SRIOV_CTRL_ARI 0x10
PCI_SRIOV_STATUS  macro  include/uapi/linux/pci_regs.h  791  #define PCI_SRIOV_STATUS 0x0a
PCI_SRIOV_STATUS_VFM  macro  include/uapi/linux/pci_regs.h  792  #define PCI_SRIOV_STATUS_VFM 0x01
PCI_SRIOV_INITIAL_VF  macro  include/uapi/linux/pci_regs.h  793  #define PCI_SRIOV_INITIAL_VF 0x0c
PCI_SRIOV_TOTAL_VF  macro  include/uapi/linux/pci_regs.h  794  #define PCI_SRIOV_TOTAL_VF 0x0e
PCI_SRIOV_NUM_VF  macro  include/uapi/linux/pci_regs.h  795  #define PCI_SRIOV_NUM_VF 0x10
PCI_SRIOV_FUNC_LINK  macro  include/uapi/linux/pci_regs.h  796  #define PCI_SRIOV_FUNC_LINK 0x12
PCI_SRIOV_VF_OFFSET  macro  include/uapi/linux/pci_regs.h  797  #define PCI_SRIOV_VF_OFFSET 0x14
PCI_SRIOV_VF_STRIDE  macro  include/uapi/linux/pci_regs.h  798  #define PCI_SRIOV_VF_STRIDE 0x16
PCI_SRIOV_VF_DID  macro  include/uapi/linux/pci_regs.h  799  #define PCI_SRIOV_VF_DID 0x1a
PCI_SRIOV_SUP_PGSIZE  macro  include/uapi/linux/pci_regs.h  800  #define PCI_SRIOV_SUP_PGSIZE 0x1c
PCI_SRIOV_SYS_PGSIZE  macro  include/uapi/linux/pci_regs.h  801  #define PCI_SRIOV_SYS_PGSIZE 0x20
PCI_SRIOV_BAR  macro  include/uapi/linux/pci_regs.h  802  #define PCI_SRIOV_BAR 0x24
PCI_SRIOV_NUM_BARS  macro  include/uapi/linux/pci_regs.h  803  #define PCI_SRIOV_NUM_BARS 6
PCI_SRIOV_VFM  macro  include/uapi/linux/pci_regs.h  804  #define PCI_SRIOV_VFM 0x3c
PCI_SRIOV_VFM_BIR  macro  include/uapi/linux/pci_regs.h  805  #define PCI_SRIOV_VFM_BIR(x) ((x) & 7)
PCI_SRIOV_VFM_OFFSET  macro  include/uapi/linux/pci_regs.h  806  #define PCI_SRIOV_VFM_OFFSET(x) ((x) & ~7)
PCI_SRIOV_VFM_UA  macro  include/uapi/linux/pci_regs.h  807  #define PCI_SRIOV_VFM_UA 0x0
PCI_SRIOV_VFM_MI  macro  include/uapi/linux/pci_regs.h  808  #define PCI_SRIOV_VFM_MI 0x1
PCI_SRIOV_VFM_MO  macro  include/uapi/linux/pci_regs.h  809  #define PCI_SRIOV_VFM_MO 0x2
PCI_SRIOV_VFM_AV  macro  include/uapi/linux/pci_regs.h  810  #define PCI_SRIOV_VFM_AV 0x3
PCI_EXT_CAP_SRIOV_SIZEOF  macro  include/uapi/linux/pci_regs.h  811  #define PCI_EXT_CAP_SRIOV_SIZEOF 64
PCI_LTR_MAX_SNOOP_LAT  macro  include/uapi/linux/pci_regs.h  813  #define PCI_LTR_MAX_SNOOP_LAT 0x4
PCI_LTR_MAX_NOSNOOP_LAT  macro  include/uapi/linux/pci_regs.h  814  #define PCI_LTR_MAX_NOSNOOP_LAT 0x6
PCI_LTR_VALUE_MASK  macro  include/uapi/linux/pci_regs.h  815  #define PCI_LTR_VALUE_MASK 0x000003ff
PCI_LTR_SCALE_MASK  macro  include/uapi/linux/pci_regs.h  816  #define PCI_LTR_SCALE_MASK 0x00001c00
PCI_LTR_SCALE_SHIFT  macro  include/uapi/linux/pci_regs.h  817  #define PCI_LTR_SCALE_SHIFT 10
PCI_EXT_CAP_LTR_SIZEOF  macro  include/uapi/linux/pci_regs.h  818  #define PCI_EXT_CAP_LTR_SIZEOF 8
PCI_ACS_CAP  macro  include/uapi/linux/pci_regs.h  821  #define PCI_ACS_CAP 0x04
PCI_ACS_SV  macro  include/uapi/linux/pci_regs.h  822  #define PCI_ACS_SV 0x01
PCI_ACS_TB  macro  include/uapi/linux/pci_regs.h  823  #define PCI_ACS_TB 0x02
PCI_ACS_RR  macro  include/uapi/linux/pci_regs.h  824  #define PCI_ACS_RR 0x04
PCI_ACS_CR  macro  include/uapi/linux/pci_regs.h  825  #define PCI_ACS_CR 0x08
PCI_ACS_UF  macro  include/uapi/linux/pci_regs.h  826  #define PCI_ACS_UF 0x10
PCI_ACS_EC  macro  include/uapi/linux/pci_regs.h  827  #define PCI_ACS_EC 0x20
PCI_ACS_DT  macro  include/uapi/linux/pci_regs.h  828  #define PCI_ACS_DT 0x40
PCI_ACS_EGRESS_BITS  macro  include/uapi/linux/pci_regs.h  829  #define PCI_ACS_EGRESS_BITS 0x05
PCI_ACS_CTRL  macro  include/uapi/linux/pci_regs.h  830  #define PCI_ACS_CTRL 0x06
PCI_ACS_EGRESS_CTL_V  macro  include/uapi/linux/pci_regs.h  831  #define PCI_ACS_EGRESS_CTL_V 0x08
PCI_VSEC_HDR  macro  include/uapi/linux/pci_regs.h  833  #define PCI_VSEC_HDR 4
PCI_VSEC_HDR_LEN_SHIFT  macro  include/uapi/linux/pci_regs.h  834  #define PCI_VSEC_HDR_LEN_SHIFT 20
PCI_SATA_REGS  macro  include/uapi/linux/pci_regs.h  837  #define PCI_SATA_REGS 4
PCI_SATA_REGS_MASK  macro  include/uapi/linux/pci_regs.h  838  #define PCI_SATA_REGS_MASK 0xF
PCI_SATA_REGS_INLINE  macro  include/uapi/linux/pci_regs.h  839  #define PCI_SATA_REGS_INLINE 0xF
PCI_SATA_SIZEOF_SHORT  macro  include/uapi/linux/pci_regs.h  840  #define PCI_SATA_SIZEOF_SHORT 8
PCI_SATA_SIZEOF_LONG  macro  include/uapi/linux/pci_regs.h  841  #define PCI_SATA_SIZEOF_LONG 16
PCI_REBAR_CTRL  macro  include/uapi/linux/pci_regs.h  844  #define PCI_REBAR_CTRL 8
PCI_REBAR_CTRL_NBAR_MASK  macro  include/uapi/linux/pci_regs.h  845  #define PCI_REBAR_CTRL_NBAR_MASK (7 << 5)
PCI_REBAR_CTRL_NBAR_SHIFT  macro  include/uapi/linux/pci_regs.h  846  #define PCI_REBAR_CTRL_NBAR_SHIFT 5
PCI_DPA_CAP  macro  include/uapi/linux/pci_regs.h  849  #define PCI_DPA_CAP 4
PCI_DPA_CAP_SUBSTATE_MASK  macro  include/uapi/linux/pci_regs.h  850  #define PCI_DPA_CAP_SUBSTATE_MASK 0x1F
PCI_DPA_BASE_SIZEOF  macro  include/uapi/linux/pci_regs.h  851  #define PCI_DPA_BASE_SIZEOF 16
PCI_TPH_CAP  macro  include/uapi/linux/pci_regs.h  854  #define PCI_TPH_CAP 4
PCI_TPH_CAP_LOC_MASK  macro  include/uapi/linux/pci_regs.h  855  #define PCI_TPH_CAP_LOC_MASK 0x600
PCI_TPH_LOC_NONE  macro  include/uapi/linux/pci_regs.h  856  #define PCI_TPH_LOC_NONE 0x000
PCI_TPH_LOC_CAP  macro  include/uapi/linux/pci_regs.h  857  #define PCI_TPH_LOC_CAP 0x200
PCI_TPH_LOC_MSIX  macro  include/uapi/linux/pci_regs.h  858  #define PCI_TPH_LOC_MSIX 0x400
PCI_TPH_CAP_ST_MASK  macro  include/uapi/linux/pci_regs.h  859  #define PCI_TPH_CAP_ST_MASK 0x07FF0000
PCI_TPH_CAP_ST_SHIFT  macro  include/uapi/linux/pci_regs.h  860  #define PCI_TPH_CAP_ST_SHIFT 16
PCI_TPH_BASE_SIZEOF  macro  include/uapi/linux/pci_regs.h  861  #define PCI_TPH_BASE_SIZEOF 12
_ASM_X86_SCATTERLIST_H  macro  arch/x86/include/asm/scatterlist.h  2  #define _ASM_X86_SCATTERLIST_H
ARCH_HAS_SG_CHAIN  macro  arch/x86/include/asm/scatterlist.h  6  #define ARCH_HAS_SG_CHAIN
_LINUX_MM_H  macro  include/linux/mm.h  2  #define _LINUX_MM_H
sysctl_legacy_va_layout  macro  include/linux/mm.h  40  #define sysctl_legacy_va_layout 0
nth_page  macro  include/linux/mm.h  47  #define nth_page(page,n) pfn_to_page(page_to_pfn((page)) + (n))
PAGE_ALIGN  macro  include/linux/mm.h  50  #define PAGE_ALIGN(addr) ALIGN(addr,PAGE_SIZE)
kobjsize  prototype  include/linux/mm.h  67  extern unsigned int kobjsize(const void *objp);
VM_NONE  macro  include/linux/mm.h  73  #define VM_NONE 0x00000000
VM_READ  macro  include/linux/mm.h  75  #define VM_READ 0x00000001
VM_WRITE  macro  include/linux/mm.h  76  #define VM_WRITE 0x00000002
VM_EXEC  macro  include/linux/mm.h  77  #define VM_EXEC 0x00000004
VM_SHARED  macro  include/linux/mm.h  78  #define VM_SHARED 0x00000008
VM_MAYREAD  macro  include/linux/mm.h  81  #define VM_MAYREAD 0x00000010
VM_MAYWRITE  macro  include/linux/mm.h  82  #define VM_MAYWRITE 0x00000020
VM_MAYEXEC  macro  include/linux/mm.h  83  #define VM_MAYEXEC 0x00000040
VM_MAYSHARE  macro  include/linux/mm.h  84  #define VM_MAYSHARE 0x00000080
VM_GROWSDOWN  macro  include/linux/mm.h  86  #define VM_GROWSDOWN 0x00000100
VM_PFNMAP  macro  include/linux/mm.h  87  #define VM_PFNMAP 0x00000400
VM_DENYWRITE  macro  include/linux/mm.h  88  #define VM_DENYWRITE 0x00000800
VM_LOCKED  macro  include/linux/mm.h  90  #define VM_LOCKED 0x00002000
VM_IO  macro  include/linux/mm.h  91  #define VM_IO 0x00004000
VM_SEQ_READ  macro  include/linux/mm.h  94  #define VM_SEQ_READ 0x00008000
VM_RAND_READ  macro  include/linux/mm.h  95  #define VM_RAND_READ 0x00010000
VM_DONTCOPY  macro  include/linux/mm.h  97  #define VM_DONTCOPY 0x00020000
VM_DONTEXPAND  macro  include/linux/mm.h  98  #define VM_DONTEXPAND 0x00040000
VM_ACCOUNT  macro  include/linux/mm.h  99  #define VM_ACCOUNT 0x00100000
VM_NORESERVE  macro  include/linux/mm.h  100  #define VM_NORESERVE 0x00200000
VM_HUGETLB  macro  include/linux/mm.h  101  #define VM_HUGETLB 0x00400000
VM_NONLINEAR  macro  include/linux/mm.h  102  #define VM_NONLINEAR 0x00800000
VM_ARCH_1  macro  include/linux/mm.h  103  #define VM_ARCH_1 0x01000000
VM_DONTDUMP  macro  include/linux/mm.h  104  #define VM_DONTDUMP 0x04000000
VM_MIXEDMAP  macro  include/linux/mm.h  106  #define VM_MIXEDMAP 0x10000000
VM_HUGEPAGE  macro  include/linux/mm.h  107  #define VM_HUGEPAGE 0x20000000
VM_NOHUGEPAGE  macro  include/linux/mm.h  108  #define VM_NOHUGEPAGE 0x40000000
VM_MERGEABLE  macro  include/linux/mm.h  109  #define VM_MERGEABLE 0x80000000
VM_PAT  macro  include/linux/mm.h  112  # define VM_PAT VM_ARCH_1
VM_SAO  macro  include/linux/mm.h  114  # define VM_SAO VM_ARCH_1
VM_GROWSUP  macro  include/linux/mm.h  124  # define VM_GROWSUP VM_NONE
VM_MAPPED_COPY  macro  include/linux/mm.h  120  # define VM_MAPPED_COPY VM_ARCH_1
VM_STACK_INCOMPLETE_SETUP  macro  include/linux/mm.h  128  #define VM_STACK_INCOMPLETE_SETUP (VM_RAND_READ | VM_SEQ_READ)
VM_STACK_DEFAULT_FLAGS  macro  include/linux/mm.h  131  #define VM_STACK_DEFAULT_FLAGS VM_DATA_DEFAULT_FLAGS
VM_STACK_FLAGS  macro  include/linux/mm.h  137  #define VM_STACK_FLAGS (VM_GROWSDOWN | VM_STACK_DEFAULT_FLAGS | VM_ACCOUNT)
VM_READHINTMASK  macro  include/linux/mm.h  140  #define VM_READHINTMASK (VM_SEQ_READ | VM_RAND_READ)
VM_ClearReadHint  macro  include/linux/mm.h  141  #define VM_ClearReadHint(v) (v)->vm_flags &= ~VM_READHINTMASK
VM_NormalReadHint  macro  include/linux/mm.h  142  #define VM_NormalReadHint(v) (!((v)->vm_flags & VM_READHINTMASK))
VM_SequentialReadHint  macro  include/linux/mm.h  143  #define VM_SequentialReadHint(v) ((v)->vm_flags & VM_SEQ_READ)
VM_RandomReadHint  macro  include/linux/mm.h  144  #define VM_RandomReadHint(v) ((v)->vm_flags & VM_RAND_READ)
VM_SPECIAL  macro  include/linux/mm.h  150  #define VM_SPECIAL (VM_IO | VM_DONTEXPAND | VM_PFNMAP)
FAULT_FLAG_WRITE  macro  include/linux/mm.h  158  #define FAULT_FLAG_WRITE 0x01
FAULT_FLAG_NONLINEAR  macro  include/linux/mm.h  159  #define FAULT_FLAG_NONLINEAR 0x02
FAULT_FLAG_MKWRITE  macro  include/linux/mm.h  160  #define FAULT_FLAG_MKWRITE 0x04
FAULT_FLAG_ALLOW_RETRY  macro  include/linux/mm.h  161  #define FAULT_FLAG_ALLOW_RETRY 0x08
FAULT_FLAG_RETRY_NOWAIT  macro  include/linux/mm.h  162  #define FAULT_FLAG_RETRY_NOWAIT 0x10
FAULT_FLAG_KILLABLE  macro  include/linux/mm.h  163  #define FAULT_FLAG_KILLABLE 0x20
FAULT_FLAG_TRIED  macro  include/linux/mm.h  164  #define FAULT_FLAG_TRIED 0x40
vm_fault  struct  include/linux/mm.h  174  struct vm_fault { unsigned int flags; pgoff_t pgoff; void __user *virtual_address; struct page *page; };
vm_operations_struct  struct  include/linux/mm.h  191  struct vm_operations_struct { void (*open)(struct vm_area_struct * area); void (*close)(struct vm_area_struct * area); int (*fault)(struct vm_area_struct *vma, struct vm_fault *vmf); int (*page_mkwrite)(struct vm_area_struct *vma, struct vm_fault *vmf); int (*access)(struct vm_area_struct *vma, unsigned long addr,void *buf, int len, int write); int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *new); struct mempolicy *(*get_policy)(struct vm_area_struct *vma,unsigned long addr); int (*migrate)(struct vm_area_struct *vma, const nodemask_t *from,const nodemask_t *to, unsigned long flags); int (*remap_pages)(struct vm_area_struct *vma, unsigned long addr,unsigned long size, pgoff_t pgoff); };
page_private  macro  include/linux/mm.h  238  #define page_private(page) ((page)->private)
set_page_private  macro  include/linux/mm.h  239  #define set_page_private(page,v) ((page)->private = (v))
set_freepage_migratetype  function  include/linux/mm.h  242  static inline void set_freepage_migratetype(struct page *page,int migratetype)
get_freepage_migratetype  function  include/linux/mm.h  248  static inline int get_freepage_migratetype(struct page *page)
put_page_testzero  function  include/linux/mm.h  276  static inline int put_page_testzero(struct page *page)
get_page_unless_zero  function  include/linux/mm.h  286  static inline int get_page_unless_zero(struct page *page)
page_is_ram  prototype  include/linux/mm.h  291  extern int page_is_ram(unsigned long pfn);
vmalloc_to_page  prototype  include/linux/mm.h  294  struct page *vmalloc_to_page(const void *addr);
vmalloc_to_pfn  prototype  include/linux/mm.h  295  unsigned long vmalloc_to_pfn(const void *addr);
is_vmalloc_addr  function  include/linux/mm.h  303  static inline int is_vmalloc_addr(const void *x)
is_vmalloc_or_module_addr  function  include/linux/mm.h  316  static inline int is_vmalloc_or_module_addr(const void *x)
compound_lock  function  include/linux/mm.h  322  static inline void compound_lock(struct page *page)
compound_unlock  function  include/linux/mm.h  330  static inline void compound_unlock(struct page *page)
compound_lock_irqsave  function  include/linux/mm.h  338  static inline unsigned long compound_lock_irqsave(struct page *page)
compound_unlock_irqrestore  function  include/linux/mm.h  348  static inline void compound_unlock_irqrestore(struct page *page,unsigned long flags)
compound_head  function  include/linux/mm.h  357  static inline struct page *compound_head(struct page *page)
reset_page_mapcount  function  include/linux/mm.h  369  static inline void reset_page_mapcount(struct page *page)
page_mapcount  function  include/linux/mm.h  374  static inline int page_mapcount(struct page *page)
page_count  function  include/linux/mm.h  379  static inline int page_count(struct page *page)
get_huge_page_tail  function  include/linux/mm.h  384  static inline void get_huge_page_tail(struct page *page)
__get_page_tail  prototype  include/linux/mm.h  395  extern bool __get_page_tail(struct page *page);
get_page  function  include/linux/mm.h  397  static inline void get_page(struct page *page)
virt_to_head_page  function  include/linux/mm.h  410  static inline struct page *virt_to_head_page(const void *x)
init_page_count  function  include/linux/mm.h  420  static inline void init_page_count(struct page *page)
PAGE_BUDDY_MAPCOUNT_VALUE  macro  include/linux/mm.h  434  #define PAGE_BUDDY_MAPCOUNT_VALUE (-128)
PageBuddy  function  include/linux/mm.h  436  static inline int PageBuddy(struct page *page)
__SetPageBuddy  function  include/linux/mm.h  441  static inline void __SetPageBuddy(struct page *page)
__ClearPageBuddy  function  include/linux/mm.h  447  static inline void __ClearPageBuddy(struct page *page)
put_page  prototype  include/linux/mm.h  453  void put_page(struct page *page);
put_pages_list  prototype  include/linux/mm.h  454  void put_pages_list(struct list_head *pages);
split_page  prototype  include/linux/mm.h  456  void split_page(struct page *page,unsigned int order);
split_free_page  prototype  include/linux/mm.h  457  int split_free_page(struct page *page);
set_compound_page_dtor  function  include/linux/mm.h  466  static inline void set_compound_page_dtor(struct page *page,compound_page_dtor *dtor)
get_compound_page_dtor  function  include/linux/mm.h  472  static inline compound_page_dtor *get_compound_page_dtor(struct page *page)
compound_order  function  include/linux/mm.h  477  static inline int compound_order(struct page *page)
compound_trans_order  function  include/linux/mm.h  484  static inline int compound_trans_order(struct page *page)
set_compound_order  function  include/linux/mm.h  498  static inline void set_compound_order(struct page *page,unsigned long order)
maybe_mkwrite  function  include/linux/mm.h  510  static inline pte_t maybe_mkwrite(pte_t pte,struct vm_area_struct *vma)
SECTIONS_WIDTH  macro  include/linux/mm.h  601  #define SECTIONS_WIDTH 0
ZONES_WIDTH  macro  include/linux/mm.h  604  #define ZONES_WIDTH ZONES_SHIFT
NODES_WIDTH  macro  include/linux/mm.h  612  #define NODES_WIDTH 0
SECTIONS_PGOFF  macro  include/linux/mm.h  616  #define SECTIONS_PGOFF ((sizeof(unsigned long)*8) - SECTIONS_WIDTH)
NODES_PGOFF  macro  include/linux/mm.h  617  #define NODES_PGOFF (SECTIONS_PGOFF - NODES_WIDTH)
ZONES_PGOFF  macro  include/linux/mm.h  618  #define ZONES_PGOFF (NODES_PGOFF - ZONES_WIDTH)
NODE_NOT_IN_PAGE_FLAGS  macro  include/linux/mm.h  625  #define NODE_NOT_IN_PAGE_FLAGS
SECTIONS_PGSHIFT  macro  include/linux/mm.h  633  #define SECTIONS_PGSHIFT (SECTIONS_PGOFF * (SECTIONS_WIDTH != 0))
NODES_PGSHIFT  macro  include/linux/mm.h  634  #define NODES_PGSHIFT (NODES_PGOFF * (NODES_WIDTH != 0))
ZONES_PGSHIFT  macro  include/linux/mm.h  635  #define ZONES_PGSHIFT (ZONES_PGOFF * (ZONES_WIDTH != 0))
ZONEID_SHIFT  macro  include/linux/mm.h  643  #define ZONEID_SHIFT (NODES_SHIFT + ZONES_SHIFT)
ZONEID_PGOFF  macro  include/linux/mm.h  644  #define ZONEID_PGOFF ((NODES_PGOFF < ZONES_PGOFF)? NODES_PGOFF : ZONES_PGOFF)
ZONEID_PGSHIFT  macro  include/linux/mm.h  648  #define ZONEID_PGSHIFT (ZONEID_PGOFF * (ZONEID_SHIFT != 0))
ZONES_MASK  macro  include/linux/mm.h  654  #define ZONES_MASK ((1UL << ZONES_WIDTH) - 1)
NODES_MASK  macro  include/linux/mm.h  655  #define NODES_MASK ((1UL << NODES_WIDTH) - 1)
SECTIONS_MASK  macro  include/linux/mm.h  656  #define SECTIONS_MASK ((1UL << SECTIONS_WIDTH) - 1)
ZONEID_MASK  macro  include/linux/mm.h  657  #define ZONEID_MASK ((1UL << ZONEID_SHIFT) - 1)
page_zonenum  function  include/linux/mm.h  659  static inline enum zone_type page_zonenum(const struct page *page)
page_zone_id  function  include/linux/mm.h  672  static inline int page_zone_id(struct page *page)
zone_to_nid  function  include/linux/mm.h  677  static inline int zone_to_nid(struct zone *zone)
page_to_nid  function  include/linux/mm.h  689  static inline int page_to_nid(const struct page *page)
page_xchg_last_nid  function  include/linux/mm.h  710  static inline int page_xchg_last_nid(struct page *page,int nid)
page_last_nid  function  include/linux/mm.h  715  static inline int page_last_nid(struct page *page)
reset_page_last_nid  function  include/linux/mm.h  720  static inline void reset_page_last_nid(struct page *page)
page_zone  function  include/linux/mm.h  725  static inline struct zone *page_zone(const struct page *page)
set_page_section  function  include/linux/mm.h  731  static inline void set_page_section(struct page *page,unsigned long section)
page_to_section  function  include/linux/mm.h  737  static inline unsigned long page_to_section(const struct page *page)
set_page_zone  function  include/linux/mm.h  743  static inline void set_page_zone(struct page *page,enum zone_type zone)
set_page_node  function  include/linux/mm.h  749  static inline void set_page_node(struct page *page,unsigned long node)
set_page_links  function  include/linux/mm.h  755  static inline void set_page_links(struct page *page,enum zone_type zone,unsigned long node, unsigned long pfn)
lowmem_page_address  function  include/linux/mm.h  770  static __always_inline void *lowmem_page_address(const struct page *page)
HASHED_PAGE_VIRTUAL  macro  include/linux/mm.h  776  #define HASHED_PAGE_VIRTUAL
page_address  macro  include/linux/mm.h  795  #define page_address(page) lowmem_page_address(page)
set_page_address  macro  include/linux/mm.h  796  #define set_page_address(page,address) do { } while(0)
page_address_init  macro  include/linux/mm.h  797  #define page_address_init() do { } while(0)
PAGE_MAPPING_ANON  macro  include/linux/mm.h  816  #define PAGE_MAPPING_ANON 1
PAGE_MAPPING_KSM  macro  include/linux/mm.h  817  #define PAGE_MAPPING_KSM 2
PAGE_MAPPING_FLAGS  macro  include/linux/mm.h  818  #define PAGE_MAPPING_FLAGS (PAGE_MAPPING_ANON | PAGE_MAPPING_KSM)
page_mapping  function  include/linux/mm.h  821  static inline struct address_space *page_mapping(struct page *page)
page_rmapping  function  include/linux/mm.h  834  static inline void *page_rmapping(struct page *page)
__page_file_mapping  prototype  include/linux/mm.h  839  extern struct address_space *__page_file_mapping(struct page *);
page_file_mapping  function  include/linux/mm.h  842  struct address_space *page_file_mapping(struct page *page)
PageAnon  function  include/linux/mm.h  850  static inline int PageAnon(struct page *page)
page_index  function  include/linux/mm.h  859  static inline pgoff_t page_index(struct page *page)
__page_file_index  prototype  include/linux/mm.h  866  extern pgoff_t __page_file_index(struct page *page);
page_file_index  function  include/linux/mm.h  872  static inline pgoff_t page_file_index(struct page *page)
page_mapped  function  include/linux/mm.h  883  static inline int page_mapped(struct page *page)
VM_FAULT_MINOR  macro  include/linux/mm.h  894  #define VM_FAULT_MINOR 0
VM_FAULT_OOM  macro  include/linux/mm.h  896  #define VM_FAULT_OOM 0x0001
VM_FAULT_SIGBUS  macro  include/linux/mm.h  897  #define VM_FAULT_SIGBUS 0x0002
VM_FAULT_MAJOR  macro  include/linux/mm.h  898  #define VM_FAULT_MAJOR 0x0004
VM_FAULT_WRITE  macro  include/linux/mm.h  899  #define VM_FAULT_WRITE 0x0008
VM_FAULT_HWPOISON  macro  include/linux/mm.h  900  #define VM_FAULT_HWPOISON 0x0010
VM_FAULT_HWPOISON_LARGE  macro  include/linux/mm.h  901  #define VM_FAULT_HWPOISON_LARGE 0x0020
VM_FAULT_NOPAGE  macro  include/linux/mm.h  903  #define VM_FAULT_NOPAGE 0x0100
VM_FAULT_LOCKED  macro  include/linux/mm.h  904  #define VM_FAULT_LOCKED 0x0200
VM_FAULT_RETRY  macro  include/linux/mm.h  905  #define VM_FAULT_RETRY 0x0400
VM_FAULT_HWPOISON_LARGE_MASK  macro  include/linux/mm.h  907  #define VM_FAULT_HWPOISON_LARGE_MASK 0xf000
VM_FAULT_ERROR  macro  include/linux/mm.h  909  #define VM_FAULT_ERROR (VM_FAULT_OOM | VM_FAULT_SIGBUS | VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE)
VM_FAULT_SET_HINDEX  macro  include/linux/mm.h  913  #define VM_FAULT_SET_HINDEX(x) ((x) << 12)
VM_FAULT_GET_HINDEX  macro  include/linux/mm.h  914  #define VM_FAULT_GET_HINDEX(x) (((x) >> 12) & 0xf)
pagefault_out_of_memory  prototype  include/linux/mm.h  919  extern void pagefault_out_of_memory(void);
offset_in_page  macro  include/linux/mm.h  921  #define offset_in_page(p) ((unsigned long)(p) & ~PAGE_MASK)
SHOW_MEM_FILTER_NODES  macro  include/linux/mm.h  927  #define SHOW_MEM_FILTER_NODES (0x0001u)
show_free_areas  prototype  include/linux/mm.h  929  extern void show_free_areas(unsigned int flags);
skip_free_areas_node  prototype  include/linux/mm.h  930  extern bool skip_free_areas_node(unsigned int flags,int nid);
shmem_zero_setup  prototype  include/linux/mm.h  932  int shmem_zero_setup(struct vm_area_struct *);
can_do_mlock  prototype  include/linux/mm.h  934  extern int can_do_mlock(void);
user_shm_lock  prototype  include/linux/mm.h  935  extern int user_shm_lock(size_t,struct user_struct *);
user_shm_unlock  prototype  include/linux/mm.h  936  extern void user_shm_unlock(size_t,struct user_struct *);
zap_details  struct  include/linux/mm.h  941  struct zap_details { struct vm_area_struct *nonlinear_vma; struct address_space *check_mapping; pgoff_t first_index; pgoff_t last_index; };
vm_normal_page  prototype  include/linux/mm.h  948  struct page *vm_normal_page(struct vm_area_struct *vma,unsigned long addr,pte_t pte);
zap_vma_ptes  prototype  include/linux/mm.h  951  int zap_vma_ptes(struct vm_area_struct *vma,unsigned long address,unsigned long size);
zap_page_range  prototype  include/linux/mm.h  953  void zap_page_range(struct vm_area_struct *vma,unsigned long address,unsigned long size, struct zap_details *);
unmap_vmas  prototype  include/linux/mm.h  955  void unmap_vmas(struct mmu_gather *tlb,struct vm_area_struct *start_vma,unsigned long start, unsigned long end);
mm_walk  struct  include/linux/mm.h  974  struct mm_walk { int (*pgd_entry)(pgd_t *, unsigned long, unsigned long, struct mm_walk *); int (*pud_entry)(pud_t *, unsigned long, unsigned long, struct mm_walk *); int (*pmd_entry)(pmd_t *, unsigned long, unsigned long, struct mm_walk *); int (*pte_entry)(pte_t *, unsigned long, unsigned long, struct mm_walk *); int (*pte_hole)(unsigned long, unsigned long, struct mm_walk *); int (*hugetlb_entry)(pte_t *, unsigned long,unsigned long, unsigned long, struct mm_walk *); struct mm_struct *mm; };
walk_page_range  prototype  include/linux/mm.h  986  int walk_page_range(unsigned long addr,unsigned long end,struct mm_walk *walk);
free_pgd_range  prototype  include/linux/mm.h  988  void free_pgd_range(struct mmu_gather *tlb,unsigned long addr,unsigned long end, unsigned long floor, unsigned long ceiling);
copy_page_range  prototype  include/linux/mm.h  990  int copy_page_range(struct mm_struct *dst,struct mm_struct *src,struct vm_area_struct *vma);
unmap_mapping_range  prototype  include/linux/mm.h  992  void unmap_mapping_range(struct address_space *mapping,loff_t const holebegin, loff_t const holelen, int even_cows);
follow_pfn  prototype  include/linux/mm.h  994  int follow_pfn(struct vm_area_struct *vma,unsigned long address,unsigned long *pfn);
follow_phys  prototype  include/linux/mm.h  996  int follow_phys(struct vm_area_struct *vma,unsigned long address,unsigned int flags, unsigned long *prot, resource_size_t *phys);
generic_access_phys  prototype  include/linux/mm.h  998  int generic_access_phys(struct vm_area_struct *vma,unsigned long addr,void *buf, int len, int write);
unmap_shared_mapping_range  function  include/linux/mm.h  1001  static inline void unmap_shared_mapping_range(struct address_space *mapping,loff_t const holebegin, loff_t const holelen)
truncate_pagecache  prototype  include/linux/mm.h  1007  extern void truncate_pagecache(struct inode *inode,loff_t old,loff_t new);
truncate_setsize  prototype  include/linux/mm.h  1008  extern void truncate_setsize(struct inode *inode,loff_t newsize);
truncate_pagecache_range  prototype  include/linux/mm.h  1009  void truncate_pagecache_range(struct inode *inode,loff_t offset,loff_t end);
truncate_inode_page  prototype  include/linux/mm.h  1010  int truncate_inode_page(struct address_space *mapping,struct page *page);
generic_error_remove_page  prototype  include/linux/mm.h  1011  int generic_error_remove_page(struct address_space *mapping,struct page *page);
invalidate_inode_page  prototype  include/linux/mm.h  1012  int invalidate_inode_page(struct page *page);
handle_mm_fault  function  include/linux/mm.h  1020  static inline int handle_mm_fault(struct mm_struct *mm,struct vm_area_struct *vma, unsigned long address,unsigned int flags)
fixup_user_fault  function  include/linux/mm.h  1028  static inline int fixup_user_fault(struct task_struct *tsk,struct mm_struct *mm, unsigned long address,unsigned int fault_flags)
make_pages_present  prototype  include/linux/mm.h  1038  extern int make_pages_present(unsigned long addr,unsigned long end);
access_process_vm  prototype  include/linux/mm.h  1039  extern int access_process_vm(struct task_struct *tsk,unsigned long addr,void *buf,int len,int write);
access_remote_vm  prototype  include/linux/mm.h  1040  extern int access_remote_vm(struct mm_struct *mm,unsigned long addr,void *buf, int len, int write);
__get_user_pages  prototype  include/linux/mm.h  1043  int __get_user_pages(struct task_struct *tsk,struct mm_struct *mm,unsigned long start, int len, unsigned int foll_flags,struct page **pages, struct vm_area_struct **vmas,int *nonblocking);
get_user_pages  prototype  include/linux/mm.h  1047  int get_user_pages(struct task_struct *tsk,struct mm_struct *mm,unsigned long start, int nr_pages, int write, int force,struct page **pages, struct vm_area_struct **vmas);
get_user_pages_fast  prototype  include/linux/mm.h  1050  int get_user_pages_fast(unsigned long start,int nr_pages,int write,struct page **pages);
get_kernel_pages  prototype  include/linux/mm.h  1053  int get_kernel_pages(const struct kvec *iov,int nr_pages,int write,struct page **pages);
get_kernel_page  prototype  include/linux/mm.h  1055  int get_kernel_page(unsigned long start,int write,struct page **pages);
get_dump_page  prototype  include/linux/mm.h  1056  struct page *get_dump_page(unsigned long addr);
try_to_release_page  prototype  include/linux/mm.h  1058  extern int try_to_release_page(struct page * page,gfp_t gfp_mask);
do_invalidatepage  prototype  include/linux/mm.h  1059  extern void do_invalidatepage(struct page *page,unsigned long offset);
__set_page_dirty_nobuffers  prototype  include/linux/mm.h  1061  int __set_page_dirty_nobuffers(struct page *page);
__set_page_dirty_no_writeback  prototype  include/linux/mm.h  1062  int __set_page_dirty_no_writeback(struct page *page);
redirty_page_for_writepage  prototype  include/linux/mm.h  1063  int redirty_page_for_writepage(struct writeback_control *wbc,struct page *page);
account_page_dirtied  prototype  include/linux/mm.h  1065  void account_page_dirtied(struct page *page,struct address_space *mapping);
account_page_writeback  prototype  include/linux/mm.h  1066  void account_page_writeback(struct page *page);
set_page_dirty  prototype  include/linux/mm.h  1067  int set_page_dirty(struct page *page);
set_page_dirty_lock  prototype  include/linux/mm.h  1068  int set_page_dirty_lock(struct page *page);
clear_page_dirty_for_io  prototype  include/linux/mm.h  1069  int clear_page_dirty_for_io(struct page *page);
vma_growsdown  function  include/linux/mm.h  1072  static inline int vma_growsdown(struct vm_area_struct *vma,unsigned long addr)
stack_guard_page_start  function  include/linux/mm.h  1077  static inline int stack_guard_page_start(struct vm_area_struct *vma,unsigned long addr)
vma_growsup  function  include/linux/mm.h  1086  static inline int vma_growsup(struct vm_area_struct *vma,unsigned long addr)
stack_guard_page_end  function  include/linux/mm.h  1091  static inline int stack_guard_page_end(struct vm_area_struct *vma,unsigned long addr)
vm_is_stack  prototype  include/linux/mm.h  1100  vm_is_stack(struct task_struct *task,struct vm_area_struct *vma,int in_group);
move_page_tables  prototype  include/linux/mm.h  1102  extern unsigned long move_page_tables(struct vm_area_struct *vma,unsigned long old_addr, struct vm_area_struct *new_vma,unsigned long new_addr, unsigned long len,bool need_rmap_locks);
do_mremap  prototype  include/linux/mm.h  1106  extern unsigned long do_mremap(unsigned long addr,unsigned long old_len, unsigned long new_len,unsigned long flags, unsigned long new_addr);
change_protection  prototype  include/linux/mm.h  1109  extern unsigned long change_protection(struct vm_area_struct *vma,unsigned long start,unsigned long end, pgprot_t newprot,int dirty_accountable, int prot_numa);
mprotect_fixup  prototype  include/linux/mm.h  1112  extern int mprotect_fixup(struct vm_area_struct *vma,struct vm_area_struct **pprev, unsigned long start,unsigned long end, unsigned long newflags);
__get_user_pages_fast  prototype  include/linux/mm.h  1119  int __get_user_pages_fast(unsigned long start,int nr_pages,int write,struct page **pages);
get_mm_counter  function  include/linux/mm.h  1124  static inline unsigned long get_mm_counter(struct mm_struct *mm,int member)
add_mm_counter  function  include/linux/mm.h  1139  static inline void add_mm_counter(struct mm_struct *mm,int member,long value)
inc_mm_counter  function  include/linux/mm.h  1144  static inline void inc_mm_counter(struct mm_struct *mm,int member)
dec_mm_counter  function  include/linux/mm.h  1149  static inline void dec_mm_counter(struct mm_struct *mm,int member)
get_mm_rss  function  include/linux/mm.h  1154  static inline unsigned long get_mm_rss(struct mm_struct *mm)
get_mm_hiwater_rss  function  include/linux/mm.h  1160  static inline unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
get_mm_hiwater_vm  function  include/linux/mm.h  1165  static inline unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
update_hiwater_rss  function  include/linux/mm.h  1170  static inline void update_hiwater_rss(struct mm_struct *mm)
update_hiwater_vm  function  include/linux/mm.h  1178  static inline void update_hiwater_vm(struct mm_struct *mm)
setmax_mm_hiwater_rss  function  include/linux/mm.h  1184  static inline void setmax_mm_hiwater_rss(unsigned long *maxrss,struct mm_struct *mm)
sync_mm_rss  function  include/linux/mm.h  1196  static inline void sync_mm_rss(struct mm_struct *mm)
vma_wants_writenotify  prototype  include/linux/mm.h  1201  int vma_wants_writenotify(struct vm_area_struct *vma);
__get_locked_pte  prototype  include/linux/mm.h  1203  extern pte_t *__get_locked_pte(struct mm_struct *mm,unsigned long addr,spinlock_t **ptl);
get_locked_pte  function  include/linux/mm.h  1205  static inline pte_t *get_locked_pte(struct mm_struct *mm,unsigned long addr,spinlock_t **ptl)
__pud_alloc  prototype  include/linux/mm.h  1220  int __pud_alloc(struct mm_struct *mm,pgd_t *pgd,unsigned long address);
__pmd_alloc  prototype  include/linux/mm.h  1230  int __pmd_alloc(struct mm_struct *mm,pud_t *pud,unsigned long address);
__pte_alloc  prototype  include/linux/mm.h  1233  int __pte_alloc(struct mm_struct *mm,struct vm_area_struct *vma,pmd_t *pmd, unsigned long address);
__pte_alloc_kernel  prototype  include/linux/mm.h  1235  int __pte_alloc_kernel(pmd_t *pmd,unsigned long address);
pud_alloc  function  include/linux/mm.h  1242  static inline pud_t *pud_alloc(struct mm_struct *mm,pgd_t *pgd,unsigned long address)
pmd_alloc  function  include/linux/mm.h  1248  static inline pmd_t *pmd_alloc(struct mm_struct *mm,pud_t *pud,unsigned long address)
__pte_lockptr  macro  include/linux/mm.h  1262  #define __pte_lockptr(page) &((page)->ptl)
pte_lock_init  macro  include/linux/mm.h  1272  #define pte_lock_init(page) do {} while (0)
pte_lock_deinit  macro  include/linux/mm.h  1273  #define pte_lock_deinit(page) do {} while (0)
pte_lockptr  macro  include/linux/mm.h  1274  #define pte_lockptr(mm,pmd) ({(void)(pmd); &(mm)->page_table_lock;})
pgtable_page_ctor  function  include/linux/mm.h  1277  static inline void pgtable_page_ctor(struct page *page)
pgtable_page_dtor  function  include/linux/mm.h  1283  static inline void pgtable_page_dtor(struct page *page)
pte_offset_map_lock  macro  include/linux/mm.h  1289  #define pte_offset_map_lock(mm,pmd,address,ptlp) ({ spinlock_t *__ptl = pte_lockptr(mm, pmd); pte_t *__pte = pte_offset_map(pmd, address); *(ptlp) = __ptl; spin_lock(__ptl); __pte; })
pte_unmap_unlock  macro  include/linux/mm.h  1298  #define pte_unmap_unlock(pte,ptl) do { spin_unlock(ptl); pte_unmap(pte); } while (0)
pte_alloc_map  macro  include/linux/mm.h  1303  #define pte_alloc_map(mm,vma,pmd,address) ((unlikely(pmd_none(*(pmd))) && __pte_alloc(mm, vma, pmd, address))? NULL: pte_offset_map(pmd, address))
pte_alloc_map_lock  macro  include/linux/mm.h  1308  #define pte_alloc_map_lock(mm,pmd,address,ptlp) ((unlikely(pmd_none(*(pmd))) && __pte_alloc(mm, NULL, pmd, address))? NULL: pte_offset_map_lock(mm, pmd, address, ptlp))
pte_alloc_kernel  macro  include/linux/mm.h  1313  #define pte_alloc_kernel(pmd,address) ((unlikely(pmd_none(*(pmd))) && __pte_alloc_kernel(pmd, address))? NULL: pte_offset_kernel(pmd, address))
free_area_init  prototype  include/linux/mm.h  1317  extern void free_area_init(unsigned long * zones_size);
free_area_init_node  prototype  include/linux/mm.h  1318  extern void free_area_init_node(int nid,unsigned long * zones_size,unsigned long zone_start_pfn, unsigned long *zholes_size);
free_initmem  prototype  include/linux/mm.h  1320  extern void free_initmem(void);
free_area_init_nodes  prototype  include/linux/mm.h  1349  extern void free_area_init_nodes(unsigned long *max_zone_pfn);
node_map_pfn_alignment  prototype  include/linux/mm.h  1350  unsigned long node_map_pfn_alignment(void);
__absent_pages_in_range  prototype  include/linux/mm.h  1351  unsigned long __absent_pages_in_range(int nid,unsigned long start_pfn,unsigned long end_pfn);
absent_pages_in_range  prototype  include/linux/mm.h  1353  extern unsigned long absent_pages_in_range(unsigned long start_pfn,unsigned long end_pfn);
get_pfn_range_for_nid  prototype  include/linux/mm.h  1355  extern void get_pfn_range_for_nid(unsigned int nid,unsigned long *start_pfn, unsigned long *end_pfn);
find_min_pfn_with_active_regions  prototype  include/linux/mm.h  1357  extern unsigned long find_min_pfn_with_active_regions(void);
free_bootmem_with_active_regions  prototype  include/linux/mm.h  1358  extern void free_bootmem_with_active_regions(int nid,unsigned long max_low_pfn);
sparse_memory_present_with_active_regions  prototype  include/linux/mm.h  1360  extern void sparse_memory_present_with_active_regions(int nid);
__early_pfn_to_nid  prototype  include/linux/mm.h  1375  extern int __meminit __early_pfn_to_nid(unsigned long pfn);
set_dma_reserve  prototype  include/linux/mm.h  1379  extern void set_dma_reserve(unsigned long new_dma_reserve);
memmap_init_zone  prototype  include/linux/mm.h  1380  extern void memmap_init_zone(unsigned long,int,unsigned long,unsigned long, enum memmap_context);
setup_per_zone_wmarks  prototype  include/linux/mm.h  1382  extern void setup_per_zone_wmarks(void);
init_per_zone_wmark_min  prototype  include/linux/mm.h  1383  extern int __meminit init_per_zone_wmark_min(void);
mem_init  prototype  include/linux/mm.h  1384  extern void mem_init(void);
mmap_init  prototype  include/linux/mm.h  1385  extern void __init mmap_init(void);
show_mem  prototype  include/linux/mm.h  1386  extern void show_mem(unsigned int flags);
si_meminfo  prototype  include/linux/mm.h  1387  extern void si_meminfo(struct sysinfo * val);
si_meminfo_node  prototype  include/linux/mm.h  1388  extern void si_meminfo_node(struct sysinfo *val,int nid);
warn_alloc_failed  prototype  include/linux/mm.h  1392  void warn_alloc_failed(gfp_t gfp_mask,int order,const char *fmt,...);
setup_per_cpu_pageset  prototype  include/linux/mm.h  1394  extern void setup_per_cpu_pageset(void);
zone_pcp_update  prototype  include/linux/mm.h  1396  extern void zone_pcp_update(struct zone *zone);
zone_pcp_reset  prototype  include/linux/mm.h  1397  extern void zone_pcp_reset(struct zone *zone);
nommu_shrink_inode_mappings  prototype  include/linux/mm.h  1401  extern int nommu_shrink_inode_mappings(struct inode *,size_t,size_t);
vma_interval_tree_insert  prototype  include/linux/mm.h  1404  void vma_interval_tree_insert(struct vm_area_struct *node,struct rb_root *root);
vma_interval_tree_insert_after  prototype  include/linux/mm.h  1406  void vma_interval_tree_insert_after(struct vm_area_struct *node,struct vm_area_struct *prev,struct rb_root *root);
vma_interval_tree_remove  prototype  include/linux/mm.h  1409  void vma_interval_tree_remove(struct vm_area_struct *node,struct rb_root *root);
vma_interval_tree_iter_first  prototype  include/linux/mm.h  1411  struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root *root,unsigned long start, unsigned long last);
vma_interval_tree_iter_next  prototype  include/linux/mm.h  1413  struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *node,unsigned long start, unsigned long last);
vma_interval_tree_foreach  macro  include/linux/mm.h  1416  #define vma_interval_tree_foreach(vma,root,start,last) for (vma = vma_interval_tree_iter_first(root, start, last); vma; vma = vma_interval_tree_iter_next(vma, start, last))
vma_nonlinear_insert  function  include/linux/mm.h  1420  static inline void vma_nonlinear_insert(struct vm_area_struct *vma,struct list_head *list)
anon_vma_interval_tree_insert  prototype  include/linux/mm.h  1426  void anon_vma_interval_tree_insert(struct anon_vma_chain *node,struct rb_root *root);
anon_vma_interval_tree_remove  prototype  include/linux/mm.h  1428  void anon_vma_interval_tree_remove(struct anon_vma_chain *node,struct rb_root *root);
anon_vma_interval_tree_iter_first  prototype  include/linux/mm.h  1430  struct anon_vma_chain *anon_vma_interval_tree_iter_first(
anon_vma_interval_tree_iter_next  prototype  include/linux/mm.h  1432  struct anon_vma_chain *anon_vma_interval_tree_iter_next(
anon_vma_interval_tree_verify  prototype  include/linux/mm.h  1435  void anon_vma_interval_tree_verify(struct anon_vma_chain *node);
anon_vma_interval_tree_foreach  macro  include/linux/mm.h  1438  #define anon_vma_interval_tree_foreach(avc,root,start,last) for (avc = anon_vma_interval_tree_iter_first(root, start, last); avc; avc = anon_vma_interval_tree_iter_next(avc, start, last))
__vm_enough_memory  prototype  include/linux/mm.h  1443  extern int __vm_enough_memory(struct mm_struct *mm,long pages,int cap_sys_admin);
vma_adjust  prototype  include/linux/mm.h  1444  extern int vma_adjust(struct vm_area_struct *vma,unsigned long start,unsigned long end, pgoff_t pgoff, struct vm_area_struct *insert);
vma_merge  prototype  include/linux/mm.h  1446  extern struct vm_area_struct *vma_merge(struct mm_struct *,struct vm_area_struct *prev, unsigned long addr, unsigned long end,unsigned long vm_flags, struct anon_vma *, struct file *, pgoff_t,struct mempolicy *);
find_mergeable_anon_vma  prototype  include/linux/mm.h  1450  extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
split_vma  prototype  include/linux/mm.h  1451  extern int split_vma(struct mm_struct *,struct vm_area_struct *, unsigned long addr, int new_below);
insert_vm_struct  prototype  include/linux/mm.h  1453  extern int insert_vm_struct(struct mm_struct *,struct vm_area_struct *);
__vma_link_rb  prototype  include/linux/mm.h  1454  extern void __vma_link_rb(struct mm_struct *,struct vm_area_struct *,struct rb_node **, struct rb_node *);
unlink_file_vma  prototype  include/linux/mm.h  1456  extern void unlink_file_vma(struct vm_area_struct *);
copy_vma  prototype  include/linux/mm.h  1457  extern struct vm_area_struct *copy_vma(struct vm_area_struct **,unsigned long addr, unsigned long len, pgoff_t pgoff,bool *need_rmap_locks);
exit_mmap  prototype  include/linux/mm.h  1460  extern void exit_mmap(struct mm_struct *);
mm_take_all_locks  prototype  include/linux/mm.h  1462  extern int mm_take_all_locks(struct mm_struct *mm);
mm_drop_all_locks  prototype  include/linux/mm.h  1463  extern void mm_drop_all_locks(struct mm_struct *mm);
set_mm_exe_file  prototype  include/linux/mm.h  1465  extern void set_mm_exe_file(struct mm_struct *mm,struct file *new_exe_file);
get_mm_exe_file  prototype  include/linux/mm.h  1466  extern struct file *get_mm_exe_file(struct mm_struct *mm);
may_expand_vm  prototype  include/linux/mm.h  1468  extern int may_expand_vm(struct mm_struct *mm,unsigned long npages);
install_special_mapping  prototype  include/linux/mm.h  1469  extern int install_special_mapping(struct mm_struct *mm,unsigned long addr, unsigned long len,unsigned long flags, struct page **pages);
get_unmapped_area  prototype  include/linux/mm.h  1473  extern unsigned long get_unmapped_area(struct file *,unsigned long,unsigned long,unsigned long,unsigned long);
mmap_region  prototype  include/linux/mm.h  1475  extern unsigned long mmap_region(struct file *file,unsigned long addr,unsigned long len, unsigned long flags,vm_flags_t vm_flags, unsigned long pgoff);
do_mmap_pgoff  prototype  include/linux/mm.h  1478  extern unsigned long do_mmap_pgoff(struct file *,unsigned long,unsigned long, unsigned long,unsigned long, unsigned long);
do_munmap  prototype  include/linux/mm.h  1481  extern int do_munmap(struct mm_struct *,unsigned long,size_t);
vm_brk  prototype  include/linux/mm.h  1484  extern unsigned long vm_brk(unsigned long,unsigned long);
vm_munmap  prototype  include/linux/mm.h  1485  extern int vm_munmap(unsigned long,size_t);
vm_mmap  prototype  include/linux/mm.h  1486  extern unsigned long vm_mmap(struct file *,unsigned long,unsigned long, unsigned long,unsigned long, unsigned long);
vm_unmapped_area_info  struct  include/linux/mm.h  1490  struct vm_unmapped_area_info { #define VM_UNMAPPED_AREA_TOPDOWN 1 unsigned long flags; unsigned long length; unsigned long low_limit; unsigned long high_limit; unsigned long align_mask; unsigned long align_offset; };
unmapped_area  prototype  include/linux/mm.h  1500  extern unsigned long unmapped_area(struct vm_unmapped_area_info *info);
unmapped_area_topdown  prototype  include/linux/mm.h  1501  extern unsigned long unmapped_area_topdown(struct vm_unmapped_area_info *info);
vm_unmapped_area  function  include/linux/mm.h  1513  vm_unmapped_area(struct vm_unmapped_area_info *info)
truncate_inode_pages  prototype  include/linux/mm.h  1522  extern void truncate_inode_pages(struct address_space *,loff_t);
truncate_inode_pages_range  prototype  include/linux/mm.h  1523  extern void truncate_inode_pages_range(struct address_space *,loff_t lstart, loff_t lend);
filemap_fault  prototype  include/linux/mm.h  1527  extern int filemap_fault(struct vm_area_struct *,struct vm_fault *);
filemap_page_mkwrite  prototype  include/linux/mm.h  1528  extern int filemap_page_mkwrite(struct vm_area_struct *vma,struct vm_fault *vmf);
write_one_page  prototype  include/linux/mm.h  1531  int write_one_page(struct page *page,int wait);
task_dirty_inc  prototype  include/linux/mm.h  1532  void task_dirty_inc(struct task_struct *tsk);
VM_MAX_READAHEAD  macro  include/linux/mm.h  1535  #define VM_MAX_READAHEAD 128
VM_MIN_READAHEAD  macro  include/linux/mm.h  1536  #define VM_MIN_READAHEAD 16
force_page_cache_readahead  prototype  include/linux/mm.h  1538  int force_page_cache_readahead(struct address_space *mapping,struct file *filp,pgoff_t offset, unsigned long nr_to_read);
page_cache_sync_readahead  prototype  include/linux/mm.h  1541  void page_cache_sync_readahead(struct address_space *mapping,struct file_ra_state *ra,struct file *filp,pgoff_t offset,unsigned long size);
page_cache_async_readahead  prototype  include/linux/mm.h  1547  void page_cache_async_readahead(struct address_space *mapping,struct file_ra_state *ra,struct file *filp,struct page *pg,pgoff_t offset,unsigned long size);
max_sane_readahead  prototype  include/linux/mm.h  1554  unsigned long max_sane_readahead(unsigned long nr);
ra_submit  prototype  include/linux/mm.h  1555  unsigned long ra_submit(struct file_ra_state *ra,struct address_space *mapping,struct file *filp);
expand_stack  prototype  include/linux/mm.h  1560  extern int expand_stack(struct vm_area_struct *vma,unsigned long address);
expand_downwards  prototype  include/linux/mm.h  1563  extern int expand_downwards(struct vm_area_struct *vma,unsigned long address);
expand_upwards  macro  include/linux/mm.h  1568  #define expand_upwards(vma,address) do { } while (0)
find_vma  prototype  include/linux/mm.h  1572  extern struct vm_area_struct * find_vma(struct mm_struct * mm,unsigned long addr);
find_vma_prev  prototype  include/linux/mm.h  1573  extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm,unsigned long addr,struct vm_area_struct **pprev);
find_vma_intersection  function  include/linux/mm.h  1578  static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * mm,unsigned long start_addr,unsigned long end_addr)
vma_pages  function  include/linux/mm.h  1587  static inline unsigned long vma_pages(struct vm_area_struct *vma)
find_exact_vma  function  include/linux/mm.h  1593  static inline struct vm_area_struct *find_exact_vma(struct mm_struct *mm,unsigned long vm_start, unsigned long vm_end)
vm_get_page_prot  function  include/linux/mm.h  1607  static inline pgprot_t vm_get_page_prot(unsigned long vm_flags)
change_prot_numa  prototype  include/linux/mm.h  1614  unsigned long change_prot_numa(struct vm_area_struct *vma,unsigned long start, unsigned long end);
find_extend_vma  prototype  include/linux/mm.h  1618  struct vm_area_struct *find_extend_vma(struct mm_struct *,unsigned long addr);
remap_pfn_range  prototype  include/linux/mm.h  1619  int remap_pfn_range(struct vm_area_struct *,unsigned long addr,unsigned long pfn, unsigned long size, pgprot_t);
vm_insert_page  prototype  include/linux/mm.h  1621  int vm_insert_page(struct vm_area_struct *,unsigned long addr,struct page *);
vm_insert_pfn  prototype  include/linux/mm.h  1622  int vm_insert_pfn(struct vm_area_struct *vma,unsigned long addr,unsigned long pfn);
vm_insert_mixed  prototype  include/linux/mm.h  1624  int vm_insert_mixed(struct vm_area_struct *vma,unsigned long addr,unsigned long pfn);
vm_iomap_memory  prototype  include/linux/mm.h  1626  int vm_iomap_memory(struct vm_area_struct *vma,phys_addr_t start,unsigned long len);
follow_page  prototype  include/linux/mm.h  1629  struct page *follow_page(struct vm_area_struct *,unsigned long address,unsigned int foll_flags);
FOLL_WRITE  macro  include/linux/mm.h  1631  #define FOLL_WRITE 0x01
FOLL_TOUCH  macro  include/linux/mm.h  1632  #define FOLL_TOUCH 0x02
FOLL_GET  macro  include/linux/mm.h  1633  #define FOLL_GET 0x04
FOLL_DUMP  macro  include/linux/mm.h  1634  #define FOLL_DUMP 0x08
FOLL_FORCE  macro  include/linux/mm.h  1635  #define FOLL_FORCE 0x10
FOLL_NOWAIT  macro  include/linux/mm.h  1636  #define FOLL_NOWAIT 0x20
FOLL_MLOCK  macro  include/linux/mm.h  1638  #define FOLL_MLOCK 0x40
FOLL_SPLIT  macro  include/linux/mm.h  1639  #define FOLL_SPLIT 0x80
FOLL_HWPOISON  macro  include/linux/mm.h  1640  #define FOLL_HWPOISON 0x100
FOLL_NUMA  macro  include/linux/mm.h  1641  #define FOLL_NUMA 0x200
apply_to_page_range  prototype  include/linux/mm.h  1645  extern int apply_to_page_range(struct mm_struct *mm,unsigned long address,unsigned long size, pte_fn_t fn, void *data);
vm_stat_account  function  include/linux/mm.h  1651  static inline void vm_stat_account(struct mm_struct *mm,unsigned long flags, struct file *file, long pages)
kernel_map_pages  function  include/linux/mm.h  1665  kernel_map_pages(struct page *page,int numpages,int enable) {}
kernel_page_present  function  include/linux/mm.h  1667  static inline bool kernel_page_present(struct page *page) { return true; }
get_gate_vma  prototype  include/linux/mm.h  1671  extern struct vm_area_struct *get_gate_vma(struct mm_struct *mm);
in_gate_area_no_mm  prototype  include/linux/mm.h  1676  int in_gate_area_no_mm(unsigned long addr);
in_gate_area  macro  include/linux/mm.h  1677  #define in_gate_area(mm,addr) ({(void)mm; in_gate_area_no_mm(addr);})
drop_caches_sysctl_handler  prototype  include/linux/mm.h  1680  int drop_caches_sysctl_handler(struct ctl_table *,int,void __user *, size_t *, loff_t *);
shrink_slab  prototype  include/linux/mm.h  1682  unsigned long shrink_slab(struct shrink_control *shrink,unsigned long nr_pages_scanned,unsigned long lru_pages);
randomize_va_space  macro  include/linux/mm.h  1687  #define randomize_va_space 0
arch_vma_name  prototype  include/linux/mm.h  1692  const char * arch_vma_name(struct vm_area_struct *vma);
print_vma_addr  prototype  include/linux/mm.h  1693  void print_vma_addr(char *prefix,unsigned long rip);
sparse_mem_maps_populate_node  prototype  include/linux/mm.h  1695  void sparse_mem_maps_populate_node(struct page **map_map,unsigned long pnum_begin,unsigned long pnum_end,unsigned long map_count,int nodeid);
sparse_mem_map_populate  prototype  include/linux/mm.h  1701  struct page *sparse_mem_map_populate(unsigned long pnum,int nid);
vmemmap_pgd_populate  prototype  include/linux/mm.h  1702  pgd_t *vmemmap_pgd_populate(unsigned long addr,int node);
vmemmap_pud_populate  prototype  include/linux/mm.h  1703  pud_t *vmemmap_pud_populate(pgd_t *pgd,unsigned long addr,int node);
vmemmap_pmd_populate  prototype  include/linux/mm.h  1704  pmd_t *vmemmap_pmd_populate(pud_t *pud,unsigned long addr,int node);
vmemmap_pte_populate  prototype  include/linux/mm.h  1705  pte_t *vmemmap_pte_populate(pmd_t *pmd,unsigned long addr,int node);
vmemmap_alloc_block  prototype  include/linux/mm.h  1706  void *vmemmap_alloc_block(unsigned long size,int node);
vmemmap_alloc_block_buf  prototype  include/linux/mm.h  1707  void *vmemmap_alloc_block_buf(unsigned long size,int node);
vmemmap_verify  prototype  include/linux/mm.h  1708  void vmemmap_verify(pte_t *,int,unsigned long,unsigned long);
vmemmap_populate_basepages  prototype  include/linux/mm.h  1709  int vmemmap_populate_basepages(struct page *start_page,unsigned long pages, int node);
vmemmap_populate  prototype  include/linux/mm.h  1711  int vmemmap_populate(struct page *start_page,unsigned long pages,int node);
vmemmap_populate_print_last  prototype  include/linux/mm.h  1712  void vmemmap_populate_print_last(void);
mf_flags  enum  include/linux/mm.h  1715  enum mf_flags { MF_COUNT_INCREASED = 1 << 0, MF_ACTION_REQUIRED = 1 << 1, MF_MUST_KILL = 1 << 2, };
memory_failure  prototype  include/linux/mm.h  1720  extern int memory_failure(unsigned long pfn,int trapno,int flags);
memory_failure_queue  prototype  include/linux/mm.h  1721  extern void memory_failure_queue(unsigned long pfn,int trapno,int flags);
unpoison_memory  prototype  include/linux/mm.h  1722  extern int unpoison_memory(unsigned long pfn);
shake_page  prototype  include/linux/mm.h  1725  extern void shake_page(struct page *p,int access);
soft_offline_page  prototype  include/linux/mm.h  1727  extern int soft_offline_page(struct page *page,int flags);
dump_page  prototype  include/linux/mm.h  1729  extern void dump_page(struct page *page);
clear_huge_page  prototype  include/linux/mm.h  1732  extern void clear_huge_page(struct page *page,unsigned long addr,unsigned int pages_per_huge_page);
copy_user_huge_page  prototype  include/linux/mm.h  1735  extern void copy_user_huge_page(struct page *dst,struct page *src,unsigned long addr, struct vm_area_struct *vma,unsigned int pages_per_huge_page);
debug_guardpage_minorder  function  include/linux/mm.h  1753  static inline unsigned int debug_guardpage_minorder(void) { return 0; }
page_is_guard  function  include/linux/mm.h  1754  static inline bool page_is_guard(struct page *page) { return false; }
_ASM_X86_PLATFORM_H  macro  arch/x86/include/asm/x86_init.h  2  #define _ASM_X86_PLATFORM_H
x86_init_mpparse  struct  arch/x86/include/asm/x86_init.h  23  struct x86_init_mpparse { void (*mpc_record)(unsigned int mode); void (*setup_ioapic_ids)(void); int (*mpc_apic_id)(struct mpc_cpu *m); void (*smp_read_mpc_oem)(struct mpc_table *mpc); void (*mpc_oem_pci_bus)(struct mpc_bus *m); void (*mpc_oem_bus_info)(struct mpc_bus *m, char *name); void (*find_smp_config)(void); void (*get_smp_config)(unsigned int early); };
x86_init_resources  struct  arch/x86/include/asm/x86_init.h  42  struct x86_init_resources { void (*probe_roms)(void); void (*reserve_resources)(void); char *(*memory_setup)(void); };
x86_init_irqs  struct  arch/x86/include/asm/x86_init.h  55  struct x86_init_irqs { void (*pre_vector_init)(void); void (*intr_init)(void); void (*trap_init)(void); };
x86_init_oem  struct  arch/x86/include/asm/x86_init.h  66  struct x86_init_oem { void (*arch_setup)(void); void (*banner)(void); };
x86_init_mapping  struct  arch/x86/include/asm/x86_init.h  78  struct x86_init_mapping { void (*pagetable_reserve)(u64 start, u64 end); };
x86_init_paging  struct  arch/x86/include/asm/x86_init.h  89  struct x86_init_paging { void (*pagetable_init)(void); };
x86_init_timers  struct  arch/x86/include/asm/x86_init.h  101  struct x86_init_timers { void (*setup_percpu_clockev)(void); void (*tsc_pre_init)(void); void (*timer_init)(void); void (*wallclock_init)(void); };
x86_init_iommu  struct  arch/x86/include/asm/x86_init.h  112  struct x86_init_iommu { int (*iommu_init)(void); };
x86_init_pci  struct  arch/x86/include/asm/x86_init.h  123  struct x86_init_pci { int (*arch_init)(void); int (*init)(void); void (*init_irq)(void); void (*fixup_irqs)(void); };
x86_init_ops  struct  arch/x86/include/asm/x86_init.h  134  struct x86_init_ops { struct x86_init_resources resources; struct x86_init_mpparse mpparse; struct x86_init_irqs irqs; struct x86_init_oem oem; struct x86_init_mapping mapping; struct x86_init_paging paging; struct x86_init_timers timers; struct x86_init_iommu iommu; struct x86_init_pci pci; };
x86_cpuinit_ops  struct  arch/x86/include/asm/x86_init.h  151  struct x86_cpuinit_ops { void (*setup_percpu_clockev)(void); void (*early_percpu_clock_init)(void); void (*fixup_cpu_id)(struct cpuinfo_x86 *c, int node); };
x86_platform_ops  struct  arch/x86/include/asm/x86_init.h  169  struct x86_platform_ops { unsigned long (*calibrate_tsc)(void); unsigned long (*get_wallclock)(void); int (*set_wallclock)(unsigned long nowtime); void (*iommu_shutdown)(void); bool (*is_untracked_pat_range)(u64 start, u64 end); void (*nmi_init)(void); unsigned char (*get_nmi_reason)(void); int (*i8042_detect)(void); void (*save_sched_clock_state)(void); void (*restore_sched_clock_state)(void); void (*apic_post_init)(void); };
x86_msi_ops  struct  arch/x86/include/asm/x86_init.h  185  struct x86_msi_ops { int (*setup_msi_irqs)(struct pci_dev *dev, int nvec, int type); void (*teardown_msi_irq)(unsigned int irq); void (*teardown_msi_irqs)(struct pci_dev *dev); void (*restore_msi_irqs)(struct pci_dev *dev, int irq); };
x86_io_apic_ops  struct  arch/x86/include/asm/x86_init.h  192  struct x86_io_apic_ops { void (*init) (void); unsigned int (*read) (unsigned int apic, unsigned int reg); void (*write) (unsigned int apic, unsigned int reg, unsigned int value); void (*modify)(unsigned int apic, unsigned int reg, unsigned int value); };
x86_init_noop  prototype  arch/x86/include/asm/x86_init.h  204  extern void x86_init_noop(void);
x86_init_uint_noop  prototype  arch/x86/include/asm/x86_init.h  205  extern void x86_init_uint_noop(unsigned int unused);
_ASM_X86_PCI_64_H  macro  arch/x86/include/asm/pci_64.h  2  #define _ASM_X86_PCI_64_H
pci_iommu  function  arch/x86/include/asm/pci_64.h  7  static inline void *pci_iommu(struct pci_bus *bus)
set_pci_iommu  function  arch/x86/include/asm/pci_64.h  13  static inline void set_pci_iommu(struct pci_bus *bus,void *val)
_ASM_GENERIC_PCI_DMA_COMPAT_H  macro  include/asm-generic/pci-dma-compat.h  5  #define _ASM_GENERIC_PCI_DMA_COMPAT_H
pci_dma_supported  function  include/asm-generic/pci-dma-compat.h  10  pci_dma_supported(struct pci_dev *hwdev,u64 mask)
pci_alloc_consistent  function  include/asm-generic/pci-dma-compat.h  16  pci_alloc_consistent(struct pci_dev *hwdev,size_t size,dma_addr_t *dma_handle)
pci_free_consistent  function  include/asm-generic/pci-dma-compat.h  23  pci_free_consistent(struct pci_dev *hwdev,size_t size,void *vaddr, dma_addr_t dma_handle)
pci_map_single  function  include/asm-generic/pci-dma-compat.h  30  pci_map_single(struct pci_dev *hwdev,void *ptr,size_t size,int direction)
pci_unmap_single  function  include/asm-generic/pci-dma-compat.h  36  pci_unmap_single(struct pci_dev *hwdev,dma_addr_t dma_addr,size_t size, int direction)
pci_map_page  function  include/asm-generic/pci-dma-compat.h  43  pci_map_page(struct pci_dev *hwdev,struct page *page,unsigned long offset, size_t size, int direction)
pci_unmap_page  function  include/asm-generic/pci-dma-compat.h  50  pci_unmap_page(struct pci_dev *hwdev,dma_addr_t dma_address,size_t size, int direction)
pci_map_sg  function  include/asm-generic/pci-dma-compat.h  57  pci_map_sg(struct pci_dev *hwdev,struct scatterlist *sg,int nents, int direction)
pci_unmap_sg  function  include/asm-generic/pci-dma-compat.h  64  pci_unmap_sg(struct pci_dev *hwdev,struct scatterlist *sg,int nents, int direction)
pci_dma_sync_single_for_cpu  function  include/asm-generic/pci-dma-compat.h  71  pci_dma_sync_single_for_cpu(struct pci_dev *hwdev,dma_addr_t dma_handle,size_t size, int direction)
pci_dma_sync_single_for_device  function  include/asm-generic/pci-dma-compat.h  78  pci_dma_sync_single_for_device(struct pci_dev *hwdev,dma_addr_t dma_handle,size_t size, int direction)
pci_dma_sync_sg_for_cpu  function  include/asm-generic/pci-dma-compat.h  85  pci_dma_sync_sg_for_cpu(struct pci_dev *hwdev,struct scatterlist *sg,int nelems, int direction)
pci_dma_sync_sg_for_device  function  include/asm-generic/pci-dma-compat.h  92  pci_dma_sync_sg_for_device(struct pci_dev *hwdev,struct scatterlist *sg,int nelems, int direction)
pci_dma_mapping_error  function  include/asm-generic/pci-dma-compat.h  99  pci_dma_mapping_error(struct pci_dev *pdev,dma_addr_t dma_addr)
_ASM_GENERIC_PCI_H  macro  include/asm-generic/pci.h  7  #define _ASM_GENERIC_PCI_H
pcibios_select_root  function  include/asm-generic/pci.h  10  pcibios_select_root(struct pci_dev *pdev,struct resource *res)
pci_get_legacy_ide_irq  function  include/asm-generic/pci.h  23  static inline int pci_get_legacy_ide_irq(struct pci_dev *dev,int channel)
__LINUX_SPINLOCK_TYPES_H  macro  include/linux/spinlock_types.h  2  #define __LINUX_SPINLOCK_TYPES_H
raw_spinlock  struct  include/linux/spinlock_types.h  20  typedef struct raw_spinlock { arch_spinlock_t raw_lock; unsigned int break_lock; unsigned int magic, owner_cpu; void *owner; struct lockdep_map dep_map; } raw_spinlock_t;
raw_spinlock_t  struct  include/linux/spinlock_types.h  20  typedef struct raw_spinlock { arch_spinlock_t raw_lock; unsigned int break_lock; unsigned int magic, owner_cpu; void *owner; struct lockdep_map dep_map; } raw_spinlock_t;
SPINLOCK_MAGIC  macro  include/linux/spinlock_types.h  34  #define SPINLOCK_MAGIC 0xdead4ead
SPINLOCK_OWNER_INIT  macro  include/linux/spinlock_types.h  36  #define SPINLOCK_OWNER_INIT ((void *)-1L)
SPIN_DEP_MAP_INIT  macro  include/linux/spinlock_types.h  41  # define SPIN_DEP_MAP_INIT(lockname)
SPIN_DEBUG_INIT  macro  include/linux/spinlock_types.h  50  # define SPIN_DEBUG_INIT(lockname)
__RAW_SPIN_LOCK_INITIALIZER  macro  include/linux/spinlock_types.h  53  #define __RAW_SPIN_LOCK_INITIALIZER(lockname) { .raw_lock = __ARCH_SPIN_LOCK_UNLOCKED, SPIN_DEBUG_INIT(lockname) SPIN_DEP_MAP_INIT(lockname) }
__RAW_SPIN_LOCK_UNLOCKED  macro  include/linux/spinlock_types.h  59  #define __RAW_SPIN_LOCK_UNLOCKED(lockname) (raw_spinlock_t) __RAW_SPIN_LOCK_INITIALIZER(lockname)
DEFINE_RAW_SPINLOCK  macro  include/linux/spinlock_types.h  62  #define DEFINE_RAW_SPINLOCK(x) raw_spinlock_t x = __RAW_SPIN_LOCK_UNLOCKED(x)
spinlock  struct  include/linux/spinlock_types.h  64  typedef struct spinlock { struct raw_spinlock rlock; # define LOCK_PADSIZE (offsetof(struct raw_spinlock, dep_map)) struct { u8 __padding[LOCK_PADSIZE]; struct lockdep_map dep_map; }; } spinlock_t;
spinlock_t  struct  include/linux/spinlock_types.h  64  typedef struct spinlock { struct raw_spinlock rlock; # define LOCK_PADSIZE (offsetof(struct raw_spinlock, dep_map)) struct { u8 __padding[LOCK_PADSIZE]; struct lockdep_map dep_map; }; } spinlock_t;
__SPIN_LOCK_INITIALIZER  macro  include/linux/spinlock_types.h  78  #define __SPIN_LOCK_INITIALIZER(lockname) { { .rlock = __RAW_SPIN_LOCK_INITIALIZER(lockname) } }
__SPIN_LOCK_UNLOCKED  macro  include/linux/spinlock_types.h  81  #define __SPIN_LOCK_UNLOCKED(lockname) (spinlock_t ) __SPIN_LOCK_INITIALIZER(lockname)
DEFINE_SPINLOCK  macro  include/linux/spinlock_types.h  84  #define DEFINE_SPINLOCK(x) spinlock_t x = __SPIN_LOCK_UNLOCKED(x)
__LINUX_MUTEX_DEBUG_H  macro  include/linux/mutex-debug.h  2  #define __LINUX_MUTEX_DEBUG_H
_LINUX_ERR_H  macro  include/linux/err.h  2  #define _LINUX_ERR_H
MAX_ERRNO  macro  include/linux/err.h  16  #define MAX_ERRNO 4095
IS_ERR_VALUE  macro  include/linux/err.h  20  #define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)
ERR_PTR  function  include/linux/err.h  22  static inline void * __must_check ERR_PTR(long error)
PTR_ERR  function  include/linux/err.h  27  static inline long __must_check PTR_ERR(const void *ptr)
IS_ERR  function  include/linux/err.h  32  static inline long __must_check IS_ERR(const void *ptr)
IS_ERR_OR_NULL  function  include/linux/err.h  37  static inline long __must_check IS_ERR_OR_NULL(const void *ptr)
ERR_CAST  function  include/linux/err.h  49  static inline void * __must_check ERR_CAST(const void *ptr)
PTR_RET  function  include/linux/err.h  55  static inline int __must_check PTR_RET(const void *ptr)
_DMA_ATTR_H  macro  include/linux/dma-attrs.h  2  #define _DMA_ATTR_H
dma_attr  enum  include/linux/dma-attrs.h  13  enum dma_attr { DMA_ATTR_WRITE_BARRIER, DMA_ATTR_WEAK_ORDERING, DMA_ATTR_WRITE_COMBINE, DMA_ATTR_NON_CONSISTENT, DMA_ATTR_NO_KERNEL_MAPPING, DMA_ATTR_SKIP_CPU_SYNC, DMA_ATTR_FORCE_CONTIGUOUS, DMA_ATTR_MAX, };
__DMA_ATTRS_LONGS  macro  include/linux/dma-attrs.h  24  #define __DMA_ATTRS_LONGS BITS_TO_LONGS(DMA_ATTR_MAX)
dma_attrs  struct  include/linux/dma-attrs.h  30  struct dma_attrs { unsigned long flags[__DMA_ATTRS_LONGS]; };
DEFINE_DMA_ATTRS  macro  include/linux/dma-attrs.h  34  #define DEFINE_DMA_ATTRS(x) struct dma_attrs x = { .flags = { [0 ... __DMA_ATTRS_LONGS-1] = 0 }, }
init_dma_attrs  function  include/linux/dma-attrs.h  39  static inline void init_dma_attrs(struct dma_attrs *attrs)
dma_set_attr  function  include/linux/dma-attrs.h  71  static inline void dma_set_attr(enum dma_attr attr,struct dma_attrs *attrs)
dma_get_attr  function  include/linux/dma-attrs.h  75  static inline int dma_get_attr(enum dma_attr attr,struct dma_attrs *attrs)
_LINUX_DMA_DIRECTION_H  macro  include/linux/dma-direction.h  2  #define _LINUX_DMA_DIRECTION_H
dma_data_direction  enum  include/linux/dma-direction.h  7  enum dma_data_direction { DMA_BIDIRECTIONAL = 0, DMA_TO_DEVICE = 1, DMA_FROM_DEVICE = 2, DMA_NONE = 3, };
_ASM_X86_DMA_MAPPING_H  macro  arch/x86/include/asm/dma-mapping.h  2  #define _ASM_X86_DMA_MAPPING_H
ISA_DMA_BIT_MASK  macro  arch/x86/include/asm/dma-mapping.h  21  # define ISA_DMA_BIT_MASK DMA_BIT_MASK(32)
DMA_ERROR_CODE  macro  arch/x86/include/asm/dma-mapping.h  24  #define DMA_ERROR_CODE 0
get_dma_ops  function  arch/x86/include/asm/dma-mapping.h  32  static inline struct dma_map_ops *get_dma_ops(struct device *dev)
dma_mapping_error  prototype  include/asm-generic/dma-mapping-broken.h  80  dma_mapping_error(struct device *dev,dma_addr_t dma_addr);
dma_alloc_noncoherent  macro  include/asm-generic/dma-mapping-broken.h  35  #define dma_alloc_noncoherent(d,s,h,f) dma_alloc_coherent(d,s,h,f)
dma_free_noncoherent  macro  include/asm-generic/dma-mapping-broken.h  36  #define dma_free_noncoherent(d,s,v,h) dma_free_coherent(d,s,v,h)
dma_supported  prototype  include/asm-generic/dma-mapping-broken.h  83  dma_supported(struct device *dev,u64 mask);
dma_set_mask  prototype  include/asm-generic/dma-mapping-broken.h  86  dma_set_mask(struct device *dev,u64 mask);
dma_generic_alloc_coherent  prototype  arch/x86/include/asm/dma-mapping.h  63  extern void *dma_generic_alloc_coherent(struct device *dev,size_t size,dma_addr_t *dma_addr, gfp_t flag,struct dma_attrs *attrs);
dma_generic_free_coherent  prototype  arch/x86/include/asm/dma-mapping.h  67  extern void dma_generic_free_coherent(struct device *dev,size_t size,void *vaddr, dma_addr_t dma_addr,struct dma_attrs *attrs);
dma_capable  function  arch/x86/include/asm/dma-mapping.h  77  static inline bool dma_capable(struct device *dev,dma_addr_t addr,size_t size)
phys_to_dma  function  arch/x86/include/asm/dma-mapping.h  85  static inline dma_addr_t phys_to_dma(struct device *dev,phys_addr_t paddr)
dma_to_phys  function  arch/x86/include/asm/dma-mapping.h  90  static inline phys_addr_t dma_to_phys(struct device *dev,dma_addr_t daddr)
dma_cache_sync  prototype  include/asm-generic/dma-mapping-broken.h  92  dma_cache_sync(struct device *dev,void *vaddr,size_t size,enum dma_data_direction direction);
dma_alloc_coherent_mask  function  arch/x86/include/asm/dma-mapping.h  103  static inline unsigned long dma_alloc_coherent_mask(struct device *dev,gfp_t gfp)
dma_alloc_coherent_gfp_flags  function  arch/x86/include/asm/dma-mapping.h  115  static inline gfp_t dma_alloc_coherent_gfp_flags(struct device *dev,gfp_t gfp)
dma_alloc_coherent  prototype  include/asm-generic/dma-mapping-broken.h  12  dma_alloc_coherent(struct device *dev,size_t size,dma_addr_t *dma_handle,gfp_t flag);
dma_alloc_attrs  function  include/asm-generic/dma-mapping-broken.h  19  static inline void *dma_alloc_attrs(struct device *dev,size_t size,dma_addr_t *dma_handle, gfp_t flag,struct dma_attrs *attrs)
dma_free_coherent  prototype  include/asm-generic/dma-mapping-broken.h  16  dma_free_coherent(struct device *dev,size_t size,void *cpu_addr,dma_addr_t dma_handle);
dma_free_attrs  function  include/asm-generic/dma-mapping-broken.h  27  static inline void dma_free_attrs(struct device *dev,size_t size,void *cpu_addr, dma_addr_t dma_handle,struct dma_attrs *attrs)
_ASM_GENERIC_DMA_MAPPING_H  macro  include/asm-generic/dma-mapping-broken.h  2  #define _ASM_GENERIC_DMA_MAPPING_H
dma_map_single  prototype  include/asm-generic/dma-mapping-broken.h  39  dma_map_single(struct device *dev,void *ptr,size_t size,enum dma_data_direction direction);
dma_unmap_single  prototype  include/asm-generic/dma-mapping-broken.h  43  dma_unmap_single(struct device *dev,dma_addr_t dma_addr,size_t size,enum dma_data_direction direction);
dma_map_sg  prototype  include/asm-generic/dma-mapping-broken.h  47  dma_map_sg(struct device *dev,struct scatterlist *sg,int nents,enum dma_data_direction direction);
dma_unmap_sg  prototype  include/asm-generic/dma-mapping-broken.h  51  dma_unmap_sg(struct device *dev,struct scatterlist *sg,int nhwentries,enum dma_data_direction direction);
dma_map_page  prototype  include/asm-generic/dma-mapping-broken.h  55  dma_map_page(struct device *dev,struct page *page,unsigned long offset,size_t size, enum dma_data_direction direction);
dma_unmap_page  prototype  include/asm-generic/dma-mapping-broken.h  59  dma_unmap_page(struct device *dev,dma_addr_t dma_address,size_t size,enum dma_data_direction direction);
dma_sync_single_for_cpu  prototype  include/asm-generic/dma-mapping-broken.h  63  dma_sync_single_for_cpu(struct device *dev,dma_addr_t dma_handle,size_t size,enum dma_data_direction direction);
dma_sync_single_range_for_cpu  prototype  include/asm-generic/dma-mapping-broken.h  67  dma_sync_single_range_for_cpu(struct device *dev,dma_addr_t dma_handle,unsigned long offset, size_t size,enum dma_data_direction direction);
dma_sync_sg_for_cpu  prototype  include/asm-generic/dma-mapping-broken.h  72  dma_sync_sg_for_cpu(struct device *dev,struct scatterlist *sg,int nelems,enum dma_data_direction direction);
dma_sync_single_for_device  macro  include/asm-generic/dma-mapping-broken.h  75  #define dma_sync_single_for_device dma_sync_single_for_cpu
dma_sync_single_range_for_device  macro  include/asm-generic/dma-mapping-broken.h  76  #define dma_sync_single_range_for_device dma_sync_single_range_for_cpu
dma_sync_sg_for_device  macro  include/asm-generic/dma-mapping-broken.h  77  #define dma_sync_sg_for_device dma_sync_sg_for_cpu
_LINUX_SCHED_H  macro  include/linux/sched.h  2  #define _LINUX_SCHED_H
sched_param  struct  include/linux/sched.h  7  struct sched_param { int sched_priority; };
CLONE_KERNEL  macro  include/linux/sched.h  69  #define CLONE_KERNEL (CLONE_FS | CLONE_FILES | CLONE_SIGHAND)
get_avenrun  prototype  include/linux/sched.h  82  extern void get_avenrun(unsigned long *loads,unsigned long offset,int shift);
FSHIFT  macro  include/linux/sched.h  84  #define FSHIFT 11
FIXED_1  macro  include/linux/sched.h  85  #define FIXED_1 (1<<FSHIFT)
LOAD_FREQ  macro  include/linux/sched.h  86  #define LOAD_FREQ (5*HZ+1)
EXP_1  macro  include/linux/sched.h  87  #define EXP_1 1884
EXP_5  macro  include/linux/sched.h  88  #define EXP_5 2014
EXP_15  macro  include/linux/sched.h  89  #define EXP_15 2037
CALC_LOAD  macro  include/linux/sched.h  91  #define CALC_LOAD(load,exp,n) load *= exp; load += n*(FIXED_1-exp); load >>= FSHIFT;
nr_processes  prototype  include/linux/sched.h  99  extern int nr_processes(void);
nr_running  prototype  include/linux/sched.h  100  extern unsigned long nr_running(void);
nr_uninterruptible  prototype  include/linux/sched.h  101  extern unsigned long nr_uninterruptible(void);
nr_iowait  prototype  include/linux/sched.h  102  extern unsigned long nr_iowait(void);
nr_iowait_cpu  prototype  include/linux/sched.h  103  extern unsigned long nr_iowait_cpu(int cpu);
this_cpu_load  prototype  include/linux/sched.h  104  extern unsigned long this_cpu_load(void);
calc_global_load  prototype  include/linux/sched.h  107  extern void calc_global_load(unsigned long ticks);
update_cpu_load_nohz  prototype  include/linux/sched.h  108  extern void update_cpu_load_nohz(void);
task_migration_notifier  struct  include/linux/sched.h  111  struct task_migration_notifier { struct task_struct *task; int from_cpu; int to_cpu; };
register_task_migration_notifier  prototype  include/linux/sched.h  116  extern void register_task_migration_notifier(struct notifier_block *n);
get_parent_ip  prototype  include/linux/sched.h  118  extern unsigned long get_parent_ip(unsigned long addr);
dump_cpu_task  prototype  include/linux/sched.h  120  extern void dump_cpu_task(int cpu);
proc_sched_show_task  function  include/linux/sched.h  132  proc_sched_show_task(struct task_struct *p,struct seq_file *m)
proc_sched_set_task  function  include/linux/sched.h  135  static inline void proc_sched_set_task(struct task_struct *p)
print_cfs_rq  function  include/linux/sched.h  139  print_cfs_rq(struct seq_file *m,int cpu,struct cfs_rq *cfs_rq)
TASK_RUNNING  macro  include/linux/sched.h  154  #define TASK_RUNNING 0
TASK_INTERRUPTIBLE  macro  include/linux/sched.h  155  #define TASK_INTERRUPTIBLE 1
TASK_UNINTERRUPTIBLE  macro  include/linux/sched.h  156  #define TASK_UNINTERRUPTIBLE 2
__TASK_STOPPED  macro  include/linux/sched.h  157  #define __TASK_STOPPED 4
__TASK_TRACED  macro  include/linux/sched.h  158  #define __TASK_TRACED 8
EXIT_ZOMBIE  macro  include/linux/sched.h  160  #define EXIT_ZOMBIE 16
EXIT_DEAD  macro  include/linux/sched.h  161  #define EXIT_DEAD 32
TASK_DEAD  macro  include/linux/sched.h  163  #define TASK_DEAD 64
TASK_WAKEKILL  macro  include/linux/sched.h  164  #define TASK_WAKEKILL 128
TASK_WAKING  macro  include/linux/sched.h  165  #define TASK_WAKING 256
TASK_PARKED  macro  include/linux/sched.h  166  #define TASK_PARKED 512
TASK_STATE_MAX  macro  include/linux/sched.h  167  #define TASK_STATE_MAX 1024
TASK_STATE_TO_CHAR_STR  macro  include/linux/sched.h  169  #define TASK_STATE_TO_CHAR_STR "RSDTtZXxKWP"
TASK_KILLABLE  macro  include/linux/sched.h  175  #define TASK_KILLABLE (TASK_WAKEKILL | TASK_UNINTERRUPTIBLE)
TASK_STOPPED  macro  include/linux/sched.h  176  #define TASK_STOPPED (TASK_WAKEKILL | __TASK_STOPPED)
TASK_TRACED  macro  include/linux/sched.h  177  #define TASK_TRACED (TASK_WAKEKILL | __TASK_TRACED)
TASK_NORMAL  macro  include/linux/sched.h  180  #define TASK_NORMAL (TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE)
TASK_ALL  macro  include/linux/sched.h  181  #define TASK_ALL (TASK_NORMAL | __TASK_STOPPED | __TASK_TRACED)
TASK_REPORT  macro  include/linux/sched.h  184  #define TASK_REPORT (TASK_RUNNING | TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE | __TASK_STOPPED | __TASK_TRACED)
task_is_traced  macro  include/linux/sched.h  188  #define task_is_traced(task) ((task->state & __TASK_TRACED) != 0)
task_is_stopped  macro  include/linux/sched.h  189  #define task_is_stopped(task) ((task->state & __TASK_STOPPED) != 0)
task_is_dead  macro  include/linux/sched.h  190  #define task_is_dead(task) ((task)->exit_state != 0)
task_is_stopped_or_traced  macro  include/linux/sched.h  191  #define task_is_stopped_or_traced(task) ((task->state & (__TASK_STOPPED | __TASK_TRACED)) != 0)
task_contributes_to_load  macro  include/linux/sched.h  193  #define task_contributes_to_load(task) ((task->state & TASK_UNINTERRUPTIBLE) != 0 && (task->flags & PF_FROZEN) == 0)
__set_task_state  macro  include/linux/sched.h  197  #define __set_task_state(tsk,state_value) do { (tsk)->state = (state_value); } while (0)
set_task_state  macro  include/linux/sched.h  199  #define set_task_state(tsk,state_value) set_mb((tsk)->state, (state_value))
__set_current_state  macro  include/linux/sched.h  213  #define __set_current_state(state_value) do { current->state = (state_value); } while (0)
set_current_state  macro  include/linux/sched.h  215  #define set_current_state(state_value) set_mb(current->state, (state_value))
TASK_COMM_LEN  macro  include/linux/sched.h  219  #define TASK_COMM_LEN 16
lockdep_tasklist_lock_is_held  prototype  include/linux/sched.h  235  extern int lockdep_tasklist_lock_is_held(void);
sched_init  prototype  include/linux/sched.h  238  extern void sched_init(void);
sched_init_smp  prototype  include/linux/sched.h  239  extern void sched_init_smp(void);
schedule_tail  prototype  include/linux/sched.h  240  extern asmlinkage void schedule_tail(struct task_struct *prev);
init_idle  prototype  include/linux/sched.h  241  extern void init_idle(struct task_struct *idle,int cpu);
init_idle_bootup_task  prototype  include/linux/sched.h  242  extern void init_idle_bootup_task(struct task_struct *idle);
runqueue_is_locked  prototype  include/linux/sched.h  244  extern int runqueue_is_locked(int cpu);
nohz_balance_enter_idle  function  include/linux/sched.h  251  static inline void nohz_balance_enter_idle(int cpu) { }
set_cpu_sd_state_idle  function  include/linux/sched.h  252  static inline void set_cpu_sd_state_idle(void) { }
get_nohz_timer_target  prototype  include/linux/sched.h  249  extern int get_nohz_timer_target(void);
show_state_filter  prototype  include/linux/sched.h  258  extern void show_state_filter(unsigned long state_filter);
show_state  function  include/linux/sched.h  260  static inline void show_state(void)
show_regs  prototype  include/linux/sched.h  265  extern void show_regs(struct pt_regs *);
show_stack  prototype  include/linux/sched.h  272  extern void show_stack(struct task_struct *task,unsigned long *sp);
io_schedule  prototype  include/linux/sched.h  274  void io_schedule(void);
io_schedule_timeout  prototype  include/linux/sched.h  275  long io_schedule_timeout(long timeout);
cpu_init  prototype  include/linux/sched.h  277  extern void cpu_init (void);
trap_init  prototype  include/linux/sched.h  278  extern void trap_init(void);
update_process_times  prototype  include/linux/sched.h  279  extern void update_process_times(int user);
scheduler_tick  prototype  include/linux/sched.h  280  extern void scheduler_tick(void);
sched_show_task  prototype  include/linux/sched.h  282  extern void sched_show_task(struct task_struct *p);
touch_softlockup_watchdog  function  include/linux/sched.h  294  static inline void touch_softlockup_watchdog(void)
touch_softlockup_watchdog_sync  function  include/linux/sched.h  297  static inline void touch_softlockup_watchdog_sync(void)
touch_all_softlockup_watchdogs  function  include/linux/sched.h  300  static inline void touch_all_softlockup_watchdogs(void)
proc_dowatchdog_thresh  prototype  include/linux/sched.h  288  extern int proc_dowatchdog_thresh(struct ctl_table *table,int write,void __user *buffer,size_t *lenp, loff_t *ppos);
lockup_detector_init  function  include/linux/sched.h  303  static inline void lockup_detector_init(void)
proc_dohung_task_timeout_secs  prototype  include/linux/sched.h  313  extern int proc_dohung_task_timeout_secs(struct ctl_table *table,int write,void __user *buffer,size_t *lenp, loff_t *ppos);
__sched  macro  include/linux/sched.h  322  #define __sched __attribute__((__section__(".sched.text")))
in_sched_functions  prototype  include/linux/sched.h  328  extern int in_sched_functions(unsigned long addr);
MAX_SCHEDULE_TIMEOUT  macro  include/linux/sched.h  330  #define MAX_SCHEDULE_TIMEOUT LONG_MAX
schedule_timeout  prototype  include/linux/sched.h  331  extern signed long schedule_timeout(signed long timeout);
schedule_timeout_interruptible  prototype  include/linux/sched.h  332  extern signed long schedule_timeout_interruptible(signed long timeout);
schedule_timeout_killable  prototype  include/linux/sched.h  333  extern signed long schedule_timeout_killable(signed long timeout);
schedule_timeout_uninterruptible  prototype  include/linux/sched.h  334  extern signed long schedule_timeout_uninterruptible(signed long timeout);
schedule  prototype  include/linux/sched.h  335  asmlinkage void schedule(void);
schedule_preempt_disabled  prototype  include/linux/sched.h  336  extern void schedule_preempt_disabled(void);
mutex_spin_on_owner  prototype  include/linux/sched.h  337  extern int mutex_spin_on_owner(struct mutex *lock,struct task_struct *owner);
MAPCOUNT_ELF_CORE_MARGIN  macro  include/linux/sched.h  354  #define MAPCOUNT_ELF_CORE_MARGIN (5)
DEFAULT_MAX_MAP_COUNT  macro  include/linux/sched.h  355  #define DEFAULT_MAX_MAP_COUNT (USHRT_MAX - MAPCOUNT_ELF_CORE_MARGIN)
arch_pick_mmap_layout  function  include/linux/sched.h  373  static inline void arch_pick_mmap_layout(struct mm_struct *mm) {}
arch_get_unmapped_area  prototype  include/linux/sched.h  364  arch_get_unmapped_area(struct file *,unsigned long,unsigned long,unsigned long, unsigned long);
arch_get_unmapped_area_topdown  prototype  include/linux/sched.h  367  arch_get_unmapped_area_topdown(struct file *filp,unsigned long addr,unsigned long len, unsigned long pgoff,unsigned long flags);
arch_unmap_area  prototype  include/linux/sched.h  370  extern void arch_unmap_area(struct mm_struct *,unsigned long);
arch_unmap_area_topdown  prototype  include/linux/sched.h  371  extern void arch_unmap_area_topdown(struct mm_struct *,unsigned long);
set_dumpable  prototype  include/linux/sched.h  377  extern void set_dumpable(struct mm_struct *mm,int value);
get_dumpable  prototype  include/linux/sched.h  378  extern int get_dumpable(struct mm_struct *mm);
SUID_DUMPABLE_DISABLED  macro  include/linux/sched.h  381  #define SUID_DUMPABLE_DISABLED 0
SUID_DUMPABLE_ENABLED  macro  include/linux/sched.h  382  #define SUID_DUMPABLE_ENABLED 1
SUID_DUMPABLE_SAFE  macro  include/linux/sched.h  383  #define SUID_DUMPABLE_SAFE 2
MMF_DUMPABLE  macro  include/linux/sched.h  387  #define MMF_DUMPABLE 0
MMF_DUMP_SECURELY  macro  include/linux/sched.h  388  #define MMF_DUMP_SECURELY 1
MMF_DUMPABLE_BITS  macro  include/linux/sched.h  390  #define MMF_DUMPABLE_BITS 2
MMF_DUMPABLE_MASK  macro  include/linux/sched.h  391  #define MMF_DUMPABLE_MASK ((1 << MMF_DUMPABLE_BITS) - 1)
MMF_DUMP_ANON_PRIVATE  macro  include/linux/sched.h  394  #define MMF_DUMP_ANON_PRIVATE 2
MMF_DUMP_ANON_SHARED  macro  include/linux/sched.h  395  #define MMF_DUMP_ANON_SHARED 3
MMF_DUMP_MAPPED_PRIVATE  macro  include/linux/sched.h  396  #define MMF_DUMP_MAPPED_PRIVATE 4
MMF_DUMP_MAPPED_SHARED  macro  include/linux/sched.h  397  #define MMF_DUMP_MAPPED_SHARED 5
MMF_DUMP_ELF_HEADERS  macro  include/linux/sched.h  398  #define MMF_DUMP_ELF_HEADERS 6
MMF_DUMP_HUGETLB_PRIVATE  macro  include/linux/sched.h  399  #define MMF_DUMP_HUGETLB_PRIVATE 7
MMF_DUMP_HUGETLB_SHARED  macro  include/linux/sched.h  400  #define MMF_DUMP_HUGETLB_SHARED 8
MMF_DUMP_FILTER_SHIFT  macro  include/linux/sched.h  402  #define MMF_DUMP_FILTER_SHIFT MMF_DUMPABLE_BITS
MMF_DUMP_FILTER_BITS  macro  include/linux/sched.h  403  #define MMF_DUMP_FILTER_BITS 7
MMF_DUMP_FILTER_MASK  macro  include/linux/sched.h  404  #define MMF_DUMP_FILTER_MASK (((1 << MMF_DUMP_FILTER_BITS) - 1) << MMF_DUMP_FILTER_SHIFT)
MMF_DUMP_FILTER_DEFAULT  macro  include/linux/sched.h  406  #define MMF_DUMP_FILTER_DEFAULT ((1 << MMF_DUMP_ANON_PRIVATE) |	(1 << MMF_DUMP_ANON_SHARED) | (1 << MMF_DUMP_HUGETLB_PRIVATE) | MMF_DUMP_MASK_DEFAULT_ELF)
MMF_DUMP_MASK_DEFAULT_ELF  macro  include/linux/sched.h  413  # define MMF_DUMP_MASK_DEFAULT_ELF 0
MMF_VM_MERGEABLE  macro  include/linux/sched.h  416  #define MMF_VM_MERGEABLE 16
MMF_VM_HUGEPAGE  macro  include/linux/sched.h  417  #define MMF_VM_HUGEPAGE 17
MMF_EXE_FILE_CHANGED  macro  include/linux/sched.h  418  #define MMF_EXE_FILE_CHANGED 18
MMF_HAS_UPROBES  macro  include/linux/sched.h  420  #define MMF_HAS_UPROBES 19
MMF_RECALC_UPROBES  macro  include/linux/sched.h  421  #define MMF_RECALC_UPROBES 20
MMF_INIT_MASK  macro  include/linux/sched.h  423  #define MMF_INIT_MASK (MMF_DUMPABLE_MASK | MMF_DUMP_FILTER_MASK)
sighand_struct  struct  include/linux/sched.h  425  struct sighand_struct { atomic_t count; struct k_sigaction action[_NSIG]; spinlock_t siglock; wait_queue_head_t signalfd_wqh; };
pacct_struct  struct  include/linux/sched.h  432  struct pacct_struct { int ac_flag; long ac_exitcode; unsigned long ac_mem; cputime_t ac_utime, ac_stime; unsigned long ac_minflt, ac_majflt; };
cpu_itimer  struct  include/linux/sched.h  440  struct cpu_itimer { cputime_t expires; cputime_t incr; u32 error; u32 incr_error; };
cputime  struct  include/linux/sched.h  454  struct cputime { cputime_t utime; cputime_t stime; };
task_cputime  struct  include/linux/sched.h  473  struct task_cputime { cputime_t utime; cputime_t stime; unsigned long long sum_exec_runtime; };
prof_exp  macro  include/linux/sched.h  479  #define prof_exp stime
virt_exp  macro  include/linux/sched.h  480  #define virt_exp utime
sched_exp  macro  include/linux/sched.h  481  #define sched_exp sum_exec_runtime
INIT_CPUTIME  macro  include/linux/sched.h  483  #define INIT_CPUTIME (struct task_cputime) { .utime = 0, .stime = 0, .sum_exec_runtime = 0, }
INIT_PREEMPT_COUNT  macro  include/linux/sched.h  497  #define INIT_PREEMPT_COUNT (1 + PREEMPT_ACTIVE)
thread_group_cputimer  prototype  include/linux/sched.h  2692  void thread_group_cputimer(struct task_struct *tsk,struct task_cputime *times);
signal_struct  struct  include/linux/sched.h  525  struct signal_struct { atomic_t sigcnt; atomic_t live; int nr_threads; wait_queue_head_t wait_chldexit; struct task_struct *curr_target; struct sigpending shared_pending; int group_exit_code; int notify_count; struct task_struct *group_exit_task; int group_stop_count; unsigned int flags; unsigned int is_child_subreaper:1; unsigned int has_child_subreaper:1; struct list_head posix_timers; struct hrtimer real_timer; struct pid *leader_pid; ktime_t it_real_incr; struct cpu_itimer it[2]; struct thread_group_cputimer cputimer; struct task_cputime cputime_expires; struct list_head cpu_timers[3]; struct pid *tty_old_pgrp; int leader; struct tty_struct *tty; struct autogroup *autogroup; cputime_t utime, stime, cutime, cstime; cputime_t gtime; cputime_t cgtime; struct cputime prev_cputime; unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw; unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt; unsigned long inblock, oublock, cinblock, coublock; unsigned long maxrss, cmaxrss; struct task_io_accounting ioac; unsigned long long sum_sched_runtime; struct rlimit rlim[RLIM_NLIMITS]; struct pacct_struct pacct; struct taskstats *stats; unsigned audit_tty; struct tty_audit_buf *tty_audit_buf; struct rw_semaphore group_rwsem; oom_flags_t oom_flags; short oom_score_adj; short oom_score_adj_min; struct mutex cred_guard_mutex; };
SIGNAL_STOP_STOPPED  macro  include/linux/sched.h  673  #define SIGNAL_STOP_STOPPED 0x00000001
SIGNAL_STOP_CONTINUED  macro  include/linux/sched.h  674  #define SIGNAL_STOP_CONTINUED 0x00000002
SIGNAL_GROUP_EXIT  macro  include/linux/sched.h  675  #define SIGNAL_GROUP_EXIT 0x00000004
SIGNAL_CLD_STOPPED  macro  include/linux/sched.h  679  #define SIGNAL_CLD_STOPPED 0x00000010
SIGNAL_CLD_CONTINUED  macro  include/linux/sched.h  680  #define SIGNAL_CLD_CONTINUED 0x00000020
SIGNAL_CLD_MASK  macro  include/linux/sched.h  681  #define SIGNAL_CLD_MASK (SIGNAL_CLD_STOPPED|SIGNAL_CLD_CONTINUED)
SIGNAL_UNKILLABLE  macro  include/linux/sched.h  683  #define SIGNAL_UNKILLABLE 0x00000040
signal_group_exit  function  include/linux/sched.h  686  static inline int signal_group_exit(const struct signal_struct *sig)
user_struct  struct  include/linux/sched.h  695  struct user_struct { atomic_t __count; atomic_t processes; atomic_t files; atomic_t sigpending; atomic_t inotify_watches; atomic_t inotify_devs; atomic_t fanotify_listeners; atomic_long_t epoll_watches; unsigned long mq_bytes; unsigned long locked_shm; struct key *uid_keyring; struct key *session_keyring; struct hlist_node uidhash_node; kuid_t uid; atomic_long_t locked_vm; };
uids_sysfs_init  prototype  include/linux/sched.h  730  extern int uids_sysfs_init(void);
find_user  prototype  include/linux/sched.h  732  extern struct user_struct *find_user(kuid_t);
INIT_USER  macro  include/linux/sched.h  735  #define INIT_USER (&root_user)
sched_info  struct  include/linux/sched.h  742  struct sched_info { unsigned long pcount; unsigned long long run_delay; unsigned long long last_arrival,last_queued; };
task_delay_info  struct  include/linux/sched.h  754  struct task_delay_info { spinlock_t lock; unsigned int flags; struct timespec blkio_start, blkio_end; u64 blkio_delay; u64 swapin_delay; u32 blkio_count; u32 swapin_count; struct timespec freepages_start, freepages_end; u64 freepages_delay; u32 freepages_count; };
sched_info_on  function  include/linux/sched.h  787  static inline int sched_info_on(void)
cpu_idle_type  enum  include/linux/sched.h  799  enum cpu_idle_type { CPU_IDLE, CPU_NOT_IDLE, CPU_NEWLY_IDLE, CPU_MAX_IDLE_TYPES };
SCHED_LOAD_RESOLUTION  macro  include/linux/sched.h  823  # define SCHED_LOAD_RESOLUTION 0
scale_load  macro  include/linux/sched.h  824  # define scale_load(w) (w)
scale_load_down  macro  include/linux/sched.h  825  # define scale_load_down(w) (w)
SCHED_LOAD_SHIFT  macro  include/linux/sched.h  828  #define SCHED_LOAD_SHIFT (10 + SCHED_LOAD_RESOLUTION)
SCHED_LOAD_SCALE  macro  include/linux/sched.h  829  #define SCHED_LOAD_SCALE (1L << SCHED_LOAD_SHIFT)
SCHED_POWER_SHIFT  macro  include/linux/sched.h  834  #define SCHED_POWER_SHIFT 10
SCHED_POWER_SCALE  macro  include/linux/sched.h  835  #define SCHED_POWER_SCALE (1L << SCHED_POWER_SHIFT)
SD_LOAD_BALANCE  macro  include/linux/sched.h  841  #define SD_LOAD_BALANCE 0x0001
SD_BALANCE_NEWIDLE  macro  include/linux/sched.h  842  #define SD_BALANCE_NEWIDLE 0x0002
SD_BALANCE_EXEC  macro  include/linux/sched.h  843  #define SD_BALANCE_EXEC 0x0004
SD_BALANCE_FORK  macro  include/linux/sched.h  844  #define SD_BALANCE_FORK 0x0008
SD_BALANCE_WAKE  macro  include/linux/sched.h  845  #define SD_BALANCE_WAKE 0x0010
SD_WAKE_AFFINE  macro  include/linux/sched.h  846  #define SD_WAKE_AFFINE 0x0020
SD_SHARE_CPUPOWER  macro  include/linux/sched.h  847  #define SD_SHARE_CPUPOWER 0x0080
SD_SHARE_PKG_RESOURCES  macro  include/linux/sched.h  848  #define SD_SHARE_PKG_RESOURCES 0x0200
SD_SERIALIZE  macro  include/linux/sched.h  849  #define SD_SERIALIZE 0x0400
SD_ASYM_PACKING  macro  include/linux/sched.h  850  #define SD_ASYM_PACKING 0x0800
SD_PREFER_SIBLING  macro  include/linux/sched.h  851  #define SD_PREFER_SIBLING 0x1000
SD_OVERLAP  macro  include/linux/sched.h  852  #define SD_OVERLAP 0x2000
arch_sd_sibiling_asym_packing  prototype  include/linux/sched.h  854  extern int __weak arch_sd_sibiling_asym_packing(void);
sched_group_power  struct  include/linux/sched.h  856  struct sched_group_power { atomic_t ref; unsigned int power, power_orig; unsigned long next_update; atomic_t nr_busy_cpus; unsigned long cpumask[0]; };
sched_group  struct  include/linux/sched.h  872  struct sched_group { struct sched_group *next; atomic_t ref; unsigned int group_weight; struct sched_group_power *sgp; unsigned long cpumask[0]; };
sched_group_cpus  function  include/linux/sched.h  889  static inline struct cpumask *sched_group_cpus(struct sched_group *sg)
sched_group_mask  function  include/linux/sched.h  898  static inline struct cpumask *sched_group_mask(struct sched_group *sg)
group_first_cpu  function  include/linux/sched.h  907  static inline unsigned int group_first_cpu(struct sched_group *group)
sched_domain_attr  struct  include/linux/sched.h  912  struct sched_domain_attr { int relax_domain_level; };
SD_ATTR_INIT  macro  include/linux/sched.h  916  #define SD_ATTR_INIT (struct sched_domain_attr) { .relax_domain_level = -1, }
sched_domain  struct  include/linux/sched.h  922  struct sched_domain { struct sched_domain *parent; struct sched_domain *child; struct sched_group *groups; unsigned long min_interval; unsigned long max_interval; unsigned int busy_factor; unsigned int imbalance_pct; unsigned int cache_nice_tries; unsigned int busy_idx; unsigned int idle_idx; unsigned int newidle_idx; unsigned int wake_idx; unsigned int forkexec_idx; unsigned int smt_gain; int flags; int level; unsigned long last_balance; unsigned int balance_interval; unsigned int nr_balance_failed; u64 last_update; unsigned int lb_count[CPU_MAX_IDLE_TYPES]; unsigned int lb_failed[CPU_MAX_IDLE_TYPES]; unsigned int lb_balanced[CPU_MAX_IDLE_TYPES]; unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES]; unsigned int lb_gained[CPU_MAX_IDLE_TYPES]; unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES]; unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES]; unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES]; unsigned int alb_count; unsigned int alb_failed; unsigned int alb_pushed; unsigned int sbe_count; unsigned int sbe_balanced; unsigned int sbe_pushed; unsigned int sbf_count; unsigned int sbf_balanced; unsigned int sbf_pushed; unsigned int ttwu_wake_remote; unsigned int ttwu_move_affine; unsigned int ttwu_move_balance; char *name; struct rcu_head rcu; }; unsigned int span_weight; unsigned long span[0]; };
sched_domain_span  function  include/linux/sched.h  998  static inline struct cpumask *sched_domain_span(struct sched_domain *sd)
partition_sched_domains  function  include/linux/sched.h  1029  partition_sched_domains(int ndoms_new,cpumask_var_t doms_new[],struct sched_domain_attr *dattr_new)
alloc_sched_domains  prototype  include/linux/sched.h  1007  cpumask_var_t *alloc_sched_domains(unsigned int ndoms);
free_sched_domains  prototype  include/linux/sched.h  1008  void free_sched_domains(cpumask_var_t doms[],unsigned int ndoms);
test_sd_parent  function  include/linux/sched.h  1011  static inline int test_sd_parent(struct sched_domain *sd,int flag)
default_scale_freq_power  prototype  include/linux/sched.h  1019  unsigned long default_scale_freq_power(struct sched_domain *sd,int cpu);
default_scale_smt_power  prototype  include/linux/sched.h  1020  unsigned long default_scale_smt_power(struct sched_domain *sd,int cpu);
cpus_share_cache  function  include/linux/sched.h  1034  static inline bool cpus_share_cache(int this_cpu,int that_cpu)
prefetch_stack  function  include/linux/sched.h  1048  static inline void prefetch_stack(struct task_struct *t) { }
WF_SYNC  macro  include/linux/sched.h  1062  #define WF_SYNC 0x01
WF_FORK  macro  include/linux/sched.h  1063  #define WF_FORK 0x02
WF_MIGRATED  macro  include/linux/sched.h  1064  #define WF_MIGRATED 0x04
ENQUEUE_WAKEUP  macro  include/linux/sched.h  1066  #define ENQUEUE_WAKEUP 1
ENQUEUE_HEAD  macro  include/linux/sched.h  1067  #define ENQUEUE_HEAD 2
ENQUEUE_WAKING  macro  include/linux/sched.h  1071  #define ENQUEUE_WAKING 0
DEQUEUE_SLEEP  macro  include/linux/sched.h  1074  #define DEQUEUE_SLEEP 1
sched_class  struct  include/linux/sched.h  1076  struct sched_class { const struct sched_class *next; void (*enqueue_task) (struct rq *rq, struct task_struct *p, int flags); void (*dequeue_task) (struct rq *rq, struct task_struct *p, int flags); void (*yield_task) (struct rq *rq); bool (*yield_to_task) (struct rq *rq, struct task_struct *p, bool preempt); void (*check_preempt_curr) (struct rq *rq, struct task_struct *p, int flags); struct task_struct * (*pick_next_task) (struct rq *rq); void (*put_prev_task) (struct rq *rq, struct task_struct *p); int (*select_task_rq)(struct task_struct *p, int sd_flag, int flags); void (*migrate_task_rq)(struct task_struct *p, int next_cpu); void (*pre_schedule) (struct rq *this_rq, struct task_struct *task); void (*post_schedule) (struct rq *this_rq); void (*task_waking) (struct task_struct *task); void (*task_woken) (struct rq *this_rq, struct task_struct *task); void (*set_cpus_allowed)(struct task_struct *p,const struct cpumask *newmask); void (*rq_online)(struct rq *rq); void (*rq_offline)(struct rq *rq); void (*set_curr_task) (struct rq *rq); void (*task_tick) (struct rq *rq, struct task_struct *p, int queued); void (*task_fork) (struct task_struct *p); void (*switched_from) (struct rq *this_rq, struct task_struct *task); void (*switched_to) (struct rq *this_rq, struct task_struct *task); void (*prio_changed) (struct rq *this_rq, struct task_struct *task,int oldprio); unsigned int (*get_rr_interval) (struct rq *rq,struct task_struct *task); void (*task_move_group) (struct task_struct *p, int on_rq); };
load_weight  struct  include/linux/sched.h  1122  struct load_weight { unsigned long weight, inv_weight; };
sched_avg  struct  include/linux/sched.h  1126  struct sched_avg { u32 runnable_avg_sum, runnable_avg_period; u64 last_runnable_update; s64 decay_count; unsigned long load_avg_contrib; };
sched_statistics  struct  include/linux/sched.h  1139  struct sched_statistics { u64 wait_start; u64 wait_max; u64 wait_count; u64 wait_sum; u64 iowait_count; u64 iowait_sum; u64 sleep_start; u64 sleep_max; s64 sum_sleep_runtime; u64 block_start; u64 block_max; u64 exec_max; u64 slice_max; u64 nr_migrations_cold; u64 nr_failed_migrations_affine; u64 nr_failed_migrations_running; u64 nr_failed_migrations_hot; u64 nr_forced_migrations; u64 nr_wakeups; u64 nr_wakeups_sync; u64 nr_wakeups_migrate; u64 nr_wakeups_local; u64 nr_wakeups_remote; u64 nr_wakeups_affine; u64 nr_wakeups_affine_attempts; u64 nr_wakeups_passive; u64 nr_wakeups_idle; };
sched_entity  struct  include/linux/sched.h  1174  struct sched_entity { struct load_weight load; struct rb_node run_node; struct list_head group_node; unsigned int on_rq; u64 exec_start; u64 sum_exec_runtime; u64 vruntime; u64 prev_sum_exec_runtime; u64 nr_migrations; struct sched_statistics statistics; struct sched_entity *parent; struct cfs_rq *cfs_rq; struct cfs_rq *my_q; struct sched_avg avg; };
sched_rt_entity  struct  include/linux/sched.h  1209  struct sched_rt_entity { struct list_head run_list; unsigned long timeout; unsigned int time_slice; struct sched_rt_entity *back; struct sched_rt_entity *parent; struct rt_rq *rt_rq; struct rt_rq *my_q; };
RR_TIMESLICE  macro  include/linux/sched.h  1228  #define RR_TIMESLICE (100 * HZ / 1000)
perf_event_task_context  enum  include/linux/sched.h  1232  enum perf_event_task_context { perf_invalid_context = -1, perf_hw_context = 0, perf_sw_context, perf_nr_task_contexts, };
task_struct  struct  include/linux/sched.h  1239  struct task_struct { volatile long state; void *stack; atomic_t usage; unsigned int flags; unsigned int ptrace; struct llist_node wake_entry; int on_cpu; int on_rq; int prio, static_prio, normal_prio; unsigned int rt_priority; const struct sched_class *sched_class; struct sched_entity se; struct sched_rt_entity rt; struct task_group *sched_task_group; struct hlist_head preempt_notifiers; unsigned char fpu_counter; unsigned int btrace_seq; unsigned int policy; int nr_cpus_allowed; cpumask_t cpus_allowed; int rcu_read_lock_nesting; char rcu_read_unlock_special; struct list_head rcu_node_entry; struct rcu_node *rcu_blocked_node; struct rt_mutex *rcu_boost_mutex; struct sched_info sched_info; struct list_head tasks; struct plist_node pushable_tasks; struct mm_struct *mm, *active_mm; unsigned brk_randomized:1; struct task_rss_stat rss_stat; int exit_state; int exit_code, exit_signal; int pdeath_signal; unsigned int jobctl; unsigned int personality; unsigned did_exec:1; unsigned in_execve:1; unsigned in_iowait:1; unsigned no_new_privs:1; unsigned sched_reset_on_fork:1; unsigned sched_contributes_to_load:1; pid_t pid; pid_t tgid; unsigned long stack_canary; struct task_struct __rcu *real_parent; struct task_struct __rcu *parent; struct list_head children; struct list_head sibling; struct task_struct *group_leader; struct list_head ptraced; struct list_head ptrace_entry; struct pid_link pids[PIDTYPE_MAX]; struct list_head thread_group; struct completion *vfork_done; int __user *set_child_tid; int __user *clear_child_tid; cputime_t utime, stime, utimescaled, stimescaled; cputime_t gtime; struct cputime prev_cputime; unsigned long nvcsw, nivcsw; struct timespec start_time; struct timespec real_start_time; unsigned long min_flt, maj_flt; struct task_cputime cputime_expires; struct list_head cpu_timers[3]; const struct cred __rcu *real_cred; const struct cred __rcu *cred; char comm[TASK_COMM_LEN]; int link_count, total_link_count; struct sysv_sem sysvsem; unsigned long last_switch_count; struct thread_struct thread; struct fs_struct *fs; struct files_struct *files; struct nsproxy *nsproxy; struct signal_struct *signal; struct sighand_struct *sighand; sigset_t blocked, real_blocked; sigset_t saved_sigmask; struct sigpending pending; unsigned long sas_ss_sp; size_t sas_ss_size; int (*notifier)(void *priv); void *notifier_data; sigset_t *notifier_mask; struct callback_head *task_works; struct audit_context *audit_context; kuid_t loginuid; unsigned int sessionid; struct seccomp seccomp; u32 parent_exec_id; u32 self_exec_id; spinlock_t alloc_lock; raw_spinlock_t pi_lock; struct plist_head pi_waiters; struct rt_mutex_waiter *pi_blocked_on; struct mutex_waiter *blocked_on; unsigned int irq_events; unsigned long hardirq_enable_ip; unsigned long hardirq_disable_ip; unsigned int hardirq_enable_event; unsigned int hardirq_disable_event; int hardirqs_enabled; int hardirq_context; unsigned long softirq_disable_ip; unsigned long softirq_enable_ip; unsigned int softirq_disable_event; unsigned int softirq_enable_event; int softirqs_enabled; int softirq_context; # define MAX_LOCK_DEPTH 48UL u64 curr_chain_key; int lockdep_depth; unsigned int lockdep_recursion; struct held_lock held_locks[MAX_LOCK_DEPTH]; gfp_t lockdep_reclaim_gfp; void *journal_info; struct bio_list *bio_list; struct blk_plug *plug; struct reclaim_state *reclaim_state; struct backing_dev_info *backing_dev_info; struct io_context *io_context; unsigned long ptrace_message; siginfo_t *last_siginfo; struct task_io_accounting ioac; u64 acct_rss_mem1; u64 acct_vm_mem1; cputime_t acct_timexpd; nodemask_t mems_allowed; seqcount_t mems_allowed_seq; int cpuset_mem_spread_rotor; int cpuset_slab_spread_rotor; struct css_set __rcu *cgroups; struct list_head cg_list; struct robust_list_head __user *robust_list; struct compat_robust_list_head __user *compat_robust_list; struct list_head pi_state_list; struct futex_pi_state *pi_state_cache; struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts]; struct mutex perf_event_mutex; struct list_head perf_event_list; struct mempolicy *mempolicy; short il_next; short pref_node_fork; int numa_scan_seq; int numa_migrate_seq; unsigned int numa_scan_period; u64 node_stamp; struct callback_head numa_work; struct rcu_head rcu; struct pipe_inode_info *splice_pipe; struct page_frag task_frag; struct task_delay_info *delays; int make_it_fail; int nr_dirtied; int nr_dirtied_pause; unsigned long dirty_paused_when; int latency_record_count; struct latency_record latency_record[LT_SAVECOUNT]; unsigned long timer_slack_ns; unsigned long default_timer_slack_ns; int curr_ret_stack; struct ftrace_ret_stack *ret_stack; unsigned long long ftrace_timestamp; atomic_t trace_overrun; atomic_t tracing_graph_pause; unsigned long trace; unsigned long trace_recursion; struct memcg_batch_info { int do_batch; struct mem_cgroup *memcg; unsigned long nr_pages; unsigned long memsw_nr_pages; } memcg_batch; unsigned int memcg_kmem_skip_account; atomic_t ptrace_bp_refcnt; struct uprobe_task *utask; };
tsk_cpus_allowed  macro  include/linux/sched.h  1612  #define tsk_cpus_allowed(tsk) (&(tsk)->cpus_allowed)
task_numa_fault  function  include/linux/sched.h  1618  static inline void task_numa_fault(int node,int pages,bool migrated)
set_numabalancing_state  function  include/linux/sched.h  1621  static inline void set_numabalancing_state(bool enabled)
MAX_USER_RT_PRIO  macro  include/linux/sched.h  1639  #define MAX_USER_RT_PRIO 100
MAX_RT_PRIO  macro  include/linux/sched.h  1640  #define MAX_RT_PRIO MAX_USER_RT_PRIO
MAX_PRIO  macro  include/linux/sched.h  1642  #define MAX_PRIO (MAX_RT_PRIO + 40)
DEFAULT_PRIO  macro  include/linux/sched.h  1643  #define DEFAULT_PRIO (MAX_RT_PRIO + 20)
rt_prio  function  include/linux/sched.h  1645  static inline int rt_prio(int prio)
rt_task  function  include/linux/sched.h  1652  static inline int rt_task(struct task_struct *p)
task_pid  function  include/linux/sched.h  1657  static inline struct pid *task_pid(struct task_struct *task)
task_tgid  function  include/linux/sched.h  1662  static inline struct pid *task_tgid(struct task_struct *task)
task_pgrp  function  include/linux/sched.h  1672  static inline struct pid *task_pgrp(struct task_struct *task)
task_session  function  include/linux/sched.h  1677  static inline struct pid *task_session(struct task_struct *task)
__task_pid_nr_ns  prototype  include/linux/sched.h  1697  pid_t __task_pid_nr_ns(struct task_struct *task,enum pid_type type,struct pid_namespace *ns);
task_pid_nr  function  include/linux/sched.h  1700  static inline pid_t task_pid_nr(struct task_struct *tsk)
task_pid_nr_ns  function  include/linux/sched.h  1705  static inline pid_t task_pid_nr_ns(struct task_struct *tsk,struct pid_namespace *ns)
task_pid_vnr  function  include/linux/sched.h  1711  static inline pid_t task_pid_vnr(struct task_struct *tsk)
task_tgid_nr  function  include/linux/sched.h  1717  static inline pid_t task_tgid_nr(struct task_struct *tsk)
task_tgid_nr_ns  prototype  include/linux/sched.h  1722  pid_t task_tgid_nr_ns(struct task_struct *tsk,struct pid_namespace *ns);
task_tgid_vnr  function  include/linux/sched.h  1724  static inline pid_t task_tgid_vnr(struct task_struct *tsk)
task_pgrp_nr_ns  function  include/linux/sched.h  1730  static inline pid_t task_pgrp_nr_ns(struct task_struct *tsk,struct pid_namespace *ns)
task_pgrp_vnr  function  include/linux/sched.h  1736  static inline pid_t task_pgrp_vnr(struct task_struct *tsk)
task_session_nr_ns  function  include/linux/sched.h  1742  static inline pid_t task_session_nr_ns(struct task_struct *tsk,struct pid_namespace *ns)
task_session_vnr  function  include/linux/sched.h  1748  static inline pid_t task_session_vnr(struct task_struct *tsk)
task_pgrp_nr  function  include/linux/sched.h  1754  static inline pid_t task_pgrp_nr(struct task_struct *tsk)
pid_alive  function  include/linux/sched.h  1767  static inline int pid_alive(struct task_struct *p)
is_global_init  function  include/linux/sched.h  1778  static inline int is_global_init(struct task_struct *tsk)
free_task  prototype  include/linux/sched.h  1785  extern void free_task(struct task_struct *tsk);
get_task_struct  macro  include/linux/sched.h  1786  #define get_task_struct(tsk) do { atomic_inc(&(tsk)->usage); } while(0)
__put_task_struct  prototype  include/linux/sched.h  1788  extern void __put_task_struct(struct task_struct *t);
put_task_struct  function  include/linux/sched.h  1790  static inline void put_task_struct(struct task_struct *t)
task_cputime_adjusted  prototype  include/linux/sched.h  1796  extern void task_cputime_adjusted(struct task_struct *p,cputime_t *ut,cputime_t *st);
thread_group_cputime_adjusted  prototype  include/linux/sched.h  1797  extern void thread_group_cputime_adjusted(struct task_struct *p,cputime_t *ut,cputime_t *st);
PF_EXITING  macro  include/linux/sched.h  1802  #define PF_EXITING 0x00000004
PF_EXITPIDONE  macro  include/linux/sched.h  1803  #define PF_EXITPIDONE 0x00000008
PF_VCPU  macro  include/linux/sched.h  1804  #define PF_VCPU 0x00000010
PF_WQ_WORKER  macro  include/linux/sched.h  1805  #define PF_WQ_WORKER 0x00000020
PF_FORKNOEXEC  macro  include/linux/sched.h  1806  #define PF_FORKNOEXEC 0x00000040
PF_MCE_PROCESS  macro  include/linux/sched.h  1807  #define PF_MCE_PROCESS 0x00000080
PF_SUPERPRIV  macro  include/linux/sched.h  1808  #define PF_SUPERPRIV 0x00000100
PF_DUMPCORE  macro  include/linux/sched.h  1809  #define PF_DUMPCORE 0x00000200
PF_SIGNALED  macro  include/linux/sched.h  1810  #define PF_SIGNALED 0x00000400
PF_MEMALLOC  macro  include/linux/sched.h  1811  #define PF_MEMALLOC 0x00000800
PF_NPROC_EXCEEDED  macro  include/linux/sched.h  1812  #define PF_NPROC_EXCEEDED 0x00001000
PF_USED_MATH  macro  include/linux/sched.h  1813  #define PF_USED_MATH 0x00002000
PF_USED_ASYNC  macro  include/linux/sched.h  1814  #define PF_USED_ASYNC 0x00004000
PF_NOFREEZE  macro  include/linux/sched.h  1815  #define PF_NOFREEZE 0x00008000
PF_FROZEN  macro  include/linux/sched.h  1816  #define PF_FROZEN 0x00010000
PF_FSTRANS  macro  include/linux/sched.h  1817  #define PF_FSTRANS 0x00020000
PF_KSWAPD  macro  include/linux/sched.h  1818  #define PF_KSWAPD 0x00040000
PF_LESS_THROTTLE  macro  include/linux/sched.h  1819  #define PF_LESS_THROTTLE 0x00100000
PF_KTHREAD  macro  include/linux/sched.h  1820  #define PF_KTHREAD 0x00200000
PF_RANDOMIZE  macro  include/linux/sched.h  1821  #define PF_RANDOMIZE 0x00400000
PF_SWAPWRITE  macro  include/linux/sched.h  1822  #define PF_SWAPWRITE 0x00800000
PF_SPREAD_PAGE  macro  include/linux/sched.h  1823  #define PF_SPREAD_PAGE 0x01000000
PF_SPREAD_SLAB  macro  include/linux/sched.h  1824  #define PF_SPREAD_SLAB 0x02000000
PF_THREAD_BOUND  macro  include/linux/sched.h  1825  #define PF_THREAD_BOUND 0x04000000
PF_MCE_EARLY  macro  include/linux/sched.h  1826  #define PF_MCE_EARLY 0x08000000
PF_MEMPOLICY  macro  include/linux/sched.h  1827  #define PF_MEMPOLICY 0x10000000
PF_MUTEX_TESTER  macro  include/linux/sched.h  1828  #define PF_MUTEX_TESTER 0x20000000
PF_FREEZER_SKIP  macro  include/linux/sched.h  1829  #define PF_FREEZER_SKIP 0x40000000
clear_stopped_child_used_math  macro  include/linux/sched.h  1842  #define clear_stopped_child_used_math(child) do { (child)->flags &= ~PF_USED_MATH; } while (0)
set_stopped_child_used_math  macro  include/linux/sched.h  1843  #define set_stopped_child_used_math(child) do { (child)->flags |= PF_USED_MATH; } while (0)
clear_used_math  macro  include/linux/sched.h  1844  #define clear_used_math() clear_stopped_child_used_math(current)
set_used_math  macro  include/linux/sched.h  1845  #define set_used_math() set_stopped_child_used_math(current)
conditional_stopped_child_used_math  macro  include/linux/sched.h  1846  #define conditional_stopped_child_used_math(condition,child) do { (child)->flags &= ~PF_USED_MATH, (child)->flags |= (condition) ? PF_USED_MATH : 0; } while (0)
conditional_used_math  macro  include/linux/sched.h  1848  #define conditional_used_math(condition) conditional_stopped_child_used_math(condition, current)
copy_to_stopped_child_used_math  macro  include/linux/sched.h  1850  #define copy_to_stopped_child_used_math(child) do { (child)->flags &= ~PF_USED_MATH, (child)->flags |= current->flags & PF_USED_MATH; } while (0)
tsk_used_math  macro  include/linux/sched.h  1853  #define tsk_used_math(p) ((p)->flags & PF_USED_MATH)
used_math  macro  include/linux/sched.h  1854  #define used_math() tsk_used_math(current)
JOBCTL_STOP_SIGMASK  macro  include/linux/sched.h  1859  #define JOBCTL_STOP_SIGMASK 0xffff
JOBCTL_STOP_DEQUEUED_BIT  macro  include/linux/sched.h  1861  #define JOBCTL_STOP_DEQUEUED_BIT 16
JOBCTL_STOP_PENDING_BIT  macro  include/linux/sched.h  1862  #define JOBCTL_STOP_PENDING_BIT 17
JOBCTL_STOP_CONSUME_BIT  macro  include/linux/sched.h  1863  #define JOBCTL_STOP_CONSUME_BIT 18
JOBCTL_TRAP_STOP_BIT  macro  include/linux/sched.h  1864  #define JOBCTL_TRAP_STOP_BIT 19
JOBCTL_TRAP_NOTIFY_BIT  macro  include/linux/sched.h  1865  #define JOBCTL_TRAP_NOTIFY_BIT 20
JOBCTL_TRAPPING_BIT  macro  include/linux/sched.h  1866  #define JOBCTL_TRAPPING_BIT 21
JOBCTL_LISTENING_BIT  macro  include/linux/sched.h  1867  #define JOBCTL_LISTENING_BIT 22
JOBCTL_STOP_DEQUEUED  macro  include/linux/sched.h  1869  #define JOBCTL_STOP_DEQUEUED (1 << JOBCTL_STOP_DEQUEUED_BIT)
JOBCTL_STOP_PENDING  macro  include/linux/sched.h  1870  #define JOBCTL_STOP_PENDING (1 << JOBCTL_STOP_PENDING_BIT)
JOBCTL_STOP_CONSUME  macro  include/linux/sched.h  1871  #define JOBCTL_STOP_CONSUME (1 << JOBCTL_STOP_CONSUME_BIT)
JOBCTL_TRAP_STOP  macro  include/linux/sched.h  1872  #define JOBCTL_TRAP_STOP (1 << JOBCTL_TRAP_STOP_BIT)
JOBCTL_TRAP_NOTIFY  macro  include/linux/sched.h  1873  #define JOBCTL_TRAP_NOTIFY (1 << JOBCTL_TRAP_NOTIFY_BIT)
JOBCTL_TRAPPING  macro  include/linux/sched.h  1874  #define JOBCTL_TRAPPING (1 << JOBCTL_TRAPPING_BIT)
JOBCTL_LISTENING  macro  include/linux/sched.h  1875  #define JOBCTL_LISTENING (1 << JOBCTL_LISTENING_BIT)
JOBCTL_TRAP_MASK  macro  include/linux/sched.h  1877  #define JOBCTL_TRAP_MASK (JOBCTL_TRAP_STOP | JOBCTL_TRAP_NOTIFY)
JOBCTL_PENDING_MASK  macro  include/linux/sched.h  1878  #define JOBCTL_PENDING_MASK (JOBCTL_STOP_PENDING | JOBCTL_TRAP_MASK)
task_set_jobctl_pending  prototype  include/linux/sched.h  1880  extern bool task_set_jobctl_pending(struct task_struct *task,unsigned int mask);
task_clear_jobctl_trapping  prototype  include/linux/sched.h  1882  extern void task_clear_jobctl_trapping(struct task_struct *task);
task_clear_jobctl_pending  prototype  include/linux/sched.h  1883  extern void task_clear_jobctl_pending(struct task_struct *task,unsigned int mask);
RCU_READ_UNLOCK_BLOCKED  macro  include/linux/sched.h  1888  #define RCU_READ_UNLOCK_BLOCKED (1 << 0)
RCU_READ_UNLOCK_NEED_QS  macro  include/linux/sched.h  1889  #define RCU_READ_UNLOCK_NEED_QS (1 << 1)
rcu_copy_process  function  include/linux/sched.h  1906  static inline void rcu_copy_process(struct task_struct *p)
tsk_restore_flags  function  include/linux/sched.h  1912  static inline void tsk_restore_flags(struct task_struct *task,unsigned long orig_flags, unsigned long flags)
do_set_cpus_allowed  function  include/linux/sched.h  1926  static inline void do_set_cpus_allowed(struct task_struct *p,const struct cpumask *new_mask)
set_cpus_allowed_ptr  function  include/linux/sched.h  1930  static inline int set_cpus_allowed_ptr(struct task_struct *p,const struct cpumask *new_mask)
calc_load_enter_idle  function  include/linux/sched.h  1943  static inline void calc_load_enter_idle(void) { }
calc_load_exit_idle  function  include/linux/sched.h  1944  static inline void calc_load_exit_idle(void) { }
set_cpus_allowed  function  include/linux/sched.h  1948  static inline int set_cpus_allowed(struct task_struct *p,cpumask_t new_mask)
sched_clock  prototype  include/linux/sched.h  1962  extern unsigned long long notrace sched_clock(void);
cpu_clock  prototype  include/linux/sched.h  1966  extern u64 cpu_clock(int cpu);
local_clock  prototype  include/linux/sched.h  1967  extern u64 local_clock(void);
sched_clock_cpu  prototype  include/linux/sched.h  1968  extern u64 sched_clock_cpu(int cpu);
sched_clock_init  prototype  include/linux/sched.h  1971  extern void sched_clock_init(void);
sched_clock_tick  prototype  include/linux/sched.h  1994  extern void sched_clock_tick(void);
sched_clock_idle_sleep_event  prototype  include/linux/sched.h  2022  extern void sched_clock_idle_sleep_event(void);
sched_clock_idle_wakeup_event  prototype  include/linux/sched.h  2023  extern void sched_clock_idle_wakeup_event(u64 delta_ns);
enable_sched_clock_irqtime  function  include/linux/sched.h  2008  static inline void enable_sched_clock_irqtime(void) {}
disable_sched_clock_irqtime  function  include/linux/sched.h  2009  static inline void disable_sched_clock_irqtime(void) {}
task_sched_runtime  prototype  include/linux/sched.h  2013  task_sched_runtime(struct task_struct *task);
sched_exec  macro  include/linux/sched.h  2019  #define sched_exec() {}
idle_task_exit  function  include/linux/sched.h  2028  static inline void idle_task_exit(void) {}
wake_up_idle_cpu  function  include/linux/sched.h  2034  static inline void wake_up_idle_cpu(int cpu) { }
sched_tunable_scaling  enum  include/linux/sched.h  2042  enum sched_tunable_scaling { SCHED_TUNABLESCALING_NONE, SCHED_TUNABLESCALING_LOG, SCHED_TUNABLESCALING_LINEAR, SCHED_TUNABLESCALING_END, };
sched_proc_update_handler  prototype  include/linux/sched.h  2064  int sched_proc_update_handler(struct ctl_table *table,int write,void __user *buffer, size_t *length,loff_t *ppos);
get_sysctl_timer_migration  function  include/linux/sched.h  2074  static inline unsigned int get_sysctl_timer_migration(void)
sched_rt_handler  prototype  include/linux/sched.h  2082  int sched_rt_handler(struct ctl_table *table,int write,void __user *buffer, size_t *lenp,loff_t *ppos);
sched_autogroup_create_attach  function  include/linux/sched.h  2098  static inline void sched_autogroup_create_attach(struct task_struct *p) { }
sched_autogroup_detach  function  include/linux/sched.h  2099  static inline void sched_autogroup_detach(struct task_struct *p) { }
sched_autogroup_fork  function  include/linux/sched.h  2100  static inline void sched_autogroup_fork(struct signal_struct *sig) { }
sched_autogroup_exit  function  include/linux/sched.h  2101  static inline void sched_autogroup_exit(struct signal_struct *sig) { }
proc_sched_autogroup_show_task  prototype  include/linux/sched.h  2094  extern void proc_sched_autogroup_show_task(struct task_struct *p,struct seq_file *m);
proc_sched_autogroup_set_nice  prototype  include/linux/sched.h  2095  extern int proc_sched_autogroup_set_nice(struct task_struct *p,int nice);
rt_mutex_getprio  function  include/linux/sched.h  2117  static inline int rt_mutex_getprio(struct task_struct *p)
rt_mutex_setprio  prototype  include/linux/sched.h  2110  extern void rt_mutex_setprio(struct task_struct *p,int prio);
rt_mutex_adjust_pi  macro  include/linux/sched.h  2121  # define rt_mutex_adjust_pi(p) do { } while (0)
tsk_is_pi_blocked  function  include/linux/sched.h  2122  static inline bool tsk_is_pi_blocked(struct task_struct *tsk)
yield_to  prototype  include/linux/sched.h  2128  extern bool yield_to(struct task_struct *p,bool preempt);
set_user_nice  prototype  include/linux/sched.h  2129  extern void set_user_nice(struct task_struct *p,long nice);
task_prio  prototype  include/linux/sched.h  2130  extern int task_prio(const struct task_struct *p);
task_nice  prototype  include/linux/sched.h  2131  extern int task_nice(const struct task_struct *p);
can_nice  prototype  include/linux/sched.h  2132  extern int can_nice(const struct task_struct *p,const int nice);
task_curr  prototype  include/linux/sched.h  2133  extern int task_curr(const struct task_struct *p);
idle_cpu  prototype  include/linux/sched.h  2134  extern int idle_cpu(int cpu);
sched_setscheduler  prototype  include/linux/sched.h  2135  extern int sched_setscheduler(struct task_struct *,int,const struct sched_param *);
sched_setscheduler_nocheck  prototype  include/linux/sched.h  2137  extern int sched_setscheduler_nocheck(struct task_struct *,int,const struct sched_param *);
idle_task  prototype  include/linux/sched.h  2139  extern struct task_struct *idle_task(int cpu);
is_idle_task  function  include/linux/sched.h  2144  static inline bool is_idle_task(const struct task_struct *p)
curr_task  prototype  include/linux/sched.h  2148  extern struct task_struct *curr_task(int cpu);
set_curr_task  prototype  include/linux/sched.h  2149  extern void set_curr_task(int cpu,struct task_struct *p);
yield  prototype  include/linux/sched.h  2151  void yield(void);
thread_union  union  include/linux/sched.h  2158  union thread_union { struct thread_info thread_info; unsigned long stack[THREAD_SIZE/sizeof(long)]; };
kstack_end  function  include/linux/sched.h  2164  static inline int kstack_end(void *addr)
find_task_by_vpid  prototype  include/linux/sched.h  2191  extern struct task_struct *find_task_by_vpid(pid_t nr);
find_task_by_pid_ns  prototype  include/linux/sched.h  2192  extern struct task_struct *find_task_by_pid_ns(pid_t nr,struct pid_namespace *ns);
__set_special_pids  prototype  include/linux/sched.h  2195  extern void __set_special_pids(struct pid *pid);
alloc_uid  prototype  include/linux/sched.h  2198  extern struct user_struct * alloc_uid(kuid_t);
get_uid  function  include/linux/sched.h  2199  static inline struct user_struct *get_uid(struct user_struct *u)
free_uid  prototype  include/linux/sched.h  2204  extern void free_uid(struct user_struct *);
xtime_update  prototype  include/linux/sched.h  2208  extern void xtime_update(unsigned long ticks);
wake_up_state  prototype  include/linux/sched.h  2210  extern int wake_up_state(struct task_struct *tsk,unsigned int state);
wake_up_process  prototype  include/linux/sched.h  2211  extern int wake_up_process(struct task_struct *tsk);
wake_up_new_task  prototype  include/linux/sched.h  2212  extern void wake_up_new_task(struct task_struct *tsk);
kick_process  function  include/linux/sched.h  2216  static inline void kick_process(struct task_struct *tsk) { }
sched_fork  prototype  include/linux/sched.h  2218  extern void sched_fork(struct task_struct *p);
sched_dead  prototype  include/linux/sched.h  2219  extern void sched_dead(struct task_struct *p);
proc_caches_init  prototype  include/linux/sched.h  2221  extern void proc_caches_init(void);
flush_signals  prototype  include/linux/sched.h  2222  extern void flush_signals(struct task_struct *);
__flush_signals  prototype  include/linux/sched.h  2223  extern void __flush_signals(struct task_struct *);
ignore_signals  prototype  include/linux/sched.h  2224  extern void ignore_signals(struct task_struct *);
flush_signal_handlers  prototype  include/linux/sched.h  2225  extern void flush_signal_handlers(struct task_struct *,int force_default);
dequeue_signal  prototype  include/linux/sched.h  2226  extern int dequeue_signal(struct task_struct *tsk,sigset_t *mask,siginfo_t *info);
dequeue_signal_lock  function  include/linux/sched.h  2228  static inline int dequeue_signal_lock(struct task_struct *tsk,sigset_t *mask,siginfo_t *info)
block_all_signals  prototype  include/linux/sched.h  2240  extern void block_all_signals(int (*notifier)(void *priv),void *priv,sigset_t *mask);
unblock_all_signals  prototype  include/linux/sched.h  2242  extern void unblock_all_signals(void);
release_task  prototype  include/linux/sched.h  2243  extern void release_task(struct task_struct * p);
send_sig_info  prototype  include/linux/sched.h  2244  extern int send_sig_info(int,struct siginfo *,struct task_struct *);
force_sigsegv  prototype  include/linux/sched.h  2245  extern int force_sigsegv(int,struct task_struct *);
force_sig_info  prototype  include/linux/sched.h  2246  extern int force_sig_info(int,struct siginfo *,struct task_struct *);
__kill_pgrp_info  prototype  include/linux/sched.h  2247  extern int __kill_pgrp_info(int sig,struct siginfo *info,struct pid *pgrp);
kill_pid_info  prototype  include/linux/sched.h  2248  extern int kill_pid_info(int sig,struct siginfo *info,struct pid *pid);
kill_pid_info_as_cred  prototype  include/linux/sched.h  2249  extern int kill_pid_info_as_cred(int,struct siginfo *,struct pid *,const struct cred *, u32);
kill_pgrp  prototype  include/linux/sched.h  2251  extern int kill_pgrp(struct pid *pid,int sig,int priv);
kill_pid  prototype  include/linux/sched.h  2252  extern int kill_pid(struct pid *pid,int sig,int priv);
kill_proc_info  prototype  include/linux/sched.h  2253  extern int kill_proc_info(int,struct siginfo *,pid_t);
do_notify_parent  prototype  include/linux/sched.h  2254  extern __must_check bool do_notify_parent(struct task_struct *,int);
__wake_up_parent  prototype  include/linux/sched.h  2255  extern void __wake_up_parent(struct task_struct *p,struct task_struct *parent);
force_sig  prototype  include/linux/sched.h  2256  extern void force_sig(int,struct task_struct *);
send_sig  prototype  include/linux/sched.h  2257  extern int send_sig(int,struct task_struct *,int);
zap_other_threads  prototype  include/linux/sched.h  2258  extern int zap_other_threads(struct task_struct *p);
sigqueue_alloc  prototype  include/linux/sched.h  2259  extern struct sigqueue *sigqueue_alloc(void);
sigqueue_free  prototype  include/linux/sched.h  2260  extern void sigqueue_free(struct sigqueue *);
send_sigqueue  prototype  include/linux/sched.h  2261  extern int send_sigqueue(struct sigqueue *,struct task_struct *,int group);
do_sigaction  prototype  include/linux/sched.h  2262  extern int do_sigaction(int,struct k_sigaction *,struct k_sigaction *);
do_sigaltstack  prototype  include/linux/sched.h  2263  extern int do_sigaltstack(const stack_t __user *,stack_t __user *,unsigned long);
restore_saved_sigmask  function  include/linux/sched.h  2265  static inline void restore_saved_sigmask(void)
sigmask_to_save  function  include/linux/sched.h  2271  static inline sigset_t *sigmask_to_save(void)
kill_cad_pid  function  include/linux/sched.h  2279  static inline int kill_cad_pid(int sig,int priv)
SEND_SIG_NOINFO  macro  include/linux/sched.h  2285  #define SEND_SIG_NOINFO ((struct siginfo *) 0)
SEND_SIG_PRIV  macro  include/linux/sched.h  2286  #define SEND_SIG_PRIV ((struct siginfo *) 1)
SEND_SIG_FORCED  macro  include/linux/sched.h  2287  #define SEND_SIG_FORCED ((struct siginfo *) 2)
on_sig_stack  function  include/linux/sched.h  2292  static inline int on_sig_stack(unsigned long sp)
sas_ss_flags  function  include/linux/sched.h  2303  static inline int sas_ss_flags(unsigned long sp)
mm_alloc  prototype  include/linux/sched.h  2312  extern struct mm_struct * mm_alloc(void);
__mmdrop  prototype  include/linux/sched.h  2315  extern void __mmdrop(struct mm_struct *);
mmdrop  function  include/linux/sched.h  2316  static inline void mmdrop(struct mm_struct * mm)
mmput  prototype  include/linux/sched.h  2323  extern void mmput(struct mm_struct *);
get_task_mm  prototype  include/linux/sched.h  2325  extern struct mm_struct *get_task_mm(struct task_struct *task);
mm_access  prototype  include/linux/sched.h  2331  extern struct mm_struct *mm_access(struct task_struct *task,unsigned int mode);
mm_release  prototype  include/linux/sched.h  2333  extern void mm_release(struct task_struct *,struct mm_struct *);
dup_mm  prototype  include/linux/sched.h  2335  extern struct mm_struct *dup_mm(struct task_struct *tsk);
copy_thread  prototype  include/linux/sched.h  2337  extern int copy_thread(unsigned long,unsigned long,unsigned long,struct task_struct *);
flush_thread  prototype  include/linux/sched.h  2339  extern void flush_thread(void);
exit_thread  prototype  include/linux/sched.h  2340  extern void exit_thread(void);
exit_files  prototype  include/linux/sched.h  2342  extern void exit_files(struct task_struct *);
__cleanup_sighand  prototype  include/linux/sched.h  2343  extern void __cleanup_sighand(struct sighand_struct *);
exit_itimers  prototype  include/linux/sched.h  2345  extern void exit_itimers(struct signal_struct *);
flush_itimer_signals  prototype  include/linux/sched.h  2346  extern void flush_itimer_signals(void);
do_group_exit  prototype  include/linux/sched.h  2348  extern void do_group_exit(int);
allow_signal  prototype  include/linux/sched.h  2350  extern int allow_signal(int);
disallow_signal  prototype  include/linux/sched.h  2351  extern int disallow_signal(int);
do_execve  prototype  include/linux/sched.h  2353  extern int do_execve(const char *,const char __user * const __user *,const char __user * const __user *);
do_fork  prototype  include/linux/sched.h  2356  extern long do_fork(unsigned long,unsigned long,unsigned long,int __user *,int __user *);
fork_idle  prototype  include/linux/sched.h  2357  struct task_struct *fork_idle(int);
kernel_thread  prototype  include/linux/sched.h  2358  extern pid_t kernel_thread(int (*fn)(void *),void *arg,unsigned long flags);
set_task_comm  prototype  include/linux/sched.h  2360  extern void set_task_comm(struct task_struct *tsk,char *from);
get_task_comm  prototype  include/linux/sched.h  2361  extern char *get_task_comm(char *to,struct task_struct *tsk);
scheduler_ipi  function  include/linux/sched.h  2367  static inline void scheduler_ipi(void) { }
wait_task_inactive  function  include/linux/sched.h  2368  static inline unsigned long wait_task_inactive(struct task_struct *p,long match_state)
next_task  macro  include/linux/sched.h  2375  #define next_task(p) list_entry_rcu((p)->tasks.next, struct task_struct, tasks)
for_each_process  macro  include/linux/sched.h  2378  #define for_each_process(p) for (p = &init_task ; (p = next_task(p)) != &init_task ; )
current_is_single_threaded  prototype  include/linux/sched.h  2381  extern bool current_is_single_threaded(void);
do_each_thread  macro  include/linux/sched.h  2387  #define do_each_thread(g,t) for (g = t = &init_task ; (g = t = next_task(g)) != &init_task ; ) do
while_each_thread  macro  include/linux/sched.h  2390  #define while_each_thread(g,t) while ((t = next_thread(t)) != g)
get_nr_threads  function  include/linux/sched.h  2393  static inline int get_nr_threads(struct task_struct *tsk)
thread_group_leader  function  include/linux/sched.h  2398  static inline bool thread_group_leader(struct task_struct *p)
has_group_leader_pid  function  include/linux/sched.h  2409  static inline int has_group_leader_pid(struct task_struct *p)
same_thread_group  function  include/linux/sched.h  2415  int same_thread_group(struct task_struct *p1,struct task_struct *p2)
next_thread  function  include/linux/sched.h  2420  static inline struct task_struct *next_thread(const struct task_struct *p)
thread_group_empty  function  include/linux/sched.h  2426  static inline int thread_group_empty(struct task_struct *p)
delay_group_leader  macro  include/linux/sched.h  2431  #define delay_group_leader(p) (thread_group_leader(p) && !thread_group_empty(p))
task_lock  function  include/linux/sched.h  2444  static inline void task_lock(struct task_struct *p)
task_unlock  function  include/linux/sched.h  2449  static inline void task_unlock(struct task_struct *p)
__lock_task_sighand  prototype  include/linux/sched.h  2454  extern struct sighand_struct *__lock_task_sighand(struct task_struct *tsk,unsigned long *flags);
lock_task_sighand  function  include/linux/sched.h  2457  static inline struct sighand_struct *lock_task_sighand(struct task_struct *tsk,unsigned long *flags)
unlock_task_sighand  function  include/linux/sched.h  2467  static inline void unlock_task_sighand(struct task_struct *tsk,unsigned long *flags)
threadgroup_change_begin  function  include/linux/sched.h  2515  static inline void threadgroup_change_begin(struct task_struct *tsk) {}
threadgroup_change_end  function  include/linux/sched.h  2516  static inline void threadgroup_change_end(struct task_struct *tsk) {}
threadgroup_lock  function  include/linux/sched.h  2517  static inline void threadgroup_lock(struct task_struct *tsk) {}
threadgroup_unlock  function  include/linux/sched.h  2518  static inline void threadgroup_unlock(struct task_struct *tsk) {}
task_thread_info  macro  include/linux/sched.h  2523  #define task_thread_info(task) ((struct thread_info *)(task)->stack)
task_stack_page  macro  include/linux/sched.h  2524  #define task_stack_page(task) ((task)->stack)
setup_thread_stack  function  include/linux/sched.h  2526  static inline void setup_thread_stack(struct task_struct *p,struct task_struct *org)
end_of_stack  function  include/linux/sched.h  2532  static inline unsigned long *end_of_stack(struct task_struct *p)
object_is_on_stack  function  include/linux/sched.h  2539  static inline int object_is_on_stack(void *obj)
thread_info_cache_init  prototype  include/linux/sched.h  2546  extern void thread_info_cache_init(void);
stack_not_used  function  include/linux/sched.h  2549  static inline unsigned long stack_not_used(struct task_struct *p)
set_tsk_thread_flag  function  include/linux/sched.h  2564  static inline void set_tsk_thread_flag(struct task_struct *tsk,int flag)
clear_tsk_thread_flag  function  include/linux/sched.h  2569  static inline void clear_tsk_thread_flag(struct task_struct *tsk,int flag)
test_and_set_tsk_thread_flag  function  include/linux/sched.h  2574  static inline int test_and_set_tsk_thread_flag(struct task_struct *tsk,int flag)
test_and_clear_tsk_thread_flag  function  include/linux/sched.h  2579  static inline int test_and_clear_tsk_thread_flag(struct task_struct *tsk,int flag)
test_tsk_thread_flag  function  include/linux/sched.h  2584  static inline int test_tsk_thread_flag(struct task_struct *tsk,int flag)
set_tsk_need_resched  function  include/linux/sched.h  2589  static inline void set_tsk_need_resched(struct task_struct *tsk)
clear_tsk_need_resched  function  include/linux/sched.h  2594  static inline void clear_tsk_need_resched(struct task_struct *tsk)
test_tsk_need_resched  function  include/linux/sched.h  2599  static inline int test_tsk_need_resched(struct task_struct *tsk)
restart_syscall  function  include/linux/sched.h  2604  static inline int restart_syscall(void)
signal_pending  function  include/linux/sched.h  2610  static inline int signal_pending(struct task_struct *p)
__fatal_signal_pending  function  include/linux/sched.h  2615  static inline int __fatal_signal_pending(struct task_struct *p)
fatal_signal_pending  function  include/linux/sched.h  2620  static inline int fatal_signal_pending(struct task_struct *p)
signal_pending_state  function  include/linux/sched.h  2625  static inline int signal_pending_state(long state,struct task_struct *p)
need_resched  function  include/linux/sched.h  2635  static inline int need_resched(void)
cond_resched  macro  include/linux/sched.h  2649  #define cond_resched() ({ __might_sleep(__FILE__, __LINE__, 0); _cond_resched(); })
__cond_resched_lock  prototype  include/linux/sched.h  2654  extern int __cond_resched_lock(spinlock_t *lock);
PREEMPT_LOCK_OFFSET  macro  include/linux/sched.h  2659  #define PREEMPT_LOCK_OFFSET 0
cond_resched_lock  macro  include/linux/sched.h  2662  #define cond_resched_lock(lock) ({ __might_sleep(__FILE__, __LINE__, PREEMPT_LOCK_OFFSET); __cond_resched_lock(lock); })
__cond_resched_softirq  prototype  include/linux/sched.h  2667  extern int __cond_resched_softirq(void);
cond_resched_softirq  macro  include/linux/sched.h  2669  #define cond_resched_softirq() ({ __might_sleep(__FILE__, __LINE__, SOFTIRQ_DISABLE_OFFSET); __cond_resched_softirq(); })
spin_needbreak  function  include/linux/sched.h  2679  static inline int spin_needbreak(spinlock_t *lock)
thread_group_cputime  prototype  include/linux/sched.h  2691  void thread_group_cputime(struct task_struct *tsk,struct task_cputime *times);
thread_group_cputime_init  function  include/linux/sched.h  2694  static inline void thread_group_cputime_init(struct signal_struct *sig)
recalc_sigpending_and_wake  prototype  include/linux/sched.h  2705  extern void recalc_sigpending_and_wake(struct task_struct *t);
recalc_sigpending  prototype  include/linux/sched.h  2706  extern void recalc_sigpending(void);
signal_wake_up_state  prototype  include/linux/sched.h  2708  extern void signal_wake_up_state(struct task_struct *t,unsigned int state);
signal_wake_up  function  include/linux/sched.h  2710  static inline void signal_wake_up(struct task_struct *t,bool resume)
ptrace_signal_wake_up  function  include/linux/sched.h  2714  static inline void ptrace_signal_wake_up(struct task_struct *t,bool resume)
task_cpu  function  include/linux/sched.h  2733  static inline unsigned int task_cpu(const struct task_struct *p)
set_task_cpu  function  include/linux/sched.h  2738  static inline void set_task_cpu(struct task_struct *p,unsigned int cpu)
sched_setaffinity  prototype  include/linux/sched.h  2744  extern long sched_setaffinity(pid_t pid,const struct cpumask *new_mask);
sched_getaffinity  prototype  include/linux/sched.h  2745  extern long sched_getaffinity(pid_t pid,struct cpumask *mask);
normalize_rt_tasks  prototype  include/linux/sched.h  2747  extern void normalize_rt_tasks(void);
sched_create_group  prototype  include/linux/sched.h  2753  extern struct task_group *sched_create_group(struct task_group *parent);
sched_destroy_group  prototype  include/linux/sched.h  2754  extern void sched_destroy_group(struct task_group *tg);
sched_move_task  prototype  include/linux/sched.h  2755  extern void sched_move_task(struct task_struct *tsk);
sched_group_set_shares  prototype  include/linux/sched.h  2757  extern int sched_group_set_shares(struct task_group *tg,unsigned long shares);
sched_group_shares  prototype  include/linux/sched.h  2758  extern unsigned long sched_group_shares(struct task_group *tg);
sched_group_set_rt_runtime  prototype  include/linux/sched.h  2761  extern int sched_group_set_rt_runtime(struct task_group *tg,long rt_runtime_us);
sched_group_rt_runtime  prototype  include/linux/sched.h  2763  extern long sched_group_rt_runtime(struct task_group *tg);
sched_group_set_rt_period  prototype  include/linux/sched.h  2764  extern int sched_group_set_rt_period(struct task_group *tg,long rt_period_us);
sched_group_rt_period  prototype  include/linux/sched.h  2766  extern long sched_group_rt_period(struct task_group *tg);
sched_rt_can_attach  prototype  include/linux/sched.h  2767  extern int sched_rt_can_attach(struct task_group *tg,struct task_struct *tsk);
task_can_switch_user  prototype  include/linux/sched.h  2771  extern int task_can_switch_user(struct user_struct *up,struct task_struct *tsk);
add_rchar  function  include/linux/sched.h  2795  static inline void add_rchar(struct task_struct *tsk,ssize_t amt)
add_wchar  function  include/linux/sched.h  2799  static inline void add_wchar(struct task_struct *tsk,ssize_t amt)
inc_syscr  function  include/linux/sched.h  2803  static inline void inc_syscr(struct task_struct *tsk)
inc_syscw  function  include/linux/sched.h  2807  static inline void inc_syscw(struct task_struct *tsk)
TASK_SIZE_OF  macro  include/linux/sched.h  2813  #define TASK_SIZE_OF(tsk) TASK_SIZE
mm_update_next_owner  function  include/linux/sched.h  2820  static inline void mm_update_next_owner(struct mm_struct *mm)
mm_init_owner  function  include/linux/sched.h  2824  static inline void mm_init_owner(struct mm_struct *mm,struct task_struct *p)
task_rlimit  function  include/linux/sched.h  2829  static inline unsigned long task_rlimit(const struct task_struct *tsk,unsigned int limit)
task_rlimit_max  function  include/linux/sched.h  2835  static inline unsigned long task_rlimit_max(const struct task_struct *tsk,unsigned int limit)
rlimit  function  include/linux/sched.h  2841  static inline unsigned long rlimit(unsigned int limit)
rlimit_max  function  include/linux/sched.h  2846  static inline unsigned long rlimit_max(unsigned int limit)
_LINUX_MAJOR_H  macro  include/uapi/linux/major.h  2  #define _LINUX_MAJOR_H
UNNAMED_MAJOR  macro  include/uapi/linux/major.h  9  #define UNNAMED_MAJOR 0
MEM_MAJOR  macro  include/uapi/linux/major.h  10  #define MEM_MAJOR 1
RAMDISK_MAJOR  macro  include/uapi/linux/major.h  11  #define RAMDISK_MAJOR 1
FLOPPY_MAJOR  macro  include/uapi/linux/major.h  12  #define FLOPPY_MAJOR 2
PTY_MASTER_MAJOR  macro  include/uapi/linux/major.h  13  #define PTY_MASTER_MAJOR 2
IDE0_MAJOR  macro  include/uapi/linux/major.h  14  #define IDE0_MAJOR 3
HD_MAJOR  macro  include/uapi/linux/major.h  15  #define HD_MAJOR IDE0_MAJOR
PTY_SLAVE_MAJOR  macro  include/uapi/linux/major.h  16  #define PTY_SLAVE_MAJOR 3
TTY_MAJOR  macro  include/uapi/linux/major.h  17  #define TTY_MAJOR 4
TTYAUX_MAJOR  macro  include/uapi/linux/major.h  18  #define TTYAUX_MAJOR 5
LP_MAJOR  macro  include/uapi/linux/major.h  19  #define LP_MAJOR 6
VCS_MAJOR  macro  include/uapi/linux/major.h  20  #define VCS_MAJOR 7
LOOP_MAJOR  macro  include/uapi/linux/major.h  21  #define LOOP_MAJOR 7
SCSI_DISK0_MAJOR  macro  include/uapi/linux/major.h  22  #define SCSI_DISK0_MAJOR 8
SCSI_TAPE_MAJOR  macro  include/uapi/linux/major.h  23  #define SCSI_TAPE_MAJOR 9
MD_MAJOR  macro  include/uapi/linux/major.h  24  #define MD_MAJOR 9
MISC_MAJOR  macro  include/uapi/linux/major.h  25  #define MISC_MAJOR 10
SCSI_CDROM_MAJOR  macro  include/uapi/linux/major.h  26  #define SCSI_CDROM_MAJOR 11
MUX_MAJOR  macro  include/uapi/linux/major.h  27  #define MUX_MAJOR 11
XT_DISK_MAJOR  macro  include/uapi/linux/major.h  28  #define XT_DISK_MAJOR 13
INPUT_MAJOR  macro  include/uapi/linux/major.h  29  #define INPUT_MAJOR 13
SOUND_MAJOR  macro  include/uapi/linux/major.h  30  #define SOUND_MAJOR 14
CDU31A_CDROM_MAJOR  macro  include/uapi/linux/major.h  31  #define CDU31A_CDROM_MAJOR 15
JOYSTICK_MAJOR  macro  include/uapi/linux/major.h  32  #define JOYSTICK_MAJOR 15
GOLDSTAR_CDROM_MAJOR  macro  include/uapi/linux/major.h  33  #define GOLDSTAR_CDROM_MAJOR 16
OPTICS_CDROM_MAJOR  macro  include/uapi/linux/major.h  34  #define OPTICS_CDROM_MAJOR 17
SANYO_CDROM_MAJOR  macro  include/uapi/linux/major.h  35  #define SANYO_CDROM_MAJOR 18
CYCLADES_MAJOR  macro  include/uapi/linux/major.h  36  #define CYCLADES_MAJOR 19
CYCLADESAUX_MAJOR  macro  include/uapi/linux/major.h  37  #define CYCLADESAUX_MAJOR 20
MITSUMI_X_CDROM_MAJOR  macro  include/uapi/linux/major.h  38  #define MITSUMI_X_CDROM_MAJOR 20
MFM_ACORN_MAJOR  macro  include/uapi/linux/major.h  39  #define MFM_ACORN_MAJOR 21
SCSI_GENERIC_MAJOR  macro  include/uapi/linux/major.h  40  #define SCSI_GENERIC_MAJOR 21
IDE1_MAJOR  macro  include/uapi/linux/major.h  41  #define IDE1_MAJOR 22
DIGICU_MAJOR  macro  include/uapi/linux/major.h  42  #define DIGICU_MAJOR 22
DIGI_MAJOR  macro  include/uapi/linux/major.h  43  #define DIGI_MAJOR 23
MITSUMI_CDROM_MAJOR  macro  include/uapi/linux/major.h  44  #define MITSUMI_CDROM_MAJOR 23
CDU535_CDROM_MAJOR  macro  include/uapi/linux/major.h  45  #define CDU535_CDROM_MAJOR 24
STL_SERIALMAJOR  macro  include/uapi/linux/major.h  46  #define STL_SERIALMAJOR 24
MATSUSHITA_CDROM_MAJOR  macro  include/uapi/linux/major.h  47  #define MATSUSHITA_CDROM_MAJOR 25
STL_CALLOUTMAJOR  macro  include/uapi/linux/major.h  48  #define STL_CALLOUTMAJOR 25
MATSUSHITA_CDROM2_MAJOR  macro  include/uapi/linux/major.h  49  #define MATSUSHITA_CDROM2_MAJOR 26
QIC117_TAPE_MAJOR  macro  include/uapi/linux/major.h  50  #define QIC117_TAPE_MAJOR 27
MATSUSHITA_CDROM3_MAJOR  macro  include/uapi/linux/major.h  51  #define MATSUSHITA_CDROM3_MAJOR 27
MATSUSHITA_CDROM4_MAJOR  macro  include/uapi/linux/major.h  52  #define MATSUSHITA_CDROM4_MAJOR 28
STL_SIOMEMMAJOR  macro  include/uapi/linux/major.h  53  #define STL_SIOMEMMAJOR 28
ACSI_MAJOR  macro  include/uapi/linux/major.h  54  #define ACSI_MAJOR 28
AZTECH_CDROM_MAJOR  macro  include/uapi/linux/major.h  55  #define AZTECH_CDROM_MAJOR 29
FB_MAJOR  macro  include/uapi/linux/major.h  56  #define FB_MAJOR 29
CM206_CDROM_MAJOR  macro  include/uapi/linux/major.h  57  #define CM206_CDROM_MAJOR 32
IDE2_MAJOR  macro  include/uapi/linux/major.h  58  #define IDE2_MAJOR 33
IDE3_MAJOR  macro  include/uapi/linux/major.h  59  #define IDE3_MAJOR 34
Z8530_MAJOR  macro  include/uapi/linux/major.h  60  #define Z8530_MAJOR 34
XPRAM_MAJOR  macro  include/uapi/linux/major.h  61  #define XPRAM_MAJOR 35
NETLINK_MAJOR  macro  include/uapi/linux/major.h  62  #define NETLINK_MAJOR 36
PS2ESDI_MAJOR  macro  include/uapi/linux/major.h  63  #define PS2ESDI_MAJOR 36
IDETAPE_MAJOR  macro  include/uapi/linux/major.h  64  #define IDETAPE_MAJOR 37
Z2RAM_MAJOR  macro  include/uapi/linux/major.h  65  #define Z2RAM_MAJOR 37
APBLOCK_MAJOR  macro  include/uapi/linux/major.h  66  #define APBLOCK_MAJOR 38
DDV_MAJOR  macro  include/uapi/linux/major.h  67  #define DDV_MAJOR 39
NBD_MAJOR  macro  include/uapi/linux/major.h  68  #define NBD_MAJOR 43
RISCOM8_NORMAL_MAJOR  macro  include/uapi/linux/major.h  69  #define RISCOM8_NORMAL_MAJOR 48
DAC960_MAJOR  macro  include/uapi/linux/major.h  70  #define DAC960_MAJOR 48
RISCOM8_CALLOUT_MAJOR  macro  include/uapi/linux/major.h  71  #define RISCOM8_CALLOUT_MAJOR 49
MKISS_MAJOR  macro  include/uapi/linux/major.h  72  #define MKISS_MAJOR 55
DSP56K_MAJOR  macro  include/uapi/linux/major.h  73  #define DSP56K_MAJOR 55
IDE4_MAJOR  macro  include/uapi/linux/major.h  75  #define IDE4_MAJOR 56
IDE5_MAJOR  macro  include/uapi/linux/major.h  76  #define IDE5_MAJOR 57
SCSI_DISK1_MAJOR  macro  include/uapi/linux/major.h  78  #define SCSI_DISK1_MAJOR 65
SCSI_DISK2_MAJOR  macro  include/uapi/linux/major.h  79  #define SCSI_DISK2_MAJOR 66
SCSI_DISK3_MAJOR  macro  include/uapi/linux/major.h  80  #define SCSI_DISK3_MAJOR 67
SCSI_DISK4_MAJOR  macro  include/uapi/linux/major.h  81  #define SCSI_DISK4_MAJOR 68
SCSI_DISK5_MAJOR  macro  include/uapi/linux/major.h  82  #define SCSI_DISK5_MAJOR 69
SCSI_DISK6_MAJOR  macro  include/uapi/linux/major.h  83  #define SCSI_DISK6_MAJOR 70
SCSI_DISK7_MAJOR  macro  include/uapi/linux/major.h  84  #define SCSI_DISK7_MAJOR 71
COMPAQ_SMART2_MAJOR  macro  include/uapi/linux/major.h  86  #define COMPAQ_SMART2_MAJOR 72
COMPAQ_SMART2_MAJOR1  macro  include/uapi/linux/major.h  87  #define COMPAQ_SMART2_MAJOR1 73
COMPAQ_SMART2_MAJOR2  macro  include/uapi/linux/major.h  88  #define COMPAQ_SMART2_MAJOR2 74
COMPAQ_SMART2_MAJOR3  macro  include/uapi/linux/major.h  89  #define COMPAQ_SMART2_MAJOR3 75
COMPAQ_SMART2_MAJOR4  macro  include/uapi/linux/major.h  90  #define COMPAQ_SMART2_MAJOR4 76
COMPAQ_SMART2_MAJOR5  macro  include/uapi/linux/major.h  91  #define COMPAQ_SMART2_MAJOR5 77
COMPAQ_SMART2_MAJOR6  macro  include/uapi/linux/major.h  92  #define COMPAQ_SMART2_MAJOR6 78
COMPAQ_SMART2_MAJOR7  macro  include/uapi/linux/major.h  93  #define COMPAQ_SMART2_MAJOR7 79
SPECIALIX_NORMAL_MAJOR  macro  include/uapi/linux/major.h  95  #define SPECIALIX_NORMAL_MAJOR 75
SPECIALIX_CALLOUT_MAJOR  macro  include/uapi/linux/major.h  96  #define SPECIALIX_CALLOUT_MAJOR 76
AURORA_MAJOR  macro  include/uapi/linux/major.h  98  #define AURORA_MAJOR 79
I2O_MAJOR  macro  include/uapi/linux/major.h  100  #define I2O_MAJOR 80
SHMIQ_MAJOR  macro  include/uapi/linux/major.h  102  #define SHMIQ_MAJOR 85
SCSI_CHANGER_MAJOR  macro  include/uapi/linux/major.h  103  #define SCSI_CHANGER_MAJOR 86
IDE6_MAJOR  macro  include/uapi/linux/major.h  105  #define IDE6_MAJOR 88
IDE7_MAJOR  macro  include/uapi/linux/major.h  106  #define IDE7_MAJOR 89
IDE8_MAJOR  macro  include/uapi/linux/major.h  107  #define IDE8_MAJOR 90
IDE9_MAJOR  macro  include/uapi/linux/major.h  108  #define IDE9_MAJOR 91
DASD_MAJOR  macro  include/uapi/linux/major.h  110  #define DASD_MAJOR 94
MDISK_MAJOR  macro  include/uapi/linux/major.h  112  #define MDISK_MAJOR 95
UBD_MAJOR  macro  include/uapi/linux/major.h  114  #define UBD_MAJOR 98
PP_MAJOR  macro  include/uapi/linux/major.h  116  #define PP_MAJOR 99
JSFD_MAJOR  macro  include/uapi/linux/major.h  117  #define JSFD_MAJOR 99
PHONE_MAJOR  macro  include/uapi/linux/major.h  119  #define PHONE_MAJOR 100
COMPAQ_CISS_MAJOR  macro  include/uapi/linux/major.h  121  #define COMPAQ_CISS_MAJOR 104
COMPAQ_CISS_MAJOR1  macro  include/uapi/linux/major.h  122  #define COMPAQ_CISS_MAJOR1 105
COMPAQ_CISS_MAJOR2  macro  include/uapi/linux/major.h  123  #define COMPAQ_CISS_MAJOR2 106
COMPAQ_CISS_MAJOR3  macro  include/uapi/linux/major.h  124  #define COMPAQ_CISS_MAJOR3 107
COMPAQ_CISS_MAJOR4  macro  include/uapi/linux/major.h  125  #define COMPAQ_CISS_MAJOR4 108
COMPAQ_CISS_MAJOR5  macro  include/uapi/linux/major.h  126  #define COMPAQ_CISS_MAJOR5 109
COMPAQ_CISS_MAJOR6  macro  include/uapi/linux/major.h  127  #define COMPAQ_CISS_MAJOR6 110
COMPAQ_CISS_MAJOR7  macro  include/uapi/linux/major.h  128  #define COMPAQ_CISS_MAJOR7 111
VIODASD_MAJOR  macro  include/uapi/linux/major.h  130  #define VIODASD_MAJOR 112
VIOCD_MAJOR  macro  include/uapi/linux/major.h  131  #define VIOCD_MAJOR 113
ATARAID_MAJOR  macro  include/uapi/linux/major.h  133  #define ATARAID_MAJOR 114
SCSI_DISK8_MAJOR  macro  include/uapi/linux/major.h  135  #define SCSI_DISK8_MAJOR 128
SCSI_DISK9_MAJOR  macro  include/uapi/linux/major.h  136  #define SCSI_DISK9_MAJOR 129
SCSI_DISK10_MAJOR  macro  include/uapi/linux/major.h  137  #define SCSI_DISK10_MAJOR 130
SCSI_DISK11_MAJOR  macro  include/uapi/linux/major.h  138  #define SCSI_DISK11_MAJOR 131
SCSI_DISK12_MAJOR  macro  include/uapi/linux/major.h  139  #define SCSI_DISK12_MAJOR 132
SCSI_DISK13_MAJOR  macro  include/uapi/linux/major.h  140  #define SCSI_DISK13_MAJOR 133
SCSI_DISK14_MAJOR  macro  include/uapi/linux/major.h  141  #define SCSI_DISK14_MAJOR 134
SCSI_DISK15_MAJOR  macro  include/uapi/linux/major.h  142  #define SCSI_DISK15_MAJOR 135
UNIX98_PTY_MASTER_MAJOR  macro  include/uapi/linux/major.h  144  #define UNIX98_PTY_MASTER_MAJOR 128
UNIX98_PTY_MAJOR_COUNT  macro  include/uapi/linux/major.h  145  #define UNIX98_PTY_MAJOR_COUNT 8
UNIX98_PTY_SLAVE_MAJOR  macro  include/uapi/linux/major.h  146  #define UNIX98_PTY_SLAVE_MAJOR (UNIX98_PTY_MASTER_MAJOR+UNIX98_PTY_MAJOR_COUNT)
DRBD_MAJOR  macro  include/uapi/linux/major.h  148  #define DRBD_MAJOR 147
RTF_MAJOR  macro  include/uapi/linux/major.h  149  #define RTF_MAJOR 150
RAW_MAJOR  macro  include/uapi/linux/major.h  150  #define RAW_MAJOR 162
USB_ACM_MAJOR  macro  include/uapi/linux/major.h  152  #define USB_ACM_MAJOR 166
USB_ACM_AUX_MAJOR  macro  include/uapi/linux/major.h  153  #define USB_ACM_AUX_MAJOR 167
USB_CHAR_MAJOR  macro  include/uapi/linux/major.h  154  #define USB_CHAR_MAJOR 180
MMC_BLOCK_MAJOR  macro  include/uapi/linux/major.h  156  #define MMC_BLOCK_MAJOR 179
VXVM_MAJOR  macro  include/uapi/linux/major.h  158  #define VXVM_MAJOR 199
VXSPEC_MAJOR  macro  include/uapi/linux/major.h  159  #define VXSPEC_MAJOR 200
VXDMP_MAJOR  macro  include/uapi/linux/major.h  160  #define VXDMP_MAJOR 201
XENVBD_MAJOR  macro  include/uapi/linux/major.h  162  #define XENVBD_MAJOR 202
MSR_MAJOR  macro  include/uapi/linux/major.h  164  #define MSR_MAJOR 202
CPUID_MAJOR  macro  include/uapi/linux/major.h  165  #define CPUID_MAJOR 203
OSST_MAJOR  macro  include/uapi/linux/major.h  167  #define OSST_MAJOR 206
IBM_TTY3270_MAJOR  macro  include/uapi/linux/major.h  169  #define IBM_TTY3270_MAJOR 227
IBM_FS3270_MAJOR  macro  include/uapi/linux/major.h  170  #define IBM_FS3270_MAJOR 228
VIOTAPE_MAJOR  macro  include/uapi/linux/major.h  172  #define VIOTAPE_MAJOR 230
BLOCK_EXT_MAJOR  macro  include/uapi/linux/major.h  174  #define BLOCK_EXT_MAJOR 259
SCSI_OSD_MAJOR  macro  include/uapi/linux/major.h  175  #define SCSI_OSD_MAJOR 260
_LINUX_GENHD_H  macro  include/linux/genhd.h  2  #define _LINUX_GENHD_H
dev_to_disk  macro  include/linux/genhd.h  19  #define dev_to_disk(device) container_of((device),struct gendisk,part0.__dev)
dev_to_part  macro  include/linux/genhd.h  20  #define dev_to_part(device) container_of((device),struct hd_struct,__dev)
disk_to_dev  macro  include/linux/genhd.h  21  #define disk_to_dev(disk) (&(disk)->part0.__dev)
part_to_dev  macro  include/linux/genhd.h  22  #define part_to_dev(part) (&((part)->__dev))
DISK_MAX_PARTS  macro  include/linux/genhd.h  58  #define DISK_MAX_PARTS 256
DISK_NAME_LEN  macro  include/linux/genhd.h  59  #define DISK_NAME_LEN 32
partition  struct  include/linux/genhd.h  68  struct partition { unsigned char boot_ind; unsigned char head; unsigned char sector; unsigned char cyl; unsigned char sys_ind; unsigned char end_head; unsigned char end_sector; unsigned char end_cyl; __le32 start_sect; __le32 nr_sects; } __attribute__((packed));
disk_stats  struct  include/linux/genhd.h  81  struct disk_stats { unsigned long sectors[2]; unsigned long ios[2]; unsigned long merges[2]; unsigned long ticks[2]; unsigned long io_ticks; unsigned long time_in_queue; };
PARTITION_META_INFO_VOLNAMELTH  macro  include/linux/genhd.h  90  #define PARTITION_META_INFO_VOLNAMELTH 64
PARTITION_META_INFO_UUIDLTH  macro  include/linux/genhd.h  95  #define PARTITION_META_INFO_UUIDLTH 37
partition_meta_info  struct  include/linux/genhd.h  97  struct partition_meta_info { char uuid[PARTITION_META_INFO_UUIDLTH]; u8 volname[PARTITION_META_INFO_VOLNAMELTH]; };
hd_struct  struct  include/linux/genhd.h  102  struct hd_struct { sector_t start_sect; sector_t nr_sects; seqcount_t nr_sects_seq; sector_t alignment_offset; unsigned int discard_alignment; struct device __dev; struct kobject *holder_dir; int policy, partno; struct partition_meta_info *info; int make_it_fail; unsigned long stamp; atomic_t in_flight[2]; struct disk_stats __percpu *dkstats; struct disk_stats dkstats; atomic_t ref; struct rcu_head rcu_head; };
GENHD_FL_REMOVABLE  macro  include/linux/genhd.h  131  #define GENHD_FL_REMOVABLE 1
GENHD_FL_MEDIA_CHANGE_NOTIFY  macro  include/linux/genhd.h  133  #define GENHD_FL_MEDIA_CHANGE_NOTIFY 4
GENHD_FL_CD  macro  include/linux/genhd.h  134  #define GENHD_FL_CD 8
GENHD_FL_UP  macro  include/linux/genhd.h  135  #define GENHD_FL_UP 16
GENHD_FL_SUPPRESS_PARTITION_INFO  macro  include/linux/genhd.h  136  #define GENHD_FL_SUPPRESS_PARTITION_INFO 32
GENHD_FL_EXT_DEVT  macro  include/linux/genhd.h  137  #define GENHD_FL_EXT_DEVT 64
GENHD_FL_NATIVE_CAPACITY  macro  include/linux/genhd.h  138  #define GENHD_FL_NATIVE_CAPACITY 128
GENHD_FL_BLOCK_EVENTS_ON_EXCL_WRITE  macro  include/linux/genhd.h  139  #define GENHD_FL_BLOCK_EVENTS_ON_EXCL_WRITE 256
GENHD_FL_NO_PART_SCAN  macro  include/linux/genhd.h  140  #define GENHD_FL_NO_PART_SCAN 512
blk_scsi_cmd_filter  struct  include/linux/genhd.h  150  struct blk_scsi_cmd_filter { unsigned long read_ok[BLK_SCSI_CMD_PER_LONG]; unsigned long write_ok[BLK_SCSI_CMD_PER_LONG]; struct kobject kobj; };
disk_part_tbl  struct  include/linux/genhd.h  156  struct disk_part_tbl { struct rcu_head rcu_head; int len; struct hd_struct __rcu *last_lookup; struct hd_struct __rcu *part[]; };
gendisk  struct  include/linux/genhd.h  165  struct gendisk { int major; int first_minor; int minors; char disk_name[DISK_NAME_LEN]; char *(*devnode)(struct gendisk *gd, umode_t *mode); unsigned int events; unsigned int async_events; struct disk_part_tbl __rcu *part_tbl; struct hd_struct part0; const struct block_device_operations *fops; struct request_queue *queue; void *private_data; int flags; struct device *driverfs_dev; // FIXME: remove struct kobject *slave_dir; struct timer_rand_state *random; atomic_t sync_io; struct disk_events *ev; struct blk_integrity *integrity; int node_id; };
part_to_disk  function  include/linux/genhd.h  205  static inline struct gendisk *part_to_disk(struct hd_struct *part)
part_pack_uuid  function  include/linux/genhd.h  216  static inline void part_pack_uuid(const u8 *uuid_str,u8 *to)
disk_max_parts  function  include/linux/genhd.h  234  static inline int disk_max_parts(struct gendisk *disk)
disk_part_scan_enabled  function  include/linux/genhd.h  241  static inline bool disk_part_scan_enabled(struct gendisk *disk)
disk_devt  function  include/linux/genhd.h  247  static inline dev_t disk_devt(struct gendisk *disk)
part_devt  function  include/linux/genhd.h  252  static inline dev_t part_devt(struct hd_struct *part)
disk_get_part  prototype  include/linux/genhd.h  257  extern struct hd_struct *disk_get_part(struct gendisk *disk,int partno);
disk_put_part  function  include/linux/genhd.h  259  static inline void disk_put_part(struct hd_struct *part)
DISK_PITER_REVERSE  macro  include/linux/genhd.h  268  #define DISK_PITER_REVERSE (1 << 0)
DISK_PITER_INCL_EMPTY  macro  include/linux/genhd.h  269  #define DISK_PITER_INCL_EMPTY (1 << 1)
DISK_PITER_INCL_PART0  macro  include/linux/genhd.h  270  #define DISK_PITER_INCL_PART0 (1 << 2)
DISK_PITER_INCL_EMPTY_PART0  macro  include/linux/genhd.h  271  #define DISK_PITER_INCL_EMPTY_PART0 (1 << 3)
disk_part_iter  struct  include/linux/genhd.h  273  struct disk_part_iter { struct gendisk *disk; struct hd_struct *part; int idx; unsigned int flags; };
disk_part_iter_init  prototype  include/linux/genhd.h  280  extern void disk_part_iter_init(struct disk_part_iter *piter,struct gendisk *disk, unsigned int flags);
disk_part_iter_next  prototype  include/linux/genhd.h  282  extern struct hd_struct *disk_part_iter_next(struct disk_part_iter *piter);
disk_part_iter_exit  prototype  include/linux/genhd.h  283  extern void disk_part_iter_exit(struct disk_part_iter *piter);
disk_map_sector_rcu  prototype  include/linux/genhd.h  285  extern struct hd_struct *disk_map_sector_rcu(struct gendisk *disk,sector_t sector);
part_stat_lock  macro  include/linux/genhd.h  339  #define part_stat_lock() ({ rcu_read_lock(); 0; })
part_stat_unlock  macro  include/linux/genhd.h  340  #define part_stat_unlock() rcu_read_unlock()
__part_stat_add  macro  include/linux/genhd.h  342  #define __part_stat_add(cpu,part,field,addnd) ((part)->dkstats.field += addnd)
part_stat_read  macro  include/linux/genhd.h  345  #define part_stat_read(part,field) ((part)->dkstats.field)
part_stat_set_all  function  include/linux/genhd.h  347  static inline void part_stat_set_all(struct hd_struct *part,int value)
init_part_stats  function  include/linux/genhd.h  352  static inline int init_part_stats(struct hd_struct *part)
free_part_stats  function  include/linux/genhd.h  357  static inline void free_part_stats(struct hd_struct *part)
part_stat_add  macro  include/linux/genhd.h  363  #define part_stat_add(cpu,part,field,addnd) do { __part_stat_add((cpu), (part), field, addnd); if ((part)->partno) __part_stat_add((cpu), &part_to_disk((part))->part0, field, addnd); } while (0)
part_stat_dec  macro  include/linux/genhd.h  370  #define part_stat_dec(cpu,gendiskp,field) part_stat_add(cpu, gendiskp, field, -1)
part_stat_inc  macro  include/linux/genhd.h  372  #define part_stat_inc(cpu,gendiskp,field) part_stat_add(cpu, gendiskp, field, 1)
part_stat_sub  macro  include/linux/genhd.h  374  #define part_stat_sub(cpu,gendiskp,field,subnd) part_stat_add(cpu, gendiskp, field, -subnd)
part_inc_in_flight  function  include/linux/genhd.h  377  static inline void part_inc_in_flight(struct hd_struct *part,int rw)
part_dec_in_flight  function  include/linux/genhd.h  384  static inline void part_dec_in_flight(struct hd_struct *part,int rw)
part_in_flight  function  include/linux/genhd.h  391  static inline int part_in_flight(struct hd_struct *part)
alloc_part_info  function  include/linux/genhd.h  396  static inline struct partition_meta_info *alloc_part_info(struct gendisk *disk)
free_part_info  function  include/linux/genhd.h  404  static inline void free_part_info(struct hd_struct *part)
part_round_stats  prototype  include/linux/genhd.h  410  extern void part_round_stats(int cpu,struct hd_struct *part);
add_disk  prototype  include/linux/genhd.h  413  extern void add_disk(struct gendisk *disk);
del_gendisk  prototype  include/linux/genhd.h  414  extern void del_gendisk(struct gendisk *gp);
get_gendisk  prototype  include/linux/genhd.h  415  extern struct gendisk *get_gendisk(dev_t dev,int *partno);
bdget_disk  prototype  include/linux/genhd.h  416  extern struct block_device *bdget_disk(struct gendisk *disk,int partno);
set_device_ro  prototype  include/linux/genhd.h  418  extern void set_device_ro(struct block_device *bdev,int flag);
set_disk_ro  prototype  include/linux/genhd.h  419  extern void set_disk_ro(struct gendisk *disk,int flag);
get_disk_ro  function  include/linux/genhd.h  421  static inline int get_disk_ro(struct gendisk *disk)
disk_block_events  prototype  include/linux/genhd.h  426  extern void disk_block_events(struct gendisk *disk);
disk_unblock_events  prototype  include/linux/genhd.h  427  extern void disk_unblock_events(struct gendisk *disk);
disk_flush_events  prototype  include/linux/genhd.h  428  extern void disk_flush_events(struct gendisk *disk,unsigned int mask);
disk_clear_events  prototype  include/linux/genhd.h  429  extern unsigned int disk_clear_events(struct gendisk *disk,unsigned int mask);
add_disk_randomness  prototype  include/linux/genhd.h  432  extern void add_disk_randomness(struct gendisk *disk);
rand_initialize_disk  prototype  include/linux/genhd.h  433  extern void rand_initialize_disk(struct gendisk *disk);
get_start_sect  function  include/linux/genhd.h  435  static inline sector_t get_start_sect(struct block_device *bdev)
get_capacity  function  include/linux/genhd.h  439  static inline sector_t get_capacity(struct gendisk *disk)
set_capacity  function  include/linux/genhd.h  443  static inline void set_capacity(struct gendisk *disk,sector_t size)
SOLARIS_X86_NUMSLICE  macro  include/linux/genhd.h  450  #define SOLARIS_X86_NUMSLICE 16
SOLARIS_X86_VTOC_SANE  macro  include/linux/genhd.h  451  #define SOLARIS_X86_VTOC_SANE (0x600DDEEEUL)
solaris_x86_slice  struct  include/linux/genhd.h  453  struct solaris_x86_slice { __le16 s_tag; __le16 s_flag; __le32 s_start; __le32 s_size; };
solaris_x86_vtoc  struct  include/linux/genhd.h  460  struct solaris_x86_vtoc { unsigned int v_bootinfo[3]; __le32 v_sanity; __le32 v_version; char v_volume[8]; __le16 v_sectorsz; __le16 v_nparts; unsigned int v_reserved[10]; v_slice[SOLARIS_X86_NUMSLICE]; unsigned int timestamp[SOLARIS_X86_NUMSLICE]; char v_asciilabel[128]; };
BSD_DISKMAGIC  macro  include/linux/genhd.h  484  #define BSD_DISKMAGIC (0x82564557UL)
BSD_MAXPARTITIONS  macro  include/linux/genhd.h  485  #define BSD_MAXPARTITIONS 16
OPENBSD_MAXPARTITIONS  macro  include/linux/genhd.h  486  #define OPENBSD_MAXPARTITIONS 16
BSD_FS_UNUSED  macro  include/linux/genhd.h  487  #define BSD_FS_UNUSED 0
bsd_disklabel  struct  include/linux/genhd.h  488  struct bsd_disklabel { __le32 d_magic; __s16 d_type; __s16 d_subtype; char d_typename[16]; char d_packname[16]; __u32 d_secsize; __u32 d_nsectors; __u32 d_ntracks; __u32 d_ncylinders; __u32 d_secpercyl; __u32 d_secperunit; __u16 d_sparespertrack; __u16 d_sparespercyl; __u32 d_acylinders; __u16 d_rpm; __u16 d_interleave; __u16 d_trackskew; __u16 d_cylskew; __u32 d_headswitch; __u32 d_trkseek; __u32 d_flags; #define NDDATA 5 __u32 d_drivedata[NDDATA]; #define NSPARE 5 __u32 d_spare[NSPARE]; __le32 d_magic2; __le16 d_checksum; __le16 d_npartitions; __le32 d_bbsize; __le32 d_sbsize; struct bsd_partition { __le32 p_size; __le32 p_offset; __le32 p_fsize; __u8 p_fstype; __u8 p_frag; __le16 p_cpg; } d_partitions[BSD_MAXPARTITIONS]; };
UNIXWARE_DISKMAGIC  macro  include/linux/genhd.h  539  #define UNIXWARE_DISKMAGIC (0xCA5E600DUL)
UNIXWARE_DISKMAGIC2  macro  include/linux/genhd.h  540  #define UNIXWARE_DISKMAGIC2 (0x600DDEEEUL)
UNIXWARE_NUMSLICE  macro  include/linux/genhd.h  541  #define UNIXWARE_NUMSLICE 16
UNIXWARE_FS_UNUSED  macro  include/linux/genhd.h  542  #define UNIXWARE_FS_UNUSED 0
unixware_slice  struct  include/linux/genhd.h  544  struct unixware_slice { __le16 s_label; __le16 s_flags; __le32 start_sect; __le32 nr_sects; };
unixware_disklabel  struct  include/linux/genhd.h  551  struct unixware_disklabel { __le32 d_type; __le32 d_magic; __le32 d_version; char d_serial[12]; __le32 d_ncylinders; __le32 d_ntracks; __le32 d_nsectors; __le32 d_secsize; __le32 d_part_start; __le32 d_unknown1[12]; __le32 d_alt_tbl; __le32 d_alt_len; __le32 d_phys_cyl; __le32 d_phys_trk; __le32 d_phys_sec; __le32 d_phys_bytes; __le32 d_unknown2; __le32 d_unknown3; __le32 d_pad[8]; struct unixware_vtoc { __le32 v_magic; __le32 v_version; char v_name[8]; __le16 v_nslices; __le16 v_unknown1; __le32 v_reserved[10]; v_slice[UNIXWARE_NUMSLICE]; } vtoc; };
MINIX_NR_SUBPARTITIONS  macro  include/linux/genhd.h  588  # define MINIX_NR_SUBPARTITIONS 4
ADDPART_FLAG_NONE  macro  include/linux/genhd.h  591  #define ADDPART_FLAG_NONE 0
ADDPART_FLAG_RAID  macro  include/linux/genhd.h  592  #define ADDPART_FLAG_RAID 1
ADDPART_FLAG_WHOLEDISK  macro  include/linux/genhd.h  593  #define ADDPART_FLAG_WHOLEDISK 2
blk_alloc_devt  prototype  include/linux/genhd.h  595  extern int blk_alloc_devt(struct hd_struct *part,dev_t *devt);
blk_free_devt  prototype  include/linux/genhd.h  596  extern void blk_free_devt(dev_t devt);
blk_lookup_devt  function  include/linux/genhd.h  715  static inline dev_t blk_lookup_devt(const char *name,int partno)
disk_name  prototype  include/linux/genhd.h  598  extern char *disk_name (struct gendisk *hd,int partno,char *buf);
disk_expand_part_tbl  prototype  include/linux/genhd.h  600  extern int disk_expand_part_tbl(struct gendisk *disk,int target);
rescan_partitions  prototype  include/linux/genhd.h  601  extern int rescan_partitions(struct gendisk *disk,struct block_device *bdev);
invalidate_partitions  prototype  include/linux/genhd.h  602  extern int invalidate_partitions(struct gendisk *disk,struct block_device *bdev);
add_partition  prototype  include/linux/genhd.h  603  extern struct hd_struct * __must_check add_partition(struct gendisk *disk,int partno, sector_t start,sector_t len, int flags,struct partition_meta_info
__delete_partition  prototype  include/linux/genhd.h  608  extern void __delete_partition(struct hd_struct *);
delete_partition  prototype  include/linux/genhd.h  609  extern void delete_partition(struct gendisk *,int);
printk_all_partitions  function  include/linux/genhd.h  713  static inline void printk_all_partitions(void) { }
alloc_disk_node  prototype  include/linux/genhd.h  612  extern struct gendisk *alloc_disk_node(int minors,int node_id);
alloc_disk  prototype  include/linux/genhd.h  613  extern struct gendisk *alloc_disk(int minors);
get_disk  prototype  include/linux/genhd.h  614  extern struct kobject *get_disk(struct gendisk *disk);
put_disk  prototype  include/linux/genhd.h  615  extern void put_disk(struct gendisk *disk);
blk_register_region  prototype  include/linux/genhd.h  616  extern void blk_register_region(dev_t devt,unsigned long range,struct module *module,struct kobject *(*probe)(dev_t, int *, void *),int (*lock)(dev_t, void *),void *data);
blk_unregister_region  prototype  include/linux/genhd.h  621  extern void blk_unregister_region(dev_t devt,unsigned long range);
part_size_show  prototype  include/linux/genhd.h  623  extern ssize_t part_size_show(struct device *dev,struct device_attribute *attr, char *buf);
part_stat_show  prototype  include/linux/genhd.h  625  extern ssize_t part_stat_show(struct device *dev,struct device_attribute *attr, char *buf);
part_inflight_show  prototype  include/linux/genhd.h  627  extern ssize_t part_inflight_show(struct device *dev,struct device_attribute *attr, char *buf);
part_fail_show  prototype  include/linux/genhd.h  630  extern ssize_t part_fail_show(struct device *dev,struct device_attribute *attr, char *buf);
part_fail_store  prototype  include/linux/genhd.h  632  extern ssize_t part_fail_store(struct device *dev,struct device_attribute *attr,const char *buf, size_t count);
hd_ref_init  function  include/linux/genhd.h  637  static inline void hd_ref_init(struct hd_struct *part)
hd_struct_get  function  include/linux/genhd.h  643  static inline void hd_struct_get(struct hd_struct *part)
hd_struct_try_get  function  include/linux/genhd.h  649  static inline int hd_struct_try_get(struct hd_struct *part)
hd_struct_put  function  include/linux/genhd.h  654  static inline void hd_struct_put(struct hd_struct *part)
part_nr_sects_read  function  include/linux/genhd.h  669  static inline sector_t part_nr_sects_read(struct hd_struct *part)
part_nr_sects_write  function  include/linux/genhd.h  696  static inline void part_nr_sects_write(struct hd_struct *part,sector_t size)
_LINUX_PAGEMAP_H  macro  include/linux/pagemap.h  2  #define _LINUX_PAGEMAP_H
mapping_flags  enum  include/linux/pagemap.h  22  enum mapping_flags { AS_EIO = __GFP_BITS_SHIFT + 0, AS_ENOSPC = __GFP_BITS_SHIFT + 1, AS_MM_ALL_LOCKS = __GFP_BITS_SHIFT + 2, AS_UNEVICTABLE = __GFP_BITS_SHIFT + 3, AS_BALLOON_MAP = __GFP_BITS_SHIFT + 4, };
mapping_set_error  function  include/linux/pagemap.h  30  static inline void mapping_set_error(struct address_space *mapping,int error)
mapping_set_unevictable  function  include/linux/pagemap.h  40  static inline void mapping_set_unevictable(struct address_space *mapping)
mapping_clear_unevictable  function  include/linux/pagemap.h  45  static inline void mapping_clear_unevictable(struct address_space *mapping)
mapping_unevictable  function  include/linux/pagemap.h  50  static inline int mapping_unevictable(struct address_space *mapping)
mapping_set_balloon  function  include/linux/pagemap.h  57  static inline void mapping_set_balloon(struct address_space *mapping)
mapping_clear_balloon  function  include/linux/pagemap.h  62  static inline void mapping_clear_balloon(struct address_space *mapping)
mapping_balloon  function  include/linux/pagemap.h  67  static inline int mapping_balloon(struct address_space *mapping)
mapping_gfp_mask  function  include/linux/pagemap.h  72  static inline gfp_t mapping_gfp_mask(struct address_space * mapping)
mapping_set_gfp_mask  function  include/linux/pagemap.h  81  static inline void mapping_set_gfp_mask(struct address_space *m,gfp_t mask)
PAGE_CACHE_SHIFT  macro  include/linux/pagemap.h  95  #define PAGE_CACHE_SHIFT PAGE_SHIFT
PAGE_CACHE_SIZE  macro  include/linux/pagemap.h  96  #define PAGE_CACHE_SIZE PAGE_SIZE
PAGE_CACHE_MASK  macro  include/linux/pagemap.h  97  #define PAGE_CACHE_MASK PAGE_MASK
PAGE_CACHE_ALIGN  macro  include/linux/pagemap.h  98  #define PAGE_CACHE_ALIGN(addr) (((addr)+PAGE_CACHE_SIZE-1)&PAGE_CACHE_MASK)
page_cache_get  macro  include/linux/pagemap.h  100  #define page_cache_get(page) get_page(page)
page_cache_release  macro  include/linux/pagemap.h  101  #define page_cache_release(page) put_page(page)
release_pages  prototype  include/linux/pagemap.h  102  void release_pages(struct page **pages,int nr,int cold);
page_cache_get_speculative  function  include/linux/pagemap.h  148  static inline int page_cache_get_speculative(struct page *page)
page_cache_add_speculative  function  include/linux/pagemap.h  186  static inline int page_cache_add_speculative(struct page *page,int count)
page_freeze_refs  function  include/linux/pagemap.h  206  static inline int page_freeze_refs(struct page *page,int count)
page_unfreeze_refs  function  include/linux/pagemap.h  211  static inline void page_unfreeze_refs(struct page *page,int count)
__page_cache_alloc  function  include/linux/pagemap.h  222  static inline struct page *__page_cache_alloc(gfp_t gfp)
page_cache_alloc  function  include/linux/pagemap.h  228  static inline struct page *page_cache_alloc(struct address_space *x)
page_cache_alloc_cold  function  include/linux/pagemap.h  233  static inline struct page *page_cache_alloc_cold(struct address_space *x)
page_cache_alloc_readahead  function  include/linux/pagemap.h  238  static inline struct page *page_cache_alloc_readahead(struct address_space *x)
find_get_page  prototype  include/linux/pagemap.h  246  extern struct page * find_get_page(struct address_space *mapping,pgoff_t index);
find_lock_page  prototype  include/linux/pagemap.h  248  extern struct page * find_lock_page(struct address_space *mapping,pgoff_t index);
find_or_create_page  prototype  include/linux/pagemap.h  250  extern struct page * find_or_create_page(struct address_space *mapping,pgoff_t index, gfp_t gfp_mask);
find_get_pages  prototype  include/linux/pagemap.h  252  unsigned find_get_pages(struct address_space *mapping,pgoff_t start,unsigned int nr_pages, struct page **pages);
find_get_pages_contig  prototype  include/linux/pagemap.h  254  unsigned find_get_pages_contig(struct address_space *mapping,pgoff_t start,unsigned int nr_pages, struct page **pages);
find_get_pages_tag  prototype  include/linux/pagemap.h  256  unsigned find_get_pages_tag(struct address_space *mapping,pgoff_t *index,int tag, unsigned int nr_pages, struct page **pages);
grab_cache_page_write_begin  prototype  include/linux/pagemap.h  259  struct page *grab_cache_page_write_begin(struct address_space *mapping,pgoff_t index, unsigned flags);
grab_cache_page  function  include/linux/pagemap.h  265  static inline struct page *grab_cache_page(struct address_space *mapping,pgoff_t index)
grab_cache_page_nowait  prototype  include/linux/pagemap.h  271  extern struct page * grab_cache_page_nowait(struct address_space *mapping,pgoff_t index);
read_cache_page_async  prototype  include/linux/pagemap.h  273  extern struct page * read_cache_page_async(struct address_space *mapping,pgoff_t index, filler_t *filler, void *data);
read_cache_page  prototype  include/linux/pagemap.h  275  extern struct page * read_cache_page(struct address_space *mapping,pgoff_t index, filler_t *filler, void *data);
read_cache_page_gfp  prototype  include/linux/pagemap.h  277  extern struct page * read_cache_page_gfp(struct address_space *mapping,pgoff_t index, gfp_t gfp_mask);
read_cache_pages  prototype  include/linux/pagemap.h  279  extern int read_cache_pages(struct address_space *mapping,struct list_head *pages, filler_t *filler, void *data);
read_mapping_page_async  function  include/linux/pagemap.h  282  static inline struct page *read_mapping_page_async(
read_mapping_page  function  include/linux/pagemap.h  290  static inline struct page *read_mapping_page(struct address_space *mapping,pgoff_t index, void *data)
page_offset  function  include/linux/pagemap.h  300  static inline loff_t page_offset(struct page *page)
page_file_offset  function  include/linux/pagemap.h  305  static inline loff_t page_file_offset(struct page *page)
linear_hugepage_index  prototype  include/linux/pagemap.h  310  extern pgoff_t linear_hugepage_index(struct vm_area_struct *vma,unsigned long address);
linear_page_index  function  include/linux/pagemap.h  313  static inline pgoff_t linear_page_index(struct vm_area_struct *vma,unsigned long address)
__lock_page  prototype  include/linux/pagemap.h  324  extern void __lock_page(struct page *page);
__lock_page_killable  prototype  include/linux/pagemap.h  325  extern int __lock_page_killable(struct page *page);
__lock_page_or_retry  prototype  include/linux/pagemap.h  326  extern int __lock_page_or_retry(struct page *page,struct mm_struct *mm,unsigned int flags);
unlock_page  prototype  include/linux/pagemap.h  328  extern void unlock_page(struct page *page);
__set_page_locked  function  include/linux/pagemap.h  330  static inline void __set_page_locked(struct page *page)
__clear_page_locked  function  include/linux/pagemap.h  335  static inline void __clear_page_locked(struct page *page)
trylock_page  function  include/linux/pagemap.h  340  static inline int trylock_page(struct page *page)
lock_page  function  include/linux/pagemap.h  348  static inline void lock_page(struct page *page)
lock_page_killable  function  include/linux/pagemap.h  360  static inline int lock_page_killable(struct page *page)
lock_page_or_retry  function  include/linux/pagemap.h  372  static inline int lock_page_or_retry(struct page *page,struct mm_struct *mm,unsigned int flags)
wait_on_page_bit  prototype  include/linux/pagemap.h  383  extern void wait_on_page_bit(struct page *page,int bit_nr);
wait_on_page_bit_killable  prototype  include/linux/pagemap.h  385  extern int wait_on_page_bit_killable(struct page *page,int bit_nr);
wait_on_page_locked_killable  function  include/linux/pagemap.h  387  static inline int wait_on_page_locked_killable(struct page *page)
wait_on_page_locked  function  include/linux/pagemap.h  401  static inline void wait_on_page_locked(struct page *page)
wait_on_page_writeback  function  include/linux/pagemap.h  410  static inline void wait_on_page_writeback(struct page *page)
end_page_writeback  prototype  include/linux/pagemap.h  416  extern void end_page_writeback(struct page *page);
add_page_wait_queue  prototype  include/linux/pagemap.h  421  extern void add_page_wait_queue(struct page *page,wait_queue_t *waiter);
fault_in_pages_writeable  function  include/linux/pagemap.h  429  static inline int fault_in_pages_writeable(char __user *uaddr,int size)
fault_in_pages_readable  function  include/linux/pagemap.h  455  static inline int fault_in_pages_readable(const char __user *uaddr,int size)
fault_in_multipages_writeable  function  include/linux/pagemap.h  482  static inline int fault_in_multipages_writeable(char __user *uaddr,int size)
fault_in_multipages_readable  function  include/linux/pagemap.h  509  static inline int fault_in_multipages_readable(const char __user *uaddr,int size)
add_to_page_cache_locked  prototype  include/linux/pagemap.h  536  int add_to_page_cache_locked(struct page *page,struct address_space *mapping,pgoff_t index, gfp_t gfp_mask);
add_to_page_cache_lru  prototype  include/linux/pagemap.h  538  int add_to_page_cache_lru(struct page *page,struct address_space *mapping,pgoff_t index, gfp_t gfp_mask);
delete_from_page_cache  prototype  include/linux/pagemap.h  540  extern void delete_from_page_cache(struct page *page);
__delete_from_page_cache  prototype  include/linux/pagemap.h  541  extern void __delete_from_page_cache(struct page *page);
replace_page_cache_page  prototype  include/linux/pagemap.h  542  int replace_page_cache_page(struct page *old,struct page *new,gfp_t gfp_mask);
add_to_page_cache  function  include/linux/pagemap.h  548  static inline int add_to_page_cache(struct page *page,struct address_space *mapping, pgoff_t offset, gfp_t gfp_mask)
_LINUX_BACKING_DEV_H  macro  include/linux/backing-dev.h  9  #define _LINUX_BACKING_DEV_H
bdi_state  enum  include/linux/backing-dev.h  29  enum bdi_state { BDI_pending, BDI_wb_alloc, BDI_async_congested, BDI_sync_congested, BDI_registered, BDI_writeback_running, BDI_unused, };
bdi_stat_item  enum  include/linux/backing-dev.h  41  enum bdi_stat_item { BDI_RECLAIMABLE, BDI_WRITEBACK, BDI_DIRTIED, BDI_WRITTEN, NR_BDI_STAT_ITEMS };
BDI_STAT_BATCH  macro  include/linux/backing-dev.h  49  #define BDI_STAT_BATCH (8*(1+ilog2(nr_cpu_ids)))
bdi_writeback  struct  include/linux/backing-dev.h  51  struct bdi_writeback { struct backing_dev_info *bdi; unsigned int nr; unsigned long last_old_flush; unsigned long last_active; struct task_struct *task; struct timer_list wakeup_timer; struct list_head b_dirty; struct list_head b_io; struct list_head b_more_io; spinlock_t list_lock; };
backing_dev_info  struct  include/linux/backing-dev.h  66  struct backing_dev_info { struct list_head bdi_list; unsigned long ra_pages; unsigned long state; unsigned int capabilities; congested_fn *congested_fn; void *congested_data; char *name; struct percpu_counter bdi_stat[NR_BDI_STAT_ITEMS]; unsigned long bw_time_stamp; unsigned long dirtied_stamp; unsigned long written_stamp; unsigned long write_bandwidth; unsigned long avg_write_bandwidth; unsigned long dirty_ratelimit; unsigned long balanced_dirty_ratelimit; struct fprop_local_percpu completions; int dirty_exceeded; unsigned int min_ratio; unsigned int max_ratio, max_prop_frac; struct bdi_writeback wb; spinlock_t wb_lock; struct list_head work_list; struct device *dev; struct timer_list laptop_mode_wb_timer; struct dentry *debug_dir; struct dentry *debug_stats; };
bdi_init  prototype  include/linux/backing-dev.h  114  int bdi_init(struct backing_dev_info *bdi);
bdi_destroy  prototype  include/linux/backing-dev.h  115  void bdi_destroy(struct backing_dev_info *bdi);
bdi_register  prototype  include/linux/backing-dev.h  118  int bdi_register(struct backing_dev_info *bdi,struct device *parent,const char *fmt, ...);
bdi_register_dev  prototype  include/linux/backing-dev.h  120  int bdi_register_dev(struct backing_dev_info *bdi,dev_t dev);
bdi_unregister  prototype  include/linux/backing-dev.h  121  void bdi_unregister(struct backing_dev_info *bdi);
bdi_setup_and_register  prototype  include/linux/backing-dev.h  122  int bdi_setup_and_register(struct backing_dev_info *,char *,unsigned int);
bdi_start_writeback  prototype  include/linux/backing-dev.h  123  void bdi_start_writeback(struct backing_dev_info *bdi,long nr_pages,enum wb_reason reason);
bdi_start_background_writeback  prototype  include/linux/backing-dev.h  125  void bdi_start_background_writeback(struct backing_dev_info *bdi);
bdi_writeback_thread  prototype  include/linux/backing-dev.h  126  int bdi_writeback_thread(void *data);
bdi_has_dirty_io  prototype  include/linux/backing-dev.h  127  int bdi_has_dirty_io(struct backing_dev_info *bdi);
bdi_wakeup_thread_delayed  prototype  include/linux/backing-dev.h  128  void bdi_wakeup_thread_delayed(struct backing_dev_info *bdi);
bdi_lock_two  prototype  include/linux/backing-dev.h  129  void bdi_lock_two(struct bdi_writeback *wb1,struct bdi_writeback *wb2);
wb_has_dirty_io  function  include/linux/backing-dev.h  135  static inline int wb_has_dirty_io(struct bdi_writeback *wb)
__add_bdi_stat  function  include/linux/backing-dev.h  142  static inline void __add_bdi_stat(struct backing_dev_info *bdi,enum bdi_stat_item item, s64 amount)
__inc_bdi_stat  function  include/linux/backing-dev.h  148  static inline void __inc_bdi_stat(struct backing_dev_info *bdi,enum bdi_stat_item item)
inc_bdi_stat  function  include/linux/backing-dev.h  154  static inline void inc_bdi_stat(struct backing_dev_info *bdi,enum bdi_stat_item item)
__dec_bdi_stat  function  include/linux/backing-dev.h  164  static inline void __dec_bdi_stat(struct backing_dev_info *bdi,enum bdi_stat_item item)
dec_bdi_stat  function  include/linux/backing-dev.h  170  static inline void dec_bdi_stat(struct backing_dev_info *bdi,enum bdi_stat_item item)
bdi_stat  function  include/linux/backing-dev.h  180  static inline s64 bdi_stat(struct backing_dev_info *bdi,enum bdi_stat_item item)
__bdi_stat_sum  function  include/linux/backing-dev.h  186  static inline s64 __bdi_stat_sum(struct backing_dev_info *bdi,enum bdi_stat_item item)
bdi_stat_sum  function  include/linux/backing-dev.h  192  static inline s64 bdi_stat_sum(struct backing_dev_info *bdi,enum bdi_stat_item item)
bdi_writeout_inc  prototype  include/linux/backing-dev.h  205  extern void bdi_writeout_inc(struct backing_dev_info *bdi);
bdi_stat_error  function  include/linux/backing-dev.h  210  static inline unsigned long bdi_stat_error(struct backing_dev_info *bdi)
bdi_set_min_ratio  prototype  include/linux/backing-dev.h  219  int bdi_set_min_ratio(struct backing_dev_info *bdi,unsigned int min_ratio);
bdi_set_max_ratio  prototype  include/linux/backing-dev.h  220  int bdi_set_max_ratio(struct backing_dev_info *bdi,unsigned int max_ratio);
BDI_CAP_NO_ACCT_DIRTY  macro  include/linux/backing-dev.h  248  #define BDI_CAP_NO_ACCT_DIRTY 0x00000001
BDI_CAP_NO_WRITEBACK  macro  include/linux/backing-dev.h  249  #define BDI_CAP_NO_WRITEBACK 0x00000002
BDI_CAP_MAP_COPY  macro  include/linux/backing-dev.h  250  #define BDI_CAP_MAP_COPY 0x00000004
BDI_CAP_MAP_DIRECT  macro  include/linux/backing-dev.h  251  #define BDI_CAP_MAP_DIRECT 0x00000008
BDI_CAP_READ_MAP  macro  include/linux/backing-dev.h  252  #define BDI_CAP_READ_MAP 0x00000010
BDI_CAP_WRITE_MAP  macro  include/linux/backing-dev.h  253  #define BDI_CAP_WRITE_MAP 0x00000020
BDI_CAP_EXEC_MAP  macro  include/linux/backing-dev.h  254  #define BDI_CAP_EXEC_MAP 0x00000040
BDI_CAP_NO_ACCT_WB  macro  include/linux/backing-dev.h  255  #define BDI_CAP_NO_ACCT_WB 0x00000080
BDI_CAP_SWAP_BACKED  macro  include/linux/backing-dev.h  256  #define BDI_CAP_SWAP_BACKED 0x00000100
BDI_CAP_VMFLAGS  macro  include/linux/backing-dev.h  258  #define BDI_CAP_VMFLAGS (BDI_CAP_READ_MAP | BDI_CAP_WRITE_MAP | BDI_CAP_EXEC_MAP)
BDI_CAP_NO_ACCT_AND_WRITEBACK  macro  include/linux/backing-dev.h  261  #define BDI_CAP_NO_ACCT_AND_WRITEBACK (BDI_CAP_NO_WRITEBACK | BDI_CAP_NO_ACCT_DIRTY | BDI_CAP_NO_ACCT_WB)
writeback_in_progress  prototype  include/linux/backing-dev.h  274  int writeback_in_progress(struct backing_dev_info *bdi);
bdi_congested  function  include/linux/backing-dev.h  276  static inline int bdi_congested(struct backing_dev_info *bdi,int bdi_bits)
bdi_read_congested  function  include/linux/backing-dev.h  283  static inline int bdi_read_congested(struct backing_dev_info *bdi)
bdi_write_congested  function  include/linux/backing-dev.h  288  static inline int bdi_write_congested(struct backing_dev_info *bdi)
bdi_rw_congested  function  include/linux/backing-dev.h  293  static inline int bdi_rw_congested(struct backing_dev_info *bdi)
clear_bdi_congested  prototype  include/linux/backing-dev.h  304  void clear_bdi_congested(struct backing_dev_info *bdi,int sync);
set_bdi_congested  prototype  include/linux/backing-dev.h  305  void set_bdi_congested(struct backing_dev_info *bdi,int sync);
congestion_wait  prototype  include/linux/backing-dev.h  306  long congestion_wait(int sync,long timeout);
wait_iff_congested  prototype  include/linux/backing-dev.h  307  long wait_iff_congested(struct zone *zone,int sync,long timeout);
pdflush_proc_obsolete  prototype  include/linux/backing-dev.h  308  int pdflush_proc_obsolete(struct ctl_table *table,int write,void __user *buffer, size_t *lenp, loff_t *ppos);
bdi_cap_writeback_dirty  function  include/linux/backing-dev.h  311  static inline bool bdi_cap_writeback_dirty(struct backing_dev_info *bdi)
bdi_cap_account_dirty  function  include/linux/backing-dev.h  316  static inline bool bdi_cap_account_dirty(struct backing_dev_info *bdi)
bdi_cap_account_writeback  function  include/linux/backing-dev.h  321  static inline bool bdi_cap_account_writeback(struct backing_dev_info *bdi)
bdi_cap_swap_backed  function  include/linux/backing-dev.h  328  static inline bool bdi_cap_swap_backed(struct backing_dev_info *bdi)
bdi_cap_flush_forker  function  include/linux/backing-dev.h  333  static inline bool bdi_cap_flush_forker(struct backing_dev_info *bdi)
mapping_cap_writeback_dirty  function  include/linux/backing-dev.h  338  static inline bool mapping_cap_writeback_dirty(struct address_space *mapping)
mapping_cap_account_dirty  function  include/linux/backing-dev.h  343  static inline bool mapping_cap_account_dirty(struct address_space *mapping)
mapping_cap_swap_backed  function  include/linux/backing-dev.h  348  static inline bool mapping_cap_swap_backed(struct address_space *mapping)
bdi_sched_wait  function  include/linux/backing-dev.h  353  static inline int bdi_sched_wait(void *word)
_LINUX_MEMPOOL_H  macro  include/linux/mempool.h  5  #define _LINUX_MEMPOOL_H
mempool_s  struct  include/linux/mempool.h  14  typedef struct mempool_s { spinlock_t lock; int min_nr; int curr_nr; void **elements; void *pool_data; mempool_alloc_t *alloc; mempool_free_t *free; wait_queue_head_t wait; } mempool_t;
mempool_t  struct  include/linux/mempool.h  14  typedef struct mempool_s { spinlock_t lock; int min_nr; int curr_nr; void **elements; void *pool_data; mempool_alloc_t *alloc; mempool_free_t *free; wait_queue_head_t wait; } mempool_t;
mempool_create  prototype  include/linux/mempool.h  26  extern mempool_t *mempool_create(int min_nr,mempool_alloc_t *alloc_fn,mempool_free_t *free_fn, void *pool_data);
mempool_create_node  prototype  include/linux/mempool.h  28  extern mempool_t *mempool_create_node(int min_nr,mempool_alloc_t *alloc_fn,mempool_free_t *free_fn, void *pool_data,gfp_t gfp_mask, int nid);
mempool_resize  prototype  include/linux/mempool.h  32  extern int mempool_resize(mempool_t *pool,int new_min_nr,gfp_t gfp_mask);
mempool_destroy  prototype  include/linux/mempool.h  33  extern void mempool_destroy(mempool_t *pool);
mempool_alloc  prototype  include/linux/mempool.h  34  extern void * mempool_alloc(mempool_t *pool,gfp_t gfp_mask);
mempool_free  prototype  include/linux/mempool.h  35  extern void mempool_free(void *element,mempool_t *pool);
mempool_alloc_slab  prototype  include/linux/mempool.h  41  void *mempool_alloc_slab(gfp_t gfp_mask,void *pool_data);
mempool_free_slab  prototype  include/linux/mempool.h  42  void mempool_free_slab(void *element,void *pool_data);
mempool_create_slab_pool  function  include/linux/mempool.h  44  mempool_create_slab_pool(int min_nr,struct kmem_cache *kc)
mempool_kmalloc  prototype  include/linux/mempool.h  54  void *mempool_kmalloc(gfp_t gfp_mask,void *pool_data);
mempool_kfree  prototype  include/linux/mempool.h  55  void mempool_kfree(void *element,void *pool_data);
mempool_create_kmalloc_pool  function  include/linux/mempool.h  56  static inline mempool_t *mempool_create_kmalloc_pool(int min_nr,size_t size)
mempool_alloc_pages  prototype  include/linux/mempool.h  66  void *mempool_alloc_pages(gfp_t gfp_mask,void *pool_data);
mempool_free_pages  prototype  include/linux/mempool.h  67  void mempool_free_pages(void *element,void *pool_data);
mempool_create_page_pool  function  include/linux/mempool.h  68  static inline mempool_t *mempool_create_page_pool(int min_nr,int order)
__LINUX_BIO_H  macro  include/linux/bio.h  21  #define __LINUX_BIO_H
BIO_DEBUG  macro  include/linux/bio.h  35  #define BIO_DEBUG
BIO_BUG_ON  macro  include/linux/bio.h  40  #define BIO_BUG_ON
BIO_MAX_PAGES  macro  include/linux/bio.h  43  #define BIO_MAX_PAGES 256
BIO_MAX_SIZE  macro  include/linux/bio.h  44  #define BIO_MAX_SIZE (BIO_MAX_PAGES << PAGE_CACHE_SHIFT)
BIO_MAX_SECTORS  macro  include/linux/bio.h  45  #define BIO_MAX_SECTORS (BIO_MAX_SIZE >> 9)
BIO_PRIO_SHIFT  macro  include/linux/bio.h  50  #define BIO_PRIO_SHIFT (8 * sizeof(unsigned long) - IOPRIO_BITS)
bio_prio  macro  include/linux/bio.h  51  #define bio_prio(bio) ((bio)->bi_rw >> BIO_PRIO_SHIFT)
bio_prio_valid  macro  include/linux/bio.h  52  #define bio_prio_valid(bio) ioprio_valid(bio_prio(bio))
bio_set_prio  macro  include/linux/bio.h  54  #define bio_set_prio(bio,prio) do { WARN_ON(prio >= (1 << IOPRIO_BITS)); (bio)->bi_rw &= ((1UL << BIO_PRIO_SHIFT) - 1); (bio)->bi_rw |= ((unsigned long) (prio) << BIO_PRIO_SHIFT); } while (0)
bio_iovec_idx  macro  include/linux/bio.h  64  #define bio_iovec_idx(bio,idx) (&((bio)->bi_io_vec[(idx)]))
bio_iovec  macro  include/linux/bio.h  65  #define bio_iovec(bio) bio_iovec_idx((bio),(bio)->bi_idx)
bio_page  macro  include/linux/bio.h  66  #define bio_page(bio) bio_iovec((bio))->bv_page
bio_offset  macro  include/linux/bio.h  67  #define bio_offset(bio) bio_iovec((bio))->bv_offset
bio_segments  macro  include/linux/bio.h  68  #define bio_segments(bio) ((bio)->bi_vcnt - (bio)->bi_idx)
bio_sectors  macro  include/linux/bio.h  69  #define bio_sectors(bio) ((bio)->bi_size >> 9)
bio_cur_bytes  function  include/linux/bio.h  71  static inline unsigned int bio_cur_bytes(struct bio *bio)
bio_data  function  include/linux/bio.h  79  static inline void *bio_data(struct bio *bio)
bio_has_allocated_vec  function  include/linux/bio.h  87  static inline int bio_has_allocated_vec(struct bio *bio)
bio_to_phys  macro  include/linux/bio.h  95  #define bio_to_phys(bio) (page_to_phys(bio_page((bio))) + (unsigned long) bio_offset((bio)))
bvec_to_phys  macro  include/linux/bio.h  96  #define bvec_to_phys(bv) (page_to_phys((bv)->bv_page) + (unsigned long) (bv)->bv_offset)
__bio_kmap_atomic  macro  include/linux/bio.h  104  #define __bio_kmap_atomic(bio,idx,kmtype) (kmap_atomic(bio_iovec_idx((bio), (idx))->bv_page) + bio_iovec_idx((bio), (idx))->bv_offset)
__bio_kunmap_atomic  macro  include/linux/bio.h  108  #define __bio_kunmap_atomic(addr,kmtype) kunmap_atomic(addr)
__BVEC_END  macro  include/linux/bio.h  114  #define __BVEC_END(bio) bio_iovec_idx((bio),(bio)->bi_vcnt - 1)
__BVEC_START  macro  include/linux/bio.h  115  #define __BVEC_START(bio) bio_iovec_idx((bio),(bio)->bi_idx)
__BIOVEC_PHYS_MERGEABLE  macro  include/linux/bio.h  118  #define __BIOVEC_PHYS_MERGEABLE(vec1,vec2) ((bvec_to_phys((vec1)) + (vec1)->bv_len) == bvec_to_phys((vec2)))
__BIO_SEG_BOUNDARY  macro  include/linux/bio.h  129  #define __BIO_SEG_BOUNDARY(addr1,addr2,mask) (((addr1) | (mask)) == (((addr2) - 1) | (mask)))
BIOVEC_SEG_BOUNDARY  macro  include/linux/bio.h  131  #define BIOVEC_SEG_BOUNDARY(q,b1,b2) __BIO_SEG_BOUNDARY(bvec_to_phys((b1)), bvec_to_phys((b2)) + (b2)->bv_len, queue_segment_boundary((q)))
BIO_SEG_BOUNDARY  macro  include/linux/bio.h  133  #define BIO_SEG_BOUNDARY(q,b1,b2) BIOVEC_SEG_BOUNDARY((q), __BVEC_END((b1)), __BVEC_START((b2)))
bio_io_error  macro  include/linux/bio.h  136  #define bio_io_error(bio) bio_endio((bio),-EIO)
__bio_for_each_segment  macro  include/linux/bio.h  142  #define __bio_for_each_segment(bvl,bio,i,start_idx) for (bvl = bio_iovec_idx((bio), (start_idx)), i = (start_idx); i < (bio)->bi_vcnt; bvl++, i++)
bio_for_each_segment  macro  include/linux/bio.h  147  #define bio_for_each_segment(bvl,bio,i) __bio_for_each_segment(bvl, bio, i, (bio)->bi_idx)
bio_get  macro  include/linux/bio.h  164  #define bio_get(bio) atomic_inc(&(bio)->bi_cnt)
bio_integrity_payload  struct  include/linux/bio.h  170  struct bio_integrity_payload { struct bio *bip_bio; sector_t bip_sector; void *bip_buf; bio_end_io_t *bip_end_io; unsigned int bip_size; unsigned short bip_slab; unsigned short bip_vcnt; unsigned short bip_idx; struct work_struct bip_work; struct bio_vec bip_vec[0]; };
bio_pair  struct  include/linux/bio.h  199  struct bio_pair { struct bio bio1, bio2; struct bio_vec bv1, bv2; struct bio_integrity_payload bip1, bip2; struct bio_vec iv1, iv2; atomic_t cnt; int error; };
bio_split  prototype  include/linux/bio.h  209  extern struct bio_pair *bio_split(struct bio *bi,int first_sectors);
bio_pair_release  prototype  include/linux/bio.h  210  extern void bio_pair_release(struct bio_pair *dbio);
bioset_create  prototype  include/linux/bio.h  212  extern struct bio_set *bioset_create(unsigned int,unsigned int);
bioset_free  prototype  include/linux/bio.h  213  extern void bioset_free(struct bio_set *);
bio_alloc_bioset  prototype  include/linux/bio.h  215  extern struct bio *bio_alloc_bioset(gfp_t,int,struct bio_set *);
bio_put  prototype  include/linux/bio.h  216  extern void bio_put(struct bio *);
__bio_clone  prototype  include/linux/bio.h  218  extern void __bio_clone(struct bio *,struct bio *);
bio_clone_bioset  prototype  include/linux/bio.h  219  extern struct bio *bio_clone_bioset(struct bio *,gfp_t,struct bio_set *bs);
bio_alloc  function  include/linux/bio.h  223  static inline struct bio *bio_alloc(gfp_t gfp_mask,unsigned int nr_iovecs)
bio_clone  function  include/linux/bio.h  228  static inline struct bio *bio_clone(struct bio *bio,gfp_t gfp_mask)
bio_kmalloc  function  include/linux/bio.h  233  static inline struct bio *bio_kmalloc(gfp_t gfp_mask,unsigned int nr_iovecs)
bio_clone_kmalloc  function  include/linux/bio.h  238  static inline struct bio *bio_clone_kmalloc(struct bio *bio,gfp_t gfp_mask)
bio_endio  prototype  include/linux/bio.h  244  extern void bio_endio(struct bio *,int);
bio_phys_segments  prototype  include/linux/bio.h  246  extern int bio_phys_segments(struct request_queue *,struct bio *);
bio_init  prototype  include/linux/bio.h  248  extern void bio_init(struct bio *);
bio_reset  prototype  include/linux/bio.h  249  extern void bio_reset(struct bio *);
bio_add_page  prototype  include/linux/bio.h  251  extern int bio_add_page(struct bio *,struct page *,unsigned int,unsigned int);
bio_add_pc_page  prototype  include/linux/bio.h  252  extern int bio_add_pc_page(struct request_queue *,struct bio *,struct page *,unsigned int, unsigned int);
bio_get_nr_vecs  prototype  include/linux/bio.h  254  extern int bio_get_nr_vecs(struct block_device *);
bio_sector_offset  prototype  include/linux/bio.h  255  extern sector_t bio_sector_offset(struct bio *,unsigned short,unsigned int);
bio_map_user  prototype  include/linux/bio.h  256  extern struct bio *bio_map_user(struct request_queue *,struct block_device *,unsigned long, unsigned int, int, gfp_t);
bio_map_user_iov  prototype  include/linux/bio.h  260  extern struct bio *bio_map_user_iov(struct request_queue *,struct block_device *,struct sg_iovec *, int, int, gfp_t);
bio_unmap_user  prototype  include/linux/bio.h  263  extern void bio_unmap_user(struct bio *);
bio_map_kern  prototype  include/linux/bio.h  264  extern struct bio *bio_map_kern(struct request_queue *,void *,unsigned int,gfp_t);
bio_copy_kern  prototype  include/linux/bio.h  266  extern struct bio *bio_copy_kern(struct request_queue *,void *,unsigned int,gfp_t, int);
bio_set_pages_dirty  prototype  include/linux/bio.h  268  extern void bio_set_pages_dirty(struct bio *bio);
bio_check_pages_dirty  prototype  include/linux/bio.h  269  extern void bio_check_pages_dirty(struct bio *bio);
bio_flush_dcache_pages  function  include/linux/bio.h  277  static inline void bio_flush_dcache_pages(struct bio *bi)
bio_copy_user  prototype  include/linux/bio.h  282  extern struct bio *bio_copy_user(struct request_queue *,struct rq_map_data *,unsigned long, unsigned int, int, gfp_t);
bio_copy_user_iov  prototype  include/linux/bio.h  284  extern struct bio *bio_copy_user_iov(struct request_queue *,struct rq_map_data *, struct sg_iovec *,int, int, gfp_t);
bio_uncopy_user  prototype  include/linux/bio.h  287  extern int bio_uncopy_user(struct bio *);
zero_fill_bio  prototype  include/linux/bio.h  288  void zero_fill_bio(struct bio *bio);
bvec_alloc_bs  prototype  include/linux/bio.h  289  extern struct bio_vec *bvec_alloc_bs(gfp_t,int,unsigned long *,struct bio_set *);
bvec_free_bs  prototype  include/linux/bio.h  290  extern void bvec_free_bs(struct bio_set *,struct bio_vec *,unsigned int);
bvec_nr_vecs  prototype  include/linux/bio.h  291  extern unsigned int bvec_nr_vecs(unsigned short idx);
bio_associate_current  function  include/linux/bio.h  297  static inline int bio_associate_current(struct bio *bio) { return -ENOENT; }
bio_disassociate_task  function  include/linux/bio.h  298  static inline void bio_disassociate_task(struct bio *bio) { }
BIO_POOL_SIZE  macro  include/linux/bio.h  307  #define BIO_POOL_SIZE 2
BIOVEC_NR_POOLS  macro  include/linux/bio.h  308  #define BIOVEC_NR_POOLS 6
BIOVEC_MAX_IDX  macro  include/linux/bio.h  309  #define BIOVEC_MAX_IDX (BIOVEC_NR_POOLS - 1)
bio_set  struct  include/linux/bio.h  311  struct bio_set { struct kmem_cache *bio_slab; unsigned int front_pad; mempool_t *bio_pool; mempool_t *bio_integrity_pool; mempool_t *bvec_pool; };
biovec_slab  struct  include/linux/bio.h  322  struct biovec_slab { int nr_vecs; char *name; struct kmem_cache *slab; };
BIO_SPLIT_ENTRIES  macro  include/linux/bio.h  332  #define BIO_SPLIT_ENTRIES 2
bvec_kmap_irq  function  include/linux/bio.h  364  static inline char *bvec_kmap_irq(struct bio_vec *bvec,unsigned long *flags)
bvec_kunmap_irq  function  include/linux/bio.h  369  static inline void bvec_kunmap_irq(char *buffer,unsigned long *flags)
__bio_kmap_irq  function  include/linux/bio.h  375  static inline char *__bio_kmap_irq(struct bio *bio,unsigned short idx,unsigned long *flags)
__bio_kunmap_irq  macro  include/linux/bio.h  380  #define __bio_kunmap_irq(buf,flags) bvec_kunmap_irq(buf,flags)
bio_kmap_irq  macro  include/linux/bio.h  382  #define bio_kmap_irq(bio,flags) __bio_kmap_irq((bio), (bio)->bi_idx, (flags))
bio_kunmap_irq  macro  include/linux/bio.h  384  #define bio_kunmap_irq(buf,flags) __bio_kunmap_irq(buf,flags)
bio_has_data  function  include/linux/bio.h  389  static inline bool bio_has_data(struct bio *bio)
bio_is_rw  function  include/linux/bio.h  397  static inline bool bio_is_rw(struct bio *bio)
bio_mergeable  function  include/linux/bio.h  408  static inline bool bio_mergeable(struct bio *bio)
bio_list  struct  include/linux/bio.h  423  struct bio_list { struct bio *head; struct bio *tail; };
bio_list_empty  function  include/linux/bio.h  428  static inline int bio_list_empty(const struct bio_list *bl)
bio_list_init  function  include/linux/bio.h  433  static inline void bio_list_init(struct bio_list *bl)
bio_list_for_each  macro  include/linux/bio.h  438  #define bio_list_for_each(bio,bl) for (bio = (bl)->head; bio; bio = bio->bi_next)
bio_list_size  function  include/linux/bio.h  441  static inline unsigned bio_list_size(const struct bio_list *bl)
bio_list_add  function  include/linux/bio.h  452  static inline void bio_list_add(struct bio_list *bl,struct bio *bio)
bio_list_add_head  function  include/linux/bio.h  464  static inline void bio_list_add_head(struct bio_list *bl,struct bio *bio)
bio_list_merge  function  include/linux/bio.h  474  static inline void bio_list_merge(struct bio_list *bl,struct bio_list *bl2)
bio_list_merge_head  function  include/linux/bio.h  487  static inline void bio_list_merge_head(struct bio_list *bl,struct bio_list *bl2)
bio_list_peek  function  include/linux/bio.h  501  static inline struct bio *bio_list_peek(struct bio_list *bl)
bio_list_pop  function  include/linux/bio.h  506  static inline struct bio *bio_list_pop(struct bio_list *bl)
bio_list_get  function  include/linux/bio.h  521  static inline struct bio *bio_list_get(struct bio_list *bl)
bip_vec_idx  macro  include/linux/bio.h  532  #define bip_vec_idx(bip,idx) (&(bip->bip_vec[(idx)]))
bip_vec  macro  include/linux/bio.h  533  #define bip_vec(bip) bip_vec_idx(bip,0)
__bip_for_each_vec  macro  include/linux/bio.h  535  #define __bip_for_each_vec(bvl,bip,i,start_idx) for (bvl = bip_vec_idx((bip), (start_idx)), i = (start_idx); i < (bip)->bip_vcnt; bvl++, i++)
bip_for_each_vec  macro  include/linux/bio.h  540  #define bip_for_each_vec(bvl,bip,i) __bip_for_each_vec(bvl, bip, i, (bip)->bip_idx)
bio_for_each_integrity_vec  macro  include/linux/bio.h  543  #define bio_for_each_integrity_vec(_bvl,_bio,_iter) for_each_bio(_bio) bip_for_each_vec(_bvl, _bio->bi_integrity, _iter)
bio_integrity  function  include/linux/bio.h  567  static inline int bio_integrity(struct bio *bio)
bio_integrity_alloc  prototype  include/linux/bio.h  549  extern struct bio_integrity_payload *bio_integrity_alloc(struct bio *,gfp_t,unsigned int);
bio_integrity_free  function  include/linux/bio.h  592  static inline void bio_integrity_free(struct bio *bio)
bio_integrity_add_page  prototype  include/linux/bio.h  551  extern int bio_integrity_add_page(struct bio *,struct page *,unsigned int,unsigned int);
bio_integrity_enabled  function  include/linux/bio.h  572  static inline int bio_integrity_enabled(struct bio *bio)
bio_integrity_set_tag  prototype  include/linux/bio.h  553  extern int bio_integrity_set_tag(struct bio *,void *,unsigned int);
bio_integrity_get_tag  prototype  include/linux/bio.h  554  extern int bio_integrity_get_tag(struct bio *,void *,unsigned int);
bio_integrity_prep  function  include/linux/bio.h  587  static inline int bio_integrity_prep(struct bio *bio)
bio_integrity_endio  prototype  include/linux/bio.h  556  extern void bio_integrity_endio(struct bio *,int);
bio_integrity_advance  function  include/linux/bio.h  609  static inline void bio_integrity_advance(struct bio *bio,unsigned int bytes_done)
bio_integrity_trim  function  include/linux/bio.h  615  static inline void bio_integrity_trim(struct bio *bio,unsigned int offset,unsigned int sectors)
bio_integrity_split  function  include/linux/bio.h  603  static inline void bio_integrity_split(struct bio *bio,struct bio_pair *bp,int sectors)
bio_integrity_clone  function  include/linux/bio.h  597  static inline int bio_integrity_clone(struct bio *bio,struct bio *bio_src,gfp_t gfp_mask)
bioset_integrity_create  function  include/linux/bio.h  577  static inline int bioset_integrity_create(struct bio_set *bs,int pool_size)
bioset_integrity_free  function  include/linux/bio.h  582  static inline void bioset_integrity_free (struct bio_set *bs)
bio_integrity_init  function  include/linux/bio.h  621  static inline void bio_integrity_init(void)
BSG_H  macro  include/linux/bsg.h  2  #define BSG_H
bsg_class_device  struct  include/linux/bsg.h  8  struct bsg_class_device { struct device *class_dev; struct device *parent; int minor; struct request_queue *queue; struct kref ref; void (*release)(struct device *); };
bsg_register_queue  function  include/linux/bsg.h  22  static inline int bsg_register_queue(struct request_queue *q,struct device *parent, const char *name,void (*release)(struct device *))
bsg_unregister_queue  function  include/linux/bsg.h  28  static inline void bsg_unregister_queue(struct request_queue *q)
_LINUX_ELEVATOR_H  macro  include/linux/elevator.h  2  #define _LINUX_ELEVATOR_H
elevator_ops  struct  include/linux/elevator.h  40  struct elevator_ops { elevator_merge_fn *elevator_merge_fn; elevator_merged_fn *elevator_merged_fn; elevator_merge_req_fn *elevator_merge_req_fn; elevator_allow_merge_fn *elevator_allow_merge_fn; elevator_bio_merged_fn *elevator_bio_merged_fn; elevator_dispatch_fn *elevator_dispatch_fn; elevator_add_req_fn *elevator_add_req_fn; elevator_activate_req_fn *elevator_activate_req_fn; elevator_deactivate_req_fn *elevator_deactivate_req_fn; elevator_completed_req_fn *elevator_completed_req_fn; elevator_request_list_fn *elevator_former_req_fn; elevator_request_list_fn *elevator_latter_req_fn; elevator_init_icq_fn *elevator_init_icq_fn; elevator_exit_icq_fn *elevator_exit_icq_fn; elevator_set_req_fn *elevator_set_req_fn; elevator_put_req_fn *elevator_put_req_fn; elevator_may_queue_fn *elevator_may_queue_fn; elevator_init_fn *elevator_init_fn; elevator_exit_fn *elevator_exit_fn; };
ELV_NAME_MAX  macro  include/linux/elevator.h  70  #define ELV_NAME_MAX (16)
elv_fs_entry  struct  include/linux/elevator.h  72  struct elv_fs_entry { struct attribute attr; ssize_t (*show)(struct elevator_queue *, char *); ssize_t (*store)(struct elevator_queue *, const char *, size_t); };
elevator_type  struct  include/linux/elevator.h  81  struct elevator_type { struct kmem_cache *icq_cache; struct elevator_ops ops; size_t icq_size; size_t icq_align; struct elv_fs_entry *elevator_attrs; char elevator_name[ELV_NAME_MAX]; struct module *elevator_owner; char icq_cache_name[ELV_NAME_MAX + 5]; struct list_head list; };
elevator_queue  struct  include/linux/elevator.h  102  struct elevator_queue { struct elevator_type *type; void *elevator_data; struct kobject kobj; struct mutex sysfs_lock; struct hlist_head *hash; unsigned int registered:1; };
elv_dispatch_sort  prototype  include/linux/elevator.h  115  extern void elv_dispatch_sort(struct request_queue *,struct request *);
elv_dispatch_add_tail  prototype  include/linux/elevator.h  116  extern void elv_dispatch_add_tail(struct request_queue *,struct request *);
elv_add_request  prototype  include/linux/elevator.h  117  extern void elv_add_request(struct request_queue *,struct request *,int);
__elv_add_request  prototype  include/linux/elevator.h  118  extern void __elv_add_request(struct request_queue *,struct request *,int);
elv_merge  prototype  include/linux/elevator.h  119  extern int elv_merge(struct request_queue *,struct request **,struct bio *);
elv_merge_requests  prototype  include/linux/elevator.h  120  extern void elv_merge_requests(struct request_queue *,struct request *,struct request *);
elv_merged_request  prototype  include/linux/elevator.h  122  extern void elv_merged_request(struct request_queue *,struct request *,int);
elv_bio_merged  prototype  include/linux/elevator.h  123  extern void elv_bio_merged(struct request_queue *q,struct request *,struct bio *);
elv_requeue_request  prototype  include/linux/elevator.h  125  extern void elv_requeue_request(struct request_queue *,struct request *);
elv_former_request  prototype  include/linux/elevator.h  126  extern struct request *elv_former_request(struct request_queue *,struct request *);
elv_latter_request  prototype  include/linux/elevator.h  127  extern struct request *elv_latter_request(struct request_queue *,struct request *);
elv_register_queue  prototype  include/linux/elevator.h  128  extern int elv_register_queue(struct request_queue *q);
elv_unregister_queue  prototype  include/linux/elevator.h  129  extern void elv_unregister_queue(struct request_queue *q);
elv_may_queue  prototype  include/linux/elevator.h  130  extern int elv_may_queue(struct request_queue *,int);
elv_abort_queue  prototype  include/linux/elevator.h  131  extern void elv_abort_queue(struct request_queue *);
elv_completed_request  prototype  include/linux/elevator.h  132  extern void elv_completed_request(struct request_queue *,struct request *);
elv_set_request  prototype  include/linux/elevator.h  133  extern int elv_set_request(struct request_queue *q,struct request *rq,struct bio *bio, gfp_t gfp_mask);
elv_put_request  prototype  include/linux/elevator.h  135  extern void elv_put_request(struct request_queue *,struct request *);
elv_drain_elevator  prototype  include/linux/elevator.h  136  extern void elv_drain_elevator(struct request_queue *);
elv_register  prototype  include/linux/elevator.h  141  extern int elv_register(struct elevator_type *);
elv_unregister  prototype  include/linux/elevator.h  142  extern void elv_unregister(struct elevator_type *);
elv_iosched_show  prototype  include/linux/elevator.h  147  extern ssize_t elv_iosched_show(struct request_queue *,char *);
elv_iosched_store  prototype  include/linux/elevator.h  148  extern ssize_t elv_iosched_store(struct request_queue *,const char *,size_t);
elevator_init  prototype  include/linux/elevator.h  150  extern int elevator_init(struct request_queue *,char *);
elevator_exit  prototype  include/linux/elevator.h  151  extern void elevator_exit(struct elevator_queue *);
elevator_change  prototype  include/linux/elevator.h  152  extern int elevator_change(struct request_queue *,const char *);
elv_rq_merge_ok  prototype  include/linux/elevator.h  153  extern bool elv_rq_merge_ok(struct request *,struct bio *);
elv_rb_former_request  prototype  include/linux/elevator.h  158  extern struct request *elv_rb_former_request(struct request_queue *,struct request *);
elv_rb_latter_request  prototype  include/linux/elevator.h  159  extern struct request *elv_rb_latter_request(struct request_queue *,struct request *);
elv_rb_add  prototype  include/linux/elevator.h  164  extern void elv_rb_add(struct rb_root *,struct request *);
elv_rb_del  prototype  include/linux/elevator.h  165  extern void elv_rb_del(struct rb_root *,struct request *);
elv_rb_find  prototype  include/linux/elevator.h  166  extern struct request *elv_rb_find(struct rb_root *,sector_t);
ELEVATOR_NO_MERGE  macro  include/linux/elevator.h  171  #define ELEVATOR_NO_MERGE 0
ELEVATOR_FRONT_MERGE  macro  include/linux/elevator.h  172  #define ELEVATOR_FRONT_MERGE 1
ELEVATOR_BACK_MERGE  macro  include/linux/elevator.h  173  #define ELEVATOR_BACK_MERGE 2
ELEVATOR_INSERT_FRONT  macro  include/linux/elevator.h  178  #define ELEVATOR_INSERT_FRONT 1
ELEVATOR_INSERT_BACK  macro  include/linux/elevator.h  179  #define ELEVATOR_INSERT_BACK 2
ELEVATOR_INSERT_SORT  macro  include/linux/elevator.h  180  #define ELEVATOR_INSERT_SORT 3
ELEVATOR_INSERT_REQUEUE  macro  include/linux/elevator.h  181  #define ELEVATOR_INSERT_REQUEUE 4
ELEVATOR_INSERT_FLUSH  macro  include/linux/elevator.h  182  #define ELEVATOR_INSERT_FLUSH 5
ELEVATOR_INSERT_SORT_MERGE  macro  include/linux/elevator.h  183  #define ELEVATOR_INSERT_SORT_MERGE 6
rq_end_sector  macro  include/linux/elevator.h  194  #define rq_end_sector(rq) (blk_rq_pos(rq) + blk_rq_sectors(rq))
rb_entry_rq  macro  include/linux/elevator.h  195  #define rb_entry_rq(node) rb_entry((node),struct request,rb_node)
rq_fifo_time  macro  include/linux/elevator.h  201  #define rq_fifo_time(rq) ((unsigned long) (rq)->csd.list.next)
rq_set_fifo_time  macro  include/linux/elevator.h  202  #define rq_set_fifo_time(rq,exp) ((rq)->csd.list.next = (void *) (exp))
rq_entry_fifo  macro  include/linux/elevator.h  203  #define rq_entry_fifo(ptr) list_entry((ptr),struct request,queuelist)
rq_fifo_clear  macro  include/linux/elevator.h  204  #define rq_fifo_clear(rq) do { list_del_init(&(rq)->queuelist); INIT_LIST_HEAD(&(rq)->csd.list); } while (0)
_LINUX_BH_H  macro  include/linux/bottom_half.h  2  #define _LINUX_BH_H
local_bh_disable  prototype  include/linux/bottom_half.h  4  extern void local_bh_disable(void);
_local_bh_enable  prototype  include/linux/bottom_half.h  5  extern void _local_bh_enable(void);
local_bh_enable  prototype  include/linux/bottom_half.h  6  extern void local_bh_enable(void);
local_bh_enable_ip  prototype  include/linux/bottom_half.h  7  extern void local_bh_enable_ip(unsigned long ip);
_ASM_X86_BARRIER_H  macro  arch/x86/include/asm/barrier.h  2  #define _ASM_X86_BARRIER_H
mb  macro  arch/x86/include/asm/barrier.h  22  #define mb() asm volatile("mfence":::"memory")
rmb  macro  arch/x86/include/asm/barrier.h  23  #define rmb() asm volatile("lfence":::"memory")
wmb  macro  arch/x86/include/asm/barrier.h  24  #define wmb() asm volatile("sfence" ::: "memory")
read_barrier_depends  macro  arch/x86/include/asm/barrier.h  79  #define read_barrier_depends() do { } while (0)
smp_mb  macro  arch/x86/include/asm/barrier.h  96  #define smp_mb() barrier()
smp_rmb  macro  arch/x86/include/asm/barrier.h  97  #define smp_rmb() barrier()
smp_wmb  macro  arch/x86/include/asm/barrier.h  98  #define smp_wmb() barrier()
smp_read_barrier_depends  macro  arch/x86/include/asm/barrier.h  99  #define smp_read_barrier_depends() do { } while (0)
set_mb  macro  arch/x86/include/asm/barrier.h  100  #define set_mb(var,value) do { var = value; barrier(); } while (0)
rdtsc_barrier  function  arch/x86/include/asm/barrier.h  110  static __always_inline void rdtsc_barrier(void)
_ASM_X86_SPINLOCK_H  macro  arch/x86/include/asm/spinlock.h  2  #define _ASM_X86_SPINLOCK_H
LOCK_PTR_REG  macro  arch/x86/include/asm/spinlock.h  23  # define LOCK_PTR_REG "D"
UNLOCK_LOCK_PREFIX  macro  arch/x86/include/asm/spinlock.h  34  # define UNLOCK_LOCK_PREFIX
__ticket_spin_lock  function  arch/x86/include/asm/spinlock.h  50  static __always_inline void __ticket_spin_lock(arch_spinlock_t *lock)
__ticket_spin_trylock  function  arch/x86/include/asm/spinlock.h  65  static __always_inline int __ticket_spin_trylock(arch_spinlock_t *lock)
__ticket_spin_unlock  function  arch/x86/include/asm/spinlock.h  79  static __always_inline void __ticket_spin_unlock(arch_spinlock_t *lock)
__ticket_spin_is_locked  function  arch/x86/include/asm/spinlock.h  84  static inline int __ticket_spin_is_locked(arch_spinlock_t *lock)
__ticket_spin_is_contended  function  arch/x86/include/asm/spinlock.h  91  static inline int __ticket_spin_is_contended(arch_spinlock_t *lock)
arch_spin_is_locked  macro  include/linux/spinlock_up.h  69  #define arch_spin_is_locked(lock) ((void)(lock),0)
arch_spin_is_contended  macro  include/linux/spinlock_up.h  77  #define arch_spin_is_contended(lock) (((void)(lock),0))
arch_spin_lock  macro  include/linux/spinlock_up.h  71  # define arch_spin_lock(lock) do { barrier(); (void)(lock); } while (0)
arch_spin_trylock  macro  include/linux/spinlock_up.h  74  # define arch_spin_trylock(lock) ({ barrier(); (void)(lock); 1; })
arch_spin_unlock  macro  include/linux/spinlock_up.h  73  # define arch_spin_unlock(lock) do { barrier(); (void)(lock); } while (0)
arch_spin_lock_flags  macro  include/linux/spinlock_up.h  72  # define arch_spin_lock_flags(lock,flags) do { barrier(); (void)(lock); } while (0)
arch_spin_unlock_wait  macro  include/linux/spinlock_up.h  82  #define arch_spin_unlock_wait(lock) do { cpu_relax(); } while (arch_spin_is_locked(lock))
arch_read_can_lock  macro  include/linux/spinlock_up.h  79  #define arch_read_can_lock(lock) (((void)(lock),1))
arch_write_can_lock  macro  include/linux/spinlock_up.h  80  #define arch_write_can_lock(lock) (((void)(lock),1))
arch_read_lock  macro  include/linux/spinlock_up.h  61  #define arch_read_lock(lock) do { barrier(); (void)(lock); } while (0)
arch_write_lock  macro  include/linux/spinlock_up.h  62  #define arch_write_lock(lock) do { barrier(); (void)(lock); } while (0)
arch_read_trylock  macro  include/linux/spinlock_up.h  63  #define arch_read_trylock(lock) ({ barrier(); (void)(lock); 1; })
arch_write_trylock  macro  include/linux/spinlock_up.h  64  #define arch_write_trylock(lock) ({ barrier(); (void)(lock); 1; })
arch_read_unlock  macro  include/linux/spinlock_up.h  65  #define arch_read_unlock(lock) do { barrier(); (void)(lock); } while (0)
arch_write_unlock  macro  include/linux/spinlock_up.h  66  #define arch_write_unlock(lock) do { barrier(); (void)(lock); } while (0)
arch_read_lock_flags  macro  arch/x86/include/asm/spinlock.h  223  #define arch_read_lock_flags(lock,flags) arch_read_lock(lock)
arch_write_lock_flags  macro  arch/x86/include/asm/spinlock.h  224  #define arch_write_lock_flags(lock,flags) arch_write_lock(lock)
READ_LOCK_SIZE  macro  arch/x86/include/asm/spinlock.h  226  #undef READ_LOCK_SIZE
READ_LOCK_ATOMIC  macro  arch/x86/include/asm/spinlock.h  227  #undef READ_LOCK_ATOMIC
WRITE_LOCK_ADD  macro  arch/x86/include/asm/spinlock.h  228  #undef WRITE_LOCK_ADD
WRITE_LOCK_SUB  macro  arch/x86/include/asm/spinlock.h  229  #undef WRITE_LOCK_SUB
WRITE_LOCK_CMP  macro  arch/x86/include/asm/spinlock.h  230  #undef WRITE_LOCK_CMP
arch_spin_relax  macro  arch/x86/include/asm/spinlock.h  232  #define arch_spin_relax(lock) cpu_relax()
arch_read_relax  macro  arch/x86/include/asm/spinlock.h  233  #define arch_read_relax(lock) cpu_relax()
arch_write_relax  macro  arch/x86/include/asm/spinlock.h  234  #define arch_write_relax(lock) cpu_relax()
ARCH_HAS_SMP_MB_AFTER_LOCK  macro  arch/x86/include/asm/spinlock.h  238  #define ARCH_HAS_SMP_MB_AFTER_LOCK
__LINUX_SPINLOCK_UP_H  macro  include/linux/spinlock_up.h  2  #define __LINUX_SPINLOCK_UP_H
__LINUX_RWLOCK_H  macro  include/linux/rwlock.h  2  #define __LINUX_RWLOCK_H
__rwlock_init  prototype  include/linux/rwlock.h  18  extern void __rwlock_init(rwlock_t *lock,const char *name,struct lock_class_key *key);
rwlock_init  macro  include/linux/rwlock.h  27  # define rwlock_init(lock) do { *(lock) = __RW_LOCK_UNLOCKED(lock); } while (0)
do_raw_read_lock_flags  macro  include/linux/rwlock.h  42  # define do_raw_read_lock_flags(lock,flags) do {__acquire(lock); arch_read_lock_flags(&(lock)->raw_lock, *(flags)); } while (0)
do_raw_read_trylock  macro  include/linux/rwlock.h  44  # define do_raw_read_trylock(rwlock) arch_read_trylock(&(rwlock)->raw_lock)
do_raw_write_lock_flags  macro  include/linux/rwlock.h  47  # define do_raw_write_lock_flags(lock,flags) do {__acquire(lock); arch_write_lock_flags(&(lock)->raw_lock, *(flags)); } while (0)
do_raw_write_trylock  macro  include/linux/rwlock.h  49  # define do_raw_write_trylock(rwlock) arch_write_trylock(&(rwlock)->raw_lock)
do_raw_read_lock  macro  include/linux/rwlock.h  41  # define do_raw_read_lock(rwlock) do {__acquire(lock); arch_read_lock(&(rwlock)->raw_lock); } while (0)
do_raw_read_unlock  macro  include/linux/rwlock.h  45  # define do_raw_read_unlock(rwlock) do {arch_read_unlock(&(rwlock)->raw_lock); __release(lock); } while (0)
do_raw_write_lock  macro  include/linux/rwlock.h  46  # define do_raw_write_lock(rwlock) do {__acquire(lock); arch_write_lock(&(rwlock)->raw_lock); } while (0)
do_raw_write_unlock  macro  include/linux/rwlock.h  50  # define do_raw_write_unlock(rwlock) do {arch_write_unlock(&(rwlock)->raw_lock); __release(lock); } while (0)
read_can_lock  macro  include/linux/rwlock.h  53  #define read_can_lock(rwlock) arch_read_can_lock(&(rwlock)->raw_lock)
write_can_lock  macro  include/linux/rwlock.h  54  #define write_can_lock(rwlock) arch_write_can_lock(&(rwlock)->raw_lock)
read_trylock  macro  include/linux/rwlock.h  61  #define read_trylock(lock) __cond_lock(lock,_raw_read_trylock(lock))
write_trylock  macro  include/linux/rwlock.h  62  #define write_trylock(lock) __cond_lock(lock,_raw_write_trylock(lock))
write_lock  macro  include/linux/rwlock.h  64  #define write_lock(lock) _raw_write_lock(lock)
read_lock  macro  include/linux/rwlock.h  65  #define read_lock(lock) _raw_read_lock(lock)
read_lock_irqsave  macro  include/linux/rwlock.h  82  #define read_lock_irqsave(lock,flags) do { typecheck(unsigned long, flags); _raw_read_lock_irqsave(lock, flags); } while (0)
write_lock_irqsave  macro  include/linux/rwlock.h  87  #define write_lock_irqsave(lock,flags) do { typecheck(unsigned long, flags); _raw_write_lock_irqsave(lock, flags); } while (0)
read_lock_irq  macro  include/linux/rwlock.h  95  #define read_lock_irq(lock) _raw_read_lock_irq(lock)
read_lock_bh  macro  include/linux/rwlock.h  96  #define read_lock_bh(lock) _raw_read_lock_bh(lock)
write_lock_irq  macro  include/linux/rwlock.h  97  #define write_lock_irq(lock) _raw_write_lock_irq(lock)
write_lock_bh  macro  include/linux/rwlock.h  98  #define write_lock_bh(lock) _raw_write_lock_bh(lock)
read_unlock  macro  include/linux/rwlock.h  99  #define read_unlock(lock) _raw_read_unlock(lock)
write_unlock  macro  include/linux/rwlock.h  100  #define write_unlock(lock) _raw_write_unlock(lock)
read_unlock_irq  macro  include/linux/rwlock.h  101  #define read_unlock_irq(lock) _raw_read_unlock_irq(lock)
write_unlock_irq  macro  include/linux/rwlock.h  102  #define write_unlock_irq(lock) _raw_write_unlock_irq(lock)
read_unlock_irqrestore  macro  include/linux/rwlock.h  104  #define read_unlock_irqrestore(lock,flags) do { typecheck(unsigned long, flags); _raw_read_unlock_irqrestore(lock, flags); } while (0)
read_unlock_bh  macro  include/linux/rwlock.h  109  #define read_unlock_bh(lock) _raw_read_unlock_bh(lock)
write_unlock_irqrestore  macro  include/linux/rwlock.h  111  #define write_unlock_irqrestore(lock,flags) do { typecheck(unsigned long, flags); _raw_write_unlock_irqrestore(lock, flags); } while (0)
write_unlock_bh  macro  include/linux/rwlock.h  116  #define write_unlock_bh(lock) _raw_write_unlock_bh(lock)
write_trylock_irqsave  macro  include/linux/rwlock.h  118  #define write_trylock_irqsave(lock,flags) ({ local_irq_save(flags); write_trylock(lock) ? 1 : ({ local_irq_restore(flags); 0; }); })
__LINUX_SPINLOCK_API_SMP_H  macro  include/linux/spinlock_api_smp.h  2  #define __LINUX_SPINLOCK_API_SMP_H
in_lock_functions  macro  include/linux/spinlock_api_up.h  17  #define in_lock_functions(ADDR) 0
assert_raw_spin_locked  macro  include/linux/spinlock_api_up.h  19  #define assert_raw_spin_locked(lock) do { (void)(lock); } while (0)
_raw_spin_trylock  macro  include/linux/spinlock_api_up.h  65  #define _raw_spin_trylock(lock) ({ __LOCK(lock); 1; })
_raw_spin_trylock_bh  macro  include/linux/spinlock_api_up.h  68  #define _raw_spin_trylock_bh(lock) ({ __LOCK_BH(lock); 1; })
_raw_spin_lock  macro  include/linux/spinlock_api_up.h  52  #define _raw_spin_lock(lock) __LOCK(lock)
_raw_spin_lock_bh  macro  include/linux/spinlock_api_up.h  56  #define _raw_spin_lock_bh(lock) __LOCK_BH(lock)
_raw_spin_lock_irq  macro  include/linux/spinlock_api_up.h  59  #define _raw_spin_lock_irq(lock) __LOCK_IRQ(lock)
_raw_spin_lock_irqsave  macro  include/linux/spinlock_api_up.h  62  #define _raw_spin_lock_irqsave(lock,flags) __LOCK_IRQSAVE(lock,flags)
_raw_spin_unlock  macro  include/linux/spinlock_api_up.h  69  #define _raw_spin_unlock(lock) __UNLOCK(lock)
_raw_spin_unlock_bh  macro  include/linux/spinlock_api_up.h  72  #define _raw_spin_unlock_bh(lock) __UNLOCK_BH(lock)
_raw_spin_unlock_irq  macro  include/linux/spinlock_api_up.h  75  #define _raw_spin_unlock_irq(lock) __UNLOCK_IRQ(lock)
_raw_spin_unlock_irqrestore  macro  include/linux/spinlock_api_up.h  78  #define _raw_spin_unlock_irqrestore(lock,flags) __UNLOCK_IRQRESTORE(lock, flags)
__raw_spin_trylock  function  include/linux/spinlock_api_smp.h  86  static inline int __raw_spin_trylock(raw_spinlock_t *lock)
__raw_spin_lock_irqsave  function  include/linux/spinlock_api_smp.h  104  static inline unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
__raw_spin_lock_irq  function  include/linux/spinlock_api_smp.h  124  static inline void __raw_spin_lock_irq(raw_spinlock_t *lock)
__raw_spin_lock_bh  function  include/linux/spinlock_api_smp.h  132  static inline void __raw_spin_lock_bh(raw_spinlock_t *lock)
__raw_spin_lock  function  include/linux/spinlock_api_smp.h  140  static inline void __raw_spin_lock(raw_spinlock_t *lock)
__raw_spin_unlock  function  include/linux/spinlock_api_smp.h  149  static inline void __raw_spin_unlock(raw_spinlock_t *lock)
__raw_spin_unlock_irqrestore  function  include/linux/spinlock_api_smp.h  156  static inline void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,unsigned long flags)
__raw_spin_unlock_irq  function  include/linux/spinlock_api_smp.h  165  static inline void __raw_spin_unlock_irq(raw_spinlock_t *lock)
__raw_spin_unlock_bh  function  include/linux/spinlock_api_smp.h  173  static inline void __raw_spin_unlock_bh(raw_spinlock_t *lock)
__raw_spin_trylock_bh  function  include/linux/spinlock_api_smp.h  181  static inline int __raw_spin_trylock_bh(raw_spinlock_t *lock)
__LINUX_SPINLOCK_API_UP_H  macro  include/linux/spinlock_api_up.h  2  #define __LINUX_SPINLOCK_API_UP_H
__LOCK  macro  include/linux/spinlock_api_up.h  27  #define __LOCK(lock) do { preempt_disable(); __acquire(lock); (void)(lock); } while (0)
__LOCK_BH  macro  include/linux/spinlock_api_up.h  30  #define __LOCK_BH(lock) do { local_bh_disable(); __LOCK(lock); } while (0)
__LOCK_IRQ  macro  include/linux/spinlock_api_up.h  33  #define __LOCK_IRQ(lock) do { local_irq_disable(); __LOCK(lock); } while (0)
__LOCK_IRQSAVE  macro  include/linux/spinlock_api_up.h  36  #define __LOCK_IRQSAVE(lock,flags) do { local_irq_save(flags); __LOCK(lock); } while (0)
__UNLOCK  macro  include/linux/spinlock_api_up.h  39  #define __UNLOCK(lock) do { preempt_enable(); __release(lock); (void)(lock); } while (0)
__UNLOCK_BH  macro  include/linux/spinlock_api_up.h  42  #define __UNLOCK_BH(lock) do { preempt_enable_no_resched(); local_bh_enable(); __release(lock); (void)(lock); } while (0)
__UNLOCK_IRQ  macro  include/linux/spinlock_api_up.h  46  #define __UNLOCK_IRQ(lock) do { local_irq_enable(); __UNLOCK(lock); } while (0)
__UNLOCK_IRQRESTORE  macro  include/linux/spinlock_api_up.h  49  #define __UNLOCK_IRQRESTORE(lock,flags) do { local_irq_restore(flags); __UNLOCK(lock); } while (0)
_raw_spin_lock_nested  macro  include/linux/spinlock_api_up.h  53  #define _raw_spin_lock_nested(lock,subclass) __LOCK(lock)
_raw_read_lock  macro  include/linux/spinlock_api_up.h  54  #define _raw_read_lock(lock) __LOCK(lock)
_raw_write_lock  macro  include/linux/spinlock_api_up.h  55  #define _raw_write_lock(lock) __LOCK(lock)
_raw_read_lock_bh  macro  include/linux/spinlock_api_up.h  57  #define _raw_read_lock_bh(lock) __LOCK_BH(lock)
_raw_write_lock_bh  macro  include/linux/spinlock_api_up.h  58  #define _raw_write_lock_bh(lock) __LOCK_BH(lock)
_raw_read_lock_irq  macro  include/linux/spinlock_api_up.h  60  #define _raw_read_lock_irq(lock) __LOCK_IRQ(lock)
_raw_write_lock_irq  macro  include/linux/spinlock_api_up.h  61  #define _raw_write_lock_irq(lock) __LOCK_IRQ(lock)
_raw_read_lock_irqsave  macro  include/linux/spinlock_api_up.h  63  #define _raw_read_lock_irqsave(lock,flags) __LOCK_IRQSAVE(lock,flags)
_raw_write_lock_irqsave  macro  include/linux/spinlock_api_up.h  64  #define _raw_write_lock_irqsave(lock,flags) __LOCK_IRQSAVE(lock,flags)
_raw_read_trylock  macro  include/linux/spinlock_api_up.h  66  #define _raw_read_trylock(lock) ({ __LOCK(lock); 1; })
_raw_write_trylock  macro  include/linux/spinlock_api_up.h  67  #define _raw_write_trylock(lock) ({ __LOCK(lock); 1; })
_raw_read_unlock  macro  include/linux/spinlock_api_up.h  70  #define _raw_read_unlock(lock) __UNLOCK(lock)
_raw_write_unlock  macro  include/linux/spinlock_api_up.h  71  #define _raw_write_unlock(lock) __UNLOCK(lock)
_raw_write_unlock_bh  macro  include/linux/spinlock_api_up.h  73  #define _raw_write_unlock_bh(lock) __UNLOCK_BH(lock)
_raw_read_unlock_bh  macro  include/linux/spinlock_api_up.h  74  #define _raw_read_unlock_bh(lock) __UNLOCK_BH(lock)
_raw_read_unlock_irq  macro  include/linux/spinlock_api_up.h  76  #define _raw_read_unlock_irq(lock) __UNLOCK_IRQ(lock)
_raw_write_unlock_irq  macro  include/linux/spinlock_api_up.h  77  #define _raw_write_unlock_irq(lock) __UNLOCK_IRQ(lock)
_raw_read_unlock_irqrestore  macro  include/linux/spinlock_api_up.h  80  #define _raw_read_unlock_irqrestore(lock,flags) __UNLOCK_IRQRESTORE(lock, flags)
_raw_write_unlock_irqrestore  macro  include/linux/spinlock_api_up.h  82  #define _raw_write_unlock_irqrestore(lock,flags) __UNLOCK_IRQRESTORE(lock, flags)
